<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub C Daily Trending</title>
    <description>Daily Trending of C in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:29:27 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>openwrt/openwrt</title>
      <link>https://github.com/openwrt/openwrt</link>
      <description>&lt;p&gt;This repository is a mirror of https://git.openwrt.org/openwrt/openwrt.git It is for reference only and is not active for check-ins. We will continue to accept Pull Requests here. They will be merged via staging trees then into openwrt.git.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/openwrt/openwrt/main/include/logo.png&quot; alt=&quot;OpenWrt logo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenWrt Project is a Linux operating system targeting embedded devices. Instead of trying to create a single, static firmware, OpenWrt provides a fully writable filesystem with package management. This frees you from the application selection and configuration provided by the vendor and allows you to customize the device through the use of packages to suit any application. For developers, OpenWrt is the framework to build an application without having to build a complete firmware around it; for users this means the ability for full customization, to use the device in ways never envisioned.&lt;/p&gt; 
&lt;p&gt;Sunshine!&lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;p&gt;Built firmware images are available for many architectures and come with a package selection to be used as WiFi home router. To quickly find a factory image usable to migrate from a vendor stock firmware to OpenWrt, try the &lt;em&gt;Firmware Selector&lt;/em&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://firmware-selector.openwrt.org/&quot;&gt;OpenWrt Firmware Selector&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If your device is supported, please follow the &lt;strong&gt;Info&lt;/strong&gt; link to see install instructions or consult the support resources listed below.&lt;/p&gt; 
&lt;h2&gt;&lt;/h2&gt; 
&lt;p&gt;An advanced user may require additional or specific package. (Toolchain, SDK, ...) For everything else than simple firmware download, try the wiki download page:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/downloads&quot;&gt;OpenWrt Wiki Download&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or macOS system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;You need the following tools to compile OpenWrt, the package names vary between distributions. A complete list with distribution specific packages is found in the &lt;a href=&quot;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&quot;&gt;Build System Setup&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;binutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-dev
make4.1+ perl python3.7+ rsync subversion unzip which
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Related Repositories&lt;/h3&gt; 
&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the OpenWrt package manager called &lt;code&gt;opkg&lt;/code&gt;. If you&#39;re looking to develop the web interface or port packages to OpenWrt, please find the fitting repository below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/luci&quot;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/packages&quot;&gt;OpenWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/routing&quot;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/video&quot;&gt;OpenWrt Video&lt;/a&gt;: Packages specifically focused on display servers and clients (Xorg and Wayland).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support Information&lt;/h2&gt; 
&lt;p&gt;For a list of supported devices see the &lt;a href=&quot;https://openwrt.org/supported_devices&quot;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-quick-start/start&quot;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/start&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-developer/start&quot;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/techref/start&quot;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Support Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forum.openwrt.org&quot;&gt;Forum&lt;/a&gt;: For usage, projects, discussions and hardware advise.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://webchat.oftc.net/#openwrt&quot;&gt;Support Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developer Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bugs.openwrt.org&quot;&gt;Bug Reports&lt;/a&gt;: Report bugs in OpenWrt&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lists.openwrt.org/mailman/listinfo/openwrt-devel&quot;&gt;Dev Mailing List&lt;/a&gt;: Send patches&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://webchat.oftc.net/#openwrt-devel&quot;&gt;Dev Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt-devel&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;OpenWrt is licensed under GPL-2.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>espressif/esp-idf</title>
      <link>https://github.com/espressif/esp-idf</link>
      <description>&lt;p&gt;Espressif IoT Development Framework. Official development framework for Espressif SoCs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espressif IoT Development Framework&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/README_CN.md&quot;&gt;中文版&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS.&lt;/p&gt; 
&lt;h1&gt;ESP-IDF Release Support Schedule&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://dl.espressif.com/dl/esp-idf/support-periods.svg?v=1&quot; alt=&quot;Support Schedule&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/SUPPORT_POLICY.md&quot;&gt;the support policy&lt;/a&gt; and &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&quot;&gt;the documentation&lt;/a&gt; for more information about ESP-IDF versions.&lt;/li&gt; 
 &lt;li&gt;Please see the &lt;a href=&quot;https://www.espressif.com/en/support/documents/advisories?keys=&amp;amp;field_type_of_advisory_tid%5B%5D=817&quot;&gt;End-of-Life Advisories&lt;/a&gt; for information about ESP-IDF releases with discontinued support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;ESP-IDF Release and SoC Compatibility&lt;/h1&gt; 
&lt;p&gt;The following table shows ESP-IDF support of Espressif SoCs where &lt;img src=&quot;https://img.shields.io/badge/-preview-orange&quot; alt=&quot;alt text&quot; title=&quot;preview&quot;&gt; and &lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt; denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Chip&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.0&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.1&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.2&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.3&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.4&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-S2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C3&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-S3&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32_S3&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32-C2&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C6&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32_C6&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-H2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32_H2&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-P4&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32-P4&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C5&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-preview-orange&quot; alt=&quot;alt text&quot; title=&quot;preview&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32-C5&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C61&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-preview-orange&quot; alt=&quot;alt text&quot; title=&quot;preview&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32-c61&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;There are variants of revisions for a series of chips. See &lt;a href=&quot;https://github.com/espressif/esp-idf/raw/master/COMPATIBILITY.md&quot;&gt;Compatibility Between ESP-IDF Releases and Revisions of Espressif SoCs&lt;/a&gt; for the details of the compatibility between ESP-IDF and chip revisions.&lt;/p&gt; 
&lt;p&gt;Espressif SoCs released before 2016 (ESP8266 and ESP8285) are supported by &lt;a href=&quot;https://github.com/espressif/ESP8266_RTOS_SDK&quot;&gt;RTOS SDK&lt;/a&gt; instead.&lt;/p&gt; 
&lt;h1&gt;Developing With ESP-IDF&lt;/h1&gt; 
&lt;h2&gt;Setting Up ESP-IDF&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://idf.espressif.com/&quot;&gt;https://idf.espressif.com/&lt;/a&gt; for links to detailed instructions on how to set up the ESP-IDF depending on chip you use.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each SoC series and each ESP-IDF release has its own documentation. Please see Section &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&quot;&gt;Versions&lt;/a&gt; on how to find documentation and how to checkout specific release of ESP-IDF.&lt;/p&gt; 
&lt;h3&gt;Non-GitHub forks&lt;/h3&gt; 
&lt;p&gt;ESP-IDF uses relative locations as its submodules URLs (&lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/.gitmodules&quot;&gt;.gitmodules&lt;/a&gt;). So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/tools/set-submodules-to-github.sh&quot;&gt;tools/set-submodules-to-github.sh&lt;/a&gt; after git clone.&lt;/p&gt; 
&lt;p&gt;The script sets absolute URLs for all submodules, allowing &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to complete. If cloning ESP-IDF from GitHub, this step is not needed.&lt;/p&gt; 
&lt;h2&gt;Finding a Project&lt;/h2&gt; 
&lt;p&gt;As well as the &lt;a href=&quot;https://github.com/espressif/esp-idf-template&quot;&gt;esp-idf-template&lt;/a&gt; project mentioned in Getting Started, ESP-IDF comes with some example projects in the &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/examples&quot;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; 
&lt;p&gt;Once you&#39;ve found the project you want to work with, change to its directory and you can configure and build it.&lt;/p&gt; 
&lt;p&gt;To start your own project based on an example, copy the example project directory outside of the ESP-IDF directory.&lt;/p&gt; 
&lt;h1&gt;Quick Reference&lt;/h1&gt; 
&lt;p&gt;See the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects:&lt;/p&gt; 
&lt;h2&gt;Setup Build Environment&lt;/h2&gt; 
&lt;p&gt;(See the Getting Started guide listed above for a full list of required steps with more details.)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install host build dependencies mentioned in the Getting Started guide.&lt;/li&gt; 
 &lt;li&gt;Run the install script to set up the build environment. The options include &lt;code&gt;install.bat&lt;/code&gt; or &lt;code&gt;install.ps1&lt;/code&gt; for Windows, and &lt;code&gt;install.sh&lt;/code&gt; or &lt;code&gt;install.fish&lt;/code&gt; for Unix shells.&lt;/li&gt; 
 &lt;li&gt;Run the export script on Windows (&lt;code&gt;export.bat&lt;/code&gt;) or source it on Unix (&lt;code&gt;source export.sh&lt;/code&gt;) in every shell environment before using ESP-IDF.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuring the Project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;idf.py set-target &amp;lt;chip_name&amp;gt;&lt;/code&gt; sets the target of the project to &lt;code&gt;&amp;lt;chip_name&amp;gt;&lt;/code&gt;. Run &lt;code&gt;idf.py set-target&lt;/code&gt; without any arguments to see a list of supported targets.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;idf.py menuconfig&lt;/code&gt; opens a text-based configuration menu where you can configure the project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Compiling the Project&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;idf.py build&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;... will compile app, bootloader and generate a partition table based on the config.&lt;/p&gt; 
&lt;h2&gt;Flashing the Project&lt;/h2&gt; 
&lt;p&gt;When the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;idf.py -p PORT flash&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Replace PORT with the name of your serial port (like &lt;code&gt;COM3&lt;/code&gt; on Windows, &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; on Linux, or &lt;code&gt;/dev/cu.usbserial-X&lt;/code&gt; on MacOS. If the &lt;code&gt;-p&lt;/code&gt; option is left out, &lt;code&gt;idf.py flash&lt;/code&gt; will try to flash the first available serial port.&lt;/p&gt; 
&lt;p&gt;This will flash the entire project (app, bootloader and partition table) to a new chip. The settings for serial port flashing can be configured with &lt;code&gt;idf.py menuconfig&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You don&#39;t need to run &lt;code&gt;idf.py build&lt;/code&gt; before running &lt;code&gt;idf.py flash&lt;/code&gt;, &lt;code&gt;idf.py flash&lt;/code&gt; will automatically rebuild anything which needs it.&lt;/p&gt; 
&lt;h2&gt;Viewing Serial Output&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;idf.py monitor&lt;/code&gt; target uses the &lt;a href=&quot;https://github.com/espressif/esp-idf-monitor&quot;&gt;esp-idf-monitor tool&lt;/a&gt; to display serial output from Espressif SoCs. esp-idf-monitor also has a range of features to decode crash output and interact with the device. &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&quot;&gt;Check the documentation page for details&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Exit the monitor by typing Ctrl-].&lt;/p&gt; 
&lt;p&gt;To build, flash and monitor output in one pass, you can run:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;idf.py flash monitor&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Compiling &amp;amp; Flashing Only the App&lt;/h2&gt; 
&lt;p&gt;After the initial flash, you may just want to build and flash just your app, not the bootloader and partition table:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;idf.py app&lt;/code&gt; - build just the app.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; - flash just the app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; will automatically rebuild the app if any source files have changed.&lt;/p&gt; 
&lt;p&gt;(In normal development there&#39;s no downside to reflashing the bootloader and partition table each time, if they haven&#39;t changed.)&lt;/p&gt; 
&lt;h2&gt;Erasing Flash&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;idf.py flash&lt;/code&gt; target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run &lt;code&gt;idf.py erase-flash&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This can be combined with other targets, ie &lt;code&gt;idf.py -p PORT erase-flash flash&lt;/code&gt; will erase everything and then re-flash the new app, bootloader and partition table.&lt;/p&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Documentation for the latest version: &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/&quot;&gt;https://docs.espressif.com/projects/esp-idf/&lt;/a&gt;. This documentation is built from the &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/docs&quot;&gt;docs directory&lt;/a&gt; of this repository.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://youtu.be/J8zc8mMNKtc?feature=shared&quot;&gt;Beginner&#39;s Guide to Key Concepts and Resources of ESP-IDF&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://esp32.com/&quot;&gt;esp32.com forum&lt;/a&gt; is a place to ask questions and find community resources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/issues&quot;&gt;Check the Issues section on github&lt;/a&gt; if you find a bug or have a feature request. Please check existing Issues before opening a new one.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;re interested in contributing to ESP-IDF, please check the &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html&quot;&gt;Contributions Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>arendst/Tasmota</title>
      <link>https://github.com/arendst/Tasmota</link>
      <description>&lt;p&gt;Alternative firmware for ESP8266 and ESP32 based devices with easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX. Full documentation at&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/arendst/Tasmota/development/tools/logo/TASMOTA_FullLogo_Vector.svg#gh-light-mode-only&quot; alt=&quot;Tasmota logo&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/arendst/Tasmota/development/tools/logo/TASMOTA_FullLogo_Vector_White.svg#gh-dark-mode-only&quot; alt=&quot;Tasmota logo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Alternative firmware for &lt;a href=&quot;https://en.wikipedia.org/wiki/ESP8266&quot;&gt;ESP8266&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/ESP32&quot;&gt;ESP32&lt;/a&gt; based devices with &lt;strong&gt;easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX&lt;/strong&gt;. &lt;em&gt;Written for PlatformIO.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://ota.tasmota.com/tasmota/release&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/arendst/Tasmota.svg?sanitize=true&quot; alt=&quot;GitHub version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/arendst/Tasmota/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/arendst/Tasmota/total.svg?sanitize=true&quot; alt=&quot;GitHub download&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/arendst/Tasmota/development/LICENSE.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/arendst/Tasmota.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/Ks2Kzd4&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/479389167382691863.svg?logo=discord&amp;amp;logoColor=white&amp;amp;color=5865F2&amp;amp;label=Discord&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitpod.io/#https://github.com/arendst/Tasmota&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&quot; alt=&quot;Gitpod Ready-to-Code&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;In light of current events we like to support the people behind &lt;em&gt;PlatformIO Project&lt;/em&gt;, especially Ivan Kravets, and wish them the strength to help stop the war. See &lt;a href=&quot;https://community.platformio.org/t/platformio-is-ukrainian-project-please-help-us-stop-the-war/26330&quot;&gt;platformio-is-ukrainian-project-please-help-us-stop-the-war&lt;/a&gt; for what you can do.&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Easy install&lt;/h2&gt; 
&lt;p&gt;Easy initial installation of Tasmota can be performed using the &lt;a href=&quot;https://tasmota.github.io/install/&quot;&gt;Tasmota WebInstaller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you like &lt;strong&gt;Tasmota&lt;/strong&gt;, give it a star, or fork it and contribute!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/arendst/Tasmota.svg?style=social&amp;amp;label=Star&quot; alt=&quot;GitHub stars&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/arendst/Tasmota/network&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/forks/arendst/Tasmota.svg?style=social&amp;amp;label=Fork&quot; alt=&quot;GitHub forks&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/tasmota&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&quot; alt=&quot;donate&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/arendst/Tasmota/raw/master/RELEASENOTES.md&quot;&gt;RELEASENOTES.md&lt;/a&gt; for release information.&lt;/p&gt; 
&lt;p&gt;Firmware binaries can be downloaded from &lt;a href=&quot;http://ota.tasmota.com/tasmota/release/&quot;&gt;http://ota.tasmota.com/tasmota/release/&lt;/a&gt; or &lt;a href=&quot;http://ota.tasmota.com/tasmota32/release/&quot;&gt;http://ota.tasmota.com/tasmota32/release/&lt;/a&gt; for ESP32 binaries.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/development%20version-v14.5.x.x-blue.svg?sanitize=true&quot; alt=&quot;Dev Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://ota.tasmota.com/tasmota/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/download-development-yellow.svg?sanitize=true&quot; alt=&quot;Download Dev&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/arendst/Tasmota/actions/workflows/build_all_the_things.yml&quot;&gt;&lt;img src=&quot;https://github.com/arendst/Tasmota/actions/workflows/build_all_the_things.yml/badge.svg?sanitize=true&quot; alt=&quot;Tasmota CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/arendst/Tasmota/actions/workflows/Tasmota_build_devel.yml&quot;&gt;&lt;img src=&quot;https://github.com/arendst/Tasmota/actions/workflows/Tasmota_build_devel.yml/badge.svg?sanitize=true&quot; alt=&quot;Build_development&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/arendst/Tasmota/development/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt; for detailed change information.&lt;/p&gt; 
&lt;p&gt;Unless your Tasmota powered device exhibits a problem or lacks a feature that you need, leave your device alone - it works so don’t make unnecessary changes! If the release version (i.e., the master branch) exhibits unexpected behaviour for your device and configuration, you should upgrade to the latest development version instead to see if your problem is resolved as some bugs in previous releases or development builds may already have been resolved.&lt;/p&gt; 
&lt;p&gt;Every commit made to the development branch, which is compiling successfully, will post new binary files at &lt;a href=&quot;http://ota.tasmota.com/tasmota/&quot;&gt;http://ota.tasmota.com/tasmota/&lt;/a&gt; (this web address can be used for OTA updates too). It is important to note that these binaries are based on the current development codebase. These commits are tested as much as is possible and are typically quite stable. However, it is infeasible to test on the hundreds of different types of devices with all the available configuration options permitted.&lt;/p&gt; 
&lt;p&gt;Note that there is a chance, as with any upgrade, that the device may not function as expected. You must always account for the possibility that you may need to flash the device via the serial programming interface if the OTA upgrade fails. Even with the master release, you should always attempt to test the device or a similar prototype before upgrading a device which is in production or is hard to reach. And, as always, make a backup of the device configuration before beginning any firmware update.&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;DANGER OF ELECTROCUTION&lt;/strong&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;If your device connects to mains electricity (AC power) there is danger of electrocution if not installed properly. If you don&#39;t know how to install it, please call an electrician (&lt;em&gt;&lt;strong&gt;Beware:&lt;/strong&gt;&lt;/em&gt; certain countries prohibit installation without a licensed electrician present). Remember: &lt;em&gt;&lt;strong&gt;SAFETY FIRST&lt;/strong&gt;&lt;/em&gt;. It is not worth the risk to yourself, your family and your home if you don&#39;t know exactly what you are doing. Never tinker or try to flash a device using the serial programming interface while it is connected to MAINS ELECTRICITY (AC power).&lt;/p&gt; 
&lt;p&gt;We don&#39;t take any responsibility nor liability for using this software nor for the installation or any tips, advice, videos, etc. given by any member of this site or any related site.&lt;/p&gt; 
&lt;h2&gt;Note&lt;/h2&gt; 
&lt;p&gt;Please do not ask to add new devices unless it requires additional code for new features. If the device is not listed as a module, try using &lt;a href=&quot;https://tasmota.github.io/docs/Templates&quot;&gt;Templates&lt;/a&gt; first. If it is not listed in the &lt;a href=&quot;http://templates.blakadder.com&quot;&gt;Tasmota Device Templates Repository&lt;/a&gt; create your own &lt;a href=&quot;https://tasmota.github.io/docs/Templates#creating-your-template&quot;&gt;Template&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Install&lt;/h2&gt; 
&lt;p&gt;Download one of the released binaries from &lt;a href=&quot;http://ota.tasmota.com/tasmota/release/&quot;&gt;http://ota.tasmota.com/tasmota/release/&lt;/a&gt; or &lt;a href=&quot;http://ota.tasmota.com/tasmota32/release/&quot;&gt;http://ota.tasmota.com/tasmota32/release/&lt;/a&gt; and flash it to your hardware &lt;a href=&quot;https://tasmota.github.io/docs/Getting-Started&quot;&gt;using our installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Important User Compilation Information&lt;/h2&gt; 
&lt;p&gt;If you want to compile Tasmota yourself keep in mind the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For ESP8285 based devices only Flash Mode &lt;strong&gt;DOUT&lt;/strong&gt; is supported. Do not use Flash Mode DIO / QIO / QOUT as it might seem to brick your device.&lt;/li&gt; 
 &lt;li&gt;For ESP8285 based devices Tasmota uses a 1M linker script WITHOUT spiffs &lt;strong&gt;1M (no SPIFFS)&lt;/strong&gt; for optimal code space.&lt;/li&gt; 
 &lt;li&gt;To make compile time changes to Tasmota use the &lt;code&gt;user_config_override.h&lt;/code&gt; file. It assures keeping your custom settings when you download and compile a new version. You have to make a copy from the provided &lt;code&gt;user_config_override_sample.h&lt;/code&gt; file and add your setting overrides.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration Information&lt;/h2&gt; 
&lt;p&gt;Please refer to the installation and configuration articles in our &lt;a href=&quot;https://tasmota.github.io/docs&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Migration Information&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://tasmota.github.io/docs/Upgrading#migration-path&quot;&gt;migration path&lt;/a&gt; for instructions how to migrate to a major version.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Do not upgrade from minimal to minimal version. It will most likely fail at some point and will require flashing via serial.&lt;/strong&gt; If you do have to use minimal versions, always OTA to a full version of the same release before applying next minimal version.&lt;/p&gt; 
&lt;p&gt;Pay attention to the following version breaks due to dynamic settings updates:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 3.9.x&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 4.x&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 5.14&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 6.7.1&lt;/strong&gt; (&lt;a href=&quot;http://ota.tasmota.com/tasmota/release_6.7.1/sonoff.bin&quot;&gt;http://ota.tasmota.com/tasmota/release_6.7.1/sonoff.bin&lt;/a&gt;) - NOTICE underscore as a dash is not supported in older versions&lt;/li&gt; 
 &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 7.2.0&lt;/strong&gt; (&lt;a href=&quot;http://ota.tasmota.com/tasmota/release-7.2.0/tasmota.bin&quot;&gt;http://ota.tasmota.com/tasmota/release-7.2.0/tasmota.bin&lt;/a&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;--- Major change in parameter storage layout ---&lt;/p&gt; 
&lt;ol start=&quot;6&quot;&gt; 
 &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 8.5.1&lt;/strong&gt; (&lt;a href=&quot;http://ota.tasmota.com/tasmota/release-8.5.1/tasmota.bin&quot;&gt;http://ota.tasmota.com/tasmota/release-8.5.1/tasmota.bin&lt;/a&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;--- Major change in internal GPIO function representation ---&lt;/p&gt; 
&lt;ol start=&quot;7&quot;&gt; 
 &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 9.1&lt;/strong&gt; (&lt;a href=&quot;http://ota.tasmota.com/tasmota/release-9.1.0/tasmota.bin.gz&quot;&gt;http://ota.tasmota.com/tasmota/release-9.1.0/tasmota.bin.gz&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Upgrade to &lt;strong&gt;latest release&lt;/strong&gt; (&lt;a href=&quot;http://ota.tasmota.com/tasmota/release/tasmota.bin.gz&quot;&gt;http://ota.tasmota.com/tasmota/release/tasmota.bin.gz&lt;/a&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;While fallback or downgrading is common practice it was never supported due to Settings additions or changes in newer releases. Starting with release &lt;strong&gt;v9.1.0 Imogen&lt;/strong&gt; the internal GPIO function representation has changed in such a way that fallback is only possible to the latest GPIO configuration before installing &lt;strong&gt;v9.1.0&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Support Information&lt;/h2&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/5904370/68332933-e6e5a600-00d7-11ea-885d-50395f7239a1.png&quot; width=&quot;150&quot; align=&quot;right&quot;&gt; 
&lt;p&gt;For a database of supported devices see &lt;a href=&quot;https://templates.blakadder.com&quot;&gt;Tasmota Device Templates Repository&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you&#39;re looking for support on &lt;strong&gt;Tasmota&lt;/strong&gt; there are some options available:&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tasmota.github.io/docs&quot;&gt;Documentation Site&lt;/a&gt;: For information on how to flash Tasmota, configure, use and expand it&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tasmota.github.io/docs/FAQ/&quot;&gt;FAQ and Troubleshooting&lt;/a&gt;: For information on common problems and solutions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tasmota.github.io/docs/Commands&quot;&gt;Commands Information&lt;/a&gt;: For information on all the commands supported by Tasmota.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Support&#39;s Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota/discussions&quot;&gt;Tasmota Discussions&lt;/a&gt;: For Tasmota usage questions, Feature Requests and Projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/Ks2Kzd4&quot;&gt;Tasmota Users Chat&lt;/a&gt;: For support, troubleshooting and general questions. You have better chances to get fast answers from members of the Tasmota Community.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota/issues&quot;&gt;Search in Issues&lt;/a&gt;: You might find an answer to your question by searching current or closed issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota/issues/new?template=Bug_report.md&quot;&gt;Software Problem Report&lt;/a&gt;: For reporting problems of Tasmota Software.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;You can contribute to Tasmota by&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Providing Pull Requests (Features, Proof of Concepts, Language files or Fixes)&lt;/li&gt; 
 &lt;li&gt;Testing new released features and report issues&lt;/li&gt; 
 &lt;li&gt;Donating to acquire hardware for testing and implementing or out of gratitude&lt;/li&gt; 
 &lt;li&gt;Contributing missing &lt;a href=&quot;https://tasmota.github.io/docs&quot;&gt;documentation&lt;/a&gt; for features and devices&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://paypal.me/tasmota&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&quot; alt=&quot;donate&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;People helping to keep the show on the road:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sfromis providing extensive user support&lt;/li&gt; 
 &lt;li&gt;Barbudor providing user support and code fixes and additions&lt;/li&gt; 
 &lt;li&gt;David Lang providing initial issue resolution and code optimizations&lt;/li&gt; 
 &lt;li&gt;Heiko Krupp for his IRSend, HTU21, SI70xx and Wemo/Hue emulation drivers&lt;/li&gt; 
 &lt;li&gt;Wiktor Schmidt for Travis CI implementation&lt;/li&gt; 
 &lt;li&gt;Thom Dietrich for PlatformIO optimizations&lt;/li&gt; 
 &lt;li&gt;Marinus van den Broek for his EspEasy groundwork&lt;/li&gt; 
 &lt;li&gt;Pete Ba for more user friendly energy monitor calibration&lt;/li&gt; 
 &lt;li&gt;Lobradov providing compile optimization tips&lt;/li&gt; 
 &lt;li&gt;Flexiti for his initial timer implementation&lt;/li&gt; 
 &lt;li&gt;reloxx13 for his &lt;a href=&quot;https://github.com/reloxx13/TasmoAdmin&quot;&gt;TasmoAdmin&lt;/a&gt; management tool&lt;/li&gt; 
 &lt;li&gt;Joachim Banzhaf for his TSL2561 library and driver&lt;/li&gt; 
 &lt;li&gt;Andre Thomas for providing many drivers&lt;/li&gt; 
 &lt;li&gt;Gijs Noorlander for his MHZ19, SenseAir and updated PubSubClient drivers&lt;/li&gt; 
 &lt;li&gt;Erik Montnemery for his HomeAssistant Discovery concept and many code tuning tips&lt;/li&gt; 
 &lt;li&gt;Federico Leoni for continued HomeAssistant Discovery support&lt;/li&gt; 
 &lt;li&gt;Aidan Mountford for his HSB support&lt;/li&gt; 
 &lt;li&gt;Daniel Ztolnai for his Serial Bridge implementation&lt;/li&gt; 
 &lt;li&gt;Gerhard Mutz for multiple sensor &amp;amp; display drivers, Sunrise/Sunset, and scripting&lt;/li&gt; 
 &lt;li&gt;Nuno Ferreira for his HC-SR04 driver&lt;/li&gt; 
 &lt;li&gt;Adrian Scillato for his (security)fixes and implementing and maintaining KNX&lt;/li&gt; 
 &lt;li&gt;Gennaro Tortone for implementing and maintaining Eastron drivers&lt;/li&gt; 
 &lt;li&gt;Raymond Mouthaan for managing Wemos Wiki information&lt;/li&gt; 
 &lt;li&gt;Norbert Richter for his &lt;a href=&quot;https://github.com/tasmota/decode-config&quot;&gt;decode-config.py&lt;/a&gt; tool&lt;/li&gt; 
 &lt;li&gt;Joel Stein, digiblur and Shantur Rathore for their Tuya research and driver&lt;/li&gt; 
 &lt;li&gt;Frogmore42 for providing many issue answers&lt;/li&gt; 
 &lt;li&gt;Jason2866 for platformio support and providing many issue answers&lt;/li&gt; 
 &lt;li&gt;Blakadder for managing the document site and providing template management&lt;/li&gt; 
 &lt;li&gt;Stephan Hadinger for refactoring light driver, enhancing HueEmulation, LVGL, Zigbee and Berry support&lt;/li&gt; 
 &lt;li&gt;tmo for designing the official Tasmota logo&lt;/li&gt; 
 &lt;li&gt;Stefan Bode for his Shutter and Deep sleep drivers&lt;/li&gt; 
 &lt;li&gt;Jacek Ziółkowski for his &lt;a href=&quot;https://github.com/jziolkowski/tdm&quot;&gt;TDM&lt;/a&gt; management tool and &lt;a href=&quot;https://github.com/tasmota/tasmotizer&quot;&gt;Tasmotizer&lt;/a&gt; flashing tool&lt;/li&gt; 
 &lt;li&gt;Christian Staars for NRF24L01 and HM-10 Bluetooth sensor support&lt;/li&gt; 
 &lt;li&gt;Paul Diem for UDP Group communication support&lt;/li&gt; 
 &lt;li&gt;Jörg Schüler-Maroldt for his initial ESP32 port&lt;/li&gt; 
 &lt;li&gt;Javier Arigita for his thermostat driver&lt;/li&gt; 
 &lt;li&gt;Simon Hailes for ESP32 Bluetooth extensions&lt;/li&gt; 
 &lt;li&gt;Many more providing Tips, Wips, Pocs, PRs and Donations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This program is licensed under GPL-3.0-only&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>brunodev85/winlator</title>
      <link>https://github.com/brunodev85/winlator</link>
      <description>&lt;p&gt;Android application for running Windows applications with Wine and Box86/Box64&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/brunodev85/winlator/main/logo.png&quot; width=&quot;376&quot; height=&quot;128&quot; alt=&quot;Winlator Logo&quot;&gt; &lt;/p&gt; 
&lt;h1&gt;Winlator&lt;/h1&gt; 
&lt;p&gt;Winlator is an Android application that lets you to run Windows (x86_64) applications with Wine and Box86/Box64.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download and install the APK from &lt;a href=&quot;https://github.com/brunodev85/winlator/releases&quot;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Launch the app and wait for the installation process to finish&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ETYDgKz4jBQ&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/ETYDgKz4jBQ/3.jpg&quot; alt=&quot;Play on Youtube&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=9E4wnKf2OsI&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/9E4wnKf2OsI/2.jpg&quot; alt=&quot;Play on Youtube&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=czEn4uT3Ja8&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/czEn4uT3Ja8/2.jpg&quot; alt=&quot;Play on Youtube&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=eD36nxfT_Z0&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/eD36nxfT_Z0/2.jpg&quot; alt=&quot;Play on Youtube&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;Useful Tips&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are experiencing performance issues, try changing the Box64 preset to &lt;code&gt;Performance&lt;/code&gt; in Container Settings -&amp;gt; Advanced Tab.&lt;/li&gt; 
 &lt;li&gt;For applications that use .NET Framework, try installing &lt;code&gt;Wine Mono&lt;/code&gt; found in Start Menu -&amp;gt; System Tools -&amp;gt; Installers.&lt;/li&gt; 
 &lt;li&gt;If some older games don&#39;t open, try adding the environment variable &lt;code&gt;MESA_EXTENSION_MAX_YEAR=2003&lt;/code&gt; in Container Settings -&amp;gt; Environment Variables.&lt;/li&gt; 
 &lt;li&gt;Try running the games using the shortcut on the Winlator home screen, there you can define individual settings for each game.&lt;/li&gt; 
 &lt;li&gt;To display low resolution games correctly, try to enabling the &lt;code&gt;Force Fullscreen&lt;/code&gt; option in the shortcut settings.&lt;/li&gt; 
 &lt;li&gt;To improve stability in games that uses Unity Engine, try changing the Box64 preset to &lt;code&gt;Stability&lt;/code&gt; or in the shortcut settings add the exec argument &lt;code&gt;-force-gfx-direct&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Information&lt;/h1&gt; 
&lt;p&gt;This project has been in constant development since version 1.0, the current app source code is up to version 7.1, I do not update this repository frequently precisely to avoid unofficial releases before the official releases of Winlator.&lt;/p&gt; 
&lt;h1&gt;Credits and Third-party apps&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;GLIBC Patches by &lt;a href=&quot;https://github.com/termux-pacman/glibc-packages&quot;&gt;Termux Pacman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wine (&lt;a href=&quot;https://www.winehq.org/&quot;&gt;winehq.org&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Box86/Box64 by &lt;a href=&quot;https://github.com/ptitSeb&quot;&gt;ptitseb&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mesa (Turnip/Zink/VirGL) (&lt;a href=&quot;https://www.mesa3d.org&quot;&gt;mesa3d.org&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;DXVK (&lt;a href=&quot;https://github.com/doitsujin/dxvk&quot;&gt;github.com/doitsujin/dxvk&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;VKD3D (&lt;a href=&quot;https://gitlab.winehq.org/wine/vkd3d&quot;&gt;gitlab.winehq.org/wine/vkd3d&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;D8VK (&lt;a href=&quot;https://github.com/AlpyneDreams/d8vk&quot;&gt;github.com/AlpyneDreams/d8vk&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;CNC DDraw (&lt;a href=&quot;https://github.com/FunkyFr3sh/cnc-ddraw&quot;&gt;github.com/FunkyFr3sh/cnc-ddraw&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ubuntu RootFs (&lt;a href=&quot;https://releases.ubuntu.com/focal&quot;&gt;Focal Fossa&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;PRoot (&lt;a href=&quot;https://proot-me.github.io&quot;&gt;proot-me.github.io&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Many thanks to &lt;a href=&quot;https://github.com/ptitSeb&quot;&gt;ptitSeb&lt;/a&gt;, &lt;a href=&quot;https://blogs.igalia.com/dpiliaiev/tags/mesa/&quot;&gt;Danylo&lt;/a&gt;, &lt;a href=&quot;https://github.com/Maxython&quot;&gt;Max Ivan&lt;/a&gt;, &lt;a href=&quot;https://github.com/twaik&quot;&gt;Twaik Yont&lt;/a&gt;, &lt;a href=&quot;https://github.com/alexvorxx&quot;&gt;alexvorxx&lt;/a&gt; and others.&lt;br&gt; Thank you to all the people who believe in this project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DaveGamble/cJSON</title>
      <link>https://github.com/DaveGamble/cJSON</link>
      <description>&lt;p&gt;Ultralightweight JSON parser in ANSI C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cJSON&lt;/h1&gt; 
&lt;p&gt;Ultralightweight JSON parser in ANSI C.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#usage&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#welcome-to-cjson&quot;&gt;Welcome to cJSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#building&quot;&gt;Building&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#copying-the-source&quot;&gt;Copying the source&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#cmake&quot;&gt;CMake&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#makefile&quot;&gt;Makefile&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#meson&quot;&gt;Meson&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#Vcpkg&quot;&gt;Vcpkg&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#including-cjson&quot;&gt;Including cJSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#data-structure&quot;&gt;Data Structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#working-with-the-data-structure&quot;&gt;Working with the data structure&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#basic-types&quot;&gt;Basic types&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#arrays&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#objects&quot;&gt;Objects&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing-json&quot;&gt;Parsing JSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing-json&quot;&gt;Printing JSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#example&quot;&gt;Example&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing&quot;&gt;Printing&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing&quot;&gt;Parsing&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#caveats&quot;&gt;Caveats&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#zero-character&quot;&gt;Zero Character&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#character-encoding&quot;&gt;Character Encoding&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#c-standard&quot;&gt;C Standard&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#floating-point-numbers&quot;&gt;Floating Point Numbers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#deep-nesting-of-arrays-and-objects&quot;&gt;Deep Nesting Of Arrays And Objects&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#thread-safety&quot;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#case-sensitivity&quot;&gt;Case Sensitivity&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#duplicate-object-members&quot;&gt;Duplicate Object Members&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#enjoy-cjson&quot;&gt;Enjoy cJSON!&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Copyright (c) 2009-2017 Dave Gamble and cJSON contributors&lt;/p&gt; 
 &lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
 &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
 &lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Welcome to cJSON.&lt;/h3&gt; 
&lt;p&gt;cJSON aims to be the dumbest possible parser that you can get your job done with. It&#39;s a single file of C, and a single header file.&lt;/p&gt; 
&lt;p&gt;JSON is described best here: &lt;a href=&quot;http://www.json.org/&quot;&gt;http://www.json.org/&lt;/a&gt; It&#39;s like XML, but fat-free. You use it to move data around, store things, or just generally represent your program&#39;s state.&lt;/p&gt; 
&lt;p&gt;As a library, cJSON exists to take away as much legwork as it can, but not get in your way. As a point of pragmatism (i.e. ignoring the truth), I&#39;m going to say that you can use it in one of two modes: Auto and Manual. Let&#39;s have a quick run-through.&lt;/p&gt; 
&lt;p&gt;I lifted some JSON from this page: &lt;a href=&quot;http://www.json.org/fatfree.html&quot;&gt;http://www.json.org/fatfree.html&lt;/a&gt; That page inspired me to write cJSON, which is a parser that tries to share the same philosophy as JSON itself. Simple, dumb, out of the way.&lt;/p&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;There are several ways to incorporate cJSON into your project.&lt;/p&gt; 
&lt;h4&gt;copying the source&lt;/h4&gt; 
&lt;p&gt;Because the entire library is only one C file and one header file, you can just copy &lt;code&gt;cJSON.h&lt;/code&gt; and &lt;code&gt;cJSON.c&lt;/code&gt; to your projects source and start using it.&lt;/p&gt; 
&lt;p&gt;cJSON is written in ANSI C (C89) in order to support as many platforms and compilers as possible.&lt;/p&gt; 
&lt;h4&gt;CMake&lt;/h4&gt; 
&lt;p&gt;With CMake, cJSON supports a full blown build system. This way you get the most features. CMake with an equal or higher version than 2.8.5 is supported. With CMake it is recommended to do an out of tree build, meaning the compiled files are put in a directory separate from the source files. So in order to build cJSON with CMake on a Unix platform, make a &lt;code&gt;build&lt;/code&gt; directory and run CMake inside it.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake ..
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a Makefile and a bunch of other files. You can then compile it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And install it with &lt;code&gt;make install&lt;/code&gt; if you want. By default it installs the headers &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries to &lt;code&gt;/usr/local/lib&lt;/code&gt;. It also installs files for pkg-config to make it easier to detect and use an existing installation of CMake. And it installs CMake config files, that can be used by other CMake based projects to discover the library.&lt;/p&gt; 
&lt;p&gt;You can change the build process with a list of different options that you can pass to CMake. Turn them on with &lt;code&gt;On&lt;/code&gt; and off with &lt;code&gt;Off&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_TEST=On&lt;/code&gt;: Enable building the tests. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_UTILS=On&lt;/code&gt;: Enable building cJSON_Utils. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_TARGET_EXPORT=On&lt;/code&gt;: Enable the export of CMake targets. Turn off if it makes problems. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CUSTOM_COMPILER_FLAGS=On&lt;/code&gt;: Enable custom compiler flags (currently for Clang, GCC and MSVC). Turn off if it makes problems. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_VALGRIND=On&lt;/code&gt;: Run tests with &lt;a href=&quot;http://valgrind.org&quot;&gt;valgrind&lt;/a&gt;. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_SANITIZERS=On&lt;/code&gt;: Compile cJSON with &lt;a href=&quot;https://github.com/google/sanitizers/wiki/AddressSanitizer&quot;&gt;AddressSanitizer&lt;/a&gt; and &lt;a href=&quot;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&quot;&gt;UndefinedBehaviorSanitizer&lt;/a&gt; enabled (if possible). (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_SAFE_STACK&lt;/code&gt;: Enable the &lt;a href=&quot;https://clang.llvm.org/docs/SafeStack.html&quot;&gt;SafeStack&lt;/a&gt; instrumentation pass. Currently only works with the Clang compiler. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_LIBS=On&lt;/code&gt;: Build the shared libraries. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_AND_STATIC_LIBS=On&lt;/code&gt;: Build both shared and static libraries. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=/usr&lt;/code&gt;: Set a prefix for the installation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_LOCALES=On&lt;/code&gt;: Enable the usage of localeconv method. ( on by default )&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DCJSON_OVERRIDE_BUILD_SHARED_LIBS=On&lt;/code&gt;: Enable overriding the value of &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; with &lt;code&gt;-DCJSON_BUILD_SHARED_LIBS&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_VERSION_SO&lt;/code&gt;: Enable cJSON so version. ( on by default )&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are packaging cJSON for a distribution of Linux, you would probably take these steps for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake .. -DENABLE_CJSON_UTILS=On -DENABLE_CJSON_TEST=Off -DCMAKE_INSTALL_PREFIX=/usr
make
make DESTDIR=$pkgdir install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows CMake is usually used to create a Visual Studio solution file by running it inside the Developer Command Prompt for Visual Studio, for exact steps follow the official documentation from CMake and Microsoft and use the online search engine of your choice. The descriptions of the the options above still generally apply, although not all of them work on Windows.&lt;/p&gt; 
&lt;h4&gt;Makefile&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t have CMake available, but still have GNU make. You can use the makefile to build cJSON:&lt;/p&gt; 
&lt;p&gt;Run this command in the directory with the source code and it will automatically compile static and shared libraries and a little test program (not the full test suite).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want, you can install the compiled library to your system using &lt;code&gt;make install&lt;/code&gt;. By default it will install the headers in &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries in &lt;code&gt;/usr/local/lib&lt;/code&gt;. But you can change this behavior by setting the &lt;code&gt;PREFIX&lt;/code&gt; and &lt;code&gt;DESTDIR&lt;/code&gt; variables: &lt;code&gt;make PREFIX=/usr DESTDIR=temp install&lt;/code&gt;. And uninstall them with: &lt;code&gt;make PREFIX=/usr DESTDIR=temp uninstall&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Meson&lt;/h4&gt; 
&lt;p&gt;To make cjson work in a project using meson, the libcjson dependency has to be included:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-meson&quot;&gt;project(&#39;c-json-example&#39;, &#39;c&#39;)

cjson = dependency(&#39;libcjson&#39;)

example = executable(
    &#39;example&#39;,
    &#39;example.c&#39;,
    dependencies: [cjson],
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Vcpkg&lt;/h4&gt; 
&lt;p&gt;You can download and install cJSON using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh
./vcpkg integrate install
vcpkg install cjson
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The cJSON port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h3&gt;Including cJSON&lt;/h3&gt; 
&lt;p&gt;If you installed it via CMake or the Makefile, you can include cJSON like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;cjson/cJSON.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data Structure&lt;/h3&gt; 
&lt;p&gt;cJSON represents JSON data using the &lt;code&gt;cJSON&lt;/code&gt; struct data type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/* The cJSON structure: */
typedef struct cJSON
{
    struct cJSON *next;
    struct cJSON *prev;
    struct cJSON *child;
    int type;
    char *valuestring;
    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */
    int valueint;
    double valuedouble;
    char *string;
} cJSON;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An item of this type represents a JSON value. The type is stored in &lt;code&gt;type&lt;/code&gt; as a bit-flag (&lt;strong&gt;this means that you cannot find out the type by just comparing the value of &lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt; 
&lt;p&gt;To check the type of an item, use the corresponding &lt;code&gt;cJSON_Is...&lt;/code&gt; function. It does a &lt;code&gt;NULL&lt;/code&gt; check followed by a type check and returns a boolean value if the item is of this type.&lt;/p&gt; 
&lt;p&gt;The type can be one of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Invalid&lt;/code&gt; (check with &lt;code&gt;cJSON_IsInvalid&lt;/code&gt;): Represents an invalid item that doesn&#39;t contain any value. You automatically have this type if you set the item to all zero bytes.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_False&lt;/code&gt; (check with &lt;code&gt;cJSON_IsFalse&lt;/code&gt;): Represents a &lt;code&gt;false&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_True&lt;/code&gt; (check with &lt;code&gt;cJSON_IsTrue&lt;/code&gt;): Represents a &lt;code&gt;true&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_NULL&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNull&lt;/code&gt;): Represents a &lt;code&gt;null&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Number&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNumber&lt;/code&gt;): Represents a number value. The value is stored as a double in &lt;code&gt;valuedouble&lt;/code&gt; and also in &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_String&lt;/code&gt; (check with &lt;code&gt;cJSON_IsString&lt;/code&gt;): Represents a string value. It is stored in the form of a zero terminated string in &lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Array&lt;/code&gt; (check with &lt;code&gt;cJSON_IsArray&lt;/code&gt;): Represent an array value. This is implemented by pointing &lt;code&gt;child&lt;/code&gt; to a linked list of &lt;code&gt;cJSON&lt;/code&gt; items that represent the values in the array. The elements are linked together using &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;, where the first element has &lt;code&gt;prev.next == NULL&lt;/code&gt; and the last element &lt;code&gt;next == NULL&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Object&lt;/code&gt; (check with &lt;code&gt;cJSON_IsObject&lt;/code&gt;): Represents an object value. Objects are stored same way as an array, the only difference is that the items in the object store their keys in &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Raw&lt;/code&gt; (check with &lt;code&gt;cJSON_IsRaw&lt;/code&gt;): Represents any kind of JSON that is stored as a zero terminated array of characters in &lt;code&gt;valuestring&lt;/code&gt;. This can be used, for example, to avoid printing the same static JSON over and over again to save performance. cJSON will never create this type when parsing. Also note that cJSON doesn&#39;t check if it is valid JSON.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additionally there are the following two flags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_IsReference&lt;/code&gt;: Specifies that the item that &lt;code&gt;child&lt;/code&gt; points to and/or &lt;code&gt;valuestring&lt;/code&gt; is not owned by this item, it is only a reference. So &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will only deallocate this item, not its &lt;code&gt;child&lt;/code&gt;/&lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_StringIsConst&lt;/code&gt;: This means that &lt;code&gt;string&lt;/code&gt; points to a constant string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will not try to deallocate &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Working with the data structure&lt;/h3&gt; 
&lt;p&gt;For every value type there is a &lt;code&gt;cJSON_Create...&lt;/code&gt; function that can be used to create an item of that type. All of these will allocate a &lt;code&gt;cJSON&lt;/code&gt; struct that can later be deleted with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Note that you have to delete them at some point, otherwise you will get a memory leak.&lt;br&gt; &lt;strong&gt;Important&lt;/strong&gt;: If you have added an item to an array or an object already, you &lt;strong&gt;mustn&#39;t&lt;/strong&gt; delete it with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Adding it to an array or object transfers its ownership so that when that array or object is deleted, it gets deleted as well. You also could use &lt;code&gt;cJSON_SetValuestring&lt;/code&gt; to change a &lt;code&gt;cJSON_String&lt;/code&gt;&#39;s &lt;code&gt;valuestring&lt;/code&gt;, and you needn&#39;t to free the previous &lt;code&gt;valuestring&lt;/code&gt; manually.&lt;/p&gt; 
&lt;h4&gt;Basic types&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;null&lt;/strong&gt; is created with &lt;code&gt;cJSON_CreateNull&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;booleans&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateTrue&lt;/code&gt;, &lt;code&gt;cJSON_CreateFalse&lt;/code&gt; or &lt;code&gt;cJSON_CreateBool&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;numbers&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateNumber&lt;/code&gt;. This will set both &lt;code&gt;valuedouble&lt;/code&gt; and &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;strings&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateString&lt;/code&gt; (copies the string) or with &lt;code&gt;cJSON_CreateStringReference&lt;/code&gt; (directly points to the string. This means that &lt;code&gt;valuestring&lt;/code&gt; won&#39;t be deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt; and you are responsible for its lifetime, useful for constants)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Arrays&lt;/h4&gt; 
&lt;p&gt;You can create an empty array with &lt;code&gt;cJSON_CreateArray&lt;/code&gt;. &lt;code&gt;cJSON_CreateArrayReference&lt;/code&gt; can be used to create an array that doesn&#39;t &quot;own&quot; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To add items to an array, use &lt;code&gt;cJSON_AddItemToArray&lt;/code&gt; to append items to the end. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another item, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere. To insert items in the middle, use &lt;code&gt;cJSON_InsertItemInArray&lt;/code&gt;. It will insert an item at the given 0 based index and shift all the existing items to the right.&lt;/p&gt; 
&lt;p&gt;If you want to take an item out of an array at a given index and continue using it, use &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; 
&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromArray&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, but deletes the detached item via &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also replace an item in an array in place. Either with &lt;code&gt;cJSON_ReplaceItemInArray&lt;/code&gt; using an index or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; 
&lt;p&gt;To get the size of an array, use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;. Use &lt;code&gt;cJSON_GetArrayItem&lt;/code&gt; to get an element at a given index.&lt;/p&gt; 
&lt;p&gt;Because an array is stored as a linked list, iterating it via index is inefficient (&lt;code&gt;O(n²)&lt;/code&gt;), so you can iterate over an array using the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro in &lt;code&gt;O(n)&lt;/code&gt; time complexity.&lt;/p&gt; 
&lt;h4&gt;Objects&lt;/h4&gt; 
&lt;p&gt;You can create an empty object with &lt;code&gt;cJSON_CreateObject&lt;/code&gt;. &lt;code&gt;cJSON_CreateObjectReference&lt;/code&gt; can be used to create an object that doesn&#39;t &quot;own&quot; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To add items to an object, use &lt;code&gt;cJSON_AddItemToObject&lt;/code&gt;. Use &lt;code&gt;cJSON_AddItemToObjectCS&lt;/code&gt; to add an item to an object with a name that is a constant or reference (key of the item, &lt;code&gt;string&lt;/code&gt; in the &lt;code&gt;cJSON&lt;/code&gt; struct), so that it doesn&#39;t get freed by &lt;code&gt;cJSON_Delete&lt;/code&gt;. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another object, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere.&lt;/p&gt; 
&lt;p&gt;If you want to take an item out of an object, use &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; 
&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromObjectCaseSensitive&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt; followed by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also replace an item in an object in place. Either with &lt;code&gt;cJSON_ReplaceItemInObjectCaseSensitive&lt;/code&gt; using a key or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; 
&lt;p&gt;To get the size of an object, you can use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;, this works because internally objects are stored as arrays.&lt;/p&gt; 
&lt;p&gt;If you want to access an item in an object, use &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To iterate over an object, you can use the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro the same way as for arrays.&lt;/p&gt; 
&lt;p&gt;cJSON also provides convenient helper functions for quickly creating a new item and adding it to an object, like &lt;code&gt;cJSON_AddNullToObject&lt;/code&gt;. They return a pointer to the new item or &lt;code&gt;NULL&lt;/code&gt; if they failed.&lt;/p&gt; 
&lt;h3&gt;Parsing JSON&lt;/h3&gt; 
&lt;p&gt;Given some JSON in a zero terminated string, you can parse it with &lt;code&gt;cJSON_Parse&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;cJSON *json = cJSON_Parse(string);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given some JSON in a string (whether zero terminated or not), you can parse it with &lt;code&gt;cJSON_ParseWithLength&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;cJSON *json = cJSON_ParseWithLength(string, buffer_length);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will parse the JSON and allocate a tree of &lt;code&gt;cJSON&lt;/code&gt; items that represents it. Once it returns, you are fully responsible for deallocating it after use with &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The allocator used by &lt;code&gt;cJSON_Parse&lt;/code&gt; is &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; by default but can be changed (globally) with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If an error occurs a pointer to the position of the error in the input string can be accessed using &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt;. Note though that this can produce race conditions in multithreading scenarios, in that case it is better to use &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; with &lt;code&gt;return_parse_end&lt;/code&gt;. By default, characters in the input string that follow the parsed JSON will not be considered as an error.&lt;/p&gt; 
&lt;p&gt;If you want more options, use &lt;code&gt;cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;. &lt;code&gt;return_parse_end&lt;/code&gt; returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; in a thread safe way). &lt;code&gt;require_null_terminated&lt;/code&gt;, if set to &lt;code&gt;1&lt;/code&gt; will make it an error if the input string contains data after the JSON.&lt;/p&gt; 
&lt;p&gt;If you want more options giving buffer length, use &lt;code&gt;cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Printing JSON&lt;/h3&gt; 
&lt;p&gt;Given a tree of &lt;code&gt;cJSON&lt;/code&gt; items, you can print them as a string using &lt;code&gt;cJSON_Print&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;char *string = cJSON_Print(json);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will allocate a string and print a JSON representation of the tree into it. Once it returns, you are fully responsible for deallocating it after use with your allocator. (usually &lt;code&gt;free&lt;/code&gt;, depends on what has been set with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;cJSON_Print&lt;/code&gt; will print with whitespace for formatting. If you want to print without formatting, use &lt;code&gt;cJSON_PrintUnformatted&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you have a rough idea of how big your resulting string will be, you can use &lt;code&gt;cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)&lt;/code&gt;. &lt;code&gt;fmt&lt;/code&gt; is a boolean to turn formatting with whitespace on and off. &lt;code&gt;prebuffer&lt;/code&gt; specifies the first buffer size to use for printing. &lt;code&gt;cJSON_Print&lt;/code&gt; currently uses 256 bytes for its first buffer size. Once printing runs out of space, a new buffer is allocated and the old gets copied over before printing is continued.&lt;/p&gt; 
&lt;p&gt;These dynamic buffer allocations can be completely avoided by using &lt;code&gt;cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)&lt;/code&gt;. It takes a buffer to a pointer to print to and its length. If the length is reached, printing will fail and it returns &lt;code&gt;0&lt;/code&gt;. In case of success, &lt;code&gt;1&lt;/code&gt; is returned. Note that you should provide 5 bytes more than is actually needed, because cJSON is not 100% accurate in estimating if the provided memory is enough.&lt;/p&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;p&gt;In this example we want to build and parse the following JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;name&quot;: &quot;Awesome 4K&quot;,
    &quot;resolutions&quot;: [
        {
            &quot;width&quot;: 1280,
            &quot;height&quot;: 720
        },
        {
            &quot;width&quot;: 1920,
            &quot;height&quot;: 1080
        },
        {
            &quot;width&quot;: 3840,
            &quot;height&quot;: 2160
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Printing&lt;/h4&gt; 
&lt;p&gt;Let&#39;s build the above JSON and print it to a string:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;//create a monitor with a list of supported resolutions
//NOTE: Returns a heap allocated string, you are required to free it after use.
char *create_monitor(void)
{
    const unsigned int resolution_numbers[3][2] = {
        {1280, 720},
        {1920, 1080},
        {3840, 2160}
    };
    char *string = NULL;
    cJSON *name = NULL;
    cJSON *resolutions = NULL;
    cJSON *resolution = NULL;
    cJSON *width = NULL;
    cJSON *height = NULL;
    size_t index = 0;

    cJSON *monitor = cJSON_CreateObject();
    if (monitor == NULL)
    {
        goto end;
    }

    name = cJSON_CreateString(&quot;Awesome 4K&quot;);
    if (name == NULL)
    {
        goto end;
    }
    /* after creation was successful, immediately add it to the monitor,
     * thereby transferring ownership of the pointer to it */
    cJSON_AddItemToObject(monitor, &quot;name&quot;, name);

    resolutions = cJSON_CreateArray();
    if (resolutions == NULL)
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, &quot;resolutions&quot;, resolutions);

    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)
    {
        resolution = cJSON_CreateObject();
        if (resolution == NULL)
        {
            goto end;
        }
        cJSON_AddItemToArray(resolutions, resolution);

        width = cJSON_CreateNumber(resolution_numbers[index][0]);
        if (width == NULL)
        {
            goto end;
        }
        cJSON_AddItemToObject(resolution, &quot;width&quot;, width);

        height = cJSON_CreateNumber(resolution_numbers[index][1]);
        if (height == NULL)
        {
            goto end;
        }
        cJSON_AddItemToObject(resolution, &quot;height&quot;, height);
    }

    string = cJSON_Print(monitor);
    if (string == NULL)
    {
        fprintf(stderr, &quot;Failed to print monitor.\n&quot;);
    }

end:
    cJSON_Delete(monitor);
    return string;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively we can use the &lt;code&gt;cJSON_Add...ToObject&lt;/code&gt; helper functions to make our lives a little easier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;//NOTE: Returns a heap allocated string, you are required to free it after use.
char *create_monitor_with_helpers(void)
{
    const unsigned int resolution_numbers[3][2] = {
        {1280, 720},
        {1920, 1080},
        {3840, 2160}
    };
    char *string = NULL;
    cJSON *resolutions = NULL;
    size_t index = 0;

    cJSON *monitor = cJSON_CreateObject();

    if (cJSON_AddStringToObject(monitor, &quot;name&quot;, &quot;Awesome 4K&quot;) == NULL)
    {
        goto end;
    }

    resolutions = cJSON_AddArrayToObject(monitor, &quot;resolutions&quot;);
    if (resolutions == NULL)
    {
        goto end;
    }

    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)
    {
        cJSON *resolution = cJSON_CreateObject();

        if (cJSON_AddNumberToObject(resolution, &quot;width&quot;, resolution_numbers[index][0]) == NULL)
        {
            goto end;
        }

        if (cJSON_AddNumberToObject(resolution, &quot;height&quot;, resolution_numbers[index][1]) == NULL)
        {
            goto end;
        }

        cJSON_AddItemToArray(resolutions, resolution);
    }

    string = cJSON_Print(monitor);
    if (string == NULL)
    {
        fprintf(stderr, &quot;Failed to print monitor.\n&quot;);
    }

end:
    cJSON_Delete(monitor);
    return string;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Parsing&lt;/h4&gt; 
&lt;p&gt;In this example we will parse a JSON in the above format and check if the monitor supports a Full HD resolution while printing some diagnostic output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/* return 1 if the monitor supports full hd, 0 otherwise */
int supports_full_hd(const char * const monitor)
{
    const cJSON *resolution = NULL;
    const cJSON *resolutions = NULL;
    const cJSON *name = NULL;
    int status = 0;
    cJSON *monitor_json = cJSON_Parse(monitor);
    if (monitor_json == NULL)
    {
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL)
        {
            fprintf(stderr, &quot;Error before: %s\n&quot;, error_ptr);
        }
        status = 0;
        goto end;
    }

    name = cJSON_GetObjectItemCaseSensitive(monitor_json, &quot;name&quot;);
    if (cJSON_IsString(name) &amp;amp;&amp;amp; (name-&amp;gt;valuestring != NULL))
    {
        printf(&quot;Checking monitor \&quot;%s\&quot;\n&quot;, name-&amp;gt;valuestring);
    }

    resolutions = cJSON_GetObjectItemCaseSensitive(monitor_json, &quot;resolutions&quot;);
    cJSON_ArrayForEach(resolution, resolutions)
    {
        cJSON *width = cJSON_GetObjectItemCaseSensitive(resolution, &quot;width&quot;);
        cJSON *height = cJSON_GetObjectItemCaseSensitive(resolution, &quot;height&quot;);

        if (!cJSON_IsNumber(width) || !cJSON_IsNumber(height))
        {
            status = 0;
            goto end;
        }

        if ((width-&amp;gt;valuedouble == 1920) &amp;amp;&amp;amp; (height-&amp;gt;valuedouble == 1080))
        {
            status = 1;
            goto end;
        }
    }

end:
    cJSON_Delete(monitor_json);
    return status;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that there are no NULL checks except for the result of &lt;code&gt;cJSON_Parse&lt;/code&gt; because &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; checks for &lt;code&gt;NULL&lt;/code&gt; inputs already, so a &lt;code&gt;NULL&lt;/code&gt; value is just propagated and &lt;code&gt;cJSON_IsNumber&lt;/code&gt; and &lt;code&gt;cJSON_IsString&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; if the input is &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Caveats&lt;/h3&gt; 
&lt;h4&gt;Zero Character&lt;/h4&gt; 
&lt;p&gt;cJSON doesn&#39;t support strings that contain the zero character &lt;code&gt;&#39;\0&#39;&lt;/code&gt; or &lt;code&gt;\u0000&lt;/code&gt;. This is impossible with the current API because strings are zero terminated.&lt;/p&gt; 
&lt;h4&gt;Character Encoding&lt;/h4&gt; 
&lt;p&gt;cJSON only supports UTF-8 encoded input. In most cases it doesn&#39;t reject invalid UTF-8 as input though, it just propagates it through as is. As long as the input doesn&#39;t contain invalid UTF-8, the output will always be valid UTF-8.&lt;/p&gt; 
&lt;h4&gt;C Standard&lt;/h4&gt; 
&lt;p&gt;cJSON is written in ANSI C (or C89, C90). If your compiler or C library doesn&#39;t follow this standard, correct behavior is not guaranteed.&lt;/p&gt; 
&lt;p&gt;NOTE: ANSI C is not C++ therefore it shouldn&#39;t be compiled with a C++ compiler. You can compile it with a C compiler and link it with your C++ code however. Although compiling with a C++ compiler might work, correct behavior is not guaranteed.&lt;/p&gt; 
&lt;h4&gt;Floating Point Numbers&lt;/h4&gt; 
&lt;p&gt;cJSON does not officially support any &lt;code&gt;double&lt;/code&gt; implementations other than IEEE754 double precision floating point numbers. It might still work with other implementations but bugs with these will be considered invalid.&lt;/p&gt; 
&lt;p&gt;The maximum length of a floating point literal that cJSON supports is currently 63 characters.&lt;/p&gt; 
&lt;h4&gt;Deep Nesting Of Arrays And Objects&lt;/h4&gt; 
&lt;p&gt;cJSON doesn&#39;t support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to &lt;code&gt;CJSON_NESTING_LIMIT&lt;/code&gt; which is 1000 by default but can be changed at compile time.&lt;/p&gt; 
&lt;h4&gt;Thread Safety&lt;/h4&gt; 
&lt;p&gt;In general cJSON is &lt;strong&gt;not thread safe&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;However it is thread safe under the following conditions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; is never used (the &lt;code&gt;return_parse_end&lt;/code&gt; parameter of &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; can be used instead)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_InitHooks&lt;/code&gt; is only ever called before using cJSON in any threads.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;setlocale&lt;/code&gt; is never called before all calls to cJSON functions have returned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Case Sensitivity&lt;/h4&gt; 
&lt;p&gt;When cJSON was originally created, it didn&#39;t follow the JSON standard and didn&#39;t make a distinction between uppercase and lowercase letters. If you want the correct, standard compliant, behavior, you need to use the &lt;code&gt;CaseSensitive&lt;/code&gt; functions where available.&lt;/p&gt; 
&lt;h4&gt;Duplicate Object Members&lt;/h4&gt; 
&lt;p&gt;cJSON supports parsing and printing JSON that contains objects that have multiple members with the same name. &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; however will always only return the first one.&lt;/p&gt; 
&lt;h1&gt;Enjoy cJSON!&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dave Gamble (original author)&lt;/li&gt; 
 &lt;li&gt;Max Bruckner and Alan Wang (current maintainer)&lt;/li&gt; 
 &lt;li&gt;and the other &lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/CONTRIBUTORS.md&quot;&gt;cJSON contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Cyan4973/xxHash</title>
      <link>https://github.com/Cyan4973/xxHash</link>
      <description>&lt;p&gt;Extremely fast non-cryptographic hash algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xxHash - Extremely fast hash algorithm&lt;/h1&gt; 
&lt;p&gt;xxHash is an Extremely fast Hash algorithm, processing at RAM speed limits. Code is highly portable, and produces hashes identical across all platforms (little / big endian). The library includes the following algorithms :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;XXH32 : generates 32-bit hashes, using 32-bit arithmetic&lt;/li&gt; 
 &lt;li&gt;XXH64 : generates 64-bit hashes, using 64-bit arithmetic&lt;/li&gt; 
 &lt;li&gt;XXH3 (since &lt;code&gt;v0.8.0&lt;/code&gt;): generates 64 or 128-bit hashes, using vectorized arithmetic. The 128-bit variant is called XXH128.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All variants successfully complete the &lt;a href=&quot;https://code.google.com/p/smhasher/wiki/SMHasher&quot;&gt;SMHasher&lt;/a&gt; test suite which evaluates the quality of hash functions (collision, dispersion and randomness). Additional tests, which evaluate more thoroughly speed and collision properties of 64-bit hashes, &lt;a href=&quot;https://github.com/Cyan4973/xxHash/tree/dev/tests&quot;&gt;are also provided&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;release&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Cyan4973/xxHash/actions?query=branch%3Arelease+&quot;&gt;&lt;img src=&quot;https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=release&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;dev&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Cyan4973/xxHash/actions?query=branch%3Adev+&quot;&gt;&lt;img src=&quot;https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=dev&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;The benchmarked reference system uses an Intel i7-9700K cpu, and runs Ubuntu x64 20.04. The &lt;a href=&quot;https://github.com/Cyan4973/xxHash/tree/release/tests/bench&quot;&gt;open source benchmark program&lt;/a&gt; is compiled with &lt;code&gt;clang&lt;/code&gt; v10.0 using &lt;code&gt;-O3&lt;/code&gt; flag.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Hash Name&lt;/th&gt; 
   &lt;th&gt;Width&lt;/th&gt; 
   &lt;th&gt;Bandwidth (GB/s)&lt;/th&gt; 
   &lt;th&gt;Small Data Velocity&lt;/th&gt; 
   &lt;th&gt;Quality&lt;/th&gt; 
   &lt;th&gt;Comment&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;XXH3&lt;/strong&gt; (SSE2)&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;31.5 GB/s&lt;/td&gt; 
   &lt;td&gt;133.1&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;XXH128&lt;/strong&gt; (SSE2)&lt;/td&gt; 
   &lt;td&gt;128&lt;/td&gt; 
   &lt;td&gt;29.6 GB/s&lt;/td&gt; 
   &lt;td&gt;118.1&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;RAM sequential read&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;28.0 GB/s&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;for reference&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;City64&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;22.0 GB/s&lt;/td&gt; 
   &lt;td&gt;76.6&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;T1ha2&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;22.0 GB/s&lt;/td&gt; 
   &lt;td&gt;99.0&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;Slightly worse &lt;a href=&quot;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison#collision-study&quot;&gt;collisions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;City128&lt;/td&gt; 
   &lt;td&gt;128&lt;/td&gt; 
   &lt;td&gt;21.7 GB/s&lt;/td&gt; 
   &lt;td&gt;57.7&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;XXH64&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;19.4 GB/s&lt;/td&gt; 
   &lt;td&gt;71.0&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SpookyHash&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;19.3 GB/s&lt;/td&gt; 
   &lt;td&gt;53.2&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mum&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;18.0 GB/s&lt;/td&gt; 
   &lt;td&gt;67.0&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;Slightly worse &lt;a href=&quot;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison#collision-study&quot;&gt;collisions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;XXH32&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;32&lt;/td&gt; 
   &lt;td&gt;9.7 GB/s&lt;/td&gt; 
   &lt;td&gt;71.9&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;City32&lt;/td&gt; 
   &lt;td&gt;32&lt;/td&gt; 
   &lt;td&gt;9.1 GB/s&lt;/td&gt; 
   &lt;td&gt;66.0&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Murmur3&lt;/td&gt; 
   &lt;td&gt;32&lt;/td&gt; 
   &lt;td&gt;3.9 GB/s&lt;/td&gt; 
   &lt;td&gt;56.1&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SipHash&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;3.0 GB/s&lt;/td&gt; 
   &lt;td&gt;43.2&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;FNV64&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;1.2 GB/s&lt;/td&gt; 
   &lt;td&gt;62.7&lt;/td&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;Poor avalanche properties&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Blake2&lt;/td&gt; 
   &lt;td&gt;256&lt;/td&gt; 
   &lt;td&gt;1.1 GB/s&lt;/td&gt; 
   &lt;td&gt;5.1&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;Cryptographic&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SHA1&lt;/td&gt; 
   &lt;td&gt;160&lt;/td&gt; 
   &lt;td&gt;0.8 GB/s&lt;/td&gt; 
   &lt;td&gt;5.6&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;Cryptographic but broken&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MD5&lt;/td&gt; 
   &lt;td&gt;128&lt;/td&gt; 
   &lt;td&gt;0.6 GB/s&lt;/td&gt; 
   &lt;td&gt;7.8&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;Cryptographic but broken&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;note 1: Small data velocity is a &lt;em&gt;rough&lt;/em&gt; evaluation of algorithm&#39;s efficiency on small data. For more detailed analysis, please refer to next paragraph.&lt;/p&gt; 
&lt;p&gt;note 2: some algorithms feature &lt;em&gt;faster than RAM&lt;/em&gt; speed. In which case, they can only reach their full speed potential when input is already in CPU cache (L3 or better). Otherwise, they max out on RAM speed limit.&lt;/p&gt; 
&lt;h3&gt;Small data&lt;/h3&gt; 
&lt;p&gt;Performance on large data is only one part of the picture. Hashing is also very useful in constructions like hash tables and bloom filters. In these use cases, it&#39;s frequent to hash a lot of small data (starting at a few bytes). Algorithm&#39;s performance can be very different for such scenarios, since parts of the algorithm, such as initialization or finalization, become fixed cost. The impact of branch mis-prediction also becomes much more present.&lt;/p&gt; 
&lt;p&gt;XXH3 has been designed for excellent performance on both long and small inputs, which can be observed in the following graph:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/750081/61976089-aedeab00-af9f-11e9-9239-e5375d6c080f.png&quot; alt=&quot;XXH3, latency, random size&quot;&gt;&lt;/p&gt; 
&lt;p&gt;For a more detailed analysis, please visit the wiki : &lt;a href=&quot;https://github.com/Cyan4973/xxHash/wiki/Performance-comparison#benchmarks-concentrating-on-small-data-&quot;&gt;https://github.com/Cyan4973/xxHash/wiki/Performance-comparison#benchmarks-concentrating-on-small-data-&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Quality&lt;/h2&gt; 
&lt;p&gt;Speed is not the only property that matters. Produced hash values must respect excellent dispersion and randomness properties, so that any sub-section of it can be used to maximally spread out a table or index, as well as reduce the amount of collisions to the minimal theoretical level, following the &lt;a href=&quot;https://en.wikipedia.org/wiki/Birthday_problem&quot;&gt;birthday paradox&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;xxHash&lt;/code&gt; has been tested with Austin Appleby&#39;s excellent SMHasher test suite, and passes all tests, ensuring reasonable quality levels. It also passes extended tests from &lt;a href=&quot;https://github.com/rurban/smhasher&quot;&gt;newer forks of SMHasher&lt;/a&gt;, featuring additional scenarios and conditions.&lt;/p&gt; 
&lt;p&gt;Finally, xxHash provides its own &lt;a href=&quot;https://github.com/Cyan4973/xxHash/tree/dev/tests/collisions&quot;&gt;massive collision tester&lt;/a&gt;, able to generate and compare billions of hashes to test the limits of 64-bit hash algorithms. On this front too, xxHash features good results, in line with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Birthday_problem&quot;&gt;birthday paradox&lt;/a&gt;. A more detailed analysis is documented &lt;a href=&quot;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison&quot;&gt;in the wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Build modifiers&lt;/h3&gt; 
&lt;p&gt;The following macros can be set at compilation time to modify &lt;code&gt;libxxhash&lt;/code&gt;&#39;s behavior. They are generally disabled by default.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;XXH_INLINE_ALL&lt;/code&gt;: Make all functions &lt;code&gt;inline&lt;/code&gt;, implementation is directly included within &lt;code&gt;xxhash.h&lt;/code&gt;. Inlining functions is beneficial for speed, notably for small keys. It&#39;s &lt;em&gt;extremely effective&lt;/em&gt; when key&#39;s length is expressed as &lt;em&gt;a compile time constant&lt;/em&gt;, with performance improvements observed in the +200% range . See &lt;a href=&quot;https://fastcompression.blogspot.com/2018/03/xxhash-for-small-keys-impressive-power.html&quot;&gt;this article&lt;/a&gt; for details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_PRIVATE_API&lt;/code&gt;: same outcome as &lt;code&gt;XXH_INLINE_ALL&lt;/code&gt;. Still available for legacy support. The name underlines that &lt;code&gt;XXH_*&lt;/code&gt; symbol names will not be exported.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_STATIC_LINKING_ONLY&lt;/code&gt;: gives access to internal state declaration, required for static allocation. Incompatible with dynamic linking, due to risks of ABI changes.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NAMESPACE&lt;/code&gt;: Prefixes all symbols with the value of &lt;code&gt;XXH_NAMESPACE&lt;/code&gt;. This macro can only use compilable character set. Useful to evade symbol naming collisions, in case of multiple inclusions of xxHash&#39;s source code. Client applications still use the regular function names, as symbols are automatically translated through &lt;code&gt;xxhash.h&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_FORCE_ALIGN_CHECK&lt;/code&gt;: Use a faster direct read path when input is aligned. This option can result in dramatic performance improvement on architectures unable to load memory from unaligned addresses when input to hash happens to be aligned on 32 or 64-bit boundaries. It is (slightly) detrimental on platform with good unaligned memory access performance (same instruction for both aligned and unaligned accesses). This option is automatically disabled on &lt;code&gt;x86&lt;/code&gt;, &lt;code&gt;x64&lt;/code&gt; and &lt;code&gt;aarch64&lt;/code&gt;, and enabled on all other platforms.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_FORCE_MEMORY_ACCESS&lt;/code&gt;: The default method &lt;code&gt;0&lt;/code&gt; uses a portable &lt;code&gt;memcpy()&lt;/code&gt; notation. Method &lt;code&gt;1&lt;/code&gt; uses a gcc-specific &lt;code&gt;packed&lt;/code&gt; attribute, which can provide better performance for some targets. Method &lt;code&gt;2&lt;/code&gt; forces unaligned reads, which is not standard compliant, but might sometimes be the only way to extract better read performance. Method &lt;code&gt;3&lt;/code&gt; uses a byteshift operation, which is best for old compilers which don&#39;t inline &lt;code&gt;memcpy()&lt;/code&gt; or big-endian systems without a byteswap instruction.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_CPU_LITTLE_ENDIAN&lt;/code&gt;: By default, endianness is determined by a runtime test resolved at compile time. If, for some reason, the compiler cannot simplify the runtime test, it can cost performance. It&#39;s possible to skip auto-detection and simply state that the architecture is little-endian by setting this macro to 1. Setting it to 0 states big-endian.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_ENABLE_AUTOVECTORIZE&lt;/code&gt;: Auto-vectorization may be triggered for XXH32 and XXH64, depending on cpu vector capabilities and compiler version. Note: auto-vectorization tends to be triggered more easily with recent versions of &lt;code&gt;clang&lt;/code&gt;. For XXH32, SSE4.1 or equivalent (NEON) is enough, while XXH64 requires AVX512. Unfortunately, auto-vectorization is generally detrimental to XXH performance. For this reason, the xxhash source code tries to prevent auto-vectorization by default. That being said, systems evolve, and this conclusion is not forthcoming. For example, it has been reported that recent Zen4 cpus are more likely to improve performance with vectorization. Therefore, should you prefer or want to test vectorized code, you can enable this flag: it will remove the no-vectorization protection code, thus making it more likely for XXH32 and XXH64 to be auto-vectorized.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH32_ENDJMP&lt;/code&gt;: Switch multi-branch finalization stage of XXH32 by a single jump. This is generally undesirable for performance, especially when hashing inputs of random sizes. But depending on exact architecture and compiler, a jump might provide slightly better performance on small inputs. Disabled by default.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_IMPORT&lt;/code&gt;: MSVC specific: should only be defined for dynamic linking, as it prevents linkage errors.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NO_STDLIB&lt;/code&gt;: Disable invocation of &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; functions, notably &lt;code&gt;malloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt;. &lt;code&gt;libxxhash&lt;/code&gt;&#39;s &lt;code&gt;XXH*_createState()&lt;/code&gt; will always fail and return &lt;code&gt;NULL&lt;/code&gt;. But one-shot hashing (like &lt;code&gt;XXH32()&lt;/code&gt;) or streaming using statically allocated states still work as expected. This build flag is useful for embedded environments without dynamic allocation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_memcpy&lt;/code&gt;, &lt;code&gt;XXH_memset&lt;/code&gt;, &lt;code&gt;XXH_memcmp&lt;/code&gt; : redirect &lt;code&gt;memcpy()&lt;/code&gt;, &lt;code&gt;memset()&lt;/code&gt; and &lt;code&gt;memcmp()&lt;/code&gt; to some user-selected symbol at compile time. Redirecting all 3 removes the need to include &lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt; standard library.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NO_EXTERNC_GUARD&lt;/code&gt;: When &lt;code&gt;xxhash.h&lt;/code&gt; is compiled in C++ mode, removes the &lt;code&gt;extern &quot;C&quot; { .. }&lt;/code&gt; block guard.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_DEBUGLEVEL&lt;/code&gt; : When set to any value &amp;gt;= 1, enables &lt;code&gt;assert()&lt;/code&gt; statements. This (slightly) slows down execution, but may help finding bugs during debugging sessions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Binary size control&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NO_XXH3&lt;/code&gt; : removes symbols related to &lt;code&gt;XXH3&lt;/code&gt; (both 64 &amp;amp; 128 bits) from generated binary. &lt;code&gt;XXH3&lt;/code&gt; is by far the largest contributor to &lt;code&gt;libxxhash&lt;/code&gt; size, so it&#39;s useful to reduce binary size for applications which do not employ &lt;code&gt;XXH3&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NO_LONG_LONG&lt;/code&gt;: removes compilation of algorithms relying on 64-bit &lt;code&gt;long long&lt;/code&gt; types which include &lt;code&gt;XXH3&lt;/code&gt; and &lt;code&gt;XXH64&lt;/code&gt;. Only &lt;code&gt;XXH32&lt;/code&gt; will be compiled. Useful for targets (architectures and compilers) without 64-bit support.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NO_STREAM&lt;/code&gt;: Disables the streaming API, limiting the library to single shot variants only.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NO_INLINE_HINTS&lt;/code&gt;: By default, xxHash uses &lt;code&gt;__attribute__((always_inline))&lt;/code&gt; and &lt;code&gt;__forceinline&lt;/code&gt; to improve performance at the cost of code size. Defining this macro to 1 will mark all internal functions as &lt;code&gt;static&lt;/code&gt;, allowing the compiler to decide whether to inline a function or not. This is very useful when optimizing for smallest binary size, and is automatically defined when compiling with &lt;code&gt;-O0&lt;/code&gt;, &lt;code&gt;-Os&lt;/code&gt;, &lt;code&gt;-Oz&lt;/code&gt;, or &lt;code&gt;-fno-inline&lt;/code&gt; on GCC and Clang. It may also be required to successfully compile using &lt;code&gt;-Og&lt;/code&gt;, depending on compiler version.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_SIZE_OPT&lt;/code&gt;: &lt;code&gt;0&lt;/code&gt;: default, optimize for speed &lt;code&gt;1&lt;/code&gt;: default for &lt;code&gt;-Os&lt;/code&gt; and &lt;code&gt;-Oz&lt;/code&gt;: disables some speed hacks for size optimization &lt;code&gt;2&lt;/code&gt;: makes code as small as possible, performance may cry&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Build modifiers specific for XXH3&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;XXH_VECTOR&lt;/code&gt; : manually select a vector instruction set (default: auto-selected at compilation time). Available instruction sets are &lt;code&gt;XXH_SCALAR&lt;/code&gt;, &lt;code&gt;XXH_SSE2&lt;/code&gt;, &lt;code&gt;XXH_AVX2&lt;/code&gt;, &lt;code&gt;XXH_AVX512&lt;/code&gt;, &lt;code&gt;XXH_NEON&lt;/code&gt; and &lt;code&gt;XXH_VSX&lt;/code&gt;. Compiler may require additional flags to ensure proper support (for example, &lt;code&gt;gcc&lt;/code&gt; on x86_64 requires &lt;code&gt;-mavx2&lt;/code&gt; for &lt;code&gt;AVX2&lt;/code&gt;, or &lt;code&gt;-mavx512f&lt;/code&gt; for &lt;code&gt;AVX512&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_PREFETCH_DIST&lt;/code&gt; : select prefetching distance. For close-to-metal adaptation to specific hardware platforms. XXH3 only.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_NO_PREFETCH&lt;/code&gt; : disable prefetching. Some platforms or situations may perform better without prefetching. XXH3 only.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Makefile variables&lt;/h4&gt; 
&lt;p&gt;When compiling the Command Line Interface &lt;code&gt;xxhsum&lt;/code&gt; using &lt;code&gt;make&lt;/code&gt;, the following environment variables can also be set :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;DISPATCH=1&lt;/code&gt; : use &lt;code&gt;xxh_x86dispatch.c&lt;/code&gt;, select at runtime between &lt;code&gt;scalar&lt;/code&gt;, &lt;code&gt;sse2&lt;/code&gt;, &lt;code&gt;avx2&lt;/code&gt; or &lt;code&gt;avx512&lt;/code&gt; instruction set. This option is only valid for &lt;code&gt;x86&lt;/code&gt;/&lt;code&gt;x64&lt;/code&gt; systems. It is enabled by default when target &lt;code&gt;x86&lt;/code&gt;/&lt;code&gt;x64&lt;/code&gt; is detected. It can be forcefully turned off using &lt;code&gt;DISPATCH=0&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;LIBXXH_DISPATCH=1&lt;/code&gt; : same idea, implemented a runtime vector extension detector, but within &lt;code&gt;libxxhash&lt;/code&gt;. This parameter is disabled by default. When enabled (only valid for &lt;code&gt;x86&lt;/code&gt;/&lt;code&gt;x64&lt;/code&gt; systems), new symbols published in &lt;code&gt;xxh_x86dispatch.h&lt;/code&gt; become accessible. At the time of this writing, it&#39;s required to include &lt;code&gt;xxh_x86dispatch.h&lt;/code&gt; in order to access the symbols with runtime vector extension detection.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XXH_1ST_SPEED_TARGET&lt;/code&gt; : select an initial speed target, expressed in MB/s, for the first speed test in benchmark mode. Benchmark will adjust the target at subsequent iterations, but the first test is made &quot;blindly&quot; by targeting this speed. Currently conservatively set to 10 MB/s, to support very slow (emulated) platforms.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NODE_JS=1&lt;/code&gt; : When compiling &lt;code&gt;xxhsum&lt;/code&gt; for Node.js with Emscripten, this links the &lt;code&gt;NODERAWFS&lt;/code&gt; library for unrestricted filesystem access and patches &lt;code&gt;isatty&lt;/code&gt; to make the command line utility correctly detect the terminal. This does make the binary specific to Node.js.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building xxHash - Using vcpkg&lt;/h3&gt; 
&lt;p&gt;You can download and install xxHash using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh
./vcpkg integrate install
./vcpkg install xxhash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The xxHash port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;p&gt;The simplest example calls xxhash 64-bit variant as a one-shot function generating a hash value from a single buffer, and invoked from a C/C++ program:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &quot;xxhash.h&quot;

    (...)
    XXH64_hash_t hash = XXH64(buffer, size, seed);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Streaming variant is more involved, but makes it possible to provide data incrementally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &quot;stdlib.h&quot;   /* abort() */
#include &quot;xxhash.h&quot;


XXH64_hash_t calcul_hash_streaming(FileHandler fh)
{
    /* create a hash state */
    XXH64_state_t* const state = XXH64_createState();
    if (state==NULL) abort();

    size_t const bufferSize = SOME_SIZE;
    void* const buffer = malloc(bufferSize);
    if (buffer==NULL) abort();

    /* Initialize state with selected seed */
    XXH64_hash_t const seed = 0;   /* or any other value */
    if (XXH64_reset(state, seed) == XXH_ERROR) abort();

    /* Feed the state with input data, any size, any number of times */
    (...)
    while ( /* some data left */ ) {
        size_t const length = get_more_data(buffer, bufferSize, fh);
        if (XXH64_update(state, buffer, length) == XXH_ERROR) abort();
        (...)
    }
    (...)

    /* Produce the final hash value */
    XXH64_hash_t const hash = XXH64_digest(state);

    /* State could be re-used; but in this example, it is simply freed  */
    free(buffer);
    XXH64_freeState(state);

    return hash;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;The library files &lt;code&gt;xxhash.c&lt;/code&gt; and &lt;code&gt;xxhash.h&lt;/code&gt; are BSD licensed. The utility &lt;code&gt;xxhsum&lt;/code&gt; is GPL licensed.&lt;/p&gt; 
&lt;h3&gt;Other programming languages&lt;/h3&gt; 
&lt;p&gt;Beyond the C reference version, xxHash is also available from many different programming languages, thanks to great contributors. They are &lt;a href=&quot;http://www.xxhash.com/#other-languages&quot;&gt;listed here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Packaging status&lt;/h3&gt; 
&lt;p&gt;Many distributions bundle a package manager which allows easy xxhash installation as both a &lt;code&gt;libxxhash&lt;/code&gt; library and &lt;code&gt;xxhsum&lt;/code&gt; command line interface.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/xxhash/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/xxhash.svg?sanitize=true&quot; alt=&quot;Packaging status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Special Thanks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Takayuki Matsuoka, aka @t-mat, for creating &lt;code&gt;xxhsum -c&lt;/code&gt; and great support during early xxh releases&lt;/li&gt; 
 &lt;li&gt;Mathias Westerdahl, aka @JCash, for introducing the first version of &lt;code&gt;XXH64&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Devin Hussey, aka @easyaspi314, for incredible low-level optimizations on &lt;code&gt;XXH3&lt;/code&gt; and &lt;code&gt;XXH128&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>cloudwu/skynet</title>
      <link>https://github.com/cloudwu/skynet</link>
      <description>&lt;p&gt;A lightweight online game framework&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;img src=&quot;https://github.com/cloudwu/skynet/wiki/image/skynet_metro.jpg&quot; alt=&quot;skynet logo&quot;&gt;&lt;/h2&gt; 
&lt;p&gt;Skynet is a multi-user Lua framework supporting the actor model, often used in games.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cloudwu/skynet/wiki/Uses&quot;&gt;It is heavily used in the Chinese game industry&lt;/a&gt;, but is also now spreading to other industries, and to English-centric developers. To visit related sites, visit the Chinese pages using something like Google or Deepl translate.&lt;/p&gt; 
&lt;p&gt;The community is friendly and almost all contributors can speak English, so English speakers are welcome to ask questions in &lt;a href=&quot;https://github.com/cloudwu/skynet/discussions&quot;&gt;Discussion&lt;/a&gt;, or submit issues in English.&lt;/p&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;For Linux, install autoconf first for jemalloc:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/cloudwu/skynet.git
cd skynet
make &#39;PLATFORM&#39;  # PLATFORM can be linux, macosx, freebsd now
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export PLAT=linux
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For FreeBSD , use gmake instead of make.&lt;/p&gt; 
&lt;h2&gt;Test&lt;/h2&gt; 
&lt;p&gt;Run these in different consoles:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./skynet examples/config	# Launch first skynet node  (Gate server) and a skynet-master (see config for standalone option)
./3rd/lua/lua examples/client.lua 	# Launch a client, and try to input hello.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About Lua version&lt;/h2&gt; 
&lt;p&gt;Skynet now uses a modified version of lua 5.4.7 ( &lt;a href=&quot;https://github.com/ejoy/lua/tree/skynet54&quot;&gt;https://github.com/ejoy/lua/tree/skynet54&lt;/a&gt; ) for multiple lua states.&lt;/p&gt; 
&lt;p&gt;Official Lua versions can also be used as long as the Makefile is edited.&lt;/p&gt; 
&lt;h2&gt;How To Use&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read Wiki for documents &lt;a href=&quot;https://github.com/cloudwu/skynet/wiki&quot;&gt;https://github.com/cloudwu/skynet/wiki&lt;/a&gt; (Written in both English and Chinese)&lt;/li&gt; 
 &lt;li&gt;The FAQ in wiki &lt;a href=&quot;https://github.com/cloudwu/skynet/wiki/FAQ&quot;&gt;https://github.com/cloudwu/skynet/wiki/FAQ&lt;/a&gt; (In Chinese, but you can visit them using something like Google or Deepl translate.)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>eclipse-mosquitto/mosquitto</title>
      <link>https://github.com/eclipse-mosquitto/mosquitto</link>
      <description>&lt;p&gt;Eclipse Mosquitto - An open source MQTT broker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eclipse Mosquitto&lt;/h1&gt; 
&lt;p&gt;Mosquitto is an open source implementation of a server for version 5.0, 3.1.1, and 3.1 of the MQTT protocol. It also includes a C and C++ client library, and the &lt;code&gt;mosquitto_pub&lt;/code&gt; and &lt;code&gt;mosquitto_sub&lt;/code&gt; utilities for publishing and subscribing.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;p&gt;See the following links for more information on MQTT:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Community page: &lt;a href=&quot;http://mqtt.org/&quot;&gt;http://mqtt.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MQTT v3.1.1 standard: &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html&quot;&gt;https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MQTT v5.0 standard: &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mosquitto project information is available at the following locations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Main homepage: &lt;a href=&quot;https://mosquitto.org/&quot;&gt;https://mosquitto.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Find existing bugs or submit a new bug: &lt;a href=&quot;https://github.com/eclipse/mosquitto/issues&quot;&gt;https://github.com/eclipse/mosquitto/issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Source code repository: &lt;a href=&quot;https://github.com/eclipse/mosquitto&quot;&gt;https://github.com/eclipse/mosquitto&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There is also a public test server available at &lt;a href=&quot;https://test.mosquitto.org/&quot;&gt;https://test.mosquitto.org/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://mosquitto.org/download/&quot;&gt;https://mosquitto.org/download/&lt;/a&gt; for details on installing binaries for various platforms.&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;If you have installed a binary package the broker should have been started automatically. If not, it can be started with a very basic configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mosquitto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then use &lt;code&gt;mosquitto_sub&lt;/code&gt; to subscribe to a topic:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mosquitto_sub -t &#39;test/topic&#39; -v
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And to publish a message:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mosquitto_pub -t &#39;test/topic&#39; -m &#39;hello world&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that starting the broker like this allows anonymous/unauthenticated access but only from the local computer, so it&#39;s only really useful for initial testing.&lt;/p&gt; 
&lt;p&gt;If you want to have clients from another computer connect, you will need to provide a configuration file. If you have installed from a binary package, you will probably already have a configuration file at somewhere like &lt;code&gt;/etc/mosquitto/mosquitto.conf&lt;/code&gt;. If you&#39;ve compiled from source, you can write your config file then run as &lt;code&gt;mosquitto -c /path/to/mosquitto.conf&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To start your config file you define a listener and you will need to think about what authentication you require. It is not advised to run your broker with anonymous access when it is publically available.&lt;/p&gt; 
&lt;p&gt;For details on how to do this, look at the &lt;a href=&quot;https://mosquitto.org/documentation/authentication-methods/&quot;&gt;authentication methods&lt;/a&gt; available and the &lt;a href=&quot;https://mosquitto.org/documentation/dynamic-security/&quot;&gt;dynamic security plugin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Documentation for the broker, clients and client library API can be found in the man pages, which are available online at &lt;a href=&quot;https://mosquitto.org/man/&quot;&gt;https://mosquitto.org/man/&lt;/a&gt;. There are also pages with an introduction to the features of MQTT, the &lt;code&gt;mosquitto_passwd&lt;/code&gt; utility for dealing with username/passwords, and a description of the configuration file options available for the broker.&lt;/p&gt; 
&lt;p&gt;Detailed client library API documentation can be found at &lt;a href=&quot;https://mosquitto.org/api/&quot;&gt;https://mosquitto.org/api/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Building from source&lt;/h2&gt; 
&lt;p&gt;To build from source the recommended route for end users is to download the archive from &lt;a href=&quot;https://mosquitto.org/download/&quot;&gt;https://mosquitto.org/download/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On Windows and Mac, use &lt;code&gt;cmake&lt;/code&gt; to build. On other platforms, just run &lt;code&gt;make&lt;/code&gt; to build. For Windows, see also &lt;code&gt;README-windows.md&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you are building from the git repository then the documentation will not already be built. Use &lt;code&gt;make binary&lt;/code&gt; to skip building the man pages, or install &lt;code&gt;docbook-xsl&lt;/code&gt; on Debian/Ubuntu systems.&lt;/p&gt; 
&lt;h3&gt;Build Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;c-ares (libc-ares-dev on Debian based systems) - only when compiled with &lt;code&gt;make WITH_SRV=yes&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;cJSON - for client JSON output support. Disable with &lt;code&gt;make WITH_CJSON=no&lt;/code&gt; Auto detected with CMake.&lt;/li&gt; 
 &lt;li&gt;libwebsockets (libwebsockets-dev) - enable with &lt;code&gt;make WITH_WEBSOCKETS=yes&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;openssl (libssl-dev on Debian based systems) - disable with &lt;code&gt;make WITH_TLS=no&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;pthreads - for client library thread support. This is required to support the &lt;code&gt;mosquitto_loop_start()&lt;/code&gt; and &lt;code&gt;mosquitto_loop_stop()&lt;/code&gt; functions. If compiled without pthread support, the library isn&#39;t guaranteed to be thread safe.&lt;/li&gt; 
 &lt;li&gt;uthash / utlist - bundled versions of these headers are provided, disable their use with &lt;code&gt;make WITH_BUNDLED_DEPS=no&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;xsltproc (xsltproc and docbook-xsl on Debian based systems) - only needed when building from git sources - disable with &lt;code&gt;make WITH_DOCS=no&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Equivalent options for enabling/disabling features are available when using the CMake build.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Mosquitto was written by Roger Light &lt;a href=&quot;mailto:roger@atchoo.org&quot;&gt;roger@atchoo.org&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>coturn/coturn</title>
      <link>https://github.com/coturn/coturn</link>
      <description>&lt;p&gt;coturn TURN server project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/coturn/coturn/actions/workflows/docker.yml&quot;&gt;&lt;img src=&quot;https://github.com/coturn/coturn/actions/workflows/docker.yml/badge.svg?sanitize=true&quot; alt=&quot;Docker CI&quot; title=&quot;Docker CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/coturn/coturn&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/coturn/coturn?label=Docker%20Hub%20pulls&quot; alt=&quot;Docker Hub&quot; title=&quot;Docker Hub pulls&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/coturn/coturn&quot;&gt;Docker Hub&lt;/a&gt; | &lt;a href=&quot;https://github.com/orgs/coturn/packages/container/package/coturn&quot;&gt;GitHub Container Registry&lt;/a&gt; | &lt;a href=&quot;https://quay.io/repository/coturn/coturn&quot;&gt;Quay.io&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Coturn TURN server&lt;/h1&gt; 
&lt;p&gt;coturn is a free open source implementation of TURN and STUN Server. The TURN Server is a VoIP media traffic NAT traversal server and gateway.&lt;/p&gt; 
&lt;h2&gt;Installing / Getting started&lt;/h2&gt; 
&lt;p&gt;Linux distros may have a version of coturn which you can install by&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;apt install coturn
turnserver --log-file stdout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or run coturn using docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run -d -p 3478:3478 -p 3478:3478/udp -p 5349:5349 -p 5349:5349/udp -p 49152-65535:49152-65535/udp coturn/coturn
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more details about using docker container &lt;a href=&quot;https://github.com/coturn/coturn/raw/master/docker/coturn/README.md&quot;&gt;Docker Readme&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;coturn requires following dependencies to be installed first&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;libevent2&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;openssl (to support TLS and DTLS, authorized STUN and TURN)&lt;/li&gt; 
 &lt;li&gt;libmicrohttp and &lt;a href=&quot;https://github.com/digitalocean/prometheus-client-c&quot;&gt;prometheus-client-c&lt;/a&gt; (prometheus interface)&lt;/li&gt; 
 &lt;li&gt;MariaDB/MySQL (user database)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/redis/hiredis&quot;&gt;Hiredis&lt;/a&gt; (user database, monitoring)&lt;/li&gt; 
 &lt;li&gt;SQLite (user database)&lt;/li&gt; 
 &lt;li&gt;PostgreSQL (user database)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone git@github.com:coturn/coturn.git
cd coturn
./configure
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;STUN specs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3489&quot;&gt;RFC 3489&lt;/a&gt; - &quot;classic&quot; STUN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5389&quot;&gt;RFC 5389&lt;/a&gt; - base &quot;new&quot; STUN specs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5769&quot;&gt;RFC 5769&lt;/a&gt; - test vectors for STUN protocol testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5780&quot;&gt;RFC 5780&lt;/a&gt; - NAT behavior discovery support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7443&quot;&gt;RFC 7443&lt;/a&gt; - ALPN support for STUN &amp;amp; TURN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7635&quot;&gt;RFC 7635&lt;/a&gt; - oAuth third-party TURN/STUN authorization&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;TURN specs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt; - base TURN specs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt; - TCP relaying TURN extension&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6156&quot;&gt;RFC 6156&lt;/a&gt; - IPv6 extension for TURN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7443&quot;&gt;RFC 7443&lt;/a&gt; - ALPN support for STUN &amp;amp; TURN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7635&quot;&gt;RFC 7635&lt;/a&gt; - oAuth third-party TURN/STUN authorization&lt;/li&gt; 
 &lt;li&gt;DTLS support (&lt;a href=&quot;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&quot;&gt;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Mobile ICE (MICE) support (&lt;a href=&quot;http://tools.ietf.org/html/draft-wing-tram-turn-mobility-02&quot;&gt;http://tools.ietf.org/html/draft-wing-tram-turn-mobility-02&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TURN REST API (&lt;a href=&quot;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&quot;&gt;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Origin field in TURN (Multi-tenant TURN Server) (&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tram-stun-origin-06&quot;&gt;https://tools.ietf.org/html/draft-ietf-tram-stun-origin-06&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TURN Bandwidth draft specs (&lt;a href=&quot;http://tools.ietf.org/html/draft-thomson-tram-turn-bandwidth-01&quot;&gt;http://tools.ietf.org/html/draft-thomson-tram-turn-bandwidth-01&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TURN-bis (with dual allocation) draft specs (&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tram-turnbis-04&quot;&gt;http://tools.ietf.org/html/draft-ietf-tram-turnbis-04&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ICE and related specs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5245&quot;&gt;RFC 5245&lt;/a&gt; - ICE&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5768&quot;&gt;RFC 5768&lt;/a&gt; – ICE–SIP&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6336&quot;&gt;RFC 6336&lt;/a&gt; – ICE–IANA Registry&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6544&quot;&gt;RFC 6544&lt;/a&gt; – ICE–TCP&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5928&quot;&gt;RFC 5928&lt;/a&gt; - TURN Resolution Mechanism&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The implementation fully supports the following client-to-TURN-server protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;UDP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TCP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TLS (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc&quot;&gt;RFC 5766&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt;): including TLS1.3; ECDHE is supported.&lt;/li&gt; 
 &lt;li&gt;DTLS1.0 and DTLS1.2 (&lt;a href=&quot;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&quot;&gt;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;SCTP (experimental implementation).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Relay protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;UDP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TCP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;User databases (for user repository, with passwords or keys, if authentication is required):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;SQLite&lt;/li&gt; 
 &lt;li&gt;MariaDB/MySQL&lt;/li&gt; 
 &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;li&gt;Redis&lt;/li&gt; 
 &lt;li&gt;MongoDB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Management interfaces:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;telnet cli&lt;/li&gt; 
 &lt;li&gt;HTTPS interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Monitoring:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Redis can be used for status and statistics storage and notification&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://prometheus.io/&quot;&gt;prometheus&lt;/a&gt; interface (unavailable on apt package)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Message integrity digest algorithms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HMAC-SHA1, with MD5-hashed keys (as required by STUN and TURN standards)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;TURN authentication mechanisms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&#39;classic&#39; long-term credentials mechanism;&lt;/li&gt; 
 &lt;li&gt;TURN REST API (a modification of the long-term mechanism, for time-limited secret-based authentication, for WebRTC applications: &lt;a href=&quot;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&quot;&gt;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&lt;/a&gt;);&lt;/li&gt; 
 &lt;li&gt;experimental third-party oAuth-based client authorization option;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Performance and Load Balancing:&lt;/p&gt; 
&lt;p&gt;When used as a part of an ICE solution, for VoIP connectivity, this TURN server can handle thousands simultaneous calls per CPU (when TURN protocol is used) or tens of thousands calls when only STUN protocol is used. For virtually unlimited scalability a load balancing scheme can be used. The load balancing can be implemented with the following tools (either one or a combination of them):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;DNS SRV based load balancing;&lt;/li&gt; 
 &lt;li&gt;built-in 300 ALTERNATE-SERVER mechanism (requires 300 response support by the TURN client);&lt;/li&gt; 
 &lt;li&gt;network load-balancer server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Traffic bandwidth limitation and congestion avoidance algorithms implemented.&lt;/p&gt; 
&lt;p&gt;Target platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux (Debian, Ubuntu, Mint, CentOS, Fedora, Redhat, Amazon Linux, Arch Linux, OpenSUSE)&lt;/li&gt; 
 &lt;li&gt;BSD (FreeBSD, NetBSD, OpenBSD, DragonFlyBSD)&lt;/li&gt; 
 &lt;li&gt;Solaris 11&lt;/li&gt; 
 &lt;li&gt;Mac OS X&lt;/li&gt; 
 &lt;li&gt;Cygwin (for non-production R&amp;amp;D purposes)&lt;/li&gt; 
 &lt;li&gt;Windows (native with, e.g., MSVC toolchain)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This project can be successfully used on other &lt;code&gt;*NIX&lt;/code&gt; platforms, too, but that is not officially supported.&lt;/p&gt; 
&lt;p&gt;The implementation is supposed to be simple, easy to install and configure. The project focuses on performance, scalability and simplicity. The aim is to provide an enterprise-grade TURN solution.&lt;/p&gt; 
&lt;p&gt;To achieve high performance and scalability, the TURN server is implemented with the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;High-performance industrial-strength Network IO engine libevent2 is used&lt;/li&gt; 
 &lt;li&gt;Configurable multi-threading model implemented to allow full usage of available CPU resources (if OS allows multi-threading)&lt;/li&gt; 
 &lt;li&gt;Multiple listening and relay addresses can be configured&lt;/li&gt; 
 &lt;li&gt;Efficient memory model used&lt;/li&gt; 
 &lt;li&gt;The TURN project code can be used in a custom proprietary networking environment. In the TURN server code, an abstract networking API is used. Only couple files in the project have to be re-written to plug-in the TURN server into a proprietary environment. With this project, only implementation for standard UNIX Networking/IO API is provided, but the user can implement any other environment. The TURN server code was originally developed for a high-performance proprietary corporate environment, then adopted for UNIX Networking API&lt;/li&gt; 
 &lt;li&gt;The TURN server works as a user space process, without imposing any special requirements on the system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Project homepage: &lt;a href=&quot;https://coturn.github.io/&quot;&gt;https://coturn.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Repository: &lt;a href=&quot;https://github.com/coturn/coturn/&quot;&gt;https://github.com/coturn/coturn/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Issue tracker: &lt;a href=&quot;https://github.com/coturn/coturn/issues&quot;&gt;https://github.com/coturn/coturn/issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google group: &lt;a href=&quot;https://groups.google.com/forum/#!forum/turn-server-project-rfc5766-turn-server&quot;&gt;https://groups.google.com/forum/#!forum/turn-server-project-rfc5766-turn-server&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jqlang/jq</title>
      <link>https://github.com/jqlang/jq</link>
      <description>&lt;p&gt;Command-line JSON processor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jq&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; is a lightweight and flexible command-line JSON processor akin to &lt;code&gt;sed&lt;/code&gt;,&lt;code&gt;awk&lt;/code&gt;,&lt;code&gt;grep&lt;/code&gt;, and friends for JSON data. It&#39;s written in portable C and has zero runtime dependencies, allowing you to easily slice, filter, map, and transform structured data.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Official Documentation&lt;/strong&gt;: &lt;a href=&quot;https://jqlang.org&quot;&gt;jqlang.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Try jq Online&lt;/strong&gt;: &lt;a href=&quot;https://play.jqlang.org&quot;&gt;play.jqlang.org&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prebuilt Binaries&lt;/h3&gt; 
&lt;p&gt;Download the latest releases from the &lt;a href=&quot;https://github.com/jqlang/jq/releases&quot;&gt;GitHub release page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker Image&lt;/h3&gt; 
&lt;p&gt;Pull the &lt;a href=&quot;https://github.com/jqlang/jq/pkgs/container/jq&quot;&gt;jq image&lt;/a&gt; to start quickly with Docker.&lt;/p&gt; 
&lt;h4&gt;Run with Docker&lt;/h4&gt; 
&lt;h5&gt;Example: Extracting the version from a &lt;code&gt;package.json&lt;/code&gt; file&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -i ghcr.io/jqlang/jq:latest &amp;lt; package.json &#39;.version&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Example: Extracting the version from a &lt;code&gt;package.json&lt;/code&gt; file with a mounted volume&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -i -v &quot;$PWD:$PWD&quot; -w &quot;$PWD&quot; ghcr.io/jqlang/jq:latest &#39;.version&#39; package.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building from source&lt;/h3&gt; 
&lt;h4&gt;Dependencies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;libtool&lt;/li&gt; 
 &lt;li&gt;make&lt;/li&gt; 
 &lt;li&gt;automake&lt;/li&gt; 
 &lt;li&gt;autoconf&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Instructions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git submodule update --init    # if building from git to get oniguruma
autoreconf -i                  # if building from git
./configure --with-oniguruma=builtin
make clean                     # if upgrading from a version previously built from source
make -j8
make check
sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build a statically linked version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;make LDFLAGS=-all-static
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re not using the latest git version but instead building a released tarball (available on the release page), skip the &lt;code&gt;autoreconf&lt;/code&gt; step, and flex or bison won&#39;t be needed.&lt;/p&gt; 
&lt;h5&gt;Cross-Compilation&lt;/h5&gt; 
&lt;p&gt;For details on cross-compilation, check out the &lt;a href=&quot;https://raw.githubusercontent.com/jqlang/jq/master/.github/workflows/ci.yml&quot;&gt;GitHub Actions file&lt;/a&gt; and the &lt;a href=&quot;https://github.com/jqlang/jq/wiki/Cross-compilation&quot;&gt;cross-compilation wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community &amp;amp; Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Questions &amp;amp; Help: &lt;a href=&quot;https://stackoverflow.com/questions/tagged/jq&quot;&gt;Stack Overflow (jq tag)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chat &amp;amp; Community: &lt;a href=&quot;https://discord.gg/yg6yjNmgAC&quot;&gt;Join us on Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wiki &amp;amp; Advanced Topics: &lt;a href=&quot;https://github.com/jqlang/jq/wiki&quot;&gt;Explore the Wiki&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; is released under the &lt;a href=&quot;https://raw.githubusercontent.com/jqlang/jq/master/COPYING&quot;&gt;MIT License&lt;/a&gt;. &lt;code&gt;jq&lt;/code&gt;&#39;s documentation is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/jqlang/jq/master/COPYING&quot;&gt;Creative Commons CC BY 3.0&lt;/a&gt;. &lt;code&gt;jq&lt;/code&gt; uses parts of the open source C library &quot;decNumber&quot;, which is distributed under &lt;a href=&quot;https://raw.githubusercontent.com/jqlang/jq/master/COPYING&quot;&gt;ICU License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>littlefs-project/littlefs</title>
      <link>https://github.com/littlefs-project/littlefs</link>
      <description>&lt;p&gt;A little fail-safe filesystem designed for microcontrollers&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;littlefs&lt;/h2&gt; 
&lt;p&gt;A little fail-safe filesystem designed for microcontrollers.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;   | | |     .---._____
  .-----.   |          |
--|o    |---| littlefs |
--|     |---|          |
  &#39;-----&#39;   &#39;----------&#39;
   | | |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Power-loss resilience&lt;/strong&gt; - littlefs is designed to handle random power failures. All file operations have strong copy-on-write guarantees and if power is lost the filesystem will fall back to the last known good state.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Dynamic wear leveling&lt;/strong&gt; - littlefs is designed with flash in mind, and provides wear leveling over dynamic blocks. Additionally, littlefs can detect bad blocks and work around them.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bounded RAM/ROM&lt;/strong&gt; - littlefs is designed to work with a small amount of memory. RAM usage is strictly bounded, which means RAM consumption does not change as the filesystem grows. The filesystem contains no unbounded recursion and dynamic memory is limited to configurable buffers that can be provided statically.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a simple example that updates a file named &lt;code&gt;boot_count&lt;/code&gt; every time main runs. The program can be interrupted at any time without losing track of how many times it has been booted and without corrupting the filesystem:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;lfs.h&quot;

// variables used by the filesystem
lfs_t lfs;
lfs_file_t file;

// configuration of the filesystem is provided by this struct
const struct lfs_config cfg = {
    // block device operations
    .read  = user_provided_block_device_read,
    .prog  = user_provided_block_device_prog,
    .erase = user_provided_block_device_erase,
    .sync  = user_provided_block_device_sync,

    // block device configuration
    .read_size = 16,
    .prog_size = 16,
    .block_size = 4096,
    .block_count = 128,
    .cache_size = 16,
    .lookahead_size = 16,
    .block_cycles = 500,
};

// entry point
int main(void) {
    // mount the filesystem
    int err = lfs_mount(&amp;amp;lfs, &amp;amp;cfg);

    // reformat if we can&#39;t mount the filesystem
    // this should only happen on the first boot
    if (err) {
        lfs_format(&amp;amp;lfs, &amp;amp;cfg);
        lfs_mount(&amp;amp;lfs, &amp;amp;cfg);
    }

    // read current count
    uint32_t boot_count = 0;
    lfs_file_open(&amp;amp;lfs, &amp;amp;file, &quot;boot_count&quot;, LFS_O_RDWR | LFS_O_CREAT);
    lfs_file_read(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));

    // update boot count
    boot_count += 1;
    lfs_file_rewind(&amp;amp;lfs, &amp;amp;file);
    lfs_file_write(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));

    // remember the storage is not updated until the file is closed successfully
    lfs_file_close(&amp;amp;lfs, &amp;amp;file);

    // release any resources we were using
    lfs_unmount(&amp;amp;lfs);

    // print the boot count
    printf(&quot;boot_count: %d\n&quot;, boot_count);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Detailed documentation (or at least as much detail as is currently available) can be found in the comments in &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&quot;&gt;lfs.h&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;littlefs takes in a configuration structure that defines how the filesystem operates. The configuration struct provides the filesystem with the block device operations and dimensions, tweakable parameters that tradeoff memory usage for performance, and optional static buffers if the user wants to avoid dynamic memory.&lt;/p&gt; 
&lt;p&gt;The state of the littlefs is stored in the &lt;code&gt;lfs_t&lt;/code&gt; type which is left up to the user to allocate, allowing multiple filesystems to be in use simultaneously. With the &lt;code&gt;lfs_t&lt;/code&gt; and configuration struct, a user can format a block device or mount the filesystem.&lt;/p&gt; 
&lt;p&gt;Once mounted, the littlefs provides a full set of POSIX-like file and directory functions, with the deviation that the allocation of filesystem structures must be provided by the user.&lt;/p&gt; 
&lt;p&gt;All POSIX operations, such as remove and rename, are atomic, even in event of power-loss. Additionally, file updates are not actually committed to the filesystem until sync or close is called on the file.&lt;/p&gt; 
&lt;h2&gt;Other notes&lt;/h2&gt; 
&lt;p&gt;Littlefs is written in C, and specifically should compile with any compiler that conforms to the &lt;code&gt;C99&lt;/code&gt; standard.&lt;/p&gt; 
&lt;p&gt;All littlefs calls have the potential to return a negative error code. The errors can be either one of those found in the &lt;code&gt;enum lfs_error&lt;/code&gt; in &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&quot;&gt;lfs.h&lt;/a&gt;, or an error returned by the user&#39;s block device operations.&lt;/p&gt; 
&lt;p&gt;In the configuration struct, the &lt;code&gt;prog&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; function provided by the user may return a &lt;code&gt;LFS_ERR_CORRUPT&lt;/code&gt; error if the implementation already can detect corrupt blocks. However, the wear leveling does not depend on the return code of these functions, instead all data is read back and checked for integrity.&lt;/p&gt; 
&lt;p&gt;If your storage caches writes, make sure that the provided &lt;code&gt;sync&lt;/code&gt; function flushes all the data to memory and ensures that the next read fetches the data from memory, otherwise data integrity can not be guaranteed. If the &lt;code&gt;write&lt;/code&gt; function does not perform caching, and therefore each &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; call hits the memory, the &lt;code&gt;sync&lt;/code&gt; function can simply return 0.&lt;/p&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;At a high level, littlefs is a block based filesystem that uses small logs to store metadata and larger copy-on-write (COW) structures to store file data.&lt;/p&gt; 
&lt;p&gt;In littlefs, these ingredients form a sort of two-layered cake, with the small logs (called metadata pairs) providing fast updates to metadata anywhere on storage, while the COW structures store file data compactly and without any wear amplification cost.&lt;/p&gt; 
&lt;p&gt;Both of these data structures are built out of blocks, which are fed by a common block allocator. By limiting the number of erases allowed on a block per allocation, the allocator provides dynamic wear leveling over the entire filesystem.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;                    root
                   .--------.--------.
                   | A&#39;| B&#39;|         |
                   |   |   |-&amp;gt;       |
                   |   |   |         |
                   &#39;--------&#39;--------&#39;
                .----&#39;   &#39;--------------.
       A       v                 B       v
      .--------.--------.       .--------.--------.
      | C&#39;| D&#39;|         |       | E&#39;|new|         |
      |   |   |-&amp;gt;       |       |   | E&#39;|-&amp;gt;       |
      |   |   |         |       |   |   |         |
      &#39;--------&#39;--------&#39;       &#39;--------&#39;--------&#39;
      .-&#39;   &#39;--.                  |   &#39;------------------.
     v          v              .-&#39;                        v
.--------.  .--------.        v                       .--------.
|   C    |  |   D    |   .--------.       write       | new E  |
|        |  |        |   |   E    |        ==&amp;gt;        |        |
|        |  |        |   |        |                   |        |
&#39;--------&#39;  &#39;--------&#39;   |        |                   &#39;--------&#39;
                         &#39;--------&#39;                   .-&#39;    |
                         .-&#39;    &#39;-.    .-------------|------&#39;
                        v          v  v              v
                   .--------.  .--------.       .--------.
                   |   F    |  |   G    |       | new F  |
                   |        |  |        |       |        |
                   |        |  |        |       |        |
                   &#39;--------&#39;  &#39;--------&#39;       &#39;--------&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details on how littlefs works can be found in &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&quot;&gt;DESIGN.md&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&quot;&gt;SPEC.md&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&quot;&gt;DESIGN.md&lt;/a&gt; - A fully detailed dive into how littlefs works. I would suggest reading it as the tradeoffs at work are quite interesting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&quot;&gt;SPEC.md&lt;/a&gt; - The on-disk specification of littlefs with all the nitty-gritty details. May be useful for tooling development.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;The littlefs comes with a test suite designed to run on a PC using the &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/bd/lfs_testbd.h&quot;&gt;emulated block device&lt;/a&gt; found in the &lt;code&gt;bd&lt;/code&gt; directory. The tests assume a Linux environment and can be started with make:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The littlefs is provided under the &lt;a href=&quot;https://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; license. See &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt; for more information. Contributions to this project are accepted under the same license.&lt;/p&gt; 
&lt;p&gt;Individual files contain the following tag instead of the full license text.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SPDX-License-Identifier:    BSD-3-Clause
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This enables machine processing of license information based on the SPDX License Identifiers that are here available: &lt;a href=&quot;http://spdx.org/licenses/&quot;&gt;http://spdx.org/licenses/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Related projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/littlefs-fuse&quot;&gt;littlefs-fuse&lt;/a&gt; - A &lt;a href=&quot;https://github.com/libfuse/libfuse&quot;&gt;FUSE&lt;/a&gt; wrapper for littlefs. The project allows you to mount littlefs directly on a Linux machine. Can be useful for debugging littlefs if you have an SD card handy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/littlefs-js&quot;&gt;littlefs-js&lt;/a&gt; - A javascript wrapper for littlefs. I&#39;m not sure why you would want this, but it is handy for demos. You can see it in action &lt;a href=&quot;http://littlefs.geky.net/demo.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://pypi.org/project/littlefs-python/&quot;&gt;littlefs-python&lt;/a&gt; - A Python wrapper for littlefs. The project allows you to create images of the filesystem on your PC. Check if littlefs will fit your needs, create images for a later download to the target memory or inspect the content of a binary image of the target memory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://crates.io/crates/littlefs2&quot;&gt;littlefs2-rust&lt;/a&gt; - A Rust wrapper for littlefs. This project allows you to use littlefs in a Rust-friendly API, reaping the benefits of Rust&#39;s memory safety and other guarantees.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Graveflo/nim-littlefs&quot;&gt;nim-littlefs&lt;/a&gt; - A Nim wrapper and API for littlefs. Includes a fuse implementation based on &lt;a href=&quot;https://github.com/geky/littlefs-fuse&quot;&gt;littlefs-fuse&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/yomimono/chamelon&quot;&gt;chamelon&lt;/a&gt; - A pure-OCaml implementation of (most of) littlefs, designed for use with the MirageOS library operating system project. It is interoperable with the reference implementation, with some caveats.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/tniessen/littlefs-disk-img-viewer&quot;&gt;littlefs-disk-img-viewer&lt;/a&gt; - A memory-efficient web application for viewing littlefs disk images in your web browser.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/whitecatboard/Lua-RTOS-ESP32/tree/master/components/mklfs/src&quot;&gt;mklfs&lt;/a&gt; - A command line tool for creating littlefs images. Used in the Lua RTOS ecosystem.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/earlephilhower/mklittlefs&quot;&gt;mklittlefs&lt;/a&gt; - A command line tool for creating littlefs images. Used in the ESP8266 and RP2040 ecosystem.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/oyama/pico-littlefs-usb&quot;&gt;pico-littlefs-usb&lt;/a&gt; - An interface for littlefs that emulates a FAT12 filesystem over USB. Allows mounting littlefs on a host PC without additional drivers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/ramcrc32bd&quot;&gt;ramcrc32bd&lt;/a&gt; - An example block device using littlefs&#39;s 32-bit CRC for error-correction.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/ramrsbd&quot;&gt;ramrsbd&lt;/a&gt; - An example block device using Reed-Solomon codes for error-correction.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/armmbed/mbed-os&quot;&gt;Mbed OS&lt;/a&gt; - The easiest way to get started with littlefs is to jump into Mbed which already has block device drivers for most forms of embedded storage. littlefs is available in Mbed OS as the &lt;a href=&quot;https://os.mbed.com/docs/mbed-os/latest/apis/littlefilesystem.html&quot;&gt;LittleFileSystem&lt;/a&gt; class.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/pellepl/spiffs&quot;&gt;SPIFFS&lt;/a&gt; - Another excellent embedded filesystem for NOR flash. As a more traditional logging filesystem with full static wear-leveling, SPIFFS will likely outperform littlefs on small memories such as the internal flash on microcontrollers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/dlbeer/dhara&quot;&gt;Dhara&lt;/a&gt; - An interesting NAND flash translation layer designed for small MCUs. It offers static wear-leveling and power-resilience with only a fixed &lt;em&gt;O(|address|)&lt;/em&gt; pointer structure stored on each block and in RAM.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://elm-chan.org/fsw/ff/00index_e.html&quot;&gt;ChaN&#39;s FatFs&lt;/a&gt; - A lightweight reimplementation of the infamous FAT filesystem for microcontroller-scale devices. Due to limitations of FAT it can&#39;t provide power-loss resilience, but it does allow easy interop with PCs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>iovisor/bcc</title>
      <link>https://github.com/iovisor/bcc</link>
      <description>&lt;p&gt;BCC - Tools for BPF-based Linux IO analysis, networking, monitoring, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/images/logo2.png&quot; alt=&quot;BCC Logo&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;BPF Compiler Collection (BCC)&lt;/h1&gt; 
&lt;p&gt;BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1 and above.&lt;/p&gt; 
&lt;p&gt;eBPF was &lt;a href=&quot;https://lkml.org/lkml/2015/4/14/232&quot;&gt;described by&lt;/a&gt; Ingo Molnár as:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;One of the more interesting features in this cycle is the ability to attach eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to kprobes. This allows user-defined instrumentation on a live kernel image that can never crash, hang or interfere with the kernel negatively.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;BCC makes BPF programs easier to write, with kernel instrumentation in C (and includes a C wrapper around LLVM), and front-ends in Python and lua. It is suited for many tasks, including performance analysis and network traffic control.&lt;/p&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;p&gt;This example traces a disk I/O kernel function, and populates an in-kernel power-of-2 histogram of the I/O size. For efficiency, only the histogram summary is returned to user-level.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Shell&quot;&gt;# ./bitehist.py
Tracing... Hit Ctrl-C to end.
^C
     kbytes          : count     distribution
       0 -&amp;gt; 1        : 3        |                                      |
       2 -&amp;gt; 3        : 0        |                                      |
       4 -&amp;gt; 7        : 211      |**********                            |
       8 -&amp;gt; 15       : 0        |                                      |
      16 -&amp;gt; 31       : 0        |                                      |
      32 -&amp;gt; 63       : 0        |                                      |
      64 -&amp;gt; 127      : 1        |                                      |
     128 -&amp;gt; 255      : 800      |**************************************|
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above output shows a bimodal distribution, where the largest mode of 800 I/O was between 128 and 255 Kbytes in size.&lt;/p&gt; 
&lt;p&gt;See the source: &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&quot;&gt;bitehist.py&lt;/a&gt;. What this traces, what this stores, and how the data is presented, can be entirely customized. This shows only some of many possible capabilities.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/INSTALL.md&quot;&gt;INSTALL.md&lt;/a&gt; for installation steps on your platform.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/FAQ.txt&quot;&gt;FAQ.txt&lt;/a&gt; for the most common troubleshoot questions.&lt;/p&gt; 
&lt;h2&gt;Reference guide&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/docs/reference_guide.md&quot;&gt;docs/reference_guide.md&lt;/a&gt; for the reference guide to the bcc and bcc/BPF APIs.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;p&gt;Some of these are single files that contain both C and Python, others have a pair of .c and .py files, and some are directories of files.&lt;/p&gt; 
&lt;h3&gt;Tracing&lt;/h3&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&quot;&gt;bitehist.py&lt;/a&gt;: Block I/O size histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop.py&quot;&gt;disksnoop.py&lt;/a&gt;: Trace block device I/O latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/hello_world.py&quot;&gt;hello_world.py&lt;/a&gt;: Prints &quot;Hello, World!&quot; for new processes.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query.py&quot;&gt;mysqld_query.py&lt;/a&gt;: Trace MySQL server queries using USDT probes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server.py&quot;&gt;nodejs_http_server.py&lt;/a&gt;: Trace Node.js HTTP server requests using USDT probes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop.py&quot;&gt;stacksnoop&lt;/a&gt;: Trace a kernel function and print all kernel stack traces. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop.py&quot;&gt;statsnoop&lt;/a&gt;: Trace stat() syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/task_switch.py&quot;&gt;task_switch.py&lt;/a&gt;: Count task switches with from and to PIDs.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect.py&quot;&gt;tcpv4connect.py&lt;/a&gt;: Trace TCP IPv4 active connections. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/trace_fields.py&quot;&gt;trace_fields.py&lt;/a&gt;: Simple example of printing fields from traced events.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump.py&quot;&gt;undump.py&lt;/a&gt;: Dump UNIX socket packets. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread.py&quot;&gt;urandomread.py&lt;/a&gt;: A kernel tracepoint example, which traces random:urandom_read. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.py&quot;&gt;vfsreadlat.py&lt;/a&gt; examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.c&quot;&gt;vfsreadlat.c&lt;/a&gt;: VFS read latency distribution. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.py&quot;&gt;kvm_hypercall.py&lt;/a&gt;: Conditional static kernel tracepoints for KVM entry, exit and hypercall &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Tools&lt;/h4&gt; 
&lt;center&gt;
 &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&quot; border=&quot;0&quot; width=&quot;700&quot;&gt;&lt;/a&gt;
&lt;/center&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist.py&quot;&gt;argdist&lt;/a&gt;: Display function parameter values as a histogram or frequency count. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline.py&quot;&gt;bashreadline&lt;/a&gt;: Print entered bash commands system wide. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist.py&quot;&gt;bpflist&lt;/a&gt;: Display processes with active BPF programs and maps. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable.py&quot;&gt;capable&lt;/a&gt;: Trace security capability checks. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop.py&quot;&gt;compactsnoop&lt;/a&gt;: Trace compact zone events with PID and latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat.py&quot;&gt;criticalstat&lt;/a&gt;: Trace and report long atomic critical sections in the kernel. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock.py&quot;&gt;deadlock&lt;/a&gt;: Detect potential deadlocks on a running process. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop.py&quot;&gt;drsnoop&lt;/a&gt;: Trace direct reclaim events with PID and latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount.py&quot;&gt;funccount&lt;/a&gt;: Count kernel function calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject.py&quot;&gt;inject&lt;/a&gt;: Targeted error injection with call chain and predicates &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat.py&quot;&gt;klockstat&lt;/a&gt;: Traces kernel mutex lock events and display locks statistics. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop.py&quot;&gt;opensnoop&lt;/a&gt;: Trace open() syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead.py&quot;&gt;readahead&lt;/a&gt;: Show performance of read-ahead cache &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace.sh&quot;&gt;reset-trace&lt;/a&gt;: Reset the state of tracing. Maintenance tool only. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount.py&quot;&gt;stackcount&lt;/a&gt;: Count kernel function calls and their stack traces. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop.py&quot;&gt;syncsnoop&lt;/a&gt;: Trace sync() syscall. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop.py&quot;&gt;threadsnoop&lt;/a&gt;: List new thread creation. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist.py&quot;&gt;tplist&lt;/a&gt;: Display kernel tracepoints or USDT probes and their formats. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace.py&quot;&gt;trace&lt;/a&gt;: Trace arbitrary functions, with filters. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop.py&quot;&gt;ttysnoop&lt;/a&gt;: Watch live output from a tty or pts device. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls.py&quot;&gt;ucalls&lt;/a&gt;: Summarize method calls or Linux syscalls in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow.py&quot;&gt;uflow&lt;/a&gt;: Print a method flow graph in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc.py&quot;&gt;ugc&lt;/a&gt;: Trace garbage collection events in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew.py&quot;&gt;uobjnew&lt;/a&gt;: Summarize object allocation events by object type and number of bytes allocated. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat.py&quot;&gt;ustat&lt;/a&gt;: Collect events such as GCs, thread creations, object allocations, exceptions and more in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads.py&quot;&gt;uthreads&lt;/a&gt;: Trace thread creation events in Java and raw pthreads. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Memory and Process Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop.py&quot;&gt;execsnoop&lt;/a&gt;: Trace new processes via exec() syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop.py&quot;&gt;exitsnoop&lt;/a&gt;: Trace process termination (exit and fatal signals). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop.py&quot;&gt;killsnoop&lt;/a&gt;: Trace signals issued by the kill() syscall. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit.py&quot;&gt;kvmexit&lt;/a&gt;: Display the exit_reason and its statistics of each vm exit. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak.py&quot;&gt;memleak&lt;/a&gt;: Display outstanding memory allocations to find memory leaks. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/numasched.py&quot;&gt;numasched&lt;/a&gt;: Track the migration of processes between NUMAs. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/numasched_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill.py&quot;&gt;oomkill&lt;/a&gt;: Trace the out-of-memory (OOM) killer. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec.py&quot;&gt;pidpersec&lt;/a&gt;: Count new processes (via fork). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/rdmaucma.py&quot;&gt;rdmaucma&lt;/a&gt;: Trace RDMA Userspace Connection Manager Access events. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/rdmaucma_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop.py&quot;&gt;shmsnoop&lt;/a&gt;: Trace System V shared memory syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop.py&quot;&gt;slabratetop&lt;/a&gt;: Kernel SLAB/SLUB memory cache allocation rate top. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Performance and Time Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower.py&quot;&gt;dbslower&lt;/a&gt;: Trace MySQL/PostgreSQL queries slower than a threshold. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat.py&quot;&gt;dbstat&lt;/a&gt;: Summarize MySQL/PostgreSQL query latency as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval.py&quot;&gt;funcinterval&lt;/a&gt;: Time interval between the same function as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency.py&quot;&gt;funclatency&lt;/a&gt;: Time functions and show their latency distribution. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower.py&quot;&gt;funcslower&lt;/a&gt;: Trace slow kernel or user function calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs.py&quot;&gt;hardirqs&lt;/a&gt;: Measure hard IRQ (hard interrupt) event time. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower.py&quot;&gt;mysqld_qslower&lt;/a&gt;: Trace MySQL server queries slower than a threshold. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ppchcalls.py&quot;&gt;ppchcalls&lt;/a&gt;: Summarize ppc hcall counts and latencies. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ppchcalls_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs.py&quot;&gt;softirqs&lt;/a&gt;: Measure soft IRQ (soft interrupt) event time. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount.py&quot;&gt;syscount&lt;/a&gt;: Summarize syscall counts and latencies. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;CPU and Scheduler Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist.py&quot;&gt;cpudist&lt;/a&gt;: Summarize on- and off-CPU time per task as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed.py&quot;&gt;cpuunclaimed&lt;/a&gt;: Sample CPU run queues and calculate unclaimed idle CPU. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat.py&quot;&gt;llcstat&lt;/a&gt;: Summarize CPU cache references and misses by process. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime.py&quot;&gt;offcputime&lt;/a&gt;: Summarize off-CPU time by kernel stack trace. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime.py&quot;&gt;offwaketime&lt;/a&gt;: Summarize blocked time by kernel off-CPU stack and waker stack. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile.py&quot;&gt;profile&lt;/a&gt;: Profile CPU usage by sampling stack traces at a timed interval. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat.py&quot;&gt;runqlat&lt;/a&gt;: Run queue (scheduler) latency as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen.py&quot;&gt;runqlen&lt;/a&gt;: Run queue length as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower.py&quot;&gt;runqslower&lt;/a&gt;: Trace long process scheduling delays. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime.py&quot;&gt;wakeuptime&lt;/a&gt;: Summarize sleep to wakeup time by waker kernel stack. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wqlat.py&quot;&gt;wqlat&lt;/a&gt;: Summarize work waiting latency on workqueue. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wqlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Network and Sockets Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency.py&quot;&gt;gethostlatency&lt;/a&gt;: Show latency for getaddrinfo/gethostbyname[2] calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop.py&quot;&gt;bindsnoop&lt;/a&gt;: Trace IPv4 and IPv6 bind() system calls (bind()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.py&quot;&gt;netqtop&lt;/a&gt; tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.c&quot;&gt;netqtop.c&lt;/a&gt;: Trace and display packets distribution on NIC queues. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop.py&quot;&gt;sofdsnoop&lt;/a&gt;: Trace FDs passed through unix sockets. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten.py&quot;&gt;solisten&lt;/a&gt;: Trace TCP socket listen. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff.py&quot;&gt;sslsniff&lt;/a&gt;: Sniff OpenSSL written and readed data. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept.py&quot;&gt;tcpaccept&lt;/a&gt;: Trace TCP passive connections (accept()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect.py&quot;&gt;tcpconnect&lt;/a&gt;: Trace TCP active connections (connect()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat.py&quot;&gt;tcpconnlat&lt;/a&gt;: Trace TCP active connection latency (connect()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop.py&quot;&gt;tcpdrop&lt;/a&gt;: Trace kernel-based TCP packet drops with details. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife.py&quot;&gt;tcplife&lt;/a&gt;: Trace TCP sessions and summarize lifespan. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans.py&quot;&gt;tcpretrans&lt;/a&gt;: Trace TCP retransmits and TLPs. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt.py&quot;&gt;tcprtt&lt;/a&gt;: Trace TCP round trip time. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates.py&quot;&gt;tcpstates&lt;/a&gt;: Trace TCP session state changes with durations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet.py&quot;&gt;tcpsubnet&lt;/a&gt;: Summarize and aggregate TCP send by subnet. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl.py&quot;&gt;tcpsynbl&lt;/a&gt;: Show TCP SYN backlog. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop.py&quot;&gt;tcptop&lt;/a&gt;: Summarize TCP send/recv throughput by host. Top for TCP. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer.py&quot;&gt;tcptracer&lt;/a&gt;: Trace TCP established connections (connect(), accept(), close()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong.py&quot;&gt;tcpcong&lt;/a&gt;: Trace TCP socket congestion control status duration. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Storage and Filesystems Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize.py&quot;&gt;bitesize&lt;/a&gt;: Show per process I/O size histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat.py&quot;&gt;cachestat&lt;/a&gt;: Trace page cache hit/miss ratio. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop.py&quot;&gt;cachetop&lt;/a&gt;: Trace page cache hit/miss ratio by processes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop.py&quot;&gt;dcsnoop&lt;/a&gt;: Trace directory entry cache (dcache) lookups. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat.py&quot;&gt;dcstat&lt;/a&gt;: Directory entry cache (dcache) stats. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency.py&quot;&gt;biolatency&lt;/a&gt;: Summarize block device I/O latency as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop.py&quot;&gt;biotop&lt;/a&gt;: Top for disks: Summarize block device I/O by process. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern.py&quot;&gt;biopattern&lt;/a&gt;: Identify random/sequential disk access patterns. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop.py&quot;&gt;biosnoop&lt;/a&gt;: Trace block device I/O with PID and latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop.py&quot;&gt;dirtop&lt;/a&gt;: File reads and writes by directory. Top for directories. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife.py&quot;&gt;filelife&lt;/a&gt;: Trace the lifespan of short-lived files. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filegone.py&quot;&gt;filegone&lt;/a&gt;: Trace why file gone (deleted or renamed). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filegone_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower.py&quot;&gt;fileslower&lt;/a&gt;: Trace slow synchronous file reads and writes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop.py&quot;&gt;filetop&lt;/a&gt;: File reads and writes by filename and process. Top for files. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush.py&quot;&gt;mdflush&lt;/a&gt;: Trace md flush events. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop.py&quot;&gt;mountsnoop&lt;/a&gt;: Trace mount and umount syscalls system-wide. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat.py&quot;&gt;virtiostat&lt;/a&gt;: Show VIRTIO device IO statistics. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Filesystems Tools&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist.py&quot;&gt;btrfsdist&lt;/a&gt;: Summarize btrfs operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower.py&quot;&gt;btrfsslower&lt;/a&gt;: Trace slow btrfs operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist.py&quot;&gt;ext4dist&lt;/a&gt;: Summarize ext4 operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower.py&quot;&gt;ext4slower&lt;/a&gt;: Trace slow ext4 operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower.py&quot;&gt;nfsslower&lt;/a&gt;: Trace slow NFS operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist.py&quot;&gt;nfsdist&lt;/a&gt;: Summarize NFS operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount.py&quot;&gt;vfscount&lt;/a&gt;: Count VFS calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat.py&quot;&gt;vfsstat&lt;/a&gt;: Count some VFS calls, with column output. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist.py&quot;&gt;xfsdist&lt;/a&gt;: Summarize XFS operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower.py&quot;&gt;xfsslower&lt;/a&gt;: Trace slow XFS operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist.py&quot;&gt;zfsdist&lt;/a&gt;: Summarize ZFS operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower.py&quot;&gt;zfsslower&lt;/a&gt;: Trace slow ZFS operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Networking&lt;/h3&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/distributed_bridge&quot;&gt;distributed_bridge/&lt;/a&gt;: Distributed bridge example.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/http_filter&quot;&gt;http_filter/&lt;/a&gt;: Simple HTTP filter example.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simple_tc.py&quot;&gt;simple_tc.py&lt;/a&gt;: Simple traffic control example.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simulation.py&quot;&gt;simulation.py&lt;/a&gt;: Simulation helper.&lt;/li&gt; 
 &lt;li&gt;examples/networking/neighbor_sharing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.py&quot;&gt;tc_neighbor_sharing.py&lt;/a&gt; examples/networking/neighbor_sharing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.c&quot;&gt;tc_neighbor_sharing.c&lt;/a&gt;: Per-IP classification and rate limiting.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&quot;&gt;tunnel_monitor/&lt;/a&gt;: Efficiently monitor traffic flows.&lt;/li&gt; 
 &lt;li&gt;examples/networking/vlan_learning/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.py&quot;&gt;vlan_learning.py&lt;/a&gt; examples/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.c&quot;&gt;vlan_learning.c&lt;/a&gt;: Demux Ethernet traffic into worker veth+namespaces.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;BPF Introspection&lt;/h3&gt; 
&lt;p&gt;Tools that help to introspect BPF programs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;introspection/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps.c&quot;&gt;bps.c&lt;/a&gt;: List all BPF programs loaded into the kernel. &#39;ps&#39; for BPF programs. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;BPF guarantees that the programs loaded into the kernel cannot crash, and cannot run forever, but yet BPF is general purpose enough to perform many arbitrary types of computation. Currently, it is possible to write a program in C that will compile into a valid BPF program, yet it is vastly easier to write a C program that will compile into invalid BPF (C is like that). The user won&#39;t know until trying to run the program whether it was valid or not.&lt;/p&gt; 
&lt;p&gt;With a BPF-specific frontend, one should be able to write in a language and receive feedback from the compiler on the validity as it pertains to a BPF backend. This toolkit aims to provide a frontend that can only create valid BPF programs while still harnessing its full flexibility.&lt;/p&gt; 
&lt;p&gt;Furthermore, current integrations with BPF have a kludgy workflow, sometimes involving compiling directly in a linux kernel source tree. This toolchain aims to minimize the time that a developer spends getting BPF compiled, and instead focus on the applications that can be written and the problems that can be solved with BPF.&lt;/p&gt; 
&lt;p&gt;The features of this toolkit include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;End-to-end BPF workflow in a shared library 
  &lt;ul&gt; 
   &lt;li&gt;A modified C language for BPF backends&lt;/li&gt; 
   &lt;li&gt;Integration with llvm-bpf backend for JIT&lt;/li&gt; 
   &lt;li&gt;Dynamic (un)loading of JITed programs&lt;/li&gt; 
   &lt;li&gt;Support for BPF kernel hooks: socket filters, tc classifiers, tc actions, and kprobes&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Bindings for Python&lt;/li&gt; 
 &lt;li&gt;Examples for socket filters, tc classifiers, and kprobes&lt;/li&gt; 
 &lt;li&gt;Self-contained tools for tracing a running system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In the future, more bindings besides python will likely be supported. Feel free to add support for the language of your choice and send a pull request!&lt;/p&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial.md&quot;&gt;docs/tutorial.md&lt;/a&gt;: Using bcc tools to solve performance, troubleshooting, and networking issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial_bcc_python_developer.md&quot;&gt;docs/tutorial_bcc_python_developer.md&lt;/a&gt;: Developing new bcc programs using the Python interface.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Networking&lt;/h3&gt; 
&lt;p&gt;At Red Hat Summit 2015, BCC was presented as part of a &lt;a href=&quot;http://www.devnation.org/#7784f1f7513e8542e4db519e79ff5eec&quot;&gt;session on BPF&lt;/a&gt;. A multi-host vxlan environment is simulated and a BPF program used to monitor one of the physical interfaces. The BPF program keeps statistics on the inner and outer IP addresses traversing the interface, and the userspace component turns those statistics into a graph showing the traffic distribution at multiple granularities. See the code &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Already pumped up to commit some code? Here are some resources to join the discussions in the &lt;a href=&quot;https://www.iovisor.org/&quot;&gt;IOVisor&lt;/a&gt; community and see what you want to work on.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Mailing List:&lt;/em&gt; &lt;a href=&quot;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&quot;&gt;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;IRC:&lt;/em&gt; #iovisor at irc.oftc.net&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;BCC Issue Tracker:&lt;/em&gt; &lt;a href=&quot;https://github.com/iovisor/bcc/issues&quot;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;A guide for contributing scripts:&lt;/em&gt; &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/CONTRIBUTING-SCRIPTS.md&quot;&gt;CONTRIBUTING-SCRIPTS.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;External links&lt;/h2&gt; 
&lt;p&gt;Looking for more information on BCC and how it&#39;s being used? You can find links to other BCC content on the web in &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/LINKS.md&quot;&gt;LINKS.md&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>firedancer-io/firedancer</title>
      <link>https://github.com/firedancer-io/firedancer</link>
      <description>&lt;p&gt;Firedancer is Jump Crypto&#39;s Solana validator software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;https://jumpcrypto.com/firedancer/&quot;&gt;Firedancer&lt;/a&gt; 🔥💃&lt;/h1&gt; 
&lt;p&gt;Firedancer is a new validator client for Solana.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; Designed from the ground up to be &lt;em&gt;fast&lt;/em&gt;. The concurrency model draws from experience in the low latency trading space, and the code contains many novel high-performance reimplementations of core Solana primitives.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt; The architecture of the validator allows it to run with a highly restrictive sandbox and almost no system calls.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Independent&lt;/strong&gt; Firedancer is written from scratch. This brings client diversity to the Solana network and helps it stay resilient to supply chain attacks in build tooling or dependencies.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;If you are an operator or looking to run the validator, see the Getting Started guide in the &lt;a href=&quot;https://docs.firedancer.io/&quot;&gt;Firedancer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;If you are an operator looking to run the validator, see the &lt;a href=&quot;https://docs.firedancer.io/guide/getting-started.html#releases&quot;&gt;Releases Guide&lt;/a&gt; in the documentation.&lt;/p&gt; 
&lt;p&gt;The Firedancer project is producing two validators,&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Frankendancer&lt;/strong&gt; A hybrid validator using parts of Firedancer and parts of Agave. Frankendancer uses the Firedancer networking stack and block production components to perform better while leader. Other functionality including execution and consensus is using the Agave validator code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Firedancer&lt;/strong&gt; A full from-scratch Firedancer with no Agave code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both validators are built from this codebase. The Firedancer validator is not ready for test or production use and has no releases. Frankendancer is currently available on both Solana testnet and mainnet-beta.&lt;/p&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;p&gt;Firedancer currently only supports Linux and requires a relatively new kernel, at least v4.18 to build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ git clone --recurse-submodules https://github.com/firedancer-io/firedancer.git
$ cd firedancer
$ ./deps.sh +dev
$ make -j run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;make run&lt;/code&gt; target runs the &lt;code&gt;fddev dev&lt;/code&gt; command. This development command will ensure your system is configured correctly before creating a genesis block, some keys, a faucet, and then starting a validator on the local machine. &lt;code&gt;fddev&lt;/code&gt; will use &lt;code&gt;sudo&lt;/code&gt; to make privileged changes to system configuration where needed. If &lt;code&gt;sudo&lt;/code&gt; is not available, you may need to run the command as root.&lt;/p&gt; 
&lt;p&gt;By default &lt;code&gt;fddev&lt;/code&gt; will create a new development cluster, if you wish to join this cluster with other validators, you can define &lt;code&gt;[rpc.entrypoints]&lt;/code&gt; in the configuration file to point at your first validator and run &lt;code&gt;fddev dev&lt;/code&gt; again.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Firedancer is available under the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache 2 license&lt;/a&gt;. Firedancer also includes external libraries that are available under a variety of licenses. See &lt;a href=&quot;https://raw.githubusercontent.com/firedancer-io/firedancer/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pr3y/Bruce</title>
      <link>https://github.com/pr3y/Bruce</link>
      <description>&lt;p&gt;Predatory ESP32 Firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/bruce_banner.jpg&quot; alt=&quot;Bruce Main Menu&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;🦈&lt;/span&gt; Bruce&lt;/h1&gt; 
&lt;p&gt;Bruce is meant to be a versatile ESP32 firmware that supports a ton of offensive features focusing on facilitating Red Team operations. It also supports m5stack products and works great with Cardputer, Sticks, M5Cores, T-Decks and T-Embeds.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🏗&lt;/span&gt; How to install&lt;/h2&gt; 
&lt;h3&gt;The easiest way to install Bruce is using our official Web Flasher!&lt;/h3&gt; 
&lt;h3&gt;Check out: &lt;a href=&quot;https://bruce.computer/flasher&quot;&gt;https://bruce.computer/flasher&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can download the latest binary from releases or actions and flash locally using esptool.py&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;esptool.py --port /dev/ttyACM0 write_flash 0x00000 Bruce-&amp;lt;device&amp;gt;.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For m5stack devices&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you already use M5Launcher to manage your m5stack device, you can install it with OTA&lt;/p&gt; 
&lt;p&gt;Or you can burn it directly from the &lt;a href=&quot;https://docs.m5stack.com/en/download&quot;&gt;m5burner tool&lt;/a&gt;, just search for &#39;Bruce&#39; (My official builds will be uploaded by &quot;owner&quot; and have photos.) on the device category you want to and click on burn&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⌨&lt;/span&gt; Discord Server&lt;/h2&gt; 
&lt;p&gt;Contact us in our &lt;a href=&quot;https://discord.gg/WJ9XF9czVT&quot;&gt;Discord Server&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📑&lt;/span&gt; Wiki&lt;/h2&gt; 
&lt;p&gt;For more information on each function supported by Bruce, &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki&quot;&gt;read our wiki here&lt;/a&gt;. Also, &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FAQ&quot;&gt;read our FAQ&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;💻&lt;/span&gt; List of Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;WiFi&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Connect to WiFi&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; WiFi AP&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Disconnect WiFi&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#wifi-atks&quot;&gt;WiFi Atks&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#beacon-spam&quot;&gt;Beacon Spam&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#target-atk&quot;&gt;Target Atk&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Information&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Target Deauth&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; EvilPortal + Deauth&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Deauth Flood (More than one target)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Wardriving&quot;&gt;Wardriving&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#telnet&quot;&gt;TelNet&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#ssh&quot;&gt;SSH&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#raw-sniffer&quot;&gt;RAW Sniffer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#tcp-client&quot;&gt;TCP Client&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#tcp-listener&quot;&gt;TCP Listener&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#dpwo-esp32&quot;&gt;DPWO-ESP32&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&quot;&gt;Evil Portal&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&quot;&gt;Scan Hosts&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#wireguard-tunneling&quot;&gt;Wireguard Tunneling&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Brucegotchi 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Pwnagotchi friend&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Pwngrid spam faces &amp;amp; names 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [Optional] DoScreen a very long name and face&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [Optional] Flood uniq peer identifiers&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;BLE&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/BLE#ble-scan&quot;&gt;BLE Scan&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Bad BLE - Run Ducky scripts, similar to &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;BadUsb&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; BLE Keyboard - Cardputer and T-Deck Only&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; iOS Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Windows Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Samsung Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Android Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spam All&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;RF&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Scan/Copy&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/RF#replay-payloads-like-flipper&quot;&gt;Custom SubGhz&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jammer Full (sends a full squared wave into output)&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jammer Intermittent (sends PWM signal into output)&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF TX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF RX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF Module 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF433 T/R M5Stack&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/CC1101&quot;&gt;CC1101 (Sub-Ghz)&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF Frequency&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Replay&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;RFID&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Read tag&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Read 125kHz&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Clone tag&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Write NDEF records&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Amiibolink&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chameleon&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Write data&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Erase data&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Save file&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Load file&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/RFID#supported-modules&quot;&gt;RFID Module&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; PN532&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Emulate tag&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;IR&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; TV-B-Gone&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; IR Receiver&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/IR#replay-payloads-like-flipper&quot;&gt;Custom IR (NEC, NECext, SIRC, SIRC15, SIRC20, Samsung32, RC5, RC5X, RC6)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Ir TX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Ir RX Pin&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;FM&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#play_or_pause_button-broadcast-standard&quot;&gt;Broadcast standard&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#no_entry_sign-broadcast-rerserved&quot;&gt;Broadcast reserved&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#stop_button-broadcast-stop&quot;&gt;Broadcast stop&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#ocean-fm-spectrum&quot;&gt;FM Spectrum&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#car-hijack-ta&quot;&gt;Hijack Traffic Announcements&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#bookmark_tabs-config&quot;&gt;Config&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;NRF24&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/BLE#nrf24-jammer&quot;&gt;NRF24 Jammer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 2.4G Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Mousejack&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Scripts&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Interpreter&quot;&gt;JavaScript Interpreter&lt;/a&gt; &lt;a href=&quot;https://github.com/justinknight93/Doolittle&quot;&gt;Credits to justinknight93&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Others&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Mic Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; QRCodes 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Custom&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; PIX (Brazil bank transfer system)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#sd-card-mngr&quot;&gt;SD Card Mngr&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; View image (jpg)&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; File Info&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Wardriving#how-to-upload&quot;&gt;Wigle Upload&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Play Audio&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; View File&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#littlefs-mngr&quot;&gt;LittleFS Mngr&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#webui&quot;&gt;WebUI&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Server Structure&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Html&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; SDCard Mngr&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spiffs Mngr&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Megalodon&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;BADUsb (New features, LittleFS and SDCard)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; USB Keyboard - Cardputer and T-Deck Only&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#openhaystack&quot;&gt;Openhaystack&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#ibutton&quot;&gt;iButton&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#led-control&quot;&gt;LED Control&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Clock&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RTC Support&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; NTP time adjust&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Manual adjust&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Connect (ESPNOW)&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Send File&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Receive File&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Config&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Brightness&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Dim Time&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Orientation&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; UI Color&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Boot Sound on/off&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Clock&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Sleep&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Restart&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Specific functions per Device, the ones not mentioned here are available to all.&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Device&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;CC1101&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;NRF24&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Interpreter&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;FM Radio&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;PN532&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Mic&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;BadUSB&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;RGB Led&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Speaker&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Fuel Guage&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;LITE_MODE&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cardputer-kit-w-m5stamps&quot;&gt;M5Stack Cardputer&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;NS4168&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stickc-plus2-esp32-mini-iot-development-kit&quot;&gt;M5Stack M5StickC PLUS2&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stickc-plus-esp32-pico-mini-iot-development-kit&quot;&gt;M5Stack M5StickC PLUS&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/basic-core-iot-development-kit&quot;&gt;M5Stack M5Core BASIC&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-core2-esp32-iot-development-kit-v1-1&quot;&gt;M5Stack M5Core2 v1.1&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cores3-esp32s3-lotdevelopment-kit&quot;&gt;M5Stack M5CoreS3&lt;/a&gt;/&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cores3-se-iot-controller-w-o-battery-bottom&quot;&gt;SE&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.aliexpress.us/item/3256804774970998.html&quot;&gt;JCZN CYD‑2432S028&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-embed-cc1101&quot;&gt;Lilygo T‑Embed CC1101&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-embed&quot;&gt;Lilygo T‑Embed&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-deck&quot;&gt;Lilygo T‑Deck&lt;/a&gt; (&lt;a href=&quot;https://lilygo.cc/products/t-deck-plus-1&quot;&gt;and pro&lt;/a&gt;)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-display-s3&quot;&gt;Lilygo T-Display-S3&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;² CYD and StickCPlus 1.1 have a LITE_VERSION version for Launcher Compatibility ¹ Core, CYD and StickCs Bad-USB: &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;LITE_MODE&lt;/em&gt;: TelNet, SSH, DPWO, WireGuard, ScanHosts, RawSniffer, Brucegotchi, BLEBacon, BLEScan, Interpreter and OpenHaystack are NOT available for M5Launcher Compatibility&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Why and how does it look?&lt;/h2&gt; 
&lt;p&gt;Bruce stems from a keen observation within the community focused on devices like Flipper Zero. While these devices offered a glimpse into the world of offensive security, there was a palpable sense that something more could be achieved without being that overpriced, particularly with the robust and modular hardware ecosystem provided by ESP32 Devices, Lilygo and M5Stack products.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/pic1.png&quot; alt=&quot;Bruce Main Menu&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/core.png&quot; alt=&quot;Bruce on M5Core&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/stick.png&quot; alt=&quot;Bruce on Stick&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/cyd.png&quot; alt=&quot;Bruce on CYD&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Other media can be &lt;a href=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/&quot;&gt;found here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;👏&lt;/span&gt; Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bmorcelli&quot;&gt;@bmorcelli&lt;/a&gt; for new core and a bunch of new features, also porting to many devices!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IncursioHack&quot;&gt;@IncursioHack&lt;/a&gt; for adding RF and RFID modules features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Luidiblu&quot;&gt;@Luidiblu&lt;/a&gt; for logo and UI design assistance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eadmaster&quot;&gt;@eadmaster&lt;/a&gt; for adding a lot of features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rennancockles&quot;&gt;@rennancockles&lt;/a&gt; for a lot of RFID code, refactoring and others features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/7h30th3r0n3&quot;&gt;@7h30th3r0n3&lt;/a&gt; refactoring and a lot of help with WiFi attacks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Smoochiee&lt;/a&gt; for Bruce PCB design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;TH3_KR4K3N&lt;/a&gt; for Stick cplus extender PCB design.&lt;/li&gt; 
 &lt;li&gt;Everyone who contributed in some way to the project, thanks &lt;span&gt;❤️&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🚧&lt;/span&gt; Disclaimer&lt;/h2&gt; 
&lt;p&gt;Bruce is a tool for cyber offensive and red team operations, distributed under the terms of the Affero General Public License (AGPL). It is intended for legal and authorized security testing purposes only. Use of this software for any malicious or unauthorized activities is strictly prohibited. By downloading, installing, or using Bruce, you agree to comply with all applicable laws and regulations. This software is provided free of charge, and we do not accept payments for copies or modifications. The developers of Bruce assume no liability for any misuse of the software. Use at your own risk.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>systemd/systemd</title>
      <link>https://github.com/systemd/systemd</link>
      <description>&lt;p&gt;The systemd System and Service Manager&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;http://brand.systemd.io/assets/page-logo.png&quot; alt=&quot;Systemd&quot;&gt;&lt;/p&gt; 
&lt;p&gt;System and Service Manager&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://build.opensuse.org/project/show/system:systemd&quot;&gt;&lt;img src=&quot;https://build.opensuse.org/projects/system:systemd/packages/systemd/badge.svg?type=default&quot; alt=&quot;OBS Packages Status&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://the-real-systemd.semaphoreci.com/projects/systemd&quot;&gt;&lt;img src=&quot;https://the-real-systemd.semaphoreci.com/badges/systemd/branches/main.svg?style=shields&quot; alt=&quot;Semaphore CI 2.0 Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://scan.coverity.com/projects/350&quot;&gt;&lt;img src=&quot;https://scan.coverity.com/projects/350/badge.svg?sanitize=true&quot; alt=&quot;Coverity Scan Status&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#systemd&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/systemd.svg?sanitize=true&quot; alt=&quot;OSS-Fuzz Status&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/systemd/systemd/actions&quot;&gt;&lt;img src=&quot;https://github.com/systemd/systemd/workflows/CIFuzz/badge.svg?sanitize=true&quot; alt=&quot;CIFuzz&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/1369&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/1369/badge&quot; alt=&quot;CII Best Practices&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://fossies.org/linux/test/systemd-main.tar.gz/codespell.html&quot;&gt;&lt;img src=&quot;https://fossies.org/linux/test/systemd-main.tar.gz/codespell.svg?sanitize=true&quot; alt=&quot;Fossies codespell report&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://translate.fedoraproject.org/engage/systemd/&quot;&gt;&lt;img src=&quot;https://translate.fedoraproject.org/widgets/systemd/-/master/svg-badge.svg?sanitize=true&quot; alt=&quot;Weblate&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://coveralls.io/github/systemd/systemd?branch=main&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/systemd/systemd/badge.svg?branch=main&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://repology.org/project/systemd/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/tiny-repos/systemd.svg?sanitize=true&quot; alt=&quot;Packaging status&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://securityscorecards.dev/viewer/?platform=github.com&amp;amp;org=systemd&amp;amp;repo=systemd&quot;&gt;&lt;img src=&quot;https://api.securityscorecards.dev/projects/github.com/systemd/systemd/badge&quot; alt=&quot;OpenSSF Scorecard&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Details&lt;/h2&gt; 
&lt;p&gt;Most documentation is available on &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&#39;s web site&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Assorted, older, general information about systemd can be found in the &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/systemd&quot;&gt;systemd Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Information about build requirements is provided in the &lt;a href=&quot;https://raw.githubusercontent.com/systemd/systemd/main/README&quot;&gt;README file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Consult our &lt;a href=&quot;https://raw.githubusercontent.com/systemd/systemd/main/NEWS&quot;&gt;NEWS file&lt;/a&gt; for information about what&#39;s new in the most recent systemd versions.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/systemd/systemd/main/docs/ARCHITECTURE.md&quot;&gt;Code Map&lt;/a&gt; for information about this repository&#39;s layout and content.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/systemd/systemd/main/docs/HACKING.md&quot;&gt;Hacking guide&lt;/a&gt; for information on how to hack on systemd and test your modifications.&lt;/p&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/systemd/systemd/main/docs/CONTRIBUTING.md&quot;&gt;Contribution Guidelines&lt;/a&gt; for more information about filing GitHub Issues and posting GitHub Pull Requests.&lt;/p&gt; 
&lt;p&gt;When preparing patches for systemd, please follow our &lt;a href=&quot;https://raw.githubusercontent.com/systemd/systemd/main/docs/CODING_STYLE.md&quot;&gt;Coding Style Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are looking for support, please contact our &lt;a href=&quot;https://lists.freedesktop.org/mailman/listinfo/systemd-devel&quot;&gt;mailing list&lt;/a&gt;, join our &lt;a href=&quot;https://web.libera.chat/#systemd&quot;&gt;IRC channel #systemd on libera.chat&lt;/a&gt; or &lt;a href=&quot;https://matrix.to/#/%23systemd-project:matrix.org&quot;&gt;Matrix channel&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Stable branches with backported patches are available in the &lt;a href=&quot;https://github.com/systemd/systemd-stable&quot;&gt;stable repo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We have a security bug bounty program sponsored by the &lt;a href=&quot;https://www.sovereigntechfund.de/&quot;&gt;Sovereign Tech Fund&lt;/a&gt; hosted on &lt;a href=&quot;https://yeswehack.com/programs/systemd-bug-bounty-program&quot;&gt;YesWeHack&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Repositories with distribution packages built from git main are &lt;a href=&quot;https://software.opensuse.org//download.html?project=system%3Asystemd&amp;amp;package=systemd&quot;&gt;available on OBS&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Klipper3d/klipper</title>
      <link>https://github.com/Klipper3d/klipper</link>
      <description>&lt;p&gt;Klipper is a 3d-printer firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the Klipper project!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.klipper3d.org/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo-small.png&quot; alt=&quot;Klipper&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.klipper3d.org/&quot;&gt;https://www.klipper3d.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Klipper firmware controls 3d-Printers. It combines the power of a general purpose computer with one or more micro-controllers. See the &lt;a href=&quot;https://www.klipper3d.org/Features.html&quot;&gt;features document&lt;/a&gt; for more information on why you should use the Klipper software.&lt;/p&gt; 
&lt;p&gt;Start by &lt;a href=&quot;https://www.klipper3d.org/Installation.html&quot;&gt;installing Klipper software&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Klipper software is Free Software. See the &lt;a href=&quot;https://raw.githubusercontent.com/Klipper3d/klipper/master/COPYING&quot;&gt;license&lt;/a&gt; or read the &lt;a href=&quot;https://www.klipper3d.org/Overview.html&quot;&gt;documentation&lt;/a&gt;. We depend on the generous support from our &lt;a href=&quot;https://www.klipper3d.org/Sponsors.html&quot;&gt;sponsors&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/nuttx</title>
      <link>https://github.com/apache/nuttx</link>
      <description>&lt;p&gt;Apache NuttX is a mature, real-time embedded operating system (RTOS)&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/apache/nuttx/master/Documentation/_static/NuttX320.png&quot; width=&quot;175&quot;&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/POSIX-Compliant-brightgreen?style=flat&amp;amp;label=POSIX&quot; alt=&quot;POSIX Badge&quot;&gt; &lt;a href=&quot;https://nuttx.apache.org/docs/latest/introduction/licensing.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/issue_track-github-blue?style=flat&amp;amp;label=Issue%20Tracking&quot; alt=&quot;Issues Tracking Badge&quot;&gt; &lt;a href=&quot;https://github.com/apache/nuttx/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/apache/nuttx&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/nuttx/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/nuttx/workflows/Build/badge.svg?sanitize=true&quot; alt=&quot;GitHub Build Badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://nuttx.apache.org/docs/latest/index.html&quot;&gt;&lt;img src=&quot;https://github.com/apache/nuttx/workflows/Build%20Documentation/badge.svg?sanitize=true&quot; alt=&quot;Documentation Badge&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Apache NuttX is a real-time operating system (RTOS) with an emphasis on standards compliance and small footprint. Scalable from 8-bit to 64-bit microcontroller environments, the primary governing standards in NuttX are POSIX and ANSI standards. Additional standard APIs from Unix and other common RTOSs (such as VxWorks) are adopted for functionality not available under these standards, or for functionality that is not appropriate for deeply-embedded environments (such as fork()).&lt;/p&gt; 
&lt;p&gt;For brevity, many parts of the documentation will refer to Apache NuttX as simply NuttX.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;First time on NuttX? Read the &lt;a href=&quot;https://nuttx.apache.org/docs/latest/quickstart/index.html&quot;&gt;Getting Started&lt;/a&gt; guide! If you don&#39;t have a board available, NuttX has its own simulator that you can run on terminal.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find the current NuttX documentation on the &lt;a href=&quot;https://nuttx.apache.org/docs/latest/&quot;&gt;Documentation Page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can build the documentation yourself by following the Documentation Build &lt;a href=&quot;https://nuttx.apache.org/docs/latest/contributing/documentation.html&quot;&gt;Instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The old NuttX documentation is still available in the &lt;a href=&quot;https://cwiki.apache.org/NUTTX/NuttX&quot;&gt;Apache wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Boards&lt;/h2&gt; 
&lt;p&gt;NuttX supports a wide variety of platforms. See the full list on the &lt;a href=&quot;https://nuttx.apache.org/docs/latest/platforms/index.html&quot;&gt;Supported Platforms&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you wish to contribute to the NuttX project, read the &lt;a href=&quot;https://nuttx.apache.org/docs/latest/contributing/index.html&quot;&gt;Contributing&lt;/a&gt; guidelines for information on Git usage, coding standard, workflow and the NuttX principles.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code in this repository is under either the Apache 2 license, or a license compatible with the Apache 2 license. See the &lt;a href=&quot;https://nuttx.apache.org/docs/latest/introduction/licensing.html&quot;&gt;License Page&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>freebsd/freebsd-src</title>
      <link>https://github.com/freebsd/freebsd-src</link>
      <description>&lt;p&gt;The FreeBSD src tree publish-only repository. Experimenting with &#39;simple&#39; pull requests....&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;FreeBSD Source:&lt;/h2&gt; 
&lt;p&gt;This is the top level of the FreeBSD source directory.&lt;/p&gt; 
&lt;p&gt;FreeBSD is an operating system used to power modern servers, desktops, and embedded platforms. A large community has continually developed it for more than thirty years. Its advanced networking, security, and storage features have made FreeBSD the platform of choice for many of the busiest web sites and most pervasive embedded networking and storage devices.&lt;/p&gt; 
&lt;p&gt;For copyright information, please see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/COPYRIGHT&quot;&gt;the file COPYRIGHT&lt;/a&gt; in this directory. Additional copyright information also exists for some sources in this tree - please see the specific source directories for more information.&lt;/p&gt; 
&lt;p&gt;The Makefile in this directory supports a number of targets for building components (or all) of the FreeBSD source tree. See build(7), config(8), &lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/cutting-edge/#makeworld&quot;&gt;FreeBSD handbook on building userland&lt;/a&gt;, and &lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/kernelconfig/&quot;&gt;Handbook for kernels&lt;/a&gt; for more information, including setting make(1) variables.&lt;/p&gt; 
&lt;p&gt;For information on the CPU architectures and platforms supported by FreeBSD, see the &lt;a href=&quot;https://www.freebsd.org/platforms/&quot;&gt;FreeBSD website&#39;s Platforms page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For official FreeBSD bootable images, see the &lt;a href=&quot;https://download.freebsd.org/ftp/releases/ISO-IMAGES/&quot;&gt;release page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Source Roadmap:&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Directory&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bin&lt;/td&gt; 
   &lt;td&gt;System/user commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cddl&lt;/td&gt; 
   &lt;td&gt;Various commands and libraries under the Common Development and Distribution License.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;contrib&lt;/td&gt; 
   &lt;td&gt;Packages contributed by 3rd parties.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;crypto&lt;/td&gt; 
   &lt;td&gt;Cryptography stuff (see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/crypto/README&quot;&gt;crypto/README&lt;/a&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;etc&lt;/td&gt; 
   &lt;td&gt;Template files for /etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gnu&lt;/td&gt; 
   &lt;td&gt;Commands and libraries under the GNU General Public License (GPL) or Lesser General Public License (LGPL). Please see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/gnu/COPYING&quot;&gt;gnu/COPYING&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/gnu/COPYING.LIB&quot;&gt;gnu/COPYING.LIB&lt;/a&gt; for more information.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;include&lt;/td&gt; 
   &lt;td&gt;System include files.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;kerberos5&lt;/td&gt; 
   &lt;td&gt;Kerberos5 (Heimdal) package.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;lib&lt;/td&gt; 
   &lt;td&gt;System libraries.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;libexec&lt;/td&gt; 
   &lt;td&gt;System daemons.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;release&lt;/td&gt; 
   &lt;td&gt;Release building Makefile &amp;amp; associated tools.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;rescue&lt;/td&gt; 
   &lt;td&gt;Build system for statically linked /rescue utilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sbin&lt;/td&gt; 
   &lt;td&gt;System commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;secure&lt;/td&gt; 
   &lt;td&gt;Cryptographic libraries and commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;share&lt;/td&gt; 
   &lt;td&gt;Shared resources.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;stand&lt;/td&gt; 
   &lt;td&gt;Boot loader sources.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sys&lt;/td&gt; 
   &lt;td&gt;Kernel sources (see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/sys/README.md&quot;&gt;sys/README.md&lt;/a&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;targets&lt;/td&gt; 
   &lt;td&gt;Support for experimental &lt;code&gt;DIRDEPS_BUILD&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tests&lt;/td&gt; 
   &lt;td&gt;Regression tests which can be run by Kyua. See &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/tests/README&quot;&gt;tests/README&lt;/a&gt; for additional information.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tools&lt;/td&gt; 
   &lt;td&gt;Utilities for regression testing and miscellaneous tasks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;usr.bin&lt;/td&gt; 
   &lt;td&gt;User commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;usr.sbin&lt;/td&gt; 
   &lt;td&gt;System administration commands.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For information on synchronizing your source tree with one or more of the FreeBSD Project&#39;s development branches, please see &lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/cutting-edge/#current-stable&quot;&gt;FreeBSD Handbook&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php/php-src</title>
      <link>https://github.com/php/php-src</link>
      <description>&lt;p&gt;The PHP Interpreter&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.php.net&quot;&gt; &lt;img alt=&quot;PHP&quot; src=&quot;https://www.php.net/images/logos/new-php-logo.svg?sanitize=true&quot; width=&quot;150&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;The PHP Interpreter&lt;/h1&gt; 
&lt;p&gt;PHP is a popular general-purpose scripting language that is especially suited to web development. Fast, flexible and pragmatic, PHP powers everything from your blog to the most popular websites in the world. PHP is distributed under the &lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/LICENSE&quot;&gt;PHP License v3.01&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/php/php-src/actions/workflows/push.yml&quot;&gt;&lt;img src=&quot;https://github.com/php/php-src/actions/workflows/push.yml/badge.svg?sanitize=true&quot; alt=&quot;Push&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:php&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/php.svg?sanitize=true&quot; alt=&quot;Fuzzing Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The PHP manual is available at &lt;a href=&quot;https://www.php.net/docs&quot;&gt;php.net/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prebuilt packages and binaries&lt;/h3&gt; 
&lt;p&gt;Prebuilt packages and binaries can be used to get up and running fast with PHP.&lt;/p&gt; 
&lt;p&gt;For Windows, the PHP binaries can be obtained from &lt;a href=&quot;https://windows.php.net&quot;&gt;windows.php.net&lt;/a&gt;. After extracting the archive the &lt;code&gt;*.exe&lt;/code&gt; files are ready to use.&lt;/p&gt; 
&lt;p&gt;For other systems, see the &lt;a href=&quot;https://www.php.net/install&quot;&gt;installation chapter&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Building PHP source code&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;For Windows, see &lt;a href=&quot;https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2&quot;&gt;Build your own PHP on Windows&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;For a minimal PHP build from Git, you will need autoconf, bison, and re2c. For a default build, you will additionally need libxml2 and libsqlite3.&lt;/p&gt; 
&lt;p&gt;On Ubuntu, you can install these using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install -y pkg-config build-essential autoconf bison re2c \
                    libxml2-dev libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora, you can install these using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo dnf install re2c bison autoconf make libtool ccache libxml2-devel sqlite-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generate configure:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./buildconf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Configure your build. &lt;code&gt;--enable-debug&lt;/code&gt; is recommended for development, see &lt;code&gt;./configure --help&lt;/code&gt; for a full list of options.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# For development
./configure --enable-debug
# For production
./configure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build PHP. To speed up the build, specify the maximum number of jobs using &lt;code&gt;-j&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make -j4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The number of jobs should usually match the number of available cores, which can be determined using &lt;code&gt;nproc&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Testing PHP source code&lt;/h2&gt; 
&lt;p&gt;PHP ships with an extensive test suite, the command &lt;code&gt;make test&lt;/code&gt; is used after successful compilation of the sources to run this test suite.&lt;/p&gt; 
&lt;p&gt;It is possible to run tests using multiple cores by setting &lt;code&gt;-jN&lt;/code&gt; in &lt;code&gt;TEST_PHP_ARGS&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make TEST_PHP_ARGS=-j4 test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Shall run &lt;code&gt;make test&lt;/code&gt; with a maximum of 4 concurrent jobs: Generally the maximum number of jobs should not exceed the number of cores available.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://qa.php.net&quot;&gt;qa.php.net&lt;/a&gt; site provides more detailed info about testing and quality assurance.&lt;/p&gt; 
&lt;h2&gt;Installing PHP built from source&lt;/h2&gt; 
&lt;p&gt;After a successful build (and test), PHP may be installed with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Depending on your permissions and prefix, &lt;code&gt;make install&lt;/code&gt; may need super user permissions.&lt;/p&gt; 
&lt;h2&gt;PHP extensions&lt;/h2&gt; 
&lt;p&gt;Extensions provide additional functionality on top of PHP. PHP consists of many essential bundled extensions. Additional extensions can be found in the PHP Extension Community Library - &lt;a href=&quot;https://pecl.php.net&quot;&gt;PECL&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The PHP source code is located in the Git repository at &lt;a href=&quot;https://github.com/php/php-src&quot;&gt;github.com/php/php-src&lt;/a&gt;. Contributions are most welcome by forking the repository and sending a pull request.&lt;/p&gt; 
&lt;p&gt;Discussions are done on GitHub, but depending on the topic can also be relayed to the official PHP developer mailing list &lt;a href=&quot;mailto:internals@lists.php.net&quot;&gt;internals@lists.php.net&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;New features require an RFC and must be accepted by the developers. See &lt;a href=&quot;https://wiki.php.net/rfc&quot;&gt;Request for comments - RFC&lt;/a&gt; and &lt;a href=&quot;https://wiki.php.net/rfc/voting&quot;&gt;Voting on PHP features&lt;/a&gt; for more information on the process.&lt;/p&gt; 
&lt;p&gt;Bug fixes don&#39;t require an RFC. If the bug has a GitHub issue, reference it in the commit message using &lt;code&gt;GH-NNNNNN&lt;/code&gt;. Use &lt;code&gt;#NNNNNN&lt;/code&gt; for tickets in the old &lt;a href=&quot;https://bugs.php.net&quot;&gt;bugs.php.net&lt;/a&gt; bug tracker.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Fix GH-7815: php_uname doesn&#39;t recognise latest Windows versions
Fix #55371: get_magic_quotes_gpc() throws deprecation warning
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://wiki.php.net/vcs/gitworkflow&quot;&gt;Git workflow&lt;/a&gt; for details on how pull requests are merged.&lt;/p&gt; 
&lt;h3&gt;Guidelines for contributors&lt;/h3&gt; 
&lt;p&gt;See further documents in the repository for more information on how to contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/CONTRIBUTING.md&quot;&gt;Contributing to PHP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/CODING_STANDARDS.md&quot;&gt;PHP coding standards&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://php.github.io/php-src/&quot;&gt;Internal documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/docs/mailinglist-rules.md&quot;&gt;Mailing list rules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/docs/release-process.md&quot;&gt;PHP release process&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;For the list of people who&#39;ve put work into PHP, please see the &lt;a href=&quot;https://www.php.net/credits.php&quot;&gt;PHP credits page&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mbed-TLS/mbedtls</title>
      <link>https://github.com/Mbed-TLS/mbedtls</link>
      <description>&lt;p&gt;An open source, portable, easy to use, readable and flexible TLS library, and reference implementation of the PSA Cryptography API. Releases are on a varying cadence, typically around 3 - 6 months between releases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; 
&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&quot;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; 
&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; 
&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The main Mbed TLS documentation is available via &lt;a href=&quot;https://mbed-tls.readthedocs.io/&quot;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Documentation for the PSA Cryptography API is available &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure that &lt;a href=&quot;http://www.doxygen.nl/&quot;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For other sources of documentation, see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make&lt;/li&gt; 
 &lt;li&gt;CMake&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; 
&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto/libtfpsacrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto/libtfpsacrypto, and libmbedx509 depends on libmbedcrypto/libtfpsacrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tool versions&lt;/h3&gt; 
&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; 
 &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, Arm Compiler 6, IAR 8 and Visual Studio 2017. More recent versions should work. Slightly older versions may work.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 to generate the test code. Python is also needed to integrate PSA drivers and to build the development branch (see next section).&lt;/li&gt; 
 &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; 
 &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio 2017 or later (if using Visual Studio).&lt;/li&gt; 
 &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Git usage&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;development&lt;/code&gt; branch and the &lt;code&gt;mbedtls-3.6&lt;/code&gt; long-term support branch of Mbed TLS use a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules#_cloning_submodules&quot;&gt;Git submodule&lt;/a&gt; (&lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-framework&quot;&gt;framework&lt;/a&gt;). This is not needed to merely compile the library at a release tag. This is not needed to consume a release archive (zip or tar).&lt;/p&gt; 
&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; 
&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; 
&lt;p&gt;The following tools are required:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run: &lt;pre&gt;&lt;code&gt;python3 -m pip install --user -r scripts/basic.requirements.txt
&lt;/code&gt;&lt;/pre&gt; Depending on your Python installation, you may need to invoke &lt;code&gt;python&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;. To install the packages system-wide, omit the &lt;code&gt;--user&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; 
&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; 
 &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;tests/scripts/check-generated-files.sh -u&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Make&lt;/h3&gt; 
&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; 
&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; 
&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make no_test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; 
&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; 
&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; 
&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; 
&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CMake&lt;/h3&gt; 
&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir
cmake /path/to/mbedtls_source
cmake --build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ctest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -LH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; 
&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now make the desired change:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; 
&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; 
&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::tfpsacrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;add_executable(xyz)

target_link_libraries(xyz
    PUBLIC MbedTLS::mbedtls
           MbedTLS::tfpsacrypto
           MbedTLS::mbedx509)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; 
&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; 
&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; 
&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; 
&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2017.&lt;/p&gt; 
&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; 
&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&quot;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Example programs&lt;/h2&gt; 
&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&quot;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_ssl.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; 
&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/depends.py&lt;/code&gt; test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-test/raw/main/README.md#quick-start&quot;&gt;our testing infrastructure repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; 
&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/&quot;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/&quot;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/&quot;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; 
 &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; 
 &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; 
 &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; 
 &lt;li&gt;Mixed-endian platforms are not supported.&lt;/li&gt; 
 &lt;li&gt;SIZE_MAX must be at least as big as INT_MAX and UINT_MAX.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;PSA cryptography API&lt;/h2&gt; 
&lt;h3&gt;PSA API&lt;/h3&gt; 
&lt;p&gt;Arm&#39;s &lt;a href=&quot;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&quot;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; 
&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; 
 &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; 
 &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; 
 &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; 
 &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&quot;mailto:mbed-crypto@arm.com&quot;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; 
&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. However, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.&lt;/p&gt; 
&lt;h3&gt;PSA drivers&lt;/h3&gt; 
&lt;p&gt;Mbed TLS supports drivers for cryptographic accelerators, secure elements and random generators. This is work in progress. Please note that the driver interfaces are not fully stable yet and may change without notice. We intend to preserve backward compatibility for application code (using the PSA Crypto API), but the code of the drivers may have to change in future minor releases of Mbed TLS.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/Mbed-TLS/TF-PSA-Crypto/raw/development/docs/psa-driver-example-and-guide.md&quot;&gt;PSA driver example and guide&lt;/a&gt; for information on writing a driver.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual &lt;a href=&quot;https://spdx.org/licenses/Apache-2.0.html&quot;&gt;Apache-2.0&lt;/a&gt; OR &lt;a href=&quot;https://spdx.org/licenses/GPL-2.0-or-later.html&quot;&gt;GPL-2.0-or-later&lt;/a&gt; license. See the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for the full text of these licenses, and &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md#License-and-Copyright&quot;&gt;the &#39;License and Copyright&#39; section in the contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Third-party code included in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;This project contains code from other projects. This code is located within the &lt;code&gt;tf-psa-crypto/drivers/&lt;/code&gt; directory. The original license text is included within project subdirectories, where it differs from the normal Mbed TLS license, and/or in source files. The projects are listed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;drivers/everest/&lt;/code&gt;: Files stem from &lt;a href=&quot;https://project-everest.github.io/&quot;&gt;Project Everest&lt;/a&gt; and are distributed under the Apache 2.0 license.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;drivers/p256-m/p256-m/&lt;/code&gt;: Files have been taken from the &lt;a href=&quot;https://github.com/mpg/p256-m&quot;&gt;p256-m&lt;/a&gt; repository. The code in the original repository is distributed under the Apache 2.0 license. It is distributed in Mbed TLS under a dual Apache-2.0 OR GPL-2.0-or-later license with permission from the author.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&quot;mailto:mbed-tls-security@lists.trustedfirmware.org&quot;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&quot;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&quot;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
