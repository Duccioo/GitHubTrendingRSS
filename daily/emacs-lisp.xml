<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Emacs Lisp Daily Trending</title>
    <description>Daily Trending of Emacs Lisp in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:30:47 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>alexluigit/dirvish</title>
      <link>https://github.com/alexluigit/dirvish</link>
      <description>&lt;p&gt;A polished Dired with batteries included.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;#+AUTHOR: Alex Lu #+EMAIL: &lt;a href=&quot;mailto:alexluigit@gmail.com&quot;&gt;alexluigit@gmail.com&lt;/a&gt; #+startup: content #+html: &lt;img src=&quot;https://user-images.githubusercontent.com/16313743/159204052-c8caf89d-c44f-42c7-a177-4cd2491eaab6.svg?sanitize=true&quot; align=&quot;center&quot; width=&quot;100%&quot;&gt;&lt;/h2&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;A &lt;i&gt;polished&lt;/i&gt; &lt;b&gt;Dired&lt;/b&gt; with batteries included&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Introduction&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Dirvish enhances Emacs&#39; built-in Dired mode, providing a visually appealing and highly customizable interface. More than just a facelift, Dirvish delivers a comprehensive suite of features, transforming Dired into a modern and fully functional file manager.&lt;/p&gt; 
&lt;p&gt;#+begin_quote The experience of dirvish is surreal and even bizarre after all these years of trying to use dired. Like how professionals make their craft look easy, dirvish does something similar with how it builds on dired. Dirvish is paradoxical in that it provides a completely different experience while still fundamentally being dired at its core.&lt;/p&gt; 
&lt;p&gt;-- Special thanks to @noctuid for [[https://github.com/alexluigit/dirvish/issues/34][this summary of Dirvish]] #+end_quote&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Screenshots&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[[https://user-images.githubusercontent.com/16313743/190370038-1d64a7aa-ac1c-4436-a2a3-05cd801de0a4.png][https://user-images.githubusercontent.com/16313743/190370038-1d64a7aa-ac1c-4436-a2a3-05cd801de0a4.png]]&lt;/p&gt; 
&lt;p&gt;[[https://user-images.githubusercontent.com/16313743/189978788-900b3de7-b3e5-42a6-9f28-426e1e80c314.png][https://user-images.githubusercontent.com/16313743/189978788-900b3de7-b3e5-42a6-9f28-426e1e80c314.png]]&lt;/p&gt; 
&lt;p&gt;[[https://user-images.githubusercontent.com/16313743/189978802-f6fb09ea-13a2-4dc9-828b-992523d51dd5.png][https://user-images.githubusercontent.com/16313743/189978802-f6fb09ea-13a2-4dc9-828b-992523d51dd5.png]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Dirvish is available from [[https://elpa.nongnu.org/nongnu/dirvish.html][Nongnu-Elpa]] and [[https://melpa.org/#/dirvish][Melpa]]. You can install it directly via =M-x package-install RET dirvish RET= on Emacs 28.1+. After installation, activate Dirvish globally with =M-x dirvish-override-dired-mode RET=.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quickstart&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=M-x dirvish RET=&lt;/p&gt; &lt;p&gt;Welcome to Dirvish! Use your favorite dired commands here, press &lt;del&gt;q&lt;/del&gt; to quit.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=M-x dirvish-dwim RET=&lt;/p&gt; &lt;p&gt;Works the same as &lt;del&gt;dirvish&lt;/del&gt; when the selected window is the only window; otherwise, it avoids occupying the entire frame.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=M-x dirvish-dispatch RET=&lt;/p&gt; &lt;p&gt;This is a help/cheatsheet menu powered by &lt;del&gt;transient.el&lt;/del&gt;, the same library used to implement keyboard-driven menus in Magit and many Dirvish extensions. If you prefer this interaction style, consider binding these menus to &lt;del&gt;dirvish-mode-map&lt;/del&gt;. See [[file:docs/CUSTOMIZING.org][example config]] for details.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more dirvish customization options and features, see our documentation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[file:docs/CUSTOMIZING.org][Customizing]]&lt;/li&gt; 
 &lt;li&gt;[[file:docs/EXTENSIONS.org][Extensions]]&lt;/li&gt; 
 &lt;li&gt;[[file:docs/FAQ.org][FAQ]]&lt;/li&gt; 
 &lt;li&gt;[[file:docs/EMACS-NEWCOMERS.org][Absolute beginner&#39;s guide]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Resources&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To delve deeper into Dirvish, explore these resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[file:docs/COMPARISON.org][Related projects]]&lt;/li&gt; 
 &lt;li&gt;[[file:docs/CHANGELOG.org][Changelog]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/alexluigit/dirvish/discussions][Discussions]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Acknowledgements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This package draws inspiration from the terminal file manager [[https://github.com/ranger/ranger][ranger]]. Some extensions began as rewrites of packages from [[https://github.com/Fuco1/dired-hacks][dired-hacks]], but have since been significantly enhanced.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Code contributions&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;@@html:&lt;a href=&quot;https://github.com/alexluigit/dirvish/graphs/contributors&quot;&gt;@@ @@html:&lt;img src=&quot;https://contrib.rocks/image?repo=alexluigit/dirvish&quot;&gt;@@ @@html:&lt;/a&gt;@@&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Useful advice and discussions&lt;/em&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/noctuid][Fox Kiester]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/karthink][karthink]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/gcv][gcv]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/aikrahguzar][aikrahguzar]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/minad][Daniel Mendler]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The name &lt;em&gt;dirvish&lt;/em&gt; is a tribute to [[https://github.com/justinmk/vim-dirvish][vim-dirvish]].&lt;/h2&gt; 
&lt;p&gt;[[https://elpa.nongnu.org/nongnu/dirvish.html][file:https://elpa.nongnu.org/nongnu/dirvish.svg]] [[https://melpa.org/#/dirvish][file:https://melpa.org/packages/dirvish-badge.svg]] [[https://stable.melpa.org/#/dirvish][file:https://stable.melpa.org/packages/dirvish-badge.svg]] [[https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml][file:https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml/badge.svg]]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>syl20bnr/spacemacs</title>
      <link>https://github.com/syl20bnr/spacemacs</link>
      <description>&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&quot;top&quot; id=&quot;fork-destination-box&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Made with Spacemacs&quot; height=&quot;20&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/gplv3.png&quot; alt=&quot;GPLv3 Software&quot; align=&quot;right&quot; height=&quot;20&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.twitter.com/spacemacs&quot;&gt;&lt;img src=&quot;https://i.imgur.com/tXSoThF.png&quot; alt=&quot;Twitter&quot; align=&quot;right&quot; height=&quot;20&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- logo and links --&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&quot; alt=&quot;Spacemacs&quot;&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#core-pillars&quot;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&quot;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#screenshots&quot;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION.html&quot;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#achievements&quot;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;!-- badges --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/p4MddFu6Ag&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&quot;&gt;&lt;img src=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&quot; alt=&quot;elisp state&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&quot; alt=&quot;Merchandise&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&quot; alt=&quot;Recommend it&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you &lt;em&gt;don&#39;t&lt;/em&gt; have an existing Emacs setup and want to run Spacemacs as your configuration, and if you have all &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&quot;&gt;prerequisites&lt;/a&gt; installed, you can install Spacemacs with one line:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;HOME&lt;/code&gt; is not set in environment or in registry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $env:APPDATA/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you do have an existing Emacs configuration, look at the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&quot;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on &lt;em&gt;ergonomics&lt;/em&gt;, &lt;em&gt;mnemonics&lt;/em&gt; and &lt;em&gt;consistency&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; 
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; 
&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&quot; alt=&quot;spacemacs_python&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;SPC&lt;/kbd&gt; or &lt;kbd&gt;Alt-m&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organized in configuration layers following a set of &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions &lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/FAQ.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting Help&lt;/h1&gt; 
&lt;p&gt;If you need help, ask your questions in the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; 
&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&quot;https://irc.gitter.im/&quot;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; 
&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jack of Some&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&quot;&gt;Spacemacs tutorial videos&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;GDQuest&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&quot;&gt;Game Design oriented tutorials &lt;/a&gt; to Spacemacs.&lt;/li&gt; 
 &lt;li&gt;Practicalli&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=jMJ58Gcc1RI&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&quot;&gt;Clojure tutorials based on Spacemacs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Eivind Fonn&#39;s classic &lt;a href=&quot;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&quot;&gt;Spacemacs ABC&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;A package manager if the OS doesn&#39;t have one already.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs is an extension of a popular text editor called &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;. So you&#39;ll need Emacs installed first.&lt;/p&gt; &lt;p&gt;Spacemacs requires Emacs 28.2 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;git&lt;/a&gt; is required to download and update Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Tar, in particular &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt;, is required to install and update Emacs packages used by Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; The default font used by Spacemacs is &lt;a href=&quot;https://adobe-fonts.github.io/source-code-pro/&quot;&gt;Source Code Pro&lt;/a&gt;. You may customize your own font settings and choose another font. If you want to use this default font, it must be installed.&lt;/p&gt; &lt;p&gt;Spacemacs also uses fallback fonts to ensure certain Unicode symbols it uses symbols appear correctly. The fonts used are determined by the OS:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Linux: &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;Nanum Gothic&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;macOS: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/arial-unicode-ms&quot;&gt;Arial Unicode MS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Windows: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/ms-gothic&quot;&gt;MS Gothic&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/lucida-sans-unicode&quot;&gt;Lucida Sans Unicode&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If the mode-line doesn&#39;t look similar to the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&quot;&gt;picture at the top of this page&lt;/a&gt;, make sure you have the correct fallback font installed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Various commands in Spacemacs needs one of the following line searching program:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep (rg)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;The silver searcher (ag)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/monochromegane/the_platinum_searcher&quot;&gt;The platinum searcher (pt)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beyondgrep/ack3&quot;&gt;ack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU Grep&lt;/a&gt; or &lt;a href=&quot;https://man.openbsd.org/grep&quot;&gt;BSD Grep&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Grep is very slow but it&#39;s widely available on most systems and is used as an fallback option.&lt;/p&gt; &lt;p&gt;We strongly recommend &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; over other line searching programs, for its blazing fast speed. The following subsections helps you to install it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Most Linux distribution ships a package manager already and if this is the case you are all set for this step.&lt;/p&gt; &lt;p&gt;If it doesn&#39;t, you may need to build the softwares mentioned below from their sources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In most distributions, Emacs is installed via an &lt;code&gt;emacs&lt;/code&gt; package from the package manager.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; DO not install &lt;a href=&quot;https://www.xemacs.org&quot;&gt;XEmacs&lt;/a&gt; because it&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs with various &lt;a href=&quot;https://www.emacswiki.org/emacs/EmacsAndXEmacs&quot;&gt;subtle differences&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Some Linux distributions support only Emacs versions older than 28.2. In this case you should &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&quot;&gt;build it from source&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Git is already installed on your system. Otherwise, you should be able to install &lt;code&gt;git&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Tar is already installed on your system. Otherwise, you should be able to install &lt;code&gt;tar&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If Nerd Fonts and Nanum Gothic are available from your distribution&#39;s package manager, you should install it there.&lt;/p&gt; &lt;p&gt;Otherwise, the generic way to install it is:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Download the latest pre-built &lt;code&gt;TTF&lt;/code&gt; font from &lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro/releases/latest&quot;&gt;https://github.com/adobe-fonts/source-code-pro/releases/latest&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;https://fonts.google.com/specimen/Nanum+Gothic&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Extract the archive and move the font files to &lt;code&gt;~/.fonts&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Refresh font cache with:&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;fc-cache -fv
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If your distribution is listed &lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation=&quot;&gt;here&lt;/a&gt;, follow the instructions. Otherwise, you can download its pre-built binary or build it from source.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The most popular package manager on macOS is &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;, to install it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Several options exist for installing Emacs on macOS:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus&quot;&gt;Emacs Plus&lt;/a&gt; features &lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus#features-explained&quot;&gt;additional functionalities&lt;/a&gt; over base Emacs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap d12frosted/emacs-plus

# install latest stable release, with Spacemacs icon and native compilation
brew install emacs-plus --with-spacemacs-icon --with-native-comp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will require the latest version of Xcode Command Line tools, which can be downloaded from the &lt;a href=&quot;https://developer.apple.com/download/all/&quot;&gt;Apple Developer Portal&lt;/a&gt; or by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;softwareupdate --all --install --force
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/railwaycat/homebrew-emacsmacport&quot;&gt;Emacs Mac Port&lt;/a&gt; adds native GUI support to Emacs 28. And the full list of features is available &lt;a href=&quot;https://bitbucket.org/mituharu/emacs-mac/src/master/README-mac&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap railwaycat/emacsmacport
brew install emacs-mac
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://emacsformacosx.com/&quot;&gt;Emacs for Mac OS X&lt;/a&gt; is the binary build of GNU Emacs, &lt;em&gt;without&lt;/em&gt; any extra feature.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;macOS ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but there are reports of weird issues so we require &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install gnu-tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; To install Source Code Pro Font:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap homebrew/cask-fonts
brew install --cask font-source-code-pro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Arial Unicode MS is shipped with macOS v10.5 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; via &lt;code&gt;Homebrew&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;We recommend using wsl2 with wslg support especially with a pgtk build of emacs and wayland. For the installation please refer to the linux installation section. When running emacs within your wsl2 environment emacs will be handled like any other windows application.&lt;/p&gt; 
&lt;p&gt;If this is not possible you can fallback to a native windows installation, however note that this will create a lot of subtle bugs especially with tls which we will most likely not be able to help with.&lt;/p&gt; 
&lt;p&gt;If you need to follow that path we recommend to at least use a package manager like &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; to install the needed packages.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You can install &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; via PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
irm get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Emacs can be installed in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add extras
scoop install emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows 10 build 17063 and later ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but it&#39;s required to install &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead to avoid possible issues. Alternatively, if you are running an earlier version of Windows, Tar isn&#39;t installed. In either case, you can install GNU Tar via:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install Source Code Pro Font in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add KnotUntied_scoop-fonts https://github.com/KnotUntied/scoop-fonts
scoop install sourcecodepro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MS Gothic and Lucida Sans Unicode are shipped with Windows 2003 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;h2&gt;Default Install&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The default installation downloads Spacemacs to the &lt;code&gt;.emacs.d&lt;/code&gt; directory in your &lt;code&gt;HOME&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;But in the case of Windows, &lt;code&gt;HOME&lt;/code&gt; is not set out-of-box. We recommend you to set it as an environment variable, with the same value as environment variable &lt;code&gt;HOMEPATH&lt;/code&gt;, which usually looks like &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Since Spacemacs will now be downloaded at &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;, if it already exists it&#39;ll be overridden.&lt;/p&gt; &lt;p&gt;Also, if you have either &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; or &lt;code&gt;$HOME/.emacs&lt;/code&gt;, they will appear before Spacemacs in Emacs&#39;s initialization steps. Thus they must be renamed in order for Spacemacs to load correctly.&lt;/p&gt; &lt;p&gt;To backup/rename the aforementioned files/directory, in shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[ -d $HOME/.emacs.d ] &amp;amp;&amp;amp; mv $HOME/.emacs.d $HOME/.emacs.d.bak
[ -f $HOME/.emacs.el ] &amp;amp;&amp;amp; mv $HOME/.emacs.el .emacs.el.bak
[ -f $HOME/.emacs ] &amp;amp;&amp;amp; mv $HOME/.emacs $HOME/.emacs.bak
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;if( Test-Path -Path $HOME/.emacs.d )
{
    Rename-Item $HOME/.emacs.d $HOME/.emacs.d.bak
}
if( Test-Path -Path $HOME/.emacs.el )
{
    Rename-Item $HOME/.emacs.el $HOME/.emacs.el.bak
}
if( Test-Path -Path $HOME/.emacs )
{
    Rename-Item $HOME/.emacs $HOME/.emacs.bak
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now clone this repository with Git. The following work for both shell and PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you have a limited internet connection or limited speed:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch Emacs and Spacemacs will be loaded.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Alternative Install Location&lt;/h2&gt; 
&lt;p&gt;To install Spacemacs in a different location, we first need to introduce how Spacemacs is loaded:&lt;/p&gt; 
&lt;p&gt;When Emacs is started, it looks for the init file &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;in a deterministic way&lt;/a&gt;. The &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-install&quot;&gt;default installation&lt;/a&gt; exploits it by occupying &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt; and let Emacs use it as its init file.&lt;/p&gt; 
&lt;p&gt;In other word, in default installation, Emacs find and load &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt;, which is then responsible to load other files in &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to install Spacemacs to a different location, you need to make sure it&#39;s loaded by Emacs in one of its &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;init file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, if you&#39;ve cloned Spacemacs to &lt;code&gt;$HOME/Spacemacs&lt;/code&gt;, and if you use &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; as Emacs init file, then the following lines in &lt;code&gt;$HOME/.emacs.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; load Spacemacs&#39;s initialization file, &quot;~&quot; is equivalent to &quot;$HOME&quot;
(load-file &quot;~/Spacemacs/init.el&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;First Launch and Configuration&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;After cloning Spacemacs, the first time when you launch Emacs, Spacemacs will automatically install the essential packages it requires. This step is the bootstrap.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once the bootstrap packages are installed, Spacemacs checks whether you have an customization file &lt;code&gt;$HOME/.spacemacs&lt;/code&gt;, known as &lt;code&gt;dotspacemacs&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If it already exists, Spacemacs loads it as the configuration.&lt;/li&gt; 
   &lt;li&gt;Otherwise, you need to answer a few questions and Spacemacs will generate the &lt;code&gt;dotspacemacs&lt;/code&gt; file for you.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If you are new to Emacs and/or Spacemacs, it&#39;s fine to just accept the default choices. They can be changed in the &lt;code&gt;dotspacemacs&lt;/code&gt; file later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs will download and install remaining packages it will require, according to your &lt;code&gt;dotspacemacs&lt;/code&gt;. When the all the packages have been installed, restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dotspacemacs&lt;/code&gt; is the configuration file for Spacemacs, it&#39;s self explanatory and is written in Emacs Lisp. Read &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In case you want to store your &lt;code&gt;dotspacemacs&lt;/code&gt; at another location, say under &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First set the environment variable &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Move &lt;code&gt;$HOME/.spacemacs&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d/init.el&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In other word, set &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to the parent directory of your &lt;code&gt;dotspacemacs&lt;/code&gt;, and move &lt;code&gt;dotspacemacs&lt;/code&gt; to the said directory.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Spacemacs logo&lt;/h2&gt; 
&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&quot;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&quot;&gt;this .desktop file&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, by default &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For macOS users, you need to &lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;download the .icns version of the logo&lt;/a&gt; and simply &lt;a href=&quot;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&quot;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS, securely installing Emacs packages may fail. If this happens to you please update your OS and Emacs. If you are behind a company proxy please trust the company firewall cert. We do not longer support disabling https due to security reasons.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows)&lt;/em&gt; If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;From Properties select the Tab “Security”,&lt;/li&gt; 
   &lt;li&gt;Select the button “Advanced”,&lt;/li&gt; 
   &lt;li&gt;Select the Tab “Owner”&lt;/li&gt; 
   &lt;li&gt;Change the owner to your account name&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows&lt;/em&gt;) The period (dot) before a file or folder name means that it&#39;s a hidden file or folder. To show hidden files and folders:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Press the Windows key&lt;/li&gt; 
   &lt;li&gt;Type &lt;code&gt;File explorer options&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; 
   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Update&lt;/h1&gt; 
&lt;p&gt;Spacemacs relies solely on a rolling update scheme based on the latest changes available. To update Spacemacs, simply pull the latest changes from the &lt;code&gt;develop&lt;/code&gt; branch:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git pull --rebase
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;After updating Spacemacs, you should also check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button, or use the convenient keybinding &lt;kbd&gt;SPC f e U&lt;/kbd&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Upgrading from the deprecated &lt;code&gt;master&lt;/code&gt; branch&lt;/h2&gt; 
&lt;p&gt;If you are still on the old &lt;code&gt;master&lt;/code&gt; branch (i.e., if &lt;code&gt;git branch --show-current&lt;/code&gt; shows &lt;code&gt;master&lt;/code&gt; instead of &lt;code&gt;develop&lt;/code&gt;), you need to &lt;a href=&quot;https://practical.li/spacemacs/reference/switch-to-develop/&quot;&gt;upgrade to &lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; first.&lt;/p&gt; 
&lt;h1&gt;Quotes&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/ashnur&quot;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis
on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/deuill&quot;&gt;deuill&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Contributions&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; 
&lt;p&gt;Before contributing, be sure to consult the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Communities&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs.stackexchange.com/questions/tagged/spacemacs&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/spacemacs&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; 
&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/intellimacs&quot;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/spaceclipse&quot;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SpaceVim/SpaceVim&quot;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/VSpaceCode/VSpaceCode&quot;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the initialization and core files&lt;/li&gt; 
 &lt;li&gt;all the layer files&lt;/li&gt; 
 &lt;li&gt;the documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&quot;https://github.com/nashamri&quot;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; 
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; 
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&quot;https://salt.bountysource.com/teams/spacemacs&quot;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&quot;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you used Spacemacs in a project, and you want to show that fact, you can use the Spacemacs badge: &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Built with Spacemacs&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;https://spacemacs.org&quot;&amp;gt;&amp;lt;img alt=&quot;Built with Spacemacs&quot; src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-org&quot;&gt;[[https://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chep/copilot-chat.el</title>
      <link>https://github.com/chep/copilot-chat.el</link>
      <description>&lt;p&gt;Chat with Github copilot in Emacs !&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Copilot Chat for Emacs #+AUTHOR: Cédric Chépied&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Description This plugin allows you to chat with GitHub copilot.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[[file:chat.gif]]&lt;/p&gt; 
&lt;p&gt;Feel free to contribute, report issues or discuss new features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;News ** V2 v2.0.1 is here.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In v2, only one buffer is used for chat, thanks to polymode.&lt;/p&gt; 
&lt;p&gt;** Multiple instances You can try the =76-multiple-instances= branch. It&#39;s a work in progress. Copilot-chat instances are linked to a parent directory. Each instance has a dedicated history, context, model, buffer list… For the moment, I&#39;m developping it with curl backend and org frontend. The other configuration may not work. This is a huge code transformation so please be patient and report bugs or wanted features/behavior in the dedicated issue.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;Copilot-chat-display&lt;/del&gt; will try to guess current instance with current buffer file location. If it fails, instance will be asked to the user. With prefix argument, guessing is bypassed.&lt;/p&gt; 
&lt;p&gt;** Help wanted Bug reports and new ideas are very welcome.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tips&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Many of you won&#39;t read this readme. And many of those who start to read won&#39;t read more than a few lines. So I&#39;ll write some tips here, at the beginning.&lt;/p&gt; 
&lt;p&gt;** Yank When using the org frontend, you can yank code blocks provided by Copilot just as you would use the kill ring. Here&#39;s a simple configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (use-package copilot-chat … :bind (:map global-map (&quot;C-c C-y&quot; . copilot-chat-yank) (&quot;C-c M-y&quot; . copilot-chat-yank-pop) (&quot;C-c C-M-y&quot; . (lambda () (interactive) (copilot-chat-yank-pop -1)))) …) #+end_src&lt;/p&gt; 
&lt;p&gt;** Find input section In copilot-chat buffer, you can use (or bind to a key) the interactive &lt;del&gt;copilot-chat-goto-input&lt;/del&gt; function to place point at the beginning of the prompt area.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation ** Melpa Copilot-chat is available on melpa&amp;nbsp;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_example M-x package-install RET copilot-chat RET #+end_example&lt;/p&gt; 
&lt;p&gt;With =use-package= : #+begin_src emacs-lisp (use-package copilot-chat)&lt;/p&gt; 
&lt;p&gt;#+end_src&lt;/p&gt; 
&lt;p&gt;** Straight #+begin_src emacs-lisp (use-package copilot-chat :straight (:host github :repo &quot;chep/copilot-chat.el&quot; :files (&quot;*.el&quot;)) :after (request org markdown-mode)) #+end_src&lt;/p&gt; 
&lt;p&gt;** Manual Clone repository and eval files in emacs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configuration ** GitHub You will need a GitHub account with access to copilot API. When sending the first prompt, you will need to authenticate to GitHub. Follow instructions and everything will be fine.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Backend &lt;del&gt;copilot-chat-backend&lt;/del&gt; can be set to &lt;del&gt;&#39;curl&lt;/del&gt; (default) or &lt;del&gt;&#39;request&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;With curl, answers will be written token by token. Curl path can be set with &lt;code&gt;copilot-chat-curl-program&lt;/code&gt; variable.&lt;br&gt; With request library, the text is written when all data is read and this can be long.&lt;/p&gt; 
&lt;p&gt;** Frontend Several frontends are available. You can select your favorite one by setting the &lt;del&gt;copilot-chat-frontend&lt;/del&gt; variable to &lt;del&gt;&#39;org&lt;/del&gt; (default), &lt;del&gt;&#39;markdown&lt;/del&gt; or &lt;del&gt;&#39;shell-maker&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;Try them and choose wisely.&lt;/p&gt; 
&lt;p&gt;** Magit commits You can use copilot to generate your commit messages&amp;nbsp;:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;git-commit-setup-hook &#39;copilot-chat-insert-commit-message) #+end_src&lt;/p&gt; 
&lt;p&gt;Or call manually &lt;del&gt;(copilot-chat-insert-commit-message)&lt;/del&gt; when in the commit message buffer.&lt;/p&gt; 
&lt;p&gt;** Proxy The proxy can be configured with the curl backend. For the emacs-request backend, please refer to the emacs-request documentation if you need to configure a proxy.&lt;/p&gt; 
&lt;p&gt;Use the variables &lt;del&gt;copilot-chat-curl-proxy&lt;/del&gt;, &lt;del&gt;copilot-chat-curl-proxy-user-pass&lt;/del&gt;, and &lt;del&gt;copilot-chat-curl-proxy-insecure&lt;/del&gt; to set up a proxy. Refer to the documentation for each variable to learn how to use them.&lt;/p&gt; 
&lt;p&gt;Proxies have not been thoroughly tested yet, so there may be bugs. Many options are missing for HTTPS proxies. Please open an issue if you need additional features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage ** Basic Start chatting with &lt;del&gt;(copilot-chat-display)&lt;/del&gt;. Type your question in prompt, then press &lt;del&gt;C-c C-c&lt;/del&gt; or &lt;del&gt;C-c RET&lt;/del&gt;.&lt;br&gt; You may need to authenticate to GitHub. Follow instructions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can select buffers that will be added as context in your prompt. Use &lt;del&gt;copilot-chat-add-current-buffer&lt;/del&gt; and &lt;del&gt;copilot-chat-del-current-buffer&lt;/del&gt;. You can also manage buffers by using &lt;del&gt;(copilot-chat-list)&lt;/del&gt;. In the list, selected buffer will be highlighted using &lt;del&gt;copilot-chat-list-selected-buffer-face&lt;/del&gt; which inherit from &lt;del&gt;font-lock-keyword-face&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;Selected buffers will be sent with each prompt until you remove them.&lt;/p&gt; 
&lt;p&gt;** Transient You can call &lt;del&gt;(copilot-chat-transient)&lt;/del&gt; to open transient menu. Almost all functions are accessible.&lt;/p&gt; 
&lt;p&gt;** Functions *** Basic functions&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-reset)&lt;/del&gt; reset everything including history, frontend and included buffers (default). Use with prefix argument to preserve selected buffers.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-display)&lt;/del&gt; display copilot chat buffers.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-switch-to-buffer)&lt;/del&gt; switch to Copilot Chat buffer, side by side with the current code editing buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-set-model)&lt;/del&gt; Select AI model to use.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Prompt&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-goto-input&lt;/del&gt; place point at the beginning of the prompt area.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-custom-mini-buffer)&lt;/del&gt; ask for a prompt in minibuffer and send it to copilot.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-custom-prompt-selection)&lt;/del&gt; uses the provided prompt or asks for a prompt in minibuffer, then appends selection (or entire buffer), sends the result to copilot.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-prompt-history-previous)&lt;/del&gt; insert previous prompt from history in prompt buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-prompt-history-next)&lt;/del&gt; insert next prompt from history in prompt buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-ask-and-insert)&lt;/del&gt; ask for a custom prompt and write answer in current buffer at point.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Answer manipulation&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-yank)&lt;/del&gt; yank the last code block at point (org frontend only).&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-yank-pop)&lt;/del&gt; Replace last yank with previous block, or use argument to choose the block. Acts like &lt;del&gt;(yank-pop)&lt;/del&gt; (org frontend only).&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-send-to-buffer)&lt;/del&gt; send a code block to a chosen buffer. Replace selection if any (org and markdown frontends only).&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-copy-code-at-point)&lt;/del&gt; copy current code block into kill ring.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Buffers&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-add-current-buffer)&lt;/del&gt; add current buffer to copilot chat. Its content will be sent with every request.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-del-current-buffer)&lt;/del&gt; remove current buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-list)&lt;/del&gt; open buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-add-buffers-in-current-window)&lt;/del&gt; add all buffers in current Emacs window to copilot chat.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-add-files-under-dir)&lt;/del&gt; Add all files with same suffix as current file under current directory. If there are more than 40 files, refuse to add and show warning message.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Code helper functions&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-explain-symbol-at-line)&lt;/del&gt; ask Copilot to explain symbol under point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-explain)&lt;/del&gt; ask copilot to explain selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-review)&lt;/del&gt; ask copilot to review selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-doc)&lt;/del&gt; ask copilot to document selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-fix)&lt;/del&gt; ask copilot to fix selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-optimize)&lt;/del&gt; ask copilot to optimize selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-test)&lt;/del&gt; ask copilot to write tests for selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-explain-defun)&lt;/del&gt; ask copilot to explain current function under point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-custom-prompt-function)&lt;/del&gt; ask copilot to apply a custom prompt to the function body under point. Eg. instruct on how to refactor the function.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-review-whole-buffer)&lt;/del&gt; ask copilot to review the current whole buffer. It can be used to review the full class, or, review the magit diff for my change, or other people&#39;s change.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Magit&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-insert-commit-message)&lt;/del&gt; Insert in the current buffer a copilot generated commit message.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Transient&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient)&lt;/del&gt; display main transient menu to access all functions.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient-buffers)&lt;/del&gt; display transient menu for buffer management.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient-code)&lt;/del&gt; display transient menu for code helper functions.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient-magit)&lt;/del&gt; display transient menu for magit functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Troubleshooting&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-clear-auth-cache)&lt;/del&gt; clears the auth cache for Copilot Chat. You will have to login again.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Customizable variables All variables can be customized using &lt;del&gt;M-x customize-group RET copilot-chat RET&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;*** Backend&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-backend&lt;/del&gt; - Backend to use for API calls. Can be &lt;del&gt;&#39;curl&lt;/del&gt; (default) or &lt;del&gt;&#39;request&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-program&lt;/del&gt; - Path to curl executable when using curl backend.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy&lt;/del&gt; - Proxy configuration for curl backend. Supports HTTP/HTTPS/SOCKS protocols.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy-insecure&lt;/del&gt; - Skip SSL verification for proxy connections in curl backend.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy-user-pass&lt;/del&gt; - Proxy authentication credentials for curl backend.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Frontend&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-frontend&lt;/del&gt; - Frontend interface to use. Can be &lt;del&gt;&#39;org&lt;/del&gt; (default) or &lt;del&gt;&#39;markdown&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Display&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-list-added-buffers-only&lt;/del&gt; - By default, buffer list displays all buffers and uses faces to highlight added buffer. If set to &lt;del&gt;t&lt;/del&gt;, only added buffer are displayed.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-follow&lt;/del&gt; - If &lt;del&gt;t&lt;/del&gt; (default is &lt;del&gt;nil&lt;/del&gt;), point follows answer in chat buffer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Storage and cache&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-github-token-file&lt;/del&gt; - File path to store GitHub authentication token.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-token-cache&lt;/del&gt; - File path to store session token cache.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Model settings&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-model&lt;/del&gt; - AI model to use. It is better to use &lt;del&gt;(copilot-chat-set-model)&lt;/del&gt; to set it.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-model-ignore-picker&lt;/del&gt; - If &lt;del&gt;nil&lt;/del&gt; (default) add a filter to &lt;del&gt;(copilot-chat-set-model)&lt;/del&gt; which will only show models with &lt;del&gt;model_picker_enabled&lt;/del&gt; attribute.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Prompts Default prompts used by various commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-org-prompt&lt;/del&gt; - Base org system prompt configuring Copilot&#39;s behavior.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-markdown-prompt&lt;/del&gt; - Base markdown system prompt configuring Copilot&#39;s behavior.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-explain&lt;/del&gt; - Prompt for explain command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-review&lt;/del&gt; - Prompt for code review command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-doc&lt;/del&gt; - Prompt for documentation command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-fix&lt;/del&gt; - Prompt for fix command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-optimize&lt;/del&gt; - Prompt for optimization command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-test&lt;/del&gt; - Prompt for test generation command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-commit-prompt&lt;/del&gt; - Prompt for generating commit messages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Faces You can customize the appearance of the buffer list by modifying these faces:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-list-default-face&lt;/del&gt; - Face used for unselected buffers in the buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-list-selected-buffer-face&lt;/del&gt; - Face used for selected buffers in the buffer list.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Key bindings *** Prompt buffer&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-c&lt;/del&gt; send prompt. Answer will be written in chat buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c RET&lt;/del&gt; send prompt. Answer will be written in chat buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;M-p&lt;/del&gt; previous prompt.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;M-n&lt;/del&gt; next prompt.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-l&lt;/del&gt; open buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-q&lt;/del&gt; bury buffer and delete window.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-t&lt;/del&gt; open transient menu.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Buffer list buffer&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;RET&lt;/del&gt; select or deselect buffer on point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;space&lt;/del&gt; select or deselect buffer on point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-c&lt;/del&gt; clear buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;g&lt;/del&gt; refresh list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;q&lt;/del&gt; bury buffer and delete window.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Notes This plugin is unofficial and based on Copilot Chat for neovim repository: &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;https://github.com/CopilotC-Nvim/CopilotChat.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The prompt for git commit messages comes from [[https://github.com/ywkim/gpt-commit][gpt-commit]].&lt;/p&gt; 
&lt;p&gt;For GitHub copilot code completion in emacs, checkout [[https://github.com/copilot-emacs/copilot.el][copilot.el]]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs-tree-sitter/elisp-tree-sitter</title>
      <link>https://github.com/emacs-tree-sitter/elisp-tree-sitter</link>
      <description>&lt;p&gt;Emacs Lisp bindings for tree-sitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ELisp Tree-sitter &lt;img src=&quot;https://raw.githubusercontent.com/emacs-tree-sitter/elisp-tree-sitter/master/doc/static/img/emacs-tree-sitter-96x96.png&quot; align=&quot;left&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://emacs-tree-sitter.github.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-latest-blue&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/emacs-tree-sitter/elisp-tree-sitter/actions/workflows/main.yml&quot;&gt;&lt;img src=&quot;https://github.com/emacs-tree-sitter/elisp-tree-sitter/actions/workflows/main.yml/badge.svg?sanitize=true&quot; alt=&quot;GitHub Actions&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For Emacs 29+, please use &lt;a href=&quot;https://lists.gnu.org/archive/html/emacs-devel/2022-11/msg01443.html&quot;&gt;the built-in integration&lt;/a&gt; instead of this package.&lt;/p&gt; 
&lt;p&gt;This is an Emacs Lisp binding for &lt;a href=&quot;https://tree-sitter.github.io/tree-sitter/&quot;&gt;tree-sitter&lt;/a&gt;, an incremental parsing library. It requires Emacs 25.1 or above, built with dynamic module support.&lt;/p&gt; 
&lt;p&gt;It aims to be the foundation for a new breed of Emacs packages that understand code structurally. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Faster, fine-grained code highlighting.&lt;/li&gt; 
 &lt;li&gt;More flexible code folding.&lt;/li&gt; 
 &lt;li&gt;Structural editing (like Paredit, or even better) for non-Lisp code.&lt;/li&gt; 
 &lt;li&gt;More informative indexing for imenu.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The author of tree-sitter articulated its merits a lot better in this &lt;a href=&quot;https://www.thestrangeloop.com/2018/tree-sitter---a-new-parsing-system-for-programming-tools.html&quot;&gt;Strange Loop talk&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://emacs-tree-sitter.github.io/installation/&quot;&gt;installation section&lt;/a&gt; in the documentation.&lt;/p&gt; 
&lt;p&gt;If you want to hack on &lt;code&gt;emacs-tree-sitter&lt;/code&gt; itself, see the next section instead.&lt;/p&gt; 
&lt;h2&gt;Setup for Development&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On Windows, use Powershell instead of Bash or cmd.exe.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone this repo with the &lt;code&gt;--recursive&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;Add 3 of its directories to &lt;code&gt;load-path&lt;/code&gt;: &lt;code&gt;core/&lt;/code&gt;, &lt;code&gt;lisp/&lt;/code&gt; and &lt;code&gt;langs/&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://emacs-eask.github.io/&quot;&gt;eask&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bin/setup&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you want to hack on the high-level features (in Lisp) only:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make changes to the &lt;code&gt;.el&lt;/code&gt; files.&lt;/li&gt; 
 &lt;li&gt;Add tests to &lt;code&gt;tree-sitter-tests.el&lt;/code&gt; and run them with &lt;code&gt;bin/test&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you want to build additional (or all) grammars from source, or work on the core dynamic module, see the next 2 sections.&lt;/p&gt; 
&lt;h3&gt;Building grammars from source&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are only interested in building the grammar binaries, not the dynamic module, check out &lt;a href=&quot;https://github.com/emacs-tree-sitter/tree-sitter-langs#building-grammars-from-source&quot;&gt;tree-sitter-langs&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install NodeJS. It is needed to generate the grammar code from the JavaScript DSL. The recommended tool to manage NodeJS is &lt;a href=&quot;https://volta.sh/&quot;&gt;volta&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://tree-sitter.github.io/tree-sitter/creating-parsers#installation&quot;&gt;tree-sitter CLI tool&lt;/a&gt;: (Its binary can also be downloaded directly from &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter/releases&quot;&gt;GitHub&lt;/a&gt;.) &lt;strong&gt;Note: version 0.20+ cannot be used, as they introduced &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter/pull/1157&quot;&gt;a breaking change&lt;/a&gt; in binary storage location.&lt;/strong&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# For yarn user
yarn global add tree-sitter-cli@0.19.3

# For npm user
npm install -g tree-sitter-cli@0.19.3
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;langs/script/compile&lt;/code&gt;. For example: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;langs/script/compile rust
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Working on the dynamic module&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the &lt;a href=&quot;https://rustup.rs/&quot;&gt;Rust toolchain&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Build: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bin/build
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Test: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bin/test
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Continuously rebuild and test on change (requires &lt;a href=&quot;https://github.com/passcod/cargo-watch&quot;&gt;cargo-watch&lt;/a&gt;): &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bin/test watch
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To test against a different version of Emacs, set the environment variable &lt;code&gt;EMACS&lt;/code&gt; (e.g. &lt;code&gt;EMACS=/snap/bin/emacs make test&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lists.gnu.org/archive/html/emacs-devel/2022-11/msg01443.html&quot;&gt;Tree-sitter in Emacs&#39;s core&lt;/a&gt; (the future)&lt;/li&gt; 
 &lt;li&gt;Binding through C instead of Rust: &lt;a href=&quot;https://github.com/karlotness/tree-sitter.el&quot;&gt;https://github.com/karlotness/tree-sitter.el&lt;/a&gt; (dormant)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Contributions are welcomed. Please take a look at the &lt;a href=&quot;https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues&quot;&gt;issue list&lt;/a&gt; for ideas, or &lt;a href=&quot;https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues/new&quot;&gt;create a new issue&lt;/a&gt; to describe any idea you have for improvement.&lt;/p&gt; 
&lt;p&gt;For language-specific issues/features, please check out &lt;a href=&quot;https://github.com/emacs-tree-sitter/tree-sitter-langs&quot;&gt;tree-sitter-langs&lt;/a&gt; instead.&lt;/p&gt; 
&lt;p&gt;Show respect and empathy towards others. Both technical empathy and general empathy are highly valued.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust-mode</title>
      <link>https://github.com/rust-lang/rust-mode</link>
      <description>&lt;p&gt;Emacs configuration for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rust-mode&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://elpa.nongnu.org/nongnu/rust-mode.html&quot;&gt;&lt;img src=&quot;https://elpa.nongnu.org/nongnu/rust-mode.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/rust-mode&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/rust-mode-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/rust-lang/rust-mode/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/rust-lang/rust-mode/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; 
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#rust-mode&quot;&gt;rust-mode&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#known-issues&quot;&gt;Known issues&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#installation&quot;&gt;Installation&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#melpa&quot;&gt;Melpa&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#manual-installation&quot;&gt;Manual installation&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#feature-guide&quot;&gt;Feature guide&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#indentation&quot;&gt;Indentation&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#code-formatting&quot;&gt;Code formatting&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#prettifying&quot;&gt;Prettifying&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#running--testing--compiling-code&quot;&gt;Running / testing / compiling code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#clippy&quot;&gt;Clippy&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#easy-insertion-of-dbg&quot;&gt;Easy insertion of dbg!&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#more-commands&quot;&gt;More commands&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#tree-sitter&quot;&gt;tree-sitter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#lsp&quot;&gt;LSP&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#eglot&quot;&gt;eglot&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#lsp-mode&quot;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#auto-completion&quot;&gt;Auto-completion&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#other-recommended-packages&quot;&gt;Other recommended packages&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#flycheck&quot;&gt;flycheck&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#cargoel&quot;&gt;cargo.el&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#cargo-mode&quot;&gt;cargo-mode&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#rustic&quot;&gt;rustic&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#optional-features&quot;&gt;Optional features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#for-package-maintainers&quot;&gt;For package maintainers&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#tests&quot;&gt;Tests&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdown-toc end --&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;rust-mode&lt;/code&gt; makes editing &lt;a href=&quot;http://rust-lang.org&quot;&gt;Rust&lt;/a&gt; code with Emacs enjoyable. It requires Emacs 25 or later, and is included in both &lt;a href=&quot;https://github.com/bbatsov/prelude&quot;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&quot;https://github.com/syl20bnr/spacemacs&quot;&gt;Spacemacs&lt;/a&gt; by default.&lt;/p&gt; 
&lt;p&gt;This mode provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Syntax highlighting (for Font Lock Mode)&lt;/li&gt; 
 &lt;li&gt;Indentation&lt;/li&gt; 
 &lt;li&gt;Integration with Cargo, clippy and rustfmt&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This mode does &lt;em&gt;not&lt;/em&gt; provide auto completion, or jumping to function / trait definitions. See &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#auto-completion&quot;&gt;Auto-completion&lt;/a&gt; below for tips on how to enable this.&lt;/p&gt; 
&lt;p&gt;If you are missing features in rust-mode, please check out &lt;a href=&quot;https://github.com/emacs-rustic/rustic&quot;&gt;rustic&lt;/a&gt; before you open a feature request. It depends on rust-mode and provides additional features. This allows us to keep rust-mode light-weight for users that are happy with basic functionality.&lt;/p&gt; 
&lt;h2&gt;Known issues&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;rust-syntax-propertize&lt;/code&gt; and &lt;code&gt;adaptive-wrap-prefix-mode&lt;/code&gt; can lead to severe lag when editing larger files (&lt;a href=&quot;https://github.com/brotzeit/rustic/issues/107&quot;&gt;https://github.com/brotzeit/rustic/issues/107&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Melpa&lt;/h3&gt; 
&lt;p&gt;The package is available on MELPA. Add this to your init.el.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(require &#39;package)
(add-to-list &#39;package-archives
             &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;) t)
(package-initialize)
(package-refresh-contents)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can install &lt;code&gt;rust-mode&lt;/code&gt; with:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;M-x package-install rust-mode&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;And put this in your config to load rust-mode automatically:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;(require &#39;rust-mode)&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;NonGNU ELPA&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://elpa.nongnu.org/&quot;&gt;NonGNU ELPA&lt;/a&gt; can be used out of the box in emacs28.&lt;/p&gt; 
&lt;p&gt;For older versions you need to add something like the following to your init file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(with-eval-after-load &#39;package (add-to-list &#39;package-archives &#39;(&quot;nongnu&quot; . &quot;https://elpa.nongnu.org/nongnu/&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual installation&lt;/h3&gt; 
&lt;p&gt;Clone this repository locally, and add this to your init.el:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;load-path &quot;/path/to/rust-mode/&quot;)
(autoload &#39;rust-mode &quot;rust-mode&quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\.rs\\&#39;&quot; . rust-mode))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Feature guide&lt;/h2&gt; 
&lt;h3&gt;Indentation&lt;/h3&gt; 
&lt;p&gt;Commands like &lt;kbd&gt;TAB&lt;/kbd&gt; should indent correctly.&lt;/p&gt; 
&lt;p&gt;The Rust style guide recommends spaces rather than tabs for indentation; to follow the recommendation add this to your init.el, which forces indentation to always use spaces.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;rust-mode-hook
          (lambda () (setq indent-tabs-mode nil)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since Emacs ≥ 24.4, &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html&quot;&gt;&lt;code&gt;electric-indent-mode&lt;/code&gt;&lt;/a&gt; is turned on by default. If you do not like it, call &lt;code&gt;(electric-indent-mode 0)&lt;/code&gt; in &lt;code&gt;rust-mode-hook&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Code formatting&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;rust-format-buffer&lt;/code&gt; function will format your code with &lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;rustfmt&lt;/a&gt; if installed. By default, this is bound to &lt;kbd&gt;C-c C-f&lt;/kbd&gt;.&lt;/p&gt; 
&lt;p&gt;The variable &lt;code&gt;rust-format-on-save&lt;/code&gt; enables automatic formatting on save. For example, add the following in your init.el to enable format on save:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq rust-format-on-save t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Prettifying&lt;/h3&gt; 
&lt;p&gt;You can toggle prettification of your code by running &lt;code&gt;M-x prettify-symbols-mode&lt;/code&gt;. If you&#39;d like to automatically enable this for all rust files, add the following to your init.el.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;rust-mode-hook
          (lambda () (prettify-symbols-mode)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add your own prettifications to &lt;code&gt;rust-prettify-symbols-alist&lt;/code&gt;. For example, to display &lt;code&gt;x.add(y)&lt;/code&gt; as &lt;code&gt;x∔(y)&lt;/code&gt;, simply add to your init file &lt;code&gt;(push &#39;(&quot;.add&quot; . ?∔) rust-prettify-symbols-alist)&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Running / testing / compiling code&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;rust-run&lt;/code&gt;, &lt;code&gt;rust-test&lt;/code&gt;, &lt;code&gt;rust-compile&lt;/code&gt; and &lt;code&gt;rust-check&lt;/code&gt; functions shell out to Cargo to run, test, build and check your code. Under the hood, these use the standard Emacs &lt;code&gt;compile&lt;/code&gt; function.&lt;/p&gt; 
&lt;p&gt;By default these are bound to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;kbd&gt;C-c C-c C-u&lt;/kbd&gt; &lt;code&gt;rust-compile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;kbd&gt;C-c C-c C-k&lt;/kbd&gt; &lt;code&gt;rust-check&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;kbd&gt;C-c C-c C-t&lt;/kbd&gt; &lt;code&gt;rust-test&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;kbd&gt;C-c C-c C-r&lt;/kbd&gt; &lt;code&gt;rust-run&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To run programs requiring user input use universal argument when invoking &lt;code&gt;rust-run&lt;/code&gt; (&lt;kbd&gt;C-u C-c C-c C-r&lt;/kbd&gt;).&lt;/p&gt; 
&lt;h3&gt;Clippy&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;rust-run-clippy&lt;/code&gt; runs &lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;Clippy&lt;/a&gt;, a linter. By default, this is bound to &lt;kbd&gt;C-c C-c C-l&lt;/kbd&gt;.&lt;/p&gt; 
&lt;h3&gt;Easy insertion of dbg!&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;rust-dbg-wrap-or-unwrap&lt;/code&gt; either wraps or unwraps the current region in &lt;code&gt;dbg!&lt;/code&gt;. This can be useful for easily adding debug lines to your program.&lt;/p&gt; 
&lt;p&gt;This is bound to &lt;kbd&gt;C-c C-d&lt;/kbd&gt; by default.&lt;/p&gt; 
&lt;h3&gt;More commands&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;rust-toggle-mutability&lt;/code&gt; toggle mut for var defined at current line&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;tree-sitter&lt;/h2&gt; 
&lt;p&gt;You can try the new native treesitter mode &lt;code&gt;rust-ts-mode&lt;/code&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you want to use treesitter but can&#39;t use Emacs 29.1, you can take a look at &lt;a href=&quot;https://github.com/emacs-tree-sitter/elisp-tree-sitter&quot;&gt;tree-sitter&lt;/a&gt;. When the dependencies are installed you can activate the feature with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package tree-sitter
  :config
  (require &#39;tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook &#39;tree-sitter-after-on-hook #&#39;tree-sitter-hl-mode))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;LSP&lt;/h2&gt; 
&lt;h3&gt;eglot&lt;/h3&gt; 
&lt;p&gt;A lightweight lsp client.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;rust-mode-hook &#39;eglot-ensure)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;lsp-mode&lt;/h3&gt; 
&lt;p&gt;Provides more features and you can enhance the functionality by using additional packages. You can find more information in the &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/installation/#vanilla-emacs&quot;&gt;lsp-mode wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;rust-mode-hook #&#39;lsp)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Auto-completion&lt;/h2&gt; 
&lt;p&gt;You can either use a lsp client or &lt;a href=&quot;https://github.com/racer-rust/racer&quot;&gt;racer&lt;/a&gt; with &lt;a href=&quot;https://github.com/racer-rust/emacs-racer#installation&quot;&gt;emacs-racer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note that racer and rls are considered deprecated. You should use rust-analyzer instead.&lt;/p&gt; 
&lt;h2&gt;Other recommended packages&lt;/h2&gt; 
&lt;h3&gt;flycheck&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;flycheck&lt;/a&gt; allows highlighting compile errors and Clippy lints inline.&lt;/p&gt; 
&lt;h3&gt;cargo.el&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/kwrooijen/cargo.el&quot;&gt;cargo.el&lt;/a&gt; provides a minor mode for integration with Cargo, Rust&#39;s package manager.&lt;/p&gt; 
&lt;h3&gt;cargo-mode&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ayrat555/cargo-mode&quot;&gt;cargo-mode&lt;/a&gt; is an Emacs minor mode which allows to dynamically select a Cargo command. The reasons behind this package can be found in &lt;a href=&quot;https://www.badykov.com/emacs/2021/05/29/emacs-cargo-mode/&quot;&gt;the post&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;rustic&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/emacs-rustic/rustic&quot;&gt;rustic&lt;/a&gt; is based on rust-mode, extending it with other features such as integration with LSP and with flycheck.&lt;/p&gt; 
&lt;h2&gt;Optional features&lt;/h2&gt; 
&lt;p&gt;The features of the following files can be disabled with &lt;code&gt;rust-load-optional-libraries&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;rust-cargo.el&lt;/li&gt; 
 &lt;li&gt;rust-compile.el&lt;/li&gt; 
 &lt;li&gt;rust-playpen.el&lt;/li&gt; 
 &lt;li&gt;rust-rustfmt.el&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;They are disabled by default when you use rustic as it has its own implementations for those features.&lt;/p&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;rust-cargo-default-arguments&lt;/code&gt; set additional cargo args used for check,compile,run,test&lt;/p&gt; 
&lt;h2&gt;For package maintainers&lt;/h2&gt; 
&lt;h3&gt;Tests&lt;/h3&gt; 
&lt;p&gt;Run elisp tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are very welcome. We are also looking for additional maintainers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>xenodium/chatgpt-shell</title>
      <link>https://github.com/xenodium/chatgpt-shell</link>
      <description>&lt;p&gt;A multi-llm Emacs shell (ChatGPT, Claude, DeepSeek, Gemini, Kagi, Ollama, Perplexity) + editing integrations&lt;/p&gt;&lt;hr&gt;&lt;p&gt;👉 [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]]&lt;/p&gt; 
&lt;p&gt;[[https://stable.melpa.org/#/chatgpt-shell][file:https://stable.melpa.org/packages/chatgpt-shell-badge.svg]] [[https://melpa.org/#/chatgpt-shell][file:https://melpa.org/packages/chatgpt-shell-badge.svg]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;chatgpt-shell&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A multi-llm Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html][comint]] shell, by [[https://lmno.lol/alvaro][me]].&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Related packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/xenodium/ob-chatgpt-shell][ob-chatgpt-shell]]: Evaluate chatgpt-shell blocks as Emacs org babel blocks.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/ob-dall-e-shell][ob-dall-e-shell]]: Evaluate DALL-E shell blocks as Emacs org babel blocks.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/dall-e-shell][dall-e-shell]]: An Emacs shell for OpenAI&#39;s DALL-E.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/shell-maker][shell-maker]]: Create Emacs shells backed by either local or cloud services.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;News&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;chatgpt-shell goes multi model 🎉&lt;/p&gt; 
&lt;p&gt;Please sponsor the project to make development + support sustainable.&lt;/p&gt; 
&lt;p&gt;| Provider | Model | Supported | Setup | |------------+---------------+-----------+----------------------------------| | Anthropic | Claude | Yes | Set =chatgpt-shell-anthropic-key= | | Deepseek | Chat/Reasoner | New 💫 | Set =chatgpt-shell-deepseek-key= | | Google | Gemini | Yes | Set =chatgpt-shell-google-key= | | Kagi | Summarizer | Yes | Set =chatgpt-shell-kagi-key= | | Ollama | Llama | Yes | Install [[https://ollama.com/][Ollama]] | | OpenAI | ChatGPT | Yes | Set =chatgpt-shell-openai-key= | | OpenRouter | Various | Yes | Set =chatgpt-shell-openrouter-key= | | Perplexity | Llama Sonar | Yes | Set =chatgpt-shell-perplexity-key= |&lt;/p&gt; 
&lt;p&gt;Note: With the exception of [[https://ollama.com/][Ollama]], you typically have to pay the cloud services for API access. Please check with each respective LLM service.&lt;/p&gt; 
&lt;p&gt;My favourite model is missing.&lt;/p&gt; 
&lt;p&gt;| [[https://github.com/xenodium/chatgpt-shell/issues][File a feature request]] | [[https://github.com/sponsors/xenodium][sponsor the work]] |&lt;/p&gt; 
&lt;p&gt;** A familiar shell&lt;/p&gt; 
&lt;p&gt;chatgpt-shell is a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html][comint]] shell. Bring your favourite Emacs shell flows along.&lt;/p&gt; 
&lt;p&gt;#+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/cyberpunk.gif&quot; width=&quot;80%&quot;&gt;&lt;/p&gt; 
&lt;p&gt;** Swap models&lt;/p&gt; 
&lt;p&gt;One shell to query all. Swap LLM provider (via =M-x chatgpt-shell-swap-model=) and continue with your familiar flow.&lt;/p&gt; 
&lt;p&gt;#+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/multi-model-shell.gif&quot; width=&quot;80%&quot;&gt;&lt;/p&gt; 
&lt;p&gt;** A shell hybrid&lt;/p&gt; 
&lt;p&gt;=chatgpt-shell= includes a compose buffer experience. This is my favourite and most frequently used mechanism to interact with LLMs.&lt;/p&gt; 
&lt;p&gt;For example, select a region and invoke =M-x chatgpt-shell-prompt-compose= (=C-c C-e= is my preferred binding), and an editable buffer automatically copies the region and enables crafting a more thorough query. When ready, submit with the familiar =C-c C-c= binding. The buffer automatically becomes read-only and enables single-character bindings.&lt;/p&gt; 
&lt;p&gt;#+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/compose.gif&quot; width=&quot;80%&quot;&gt;&lt;/p&gt; 
&lt;p&gt;*** Navigation: n/p (or TAB/shift-TAB)&lt;/p&gt; 
&lt;p&gt;Navigate through source blocks (including previous submissions in history). Source blocks are automatically selected.&lt;/p&gt; 
&lt;p&gt;*** Reply: r&lt;/p&gt; 
&lt;p&gt;Reply with with follow-up requests using the =r= binding.&lt;/p&gt; 
&lt;p&gt;*** Give me more: m&lt;/p&gt; 
&lt;p&gt;Want to ask for more of the same data? Press =m= to request more of it. This is handy to follow up on any kind of list (suggestion, candidates, results, etc).&lt;/p&gt; 
&lt;p&gt;*** Quick quick: q&lt;/p&gt; 
&lt;p&gt;I&#39;m a big fan of quickly disposing of Emacs buffers with the =q= binding. chatgpt-shell compose buffers are no exception.&lt;/p&gt; 
&lt;p&gt;*** Request entire snippets: e&lt;/p&gt; 
&lt;p&gt;LLM being lazy and returning partial code? Press =e= to request entire snippet.&lt;/p&gt; 
&lt;p&gt;** Confirm inline mods (via diffs)&lt;/p&gt; 
&lt;p&gt;Request inline modifications, with explicit confirmation before accepting.&lt;/p&gt; 
&lt;p&gt;#+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/quick-insert.gif&quot; width=&quot;80%&quot;&gt;&lt;/p&gt; 
&lt;p&gt;** Execute snippets (a la [[https://orgmode.org/worg/org-contrib/babel/intro.html][org babel]])&lt;/p&gt; 
&lt;p&gt;Both the shell and the compose buffers enable users to execute source blocks via =C-c C-c=, leveraging [[https://orgmode.org/worg/org-contrib/babel/intro.html][org babel]].&lt;/p&gt; 
&lt;p&gt;#+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/swiftui.gif&quot; width=&quot;80%&quot;&gt;&lt;/p&gt; 
&lt;p&gt;** Vision experiments&lt;/p&gt; 
&lt;p&gt;I&#39;ve been experimenting with image queries (currently ChatGPT only, please [[https://github.com/sponsors/xenodium][sponsor]] to help bring support for others).&lt;/p&gt; 
&lt;p&gt;Below is a handy integration to extract Japanese vocabulary. There&#39;s also a generic image descriptor available via =M-x chatgpt-shell-describe-image= that works on any Emacs image (via dired, image buffer, point on image, or selecting a desktop region).&lt;/p&gt; 
&lt;p&gt;#+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/japanese-weekdays.gif&quot; width=&quot;80%&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support this effort&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;re finding =chatgpt-shell= useful, help make the project sustainable and consider ✨[[https://github.com/sponsors/xenodium][sponsoring]]✨.&lt;/p&gt; 
&lt;p&gt;=chatgpt-shell= is in development. Please report issues or send [[https://github.com/xenodium/chatgpt-shell/pulls][pull requests]] for improvements.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like this package? Tell me about it 💙&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Finding it useful? Like the package? I&#39;d love to hear from you. Get in touch ([[https://indieweb.social/@xenodium][Mastodon]] / [[https://twitter.com/xenodium][Twitter]] / [[https://bsky.app/profile/xenodium.bsky.social][Bluesky]] / [[https://www.reddit.com/user/xenodium][Reddit]] / [[mailto:me__AT__xenodium.com][Email]]).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** MELPA&lt;/p&gt; 
&lt;p&gt;Via [[https://github.com/jwiegley/use-package][use-package]], you can install with =:ensure t=.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :lexical no (use-package chatgpt-shell :ensure t :custom ((chatgpt-shell-openai-key (lambda () (auth-source-pass-get &#39;secret &quot;openai-key&quot;))))) #+end_src&lt;/p&gt; 
&lt;p&gt;** Straight&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :lexical no (use-package shell-maker :straight (:type git :host github :repo &quot;xenodium/shell-maker&quot; :files (&quot;shell-maker*.el&quot;)))&lt;/p&gt; 
&lt;p&gt;(use-package chatgpt-shell :straight (:type git :host github :repo &quot;xenodium/chatgpt-shell&quot; :files (&quot;chatgpt-shell*.el&quot;)) :custom ((chatgpt-shell-openai-key (lambda () (auth-source-pass-get &#39;secret &quot;openai-key&quot;))))) #+end_src&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Swap models ** M-x chatgpt-shell-model-version #+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/swap-models.png&quot; width=&quot;80%&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set default model #+begin_src emacs-lisp :lexical no (setq chatgpt-shell-model-version &quot;llama3.2&quot;) #+end_src&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set OpenAI key&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You&#39;ll first need to get a [[https://platform.openai.com/account/api-keys][key from OpenAI]].&lt;/p&gt; 
&lt;p&gt;** As function #+begin_src emacs-lisp ;; if you are using the &quot;pass&quot; password manager (setq chatgpt-shell-openai-key (lambda () ;; (auth-source-pass-get &#39;secret &quot;openai-key&quot;) ; alternative using pass support in auth-sources (nth 0 (process-lines &quot;pass&quot; &quot;show&quot; &quot;openai-key&quot;))))&lt;/p&gt; 
&lt;p&gt;;; or if using auth-sources, e.g., so the file ~/.authinfo has this line: ;; machine api.openai.com password OPENAI_KEY (setq chatgpt-shell-openai-key (auth-source-pick-first-password :host &quot;api.openai.com&quot;))&lt;/p&gt; 
&lt;p&gt;;; or same as previous but lazy loaded (prevents unexpected passphrase prompt) (setq chatgpt-shell-openai-key (lambda () (auth-source-pick-first-password :host &quot;api.openai.com&quot;))) #+end_src&lt;/p&gt; 
&lt;p&gt;** Manually =M-x set-variable chatgpt-shell-openai-key=&lt;/p&gt; 
&lt;p&gt;** As variable #+begin_src emacs-lisp (setq chatgpt-shell-openai-key &quot;my key&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;** As an ENV variable #+begin_src emacs-lisp (setq chatgpt-shell-openai-key (getenv &quot;OPENAI_API_KEY&quot;)) #+end_src&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ChatGPT through proxy service&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use ChatGPT through proxy service &quot;&lt;a href=&quot;https://api.chatgpt.domain.com&quot;&gt;https://api.chatgpt.domain.com&lt;/a&gt;&quot;, set options like the following:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :lexical no (use-package chatgpt-shell :ensure t :custom ((chatgpt-shell-api-url-base &quot;&lt;a href=&quot;https://api.chatgpt.domain.com&quot;&gt;https://api.chatgpt.domain.com&lt;/a&gt;&quot;) (chatgpt-shell-openai-key (lambda () ;; Here the openai-key should be the proxy service key. (auth-source-pass-get &#39;secret &quot;openai-key&quot;))))) #+end_src&lt;/p&gt; 
&lt;p&gt;If your proxy service API path is not OpenAI ChatGPT default path like &quot;=/v1/chat/completions=&quot;, then you can customize option &lt;del&gt;chatgpt-shell-api-url-path&lt;/del&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Using ChatGPT through HTTP(S) proxy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Behind the scenes chatgpt-shell uses =curl= to send requests to the openai server. If you use ChatGPT through a HTTP proxy (for example you are in a corporate network and a HTTP proxy shields the corporate network from the internet), you need to tell =curl= to use the proxy via the curl option =-x http://your_proxy=. For this, use =chatgpt-shell-proxy=.&lt;/p&gt; 
&lt;p&gt;For example, if you want curl =-x= and =http://your_proxy=, set =chatgpt-shell-proxy= to &quot;=http://your_proxy=&quot;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Launch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Launch with =M-x chatgpt-shell=.&lt;/p&gt; 
&lt;p&gt;Note: =M-x chatgpt-shell= keeps a single shell around, refocusing if needed. To launch multiple shells, use =C-u M-x chatgpt-shell=.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clear buffer&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Type =clear= as a prompt.&lt;/p&gt; 
&lt;p&gt;#+begin_src sh ChatGPT&amp;gt; clear #+end_src&lt;/p&gt; 
&lt;p&gt;Alternatively, use either =M-x chatgpt-shell-clear-buffer= or =M-x comint-clear-buffer=.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Saving and restoring&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Save with =M-x chatgpt-shell-save-session-transcript= and restore with =M-x chatgpt-shell-restore-session-from-transcript=.&lt;/p&gt; 
&lt;p&gt;Some related values stored in =shell-maker= like =shell-maker-transcript-default-path= and =shell-maker-forget-file-after-clear=.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Streaming&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;=chatgpt-shell= can either wait until the entire response is received before displaying, or it can progressively display as chunks arrive (streaming).&lt;/p&gt; 
&lt;p&gt;Streaming is enabled by default. =(setq chatgpt-shell-streaming nil)= to disable it.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;chatgpt-shell customizations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp :results table :colnames &#39;(&quot;Custom variable&quot; &quot;Description&quot;) :exports results (let ((rows)) (mapatoms (lambda (symbol) (when (and (string-match &quot;^chatgpt-shell&quot; (symbol-name symbol)) (custom-variable-p symbol)) (push `(,symbol ,(car (split-string (or (documentation-property symbol &#39;variable-documentation) (get (indirect-variable symbol) &#39;variable-documentation) (get symbol &#39;variable-documentation) &quot;&quot;) &quot;\n&quot;))) rows)))) rows) #+END_SRC&lt;/p&gt; 
&lt;p&gt;#+RESULTS: | Custom variable | Description | |------------------------------------------------------------------+------------------------------------------------------------------------------| | chatgpt-shell-google-api-url-base | Google API’s base URL. | | chatgpt-shell-deepseek-api-url-base | DeepSeek API’s base URL. | | chatgpt-shell-perplexity-key | Perplexity API key as a string or a function that loads and returns it. | | chatgpt-shell-deepseek-key | DeepSeek key as a string or a function that loads and returns it. | | chatgpt-shell-prompt-header-write-git-commit | Prompt header of ‘git-commit‘. | | chatgpt-shell-highlight-blocks | Whether or not to highlight source blocks. | | chatgpt-shell-display-function | Function to display the shell. Set to ‘display-buffer’ or custom function. | | chatgpt-shell-prompt-header-generate-unit-test | Prompt header of ‘generate-unit-test‘. | | chatgpt-shell-prompt-header-refactor-code | Prompt header of ‘refactor-code‘. | | chatgpt-shell-prompt-header-proofread-region | Prompt header used by ‘chatgpt-shell-proofread-region‘. | | chatgpt-shell-welcome-function | Function returning welcome message or nil for no message. | | chatgpt-shell-perplexity-api-url-base | Perplexity API’s base URL. | | chatgpt-shell-prompt-query-response-style | Determines the prompt style when invoking from other buffers. | | chatgpt-shell-model-version | The active model version as either a string. | | chatgpt-shell-kagi-key | Kagi API key as a string or a function that loads and returns it. | | chatgpt-shell-logging | Logging disabled by default (slows things down). | | chatgpt-shell-render-latex | Whether or not to render LaTeX blocks (experimental). | | chatgpt-shell-api-url-base | OpenAI API’s base URL. | | chatgpt-shell-google-key | Google API key as a string or a function that loads and returns it. | | chatgpt-shell-ollama-api-url-base | Ollama API’s base URL. | | chatgpt-shell-openrouter-key | OpenRouter key as a string or a function that loads and returns it. | | chatgpt-shell-babel-headers | Additional headers to make babel blocks work. | | chatgpt-shell--pretty-smerge-mode-hook | Hook run after entering or leaving ‘chatgpt-shell--pretty-smerge-mode’. | | chatgpt-shell-model-filter | A function that is applied ‘chatgpt-shell-models’ to determine | | chatgpt-shell-source-block-actions | Block actions for known languages. | | chatgpt-shell-default-prompts | List of default prompts to choose from. | | chatgpt-shell-anthropic-key | Anthropic API key as a string or a function that loads and returns it. | | chatgpt-shell-prompt-header-eshell-summarize-last-command-output | Prompt header of ‘eshell-summarize-last-command-output‘. | | chatgpt-shell-system-prompt | The system prompt ‘chatgpt-shell-system-prompts’ index. | | chatgpt-shell-transmitted-context-length | Controls the amount of context provided to chatGPT. | | chatgpt-shell-root-path | Root path location to store internal shell files. | | chatgpt-shell-prompt-header-whats-wrong-with-last-command | Prompt header of ‘whats-wrong-with-last-command‘. | | chatgpt-shell-read-string-function | Function to read strings from user. | | chatgpt-shell-after-command-functions | Abnormal hook (i.e. with parameters) invoked after each command. | | chatgpt-shell-system-prompts | List of system prompts to choose from. | | chatgpt-shell-openai-key | OpenAI key as a string or a function that loads and returns it. | | chatgpt-shell-proxy | When non-nil, use as a proxy (for example http or socks5). | | chatgpt-shell-prompt-header-describe-code | Prompt header of ‘describe-code‘. | | chatgpt-shell-insert-dividers | Whether or not to display a divider between requests and responses. | | chatgpt-shell-models | The list of supported models to swap from. | | chatgpt-shell-openrouter-api-url-base | OpenRouter API’s base URL. | | chatgpt-shell-language-mapping | Maps external language names to Emacs names. | | chatgpt-shell-prompt-compose-view-mode-hook | Hook run after entering or leaving ‘chatgpt-shell-prompt-compose-view-mode’. | | chatgpt-shell-streaming | Whether or not to stream ChatGPT responses (show chunks as they arrive). | | chatgpt-shell-anthropic-api-url-base | Anthropic API’s base URL. | | chatgpt-shell-model-temperature | What sampling temperature to use, between 0 and 2, or nil. | | chatgpt-shell-request-timeout | How long to wait for a request to time out in seconds. | | chatgpt-shell-kagi-api-url-base | Kagi API’s base URL. |&lt;/p&gt; 
&lt;p&gt;There are more. Browse via =M-x set-variable=&lt;/p&gt; 
&lt;p&gt;** =chatgpt-shell-display-function= (with custom function)&lt;/p&gt; 
&lt;p&gt;If you&#39;d prefer your own custom display function,&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :lexical no (setq chatgpt-shell-display-function #&#39;my/chatgpt-shell-frame)&lt;/p&gt; 
&lt;p&gt;(defun my/chatgpt-shell-frame (bname) (let ((cur-f (selected-frame)) (f (my/find-or-make-frame &quot;chatgpt&quot;))) (select-frame-by-name &quot;chatgpt&quot;) (pop-to-buffer-same-window bname) (set-frame-position f (/ (display-pixel-width) 2) 0) (set-frame-height f (frame-height cur-f)) (set-frame-width f (frame-width cur-f) 1)))&lt;/p&gt; 
&lt;p&gt;(defun my/find-or-make-frame (fname) (condition-case nil (select-frame-by-name fname) (error (make-frame `((name . ,fname)))))) #+end_src&lt;/p&gt; 
&lt;p&gt;Thanks to [[https://github.com/tuhdo][tuhdo]] for the custom display function.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;chatgpt-shell commands #+BEGIN_SRC emacs-lisp :results table :colnames &#39;(&quot;Binding&quot; &quot;Command&quot; &quot;Description&quot;) :exports results (let ((rows)) (mapatoms (lambda (symbol) (when (and (string-match &quot;^chatgpt-shell&quot; (symbol-name symbol)) (commandp symbol)) (push `(,(string-join (seq-filter (lambda (symbol) (not (string-match &quot;menu&quot; symbol))) (mapcar (lambda (keys) (key-description keys)) (or (where-is-internal (symbol-function symbol) comint-mode-map nil nil (command-remapping &#39;comint-next-input)) (where-is-internal symbol chatgpt-shell-mode-map nil nil (command-remapping symbol)) (where-is-internal (symbol-function symbol) chatgpt-shell-mode-map nil nil (command-remapping symbol))))) &quot; or &quot;) ,(symbol-name symbol) ,(car (split-string (or (documentation symbol t) &quot;&quot;) &quot;\n&quot;))) rows)))) rows) #+END_SRC&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+RESULTS: | Binding | Command | Description | |----------------------+-----------------------------------------------------+---------------------------------------------------------------------------------| | | chatgpt-shell-japanese-lookup | Look Japanese term up. | | | chatgpt-shell-next-source-block | Move point to the next source block&#39;s body. | | | chatgpt-shell-prompt-compose-request-entire-snippet | If the response code is incomplete, request the entire snippet. | | | chatgpt-shell-prompt-compose-request-more | Request more data. This is useful if you already requested examples. | | | chatgpt-shell-execute-babel-block-action-at-point | Execute block as org babel. | | C-c C-s | chatgpt-shell-swap-system-prompt | Swap system prompt from &lt;code&gt;chatgpt-shell-system-prompts&#39;. | | | chatgpt-shell-system-prompts-menu | ChatGPT | | | chatgpt-shell-prompt-compose-swap-model-version | Swap the compose buffer&#39;s model version. | | | chatgpt-shell-describe-code | Describe code from region using ChatGPT. | | C-&amp;lt;up&amp;gt; or M-p | chatgpt-shell-previous-input | Cycle backwards through input history, saving input. | | | chatgpt-shell-previous-link | Move point to the previous link. | | | chatgpt-shell-prompt-compose-next-item | Jump to and select next item (request, response, block, link, interaction). | | C-c C-v | chatgpt-shell-swap-model | Swap model version from &lt;/code&gt;chatgpt-shell-models&#39;. | | C-x C-s | chatgpt-shell-save-session-transcript | Save shell transcript to file. | | | chatgpt-shell-proofread-region | Proofread text from region using ChatGPT. | | | chatgpt-shell-prompt-compose-quit-and-close-frame | Quit compose and close frame if it&#39;s the last window. | | | chatgpt-shell-prompt-compose-other-buffer | Jump to the shell buffer (compose&#39;s other buffer). | | | chatgpt-shell | Start a ChatGPT shell interactive command. | | RET | chatgpt-shell-submit | Submit current input. | | | chatgpt-shell-prompt-compose-swap-system-prompt | Swap the compose buffer&#39;s system prompt. | | | chatgpt-shell-describe-image | Request OpenAI to describe image. | | | chatgpt-shell-prompt-compose-search-history | Search prompt history, select, and insert to current compose buffer. | | | chatgpt-shell-prompt-compose-previous-history | Insert previous prompt from history into compose buffer. | | | chatgpt-shell-delete-interaction-at-point | Delete interaction (request and response) at point. | | | chatgpt-shell-refresh-rendering | Refresh markdown rendering by re-applying to entire buffer. | | | chatgpt-shell-prompt-compose-insert-block-at-point | Insert block at point at last known location. | | | chatgpt-shell-explain-code | Describe code from region using ChatGPT. | | | chatgpt-shell-execute-block-action-at-point | Execute block at point. | | | chatgpt-shell-load-awesome-prompts | Load &lt;code&gt;chatgpt-shell-system-prompts&#39; from awesome-chatgpt-prompts. | | | chatgpt-shell-write-git-commit | Write commit from region using ChatGPT. | | | chatgpt-shell-restore-session-from-transcript | Restore session from file transcript (or HISTORY). | | | chatgpt-shell-prompt-compose-next-interaction | Show next interaction (request / response). | | &amp;lt;backtab&amp;gt; or C-c C-p | chatgpt-shell-previous-item | Go to previous item. | | | chatgpt-shell-fix-error-at-point | Fixes flymake error at point. | | | chatgpt-shell-next-link | Move point to the next link. | | | chatgpt-shell-prompt-appending-kill-ring | Make a ChatGPT request from the minibuffer appending kill ring. | | | chatgpt-shell-ollama-load-models | Query ollama for the locally installed models and add them to | | C-&amp;lt;down&amp;gt; or M-n | chatgpt-shell-next-input | Cycle forwards through input history. | | | chatgpt-shell-prompt-compose-view-mode | Like &lt;/code&gt;view-mode&lt;code&gt;, but extended for ChatGPT Compose. | | | chatgpt-shell-clear-buffer | Clear the current shell buffer. | | | chatgpt-shell-edit-block-at-point | Execute block at point. | | &amp;lt;tab&amp;gt; or C-c C-n | chatgpt-shell-next-item | Go to next item. | | | chatgpt-shell-prompt-compose-send-buffer | Send compose buffer content to shell for processing. | | C-c C-e | chatgpt-shell-prompt-compose | Compose and send prompt from a dedicated buffer. | | | chatgpt-shell-rename-buffer | Rename current shell buffer. | | | chatgpt-shell-remove-block-overlays | Remove block overlays. Handy for renaming blocks. | | | chatgpt-shell-send-region | Send region to ChatGPT. | | | chatgpt-shell-send-and-review-region | Send region to ChatGPT, review before submitting. | | C-M-h | chatgpt-shell-mark-at-point-dwim | Mark source block if at point. Mark all output otherwise. | | | chatgpt-shell--pretty-smerge-mode | Minor mode to display overlays for conflict markers. | | | chatgpt-shell-mark-block | Mark current block in compose buffer. | | | chatgpt-shell-prompt-compose-reply | Reply as a follow-up and compose another query. | | | chatgpt-shell-prompt-compose-refresh | Refresh compose buffer content with curernt item from shell. | | | chatgpt-shell-set-as-primary-shell | Set as primary shell when there are multiple sessions. | | | chatgpt-shell-rename-block-at-point | Rename block at point (perhaps a different language). | | | chatgpt-shell-quick-insert | Request from minibuffer and insert response into current buffer. | | | chatgpt-shell-reload-default-models | Reload all available models. | | S-&amp;lt;return&amp;gt; | chatgpt-shell-newline | Insert a newline, and move to left margin of the new line. | | | chatgpt-shell-generate-unit-test | Generate unit-test for the code from region using ChatGPT. | | | chatgpt-shell-prompt-compose-previous-item | Jump to and select previous item (request, response, block, link, interaction). | | | chatgpt-shell-prompt-compose-next-history | Insert next prompt from history into compose buffer. | | C-c C-c | chatgpt-shell-ctrl-c-ctrl-c | If point in source block, execute it. Otherwise interrupt. | | | chatgpt-shell-eshell-summarize-last-command-output | Ask ChatGPT to summarize the last command output. | | M-r | chatgpt-shell-search-history | Search previous input history. | | | chatgpt-shell-mode | Major mode for ChatGPT shell. | | | chatgpt-shell-prompt-compose-mode | Major mode for composing ChatGPT prompts from a dedicated buffer. | | | chatgpt-shell-previous-source-block | Move point to the previous source block&#39;s body. | | | chatgpt-shell-prompt | Make a ChatGPT request from the minibuffer. | | | chatgpt-shell-japanese-ocr-lookup | Select a region of the screen to OCR and look up in Japanese. | | | chatgpt-shell-refactor-code | Refactor code from region using ChatGPT. | | | chatgpt-shell-view-block-at-point | View code block at point (using language&#39;s major mode). | | | chatgpt-shell-japanese-audio-lookup | Transcribe audio at current file (buffer or &lt;/code&gt;dired&#39;) and look up in Japanese. | | | chatgpt-shell-eshell-whats-wrong-with-last-command | Ask ChatGPT what&#39;s wrong with the last eshell command. | | | chatgpt-shell-prompt-compose-cancel | Cancel and close compose buffer. | | | chatgpt-shell-prompt-compose-retry | Retry sending request to shell. | | | chatgpt-shell-version | Show &lt;code&gt;chatgpt-shell&#39; mode version. | | | chatgpt-shell-prompt-compose-previous-interaction | Show previous interaction (request / response). | | | chatgpt-shell-interrupt | Interrupt &lt;/code&gt;chatgpt-shell&#39; from any buffer. | | | chatgpt-shell-view-at-point | View prompt and output at point in a separate buffer. |&lt;/p&gt; 
&lt;p&gt;Browse all available via =M-x=.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Feature requests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please go through this README to see if the feature is already supported.&lt;/li&gt; 
 &lt;li&gt;Need custom behaviour? Check out existing [[https://github.com/xenodium/chatgpt-shell/issues?q=is%3Aissue+][issues/feature requests]]. You may find solutions in discussions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Pull requests Pull requests are super welcome. Please [[https://github.com/xenodium/chatgpt-shell/issues/new][reach out]] before getting started to make sure we&#39;re not duplicating effort. Also [[https://github.com/xenodium/chatgpt-shell/][search existing discussions]].&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Reporting bugs ** Setup isn&#39;t working? Please share the entire snippet you&#39;ve used to set =chatgpt-shell= up (but redact your key). Share any errors you encountered. Read on for sharing additional details. ** Found runtime/elisp errors? Please enable =M-x toggle-debug-on-error=, reproduce the error, and share the stack trace. ** Found unexpected behaviour? Please enable logging =(setq chatgpt-shell-logging t)= and share the content of the =&lt;em&gt;chatgpt-log&lt;/em&gt;= buffer in the bug report. ** Babel issues? Please also share the entire org snippet.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Support my work&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;👉 Find my work useful? [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]] or [[https://apps.apple.com/us/developer/xenodium-ltd/id304568690][buy my iOS apps]].&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;My other utilities, packages, apps, writing...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://xenodium.com/][Blog (xenodium.com)]]&lt;/li&gt; 
 &lt;li&gt;[[https://lmno.lol/alvaro][Blog (lmno.lol/alvaro)]]&lt;/li&gt; 
 &lt;li&gt;[[https://plainorg.com][Plain Org]] (iOS)&lt;/li&gt; 
 &lt;li&gt;[[https://flathabits.com][Flat Habits]] (iOS)&lt;/li&gt; 
 &lt;li&gt;[[https://apps.apple.com/us/app/scratch/id1671420139][Scratch]] (iOS)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/macosrec][macosrec]] (macOS)&lt;/li&gt; 
 &lt;li&gt;[[https://apps.apple.com/us/app/fresh-eyes/id6480411697?mt=12][Fresh Eyes]] (macOS)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/company-org-block][company-org-block]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/org-block-capf][org-block-capf]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/ob-swiftui][ob-swiftui]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/ready-player][ready-player]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/sqlite-mode-extras][sqlite-mode-extras]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/ob-chatgpt-shell][ob-chatgpt-shell]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/dall-e-shell][dall-e-shell]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/ob-dall-e-shell][ob-dall-e-shell]] (Emacs)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/shell-maker][shell-maker]] (Emacs)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contributors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+HTML: &lt;a href=&quot;https://github.com/xenodium/chatgpt-shell/graphs/contributors&quot;&gt; #+HTML: &lt;img src=&quot;https://contrib.rocks/image?repo=xenodium/chatgpt-shell&quot;&gt; #+HTML: &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Made with [[https://contrib.rocks][contrib.rocks]].&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qjcg/awesome-typst</title>
      <link>https://github.com/qjcg/awesome-typst</link>
      <description>&lt;p&gt;Awesome Typst Links&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README.md&quot; hreflang=&quot;en&quot; lang=&quot;en&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README_ZH.md&quot; hreflang=&quot;zh&quot; lang=&quot;zh&quot;&gt;简体中文&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Awesome Typst&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome#readme&quot;&gt;&lt;img src=&quot;https://awesome.re/badge.svg?sanitize=true&quot; alt=&quot;Awesome&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Curated collection of useful links for &lt;a href=&quot;https://github.com/typst/typst&quot;&gt;Typst&lt;/a&gt; users.&lt;/p&gt; 
&lt;p&gt;PRs welcomed!&lt;/p&gt; 
&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official-project-links&quot;&gt;Official Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#unofficial-project-links&quot;&gt;Unofficial Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#integrations--tools&quot;&gt;Integrations &amp;amp; Tools&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#browser-extensions&quot;&gt;Browser Extensions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#chatbots&quot;&gt;Chatbots&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cicd&quot;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cli-tools&quot;&gt;CLI Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editors&quot;&gt;Editors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editor-integrations&quot;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#online-tools&quot;&gt;Online Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#programming&quot;&gt;Programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#typst-as-a-service&quot;&gt;Typst As A Service&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates--libraries&quot;&gt;Templates &amp;amp; Libraries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official&quot;&gt;Official&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#general&quot;&gt;General&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#assignments&quot;&gt;Assignments&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cv&quot;&gt;CV&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates&quot;&gt;Templates&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#calendar--timetable&quot;&gt;Calendar / Timetable&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#footnotes--endnotes&quot;&gt;Footnotes &amp;amp; Endnotes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#graphics&quot;&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#letters&quot;&gt;Letters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#linguistics&quot;&gt;Linguistics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#mathematics&quot;&gt;Mathematics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#music&quot;&gt;Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#physics&quot;&gt;Physics&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#conferences&quot;&gt;Conferences&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#journals&quot;&gt;Journals&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#grantsproposals&quot;&gt;Grants/Proposals&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#engineering&quot;&gt;Engineering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#plotting&quot;&gt;Plotting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#posters&quot;&gt;Posters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#scripting&quot;&gt;Scripting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdown-toc end --&gt; 
&lt;h2&gt;Official Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app&quot;&gt;typst.app&lt;/a&gt; - The Typst web app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/docs&quot;&gt;Typst Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/typst&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/blog/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Social - &lt;a href=&quot;https://discord.com/invite/2uDybryKPe&quot;&gt;Discord&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/typstapp/&quot;&gt;Instagram&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/company/typst/&quot;&gt;LinkedIn&lt;/a&gt; &lt;a href=&quot;https://mastodon.social/@typst&quot;&gt;Mastodon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/typstapp/&quot;&gt;X&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Unofficial Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/typst_ru&quot;&gt;Typst-telegram-russian-chat&lt;/a&gt; - chat about Typst in Telegram in russian&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://matrix.to/#/%23typst:matrix.org&quot;&gt;#typst:matrix.org&lt;/a&gt; - matrix room for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sitandr.github.io/typst-examples-book/book/&quot;&gt;Typst Examples Book&lt;/a&gt; - An online book with Typst snippets, including extended tutorial and useful hacks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integrations &amp;amp; Tools&lt;/h2&gt; 
&lt;h3&gt;Browser Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://github.com/MordragT/bib_kit&quot;&gt;bib-kit&lt;/a&gt; - Retrieve website information to create citations in the hayagriva format&lt;/li&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/yank/&quot;&gt;yank&lt;/a&gt; - Yank URL and title of current tab, format to a chosen markup language, and copy to clipboard (supports typst link format)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Chatbots&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mattfbacon/typst-bot&quot;&gt;typst-bot&lt;/a&gt; - A discord bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/ru_rend_bot&quot;&gt;typst-bot-telegram&lt;/a&gt; - A telegram bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A &lt;a href=&quot;https://t.me/TypstBot&quot;&gt;telegram bot&lt;/a&gt; with focus in rendering math expression in Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CI/CD&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/IvanSanchez/gitlab-ci-typst&quot;&gt;gitlab-ci-typst&lt;/a&gt; - Build Typst documents using GitLab CI pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst-community/setup-typst&quot;&gt;setup-typst&lt;/a&gt; - 📑 Install Typst for use in GitHub Actions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-action&quot;&gt;typst-action&lt;/a&gt; - Build Typst documents using GitHub actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CLI Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Enter-tainer/typstyle&quot;&gt;typstyle&lt;/a&gt; - Opinionated typst code formatter focusing on aesthetic, convergence and correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ItsEthra/typst-live&quot;&gt;typst-live&lt;/a&gt; - Hot reloading of pdf in web browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-pandoc&quot;&gt;typst-pandoc&lt;/a&gt; - Typst custom reader and writer for Pandoc&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Thumuss/utpm&quot;&gt;utpm&lt;/a&gt; - Package manager for local and remote packages&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mkpoli/tyler&quot;&gt;Tyler&lt;/a&gt; - Package compiler for the ease of packaging and publishing Typst libraries and templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/textlint/textlint-plugin-typst&quot;&gt;textlint-plugin-typst&lt;/a&gt; - &lt;a href=&quot;https://textlint.github.io/&quot;&gt;textlint&lt;/a&gt; plugin to lint Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Cubxity/typstudio&quot;&gt;typstudio&lt;/a&gt; - An in development desktop editor built using Tauri.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IgKh/katvan&quot;&gt;Katvan&lt;/a&gt; - A bare-bones editor for Typst files, with a bias for Right-to-Left editing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bzero/typstwriter&quot;&gt;Typstwriter&lt;/a&gt; - An integrated desktop editor for typst projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/soupslurpr/BeauTyXT&quot;&gt;BeauTyXT&lt;/a&gt; - A private, secure, minimalistic Text, Markdown, and Typst editor for Android&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editor Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/tree-sitter-typst&quot;&gt;SeniorMars/tree-sitter-typst&lt;/a&gt; - A TreeSitter parser for the Typst File Format&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=myriad-dreamin.tinymist&quot;&gt;Tinymist VS Code Extension&lt;/a&gt; - A vscode extension for Tinymist integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/tinymist&quot;&gt;Tinymist&lt;/a&gt; - A language server for typst with integrations for Emacs, Helix, NeoVim, Sublime Text, VsCode/VsCodium, and Zed&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sync&quot;&gt;Typst Sync&lt;/a&gt; - A vscode extension for Typst local packages management and synchronization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/frozolotl/tree-sitter-typst&quot;&gt;frozolotl/tree-sitter-typst&lt;/a&gt; - A tree-sitter grammar with a focus on correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/herlev/inktyp&quot;&gt;inktyp&lt;/a&gt; - An Inkscape plugin to insert and edit Typst equations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/obsidian-typst&quot;&gt;obsidian-typst&lt;/a&gt; - Renders typst code blocks in Obsidian into images using Typst through the power of WASM!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/remimimimimi/org-typst-preview.el&quot;&gt;org-typst-preview&lt;/a&gt; - Typst preview in org-mode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arne314/typstar&quot;&gt;typstar&lt;/a&gt; - Neovim plugin providing autosnippets, excalidraw integration and [standalone] Anki flashcard export&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MrPicklePinosaur/typst-conceal.vim&quot;&gt;typst-conceal.vim&lt;/a&gt; - Vim/Nvim plugin for replacing long typst symbol names with unicode characters&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=surv.typst-math&quot;&gt;typst-math&lt;/a&gt; - A VS Code extension to simplify math writing in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sympy-calculator&quot;&gt;typst-sympy-calculator&lt;/a&gt; - VS Code extension for Typst math calculating, includes Arithmetic, Calculus, Matrix, Custom Variances and Functions by yourself&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~meow_king/typst-ts-mode&quot;&gt;typst-ts-mode&lt;/a&gt; - Typst tree sitter major mode for Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst.nvim&quot;&gt;typst.nvim&lt;/a&gt; - WIP. Goals: Treesitter highlighting, snippets, and a smooth integration with neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/typst.vim&quot;&gt;typst.vim&lt;/a&gt; - Vim plugin for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typstd&quot;&gt;typstd&lt;/a&gt; - Yet another Typst language server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uben0/tree-sitter-typst&quot;&gt;uben0/tree-sitter-typst&lt;/a&gt; - A TreeSitter grammar for the Typst language, used by Helix&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Online Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/QuarticCat/detypify&quot;&gt;Detypify&lt;/a&gt; - Typst symbol classifier&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hongjr03/excel-to-typst&quot;&gt;excel-to-typst&lt;/a&gt; - A tool that convert Excel tables to Typst table, can work in uploading .xlsx file or pasting.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Programming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lucifer1004/leetcode.typ&quot;&gt;leetcode.typ&lt;/a&gt; - Solving Leetcode problems in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/loqusion/typix&quot;&gt;Typix&lt;/a&gt; - Deterministic Typst compilation with Nix&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/messense/typst-py&quot;&gt;typst-py&lt;/a&gt; - Python binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actsasflinn/typst-rb&quot;&gt;typst-rb&lt;/a&gt; - Ruby binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/typst.ts&quot;&gt;typst.ts&lt;/a&gt; - JavaScript binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jakobjpeters/Typstry.jl&quot;&gt;Typstry.jl&lt;/a&gt; - The Julia to Typst interface&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/mpl-typst&quot;&gt;mpl-typst&lt;/a&gt; - A Typst backend for Matplotlib.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Typst As A Service&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/slashformotion/typst-http-api&quot;&gt;typst-http-api&lt;/a&gt; - An simple docker containing an API to compile typst markup&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A plain and simple HTTP API for rendering math with Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Templates &amp;amp; Libraries&lt;/h2&gt; 
&lt;h3&gt;Official&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/templates&quot;&gt;typst/templates&lt;/a&gt; - The templates that ship with the Typst web app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;General&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onefact/datathinking.org-report-template&quot;&gt;Data Thinking Report Template&lt;/a&gt; - a template for artificial intelligence whitepapers with collaborative bibliographies using Zotero&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mst2k/HSOS-PTP-Typst-Template&quot;&gt;HSOS-PTP-Typst-Template&lt;/a&gt; - A German template for writing papers, overfitted for the Osnabrück University of Applied Scien&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SkytAsul/INSA-Typst-Template&quot;&gt;INSA Typst Template&lt;/a&gt; - A template for INSA (Institut National des Sciences Appliquées), a french public engineering school.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaPreprint/typst&quot;&gt;LaPreprint&lt;/a&gt; - Beautiful preprints for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-mantys&quot;&gt;Mantys&lt;/a&gt; - A template for writing manuals for Typst packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aurghya-0/Project-Report-Typst&quot;&gt;Project-Report-Typst&lt;/a&gt; - A simple template for college or university level project report.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jinhao-huang/SimplePaper&quot;&gt;SimplePaper&lt;/a&gt; - A Chinese template for writing simple paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-Paper-Template&quot;&gt;Typst-Paper-Template&lt;/a&gt; - Typst template for Working Paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/waterlubber/aiaa-typst-template&quot;&gt;aiaa-typst-template&lt;/a&gt; - A template for AIAA (American Institute of Aeronautics and Astronautics) papers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hzkonor/bubble-template&quot;&gt;bubble-template&lt;/a&gt; - A simple and colorful template for reports&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/coco33920/typst-association-statuts&quot;&gt;french-association-status&lt;/a&gt; - A Template to write status for french associations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/gloss-awe&quot;&gt;gloss-awe&lt;/a&gt; - Automatically Generated Glossary Page (renamed from typst-glossary)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/in-dexter&quot;&gt;in-dexter&lt;/a&gt; - Automatically Generated Index Page (renamed from typst-index)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/mcm-icm-typst-template&quot;&gt;mcm-icm-typst-template&lt;/a&gt; - A template for Mathematical Contest in Modeling (MCM) and the Interdisciplinary Contest in Modeling(ICM).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zagoli/simple-typst-thesis&quot;&gt;simple-typst-thesis&lt;/a&gt; - A template useful for writing simple thesis in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ls1intum/thesis-template-typst&quot;&gt;thesis-template-typst&lt;/a&gt; - Technical University of Munich thesis Template with cover, titlepage, tables, figures, appendix, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkndl/typst-bioinfo-thesis&quot;&gt;typst-bioinfo-thesis&lt;/a&gt; - Flexible section headers and page numbers; pretty outlines and a &lt;code&gt;wrapfig&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/erictapen/typst-invoice&quot;&gt;typst-invoice&lt;/a&gt; - Generate invoices from TOML files&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wychwitch/typst-mla9-template&quot;&gt;typst-mla9-template&lt;/a&gt; - An MLA 9th edition template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/flavio20002/typst-orange-template&quot;&gt;typst-orange-template&lt;/a&gt; - A Typst book template inspired by The Legrand Orange Book&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/splash&quot;&gt;typst-palettes&lt;/a&gt; - A library of color palettes for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - A templates collection for major venues in machine learning and AI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eigenein/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - Templates for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/haxibami/haxipst&quot;&gt;typst-templates&lt;/a&gt; - My typst templates&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yangwenbo99/typst-uwthesis&quot;&gt;typst-uwthesis&lt;/a&gt; - A typst template for writing thesis, featuring a working abbreviation lists.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qjcg/typstry&quot;&gt;typstry&lt;/a&gt; - A Tapestry of Typst Templates &amp;amp; Examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LLBlumire/writable-gm-screen-inserts&quot;&gt;writable-gm-screen-inserts&lt;/a&gt; - Writable Game Master Screen Insertsces&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Assignments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/diquah/OpenBoard&quot;&gt;OpenBoard&lt;/a&gt; - Easily build clean assessments in the style of the College Board.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/AntoniosBarotsis/typst-assignment-template&quot;&gt;assignment-template&lt;/a&gt; - A simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/astrale-sharp/typst-assignement-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gRox167/typst-assignment-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template with a cover and several useful math symbols.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/OriginCode/typst-homework-template&quot;&gt;typst-homework-template&lt;/a&gt; - A simple homework template inspired by the LaTeX homework template by Adam Blank&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/jomaway/typst-teacher-templates&quot;&gt;typst-teacher-template&lt;/a&gt; - A collection of typst templates. Mainly used to create worksheets and exams for my classes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/sylvanfranklin/tinyset&quot;&gt;tinyset&lt;/a&gt; - A lightweight and opinionated problem set package designed with pure math proofs in mind.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CV&lt;/h3&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/caffeinatedgaze/bare-bones-cv&quot;&gt;bare-bones-cv&lt;/a&gt; –&amp;nbsp;A single-page minimalistic CV comprising essentials only.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template for Typst that uses a YAML file for data input in order to version control CV data easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;chicv&lt;/a&gt; - A minimal and fully-customizable CV template.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Templates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tzx/NNJR&quot;&gt;NNJR&lt;/a&gt; - A resume template inspired by &lt;code&gt;Jake&#39;s Resume&lt;/code&gt; LaTeX template. Uses Typst and YAML.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GeorgeHoneywood/alta-typst&quot;&gt;alta-typst&lt;/a&gt; - A simple Typst CV template, inspired by AltaCV by LianTze Lim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Harkunwar/attractive-typst-resume&quot;&gt;attractive-typst-resume&lt;/a&gt; - A modern looking, attractive CV/Resume template by Harkunwar Kochar&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gvariable/billryan-typst&quot;&gt;billryan-typst&lt;/a&gt; - A simple and minimalist resume template, inspired by Resume by Billryan.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mintyfrankie/brilliant-CV&quot;&gt;brilliant-CV&lt;/a&gt; - Another CV template for your job application, yet powered by Typst and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cu1ch3n/caidan&quot;&gt;caidan&lt;/a&gt; - A clean and minimal food menu template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template using Typst and YAML to version control CV data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/olligobber/friggeri-cv&quot;&gt;friggeri-cv&lt;/a&gt; - A slightly modified version of the Friggeri CV, originally created by Adrien Friggeri in LaTeX, ported to Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-cv&lt;/a&gt; - A modern resume and coverletter template based on &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-typst-template&lt;/a&gt; - A modern resume/CV template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/giovanniberti/moderncv.typst&quot;&gt;moderncv.typst&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;moderncv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wusyong/resume.typ&quot;&gt;resume.typ&lt;/a&gt; - Simple and ergonomic template to generate resume and CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaurenzV/simplecv&quot;&gt;simplecv&lt;/a&gt; - SimpleCV is a simple and elegant CV template written in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/typst-academic-cv&quot;&gt;typst-academic-cv&lt;/a&gt; - Typst Template for Academic CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cammellos/typst-blue-header-cv&quot;&gt;typst-blue-header-cv&lt;/a&gt; - Customizable Typst two-columns CV template with a top header.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ice-kylin/typst-cv-miku&quot;&gt;typst-cv-miku&lt;/a&gt; - A simple, elegant, academic style CV template for typst. Support for English and Chinese (and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-CV-Resume&quot;&gt;typst-cv-resume&lt;/a&gt; - A CV template with Sans font inspired by LaTeX &lt;code&gt;Deedy-Resume&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vaibhavjhawar/typst-cv-template1&quot;&gt;typst-cv-template1&lt;/a&gt; - A CV template inspired by Alessandro Plasmati&#39;s Graduate CV LaTex template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JCGoran/typst-cv-template&quot;&gt;typst-cv-template&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;typst-cv-template&lt;/a&gt; - Chi CV Template (For Typst)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/titaneric/typst-mixed-resume&quot;&gt;typst-mixed-resume&lt;/a&gt; - A casual and elegant resume template inspired by multiple templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UntimelyCreation/typst-neat-cv&quot;&gt;typst-neat-cv&lt;/a&gt; - A Typst template for modern, minimal and elegant CVs, inspired by mintyfrankie&#39;s &lt;code&gt;Brilliant CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mizlan/typst-resume-sans&quot;&gt;typst-resume-sans&lt;/a&gt; - A sleek and unadorned sans-serif resume template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bamboovir/typst-resume-template&quot;&gt;typst-resume-template&lt;/a&gt; - Aesthetic style inspired by the Awesome-CV project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hexWars/resume&quot;&gt;typst-resume-template&lt;/a&gt; - A pretty resume template designed using typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tomowang/typst-twentysecondcv&quot;&gt;typst-twentysecondcv&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Twenty Seconds Resume/CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daxartio/cv&quot;&gt;typst-yaml-cv&lt;/a&gt; - A simple cv template designed using typst and yaml.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/elegaanz/vercanard&quot;&gt;vercanard&lt;/a&gt; - A colorful resume template for Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Calendar / Timetable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ludwig-austermann/typst-timetable&quot;&gt;typst-timetable&lt;/a&gt; - A template for timetables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/extua/october&quot;&gt;october&lt;/a&gt; - A simple printable month calendar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Footnotes &amp;amp; Endnotes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tudborg/notes.typ&quot;&gt;notes.typ&lt;/a&gt; - A library for notes with deduplication and customizability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Formatting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/metro&quot;&gt;metro&lt;/a&gt; - A typst package to add typsetting to units!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rinmyo/ruby-typ&quot;&gt;ruby-typ&lt;/a&gt; - A library to add ruby text&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pablo-Gonzalez-Calderon/showybox-package&quot;&gt;showybox&lt;/a&gt; - A Typst package for creating colorful and customizable boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asibahi/simple-poem-typst&quot;&gt;simple-poem-typst&lt;/a&gt; - An application of the &lt;code&gt;measure&lt;/code&gt; function to set Arabic poetry.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RubixDev/syntastica-typst/&quot;&gt;syntastica-typst&lt;/a&gt; - Tree-sitter syntax highlighting for code blocks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qo/term&quot;&gt;term&lt;/a&gt; - A Typst package for creating figures that emulate terminal screenshots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/8LWXpg/typst-ansi-render&quot;&gt;typst-ansi_render&lt;/a&gt; - A library to render text with ANSI escape sequences&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkoehl/typst-boxes&quot;&gt;typst-boxes&lt;/a&gt; - A library to draw colorful boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-codelst&quot;&gt;typst-codelst&lt;/a&gt; - A Typst package to render source code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-diagbox&quot;&gt;typst-diagbox&lt;/a&gt; - A library for diagonal line dividers in Typst tables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-gentle-clues&quot;&gt;typst-gentle-clues&lt;/a&gt; - A typst package to simply add admonitions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-tablem&quot;&gt;typst-tablem&lt;/a&gt; - Write markdown-like tables easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-tablex&quot;&gt;typst-tablex&lt;/a&gt; - More powerful and customizable tables in Typst!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cetz-package/cetz&quot;&gt;CeTZ&lt;/a&gt; - CeTZ (CeTZ, ein Typst Zeichenpacket) is a library for drawing with &lt;a href=&quot;https://typst.app&quot;&gt;Typst&lt;/a&gt; with an API inspired by TikZ and &lt;a href=&quot;https://processing.org/&quot;&gt;Processing&lt;/a&gt;. It comes with modules for drawing plots, graphs and charts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst-raytracer&quot;&gt;typst-raytracer&lt;/a&gt; - raytracer in typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Letters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Sematre/typst-letter-pro&quot;&gt;typst-letter-pro&lt;/a&gt; - DIN 5008 letter template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dvdvgt/typst-letter&quot;&gt;typst-letter&lt;/a&gt; - A typst letter template inspired by the DIN 5008 norm&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pascal-huber/typst-letter-template&quot;&gt;typst-letter-template&lt;/a&gt; - A customizable typst letter template with different presets (DIN 5008, Swiss C5)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linguistics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitea.everydayimshuflin.com/greg/typst-lepizig-glossing&quot;&gt;leipzig-gloss&lt;/a&gt; - A library that provides primitives for creating glossing rules according to Leipzig.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/imatpot/typst-ascii-ipa&quot;&gt;typst-ipa&lt;/a&gt; - 🔄 ASCII / IPA conversion for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://kianting.info/wiki/w/Tan_Kian-ting%E7%9A%84%E7%B6%AD%E5%9F%BA:Typst-dictionary-template&quot;&gt;typst-dictionary-template&lt;/a&gt; - 📕 a template for lexical dictionary/glossary in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lynn/typst-syntree&quot;&gt;typst-syntree&lt;/a&gt; - Syntax trees for typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mathematics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;commute&lt;/a&gt; - A library for creating commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/platformer/typst-algorithms&quot;&gt;typst-algorithms&lt;/a&gt; - A library for writing algorithms&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EvanLuo42/typst-himcm-template&quot;&gt;typst-himcm-template&lt;/a&gt; - An HiMCM template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/matthiasGmayer/typst-math-template&quot;&gt;typst-math-template&lt;/a&gt; - A simple math template that allows for numbered, referenceable theorems and compilation of subfiles that use references.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/maxwell-thum/typst-pf3&quot;&gt;typst-pf3&lt;/a&gt; - A small package for creating &quot;structured proofs.&quot; Essentially a port of Leslie Lamport&#39;s &lt;a href=&quot;https://web.archive.org/web/20240419130400/https://lamport.azurewebsites.net/latex/pf2.sty&quot;&gt;&lt;code&gt;pf2.sty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sahasatvik/typst-theorems&quot;&gt;typst-theorems&lt;/a&gt; - A library for creating numbered theorem environments&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johanvx/typst-undergradmath&quot;&gt;typst-undergradmath&lt;/a&gt; - A Typst port of &lt;a href=&quot;https://gitlab.com/jim.hefferon/undergradmath&quot;&gt;undergradmath&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Music&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sitandr/conchord&quot;&gt;conchord&lt;/a&gt; - Typst package to easily write lyrics with chords and generate colorful fretboard diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ljgago/typst-chords&quot;&gt;typst-chords&lt;/a&gt; - A library to write song lyrics with chord diagrams in Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Physics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Leedehai/typst-physics&quot;&gt;physics&lt;/a&gt; - A library for usual physics notations, e.g. vectors and vector fields, matrices, differentials, derivatives, Dirac brackets, tensors, isotopes, and digital signal sequences.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Conferences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isaacew/aiaa-typst&quot;&gt;aiaa-typst&lt;/a&gt; - A template for creating conference papers in the style of the American Institute of Aeronautics and Astronautics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/ieee-conference-typst-template&quot;&gt;ieee-conference-typst-template&lt;/a&gt; A template to write IEEE Conference in Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bsp0109/ieee-typst-template&quot;&gt;ieee-typst-template&lt;/a&gt; - A template to write IEEE Papers in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/avonmoll/ifacconf-typst&quot;&gt;ifacconf-typst&lt;/a&gt; - A template for creating conference papers in the style of the International Federation of Automatic Control&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Journals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/p4perf4ce/typst-ieee-trans-template&quot;&gt;ieee-trans-typst&lt;/a&gt; - A template that mimic LaTeX IEEE Transaction template (&lt;code&gt;ieee-trans.cls&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Grants/Proposals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ntjess/typst-nsf-templates&quot;&gt;typst-nsf-templates&lt;/a&gt; - National Science Foundation (NSF) general template and outlines for popular proposal types.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Engineering&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/cirCeTZ&quot;&gt;circuitypst&lt;/a&gt; - A library for drawing electronic circuit schematics&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-bytefield&quot;&gt;typst-bytefield&lt;/a&gt; - A library for drawing (network) protocol headers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/oldrev/tids&quot;&gt;tids&lt;/a&gt; - A TI-style datasheet template for electronic component&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Plotting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;typst-cd&lt;/a&gt; - Proof of Concept for tikz-like commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johannes-wolf/typst-plot&quot;&gt;typst-plot&lt;/a&gt; - A library for plotting line charts (deprecated in favor of CeTZ)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pegacraft/typst-plotting&quot;&gt;typst-plotting&lt;/a&gt; - A library for drawing a variety of charts and plots like line charts, histograms, and pie charts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Posters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pncnmnp/typst-poster&quot;&gt;typst-poster&lt;/a&gt; - An academic poster template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jonaspleyer/peace-of-posters&quot;&gt;science-posters&lt;/a&gt; - Create academic posters in block style&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scripting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-oxifmt&quot;&gt;typst-oxifmt&lt;/a&gt; - Convenient Rust-like string formatting in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-tools4typst&quot;&gt;typst-tools4typst&lt;/a&gt; - Tools for package and template authors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Slides&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/diapo&quot;&gt;diapo&lt;/a&gt; - A minimal and simplistic presentation template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andreasKroepelin/polylux&quot;&gt;polylux&lt;/a&gt; - Create presentation slides in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marcothms/clean-polylux-typst&quot;&gt;clean-polylux-typst&lt;/a&gt; - A clean and dynamic polylux presentation slide template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-pinit&quot;&gt;pinit&lt;/a&gt; - Pin things as you like, especially useful for creating slides in typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/touying-typ/touying&quot;&gt;touying&lt;/a&gt; - A powerful package for creating presentation slides in Typst&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>alphapapa/org-ql</title>
      <link>https://github.com/alphapapa/org-ql</link>
      <description>&lt;p&gt;A searching tool for Org-mode, including custom query languages, commands, saved searches and agenda-like views, etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: org-ql&lt;/p&gt; 
&lt;h1&gt;NOTE: Using =BEGIN_HTML= for this causes TeX/info export to fail, but this HTML block works.&lt;/h1&gt; 
&lt;p&gt;#+HTML: &lt;img src=&quot;https://raw.githubusercontent.com/alphapapa/org-ql/master/images/dog.png&quot; align=&quot;right&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;NOTE: To avoid having this in the info manual, we use HTML rather than Org syntax; it still appears with the GitHub renderer.&lt;/h1&gt; 
&lt;p&gt;#+HTML: &lt;a href=&quot;https://melpa.org/#/org-ql&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/org-ql-badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/org-ql&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/org-ql-badge.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This package provides a query language for Org files. It offers two syntax styles: Lisp-like sexps and search engine-like keywords.&lt;/p&gt; 
&lt;p&gt;It includes three libraries: The =org-ql= library is flexible and may be used as a backend for other tools. The libraries =org-ql-search= and =helm-org-ql= (a separate package) provide interactive search commands and saved views.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contents :PROPERTIES: :TOC: :include siblings :depth 0 :ignore this :force depth :END: :CONTENTS:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; 
 &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; 
 &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; 
 &lt;li&gt;[[#changelog][Changelog]]&lt;/li&gt; 
 &lt;li&gt;[[#development][Development]] :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Screenshots&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[[images/org-ql-search.gif]]&lt;/p&gt; 
&lt;p&gt;[[images/org-ql-view-dispatch.gif]]&lt;/p&gt; 
&lt;p&gt;[[images/helm-org-ql.gif]]&lt;/p&gt; 
&lt;p&gt;[[images/org-ql-view-sidebar.gif]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation :PROPERTIES: :TOC: ignore-children :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The package =org-ql= may be installed directly from [[https://melpa.org/#/org-ql][MELPA]] or with other tools like [[https://framagit.org/steckerhalter/quelpa][Quelpa]].&lt;/p&gt; 
&lt;p&gt;After installation, you can use the commands without additional configuration. To use the functions and macros in your own Elisp code, use libraries =org-ql= and =org-ql-view=.&lt;/p&gt; 
&lt;p&gt;** Quelpa&lt;/p&gt; 
&lt;p&gt;Installing with [[https://framagit.org/steckerhalter/quelpa][Quelpa]] is easy:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install [[https://framagit.org/steckerhalter/quelpa-use-package#installation][quelpa-use-package]] (which can be installed directly from MELPA).&lt;/li&gt; 
 &lt;li&gt;Add this form to your init file:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+BEGIN_SRC elisp (use-package org-ql :quelpa (org-ql :fetcher github :repo &quot;alphapapa/org-ql&quot; :files (:defaults (:exclude &quot;helm-org-ql.el&quot;)))) #+END_SRC&lt;/p&gt; 
&lt;p&gt;** Helm support&lt;/p&gt; 
&lt;p&gt;The command =helm-org-ql= is available in the package =helm-org-ql=. It may be installed from MELPA, or with Quelpa, like so:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC elisp (use-package helm-org-ql :quelpa (helm-org-ql :fetcher github :repo &quot;alphapapa/org-ql&quot; :files (&quot;helm-org-ql.el&quot;))) #+END_SRC&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage :PROPERTIES: :TOC: :include descendants :depth 1 :END: :CONTENTS:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#commands][Commands]]&lt;/li&gt; 
 &lt;li&gt;[[#queries][Queries]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#non-sexp-query-syntax][Non-sexp query syntax]]&lt;/li&gt; 
   &lt;li&gt;[[#general-predicates][General predicates]]&lt;/li&gt; 
   &lt;li&gt;[[#ancestordescendant-predicates][Ancestor/descendant predicates]]&lt;/li&gt; 
   &lt;li&gt;[[#datetime-predicates][Date/time predicates]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#functions--macros][Functions / Macros]]&lt;/li&gt; 
 &lt;li&gt;[[#dynamic-block][Dynamic block]]&lt;/li&gt; 
 &lt;li&gt;[[#links][Links]]&lt;/li&gt; 
 &lt;li&gt;[[#tips][Tips]] :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;These links work on GitHub&#39;s Org renderer but not in Org.&lt;/h1&gt; 
&lt;p&gt;Feedback on these APIs is welcome. Eventually, after being tested and polished, they will be considered stable.&lt;/p&gt; 
&lt;h1&gt;TODO: Find a way to get these examples included in the info manual.&lt;/h1&gt; 
&lt;p&gt;Lisp code examples are in [[examples.org]].&lt;/p&gt; 
&lt;p&gt;** Commands :PROPERTIES: :TOC: ignore-children :END:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Jumping to an entry:&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[[#org-ql-find][org-ql-find]] and related commands&lt;/li&gt; 
   &lt;li&gt;[[#helm-org-ql][helm-org-ql]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Showing an agenda-like view:&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[[#org-ql-search][org-ql-search]]&lt;/li&gt; 
   &lt;li&gt;[[#org-ql-view][org-ql-view]]&lt;/li&gt; 
   &lt;li&gt;[[#org-ql-view-sidebar][org-ql-view-sidebar]]&lt;/li&gt; 
   &lt;li&gt;[[#org-ql-view-recent-items][org-ql-view-recent-items]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Showing a tree in a buffer:&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[[#org-ql-sparse-tree][org-ql-sparse-tree]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** org-ql-find&lt;/p&gt; 
&lt;p&gt;/Note: These commands use [[#non-sexp-query-syntax][non-sexp queries]]./&lt;/p&gt; 
&lt;p&gt;These commands jump to a heading selected using Emacs&#39;s built-in completion facilities with an Org QL query:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;org-ql-find&lt;/del&gt; searches in the current buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;org-ql-find-path&lt;/del&gt; searches outline paths in the current buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;org-ql-find-in-agenda&lt;/del&gt; searches in &lt;del&gt;(org-agenda-files)&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;org-ql-find-in-org-directory&lt;/del&gt; searches in &lt;del&gt;org-directory&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that these commands are compatible with [[https://github.com/oantolin/embark][Embark]]: the &lt;del&gt;embark-act&lt;/del&gt; command can be called on a completion candidate (i.e. a search result) to act on it immediately, without having to visit the entry in its source Org buffer, and &lt;del&gt;embark-export&lt;/del&gt; may be called to show the results in an &lt;del&gt;org-ql-view&lt;/del&gt; buffer.&lt;/p&gt; 
&lt;p&gt;[[images/org-ql-find.png]]&lt;/p&gt; 
&lt;p&gt;*** org-ql-open-link&lt;/p&gt; 
&lt;p&gt;This command finds links in entries matching the input query and offers them for selection; the selected link is then opened with &lt;del&gt;org-open-at-point&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;The input is matched using the default predicate, which means it searches both entry content and outline paths. This is helpful when a collection of links are kept in Org files: rather than having to first visit the entry containing the desired link, then locate it within the entry, and then open it, the user can simply select the link and open it directly. For example, if an entry with the heading =Emacs= contained a link named =mailing list=, one could search for =Emacs list= and open the link to the mailing list directly.&lt;/p&gt; 
&lt;p&gt;*** org-ql-refile&lt;/p&gt; 
&lt;p&gt;This command refiles the current Org entry to one selected by searching with Org QL completion. It searches files listed in &lt;del&gt;org-refile-targets&lt;/del&gt; as well as the current buffer.&lt;/p&gt; 
&lt;p&gt;*** org-ql-search&lt;/p&gt; 
&lt;p&gt;/Note: This command supports both sexp queries and [[#non-sexp-query-syntax][non-sexp queries]]./&lt;/p&gt; 
&lt;p&gt;Read &lt;del&gt;QUERY&lt;/del&gt; and search with &lt;del&gt;org-ql&lt;/del&gt;. Interactively, prompt for these variables:&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;BUFFERS-FILES&lt;/del&gt;: &lt;del&gt;A&lt;/del&gt; list of buffers and/or files to search. Interactively, may also be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;buffer&lt;/del&gt;: search the current buffer&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;all&lt;/del&gt;: search all Org buffers&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;agenda&lt;/del&gt;: search buffers returned by the function &lt;del&gt;org-agenda-files&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;A space-separated list of file or buffer names&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;del&gt;GROUPS&lt;/del&gt;: An &lt;del&gt;org-super-agenda&lt;/del&gt; group set. See variable &lt;del&gt;org-super-agenda-groups&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;NARROW&lt;/del&gt;: When non-nil, don&#39;t widen buffers before searching. Interactively, with prefix, leave narrowed.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;SORT&lt;/del&gt;: One or a list of &lt;del&gt;org-ql&lt;/del&gt; sorting functions, like &lt;del&gt;date&lt;/del&gt; or &lt;del&gt;priority&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Bindings:&lt;/em&gt; Keys bound in results buffer.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=r=: Refresh results. With prefix, prompt to adjust search parameters.&lt;/li&gt; 
 &lt;li&gt;=v=: Show =transient= view dispatcher (like Magit&#39;s popups).&lt;/li&gt; 
 &lt;li&gt;=C-x C-s=: Save query to variable &lt;del&gt;org-ql-views&lt;/del&gt; (accessible with command &lt;del&gt;org-ql-view&lt;/del&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The view buffer is currently put in &lt;del&gt;org-agenda-mode&lt;/del&gt;, which means that /some/ Org Agenda commands work, such as jumping to entries and changing item priorities (without necessarily updating the view). This feature is experimental and not guaranteed to work correctly with all commands. (It works to the extent it does because the appropriate text properties are placed on each item, imitating an Agenda buffer.)&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Also, this buffer is compatible with [[https://github.com/oantolin/embark][Embark]]: the &lt;del&gt;embark-act&lt;/del&gt; command can be called on an entry to act on it immediately, without having to visit the entry in its source Org buffer.&lt;/p&gt; 
&lt;p&gt;*** helm-org-ql&lt;/p&gt; 
&lt;p&gt;/Note: This command uses [[#non-sexp-query-syntax][non-sexp queries]]. It is available separately in the package =helm-org-ql=./&lt;/p&gt; 
&lt;p&gt;This command displays matches with Helm.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Press =C-x C-s= in the Helm session to save the results to an =org-ql-search= buffer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** org-ql-view&lt;/p&gt; 
&lt;p&gt;Choose and display a view stored in &lt;del&gt;org-ql-views&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Bindings:&lt;/em&gt; Keys bound in view buffer.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=g=, =r=: Refresh results. With prefix, prompt to adjust search parameters.&lt;/li&gt; 
 &lt;li&gt;=v=: Show =transient= view dispatcher (like Magit&#39;s popups).&lt;/li&gt; 
 &lt;li&gt;=C-x C-s=: Save query to variable &lt;del&gt;org-ql-views&lt;/del&gt; (accessible with command &lt;del&gt;org-ql-view&lt;/del&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** org-ql-view-sidebar&lt;/p&gt; 
&lt;p&gt;Show a sidebar window listing views stored in =org-ql-views= for easy access. In the sidebar, press =RET= or =mouse-1= to show the view at point, and press =c= to customize the view at point.&lt;/p&gt; 
&lt;p&gt;*** org-ql-view-recent-items&lt;/p&gt; 
&lt;p&gt;Show items in &lt;del&gt;FILES&lt;/del&gt; from last &lt;del&gt;DAYS&lt;/del&gt; days with timestamps of &lt;del&gt;TYPE&lt;/del&gt;. &lt;del&gt;TYPE&lt;/del&gt; may be &lt;del&gt;ts&lt;/del&gt;, &lt;del&gt;ts-active&lt;/del&gt;, &lt;del&gt;ts-inactive&lt;/del&gt;, &lt;del&gt;clocked&lt;/del&gt;, &lt;del&gt;closed&lt;/del&gt;, &lt;del&gt;deadline&lt;/del&gt;, &lt;del&gt;planning&lt;/del&gt;, or &lt;del&gt;scheduled&lt;/del&gt;. =FILES= defaults to those returned by the function =org-agenda-files=.&lt;/p&gt; 
&lt;p&gt;*** org-ql-sparse-tree&lt;/p&gt; 
&lt;p&gt;Arguments: &lt;del&gt;(query &amp;amp;key keep-previous (buffer (current-buffer)))&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Show a sparse tree for &lt;del&gt;QUERY&lt;/del&gt; in &lt;del&gt;BUFFER&lt;/del&gt; and return number of results. The tree will show the lines where the query matches, and any other context defined in &lt;del&gt;org-show-context-detail&lt;/del&gt;, which see.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;QUERY&lt;/del&gt; is an &lt;del&gt;org-ql&lt;/del&gt; query sexp (quoted, since this is a function). &lt;del&gt;BUFFER&lt;/del&gt; defaults to the current buffer. When &lt;del&gt;KEEP-PREVIOUS&lt;/del&gt; is non-nil (interactively, with prefix), the outline is not reset to the overview state before finding matches, which allows stacking calls to this command. Runs &lt;del&gt;org-occur-hook&lt;/del&gt; after making the sparse tree.&lt;/p&gt; 
&lt;p&gt;** Queries :PROPERTIES: :TOC: :include descendants :depth 1 :END: :CONTENTS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#non-sexp-query-syntax][Non-sexp query syntax]]&lt;/li&gt; 
 &lt;li&gt;[[#general-predicates][General predicates]]&lt;/li&gt; 
 &lt;li&gt;[[#ancestordescendant-predicates][Ancestor/descendant predicates]]&lt;/li&gt; 
 &lt;li&gt;[[#datetime-predicates][Date/time predicates]] :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;An =org-ql= query is a Lisp expression which may contain arbitrary expressions, as well as calling certain built-in predicates. It is byte-compiled into a predicate function which is tested with point on each heading in an Org buffer; when it returns non-nil, the heading matches the query. When possible, certain built-in predicates are optimized away to whole-buffer regular expression searches, which are much faster to search for than testing the predicate on each heading.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Notes:&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bare strings like &lt;del&gt;&quot;string&quot;&lt;/del&gt; are automatically converted to &lt;del&gt;(regexp &quot;string&quot;)&lt;/del&gt; predicates.&lt;/li&gt; 
 &lt;li&gt;Standard numeric comparator function symbols (&lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;lt;=&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;, &lt;del&gt;&amp;gt;=&lt;/del&gt;, &lt;del&gt;=&lt;/del&gt; ) need not be quoted when passed as an argument to predicates which accept them. The resemblance to infix notation is coincidental.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Non-sexp query syntax&lt;/p&gt; 
&lt;p&gt;The command =org-ql-search= also accepts, and the command =helm-org-ql= only accepts, an alternative, non-sexp query syntax. The syntax is simple, and a few examples of queries in both syntaxes should suffice. By default, when multiple predicates are used, they are combined with boolean =and=.&lt;/p&gt; 
&lt;p&gt;| Sexp syntax | Non-sexp syntax | |-------------------------------------------------+----------------------------------------------| | &lt;del&gt;(todo)&lt;/del&gt; | &lt;del&gt;todo:&lt;/del&gt; | | &lt;del&gt;(todo &quot;SOMEDAY&quot;)&lt;/del&gt; | &lt;del&gt;todo:SOMEDAY&lt;/del&gt; | | &lt;del&gt;(todo &quot;SOMEDAY&quot; &quot;WAITING&quot;)&lt;/del&gt; | &lt;del&gt;todo:SOMEDAY,WAITING&lt;/del&gt; | | &lt;del&gt;(ts :on today)&lt;/del&gt; | &lt;del&gt;ts:on=today&lt;/del&gt; | | &lt;del&gt;(ts-active :from &quot;2017-01-01&quot; :to &quot;2018-01-01&quot;)&lt;/del&gt; | &lt;del&gt;ts-active:from=2017-01-01,to=2018-01-01&lt;/del&gt; | | &lt;del&gt;(clocked :on -1)&lt;/del&gt; | &lt;del&gt;clocked:on=-1&lt;/del&gt; | | &lt;del&gt;(heading &quot;quoted phrase&quot; &quot;word&quot;)&lt;/del&gt; | &lt;del&gt;heading:&quot;quoted phrase&quot;,word&lt;/del&gt; | | &lt;del&gt;(and (tags &quot;book&quot; &quot;books&quot;) (priority &quot;A&quot;))&lt;/del&gt; | &lt;del&gt;tags:book,books priority:A&lt;/del&gt; | | &lt;del&gt;(src :lang &quot;elisp&quot; :regexps (&quot;defun&quot;))&lt;/del&gt; | &lt;del&gt;src:defun,lang=elisp&lt;/del&gt; or &lt;del&gt;src:lang=elisp,defun&lt;/del&gt; | | &lt;del&gt;(and (tags &quot;space&quot;) (not (regexp &quot;moon&quot;)))&lt;/del&gt; | &lt;del&gt;tags:space !moon&lt;/del&gt; | | &lt;del&gt;(priority &amp;gt;= B)&lt;/del&gt; | &lt;del&gt;priority:A,B&lt;/del&gt; |&lt;/p&gt; 
&lt;p&gt;Note that the =effort=, =level=, and =priority= predicates do not support comparators in the non-sexp syntax, so multiple arguments should be passed instead, as seen in the last example.&lt;/p&gt; 
&lt;p&gt;*** General predicates&lt;/p&gt; 
&lt;p&gt;Arguments are listed next to predicate names, where applicable.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=blocked= :: Return non-nil if current heading is blocked. Calls &lt;del&gt;org-entry-blocked-p&lt;/del&gt;, which see.&lt;/li&gt; 
 &lt;li&gt;=category (&amp;amp;rest categories)= :: Return non-nil if current heading is in one or more of &lt;del&gt;CATEGORIES&lt;/del&gt; (a list of strings).&lt;/li&gt; 
 &lt;li&gt;=done= :: Return non-nil if entry&#39;s &lt;del&gt;TODO&lt;/del&gt; keyword is in &lt;del&gt;org-done-keywords&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;=effort (&amp;amp;optional effort-or-comparator effort)= :: Return non-nil if current heading&#39;s effort property matches arguments. The following forms are accepted: &lt;del&gt;(effort DURATION)&lt;/del&gt;: Matches if effort is &lt;del&gt;DURATION&lt;/del&gt;. &lt;del&gt;(effort DURATION DURATION)&lt;/del&gt;: Matches if effort is between DURATIONs, inclusive. &lt;del&gt;(effort COMPARATOR DURATION)&lt;/del&gt;: Matches if effort compares to &lt;del&gt;DURATION&lt;/del&gt; with &lt;del&gt;COMPARATOR&lt;/del&gt;. &lt;del&gt;COMPARATOR&lt;/del&gt; may be &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;lt;=&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;, or &lt;del&gt;&amp;gt;=&lt;/del&gt;. &lt;del&gt;DURATION&lt;/del&gt; should be an Org effort string, like =5= or =0:05=.&lt;/li&gt; 
 &lt;li&gt;=habit= :: Return non-nil if entry is a habit.&lt;/li&gt; 
 &lt;li&gt;=heading (&amp;amp;rest strings)= :: Return non-nil if current entry&#39;s heading matches all &lt;del&gt;STRINGS&lt;/del&gt;. Matching is done case-insensitively. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: =h=.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;heading-regexp (&amp;amp;rest regexps)&lt;/del&gt; :: Return non-nil if current entry&#39;s heading matches all &lt;del&gt;REGEXPS&lt;/del&gt; (regexp strings). Matching is done case-insensitively. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;h*&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=level (level-or-comparator &amp;amp;optional level)= :: Return non-nil if current heading&#39;s outline level matches arguments. The following forms are accepted: &lt;del&gt;(level NUMBER)&lt;/del&gt;: Matches if heading level is &lt;del&gt;NUMBER&lt;/del&gt;. &lt;del&gt;(level NUMBER NUMBER)&lt;/del&gt;: Matches if heading level is equal to or between NUMBERs. &lt;del&gt;(level COMPARATOR NUMBER)&lt;/del&gt;: Matches if heading level compares to &lt;del&gt;NUMBER&lt;/del&gt; with &lt;del&gt;COMPARATOR&lt;/del&gt;. &lt;del&gt;COMPARATOR&lt;/del&gt; may be &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;lt;=&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;, or &lt;del&gt;&amp;gt;=&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;=link (&amp;amp;optional description-or-target &amp;amp;key description target regexp-p)= :: Return non-nil if current heading contains a link matching arguments. &lt;del&gt;DESCRIPTION-OR-TARGET&lt;/del&gt; is matched against the link&#39;s description and target. Alternatively, one or both of &lt;del&gt;DESCRIPTION&lt;/del&gt; and &lt;del&gt;TARGET&lt;/del&gt; may be matched separately. Without arguments, return non-nil if any link is found.&lt;/li&gt; 
 &lt;li&gt;=outline-path (&amp;amp;rest strings)= :: Return non-nil if current node&#39;s outline path matches all of &lt;del&gt;STRINGS&lt;/del&gt;. Each string may appear as a substring in any part of the node&#39;s outline path. For example, the path =Food/Fruits/Grapes= would match &lt;del&gt;(olp &quot;Fruit&quot; &quot;Grape&quot;)&lt;/del&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;olp&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=outline-path-segment (&amp;amp;rest strings)= :: Return non-nil if current node&#39;s outline path matches &lt;del&gt;STRINGS&lt;/del&gt;. Matches &lt;del&gt;STRINGS&lt;/del&gt; as a contiguous segment of the outline path. Each string is compared as a substring. For example the path &lt;del&gt;Food/Fruits/Grapes&lt;/del&gt; would match &lt;del&gt;(olps &quot;Fruit&quot; &quot;Grape&quot;)&lt;/del&gt; but not &lt;del&gt;(olps &quot;Food&quot; &quot;Grape&quot;)&lt;/del&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;olps&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=path (&amp;amp;rest regexps)= :: Return non-nil if current heading&#39;s buffer&#39;s filename path matches any of &lt;del&gt;REGEXPS&lt;/del&gt; (regexp strings). Without arguments, return non-nil if buffer is file-backed.&lt;/li&gt; 
 &lt;li&gt;=priority (&amp;amp;rest args)= :: Return non-nil if current heading has a certain priority. &lt;del&gt;ARGS&lt;/del&gt; may be either a list of one or more priority letters as strings, or a comparator function symbol followed by a priority letter string. For example: &lt;del&gt;(priority &quot;A&quot;) (priority &quot;A&quot; &quot;B&quot;) (priority &#39;&amp;gt;= &quot;B&quot;)&lt;/del&gt; Note that items without a priority cookie never match this predicate (while Org itself considers items without a cookie to have the default priority, which, by default, is equal to priority &lt;del&gt;B&lt;/del&gt;).&lt;/li&gt; 
 &lt;li&gt;=property (property &amp;amp;optional value &amp;amp;key inherit)= :: Return non-nil if current entry has &lt;del&gt;PROPERTY&lt;/del&gt; (a string), and optionally &lt;del&gt;VALUE&lt;/del&gt; (a string). If &lt;del&gt;INHERIT&lt;/del&gt; is nil, only match entries with &lt;del&gt;PROPERTY&lt;/del&gt; set on the entry; if t, also match entries with inheritance. If &lt;del&gt;INHERIT&lt;/del&gt; is not specified, use the value of &lt;del&gt;org-use-property-inheritance&lt;/del&gt;, which see.&lt;/li&gt; 
 &lt;li&gt;=regexp (&amp;amp;rest regexps)= :: Return non-nil if current entry matches all of &lt;del&gt;REGEXPS&lt;/del&gt; (regexp strings). Matches against entire entry, from beginning of its heading to the next heading. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: =r=.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=rifle (&amp;amp;rest strings)= :: Return non-nil if each string is found in either the entry or its outline path. Works like =org-rifle=. This is probably the most useful, intuitive, general-purpose predicate. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;smart&lt;/del&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; By default, this is the default predicate used for plain-string query tokens (i.e. given without a specified predicate). This can be customized with the option &lt;del&gt;org-ql-default-predicate&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;src (&amp;amp;key lang regexps)&lt;/del&gt; :: Return non-nil if current entry contains an Org Babel source block. If &lt;del&gt;LANG&lt;/del&gt; is non-nil, match blocks of that language. If &lt;del&gt;REGEXPS&lt;/del&gt; is non-nil, require that block&#39;s contents match all regexps. Matching is done case-insensitively.&lt;/li&gt; 
 &lt;li&gt;=tags (&amp;amp;rest tags)= :: Return non-nil if current heading has one or more of &lt;del&gt;TAGS&lt;/del&gt; (a list of strings). Tests both inherited and local tags.&lt;/li&gt; 
 &lt;li&gt;=tags-inherited (&amp;amp;rest tags)= :: Return non-nil if current heading&#39;s inherited tags include one or more of &lt;del&gt;TAGS&lt;/del&gt; (a list of strings). If &lt;del&gt;TAGS&lt;/del&gt; is nil, return non-nil if heading has any inherited tags. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;inherited-tags&lt;/del&gt;, &lt;del&gt;tags-i&lt;/del&gt;, &lt;del&gt;itags&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=tags-local (&amp;amp;rest tags)= :: Return non-nil if current heading&#39;s local tags include one or more of &lt;del&gt;TAGS&lt;/del&gt; (a list of strings). If &lt;del&gt;TAGS&lt;/del&gt; is nil, return non-nil if heading has any local tags. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;local-tags&lt;/del&gt;, &lt;del&gt;tags-l&lt;/del&gt;, &lt;del&gt;ltags&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=tags-all (&amp;amp;rest tags)= :: Return non-nil if current heading includes all of &lt;del&gt;TAGS&lt;/del&gt;. Tests both inherited and local tags. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;tags&amp;amp;&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=tags-regexp (&amp;amp;rest regexps)= :: Return non-nil if current heading has tags matching one or more of &lt;del&gt;REGEXPS&lt;/del&gt;. Tests both inherited and local tags. 
  &lt;ul&gt; 
   &lt;li&gt;Aliases: &lt;del&gt;tags*&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;=todo (&amp;amp;rest keywords)= :: Return non-nil if current heading is a &lt;del&gt;TODO&lt;/del&gt; item. With &lt;del&gt;KEYWORDS&lt;/del&gt;, return non-nil if its keyword is one of &lt;del&gt;KEYWORDS&lt;/del&gt; (a list of strings). When called without arguments, only matches non-done tasks (i.e. does not match keywords in &lt;del&gt;org-done-keywords&lt;/del&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Ancestor/descendant predicates&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=ancestors (&amp;amp;optional query)= :: Return non-nil if current heading has ancestor headings. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if an ancestor heading matches it. This selector may be nested.&lt;/li&gt; 
 &lt;li&gt;=children (&amp;amp;optional query)= :: Return non-nil if current heading has direct child headings. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if a child heading matches it. This selector may be nested, e.g. to match grandchild headings.&lt;/li&gt; 
 &lt;li&gt;=descendants (&amp;amp;optional query)= :: Return non-nil if current heading has descendant headings. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if a descendant heading matches it. This selector may be nested (if you can grok the nesting!).&lt;/li&gt; 
 &lt;li&gt;=parent (&amp;amp;optional query)= :: Return non-nil if current heading has a direct parent heading. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if the parent heading matches it. This selector may be nested, e.g. to match grandparent headings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Date/time predicates&lt;/p&gt; 
&lt;p&gt;These predicates take optional keyword arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;:from&lt;/del&gt;: Match entries whose timestamp is on or after timestamp &lt;del&gt;:from&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;:to&lt;/del&gt;: Match entries whose timestamp is on or before timestamp &lt;del&gt;:to&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;:on&lt;/del&gt;: Match entries whose timestamp is on date &lt;del&gt;:on&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;:with-time&lt;/del&gt;: If unspecified, match timestamps with or without times (i.e. HH:MM). If nil, match timestamps without times. If t, match timestamps with times.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Timestamp/date arguments should be either a number of days (positive to look forward, or negative to look backward), a string parseable by &lt;del&gt;parse-time-string&lt;/del&gt; (the string may omit the time value), the symbol &lt;del&gt;today&lt;/del&gt;, or a &lt;del&gt;ts&lt;/del&gt; struct.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Predicates&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;=ts= :: Return non-nil if current entry has a timestamp in given period. Without arguments, return non-nil if entry has a timestamp.&lt;/li&gt; 
   &lt;li&gt;=ts-active=, =ts-a= :: Like =ts=, but only matches active timestamps.&lt;/li&gt; 
   &lt;li&gt;=ts-inactive=, =ts-i= :: Like =ts=, but only matches inactive timestamps.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following predicates, in addition to the keyword arguments, can also take a single argument, a number, which looks backward or forward a number of days. The number can be negative to invert the direction.&lt;/p&gt; 
&lt;p&gt;These two predicates interpret a single number argument as if it were passed to the &lt;del&gt;:from&lt;/del&gt; keyword argument, which eases the common case of searching for items clocked or closed in the past few days:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Backward-looking&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;=clocked= :: Return non-nil if current entry was clocked in given period. Without arguments, return non-nil if entry was ever clocked. Note: Clock entries are expected to be clocked out. Currently clocked entries (i.e. with unclosed timestamp ranges) are ignored.&lt;/li&gt; 
   &lt;li&gt;=closed= :: Return non-nil if current entry was closed in given period. Without arguments, return non-nil if entry is closed.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These predicates interpret a single number argument as if it were passed to the &lt;del&gt;:to&lt;/del&gt; keyword argument, which eases the common case of searching for items planned in the next few days:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Forward-looking&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;=deadline= :: Return non-nil if current entry has deadline in given period. If argument is =auto=, return non-nil if entry has deadline within =org-deadline-warning-days=. Without arguments, return non-nil if entry has any deadline.&lt;/li&gt; 
   &lt;li&gt;=planning= :: Return non-nil if current entry has planning timestamp (i.e. its deadline, scheduled, or closed timestamp) in given period. Without arguments, return non-nil if entry has any planning timestamp.&lt;/li&gt; 
   &lt;li&gt;=scheduled= :: Return non-nil if current entry is scheduled in given period. Without arguments, return non-nil if entry is scheduled.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Functions / Macros :PROPERTIES: :TOC: :include descendants :END: :CONTENTS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#agenda-like-views][Agenda-like views]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#function-org-ql-block][Function: org-ql-block]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#listing--acting-on-results][Listing / acting-on results]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#caching][Caching]]&lt;/li&gt; 
   &lt;li&gt;[[#function-org-ql-select][Function: org-ql-select]]&lt;/li&gt; 
   &lt;li&gt;[[#function-org-ql-query][Function: org-ql-query]]&lt;/li&gt; 
   &lt;li&gt;[[#macro-org-ql-deprecated][Macro: org-ql (deprecated)]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#custom-predicates][Custom predicates]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#macro-org-ql-defpred][Macro: org-ql-defpred]] :END:&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Agenda-like views&lt;/p&gt; 
&lt;p&gt;**** Function: &lt;del&gt;org-ql-block&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;For use as a custom agenda block type in &lt;del&gt;org-agenda-custom-commands&lt;/del&gt;. For example, you could define a custom series command like this, which would list all priority A items tagged =Emacs= with to-do keyword =SOMEDAY=, followed by the standard agenda view, in a single buffer:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC elisp (setq org-agenda-custom-commands &#39;((&quot;ces&quot; &quot;Custom: Agenda and Emacs SOMEDAY [#A] items&quot; ((org-ql-block &#39;(and (todo &quot;SOMEDAY&quot;) (tags &quot;Emacs&quot;) (priority &quot;A&quot;)) ((org-ql-block-header &quot;SOMEDAY :Emacs: High-priority&quot;))) (agenda))))) #+END_SRC&lt;/p&gt; 
&lt;p&gt;Which would be equivalent to a &lt;del&gt;tags-todo&lt;/del&gt; search like this:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC elisp (setq org-agenda-custom-commands &#39;((&quot;ces&quot; &quot;Custom: Agenda and Emacs SOMEDAY [#A] items&quot; ((tags-todo &quot;PRIORITY=&quot;A&quot;+Emacs/!SOMEDAY&quot;) (agenda))))) #+END_SRC&lt;/p&gt; 
&lt;p&gt;However, the &lt;del&gt;org-ql-block&lt;/del&gt; version runs in about 1/5th the time.&lt;/p&gt; 
&lt;p&gt;The variable =org-ql-block-header= may be bound to a string to use as the block header, otherwise the header is formed automatically.&lt;/p&gt; 
&lt;p&gt;*** Listing / acting-on results&lt;/p&gt; 
&lt;p&gt;**** Caching&lt;/p&gt; 
&lt;p&gt;Org QL uses a per-buffer cache to speed up subsequent searches. It&#39;s keyed on query expressions and match actions, which means that, for the same query and same match action in the same buffer, if the buffer has not been modified since the last time the query was run, the cached match-action result will be returned, and the query will not be evaluated in that buffer again.&lt;/p&gt; 
&lt;p&gt;Therefore, since neither query expressions nor match actions are guaranteed to be evaluated when the following functions are called, they should be free of side effects. Or, if a side effect is required, the cache should be invalidated (e.g. by incrementing the buffer&#39;s modified tick, or by using a query expression or match action that has yet to be cached). /Note: Future improvements will allow the cache to be more easily disabled or cleared./&lt;/p&gt; 
&lt;p&gt;**** Function: &lt;del&gt;org-ql-select&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;/Arguments:/ &lt;del&gt;(buffers-or-files query &amp;amp;key action narrow sort)&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Return items matching &lt;del&gt;QUERY&lt;/del&gt; in &lt;del&gt;BUFFERS-OR-FILES&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;BUFFERS-OR-FILES&lt;/del&gt; is a one or a list of files and/or buffers.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;QUERY&lt;/del&gt; is an &lt;del&gt;org-ql&lt;/del&gt; query sexp (quoted, since this is a function).&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;ACTION&lt;/del&gt; is a function which is called on each matching entry with point at the beginning of its heading. It may be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;element&lt;/del&gt; or nil: Equivalent to &lt;del&gt;org-element-headline-parser&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;element-with-markers&lt;/del&gt;: Equivalent to calling &lt;del&gt;org-element-headline-parser&lt;/del&gt;, with markers added using &lt;del&gt;org-ql--add-markers&lt;/del&gt;. Suitable for formatting with &lt;del&gt;org-ql-agenda--format-element&lt;/del&gt;, allowing insertion into an Org Agenda-like buffer.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A sexp, which will be byte-compiled into a lambda function.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A function symbol.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If &lt;del&gt;NARROW&lt;/del&gt; is non-nil, buffers are not widened (the default is to widen and search the entire buffer).&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;SORT&lt;/del&gt; is either nil, in which case items are not sorted; or one or a list of defined &lt;del&gt;org-ql&lt;/del&gt; sorting methods (&lt;del&gt;date&lt;/del&gt;, &lt;del&gt;deadline&lt;/del&gt;, &lt;del&gt;scheduled&lt;/del&gt;, &lt;del&gt;closed&lt;/del&gt;, &lt;del&gt;todo&lt;/del&gt;, &lt;del&gt;priority&lt;/del&gt;, or &lt;del&gt;random&lt;/del&gt;); or a user-defined comparator function that accepts two items as arguments and returns nil or non-nil.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC elisp ;; Return list of to-do headings in inbox file with tags and to-do keywords: (org-ql-select &quot;~/org/inbox.org&quot; &#39;(todo) :action #&#39;org-get-heading) ;; =&amp;gt; (&quot;TODO Practice leaping tall buildings in a single bound :personal:&quot; ...)&lt;/p&gt; 
&lt;p&gt;;; Without tags and to-do keywords: (org-ql-select &quot;~/org/inbox.org&quot; &#39;(todo) :action &#39;(org-get-heading t t)) ;; =&amp;gt; (&quot;Practice leaping tall buildings in a single bound&quot; ...)&lt;/p&gt; 
&lt;p&gt;;; Return WAITING heading elements in agenda files: (org-ql-select (org-agenda-files) &#39;(todo &quot;WAITING&quot;) :action &#39;element) ;; =&amp;gt; ((headline (:raw-value &quot;Visit the moon&quot; ...) ...) ...)&lt;/p&gt; 
&lt;p&gt;;; Since `element&#39; is the default for ACTION, it may be omitted: (org-ql-select (org-agenda-files) &#39;(todo &quot;WAITING&quot;)) ;; =&amp;gt; ((headline (:raw-value &quot;Visit the moon&quot; ...) ...) ...) #+END_SRC&lt;/p&gt; 
&lt;p&gt;**** Function: &lt;del&gt;org-ql-query&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;/Arguments:/ &lt;del&gt;(&amp;amp;key (select &#39;element-with-markers) from where order-by narrow)&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Like &lt;del&gt;org-ql-select&lt;/del&gt;, but arguments are named more like a &lt;del&gt;SQL&lt;/del&gt; query.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;SELECT&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;ACTION&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;FROM&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;BUFFERS-OR-FILES&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;WHERE&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;QUERY&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;ORDER-BY&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;SORT&lt;/del&gt;, which see.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;NARROW&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;NARROW&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC elisp ;; Return list of to-do headings in inbox file with tags and to-do keywords: (org-ql-query :select #&#39;org-get-heading :from &quot;~/org/inbox.org&quot; :where &#39;(todo)) ;; =&amp;gt; (&quot;TODO Practice leaping tall buildings in a single bound :personal:&quot; ...)&lt;/p&gt; 
&lt;p&gt;;; Without tags and to-do keywords: (org-ql-query :select &#39;(org-get-heading t t) :from &quot;~/org/inbox.org&quot; :where &#39;(todo)) ;; =&amp;gt; (&quot;Practice leaping tall buildings in a single bound&quot; ...)&lt;/p&gt; 
&lt;p&gt;;; Return WAITING heading elements in agenda files: (org-ql-query :select &#39;element :from (org-agenda-files) :where &#39;(todo &quot;WAITING&quot;)) ;; =&amp;gt; ((headline (:raw-value &quot;Visit the moon&quot; ...) ...) ...)&lt;/p&gt; 
&lt;p&gt;;; Since `element&#39; is the default for SELECT, it may be omitted: (org-ql-query :from (org-agenda-files) :where &#39;(todo &quot;WAITING&quot;)) ;; =&amp;gt; ((headline (:raw-value &quot;Visit the moon&quot; ...) ...) ...) #+END_SRC&lt;/p&gt; 
&lt;p&gt;**** Macro: &lt;del&gt;org-ql&lt;/del&gt; (deprecated)&lt;/p&gt; 
&lt;p&gt;/Arguments:/ &lt;del&gt;(buffers-or-files query &amp;amp;key sort narrow markers action)&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Expands into a call to &lt;del&gt;org-ql-select&lt;/del&gt; with the same arguments. For convenience, arguments should be unquoted.&lt;/p&gt; 
&lt;p&gt;/Note: This macro is deprecated and will be removed in v0.7./&lt;/p&gt; 
&lt;p&gt;*** Custom predicates&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See: [[file:examples/defpred.org][Custom predicate tutorial]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;**** Macro: =org-ql-defpred=&lt;/p&gt; 
&lt;p&gt;/Arguments:/ &lt;del&gt;(name args docstring &amp;amp;key body preambles normalizers)&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Define an &lt;del&gt;org-ql&lt;/del&gt; selector predicate named &lt;del&gt;org-ql--predicate-NAME&lt;/del&gt;. &lt;del&gt;NAME&lt;/del&gt; may be a symbol or a list of symbols: if a list, the first is used as &lt;del&gt;NAME&lt;/del&gt; and the rest are aliases. &lt;del&gt;A&lt;/del&gt; function is only created for &lt;del&gt;NAME&lt;/del&gt;, not for aliases, so a normalizer should be used to replace aliases with &lt;del&gt;NAME&lt;/del&gt; in queries (keep reading).&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;ARGS&lt;/del&gt; is a &lt;del&gt;cl-defun&lt;/del&gt;-style argument list. &lt;del&gt;DOCSTRING&lt;/del&gt; is the function&#39;s docstring.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;BODY&lt;/del&gt; is the body of the predicate. It will be evaluated with point on the beginning of an Org heading and should return non-nil if the heading&#39;s entry is a match.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;PREAMBLES&lt;/del&gt; and &lt;del&gt;NORMALIZERS&lt;/del&gt; are lists of &lt;del&gt;pcase&lt;/del&gt; forms matched against Org &lt;del&gt;QL&lt;/del&gt; query sexps. They are spliced into &lt;del&gt;pcase&lt;/del&gt; forms in the definitions of the functions &lt;del&gt;org-ql--query-preamble&lt;/del&gt; and &lt;del&gt;org-ql--normalize-query&lt;/del&gt;, which see. Those functions are redefined when this macro is expanded, unless variable &lt;del&gt;org-ql-defpred-defer&lt;/del&gt; is non-nil, in which case those functions should be redefined manually after defining predicates by calling &lt;del&gt;org-ql--define-query-preamble-fn&lt;/del&gt; and &lt;del&gt;org-ql--define-normalize-query-fn&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;NORMALIZERS&lt;/del&gt; are used to normalize query expressions to standard forms. For example, when the predicate has aliases, the aliases should be replaced with predicate names using a normalizer. Also, predicate arguments may be put into a more optimal form so that the predicate has less work to do at query time. NOTE: Normalizers are applied to a query repeatedly until the query is fully normalized, so normalizers should be carefully written to avoid infinite loops.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;PREAMBLES&lt;/del&gt; refer to regular expressions which may be used to search through a buffer directly to a potential match rather than testing the predicate body on each heading. (Naming things is hard.) In each &lt;del&gt;pcase&lt;/del&gt; form in &lt;del&gt;PREAMBLES&lt;/del&gt;, the &lt;del&gt;pcase&lt;/del&gt; expression (not the pattern) should be a plist with the following keys, each value of which should be an expression which may refer to variables bound in the pattern:&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;:regexp&lt;/del&gt; Regular expression which searches directly to a potential match.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;:case-fold&lt;/del&gt; Bound to &lt;del&gt;case-fold-search&lt;/del&gt; around the regexp search.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;:query&lt;/del&gt; Expression which should replace the query expression, or &lt;del&gt;query&lt;/del&gt; if it should not be changed (e.g. if the regexp is insufficient to determine whether a heading matches, in which case the predicate&#39;s body needs to be tested on the heading). If the regexp guarantees a match, this may be simply &lt;del&gt;t&lt;/del&gt;, leaving the query expression with no work to do, which improves performance.&lt;/p&gt; 
&lt;p&gt;For convenience, within the &lt;del&gt;pcase&lt;/del&gt; patterns, the symbol &lt;del&gt;predicate-names&lt;/del&gt; is a special form which is replaced with a pattern matching any of the predicate&#39;s name and aliases. For example, if &lt;del&gt;NAME&lt;/del&gt; were:&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;(heading h)&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Then if &lt;del&gt;NORMALIZERS&lt;/del&gt; were:&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;((&lt;code&gt;(,predicate-names . ,args) &lt;/code&gt;(heading ,@args)))&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;It would be expanded to:&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;((&lt;code&gt;(,(or &#39;heading &#39;h) . ,args) &lt;/code&gt;(heading ,@args)))&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;** Dynamic block&lt;/p&gt; 
&lt;p&gt;Org QL provides a dynamic block that lists entries in the current document matching a query. In the header, these parameters are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;:query&lt;/del&gt;: An Org QL query expression in either sexp or non-sexp form.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;:columns&lt;/del&gt; A list of columns, including &lt;del&gt;heading&lt;/del&gt;, &lt;del&gt;todo&lt;/del&gt;, &lt;del&gt;property&lt;/del&gt;, &lt;del&gt;priority&lt;/del&gt;, &lt;del&gt;deadline&lt;/del&gt;, &lt;del&gt;scheduled&lt;/del&gt;, &lt;del&gt;closed&lt;/del&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Each column may also be specified as a list with the second element being a header string. For example, to abbreviate the priority column: &lt;del&gt;(priority &quot;P&quot;)&lt;/del&gt;.&lt;/li&gt; 
   &lt;li&gt;For certain columns, like =property=, arguments may be passed by specifying the column type itself as a list. For example, to display a column showing the values of a &lt;del&gt;property&lt;/del&gt; named &lt;del&gt;milestone&lt;/del&gt;, with the header being abbreviated to &lt;del&gt;M&lt;/del&gt;: &lt;del&gt;((property &quot;milestone&quot;) &quot;M&quot;)&lt;/del&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;:sort&lt;/del&gt; One or a list of Org QL sorting methods (see &lt;del&gt;org-ql-select&lt;/del&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;:take&lt;/del&gt; Optionally take a number of results from the front (a positive number) or the end (a negative number) of the results.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;:ts-format&lt;/del&gt; Optional format string used to format timestamp-based columns.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The heading column is formatted as a link to the heading (not shown in the following example).&lt;/p&gt; 
&lt;p&gt;For example, this dynamic block shows the first seven headings that are to-do items with priority A or B, sorted by deadline then priority, with certain columns (including the value of the =agenda-group= property with a custom header) and timestamp format:&lt;/p&gt; 
&lt;h1&gt;NOTE: These results are edited manually because the Org links don&#39;t display well in the Info manual.&lt;/h1&gt; 
&lt;p&gt;#+BEGIN_SRC org ,#+BEGIN: org-ql :query &quot;todo: priority:A,B&quot; :columns (todo (priority &quot;P&quot;) ((property &quot;agenda-group&quot;) &quot;Group&quot;) deadline heading) :sort (deadline priority) :take 7 :ts-format &quot;%Y-%m-%d %H:%M&quot; | Todo | P | Group | Deadline | Heading | |------+---+-------+------------------+---------------------------------------| | TODO | A | | 2017-07-07 00:00 | Take over the world | | TODO | B | | 2017-07-10 00:00 | Renew membership in supervillain club | | TODO | A | plans | 2017-07-15 00:00 | Take over the universe | | TODO | B | | 2017-07-21 00:00 | Internet | | TODO | A | bills | 2017-08-01 00:00 | Spaceship lease | | TODO | A | | | Skype with president of Antarctica | | TODO | B | | | Take over Mars | ,#+END: #+END_SRC&lt;/p&gt; 
&lt;p&gt;** Links&lt;/p&gt; 
&lt;p&gt;Org QL View searches may be accessed by opening &lt;del&gt;org-ql-search:&lt;/del&gt; links in an Org file.&lt;/p&gt; 
&lt;p&gt;In an Org QL View buffer, the command &lt;del&gt;org-store-link&lt;/del&gt; (i.e. &lt;del&gt;C-c l&lt;/del&gt;) stores a link to the current search, and it may be inserted into an Org buffer with the command &lt;del&gt;org-insert-link&lt;/del&gt; (&lt;del&gt;C-c C-l&lt;/del&gt;). The stored link records all of the view settings, like title, sorting, and grouping.&lt;/p&gt; 
&lt;p&gt;Simple links may also be written manually in either sexp or non-sexp form, like:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC org [[org-ql-search:todo:NEXT priority:A]] [[org-ql-search:(and (todo &quot;NEXT&quot;) (priority &quot;A&quot;))]] #+END_SRC&lt;/p&gt; 
&lt;p&gt;** Tips&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Org QL View buffers can be bookmarked with Emacs bookmark commands, e.g. =C-x r m=. This also integrates with [[https://github.com/alphapapa/org-sidebar][org-sidebar]] and [[https://github.com/alphapapa/burly.el][Burly]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Changelog :PROPERTIES: :TOC: ignore-children :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;/Note:/ Breaking changes may be made before version 1.0, but in the event of major changes, attempts at backward compatibility will be made with obsolescence declarations, translation of arguments, etc. Users who need stability guarantees before 1.0 may choose to use tagged stable releases.&lt;/p&gt; 
&lt;p&gt;** 0.9-pre&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Face &lt;del&gt;org-ql-view-query&lt;/del&gt;, applied to view queries in header line.&lt;/li&gt; 
 &lt;li&gt;Face &lt;del&gt;org-ql-view-title&lt;/del&gt;, applied to view titles in header line.&lt;/li&gt; 
 &lt;li&gt;Option &lt;del&gt;org-ql-view-relative-deadline-prefix&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt; respects narrowing of the current buffer by default, allowing searching within the narrowed region. (Using one &lt;del&gt;C-u&lt;/del&gt; argument widens the current buffer, and using two &lt;del&gt;C-u&lt;/del&gt; arguments prompts for the buffers to search.)&lt;/li&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-completing-read&lt;/del&gt; accepts a new &lt;del&gt;NARROWP&lt;/del&gt; argument, which is passed to &lt;del&gt;org-ql-select&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Customization group for face &lt;del&gt;org-ql-view-due-date&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;Apply Org syntax font-locking to items in &lt;del&gt;org-ql-view&lt;/del&gt; buffers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** helm-org-ql&lt;/p&gt; 
&lt;p&gt;Tagged v0.6.2, fixing a compilation warning.&lt;/p&gt; 
&lt;p&gt;** 0.8.10&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-refile&lt;/del&gt; uses the base buffer when refiling to an indirect buffer. ([[https://github.com/alphapapa/org-ql/issues/466][#466]].)&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;link&lt;/del&gt; could signal an error when searching text that is mistakenly recognized as an Org link (e.g. Bash double-bracket constructs in a source block). (Thanks to [[https://github.com/jwiegley][John Wiegley]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.9&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicate &lt;del&gt;property&lt;/del&gt; when called with argument form &lt;del&gt;(property &quot;PROPERTY-NAME&quot; :inherit t)&lt;/del&gt;. ([[https://github.com/alphapapa/org-ql/issues/460][#460]]. Thanks to [[https://github.com/Stewmath][Stewmath]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;level&lt;/del&gt;&#39;s preamble optimizer allows expressions in place of the numeric argument. (See [[https://github.com/alphapapa/org-ql/issues/460][#460]]. Thanks to [[https://github.com/Stewmath][Stewmath]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Reading of view settings from Org links in upcoming Emacs version. ([[https://github.com/alphapapa/org-ql/issues/461][#461]]. Thanks to [[https://github.com/snogge][Ola Nilsson]] for help debugging, and for maintaining [[https://github.com/jorgenschaefer/emacs-buttercup][Buttercup]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Compatibility&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fix compilation error on Emacs 30. ([[https://github.com/alphapapa/org-ql/issues/433][#433]]. Thanks to [[https://github.com/akirak][Akira Komamura]] and [[https://github.com/monnier][Stefan Monnier]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.8&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Remove text properties from to-do keywords before displaying them in an &lt;del&gt;org-ql-view&lt;/del&gt; buffer. (Such text properties could cause them to, e.g. display with extra leading spaces, depending on which other modes might be enabled in the source Org buffer.)&lt;/li&gt; 
 &lt;li&gt;Binding of &lt;del&gt;completion-styles-alist&lt;/del&gt; in &lt;del&gt;org-ql-completing-read&lt;/del&gt;. (This fixes compatibility with Helm&#39;s &lt;del&gt;helm&lt;/del&gt; completion style, as well as default Emacs completion in recursive minibuffers. [[https://github.com/alphapapa/org-ql/issues/337][#337]]. Thanks to [[https://github.com/progfolio][Nicholas Vollmer]], [[https://github.com/9viz][viz]], and [[https://github.com/karthink][Karthik Chikmagalur]] for reporting and suggesting fixes.)&lt;/li&gt; 
 &lt;li&gt;Use of the context snippet function for &lt;del&gt;org-ql-completing-read&lt;/del&gt;. ([[https://github.com/alphapapa/org-ql/issues/419][#419]]. Thanks to [[https://github.com/tpeacock19][tpeacock19]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.7&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Timestamps with internal time ranges (e.g. &lt;del&gt;&amp;lt;2024-06-26 10:00-11:00&amp;gt;&lt;/del&gt;) are matched for simple queries. (This support is not yet comprehensive, e.g. a query that depends on the specific inner time range may not behave as expected. Previously such timestamps were not matched at all. See [[https://github.com/alphapapa/org-ql/pull/237][#237]] and [[https://github.com/alphapapa/org-ql/issues/371][#371]]. Thanks to [[https://github.com/yantar92][Ihor Radchenko]].)&lt;/li&gt; 
 &lt;li&gt;Timestamps with day-of-the-week abbreviations are matched more flexibly (allowing, e.g. a period in French locales). (See [[https://github.com/alphapapa/org-ql/discussions/429][#429]], [[https://github.com/alphapapa/org-ql/issues/432][#432]]. Thanks to [[https://github.com/neurolit][Florian D.]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-search&lt;/del&gt; did not narrow properly when called interactively.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Compatibility&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dynamic blocks work with Org 9.7. ([[https://github.com/alphapapa/org-ql/issues/431][#431]]. Thanks to [[https://github.com/jezcope][Jez Cope]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.6&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bookmarking &lt;del&gt;org-ql-view&lt;/del&gt; buffers when the &lt;del&gt;buffers-files&lt;/del&gt; argument is a symbol (like &lt;del&gt;org-agenda-files&lt;/del&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.5&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicate &lt;del&gt;heading&lt;/del&gt; incorrectly matched strings as regular expressions, sometimes returning incorrect results. (See [[https://github.com/alphapapa/org-ql/discussions/410][discussion]]. Thanks to [[https://github.com/al3xandru][Alex Popescu]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Predicates &lt;del&gt;ancestor&lt;/del&gt; and &lt;del&gt;parent&lt;/del&gt; did not normalize their sub-queries, sometimes returning incorrect results. ([[https://github.com/alphapapa/org-ql/issues/365][#365]]. Thanks to [[https://github.com/kofm][Gabriele Mongiano]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.4&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt; goes to the selected entry in the base buffer (rather than potentially an indirect buffer, whose narrowing could leave the selected entry hidden. The nuances around going to entries in buffers that may be indirect and/or narrowed are surprisingly complicated. Hopefully this is the last fix).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.3&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt; incorrectly moved point. (See [[https://github.com/alphapapa/org-ql/issues/380#issuecomment-1881913025][#380]]. Thanks to [[https://github.com/oantolin][Omar Antolín Camarena]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.2&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt; incorrectly restored the buffer after jumping when not using indirect buffers. (See [[https://github.com/alphapapa/org-ql/issues/380#issuecomment-1881913025][#380]]. Thanks to [[https://github.com/bram85][Bram Schoenmakers]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8.1&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt; widens the buffer before going to the selected entry.&lt;/li&gt; 
 &lt;li&gt;In &lt;del&gt;org-ql-view&lt;/del&gt; buffers, links in headings remain clickable links. (Fixes [[https://github.com/alphapapa/org-ql/issues/282][#282]]. Thanks to [[https://github.com/jakebox][Jacob Boxerman]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.8&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-completing-read&lt;/del&gt;, used by command &lt;del&gt;org-ql-find&lt;/del&gt;, now specifies the completion category as &lt;del&gt;org-heading&lt;/del&gt;, providing compatibility with [[https://github.com/oantolin/embark][Embark]]. (This is a powerful feature, as it means any &lt;del&gt;org-ql-find&lt;/del&gt; result can be acted on from inside the search results with Embark, which provides common actions from Org Agenda and Org speed keys bindings.) ([[https://github.com/alphapapa/org-ql/issues/299][#299]]. Thanks to [[https://github.com/oantolin][Omar Antolín Camarena]], [[https://github.com/minad][Daniel Mendler]], and [[https://github.com/akirak][Akira Komamura]].) 
  &lt;ul&gt; 
   &lt;li&gt;Command &lt;del&gt;org-ql-completing-read-export&lt;/del&gt;, bound to &lt;del&gt;C-c C-e&lt;/del&gt; or &lt;del&gt;embark-export&lt;/del&gt; while in an &lt;del&gt;org-ql-completing-read&lt;/del&gt; session, exits and shows an &lt;del&gt;org-ql-view&lt;/del&gt; buffer for the current search.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt; may be called in an &lt;del&gt;org-agenda&lt;/del&gt; or &lt;del&gt;org-ql-view&lt;/del&gt; buffer to search the buffers which contributed to the agenda/view buffer.&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find-path&lt;/del&gt;, which searches outline paths in the current buffer.&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-open-link&lt;/del&gt;, which finds links in entries matching the given query, and opens the selected one with &lt;del&gt;org-open-at-point&lt;/del&gt;. (This is helpful when a collection of links are kept in Org files: rather than having to first visit the entry containing the desired link, then locate it within the entry, and then open it, the user can simply select the link and open it directly.)&lt;/li&gt; 
 &lt;li&gt;Items in &lt;del&gt;org-ql-view&lt;/del&gt; buffers now include the &lt;del&gt;org-category&lt;/del&gt; text property, like Org Agenda buffers, which allows grouping with &lt;del&gt;org-super-agenda&lt;/del&gt;&#39;s category-related selectors. ([[https://github.com/alphapapa/org-ql/issues/363][#363]]. Thanks to [[https://github.com/kofm][Gabriele Mongiano]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicate &lt;del&gt;property&lt;/del&gt; correctly uses the value of &lt;del&gt;org-use-property-inheritance&lt;/del&gt; when not specified. ([[https://github.com/alphapapa/org-ql/pull/346][#346]], [[https://github.com/alphapapa/org-ql/issues/356][#356]]. Thanks to [[https://github.com/bram85][Bram Schoenmakers]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Compatibility&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Emacs 27.1 or later is now required.&lt;/li&gt; 
 &lt;li&gt;Org v9.7&#39;s &lt;del&gt;org-element&lt;/del&gt; API changes required some adjustments. ([[https://github.com/alphapapa/org-ql/issues/364][#364]]. Thanks to several users for reporting, and to [[https://github.com/yantar92][Ihor Radchenko]] for his feedback.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.7.4&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ignore empty quoted strings in plain-string queries ([[https://github.com/alphapapa/org-ql/issues/383][#383]]).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.7.3&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Disable &lt;del&gt;case-fold-search&lt;/del&gt; when collecting headings in outline paths. (Headings that started with a word that is also a to-do keyword but with different capitalization would be matched incorrectly.)&lt;/li&gt; 
 &lt;li&gt;Saving of &lt;del&gt;org-ql-view&lt;/del&gt; views. ([[https://github.com/alphapapa/org-ql/issues/378][#378]]. Thanks to [[https://github.com/Pentaquark1][Pentaquark1]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt; didn&#39;t move point to the selected entry. ([[https://github.com/alphapapa/org-ql/issues/380][#380]]. Thanks to [[https://github.com/oantolin][Omar Antolín Camarena]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.7.2&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Timestamp predicates are more tolerant of partial input (e.g. preventing errors while the user is typing a query into &lt;del&gt;org-ql-find&lt;/del&gt;).&lt;/li&gt; 
 &lt;li&gt;Query parser ignores leading whitespace (e.g. preventing errors while the user is typing a query into &lt;del&gt;org-ql-find&lt;/del&gt;).&lt;/li&gt; 
 &lt;li&gt;Use of &lt;del&gt;org-ql-find&lt;/del&gt; with &lt;del&gt;:query-prefix&lt;/del&gt; argument prevented selection of results. ([[https://github.com/alphapapa/org-ql/issues/351][#351]]. Thanks to [[https://github.com/danielfleischer][Daniel Fleischer]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Handle narrowed buffers correctly in &lt;del&gt;org-ql-find&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;Warn about empty headings in &lt;del&gt;org-ql-completing-read&lt;/del&gt; (the Org format allows a heading line to have no text, but it&#39;s useless for this purpose, and usually indicates unnoticed corruption).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.7.1&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-completing-read&lt;/del&gt; is more compatible with default Emacs completion. (See [[https://github.com/alphapapa/org-ql/issues/338][#338]]. Thanks to [[https://github.com/arozbiz][arozbiz]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-completing-read&lt;/del&gt; would sometimes stop updating with changes in input. (See [[https://github.com/alphapapa/org-ql/issues/350][#350]]. Thanks to [[https://github.com/anpandey][Ankit Raj Pandey]] for reporting and fixing, and to [[https://github.com/minad][Daniel Mendler]] for advising.)&lt;/li&gt; 
 &lt;li&gt;In &lt;del&gt;org-ql-completing-read&lt;/del&gt;, format links for display, and use &lt;del&gt;org-entry-get&lt;/del&gt; internally rather than &lt;del&gt;org-get-heading&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.7&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-find&lt;/del&gt;, which jumps to entries selected using Emacs&#39;s built-in completion facilities and Org QL queries (like &lt;del&gt;helm-org-ql&lt;/del&gt;, but doesn&#39;t require Helm.).&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-refile&lt;/del&gt;, which refiles the entry at point to one selected using Org QL completion.&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;rifle&lt;/del&gt;, which matches an entry if each of the given arguments is found in either the entry&#39;s contents or its outline path. This provides very intuitive results, mimicing the behavior of [[https://github.com/alphapapa/org-rifle][=org-rifle=]]. In fact, the results are so useful that it&#39;s now the default predicate for plain-string query tokens. (It is also aliased to &lt;del&gt;smart&lt;/del&gt;, since it&#39;s so &quot;smart,&quot; and not all users have used =org-rifle=.)&lt;/li&gt; 
 &lt;li&gt;Option &lt;del&gt;org-ql-default-predicate&lt;/del&gt;, applied to plain-string query tokens (before, the &lt;del&gt;regexp&lt;/del&gt; predicate was always used, but now it may be customized).&lt;/li&gt; 
 &lt;li&gt;Alias &lt;del&gt;c&lt;/del&gt; for predicate &lt;del&gt;category&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;property&lt;/del&gt; now accepts the argument &lt;del&gt;:inherit&lt;/del&gt; to match entries with property inheritance, and when unspecified, the option &lt;del&gt;org-use-property-inheritance&lt;/del&gt; controls whether inheritance is used.&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;blocked&lt;/del&gt;. (Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Give more useful error message for invalid queries.&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;src&lt;/del&gt; now matches case-insensitively.&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-sparse-tree&lt;/del&gt; accepts both string and sexp queries. (Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicate &lt;del&gt;link&lt;/del&gt; matches links whose descriptions contain escaped brackets (changed in Org 9.3). (Thanks to [[https://github.com/exot][Daniel Borchmann]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;src&lt;/del&gt;&#39;s matching of begin/end block lines, normalization of arguments, and handling in non-sexp queries. (Thanks to [[https://github.com/akirak][Akira Komamura]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;src&lt;/del&gt;&#39;s behavior with various arguments.&lt;/li&gt; 
 &lt;li&gt;Various compilation warnings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Certain query predicates, when called multiple times in an &lt;del&gt;and&lt;/del&gt; sub-expression, are optimized to a single call.&lt;/li&gt; 
 &lt;li&gt;Use &lt;del&gt;buffer-chars-modified-tick&lt;/del&gt; instead of &lt;del&gt;buffer-modified-tick&lt;/del&gt;. (Thanks to [[https://github.com/yantar92][Ihor Radchenko]].)&lt;/li&gt; 
 &lt;li&gt;Implemented tests for &lt;del&gt;src&lt;/del&gt; predicate.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Credits&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thanks to [[https://github.com/chasecaleb][Caleb Chase]] for help with [[https://github.com/alphapapa/org-ql/pull/285][#285]], fixed in [[https://github.com/alphapapa/org-ql/commit/91908186fcca4b5fd2e9d26da5bc0375c2b41acf][9190818]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.6.3&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Non-sexp query parsing with updated version 1.0.1 of the &lt;del&gt;peg&lt;/del&gt; package. (Fixes [[https://github.com/alphapapa/org-ql/issues/314][#314]], [[https://github.com/alphapapa/org-ql/issues/316][#316]]. Thanks to [[https://github.com/akirak][Akira Komamura]] and [[https://github.com/joonro][Joon Ro]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Require library &lt;del&gt;org-duration&lt;/del&gt; (apparently necessary in newer Org versions).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.6.2&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;link&lt;/del&gt; predicate when used in an &lt;del&gt;or&lt;/del&gt;&#39;ed query. ([[https://github.com/alphapapa/org-ql/issues/279][#279]]. Thanks to [[https://github.com/telenieko][Marc Fargas]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.6.1&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In dynamic blocks, links to headings with statistics cookies were broken. (Fixes [[https://github.com/alphapapa/org-ql/issues/248][#248]]. Thanks to [[https://github.com/maikol-solis][Maikol Solis]] and [[https://github.com/yantar92][Ihor Radchenko]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compatibility with new macro names in Transient. ([[https://github.com/alphapapa/org-ql/pull/269][#269]]. Thanks to [[https://github.com/tarsius][Jonas Bernoulli]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.6&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Macro =org-ql-defpred=, used to define search predicates. (See [[file:examples/defpred.org][tutorial]].)&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;effort&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;heading-regexp&lt;/del&gt;, which matches regular expressions against heading text (alias: &lt;del&gt;h*&lt;/del&gt;).&lt;/li&gt; 
 &lt;li&gt;Timestamp-related predicates now accept an optional &lt;del&gt;:with-time&lt;/del&gt; argument, which allows matching timestamps with or without times (i.e. HH:MM).&lt;/li&gt; 
 &lt;li&gt;Sorting methods: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;reverse&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;closed&lt;/del&gt; (Thanks to [[https://github.com/yejianye][Ryan Ye]].)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Dynamic block column &lt;del&gt;closed&lt;/del&gt;. (Thanks to [[https://github.com/yejianye][Ryan Ye]].)&lt;/li&gt; 
 &lt;li&gt;Abbreviate filenames in bookmarks. (Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The order in which sorting functions is applied has been reversed. For example, &lt;del&gt;:sort &#39;(todo priority date)&lt;/del&gt; now does what &lt;del&gt;:sort &#39;(date priority todo)&lt;/del&gt; did in earlier versions. (This change is made to enable the new &lt;del&gt;reverse&lt;/del&gt; sorting method.) Users who have customized =org-ql-views= will need to update the stored views&#39; sorting methods to preserve the desired sort order.&lt;/li&gt; 
 &lt;li&gt;Helm support (including the command =helm-org-ql=) has been moved to a separate package, =helm-org-ql=.&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;heading&lt;/del&gt; now matches plain strings instead of regular expressions.&lt;/li&gt; 
 &lt;li&gt;Update =dash= dependency, and remove dependency on obsolete =dash-functional=. (Fixes [[https://github.com/alphapapa/org-ql/issues/179][#179]], [[https://github.com/alphapapa/org-ql/issues/209][#209]]. Thanks to [[https://github.com/landakram][Mark Hudnall]], [[https://github.com/akirak][Akira Komamura]], [[https://github.com/natask][Nathanael kinfe]], [[https://github.com/benthamite][Pablo Stafforini]], [[https://github.com/jmay][Jason May]], and [[https://github.com/basil-conto][Basil L. Contovounesios]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Removed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Obsolete macro &lt;del&gt;org-ql&lt;/del&gt; (obsolete since 0.5, replaced by functions &lt;del&gt;org-ql-select&lt;/del&gt; and &lt;del&gt;org-ql-query&lt;/del&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Timestamp-related predicates called with relative-date arguments did not properly invalidate the query cache. (Fixes [[https://github.com/alphapapa/org-ql/issues/223][#223]]. Thanks to [[https://github.com/yantar92][Ihor Radchenko]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicates are now defined more cleanly with a macro (=org-ql-defpred=) that consolidates functionality related to each predicate. This will also allow users to more easily define custom predicates.&lt;/li&gt; 
 &lt;li&gt;Version 1.0 of library &lt;del&gt;peg&lt;/del&gt; is now required.&lt;/li&gt; 
 &lt;li&gt;Improvements to how arguments to timestamp-related predicates are processed.&lt;/li&gt; 
 &lt;li&gt;Predicate normalizers are now applied repeatedly until a query is fully normalized. (Normalizers should be written with this in mind to avoid infinite loops.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.5.2&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicate &lt;del&gt;link&lt;/del&gt;&#39;s &lt;del&gt;:target&lt;/del&gt; and &lt;del&gt;:regexp-p&lt;/del&gt; arguments. ([[https://github.com/alphapapa/org-ql/pull/220][#220]]. Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.5.1&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Custom sorting functions could corrupt the cache, causing items to disappear after refreshing an =org-ql-search= buffer. ([[https://github.com/alphapapa/org-ql/issues/186][#186]], [[https://github.com/alphapapa/org-ql/issues/187][#187]]. Thanks to [[https://github.com/natask][Nathanael kinfe]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.5&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;View dispatcher using =transient.el= (like Magit), bound to =v= in search/view buffers.&lt;/li&gt; 
 &lt;li&gt;Predicate =link=, which matches descriptions and targets in Org links.&lt;/li&gt; 
 &lt;li&gt;Predicate &lt;del&gt;tags-regexp&lt;/del&gt; (alias: &lt;del&gt;tags*&lt;/del&gt;), which matches regexps against entry tags (e.g, helpful when a tag might end in &quot;s&quot;).&lt;/li&gt; 
 &lt;li&gt;Emacs bookmark support: Org QL View buffers can be bookmarked with, e.g. =C-x r m= and shown with, e.g. =C-x r b=. (This also enables view restoration with [[https://github.com/alphapapa/burly.el][Burly]].)&lt;/li&gt; 
 &lt;li&gt;Dynamic block support.&lt;/li&gt; 
 &lt;li&gt;Org link support (storing and opening links to Org QL View searches).&lt;/li&gt; 
 &lt;li&gt;Mascot.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Binding to refresh search/view buffers changed to =r=.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When formatting entries for Org QL View buffers, use internal function for retrieving heading tags. This improves speed by using our cache, and it removes the need for a compatibility alias for Org versions before 9.3.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Deprecated&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Macro =org-ql= is marked obsolete. It will be removed in v0.7. Functions =org-ql-select= and =org-ql-query= should be used instead. (The macro serves only to confuse with regard to quoting arguments.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Acknowledgments&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/tpeacock19][tpeacock19]] for extensive help testing new features in this version.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.9&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Agenda restriction in =org-ql-block=. (Fixes [[https://github.com/alphapapa/org-ql/issues/84][#84]]. Thanks to [[https://github.com/yantar92][Ihor Radchenko]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.8&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Multiple sorters not preserved when refreshing views. (Fixes [[https://github.com/alphapapa/org-ql/issues/136][#136]], [[https://github.com/alphapapa/org-ql/pull/137][#137]]. Thanks to [[https://github.com/natrys][Imran Khan]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.7&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Give a useful error if =org-ql-search-directories-files= is called without a directories argument and =org-directory= doesn&#39;t exist. (Fixes [[https://github.com/alphapapa/org-ql/issues/139][#139]]. Thanks to [[https://github.com/matthuszagh][Matt Huszagh]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.6&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compatibility with newer versions of the =peg= library, which removed a macro used by this package. (Fixes [[https://github.com/alphapapa/org-ql/issues/75][#75]]. Thanks to [[https://github.com/novoid][Karl Voit]] and [[https://github.com/karlicoss][@karlicoss]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.5&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Non-case-folding predicates like &lt;del&gt;(todo)&lt;/del&gt; unnecessarily disabled case-folding for other predicates. ([[https://github.com/alphapapa/org-ql/issues/114][Issue #114]]. Thanks to [[https://github.com/bitclick][@bitclick]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.4&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compatibility with Org Agenda remote editing commands (some of which were broken by 0.4.3). (Fixes [[https://github.com/alphapapa/org-ql/issues/102][#102]]. Thanks to [[https://github.com/AloisJanicek][Alois Janíček]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.3&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When =org-ql-view-refresh= is called, ensure the buffer is an Org QL View buffer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.2&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Items&#39; to-do keywords were not shown in views.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4.1&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=level= predicate used with arguments in plain queries. (Thanks to [[https://github.com/akirak][Akira Komamura]] for reporting.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.4&lt;/p&gt; 
&lt;p&gt;/Note:/ The next release, 0.5, may include changes which will require minor updates to written queries (e.g. a few predicates may be renamed). Users who wish to avoid those changes happening unexpectedly in their configs should avoid upgrading =org-ql= beyond 0.4 automatically, as they will be pushed to the =master= branch when ready.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Commands&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;helm-org-ql-views&lt;/del&gt;, which shows one of &lt;del&gt;org-ql-views&lt;/del&gt; selected with Helm.&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;org-ql-search&lt;/del&gt; can search files in &lt;del&gt;org-directory&lt;/del&gt;; customization options are available in the &lt;del&gt;org-ql-search&lt;/del&gt; group.&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;org-ql-view-refresh&lt;/del&gt; can be called with a prefix argument to adjust search parameters.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Queries&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Negation of terms in plain queries using &lt;del&gt;!&lt;/del&gt;. For example, &lt;del&gt;tags:space !moon&lt;/del&gt; to exclude entries which contain &lt;del&gt;moon&lt;/del&gt;.&lt;/li&gt; 
   &lt;li&gt;Predicates =outline-path= (alias =olp=) and =outline-path-segment= (alias =olps=).&lt;/li&gt; 
   &lt;li&gt;Predicate &lt;del&gt;src&lt;/del&gt;, which matches Org Babel source blocks.&lt;/li&gt; 
   &lt;li&gt;Predicates =parent= and =ancestors=. (Thanks to [[https://github.com/mm--][Josh Moller-Mara]].)&lt;/li&gt; 
   &lt;li&gt;Alias =h= for =heading= predicate.&lt;/li&gt; 
   &lt;li&gt;Alias =r= for =regexp= predicate. (Thanks to [[https://github.com/tumashu][Feng Shu]].)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Info manual.&lt;/li&gt; 
 &lt;li&gt;Function &lt;del&gt;helm-org-ql-source&lt;/del&gt;, which returns a Helm source that searches given buffers/files with &lt;del&gt;helm-org-ql&lt;/del&gt;. It can be used for custom Helm commands that search certain files.&lt;/li&gt; 
 &lt;li&gt;Display a message when views are refreshed. (Thanks to [[https://github.com/xeijin][xeijin]].)&lt;/li&gt; 
 &lt;li&gt;Respect Org Agenda restriction in =org-ql-block=. (Thanks to [[https://github.com/yantar92][Ihor Radchenko]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Option =org-ql-view-sidebar-sort-views=.&lt;/li&gt; 
 &lt;li&gt;Mouseover =help-echo= text for =org-ql-views= default view names.&lt;/li&gt; 
 &lt;li&gt;&quot;Dangling tasks&quot; default view in =org-ql-views=. (Users who have modified =org-ql-views= from the default will not see the new view unless they copy it into their config.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Some default =org-ql-view= views (users who have modified =org-ql-views= from the default will not see the new views unless they copy them into their config): 
  &lt;ul&gt; 
   &lt;li&gt;Rename some views.&lt;/li&gt; 
   &lt;li&gt;&quot;Stuck projects&quot; view (now uses =descendants= instead of =children=, which is more useful.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Inherit file tags when =org-tag-inheritance= is enabled. (Fixes [[https://github.com/alphapapa/org-ql/issues/55][#55]]. Thanks to [[https://github.com/mskorzhinskiy][Mikhail Skorzhinskiy]].)&lt;/li&gt; 
 &lt;li&gt;Call =helm-make-source= directly instead of using =helm-build-sync-source= macro. (Fixes [[https://github.com/alphapapa/org-ql/issues/60][#60]]. Thanks to [[https://github.com/matthuszagh][Matt Huszagh]] for reporting.)&lt;/li&gt; 
 &lt;li&gt;Search/view buffers now always end with a newline, which prevents side-scrolling of the window when calling =end-of-buffer=.&lt;/li&gt; 
 &lt;li&gt;Face for done to-do keywords in =org-ql-view= buffers. (Thanks to [[https://github.com/dsdshcym][Yiming Chen]].)&lt;/li&gt; 
 &lt;li&gt;Make view buffers read-only. (Fixes [[https://github.com/alphapapa/org-ql/issues/72][#72]]. Thanks to [[https://github.com/xeijin][xeijin]].)&lt;/li&gt; 
 &lt;li&gt;Sorting with single sorter specified as an atom. (Thanks to [[https://github.com/legalnonsense][Jeff Filipovits]].)&lt;/li&gt; 
 &lt;li&gt;Autoload for =org-ql-block= agenda block. (Fixes [[https://github.com/alphapapa/org-ql/issues/53][#53]]. Thanks to reports from [[https://github.com/gcantieni][Gus Cantieni]], [[https://github.com/novoid][Karl Voit]], [[https://github.com/rieje][rieje]], and [[https://github.com/jakejx][Jake | Junxuan]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Added generic node data cache to speed up recursive, tree-based queries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.3.2&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In =org-ql-search=, accept symbol as &lt;del&gt;:super-groups&lt;/del&gt; argument.&lt;/li&gt; 
 &lt;li&gt;In the =This week= and =Next week= default =org-ql-views= views, set timestamps for beginning-of-week to 00:00:00 and end-of-week to 23:59:59.&lt;/li&gt; 
 &lt;li&gt;Plain quoted-phrases in non-sexp queries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.3.1&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compatibility with Org 9.2. Thanks to [[https://github.com/leungbk][Brian Leung]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.3&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Alternative, non-sexp query syntax for commands =org-ql-search= and =helm-org-ql=. See [[#non-sexp-query-syntax][documentation]].&lt;/li&gt; 
 &lt;li&gt;Command =helm-org-ql=.&lt;/li&gt; 
 &lt;li&gt;Command =org-ql-sparse-tree=, like =org-sparse-tree= for =org-ql= queries. (Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; 
 &lt;li&gt;Command =org-ql-view-sidebar=.&lt;/li&gt; 
 &lt;li&gt;Per-buffer, per-heading tag caching, which increases the speed of tags-related queries by 6-7x.&lt;/li&gt; 
 &lt;li&gt;More tags-related predicates and aliases: 
  &lt;ul&gt; 
   &lt;li&gt;For inherited tags: =tags-inherited=, =inherited-tags=, =tags-i=, =itags=.&lt;/li&gt; 
   &lt;li&gt;For heading-local tags: =tags-local=, =local-tags=, =tags-l=, =ltags=.&lt;/li&gt; 
   &lt;li&gt;=tags-all=, =tags&amp;amp;=: Matches all given tags using boolean =AND= (rather than boolean =OR=, which the =tags= predicate uses).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Variable =org-ql-block-header=, which overrides the default header in =org-ql-block= agenda blocks.&lt;/li&gt; 
 &lt;li&gt;Predicate =(path)=.&lt;/li&gt; 
 &lt;li&gt;Option =org-ql-views= may now be customized in a guided, structured way with the customization UI (e.g. =M-x customize-option RET org-ql-views RET=, or press =c= in the =org-ql-view-sidebar= buffer).&lt;/li&gt; 
 &lt;li&gt;Enable more Org Agenda commands in =org-ql-view= buffers (e.g. setting deadlines and scheduling). (Fixes [[https://github.com/alphapapa/org-ql/issues/35][#35]]. Thanks to [[https://github.com/mz-pdm][Milan Zamazal]] and [[https://github.com/mskorzhinskiy][Mikhail Skorzhinskii]].)&lt;/li&gt; 
 &lt;li&gt;Function =org-ql-select=&#39;s =buffers-files= argument can be a function which returns a list of buffers and/or files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicate =heading= now accepts multiple regexps, which are matched with boolean =AND=.&lt;/li&gt; 
 &lt;li&gt;Predicate =regexp= now matches its regexp arguments with boolean =AND=.&lt;/li&gt; 
 &lt;li&gt;Package =org-super-agenda= is now a dependency. This removes the need for awkward code to handle the case where it&#39;s not installed, and makes grouping features always available. Of course, the global minor mode =org-super-agenda-mode= is not activated by =org-ql=, so no behavior is changed in Org Agenda or =org-ql=; it only means that commands like =org-ql-search= will always provide grouping when called with the appropriate arguments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Removed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Macro =org-ql-agenda=. Instead, use function =org-ql-search=. See also command =org-ql-view=, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Predicate =heading= now matches only against heading text, i.e. not including tags at the end of the line, to-do keyword, etc.&lt;/li&gt; 
 &lt;li&gt;Predicate =todo= now matches case-sensitively, avoiding non-todo-keyword matches (e.g. a heading which begins =Waiting on= will no longer match for a todo keyword =WAITING=).&lt;/li&gt; 
 &lt;li&gt;Interactive completion in =org-ql-search=.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Refactored code from file =org-ql-agenda.el= into files =org-ql-search.el= and =org-ql-view.el=. Function and variable names have been changed accordingly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.2.3&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Priority queries could fail to match headings whose to-do keywords had non-alphabetic characters, like =TO-READ=.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.2.2&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=(deadline auto)= selector matched entries whose deadlines had a warning period that had not yet been entered (=org-deadline-warning-days= too soon).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.2.1&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=(descendants)= selector matched against parent heading instead of only descendants.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.2 :PROPERTIES: :ID: 67be09f9-e959-4333-9be2-93ad8f458fbe :END:&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-query&lt;/del&gt;, like &lt;del&gt;org-ql-select&lt;/del&gt; but with arguments named more like a SQL query.&lt;/li&gt; 
 &lt;li&gt;Bare strings like &lt;del&gt;&quot;string&quot;&lt;/del&gt; can be used in queries, which are converted to &lt;del&gt;(regexp &quot;string&quot;)&lt;/del&gt; automatically.&lt;/li&gt; 
 &lt;li&gt;Selector &lt;del&gt;(regexp)&lt;/del&gt; accepts multiple regexps to test.&lt;/li&gt; 
 &lt;li&gt;Macro &lt;del&gt;org-ql&lt;/del&gt; and functions &lt;del&gt;org-ql-query&lt;/del&gt; and &lt;del&gt;org-ql-select&lt;/del&gt; now also accept a comparator function in their &lt;del&gt;:sort&lt;/del&gt; argument.&lt;/li&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-block&lt;/del&gt;, which works as an Org Agenda series/composite/block command, usable in custom agenda commands defined in variable &lt;del&gt;org-agenda-custom-commands&lt;/del&gt;. (Inspired by [[https://github.com/pestctrl/emacs-config/blob/84c557982a860e86d6f67976a82ea776a7bd2c7a/config-org-new.org#my-own-agenda-renderer][Benson Chu&#39;s config]].)&lt;/li&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-agenda--agenda&lt;/del&gt; optionally takes a list of entries as an argument.&lt;/li&gt; 
 &lt;li&gt;Selectors &lt;del&gt;ts-a&lt;/del&gt; and &lt;del&gt;ts-i&lt;/del&gt;, aliases for &lt;del&gt;ts-active&lt;/del&gt; and &lt;del&gt;ts-inactive&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;Selector &lt;del&gt;ts&lt;/del&gt; now accepts a &lt;del&gt;:type&lt;/del&gt; argument.&lt;/li&gt; 
 &lt;li&gt;Face =org-ql-agenda-due-date=.&lt;/li&gt; 
 &lt;li&gt;Selectors &lt;del&gt;(children)&lt;/del&gt; and &lt;del&gt;(descendants)&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-search&lt;/del&gt; and macro &lt;del&gt;org-ql-agenda&lt;/del&gt; accept a &lt;del&gt;:title&lt;/del&gt; argument, which is displayed in the header.&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-search&lt;/del&gt; offers global &lt;del&gt;org-super-agenda-groups&lt;/del&gt; in completion.&lt;/li&gt; 
 &lt;li&gt;Customization group &lt;del&gt;org-ql&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;Command &lt;del&gt;org-ql-view&lt;/del&gt;, which displays views saved to variable &lt;del&gt;org-ql-views&lt;/del&gt;, which can be saved from &lt;del&gt;org-ql-search&lt;/del&gt; buffers with command &lt;del&gt;org-ql-search-save&lt;/del&gt;, which is bound to =C-x C-s= in view buffers.&lt;/li&gt; 
 &lt;li&gt;Variable &lt;del&gt;org-ql-view-map&lt;/del&gt;, active in view buffers displayed by &lt;del&gt;org-ql-search&lt;/del&gt;, &lt;del&gt;org-ql-agenda&lt;/del&gt;, and &lt;del&gt;org-ql-view&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;=random= sort method.&lt;/li&gt; 
 &lt;li&gt;Save position when refreshing search buffers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Function &lt;del&gt;org-ql-query&lt;/del&gt; renamed to &lt;del&gt;org-ql-select&lt;/del&gt;. &lt;del&gt;org-ql-query&lt;/del&gt; now refers to a new function.&lt;/li&gt; 
 &lt;li&gt;Macro &lt;del&gt;org-ql&lt;/del&gt; no longer accepts a &lt;del&gt;:markers&lt;/del&gt; argument. Instead, use argument &lt;del&gt;:action element-with-markers&lt;/del&gt;. See function &lt;del&gt;org-ql-select&lt;/del&gt;, which &lt;del&gt;org-ql&lt;/del&gt; calls.&lt;/li&gt; 
 &lt;li&gt;Selector &lt;del&gt;(todo)&lt;/del&gt; no longer matches &quot;done&quot; keywords when used without arguments (i.e. the ones in variable &lt;del&gt;org-done-keywords&lt;/del&gt;).&lt;/li&gt; 
 &lt;li&gt;Overhauled date/time-based predicates. See documentation for new argument signatures.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Removed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Selector &lt;del&gt;(date)&lt;/del&gt;, replaced by &lt;del&gt;(ts)&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Handle date ranges in date-based selectors. (Thanks to [[https://github.com/codygman][Cody Goodman]], [[https://github.com/swflint][Samuel W. Flint]], and [[https://github.com/vikasrawal][Vikas Rawal]].)&lt;/li&gt; 
 &lt;li&gt;Don&#39;t overwrite bindings in =org-agenda-mode-map=.&lt;/li&gt; 
 &lt;li&gt;Don&#39;t search buffers without headings, and show a message if the user attempts it.&lt;/li&gt; 
 &lt;li&gt;Don&#39;t search hidden/special buffers.&lt;/li&gt; 
 &lt;li&gt;Properly accept arbitrary sort functions in =org-ql-select=, etc. (Fixes [[https://github.com/alphapapa/org-ql/issues/37][#37]]. Thanks to [[https://github.com/mz-pdm][Milan Zamazal]].)&lt;/li&gt; 
 &lt;li&gt;Planning-line-related predicates searched too far into entries.&lt;/li&gt; 
 &lt;li&gt;Add autoloads. (Fixes [[https://github.com/alphapapa/org-ql/pull/36/files#][#36]]. Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Compatibility&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fixes for compatibility with Org 9.2. (Thanks to [[https://github.com/ataias][Ataias Pereira Reis]] and [[https://github.com/dakra][Daniel Kraus]].)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Optimizations for some query selectors, e.g. =regexp= and =todo=. These can provide a significant improvement for some queries. See benchmarks in [[file:notes.org][notes.org]].&lt;/li&gt; 
 &lt;li&gt;Library [[https://github.com/alphapapa/ts.el][ts]] is now used for parsing and comparing timestamps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** 0.1&lt;/p&gt; 
&lt;p&gt;First tagged release.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Bug reports, feature requests, and suggestions are welcome. For patches, see below.&lt;/p&gt; 
&lt;p&gt;** Copyright assignment&lt;/p&gt; 
&lt;p&gt;While Org QL is currently distributed in MELPA, it&#39;s [[https://github.com/alphapapa/org-ql/issues/409][intended]] to merge Org QL into Org mode. When that happens, it will become a part of Emacs and Org, and therefore cumulative contributions of more than 15 lines of code will require that the author assign copyright of such contributions to the FSF. Authors who are interested in doing so may contact [[mailto:&lt;a href=&quot;mailto:assign@gnu.org&quot;&gt;assign@gnu.org&lt;/a&gt;][&lt;a href=&quot;mailto:assign@gnu.org&quot;&gt;assign@gnu.org&lt;/a&gt;]] to request the appropriate form.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Notes :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Comparison with Org Agenda searches&lt;/p&gt; 
&lt;p&gt;Of course, queries like these can already be written with Org Agenda searches, but the syntax can be complex. For example, this query would be difficult to write in a standard Org Agenda search, because it matches against a to-do keyword /and/ a plain-text search. As described in the [[https://orgmode.org/worg/org-tutorials/advanced-searching.html#combining-metadata-and-full-text-queries][advanced searching tutorial]], it would require using &lt;del&gt;org-search-view&lt;/del&gt; with a query with specific regular expression syntax, like this:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_EXAMPLE +lisp +{^*+\s-+TO-READ\s-} #+END_EXAMPLE&lt;/p&gt; 
&lt;p&gt;But with =org-ql-search=, you would write a query like =lisp todo:TO-READ=, or in Lisp syntax, &lt;del&gt;(and &quot;lisp&quot; (todo &quot;TO-READ&quot;))&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;** org-sidebar&lt;/p&gt; 
&lt;p&gt;This package is used by [[https://github.com/alphapapa/org-sidebar][org-sidebar]], which presents a customizable agenda-like view in a sidebar window.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;License :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;GPLv3&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;COMMENT Code :noexport: :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;The COMMENT keyword prevents GitHub&#39;s renderer from showing this entry.&lt;/h1&gt; 
&lt;p&gt;Code used to update this document.&lt;/p&gt; 
&lt;p&gt;** Predicates&lt;/p&gt; 
&lt;p&gt;Generates the predicate subtree.&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC elisp :results silent :exports code (defun org-ql--readme-update-predicates () &quot;Update predicate subtree in current document.&quot; (interactive) (org-ql--readme-replace-node &#39;(&quot;Usage&quot; &quot;Queries&quot; &quot;Predicates&quot;) (org-ql--readme-predicate-list)))&lt;/p&gt; 
&lt;p&gt;(defun org-ql--readme-replace-node (outline-path string) &quot;Replace contents of node at OUTLINE-PATH with STRING.&quot; (org-with-wide-buffer (-let* ((subtree-marker (org-find-olp outline-path t)) ((_headline element) (progn (goto-char subtree-marker) (org-element-headline-parser (point-max)))) ((&amp;amp;plist :contents-begin beg :contents-end end) element)) (goto-char beg) (delete-region (point) (1- end)) (insert string &quot;\n&quot;))))&lt;/p&gt; 
&lt;p&gt;(defun org-ql--readme-predicate-list () &quot;Return an Org list string documenting predicates.&quot; (concat (unpackaged/docstring-to-org &quot;Arguments are listed next to predicate names, where applicable.&lt;/p&gt; 
&lt;p&gt;Note that, for convenience, standard numeric comparator function symbols (&lt;code&gt;&amp;lt;&#39;, &lt;/code&gt;=&#39;, etc.) do not need to be quoted when passed as an argument to these predicates. The resemblance to infix notation is coincidental. See examples in documentation.\n\n&quot;) (s-join &quot;\n&quot; (-&amp;gt;&amp;gt; org-ql-predicates (--sort (string&amp;lt; (symbol-name (plist-get it :name)) (symbol-name (plist-get other :name)))) (--map (-let* (((&amp;amp;plist :name name :docstring docstring :fn fn :args args) it) (args (-&amp;gt;&amp;gt; args (--replace-where (listp it) (car it)) (--replace-where (eq &#39;&amp;amp;rest it) &#39;&amp;amp;optional)))) (if docstring (progn (setq docstring (s-replace &quot;\n&quot; &quot; &quot; docstring)) (format &quot;+ &lt;del&gt;%s%s&lt;/del&gt; :: %s&quot; name (if args (format &quot; %s&quot; args) &quot;&quot;) (unpackaged/docstring-to-org docstring))) (when (s-prefix? &quot;org-ql-&quot; (symbol-name name)) (warn &quot;No docstring for: %s&quot; name)) nil))) -non-nil)))) #+END_SRC&lt;/p&gt; 
&lt;p&gt;*** TODO Use async&lt;/p&gt; 
&lt;p&gt;If &lt;del&gt;org-ql&lt;/del&gt; is loaded byte-compiled, the argument lists are not named properly (not sure why, as &lt;del&gt;help-function-arglist&lt;/del&gt; is supposed to handle that). We could run the function in another Emacs process with &lt;del&gt;async&lt;/del&gt; to avoid this.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;COMMENT Export setup :noexport: :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Copied from org-super-agenda&#39;s readme, in which much was borrowed from Org&#39;s =org-manual.org=.&lt;/h1&gt; 
&lt;p&gt;#+OPTIONS: broken-links:t *:t&lt;/p&gt; 
&lt;p&gt;** Info export options&lt;/p&gt; 
&lt;p&gt;#+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: Org QL: (org-ql) #+TEXINFO_DIR_DESC: Query language, search commands, and saved views for Org files&lt;/p&gt; 
&lt;h1&gt;NOTE: We could use these, but that causes a pointless error, &quot;org-compile-file: File &quot;..README.info&quot; wasn&#39;t produced...&quot;, so we just rename the files in the after-save-hook instead.&lt;/h1&gt; 
&lt;h1&gt;#+TEXINFO_FILENAME: org-ql.info&lt;/h1&gt; 
&lt;h1&gt;#+EXPORT_FILE_NAME: org-ql.texi&lt;/h1&gt; 
&lt;p&gt;** File-local variables&lt;/p&gt; 
&lt;h1&gt;NOTE: Setting org-comment-string buffer-locally is a nasty hack to work around GitHub&#39;s org-ruby&#39;s HTML rendering, which does not respect noexport tags. The only way to hide this tree from its output is to use the COMMENT keyword, but that prevents Org from processing the export options declared in it. So since these file-local variables don&#39;t affect org-ruby, wet set org-comment-string to an unused keyword, which prevents Org from deleting this tree from the export buffer, which allows it to find the export options in it. And since org-export does respect the noexport tag, the tree is excluded from the info page.&lt;/h1&gt; 
&lt;h1&gt;Local Variables:&lt;/h1&gt; 
&lt;h1&gt;before-save-hook: org-make-toc&lt;/h1&gt; 
&lt;h1&gt;after-save-hook: (lambda nil (when (and (require &#39;ox-texinfo nil t) (org-texinfo-export-to-info)) (delete-file &quot;README.texi&quot;) (rename-file &quot;README.info&quot; &quot;org-ql.info&quot; t)))&lt;/h1&gt; 
&lt;h1&gt;org-export-initial-scope: buffer&lt;/h1&gt; 
&lt;h1&gt;org-comment-string: &quot;NOTCOMMENT&quot;&lt;/h1&gt; 
&lt;h1&gt;End:&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>pythonic-emacs/anaconda-mode</title>
      <link>https://github.com/pythonic-emacs/anaconda-mode</link>
      <description>&lt;p&gt;Code navigation, documentation lookup and completion for Python.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/pythonic-emacs/anaconda-mode/master/static/logo.png&quot;&gt; Anaconda mode &lt;a href=&quot;https://melpa.org/#/anaconda-mode&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/anaconda-mode-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/anaconda-mode&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/anaconda-mode-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pythonic-emacs/anaconda-mode/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/pythonic-emacs/anaconda-mode/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Code navigation, documentation lookup and completion for Python.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pythonic-emacs/anaconda-mode/master/static/completion.png&quot; alt=&quot;Completion screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pythonic-emacs/anaconda-mode/master/static/reference.png&quot; alt=&quot;Reference search screenshot&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Anaconda mode provides the following features&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;context-sensitive code completion&lt;/li&gt; 
 &lt;li&gt;jump to definitions&lt;/li&gt; 
 &lt;li&gt;find references&lt;/li&gt; 
 &lt;li&gt;view documentation&lt;/li&gt; 
 &lt;li&gt;virtual environment&lt;/li&gt; 
 &lt;li&gt;eldoc mode&lt;/li&gt; 
 &lt;li&gt;all this stuff inside vagrant, docker and remote hosts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Python Versions&lt;/h2&gt; 
&lt;p&gt;2.7, 3.4 - 3.13&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To use this package you need to install &lt;code&gt;setuptools&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;package.el&lt;/h4&gt; 
&lt;p&gt;All you need to do is install the package from &lt;a href=&quot;https://melpa.org/&quot;&gt;Melpa&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x package-install RET anaconda-mode RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Manual&lt;/h4&gt; 
&lt;p&gt;Clone this repository somewhere and add this directory to your &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Prelude&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;anaconda-mode&lt;/code&gt; is included in the &lt;a href=&quot;https://github.com/bbatsov/prelude&quot;&gt;Emacs Prelude&lt;/a&gt; distribution. You can use it as well. Look at the &lt;code&gt;prelude-python&lt;/code&gt; module to see more details.&lt;/p&gt; 
&lt;h4&gt;Spacemacs&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;anaconda-mode&lt;/code&gt; is included in the &lt;a href=&quot;https://github.com/syl20bnr/spacemacs&quot;&gt;Spacemacs&lt;/a&gt; distribution. You can use it as well. Look at the &lt;a href=&quot;https://develop.spacemacs.org/layers/+lang/python/README.html&quot;&gt;python&lt;/a&gt; language layer to see more details.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;You can automatically enable &lt;code&gt;anaconda-mode&lt;/code&gt; in all python buffers with following code in your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-hook &#39;python-mode-hook &#39;anaconda-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;ElDoc&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;anaconda-eldoc-mode&lt;/code&gt; provide document function to &lt;code&gt;eldoc-mode&lt;/code&gt; so when your point is between the parenthesis of a function call, its parameters are shown in the echo area. All You need is to enable &lt;code&gt;anaconda-eldoc-mode&lt;/code&gt; in addition to the previous setup.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-hook &#39;python-mode-hook &#39;anaconda-eldoc-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To start a completion press &lt;code&gt;C-M-i&lt;/code&gt;. This is the standard emacs binding for &lt;code&gt;complete-at-point&lt;/code&gt; function. You can use &lt;a href=&quot;http://company-mode.github.io/&quot;&gt;company-mode&lt;/a&gt; with &lt;a href=&quot;https://github.com/proofit404/company-anaconda&quot;&gt;company-anaconda&lt;/a&gt; backend to get more intelligent UI.&lt;/p&gt; 
&lt;h4&gt;Interactive commands&lt;/h4&gt; 
&lt;p&gt;Here is a list of interactive commands available with anaconda-mode&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Keybinding&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C-M-i&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-complete&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;M-.&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-definitions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C-x 4 .&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-definitions-other-window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C-x 5 .&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-definitions-other-frame&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;M-=&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-assignments&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C-x 4 =&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-assignments-other-window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C-x 5 =&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-assignments-other-frame&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;M-r&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-references&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C-x 4 r&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-references-other-window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C-x 5 r&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-find-references-other-frame&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;M-,&lt;/td&gt; 
   &lt;td&gt;xref-pop-marker-stack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;M-?&lt;/td&gt; 
   &lt;td&gt;anaconda-mode-show-doc&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;If multiple candidates are found for definitions, assignments or usages, you&#39;ll see an advanced anaconda navigator buffer.&lt;/p&gt; 
&lt;h4&gt;PYTHONPATH&lt;/h4&gt; 
&lt;p&gt;You can add your project to the Emacs &lt;code&gt;PYTHONPATH&lt;/code&gt;. If you store project dependencies somewhere on your machine, you can add them as well.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-to-list &#39;python-shell-extra-pythonpaths &quot;/path/to/the/project&quot;)
(add-to-list &#39;python-shell-extra-pythonpaths &quot;/path/to/the/dependency&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Virtual environment&lt;/h4&gt; 
&lt;p&gt;Use a virtual environment to isolate your project dependencies from others on the system. You can additionally install your project in an editable mode in the virtual environment. This will improve search functionality. Then activate this virtual environment inside Emacs.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x pythonic-activate RET /path/to/virtualenv RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also you can use &lt;a href=&quot;https://github.com/proofit404/pyenv-mode&quot;&gt;pyenv-mode&lt;/a&gt; or similar package to hold virtual environment in actual state.&lt;/p&gt; 
&lt;p&gt;Each action above applies to &lt;code&gt;anaconda-mode&lt;/code&gt; immediately. The next &lt;code&gt;anaconda-mode&lt;/code&gt; command you call will use this environment for search completion candidates.&lt;/p&gt; 
&lt;h4&gt;Tramp&lt;/h4&gt; 
&lt;p&gt;It&#39;s possible to use anaconda-mode on a remote server when you connect to it using tramp. Anaconda-mode can search for completion candidates and all other stuff on remote server while you&#39;re running Emacs locally. Just open an interesting remote file.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;C-x C-f /ssh:remote_host:project/__init__.py RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After tramp successfully connects and you see actual buffer content, completion and definitions search should work as usual. You can even use virtual environment from remote host.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x pythonic-activate RET /ssh:remote_host:/home/user/venv RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or specify another remote interpreter&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(setq python-shell-interpreter &quot;/usr/bin/python&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is important to remember that &lt;code&gt;remote_host&lt;/code&gt; must be a real host name or an IP address. SSH aliases not allowed to be used with anaconda-mode. All kinds of searching from inside the virtual environment are available from any buffer. However searching inside your project is available only if you open it on the same machine as the interpreter.&lt;/p&gt; 
&lt;h4&gt;Vagrant&lt;/h4&gt; 
&lt;p&gt;You can get all the intelligent features of anaconda-mode with virtual environments deployed on your vagrant box. Fire up the vagrant machine as usual. The easiest way to handle authentication is to copy your public ssh key to the vagrant box.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ssh-copy-id vagrant@localhost -p 2222
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now open your project inside the vagrant box.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;C-x C-f /ssh:vagrant@localhost#2222:/vagrant/polls/views.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally you can activate your project environment, if installed inside vagrant.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x pythonic-activate RET /ssh:vagrant@localhost#2222:/vagrant/polls/venv RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Docker&lt;/h4&gt; 
&lt;p&gt;You can use definition, reference and auto-completion search for dependencies installed in the Docker container. Let suppose your project layout is the same as in &lt;a href=&quot;https://docs.docker.com/compose/django/&quot;&gt;Compose and Django&lt;/a&gt; tutorial. To use &lt;code&gt;anaconda-mode&lt;/code&gt; together with Docker you need to install two additional external dependencies. First of all, you need to install &lt;a href=&quot;https://github.com/emacs-pe/docker-tramp.el&quot;&gt;docker-tramp&lt;/a&gt; Emacs package. The second step is to install Unix &lt;code&gt;socat&lt;/code&gt; utility. You should have your containers up and running&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker-compose up web
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After that, you can set Python interpreter to one installed inside container&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(setq python-shell-interpreter &quot;/usr/local/bin/python&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can open some file inside the project running inside a container&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;C-x C-f /docker:root@django_web_1:/code/manage.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you try to find the definition of the Django module imported in this buffer, &lt;code&gt;anaconda-mode&lt;/code&gt; will jump to the package installed inside this Docker container.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;If you see constant response reading error, try to change localhost address from default &lt;code&gt;127.0.0.1&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt;. This is likely to fix problems on Mac OS.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(setq anaconda-mode-localhost-address &quot;localhost&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Bug Reports&lt;/h2&gt; 
&lt;p&gt;Please attach &lt;code&gt;*anaconda-mode*&lt;/code&gt;, &lt;code&gt;*anaconda-response*&lt;/code&gt; and &lt;code&gt;*anaconda-socat*&lt;/code&gt; buffer content to every created issue.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dmitry Gutov &lt;strong&gt;@dgutov&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Bo Lin &lt;strong&gt;@sadboy&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Vasilij Schneidermann &lt;strong&gt;@wasamasa&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Fredrik Bergroth &lt;strong&gt;@fbergroth&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Fabio Corneti &lt;strong&gt;@fabiocorneti&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Tom Davis &lt;strong&gt;@tdavis&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Sviridov Alexander &lt;strong&gt;@sviridov&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Mario Rodas &lt;strong&gt;@marsam&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>magnars/multiple-cursors.el</title>
      <link>https://github.com/magnars/multiple-cursors.el</link>
      <description>&lt;p&gt;Multiple cursors for emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/magnars/multiple-cursors.el/actions&quot;&gt;&lt;img src=&quot;https://github.com/magnars/multiple-cursors.el/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/multiple-cursors&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/multiple-cursors-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/multiple-cursors&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/multiple-cursors-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.nongnu.org/nongnu/multiple-cursors.html&quot;&gt;&lt;img src=&quot;https://elpa.nongnu.org/nongnu/multiple-cursors.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;multiple-cursors.el&lt;/h1&gt; 
&lt;p&gt;Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are kinks. Don&#39;t be afraid though, I&#39;ve been using it since 2011 with great success and much merriment.&lt;/p&gt; 
&lt;h2&gt;Maintenance warning&lt;/h2&gt; 
&lt;p&gt;I use this package every day, and have been doing so for years. It just works. At least, it works for all my use cases. And if it breaks somehow, I fix it.&lt;/p&gt; 
&lt;p&gt;However, it has become painfully clear to me that I don&#39;t have time to fix problems I don&#39;t have. It&#39;s been years since I could keep pace with the issues and pull requests. Whenever I try, I keep getting feedback that my fix isn&#39;t good enough by some standard I don&#39;t particularly care about.&lt;/p&gt; 
&lt;p&gt;So, I have closed the issue tracker and the pull requests. I hope you can happily use this package, just like I do. If it doesn&#39;t work for you, then I&#39;m sorry. Thankfully Emacs is infinitely malleable, you can probably fix it yourself.&lt;/p&gt; 
&lt;p&gt;TLDR: &lt;em&gt;I am still maintaining this package&lt;/em&gt;, but I am no longer crowdsourcing a list of issues.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;I highly recommend installing multiple-cursors through &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;It&#39;s available on &lt;a href=&quot;http://melpa.org/&quot;&gt;MELPA&lt;/a&gt;, &lt;a href=&quot;http://stable.melpa.org&quot;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&quot;https://elpa.nongnu.org/nongnu/multiple-cursors.html&quot;&gt;NonGNU ELPA&lt;/a&gt; (enabled by default from Emacs 28 onwards):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x package-install multiple-cursors
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The package depends on the &lt;code&gt;cl-lib&lt;/code&gt; package, so if you do not use &lt;code&gt;package.el&lt;/code&gt; or have a recent Emacs, you would need to install that too: see &lt;a href=&quot;http://elpa.gnu.org/packages/cl-lib.html&quot;&gt;GNU ELPA&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Basic usage&lt;/h2&gt; 
&lt;p&gt;Start out with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(require &#39;multiple-cursors)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you have to set up your keybindings - multiple-cursors doesn&#39;t presume to know how you&#39;d like them laid out. Here are some examples:&lt;/p&gt; 
&lt;p&gt;When you have an active region that spans multiple lines, the following will add a cursor to each line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &quot;C-S-c C-S-c&quot;) &#39;mc/edit-lines)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &quot;C-&amp;gt;&quot;) &#39;mc/mark-next-like-this)
(global-set-key (kbd &quot;C-&amp;lt;&quot;) &#39;mc/mark-previous-like-this)
(global-set-key (kbd &quot;C-c C-&amp;lt;&quot;) &#39;mc/mark-all-like-this)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;First mark the word, then add more cursors.&lt;/p&gt; 
&lt;p&gt;To get out of multiple-cursors-mode, press &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; or &lt;code&gt;C-g&lt;/code&gt;. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use &lt;code&gt;C-j&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Video&lt;/h2&gt; 
&lt;p&gt;You can &lt;a href=&quot;http://emacsrocks.com/e13.html&quot;&gt;watch an intro to multiple-cursors at Emacs Rocks&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Command overview&lt;/h2&gt; 
&lt;h3&gt;Mark one more occurrence&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-next-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor and region at the next part of the buffer forwards that matches the current region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the word at the point.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the symbol at the point.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-next-word-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; but only for whole words.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-next-symbol-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; but only for whole symbols.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-previous-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor and region at the next part of the buffer backwards that matches the current region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-previous-like-this-word&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the word at the point.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-previous-like-this-symbol&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the symbol at the point.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-previous-word-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-previous-like-this&lt;/code&gt; but only for whole words.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-previous-symbol-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-previous-like-this&lt;/code&gt; but only for whole symbols.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-more-like-this-extended&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use arrow keys to quickly mark/skip next/previous occurrences.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/add-cursor-on-click&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bind to a mouse event to add cursors by clicking. See tips-section.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-pop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set a cursor at the current point and move to the next (different) position on the mark stack. This allows for fine grained control over the placement of cursors.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Juggle around with the current cursors&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/unmark-next-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove the cursor furthest down in the buffer.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/unmark-previous-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove the cursor furthest up in the buffer.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/skip-to-next-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove the cursor furthest down, marking the next occurrence down.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/skip-to-previous-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Remove the cursor furthest up, marking the next occurrence up.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Mark many occurrences&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/edit-lines&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds one cursor to each line in the current region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/edit-beginnings-of-lines&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor at the start of each line in the current region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/edit-ends-of-lines&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a cursor at the end of each line in the current region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Marks all parts of the buffer that matches the current region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-words-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-all-like-this&lt;/code&gt; but only for whole words.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-symbols-like-this&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-all-like-this&lt;/code&gt; but only for whole symbols.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-in-region&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Prompts for a string to match in the region, adding cursors to all of them.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Marks all parts of the current defun that matches the current region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-words-like-this-in-defun&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt; but only for whole words.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-symbols-like-this-in-defun&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt; but only for whole symbols.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-all-dwim&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Tries to be smart about marking everything you want. Can be pressed multiple times.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Special&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;set-rectangular-region-anchor&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Think of this one as &lt;code&gt;set-mark&lt;/code&gt; except you&#39;re marking a rectangular region.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/mark-sgml-tag-pair&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Mark the current opening and closing tag.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/insert-numbers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert increasing numbers for each cursor, top to bottom.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/insert-letters&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert increasing letters for each cursor, top to bottom.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/sort-regions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sort the marked regions alphabetically.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/reverse-regions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reverse the order of the marked regions.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/vertical-align&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Aligns all cursors vertically with a given CHARACTER to the one with the highest column number (the rightest). (Might not behave as intended if more than one cursors are on the same line.)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mc/vertical-align-with-space&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Aligns all cursors with whitespace like &lt;code&gt;mc/vertical-align&lt;/code&gt; does.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Tips and tricks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To get out of multiple-cursors-mode, press &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; or &lt;code&gt;C-g&lt;/code&gt;. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use &lt;code&gt;C-j&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;(define-key mc/keymap (kbd &quot;&amp;lt;return&amp;gt;&quot;) nil)&lt;/code&gt; will make &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; insert a newline; multiple-cursors-mode can still be disabled with &lt;code&gt;C-g&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Sometimes you end up with cursors outside of your view. You can scroll the screen to center on each cursor with &lt;code&gt;C-v&lt;/code&gt; and &lt;code&gt;M-v&lt;/code&gt; or you can press &lt;code&gt;C-&#39;&lt;/code&gt; to hide all lines without a cursor, press &lt;code&gt;C-&#39;&lt;/code&gt; again to unhide.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; with no region selected. It will just add a cursor on the next line.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt; or &lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt; with no region selected. It will mark the word or symbol and add a cursor at the next occurrence&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-all-like-this-dwim&lt;/code&gt; on a tagname in html-mode.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Notice that the number of cursors active can be seen in the modeline.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you get out of multiple-cursors-mode and yank - it will yank only from the kill-ring of main cursor. To yank from the kill-rings of every cursor use yank-rectangle, normally found at C-x r y.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can use &lt;code&gt;mc/reverse-regions&lt;/code&gt; with nothing selected and just one cursor. It will then flip the sexp at point and the one below it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When you use &lt;code&gt;mc/edit-lines&lt;/code&gt;, you can give it a positive or negative prefix to change how it behaves on too short lines.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you would like to keep the global bindings clean, and get custom keybindings when the region is active, you can try &lt;a href=&quot;https://github.com/fgallina/region-bindings-mode&quot;&gt;region-bindings-mode&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;There is a special hook that is run when the mode is diabled (which is equivalent to the number of cursors going back to 1): &lt;code&gt;multiple-cursors-mode-disabled-hook&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;BTW, I highly recommend adding &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; to a key binding that&#39;s right next to the key for &lt;code&gt;er/expand-region&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Binding mouse events&lt;/h3&gt; 
&lt;p&gt;To override a mouse event, you will likely have to also unbind the &lt;code&gt;down-mouse&lt;/code&gt; part of the event. Like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(global-unset-key (kbd &quot;M-&amp;lt;down-mouse-1&amp;gt;&quot;))
(global-set-key (kbd &quot;M-&amp;lt;mouse-1&amp;gt;&quot;) &#39;mc/add-cursor-on-click)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can do like me and find an unused, but less convenient, binding:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &quot;C-S-&amp;lt;mouse-1&amp;gt;&quot;) &#39;mc/add-cursor-on-click)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Unknown commands&lt;/h2&gt; 
&lt;p&gt;Multiple-cursors uses two lists of commands to know what to do: the run-once list and the run-for-all list. It comes with a set of defaults, but it would be beyond silly to try and include all the known Emacs commands.&lt;/p&gt; 
&lt;p&gt;So that&#39;s why multiple-cursors occasionally asks what to do about a command. It will then remember your choice by saving it in &lt;code&gt;~/.emacs.d/.mc-lists.el&lt;/code&gt;. You can change the location with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(setq mc/list-file &quot;/my/preferred/file&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NB! Make sure to do so before requiring multiple-cursors.&lt;/p&gt; 
&lt;p&gt;It is possible to set multiple-cursors to &quot;run-for-all&quot; for every command except for those that are listed in &lt;code&gt;mc/cmds-to-run-once&lt;/code&gt;. To enable this set &lt;code&gt;mc/always-run-for-all&lt;/code&gt; to non-nil. Add commands to be run once to &lt;code&gt;mc/cmds-to-run-once&lt;/code&gt; in &quot;.mc-lists.el&quot;.&lt;/p&gt; 
&lt;h2&gt;Known limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;isearch-forward and isearch-backward aren&#39;t supported with multiple cursors. If you want this functionality, you can use &lt;a href=&quot;https://github.com/zk-phi/phi-search&quot;&gt;phi-search&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;All key bindings that refer to lambdas are always run for all cursors. If you need to limit it, you will have to give it a name.&lt;/li&gt; 
 &lt;li&gt;Redo might screw with your cursors. Undo works very well.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;Yes, please do. There&#39;s a suite of tests, so remember to add tests for your specific feature, or I might break it later.&lt;/p&gt; 
&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://github.com/magnars/multiple-cursors.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To fetch the test dependencies, install &lt;a href=&quot;https://github.com/rejeep/cask.el&quot;&gt;cask&lt;/a&gt; if you haven&#39;t already, then:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd /path/to/multiple-cursors
$ cask
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./run-tests.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tkf&quot;&gt;Takafumi Arakaki&lt;/a&gt; has contributed several small improvements&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/segv&quot;&gt;Marco Baringer&lt;/a&gt; contributed looping to &lt;code&gt;mc/cycle&lt;/code&gt; and adding cursors without region for mark-more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gvol&quot;&gt;Ivan Andrus&lt;/a&gt; added showing number of cursors in mode-line, and different options for how to handle short lines in &lt;code&gt;mc/edit-lines&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Fuco1&quot;&gt;Fuco&lt;/a&gt; added the first version of &lt;code&gt;mc/mark-all-like-this-dwim&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/smithzvk&quot;&gt;Zach Kost-Smith&lt;/a&gt; added &lt;code&gt;mc/mark-pop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mathrick&quot;&gt;Maciej Katafiasz&lt;/a&gt; added &lt;code&gt;mc/mark-all-dwim&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lexa&quot;&gt;Aleksey Fedotov&lt;/a&gt; added &lt;code&gt;mc-hide-unmatched-lines-mode&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jtamagnan&quot;&gt;Jules Tamagnan&lt;/a&gt; added &lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt; and &lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ilohmar&quot;&gt;Ingo Lohmar&lt;/a&gt; extended &lt;code&gt;mc/add-cursor-on-click&lt;/code&gt; to toggle cursors.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AndreaOrru&quot;&gt;Andrea Orru&lt;/a&gt; added &lt;code&gt;mc/mark-previous-like-this-word&lt;/code&gt;/&lt;code&gt;-symbol&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thanks!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2012-2016 Magnar Sveen&lt;/p&gt; 
&lt;p&gt;Author: Magnar Sveen &lt;a href=&quot;mailto:magnars@gmail.com&quot;&gt;magnars@gmail.com&lt;/a&gt; Keywords: editing cursors&lt;/p&gt; 
&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&quot;http://www.gnu.org/licenses/&quot;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>copilot-emacs/copilot.el</title>
      <link>https://github.com/copilot-emacs/copilot.el</link>
      <description>&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://jcs-emacs.github.io/jcs-elpa/#/copilot&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/copilot.svg?sanitize=true&quot; alt=&quot;JCS-ELPA&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Copilot.el&lt;/h1&gt; 
&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/demo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This plugin is unofficial, however it makes use of the official &lt;a href=&quot;https://www.npmjs.com/package/@github/copilot-language-server&quot;&gt;@github/copilot-language-server&lt;/a&gt; provided by Microsoft.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; to use this plugin.&lt;/p&gt; 
&lt;p&gt;Current maintainer(s): &lt;a href=&quot;https://github.com/emil-vdw&quot;&gt;@emil-vdw&lt;/a&gt;, &lt;a href=&quot;https://github.com/jcs090218&quot;&gt;@jcs090218&lt;/a&gt;, &lt;a href=&quot;https://github.com/rakotomandimby&quot;&gt;@rakotomandimby&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Retired maintainer: &lt;a href=&quot;https://github.com/zerolfx&quot;&gt;@zerolfx&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ol start=&quot;0&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Ensure your Emacs version is at least 27, the dependency package &lt;code&gt;editorconfig&lt;/code&gt; (&lt;a href=&quot;https://melpa.org/#/editorconfig&quot;&gt;melpa&lt;/a&gt;) and &lt;code&gt;jsonrpc&lt;/code&gt; (&lt;a href=&quot;https://elpa.gnu.org/packages/jsonrpc.html&quot;&gt;elpa&lt;/a&gt;, &amp;gt;= 1.0.14) are both installed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install the copilot server by &lt;code&gt;M-x copilot-install-server&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt; (&lt;code&gt;NotAuthorized&lt;/code&gt; means you don&#39;t have a valid subscription).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Configurations&lt;/h2&gt; 
&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; 
&lt;details&gt; 
 &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(package! copilot
  :recipe (:host github :repo &quot;copilot-emacs/copilot.el&quot; :files (&quot;*.el&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              (&quot;&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion)
              (&quot;TAB&quot; . &#39;copilot-accept-completion)
              (&quot;C-TAB&quot; . &#39;copilot-accept-completion-by-word)
              (&quot;C-&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion-by-word)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; 
 &lt;p&gt;If pressing tab to complete sometimes doesn&#39;t work you might want to bind completion to another key or try:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(after! (evil copilot)
  ;; Define the custom function that either accepts the completion or does the default behavior
  (defun my/copilot-tab-or-default ()
    (interactive)
    (if (and (bound-and-true-p copilot-mode)
             ;; Add any other conditions to check for active copilot suggestions if necessary
             )
        (copilot-accept-completion)
      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.

  ;; Bind the custom function to &amp;lt;tab&amp;gt; in Evil&#39;s insert state
  (evil-define-key &#39;insert &#39;global (kbd &quot;&amp;lt;tab&amp;gt;&quot;) &#39;my/copilot-tab-or-default))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you would love to configure indentation here, this is an example config that may work for you:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              (&quot;&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion)
              (&quot;TAB&quot; . &#39;copilot-accept-completion)
              (&quot;C-TAB&quot; . &#39;copilot-accept-completion-by-word)
              (&quot;C-&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion-by-word)
              (&quot;C-n&quot; . &#39;copilot-next-completion)
              (&quot;C-p&quot; . &#39;copilot-previous-completion))

  :config
  (add-to-list &#39;copilot-indentation-alist &#39;(prog-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(org-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(text-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(closure-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(emacs-lisp-mode 2)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; 
&lt;details&gt; 
 &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; ===================
;; dotspacemacs/layers
;; ===================

;; add or uncomment the auto-completion layer
dotspacemacs-configuration-layers
&#39;(
  ...
  auto-completion
  ...
 )

;; add copilot.el to additional packages
dotspacemacs-additional-packages
 &#39;((copilot :location (recipe
                       :fetcher github
                       :repo &quot;copilot-emacs/copilot.el&quot;
                       :files (&quot;*.el&quot;))))

;; ========================
;; dotspacemacs/user-config
;; ========================

;; accept completion from copilot and fallback to company

(with-eval-after-load &#39;company
  ;; disable inline previews
  (delq &#39;company-preview-if-just-one-frontend company-frontends))

(with-eval-after-load &#39;copilot
  (define-key copilot-completion-map (kbd &quot;&amp;lt;tab&amp;gt;&quot;) &#39;copilot-accept-completion)
  (define-key copilot-completion-map (kbd &quot;TAB&quot;) &#39;copilot-accept-completion)
  (define-key copilot-completion-map (kbd &quot;C-TAB&quot;) &#39;copilot-accept-completion-by-word)
  (define-key copilot-completion-map (kbd &quot;C-&amp;lt;tab&amp;gt;&quot;) &#39;copilot-accept-completion-by-word))

(add-hook &#39;prog-mode-hook &#39;copilot-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;General Configurations&lt;/h3&gt; 
&lt;details&gt; 
 &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; 
 &lt;h5&gt;Option 1: Load via use-package (recommended)&lt;/h5&gt; 
 &lt;h6&gt;Emacs 27-29:&lt;/h6&gt; 
 &lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package copilot
  :straight (:host github :repo &quot;copilot-emacs/copilot.el&quot; :files (&quot;*.el&quot;))
  :ensure t)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;code&gt;quelpa&lt;/code&gt; + &lt;code&gt;quelpa-use-package&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo &quot;copilot-emacs/copilot.el&quot;
                   :branch &quot;main&quot;
                   :files (&quot;*.el&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h6&gt;On Emacs version 30+:&lt;/h6&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package copilot
  :vc (:url &quot;https://github.com/copilot-emacs/copilot.el&quot;
            :rev :newest
            :branch &quot;main&quot;))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Use &lt;code&gt;:map&lt;/code&gt;, &lt;code&gt;:hook&lt;/code&gt;, and &lt;code&gt;:config&lt;/code&gt; to customize &lt;code&gt;copilot.el&lt;/code&gt; via &lt;code&gt;use-package&lt;/code&gt;.&lt;/p&gt; 
 &lt;h5&gt;Option 3: Load manually&lt;/h5&gt; 
 &lt;p&gt;Please make sure you have these dependencies installed (available in ELPA/MELPA):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;f&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;After installing those, clone this repository then insert the below snippet into your config file.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;load-path &quot;/path/to/copilot.el&quot;)
(require &#39;copilot)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;2. Configure completion&lt;/h4&gt; 
 &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; 
 &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; 
 &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; 
 &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; 
 &lt;p&gt;Use tab to accept completions (you may also want to bind &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; to some key):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(define-key copilot-completion-map (kbd &quot;&amp;lt;tab&amp;gt;&quot;) &#39;copilot-accept-completion)
(define-key copilot-completion-map (kbd &quot;TAB&quot;) &#39;copilot-accept-completion)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Programming language detection&lt;/h3&gt; 
&lt;p&gt;Copilot.el detects the programming language of a buffer based on the major-mode name, stripping the &lt;code&gt;-mode&lt;/code&gt; part. Resulting languageId should match table &lt;a href=&quot;https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers&quot;&gt;here&lt;/a&gt;. You can add unusual major-mode mappings to &lt;code&gt;copilot-major-mode-alist&lt;/code&gt;. Without the proper language set suggestions may be of poorer quality.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;copilot-major-mode-alist &#39;(&quot;enh-ruby&quot; . &quot;ruby&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;h4&gt;copilot-diagnose&lt;/h4&gt; 
&lt;p&gt;Check the current status of the plugin. Also you can check logs in the &lt;code&gt;*copilot events*&lt;/code&gt; buffer and stderr output in the &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/p&gt; 
&lt;h4&gt;copilot-login&lt;/h4&gt; 
&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; 
&lt;h4&gt;copilot-mode&lt;/h4&gt; 
&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; 
&lt;h4&gt;copilot-complete&lt;/h4&gt; 
&lt;p&gt;Try to complete at the current point.&lt;/p&gt; 
&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; 
&lt;p&gt;Accept the current completion.&lt;/p&gt; 
&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; 
&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; 
&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; 
&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; 
&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; 
&lt;p&gt;Cycle through the completion list.&lt;/p&gt; 
&lt;h4&gt;copilot-logout&lt;/h4&gt; 
&lt;p&gt;Log out from GitHub.&lt;/p&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h4&gt;copilot-version&lt;/h4&gt; 
&lt;p&gt;The version of the &lt;a href=&quot;https://www.npmjs.com/package/@github/copilot-language-server&quot;&gt;@github/copilot-language-server&lt;/a&gt; to use. If set to &lt;code&gt;nil&lt;/code&gt;, the latest version will be installed.&lt;/p&gt; 
&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; 
&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; 
&lt;h4&gt;copilot-enable-predicates / copilot-disable-predicates&lt;/h4&gt; 
&lt;p&gt;A list of predicate functions with no argument to enable/disable triggering Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;copilot-enable-display-predicates / copilot-disable-display-predicates&lt;/h4&gt; 
&lt;p&gt;A list of predicate functions with no argument to enable/disable showing Copilot&#39;s completions in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;copilot-clear-overlay-ignore-commands&lt;/h4&gt; 
&lt;p&gt;A list of commands that won&#39;t cause the overlay to be cleared.&lt;/p&gt; 
&lt;h4&gt;copilot-network-proxy&lt;/h4&gt; 
&lt;p&gt;Format: &lt;code&gt;&#39;(:host &quot;127.0.0.1&quot; :port 7890 :username: &quot;user&quot; :password: &quot;password&quot;)&lt;/code&gt;, where &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:password&lt;/code&gt; are optional.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq copilot-network-proxy &#39;(:host &quot;127.0.0.1&quot; :port 7890))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Known Issues&lt;/h2&gt; 
&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-overlay.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; 
&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-box.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; 
&lt;h3&gt;Cursor Jump to End of Line When Typing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are using &lt;code&gt;whitespace-mode&lt;/code&gt;, make sure to remove &lt;code&gt;newline-mark&lt;/code&gt; from &lt;code&gt;whitespace-style&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reporting Bugs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure you have restarted your Emacs (and rebuild the plugin if necessary) after updating the plugin.&lt;/li&gt; 
 &lt;li&gt;Please enable event logging by customize &lt;code&gt;copilot-log-max&lt;/code&gt; (to e.g. 1000), then paste related logs in the &lt;code&gt;*copilot events*&lt;/code&gt; and &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/li&gt; 
 &lt;li&gt;If an exception is thrown, please also paste the stack trace (use &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; to enable stack trace).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Cycle through suggestions&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;These projects helped me a lot:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TommyX12/company-tabnine/&quot;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cryptobadger/flight-attendant.el&quot;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@github/copilot-language-server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Do you want chat with Github Copilot?&lt;/h2&gt; 
&lt;p&gt;Just like copilot plugin for intellij or vscode?&lt;/p&gt; 
&lt;p&gt;Please take a look at &lt;a href=&quot;https://github.com/chep/copilot-chat.el&quot;&gt;copilot-chat.el&lt;/a&gt;&lt;/p&gt; 
&lt;!-- Links --&gt;</description>
    </item>
    
    <item>
      <title>auto-complete/popup-el</title>
      <link>https://github.com/auto-complete/popup-el</link>
      <description>&lt;p&gt;Visual Popup Interface Library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License: GPL v3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/popup&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/popup-badge.svg?sanitize=true&quot; alt=&quot;melpa badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/popup&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/popup-badge.svg?sanitize=true&quot; alt=&quot;melpa stable badge&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;popup.el&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/auto-complete/popup-el/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/auto-complete/popup-el/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;popup.el is a visual popup user interface library for Emacs. This provides a basic API and common UI widgets such as popup tooltips and popup menus.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Tooltip&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Popup Menu&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Popup Cascade Menu&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup1.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup2.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup3.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can install &lt;code&gt;popup.el&lt;/code&gt; from &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt; with package.el. popwin is tested under GNU Emacs 24 or later.&lt;/p&gt; 
&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-popup&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Popup Items&lt;/h2&gt; 
&lt;p&gt;Elements of &lt;code&gt;popup-list&lt;/code&gt; have to be popup items. A popup item is substantially a string but it may involve some text-properties. There are two ways to make popup items. One is just using strings. Another is to use the &lt;code&gt;popup-make-item&lt;/code&gt; function, which just returns the string after adding text-properties of its keywords. Effective text-properties are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;value&lt;/code&gt; -- This represents the &lt;strong&gt;real&lt;/strong&gt; value of the item. This will be used when returning the value but not the item (or string) from some synchronous functions such as &lt;code&gt;popup-menu*&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;face&lt;/code&gt; -- The background face of the item. The value of &lt;code&gt;popup-face&lt;/code&gt; will be overridden.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;selection-face&lt;/code&gt; -- The selection face of the item. The value of &lt;code&gt;popup-selection-face&lt;/code&gt; will be overridden.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;document&lt;/code&gt; -- The documentation string or function of the item.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;summary&lt;/code&gt; -- The summary string of the item. This will be shown inline with the item.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; -- The symbol character of the item.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sublist&lt;/code&gt; -- The sublist of the item. This is effective only with &lt;code&gt;popup-cascade-menu&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All of properties can be accessed by &lt;code&gt;popup-item-&amp;lt;property&amp;gt;&lt;/code&gt; utility function.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-item-propertize&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-item-propertize item &amp;amp;rest properties =&amp;gt; item
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Same as &lt;code&gt;propertize&lt;/code&gt; except that this avoids overriding existed value with &lt;code&gt;nil&lt;/code&gt; property.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-make-item&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-make-item name &amp;amp;key value popup-face selection-face sublist
document symbol summary =&amp;gt; item
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The utility function of &lt;code&gt;popup-item-propertize&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Popups&lt;/h2&gt; 
&lt;p&gt;This section describes the basic data structures and operations of popups.&lt;/p&gt; 
&lt;h3&gt;Struct: &lt;code&gt;popup&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Any instance of &lt;code&gt;popup&lt;/code&gt; structure has the following fields (some unimportant fields are not listed):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;point&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;row&lt;/code&gt; -- The line number.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;column&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;width&lt;/code&gt; -- Max width of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;height&lt;/code&gt; -- Max height of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;current-height&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;direction&lt;/code&gt; -- Positive number means forward, negative number means backward.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parent&lt;/code&gt; -- The parent of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;face&lt;/code&gt; -- The background face.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;selection-face&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scroll-bar&lt;/code&gt; -- Non-nil means &lt;code&gt;popup&lt;/code&gt; instance has a scroll bar.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; -- Non-nil means &lt;code&gt;popup&lt;/code&gt; instance has a space for displaying symbols of item.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; -- The current position of &lt;code&gt;list&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scroll-top&lt;/code&gt; -- The offset of scrolling.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;list&lt;/code&gt; -- The contents of &lt;code&gt;popup&lt;/code&gt; instance in a list of items (strings).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;original-list&lt;/code&gt; -- Same as &lt;code&gt;list&lt;/code&gt; except that this is not filtered.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All of these fields can be accessed by &lt;code&gt;popup-&amp;lt;field&amp;gt;&lt;/code&gt; function.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-create&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-create point width height &amp;amp;key min-height max-width around face
selection-face scroll-bar margin-left margin-right symbol parent
parent-offset =&amp;gt; popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a popup instance at &lt;code&gt;POINT&lt;/code&gt; with &lt;code&gt;WIDTH&lt;/code&gt; and &lt;code&gt;HEIGHT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;MIN-HEIGHT&lt;/code&gt; is the minimal height of the popup. The default value is 0.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;MAX-WIDTH&lt;/code&gt; is the maximum width of the popup. The default value is nil (no limit). If a floating point, the value refers to the ratio of the window. If an integer, limit is in characters.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;AROUND&lt;/code&gt; is non-nil, the popup will be displayed around the point but not at the point.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;FACE&lt;/code&gt; is the background face of the popup. The default value is &lt;code&gt;popup-face&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;SELECTION-FACE&lt;/code&gt; is the foreground (selection) face of the popup The default value is &lt;code&gt;popup-face&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;SCROLL-BAR&lt;/code&gt; is non-nil, the popup will have a scroll bar at the right.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;MARGIN-LEFT&lt;/code&gt; is non-nil, the popup will have a margin at the left.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;MARGIN-RIGHT&lt;/code&gt; is non-nil, the popup will have a margin at the right.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;SYMBOL&lt;/code&gt; is a single character which indicates the kind of the item.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;PARENT&lt;/code&gt; is the parent popup instance. If &lt;code&gt;PARENT&lt;/code&gt; is omitted, the popup will be a root instance.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;PARENT-OFFSET&lt;/code&gt; is a row offset from the parent popup.&lt;/p&gt; 
&lt;p&gt;Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq popup (popup-create (point) 10 10))
(popup-set-list popup &#39;(&quot;Foo&quot; &quot;Bar&quot; &quot;Baz&quot;))
(popup-draw popup)
;; do something here
(popup-delete popup)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-delete&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-delete popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Delete the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-live-p&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-live-p popup =&amp;gt; boolean
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-set-list&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-set-list popup list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Set the contents of the &lt;code&gt;POPUP&lt;/code&gt;. &lt;code&gt;LIST&lt;/code&gt; has to be popup items.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-draw&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-draw popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Draw the contents of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-hide&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-hide popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hide the &lt;code&gt;POPUP&lt;/code&gt;. To show again, call &lt;code&gt;popup-draw&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-hidden-p&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-hidden-p popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Return non-nil if the &lt;code&gt;POPUP&lt;/code&gt; is hidden.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-select&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;    popup-select popup index
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Select the item of &lt;code&gt;INDEX&lt;/code&gt; of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-selected-item&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-selected-item popup =&amp;gt; item
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Return the selected item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Return non-nil if the &lt;code&gt;POPUP&lt;/code&gt; is still alive.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-next&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-next popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Select the next item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-previous&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-previous popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Select the next item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-scroll-down&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-scroll-down popup n
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Scroll down &lt;code&gt;N&lt;/code&gt; items of the &lt;code&gt;POPUP&lt;/code&gt;. This won&#39;t wrap.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-scroll-up&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-scroll-up popup n
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Scroll up &lt;code&gt;N&lt;/code&gt; items of the &lt;code&gt;POPUP&lt;/code&gt;. This won&#39;t wrap.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-isearch&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-isearch popup &amp;amp;key cursor-color keymap callback help-delay
=&amp;gt; boolean
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enter incremental search event loop of &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Tooltips&lt;/h2&gt; 
&lt;p&gt;A tooltip is an useful visual UI widget for displaying information something about what cursor points to.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-tip&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;popup-tip string &amp;amp;key point around width height min-height max-width
truncate margin margin-left margin-right scroll-bar parent
parent-offset nowait nostrip prompt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Show a tooltip with message &lt;code&gt;STRING&lt;/code&gt; at &lt;code&gt;POINT&lt;/code&gt;. This function is synchronized unless &lt;code&gt;NOWAIT&lt;/code&gt; specified. Almost all arguments are same as &lt;code&gt;popup-create&lt;/code&gt; except for &lt;code&gt;TRUNCATE&lt;/code&gt;, &lt;code&gt;NOWAIT&lt;/code&gt;, &lt;code&gt;NOSTRIP&lt;/code&gt; and &lt;code&gt;PROMPT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;TRUNCATE&lt;/code&gt; is non-nil, the tooltip can be truncated.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;NOWAIT&lt;/code&gt; is non-nil, this function immediately returns the tooltip instance without entering event loop.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;NOSTRIP&lt;/code&gt; is non-nil, &lt;code&gt;STRING&lt;/code&gt; properties are not stripped.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;PROMPT&lt;/code&gt; is a prompt string used when reading events during the event loop.&lt;/p&gt; 
&lt;p&gt;Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(popup-tip &quot;Hello, World!&quot;)
;; reach here after the tooltip disappeared
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Popup Menus&lt;/h2&gt; 
&lt;p&gt;Popup menu is an useful visual UI widget for prompting users to select an item of a list.&lt;/p&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-menu*&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;popup-menu* list &amp;amp;key point around width height margin margin-left
margin-right scroll-bar symbol parent parent-offset keymap
fallback help-delay nowait prompt isearch isearch-filter isearch-cursor-color
isearch-keymap isearch-callback initial-index =&amp;gt; selected-value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Show a popup menu of &lt;code&gt;LIST&lt;/code&gt; at &lt;code&gt;POINT&lt;/code&gt;. This function returns the value of the selected item. Almost all arguments are same as &lt;code&gt;popup-create&lt;/code&gt; except for &lt;code&gt;KEYMAP&lt;/code&gt;, &lt;code&gt;FALLBACK&lt;/code&gt;, &lt;code&gt;HELP-DELAY&lt;/code&gt;, &lt;code&gt;PROMPT&lt;/code&gt;, &lt;code&gt;ISEARCH&lt;/code&gt;, &lt;code&gt;ISEARCH-FILTER&lt;/code&gt;, &lt;code&gt;ISEARCH-CURSOR-COLOR&lt;/code&gt;, &lt;code&gt;ISEARCH-KEYMAP&lt;/code&gt; and &lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;KEYMAP&lt;/code&gt; is provided, it is a keymap which is used when processing events during event loop.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;FALLBACK&lt;/code&gt; is provided, it is a function taking two arguments; a key and a command. &lt;code&gt;FALLBACK&lt;/code&gt; is called when no special operation is found on the key. The default value is &lt;code&gt;popup-menu-fallback&lt;/code&gt;, which does nothing.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;HELP-DELAY&lt;/code&gt; is a delay of displaying helps.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;NOWAIT&lt;/code&gt; is non-nil, this function immediately returns the menu instance without entering event loop.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;PROMPT&lt;/code&gt; is a prompt string when reading events during event loop.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;ISEARCH&lt;/code&gt; is non-nil, do isearch as soon as displaying the popup menu.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ISEARCH-FILTER&lt;/code&gt; is a filtering function taking two arguments: search pattern and list of items. Returns a list of matching items.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ISEARCH-CURSOR-COLOR&lt;/code&gt; is a cursor color during isearch. The default value is `popup-isearch-cursor-color&#39;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ISEARCH-KEYMAP&lt;/code&gt; is a keymap which is used when processing events during event loop. The default value is &lt;code&gt;popup-isearch-keymap&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt; is a function taking one argument. &lt;code&gt;popup-menu&lt;/code&gt; calls &lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt;, if specified, after isearch finished or isearch canceled. The arguments is whole filtered list of items.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;INITIAL-INDEX&lt;/code&gt; is non-nil, this is an initial index value for &lt;code&gt;popup-select&lt;/code&gt;. Only positive integer is valid.&lt;/p&gt; 
&lt;p&gt;Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(popup-menu* &#39;(&quot;Foo&quot; &quot;Bar&quot; &quot;Baz&quot;))
;; =&amp;gt; &quot;Baz&quot; if you select Baz
(popup-menu* (list (popup-make-item &quot;Yes&quot; :value t)
                   (popup-make-item &quot;No&quot; :value nil)))
;; =&amp;gt; t if you select Yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Function: &lt;code&gt;popup-cascade-menu&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Same as &lt;code&gt;popup-menu&lt;/code&gt; except that an element of &lt;code&gt;LIST&lt;/code&gt; can be also a sub-menu if the element is a cons cell formed &lt;code&gt;(ITEM . SUBLIST)&lt;/code&gt; where &lt;code&gt;ITEM&lt;/code&gt; is an usual item and &lt;code&gt;SUBLIST&lt;/code&gt; is a list of the sub menu.&lt;/p&gt; 
&lt;p&gt;Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(popup-cascade-menu &#39;((&quot;Top1&quot; &quot;Sub1&quot; &quot;Sub2&quot;) &quot;Top2&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customize Variables&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;popup-isearch-regexp-builder-function&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Function used to construct a regexp from a pattern. You may for instance provide a function that replaces spaces by &#39;.+&#39; if you like helm or ivy style of completion. Default value is &lt;code&gt;#&#39;regexp-quote&lt;/code&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Copyright (C) 2011-2015 Tomohiro Matsuyama &amp;lt;&lt;a href=&quot;mailto:m2ym.pub@gmail.com&quot;&gt;m2ym.pub@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt; Copyright (C) 2020-2022 Jen-Chieh Shen &amp;lt;&lt;a href=&quot;mailto:jcs090218@gmail.com&quot;&gt;jcs090218@gmail.com&lt;/a&gt;&amp;gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacsorphanage/quickrun</title>
      <link>https://github.com/emacsorphanage/quickrun</link>
      <description>&lt;p&gt;Run command quickly. This packages is inspired quickrun.vim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/quickrun&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/quickrun-badge.svg?sanitize=true&quot; alt=&quot;melpa badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/quickrun&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/quickrun-badge.svg?sanitize=true&quot; alt=&quot;melpa stable badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://jcs-emacs.github.io/jcs-elpa/#/jcs-modeline&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/jcs-modeline.svg?sanitize=true&quot; alt=&quot;jcs-elpa badge&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;quickrun.el&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;quickrun.el&lt;/strong&gt; is Emacs port of &lt;a href=&quot;https://github.com/thinca/vim-quickrun&quot;&gt;quickrun.vim&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/emacsorphanage/quickrun/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/emacsorphanage/quickrun/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; is a extension to execute editing buffer. &lt;code&gt;quickrun.el&lt;/code&gt; is similar to executable-interpret, but &lt;code&gt;quickrun.el&lt;/code&gt; provides more convenient commands. &lt;code&gt;quickrun.el&lt;/code&gt; execute not only script languages(Perl, Ruby, Python etc), but also compiling languages(C, C++, Go, Java etc) and markup language.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Emacs &lt;code&gt;26.1&lt;/code&gt; or higher.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can install &lt;code&gt;quickrun.el&lt;/code&gt; from &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt; with package.el.&lt;/p&gt; 
&lt;p&gt;Or install directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd load-path-dir
$ wget https://raw.githubusercontent.com/syohex/emacs-quickrun/master/quickrun.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After Installation add following to your configuration file(~/.emacs.d/init.el, ~/.emacs etc)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(require &#39;quickrun)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Support Programming Languages&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; supports following programming languages and markup languages as default. But you can register your own command and apply other languages.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Programming Language(commands used)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Assembly Language (&lt;code&gt;nasm&lt;/code&gt;, &lt;code&gt;masm&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Applescript (&lt;code&gt;osascript&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;C (&lt;code&gt;gcc&lt;/code&gt; / &lt;code&gt;clang&lt;/code&gt; / &lt;code&gt;Visual C++&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;C++ (&lt;code&gt;g++&lt;/code&gt; / &lt;code&gt;clang++&lt;/code&gt; / &lt;code&gt;Visual C++&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;C# (&lt;code&gt;dotnet&lt;/code&gt; / &lt;code&gt;mono&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Objective-C (gcc -objc)&lt;/li&gt; 
 &lt;li&gt;D Language (&lt;code&gt;dmd&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Fortran (&lt;code&gt;gfortran&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Java (&lt;code&gt;javac&lt;/code&gt; / &lt;code&gt;java&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Perl (&lt;code&gt;perl&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Perl6 (&lt;code&gt;perl6&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Ruby (&lt;code&gt;ruby&lt;/code&gt; / &lt;code&gt;mruby&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Python (&lt;code&gt;python&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;PHP (&lt;code&gt;php&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Emacs Lisp (&lt;code&gt;elisp&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Scheme (&lt;code&gt;gosh&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Smalltalk (&lt;code&gt;gst&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Racket (&lt;code&gt;racket&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Common Lisp (&lt;code&gt;clisp&lt;/code&gt; / &lt;code&gt;sbcl&lt;/code&gt; / &lt;code&gt;ccl&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Clojure (&lt;code&gt;jark&lt;/code&gt; / &lt;code&gt;clj-env-dir&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Javascript (&lt;code&gt;node&lt;/code&gt; / &lt;code&gt;v8&lt;/code&gt; / &lt;code&gt;js&lt;/code&gt; / &lt;code&gt;jrunscript&lt;/code&gt; / &lt;code&gt;cscript&lt;/code&gt; / &lt;code&gt;deno&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Coffee Script (&lt;code&gt;coffee&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;JSX (&lt;code&gt;jsx&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Markdown (&lt;code&gt;Markdown.pl&lt;/code&gt; / &lt;code&gt;bluecloth&lt;/code&gt; / &lt;code&gt;kramdown&lt;/code&gt; / &lt;code&gt;pandoc&lt;/code&gt; / &lt;code&gt;redcarpet&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Haskell (&lt;code&gt;runghc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Go Language (&lt;code&gt;go&lt;/code&gt; / &lt;code&gt;gccgo&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Io (&lt;code&gt;io&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Lua (&lt;code&gt;lua&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Groovy (&lt;code&gt;groovy&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Scala (&lt;code&gt;scala&lt;/code&gt;) &lt;strong&gt;Please use UTF-8 encoding&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;HAML (&lt;code&gt;haml&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;SASS (&lt;code&gt;sass&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;LESS (&lt;code&gt;lessc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Erlang (&lt;code&gt;escript&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;OCaml (&lt;code&gt;ocamlc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;F# (&lt;code&gt;fsharpc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;ShellScript (shebang&#39;s shell)&lt;/li&gt; 
 &lt;li&gt;AWK (&lt;code&gt;awk&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Rust (&lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Dart (&lt;code&gt;dart&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Elixir (&lt;code&gt;elixir&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;TypeScript (&lt;code&gt;tsc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Tcl (&lt;code&gt;tclsh&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Swift (&lt;code&gt;swift&lt;/code&gt;, &lt;code&gt;xcrun&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;ATS2 (&lt;code&gt;patscc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;R (&lt;code&gt;Rscript&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Nim/NimScript (&lt;code&gt;nim&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Julia (&lt;code&gt;julia&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Gnuplot (&lt;code&gt;gnuplot&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Kotlin (&lt;code&gt;kotlin&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Crystal (&lt;code&gt;crystal&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;V (&lt;code&gt;v&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Zig (&lt;code&gt;zig&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Nix (&lt;code&gt;nix&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See also &lt;code&gt;quickrun--support-languages&lt;/code&gt; global variable.&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;h4&gt;&lt;code&gt;quickrun&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Execute current buffer. If &lt;code&gt;quickrun.el&lt;/code&gt; does not find command-key, then &lt;code&gt;quickrun.el&lt;/code&gt; asks you command-key(You always input command if you use &lt;code&gt;C-u&lt;/code&gt; prefix key)&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-select&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Like &lt;code&gt;quickrun&lt;/code&gt; command but select the backend before the execution.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-region&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Execute region. (Java is not supported)&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-with-arg&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Execute current buffer with arguments. &lt;code&gt;quickrun.el&lt;/code&gt; asks you command line argument&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-shell&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Execute current buffer in eshell for interactive command such as program which reads input from STDIN.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-compile-only&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Compile current buffer with compile.el framework, not execute. quickrun with &lt;code&gt;C-u C-u&lt;/code&gt; prefix behaves same as quickrun-compile-only.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-compile-only-select&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Like &lt;code&gt;quickrun-compile-only&lt;/code&gt; command but select the backend before the execution.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-replace-region&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Replace region of code with its output.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;quickrun-autorun-mode&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Minor mode which executes &lt;code&gt;quickrun&lt;/code&gt; after saving buffer.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;helm-quickrun&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;M-x quickrun&lt;/code&gt; with helm interface&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;anything-quickrun&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;M-x quickrun&lt;/code&gt; with anything interface&lt;/p&gt; 
&lt;h2&gt;Note&lt;/h2&gt; 
&lt;p&gt;If quickrun returns &lt;code&gt;command not found&lt;/code&gt;, please check &lt;code&gt;(executable-find &quot;THE_COMMAND_NAME&quot;)&lt;/code&gt; [for example &lt;code&gt;(executable-find &quot;gnuplot&quot;)&lt;/code&gt;] . If this returns &lt;code&gt;nil&lt;/code&gt;, I strongly recommend you use &lt;a href=&quot;https://github.com/purcell/exec-path-from-shell&quot;&gt;https://github.com/purcell/exec-path-from-shell&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Send File to STDIN&lt;/h2&gt; 
&lt;p&gt;If &lt;code&gt;executed_file.qrinput&lt;/code&gt;(like &lt;code&gt;foo.c.qrinput&lt;/code&gt;) is existed in directory same as executed buffer file, &lt;code&gt;quickrun.el&lt;/code&gt; sends its content to stdin of executed program. Please set &lt;code&gt;quickrun-input-file-extension&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; If you want to disable this feature.&lt;/p&gt; 
&lt;h2&gt;Customize&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;quickrun-focus-p&lt;/code&gt;(Default: &lt;code&gt;t&lt;/code&gt;)&lt;/h3&gt; 
&lt;p&gt;If this value is &lt;code&gt;nil&lt;/code&gt;, quickrun.el does not move focus to output buffer.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;quickrun-truncate-lines&lt;/code&gt;(Default: &lt;code&gt;t&lt;/code&gt;)&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;truncate-lines&#39; value for &lt;/code&gt;&lt;em&gt;quickrun&lt;/em&gt;` buffer.&lt;/p&gt; 
&lt;h2&gt;User Defined Command&lt;/h2&gt; 
&lt;p&gt;You can add your own command or override existsing command by &lt;code&gt;quickrun-add-command&lt;/code&gt; as below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;;; Use this parameter as C++ default
(quickrun-add-command &quot;c++/c1z&quot;
  &#39;((:command . &quot;g++&quot;)
    (:exec    . (&quot;%c -std=c++1z %o -o %e %s&quot;
         &quot;%e %a&quot;))
    (:remove  . (&quot;%e&quot;)))
  :default &quot;c++&quot;)

;; Use this parameter in pod-mode
(quickrun-add-command &quot;pod&quot;
  &#39;((:command . &quot;perldoc&quot;)
    (:exec    . &quot;%c -T -F %s&quot;))
  :mode &#39;pod-mode)

;; You can override existing command
(quickrun-add-command &quot;c/gcc&quot;
  &#39;((:exec . (&quot;%c -std=c++1z %o -o %e %s&quot;
          &quot;%e %a&quot;)))
  :override t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;First argument of &lt;code&gt;quickrun-add-command&lt;/code&gt; is command key. Second argument of it is command parameter, which is described laster. &lt;code&gt;quickrun-add-command&lt;/code&gt; also takes key parameters, &lt;code&gt;:default&lt;/code&gt;, &lt;code&gt;:mode&lt;/code&gt;, &lt;code&gt;:override&lt;/code&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Argument&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;:default&lt;/code&gt; lang&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use this command parameter as default in specified language&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;:mode&lt;/code&gt; mode&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;this command parameter in specified mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;:override&lt;/code&gt; bool&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Override existing parameter with specified parameter&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Command Parameter&lt;/h3&gt; 
&lt;p&gt;Command alist has following parameters,&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:command&lt;/code&gt;(mandatory parameter)&lt;/h4&gt; 
&lt;p&gt;Command name. &lt;code&gt;%c&lt;/code&gt; is expanded into this value.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:cmdopt&lt;/code&gt;(optional)&lt;/h4&gt; 
&lt;p&gt;Command(&lt;code&gt;:command&lt;/code&gt;) option. &lt;code&gt;%o&lt;/code&gt; is expanded into this value.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:exec&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Executed commands. You can also set command list parameter. If you set list parameter, &lt;code&gt;quickrun.el&lt;/code&gt; executes command list in order.&lt;/p&gt; 
&lt;p&gt;If this parameter is omitted, &lt;code&gt;quickrun.el&lt;/code&gt; use default execute command template &quot;%c %o %s %a&quot;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:timeout&lt;/code&gt;(optional)&lt;/h4&gt; 
&lt;p&gt;Timeout in seconds for the process spawn by the command. This value takes precedence over the &lt;code&gt;quickrun-timeout-seconds&lt;/code&gt; custom variable.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:compile-only&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Command exected by &lt;code&gt;quickrun-compile-only&lt;/code&gt;. This option is used for syntax check or converting another language(e.g. CoffeeScript =&amp;gt; JavaScript).&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;:compile-conf&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Configuration of &lt;code&gt;quickrun-compile-only&lt;/code&gt;. This parameter must be alist.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:remove&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Remove files after executing. If command create some intermediate files, you should set this parameter. :remove value is atom or list.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:outputter&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Please see Outputter section.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:default-directory&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Directory where commands are executed.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:tempfile&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use temporary file or not. &lt;code&gt;quickrun.el&lt;/code&gt; uses temporary file if you omit this parameter.&lt;/p&gt; 
&lt;p&gt;NOTE: If you set this parameter, you cannot use &lt;code&gt;quickrun-region&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;:description&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Description of this command. This parameter is used in &lt;code&gt;helm-quickrun&lt;/code&gt; or &lt;code&gt;anything-quickrun&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Placeholders&lt;/h3&gt; 
&lt;p&gt;You can use following placeholders in command parameter&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Placeholder&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Expanded&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%c&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Command&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%o&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Command line option&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Source(absolute path)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%a&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Script&#39;s arguments&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%n&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Source without extension(absolute path)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%N&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Source without extension(nondirectory)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%d&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Directory name of Source(absolute path)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%e&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Source with executable suffix(absolute path)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;%E&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Source with executable suffix(nondirectory)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Source file name(&lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%n&lt;/code&gt; etc) is not original file name except Java language. Because &lt;code&gt;quickrun.el&lt;/code&gt; copys source file to temporary file firstly.&lt;/p&gt; 
&lt;h2&gt;Change Default Command&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;quickrun-set-default&lt;/code&gt; changes default command in language that is registerd multiple command parameters(like c, c++,Javascript).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(quickrun-set-default &quot;c&quot; &quot;c/clang&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This means that quickrun uses &quot;c/clang&quot; for C files.&lt;/p&gt; 
&lt;h2&gt;Timeout Seconds&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; kills process if program run over 10 seconds as default. This avoids infinite loop program or endless program by some mistakes. You control timeout second to set &lt;code&gt;quickrun-timeout-seconds&lt;/code&gt;. This feature is disabled if &lt;code&gt;quickrun-timeout-seconds&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. The timeout can also be set per command with the &lt;code&gt;:timeout&lt;/code&gt; parameter. (You can also kill process by &lt;code&gt;C-c C-c&lt;/code&gt; in quickrun buffer)&lt;/p&gt; 
&lt;h2&gt;Key bindings in quickrun buffer&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Key&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Close quickrun window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;C-c C-c&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Kill quickrun process&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Buffer Local Variables&lt;/h2&gt; 
&lt;p&gt;Buffer local variables is priority to default parameters.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-option-cmd-alist&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Command alist.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-option-command&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Command key(Expanded to %c)&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-option-cmdkey&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Command key of command parameter.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-option-cmdopt&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Command option(Expanded to %o)&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-option-args&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Program argument(Expanded to %a.)&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-option-shebang&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;If this value is &lt;code&gt;non-nil&lt;/code&gt; and first line of source file is started &quot;#!&quot;, the following string is treated as &quot;:command&quot;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-option-outputter&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Outputter function. See &lt;em&gt;Outputter&lt;/em&gt; section&lt;/p&gt; 
&lt;h3&gt;Example of buffer local variable&lt;/h3&gt; 
&lt;p&gt;Setting C++11.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;string&amp;gt;

int main (int argc, char *argv[])
{
    std::vector &amp;lt;std::string&amp;gt; lst = { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; };

    for (auto x : lst) {
        std::cout &amp;lt;&amp;lt; &quot;[&quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;]&quot; &amp;lt;&amp;lt; std::endl;
    }

    for (auto i = 1; i &amp;lt; argc; i++) {
        std::cout &amp;lt;&amp;lt; &quot;[&quot; &amp;lt;&amp;lt; argv[i] &amp;lt;&amp;lt; &quot;]&quot; &amp;lt;&amp;lt; std::endl;
    }

    return 0;
}

/*
  Local Variables:
  quickrun-option-cmd-alist: ((:command . &quot;g++&quot;)
                              (:exec    . (&quot;%c -std=c++0x -o %n %s&quot;
                                           &quot;%n apple orange melon&quot;))
                              (:remove  . (&quot;%n&quot;)))
  End:
*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Hooks&lt;/h2&gt; 
&lt;h4&gt;&lt;code&gt;quickrun-after-run-hook&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Run hooks after execute all commands.&lt;/p&gt; 
&lt;h2&gt;Outputter&lt;/h2&gt; 
&lt;p&gt;Outputter is a function for processing command output. Default outputter is to output to *quickrun* buffer and processing ANSI Color sequence.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; defines following functions as default.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;buffer:buffername&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Output to buffer. &lt;a href=&quot;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_buffer.pl&quot;&gt;outputter &lt;em&gt;buffer&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;file:filename&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Output to file. &lt;a href=&quot;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_file.pl&quot;&gt;outputter &lt;em&gt;file&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;variable:varname&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Output to variable. &lt;a href=&quot;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_variable.pl&quot;&gt;outputter &lt;em&gt;variable&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;browser&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Output to Web browser(using function &lt;em&gt;browse-url&lt;/em&gt;) &lt;a href=&quot;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_browser.pl&quot;&gt;outputter &lt;em&gt;browser&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;message&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Output to *Message* buffer(using function &lt;em&gt;message&lt;/em&gt;) &lt;a href=&quot;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_message.pl&quot;&gt;outputter &lt;em&gt;message&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;multi&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use multiple outputters. &lt;a href=&quot;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_multi.pl&quot;&gt;outputter &lt;em&gt;multi&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;null&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;No output. &lt;a href=&quot;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_null.pl&quot;&gt;outputter &lt;em&gt;null&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Using quickrun as function from other functions&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;quickrun&lt;/code&gt; can be used as function from other functions. You can pass configuration by &lt;code&gt;:source&lt;/code&gt; argument. Sample is following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(defun test-perl ()
  (interactive)
  (let* ((cmd &quot;git rev-parse --show-toplevel&quot;)
         (topdir (with-temp-buffer
                   (call-process-shell-command cmd nil t nil)
                   (goto-char (point-min))
                   (if (re-search-forward &quot;^\\(.+\\)$&quot; nil t)
                       (match-string 1)))))
    (quickrun :source `((:command . &quot;prove&quot;)
                        (:default-directory . ,topdir)
                        (:exec . (&quot;%c -bv --color %s&quot;))))))
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>doomemacs/doomemacs</title>
      <link>https://github.com/doomemacs/doomemacs</link>
      <description>&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Doom Emacs&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; • &lt;a href=&quot;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&quot;&gt;Screenshots&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&quot; alt=&quot;Made with Doom Emacs&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Supports-Emacs_27.1%E2%80%9330.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&quot; alt=&quot;Supports Emacs 27.1–30.1&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/last-commit/doomemacs/doomemacs?style=flat-square&quot; alt=&quot;Latest commit&quot;&gt;&lt;/p&gt; 
 &lt;!-- ![Build status: master](https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square) --&gt; 
 &lt;p&gt;&lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&quot; alt=&quot;Discord Server&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discourse.doomemacs.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&quot; alt=&quot;Discourse server&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&quot; alt=&quot;Doom Emacs Screenshot&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&quot;&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;a href=&quot;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&quot; align=&quot;right&quot;&gt; &lt;/a&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Doom is a configuration framework for &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; 
&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; 
 &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; 
 &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; 
 &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; 
 &lt;li&gt;A declarative &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&quot;https://github.com/radian-software/straight.el&quot;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; 
 &lt;li&gt;Optional vim emulation powered by &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&quot;https://github.com/easymotion/vim-easymotion&quot;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&quot;https://github.com/tpope/vim-unimpaired&quot;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&quot;&gt;more&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; 
 &lt;li&gt;A Spacemacs-esque &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&quot;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; 
 &lt;li&gt;A rule-based &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&quot;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; 
 &lt;li&gt;Per-file indentation style detection and &lt;a href=&quot;http://editorconfig.org/&quot;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; 
 &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;ivy&lt;/a&gt; or &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; 
 &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; 
 &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git 2.23+&lt;/li&gt; 
 &lt;li&gt;Emacs 27.1–30.1 (&lt;strong&gt;Recommended: 30.1 + &lt;a href=&quot;https://www.emacswiki.org/emacs/GccEmacs&quot;&gt;native-comp&lt;/a&gt;&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; 
 &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Unstable and pre-release builds of Emacs -- which end in &lt;code&gt;.50&lt;/code&gt;, &lt;code&gt;.60&lt;/code&gt;, or &lt;code&gt;.9X&lt;/code&gt; (e.g. &lt;code&gt;28.1.91&lt;/code&gt;) -- &lt;strong&gt;are not officially supported&lt;/strong&gt;. There &lt;em&gt;is&lt;/em&gt; some effort to support Emacs HEAD, however. &lt;a href=&quot;https://discourse.doomemacs.org/t/3241&quot;&gt;Follow this Discourse post&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Doom is comprised of &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&quot;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; 
&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.config/emacs/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Roadmap&lt;/h1&gt; 
&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discourse.doomemacs.org/t/development-roadmap/42&quot;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/5&quot;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/7&quot;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Our documentation&lt;/a&gt; covers many use cases. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&quot;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&quot;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&quot;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&quot;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&quot;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; 
   &lt;li&gt;Your issue may be documented in the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: 
  &lt;ul&gt; 
   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; or &lt;a href=&quot;https://discourse.doomemacs.org/tag/faq&quot;&gt;Discourse FAQs&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; 
 &lt;li&gt;Search &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues&quot;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contribute&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bbatsov/emacs-lisp-style-guide&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&quot; alt=&quot;Elisp styleguide&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&quot; alt=&quot;Donate on liberapay&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/henriklissner/10&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&quot; alt=&quot;Donate on paypal&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&quot;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; 
 &lt;li&gt;Don&#39;t hesitate to &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues/new/choose&quot;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;liberapay&lt;/a&gt; or &lt;a href=&quot;https://paypal.me/henriklissner/10&quot;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>karthink/gptel</title>
      <link>https://github.com/karthink/gptel</link>
      <description>&lt;p&gt;A simple LLM client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: gptel: A simple LLM client for Emacs&lt;/p&gt; 
&lt;p&gt;[[https://elpa.nongnu.org/nongnu/gptel.html][file:https://elpa.nongnu.org/nongnu/gptel.svg]] [[https://stable.melpa.org/#/gptel][file:https://stable.melpa.org/packages/gptel-badge.svg]] [[https://melpa.org/#/gptel][file:https://melpa.org/packages/gptel-badge.svg]]&lt;/p&gt; 
&lt;p&gt;gptel is a simple Large Language Model chat client for Emacs, with support for multiple models and backends. It works in the spirit of Emacs, available at any time and uniformly in any buffer.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
  | LLM Backend | Supports | Requires | |--------------------+----------+----------------------------| | ChatGPT | ✓ | [[https://platform.openai.com/account/api-keys][API key]] | | Anthropic (Claude) | ✓ | [[https://www.anthropic.com/api][API key]] | | Gemini | ✓ | [[https://makersuite.google.com/app/apikey][API key]] | | Ollama | ✓ | [[https://ollama.ai/][Ollama running locally]] | | Llama.cpp | ✓ | [[https://github.com/ggerganov/llama.cpp/tree/master/examples/server#quick-start][Llama.cpp running locally]] | | Llamafile | ✓ | [[https://github.com/Mozilla-Ocho/llamafile#quickstart][Local Llamafile server]] | | GPT4All | ✓ | [[https://gpt4all.io/index.html][GPT4All running locally]] | | Kagi FastGPT | ✓ | [[https://kagi.com/settings?p=api][API key]] | | Kagi Summarizer | ✓ | [[https://kagi.com/settings?p=api][API key]] | | Azure | ✓ | Deployment and API key | | Groq | ✓ | [[https://console.groq.com/keys][API key]] | | Perplexity | ✓ | [[https://docs.perplexity.ai/docs/getting-started][API key]] | | OpenRouter | ✓ | [[https://openrouter.ai/keys][API key]] | | together.ai | ✓ | [[https://api.together.xyz/settings/api-keys][API key]] | | Anyscale | ✓ | [[https://docs.endpoints.anyscale.com/][API key]] | | PrivateGPT | ✓ | [[https://github.com/zylon-ai/private-gpt#-documentation][PrivateGPT running locally]] | | DeepSeek | ✓ | [[https://platform.deepseek.com/api_keys][API key]] | | Cerebras | ✓ | [[https://cloud.cerebras.ai/][API key]] | | Github Models | ✓ | [[https://github.com/settings/tokens][Token]] | | Novita AI | ✓ | [[https://novita.ai/model-api/product/llm-api?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][Token]] | | xAI | ✓ | [[https://console.x.ai?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][API key]] | #+html: 
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;General usage&lt;/em&gt;: ([[https://www.youtube.com/watch?v=bsRnh_brggM][YouTube Demo]])&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;In-place usage&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&quot;&gt;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Tool use&lt;/em&gt; (experimental)&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&quot;&gt;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&quot;&gt;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;See also [[https://youtu.be/g1VMGhC5gRU][this youtube demo (2 minutes)]] by Armin Darvish.&lt;/p&gt; 
&lt;h1&gt;&lt;em&gt;Media support&lt;/em&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p align=&quot;center&quot;&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&quot;&gt;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&lt;/a&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;em&gt;Multi-LLM support demo&lt;/em&gt;:&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&quot;&gt;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&lt;/a&gt;&lt;/h1&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;gptel is async and fast, streams responses.&lt;/li&gt; 
 &lt;li&gt;Interact with LLMs from anywhere in Emacs (any buffer, shell, minibuffer, wherever).&lt;/li&gt; 
 &lt;li&gt;LLM responses are in Markdown or Org markup.&lt;/li&gt; 
 &lt;li&gt;Supports multiple independent conversations and one-off ad hoc interactions.&lt;/li&gt; 
 &lt;li&gt;Supports tool-use to equip LLMs with agentic capabilities (experimental feature).&lt;/li&gt; 
 &lt;li&gt;Supports multi-modal input (include images, documents).&lt;/li&gt; 
 &lt;li&gt;Save chats as regular Markdown/Org/Text files and resume them later.&lt;/li&gt; 
 &lt;li&gt;Edit your previous prompts or LLM responses when continuing a conversation. These will be fed back to the model.&lt;/li&gt; 
 &lt;li&gt;Supports introspection, so you can see /exactly/ what will be sent. Inspect and modify queries before sending them.&lt;/li&gt; 
 &lt;li&gt;Pause multi-stage requests at an intermediate stage and resume them later.&lt;/li&gt; 
 &lt;li&gt;Don&#39;t like gptel&#39;s workflow? Use it to create your own for any supported model/backend with a [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][simple API]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;gptel uses Curl if available, but falls back to the built-in url-retrieve to work without external dependencies.&lt;/p&gt; 
&lt;p&gt;** Contents :toc:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#breaking-changes][Breaking changes!]]&lt;/li&gt; 
 &lt;li&gt;[[#installation][Installation]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#straight][Straight]]&lt;/li&gt; 
   &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; 
   &lt;li&gt;[[#doom-emacs][Doom Emacs]]&lt;/li&gt; 
   &lt;li&gt;[[#spacemacs][Spacemacs]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#setup][Setup]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chatgpt][ChatGPT]]&lt;/li&gt; 
   &lt;li&gt;[[#other-llm-backends][Other LLM backends]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#azure][Azure]]&lt;/li&gt; 
     &lt;li&gt;[[#gpt4all][GPT4All]]&lt;/li&gt; 
     &lt;li&gt;[[#ollama][Ollama]]&lt;/li&gt; 
     &lt;li&gt;[[#gemini][Gemini]]&lt;/li&gt; 
     &lt;li&gt;[[#llamacpp-or-llamafile][Llama.cpp or Llamafile]]&lt;/li&gt; 
     &lt;li&gt;[[#kagi-fastgpt--summarizer][Kagi (FastGPT &amp;amp; Summarizer)]]&lt;/li&gt; 
     &lt;li&gt;[[#togetherai][together.ai]]&lt;/li&gt; 
     &lt;li&gt;[[#anyscale][Anyscale]]&lt;/li&gt; 
     &lt;li&gt;[[#perplexity][Perplexity]]&lt;/li&gt; 
     &lt;li&gt;[[#anthropic-claude][Anthropic (Claude)]]&lt;/li&gt; 
     &lt;li&gt;[[#groq][Groq]]&lt;/li&gt; 
     &lt;li&gt;[[#openrouter][OpenRouter]]&lt;/li&gt; 
     &lt;li&gt;[[#privategpt][PrivateGPT]]&lt;/li&gt; 
     &lt;li&gt;[[#deepseek][DeepSeek]]&lt;/li&gt; 
     &lt;li&gt;[[#cerebras][Cerebras]]&lt;/li&gt; 
     &lt;li&gt;[[#github-models][Github Models]]&lt;/li&gt; 
     &lt;li&gt;[[#novita-ai][Novita AI]]&lt;/li&gt; 
     &lt;li&gt;[[#xai][xAI]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#usage][Usage]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#in-any-buffer][In any buffer:]]&lt;/li&gt; 
   &lt;li&gt;[[#in-a-dedicated-chat-buffer][In a dedicated chat buffer:]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#including-media-images-documents-with-requests][Including media (images, documents) with requests]]&lt;/li&gt; 
     &lt;li&gt;[[#save-and-restore-your-chat-sessions][Save and restore your chat sessions]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#setting-options-backend-model-request-parameters-system-prompts-and-more][Setting options (backend, model, request parameters, system prompts and more)]]&lt;/li&gt; 
   &lt;li&gt;[[#include-more-context-with-requests][Include more context with requests]]&lt;/li&gt; 
   &lt;li&gt;[[#handle-reasoning-content][Handle &quot;reasoning&quot; content]]&lt;/li&gt; 
   &lt;li&gt;[[#tool-use-experimental][Tool use (experimental)]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#defining-gptel-tools][Defining gptel tools]]&lt;/li&gt; 
     &lt;li&gt;[[#selecting-tools][Selecting tools]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#rewrite-refactor-or-fill-in-a-region][Rewrite, refactor or fill in a region]]&lt;/li&gt; 
   &lt;li&gt;[[#extra-org-mode-conveniences][Extra Org mode conveniences]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#faq][FAQ]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chat-buffer-ui][Chat buffer UI]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-the-window-to-scroll-automatically-as-the-response-is-inserted][I want the window to scroll automatically as the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-the-cursor-to-move-to-the-next-prompt-after-the-response-is-inserted][I want the cursor to move to the next prompt after the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-to-change-the-formatting-of-the-prompt-and-llm-response][I want to change the formatting of the prompt and LLM response]]&lt;/li&gt; 
     &lt;li&gt;[[#how-does-gptel-distinguish-between-user-prompts-and-llm-responses][How does gptel distinguish between user prompts and LLM responses?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#transient-menu-behavior][Transient menu behavior]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-the-transient-menu-options-to-be-saved-so-i-only-need-to-set-them-once][I want the transient menu options to be saved so I only need to set them once]]&lt;/li&gt; 
     &lt;li&gt;[[#using-the-transient-menu-leaves-behind-extra-windows][Using the transient menu leaves behind extra windows]]&lt;/li&gt; 
     &lt;li&gt;[[#can-i-change-the-transient-menu-key-bindings][Can I change the transient menu key bindings?]]&lt;/li&gt; 
     &lt;li&gt;[[#doom-emacs-sending-a-query-from-the-gptel-menu-fails-because-of-a-key-conflict-with-org-mode][(Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#miscellaneous][Miscellaneous]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-to-use-gptel-in-a-way-thats-not-supported-by-gptel-send-or-the-options-menu][I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu]]&lt;/li&gt; 
     &lt;li&gt;[[#chatgpt-i-get-the-error-http2-429-you-exceeded-your-current-quota][(ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot;]]&lt;/li&gt; 
     &lt;li&gt;[[#why-another-llm-client][Why another LLM client?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#additional-configuration][Additional Configuration]]&lt;/li&gt; 
 &lt;li&gt;[[#alternatives][Alternatives]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#packages-using-gptel][Packages using gptel]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Breaking changes!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=gptel-model= is now expected to be a symbol, not a string. Please update your configuration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Installation&lt;/p&gt; 
&lt;p&gt;gptel can be installed in Emacs out of the box with =M-x package-install= ⏎ =gptel=. This installs the latest commit.&lt;/p&gt; 
&lt;p&gt;If you want the stable version instead, add NonGNU-devel ELPA or MELPA-stable to your list of package sources (=package-archives=), then install gptel with =M-x package-install⏎= =gptel= from these sources.&lt;/p&gt; 
&lt;p&gt;(Optional: Install =markdown-mode=.)&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Straight #+html: &lt;/summary&gt; #+begin_src emacs-lisp (straight-use-package &#39;gptel) #+end_src #+html: 
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Manual #+html: &lt;/summary&gt; Clone or download this repository and run =M-x package-install-file⏎= on the repository directory. #+html: 
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Doom Emacs #+html: &lt;/summary&gt; In =packages.el= #+begin_src emacs-lisp (package! gptel) #+end_src
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;In =config.el= #+begin_src emacs-lisp (use-package! gptel :config (setq! gptel-api-key &quot;your key&quot;)) #+end_src &quot;your key&quot; can be the API key itself, or (safer) a function that returns the key. Setting =gptel-api-key= is optional, you will be asked for a key if it&#39;s not found.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Spacemacs #+html: &lt;/summary&gt; In your =.spacemacs= file, add =llm-client= to =dotspacemacs-configuration-layers=. #+begin_src emacs-lisp (llm-client :variables llm-client-enable-gptel t) #+end_src #+html: 
&lt;/details&gt; ** Setup *** ChatGPT Procure an [[https://platform.openai.com/account/api-keys][OpenAI API key]].
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Optional: Set =gptel-api-key= to the key. Alternatively, you may choose a more secure method such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Storing in =~/.authinfo=. By default, &quot;api.openai.com&quot; is used as HOST and &quot;apikey&quot; as USER. #+begin_src authinfo machine api.openai.com login apikey password TOKEN #+end_src&lt;/li&gt; 
 &lt;li&gt;Setting it to a function that returns the key.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Other LLM backends #+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Azure #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-azure &quot;Azure-1&quot; ;Name, whatever you&#39;d like :protocol &quot;https&quot; ;Optional -- https is the default :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; ;or equivalent :stream t ;Enable streaming responses :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4)) #+end_src Refer to the documentation of =gptel-make-azure= to set more parameters.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel. (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-3.5-turbo gptel-backend (gptel-make-azure &quot;Azure-1&quot; :protocol &quot;https&quot; :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; :stream t :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4))) #+end_src #+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** GPT4All #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-gpt4all &quot;GPT4All&quot; ;Name of your choosing :protocol &quot;http&quot; :host &quot;localhost:4891&quot; ;Where it&#39;s running :models &#39;(mistral-7b-openorca.Q4_0.gguf)) ;Available models #+end_src These are the required parameters, refer to the documentation of =gptel-make-gpt4all= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. Additionally you may want to increase the response token size since GPT4All uses very short (often truncated) responses by default. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-max-tokens 500 gptel-model &#39;mistral-7b-openorca.Q4_0.gguf gptel-backend (gptel-make-gpt4all &quot;GPT4All&quot; :protocol &quot;http&quot; :host &quot;localhost:4891&quot; :models &#39;(mistral-7b-openorca.Q4_0.gguf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Ollama #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-ollama &quot;Ollama&quot; ;Any name of your choosing :host &quot;localhost:11434&quot; ;Where it&#39;s running :stream t ;Stream responses :models &#39;(mistral:latest)) ;List of models #+end_src These are the required parameters, refer to the documentation of =gptel-make-ollama= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistral:latest gptel-backend (gptel-make-ollama &quot;Ollama&quot; :host &quot;localhost:11434&quot; :stream t :models &#39;(mistral:latest))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Gemini #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; :key can be a function that returns the API key. (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t) #+end_src These are the required parameters, refer to the documentation of =gptel-make-gemini= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gemini-pro gptel-backend (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
  #+html: 
 &lt;summary&gt; **** Llama.cpp or Llamafile #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;(If using a llamafile, run a [[https://github.com/Mozilla-Ocho/llamafile#other-example-llamafiles][server llamafile]] instead of a &quot;command-line llamafile&quot;, and a model that supports text generation.)&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Llama.cpp offers an OpenAI compatible API (gptel-make-openai &quot;llama-cpp&quot; ;Any name :stream t ;Stream responses :protocol &quot;http&quot; :host &quot;localhost:8000&quot; ;Llama.cpp server location :models &#39;(test)) ;Any names, doesn&#39;t matter for Llama #+end_src These are the required parameters, refer to the documentation of =gptel-make-openai= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;test gptel-backend (gptel-make-openai &quot;llama-cpp&quot; :stream t :protocol &quot;http&quot; :host &quot;localhost:8000&quot; :models &#39;(test))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Kagi (FastGPT &amp;amp; Summarizer) #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Kagi&#39;s FastGPT model and the Universal Summarizer are both supported. A couple of notes:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Universal Summarizer: If there is a URL at point, the summarizer will summarize the contents of the URL. Otherwise the context sent to the model is the same as always: the buffer text upto point, or the contents of the region if the region is active.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Kagi models do not support multi-turn conversations, interactions are &quot;one-shot&quot;. They also do not support streaming responses.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-kagi &quot;Kagi&quot; ;any name :key &quot;YOUR_KAGI_API_KEY&quot;) ;can be a function that returns the key #+end_src These are the required parameters, refer to the documentation of =gptel-make-kagi= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend and the model (fastgpt/summarizer) from the transient menu when using gptel.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;fastgpt gptel-backend (gptel-make-kagi &quot;Kagi&quot; :key &quot;YOUR_KAGI_API_KEY&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;The alternatives to =fastgpt= include =summarize:cecil=, =summarize:agnes=, =summarize:daphne= and =summarize:muriel=. The difference between the summarizer engines is [[https://help.kagi.com/kagi/api/summarizer.html#summarization-engines][documented here]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** together.ai #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Together.ai offers an OpenAI compatible API (gptel-make-openai &quot;TogetherAI&quot; ;Any name you want :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;TogetherAI&quot;&lt;br&gt; :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot;&lt;br&gt; :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anyscale #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Anyscale offers an OpenAI compatible API (gptel-make-openai &quot;Anyscale&quot; ;Any name you want :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;Anyscale&quot; :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Perplexity #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-perplexity &quot;Perplexity&quot; ;Any name you want :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t) ;If you want responses to be streamed #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;sonar gptel-backend (gptel-make-perplexity &quot;Perplexity&quot; :key &quot;your-api-key&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anthropic (Claude) #+html: &lt;/summary&gt; Register a backend with #+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude&quot; ;Any name you want :stream t ;Streaming responses :key &quot;your-api-key&quot;) #+end_src The =:key= can be a function that returns the key (more secure).
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-3-sonnet-20240229 ; &quot;claude-3-opus-20240229&quot; also available gptel-backend (gptel-make-anthropic &quot;Claude&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Interim support for Claude 3.7 Sonnet&lt;/p&gt; 
 &lt;p&gt;gptel does not yet support specifying LLM &quot;reasoning&quot;/&quot;thinking&quot; behaviors dynamically through its interface. This effort is ongoing, but in the meantime you use the Claude 3.7 Sonnet model in its &quot;thinking&quot; mode by defining a second Claude backend and selecting it in via the UI or elisp:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude-thinking&quot; ;Any name you want :key &quot;your-API-key&quot; :stream t :models &#39;(claude-3-7-sonnet-20250219) :header (lambda () (when-let* ((key (gptel--get-api-key))) `((&quot;x-api-key&quot; . ,key) (&quot;anthropic-version&quot; . &quot;2023-06-01&quot;) (&quot;anthropic-beta&quot; . &quot;pdfs-2024-09-25&quot;) (&quot;anthropic-beta&quot; . &quot;output-128k-2025-02-19&quot;) (&quot;anthropic-beta&quot; . &quot;prompt-caching-2024-07-31&quot;)))) :request-params &#39;(:thinking (:type &quot;enabled&quot; :budget_tokens 2048) :max_tokens 4096)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can set the reasoning budget tokens and max tokens for this usage via the =:budget_tokens= and =:max_tokens= keys here, respectively.&lt;/p&gt; 
 &lt;p&gt;Once proper support for specifying reasoning behaviors is added to gptel&#39;s UI this will be unnecessary.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Groq #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Groq offers an OpenAI compatible API (gptel-make-openai &quot;Groq&quot; ;Any name you want :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]). Note that Groq is fast enough that you could easily set =:stream nil= and still get near-instant responses.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;Groq&quot; :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** OpenRouter #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; OpenRouter offers an OpenAI compatible API (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** PrivateGPT #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;private-gpt gptel-backend (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** DeepSeek #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-deepseek &quot;DeepSeek&quot; ;Any name you want :stream t ;for streaming responses :key &quot;your-api-key&quot;) ;can be a function that returns the key #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;deepseek-reasoner gptel-backend (gptel-make-deepseek &quot;DeepSeek&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Cerebras #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Cerebras offers an instant OpenAI compatible API (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t ;optionally nil as Cerebras is instant AI :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama3.1-70b llama3.1-8b)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;llama3.1-8b gptel-backend (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream nil :key &quot;your-api-key&quot; :models &#39;(llama3.1-70b llama3.1-8b))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Github Models #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Github Models offers an OpenAI compatible API (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You will need to create a github [[https://github.com/settings/personal-access-tokens][token]].&lt;/p&gt; 
 &lt;p&gt;For all the available models, check the [[https://github.com/marketplace/models][marketplace]].&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-4o gptel-backend (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Novita AI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Novita AI offers an OpenAI compatible API (gptel-make-openai &quot;NovitaAI&quot; ;Any name you want :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; gryphe/mythomax-l2-13b meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gryphe/mythomax-l2-13b gptel-backend (gptel-make-openai &quot;NovitaAI&quot;&lt;br&gt; :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot;&lt;br&gt; :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; mistralai/Mixtral-8x7B-Instruct-v0.1 meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** xAI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; xAI offers an OpenAI compatible API (gptel-make-openai &quot;xAI&quot; ;Any name you want :host &quot;api.x.ai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :endpoint &quot;/v1/chat/completions&quot; :stream t :models &#39;(;; xAI now only offers &lt;code&gt;grok-beta&lt;/code&gt; as of the time of this writing grok-beta)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;grok-beta gptel-backend (gptel-make-openai &quot;xAI&quot; ;Any name you want :host &quot;api.x.ai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :endpoint &quot;/v1/chat/completions&quot; :stream t :models &#39;(;; xAI now only offers &lt;code&gt;grok-beta&lt;/code&gt; as of the time of this writing grok-beta))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;** Usage&lt;/p&gt; 
&lt;p&gt;gptel provides a few powerful, general purpose and flexible commands. You can dynamically tweak their behavior to the needs of your task with /directives/, redirection options and more. There is a [[https://www.youtube.com/watch?v=bsRnh_brggM][video demo]] showing various uses of gptel -- but =gptel-send= might be all you need.&lt;/p&gt; 
&lt;p&gt;|-------------------+---------------------------------------------------------------------------------------------------| | &lt;em&gt;To send queries&lt;/em&gt; | Description | |-------------------+---------------------------------------------------------------------------------------------------| | =gptel-send= | Send all text up to =(point)=, or the selection if region is active. Works anywhere in Emacs. | | =gptel= | Create a new dedicated chat buffer. Not required to use gptel. | | =gptel-rewrite= | Rewrite, refactor or change the selected region. Can diff/ediff changes before merging/applying. | |-------------------+---------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|---------------------+---------------------------------------------------------------| | &lt;em&gt;To tweak behavior&lt;/em&gt; | | |---------------------+---------------------------------------------------------------| | =C-u= =gptel-send= | Transient menu for preferences, input/output redirection etc. | | =gptel-menu= | /(Same)/ | |---------------------+---------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------+--------------------------------------------------------------------------------------------------------| | &lt;em&gt;To add context&lt;/em&gt; | | |------------------+--------------------------------------------------------------------------------------------------------| | =gptel-add= | Add/remove a region or buffer to gptel&#39;s context. In Dired, add/remove marked files. | | =gptel-add-file= | Add a file (text or supported media type) to gptel&#39;s context. Also available from the transient menu. | |------------------+--------------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|----------------------------+-----------------------------------------------------------------------------------------| | &lt;em&gt;Org mode bonuses&lt;/em&gt; | | |----------------------------+-----------------------------------------------------------------------------------------| | =gptel-org-set-topic= | Limit conversation context to an Org heading. (For branching conversations see below.) | | =gptel-org-set-properties= | Write gptel configuration as Org properties, for per-heading chat configuration. | |----------------------------+-----------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;*** In any buffer:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= to send the text up to the cursor. The response will be inserted below. Continue the conversation by typing below the response.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a region is selected, the conversation will be limited to its contents.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= with a prefix argument (&lt;del&gt;C-u&lt;/del&gt;)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;to set chat parameters (model, backend, system message etc) for this buffer,&lt;/li&gt; 
   &lt;li&gt;include quick instructions for the next request only,&lt;/li&gt; 
   &lt;li&gt;to add additional context -- regions, buffers or files -- to gptel,&lt;/li&gt; 
   &lt;li&gt;to read the prompt from or redirect the response elsewhere,&lt;/li&gt; 
   &lt;li&gt;or to replace the prompt with the response.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/3562a6e2-7a5c-4f7e-8e57-bf3c11589c73&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;*** In a dedicated chat buffer:&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: gptel works anywhere in Emacs. The dedicated chat buffer only adds some conveniences.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Run =M-x gptel= to start or switch to the chat buffer. It will ask you for the key if you skipped the previous step. Run it with a prefix-arg (=C-u M-x gptel=) to start a new session.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the gptel buffer, send your prompt with =M-x gptel-send=, bound to =C-c RET=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set chat parameters (LLM provider, model, directives etc) for the session by calling =gptel-send= with a prefix argument (=C-u C-c RET=):&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/eb4867e5-30ac-455f-999f-e17123afb810&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;That&#39;s it. You can go back and edit previous prompts and responses if you want.&lt;/p&gt; 
&lt;p&gt;The default mode is =markdown-mode= if available, else =text-mode=. You can set =gptel-default-mode= to =org-mode= if desired.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Including media (images, documents) with requests #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel supports sending media in Markdown and Org chat buffers, but this feature is disabled by default.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can enable it globally, for all models that support it, by setting =gptel-track-media=.&lt;/li&gt; 
  &lt;li&gt;Or you can set it locally, just for the chat buffer, via the header line:&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/91f6aaab-2ea4-4806-9cc9-39b4b46a8e6c&quot; align=&quot;center&quot; alt=&quot;Image showing a gptel chat buffer&#39;s header line with the button to toggle media support&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p&gt;There are two ways to include media with requests:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Adding media files to the context with =gptel-add-file=, described further below.&lt;/li&gt; 
  &lt;li&gt;Including links to media in chat buffers, described here:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;To send media -- images or other supported file types -- with requests in chat buffers, you can include links to them in the chat buffer. Such a link must be &quot;standalone&quot;, i.e. on a line by itself surrounded by whitespace.&lt;/p&gt; 
 &lt;p&gt;In Org mode, for example, the following are all &lt;em&gt;valid&lt;/em&gt; ways of including an image with the request:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file link: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file link with description: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png][some picture]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot;, angle file link: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;a href=&quot;file:/path/to/screenshot.png&quot;&gt;file:/path/to/screenshot.png&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;p&gt;The following links are &lt;em&gt;not valid&lt;/em&gt;, and the text of the link will be sent instead of the file contents:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Inline link: #+begin_src Describe this [[file:/path/to/screenshot.png][picture]].&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Link not &quot;standalone&quot;: #+begin_src Describe this picture: [[file:/path/to/screenshot.png]] Focus specifically on the text content. #+end_src&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Not a valid Org link: #+begin_src Describe the picture&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;file:/path/to/screenshot.png #+end_src&lt;/p&gt; 
 &lt;p&gt;Similar criteria apply to Markdown chat buffers.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Save and restore your chat sessions #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Saving the file will save the state of the conversation as well. To resume the chat, open the file and turn on =gptel-mode= before editing the buffer.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Setting options (backend, model, request parameters, system prompts and more)
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Most gptel options can be set from gptel&#39;s transient menu, available by calling =gptel-send= with a prefix-argument, or via =gptel-menu=. To change their default values in your configuration, see [[#additional-configuration][Additional Configuration]]. Chat buffer-specific options are also available via the header-line in chat buffers.&lt;/p&gt; 
&lt;h1&gt;TODO Remove this when writing the manual.&lt;/h1&gt; 
&lt;p&gt;Selecting a model and backend can be done interactively via the =-m= command of =gptel-menu=. Available registered models are prefixed by the name of their backend with a string like =ChatGPT:gpt-4o-mini=, where =ChatGPT= is the backend name you used to register it and =gpt-4o-mini= is the name of the model.&lt;/p&gt; 
&lt;p&gt;*** Include more context with requests&lt;/p&gt; 
&lt;p&gt;By default, gptel will query the LLM with the active region or the buffer contents up to the cursor. Often it can be helpful to provide the LLM with additional context from outside the current buffer. For example, when you&#39;re in a chat buffer but want to ask questions about a (possibly changing) code buffer and auxiliary project files.&lt;/p&gt; 
&lt;p&gt;You can include additional text regions, buffers or files with gptel&#39;s queries. This additional context is &quot;live&quot; and not a snapshot. Once added, the regions, buffers or files are scanned and included at the time of each query. When using multi-modal models, added files can be of any supported type -- typically images.&lt;/p&gt; 
&lt;p&gt;You can add a selected region, buffer or file to gptel&#39;s context from the menu, or call =gptel-add=. To add a file use =gptel-add= in Dired, or use the dedicated =gptel-add-file= command. Directories will have their files added recursively after prompting for confirmation.&lt;/p&gt; 
&lt;p&gt;You can examine the active context from the menu: #+html: &amp;lt;img src=&quot;&lt;a href=&quot;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&quot;&gt;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&lt;/a&gt;&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with the &quot;inspect context&quot; command.&quot;&amp;gt;&lt;/p&gt; 
&lt;p&gt;And then browse through or remove context from the context buffer: #+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/79a5ffe8-3d63-4bf7-9bf6-0457ab61bf2a&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s context buffer.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;*** Handle &quot;reasoning&quot; content&lt;/p&gt; 
&lt;p&gt;Some LLMs include in their response a &quot;thinking&quot; or &quot;reasoning&quot; block. This text improves the quality of the LLM’s final output, but may not be interesting to you by itself. You can decide how you would like this &quot;reasoning&quot; content to be handled by gptel by setting the user option =gptel-include-reasoning=. You can include it in the LLM response (the default), omit it entirely, include it in the buffer but ignore it on subsequent conversation turns, or redirect it to another buffer. As with most options, you can specify this behvaior from gptel&#39;s transient menu globally, buffer-locally or for the next request only.&lt;/p&gt; 
&lt;p&gt;When included with the response, reasoning content will be delimited by Org blocks or markdown backticks.&lt;/p&gt; 
&lt;p&gt;*** Tool use (experimental)&lt;/p&gt; 
&lt;p&gt;gptel can provide the LLM with client-side elisp &quot;tools&quot;, or function specifications, along with the request. If the LLM decides to run the tool, it supplies the tool call arguments, which gptel uses to run the tool in your Emacs session. The result is optionally returned to the LLM to complete the task.&lt;/p&gt; 
&lt;p&gt;This exchange can be used to equip the LLM with capabilities or knowledge beyond what is available out of the box -- for instance, you can get the LLM to control your Emacs frame, create or modify files and directories, or look up information relevant to your request via web search or in a local database. Here is a very simple example:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&quot;&gt;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;This feature is currently experimental.&lt;/p&gt; 
&lt;p&gt;To use tools in gptel, you need&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a model that supports this usage. All the flagship models support tool use, as do many of the smaller open models.&lt;/li&gt; 
 &lt;li&gt;Tool specifications that gptel understands. gptel does not currently include any tools out of the box.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Defining gptel tools #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Defining a gptel tool requires an elisp function and associated metadata. Here are two simple tool definitions:&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To read the contents of an Emacs buffer&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;read_buffer&quot; ; javascript-style snake_case name :function (lambda (buffer) ; the function that will run (unless (buffer-live-p (get-buffer buffer)) (error &quot;error: buffer %s is not live.&quot; buffer)) (with-current-buffer buffer (buffer-substring-no-properties (point-min) (point-max)))) :description &quot;return the contents of an emacs buffer&quot; :args (list &#39;(:name &quot;buffer&quot; :type string ; :type value must be a symbol :description &quot;the name of the buffer whose contents are to be retrieved&quot;)) :category &quot;emacs&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;Besides the function itself, which can be named or anonymous (as above), the tool specification requires a =:name=, =:description= and a list of argument specifications in =:args=. Each argument specification is a plist with atleast the keys =:name=, =:type= and =:description=.&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To create a text file&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;create_file&quot; ; javascript-style snake_case name :function (lambda (path filename content) ; the function that runs (let ((full-path (expand-file-name filename path))) (with-temp-buffer (insert content) (write-file full-path)) (format &quot;Created file %s in %s&quot; filename path))) :description &quot;Create a new file with the specified content&quot; :args (list &#39;(:name &quot;path&quot; ; a list of argument specifications :type string :description &quot;The directory where to create the file&quot;) &#39;(:name &quot;filename&quot; :type string :description &quot;The name of the file to create&quot;) &#39;(:name &quot;content&quot; :type string :description &quot;The content to write to the file&quot;)) :category &quot;filesystem&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;With some prompting, you can get an LLM to write these tools for you.&lt;/p&gt; 
 &lt;p&gt;Tools can also be asynchronous, use optional arguments and arguments with more structure (enums, arrays, objects etc). See =gptel-make-tool= for details.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; **** Selecting tools
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Once defined, tools can be selected (globally, buffer-locally or for the next request only) from gptel&#39;s transient menu:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/fd878596-b313-4385-b675-3d6546909d8b&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s tool selection menu.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;From here you can also require confirmation for all tool calls, and decide if tool call results should be included in the LLM response. See [[#additional-configuration][Additional Configuration]] for doing these things via elisp.&lt;/p&gt; 
&lt;p&gt;*** Rewrite, refactor or fill in a region&lt;/p&gt; 
&lt;p&gt;In any buffer: with a region selected, you can modify text, rewrite prose or refactor code with =gptel-rewrite=. Example with prose:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&quot;&gt;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;The result is previewed over the original text. By default, the buffer is not modified.&lt;/p&gt; 
&lt;p&gt;Pressing =RET= or clicking in the rewritten region should give you a list of options: you can &lt;em&gt;iterate&lt;/em&gt; on, &lt;em&gt;diff&lt;/em&gt;, &lt;em&gt;ediff&lt;/em&gt;, &lt;em&gt;merge&lt;/em&gt; or &lt;em&gt;accept&lt;/em&gt; the replacement. Example with code:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&quot;&gt;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Acting on the LLM response&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;If you would like one of these things to happen automatically, you can customize =gptel-rewrite-default-action=.&lt;/p&gt; 
&lt;p&gt;These options are also available from =gptel-rewrite=:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/589785b9-aa3f-414a-98dd-d26b7509de08&quot; align=&quot;center&quot;&gt;&lt;/p&gt; 
&lt;p&gt;And you can call them directly when the cursor is in the rewritten region:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/f5b3ca47-e146-45fe-8584-f11035fa4dbc&quot; align=&quot;center&quot;&gt;&lt;/p&gt; 
&lt;p&gt;*** Extra Org mode conveniences&lt;/p&gt; 
&lt;p&gt;gptel offers a few extra conveniences in Org mode.&lt;/p&gt; 
&lt;p&gt;***** Limit conversation context to an Org heading&lt;/p&gt; 
&lt;p&gt;You can limit the conversation context to an Org heading with the command =gptel-org-set-topic=.&lt;/p&gt; 
&lt;p&gt;(This sets an Org property (=GPTEL_TOPIC=) under the heading. You can also add this property manually instead.)&lt;/p&gt; 
&lt;p&gt;***** Use branching context in Org mode (tree of conversations)&lt;/p&gt; 
&lt;p&gt;You can have branching conversations in Org mode, where each hierarchical outline path through the document is a separate conversation branch. This is also useful for limiting the context size of each query. See the variable =gptel-org-branching-context=.&lt;/p&gt; 
&lt;p&gt;If this variable is non-nil, you should probably edit =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist= so that the prefix strings for org-mode are not Org headings, e.g.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setf (alist-get &#39;org-mode gptel-prompt-prefix-alist) &quot;@user\n&quot;) (setf (alist-get &#39;org-mode gptel-response-prefix-alist) &quot;@assistant\n&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;Otherwise, the default prompt prefix will make successive prompts sibling headings, and therefore on different conversation branches, which probably isn&#39;t what you want.&lt;/p&gt; 
&lt;p&gt;Note: using this option requires Org 9.7 or higher to be available. The [[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]] package uses gptel to provide this branching conversation behavior for older versions of Org.&lt;/p&gt; 
&lt;p&gt;***** Save gptel parameters to Org headings (reproducible chats)&lt;/p&gt; 
&lt;p&gt;You can declare the gptel model, backend, temperature, system message and other parameters as Org properties with the command =gptel-org-set-properties=. gptel queries under the corresponding heading will always use these settings, allowing you to create mostly reproducible LLM chat notebooks, and to have simultaneous chats with different models, model settings and directives under different Org headings.&lt;/p&gt; 
&lt;p&gt;** FAQ *** Chat buffer UI #+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** I want the window to scroll automatically as the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to enable auto-scrolling.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-stream-hook &#39;gptel-auto-scroll) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the cursor to move to the next prompt after the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to move the cursor:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-response-functions &#39;gptel-end-of-response) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can also call =gptel-end-of-response= as a command at any time.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to change the formatting of the prompt and LLM response #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;For dedicated chat buffers: customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. You can set a different pair for each major-mode.&lt;/p&gt; 
 &lt;p&gt;Anywhere in Emacs: Use =gptel-pre-response-hook= and =gptel-post-response-functions=, which see.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** How does gptel distinguish between user prompts and LLM responses? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel uses [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html][text-properties]] to watermark LLM responses. Thus this text is interpreted as a response even if you copy it into another buffer. In regular buffers (buffers without =gptel-mode= enabled), you can turn off this tracking by unsetting =gptel-track-response=.&lt;/p&gt; 
 &lt;p&gt;When restoring a chat state from a file on disk, gptel will apply these properties from saved metadata in the file when you turn on =gptel-mode=.&lt;/p&gt; 
 &lt;p&gt;gptel does /not/ use any prefix or semantic/syntax element in the buffer (such as headings) to separate prompts and responses. The reason for this is that gptel aims to integrate as seamlessly as possible into your regular Emacs usage: LLM interaction is not the objective, it&#39;s just another tool at your disposal. So requiring a bunch of &quot;user&quot; and &quot;assistant&quot; tags in the buffer is noisy and restrictive. If you want these demarcations, you can customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. Note that these prefixes are for your readability only and purely cosmetic.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Transient menu behavior #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the transient menu options to be saved so I only need to set them once #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Any model options you set are saved for the current buffer. But the redirection options in the menu are set for the next query only:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;You can make them persistent across this Emacs session by pressing &lt;del&gt;C-x C-s&lt;/del&gt;:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;(You can also cycle through presets you&#39;ve saved with &lt;del&gt;C-x p&lt;/del&gt; and &lt;del&gt;C-x n&lt;/del&gt;.)&lt;/p&gt; 
 &lt;p&gt;Now these will be enabled whenever you send a query from the transient menu. If you want to use these saved options without invoking the transient menu, you can use a keyboard macro:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Replace with your key to invoke the transient menu: (keymap-global-set &quot;
  &lt;f6&gt;
   &quot; &quot;C-u C-c 
   &lt;return&gt; 
    &lt;return&gt;
     &quot;) #+end_src
    &lt;/return&gt;
   &lt;/return&gt;
  &lt;/f6&gt;&lt;/p&gt; 
 &lt;p&gt;Or see this [[https://github.com/karthink/gptel/wiki/Commonly-requested-features#save-transient-flags][wiki entry]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Using the transient menu leaves behind extra windows #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;If using gptel&#39;s transient menus causes new/extra window splits to be created, check your value of =transient-display-buffer-action=. [[https://github.com/magit/transient/discussions/358][See this discussion]] for more context.&lt;/p&gt; 
 &lt;p&gt;If you are using Helm, see [[https://github.com/magit/transient/discussions/361][Transient#361]].&lt;/p&gt; 
 &lt;p&gt;In general, do not customize this Transient option unless you know what you&#39;re doing!&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Can I change the transient menu key bindings? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Yes, see =transient-suffix-put=. This changes the key to select a backend/model from &quot;-m&quot; to &quot;M&quot; in gptel&#39;s menu: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;-m&quot;) :key &quot;M&quot;) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Doom binds &lt;del&gt;RET&lt;/del&gt; in Org mode to =+org/dwim-at-point=, which appears to conflict with gptel&#39;s transient menu bindings for some reason.&lt;/p&gt; 
 &lt;p&gt;Two solutions:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Press &lt;del&gt;C-m&lt;/del&gt; instead of the return key.&lt;/li&gt; 
  &lt;li&gt;Change the send key from return to a key of your choice: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;RET&quot;) :key &quot;
   &lt;f8&gt;
    &quot;) #+end_src
   &lt;/f8&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Miscellaneous #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel&#39;s default usage pattern is simple, and will stay this way: Read input in any buffer and insert the response below it. Some custom behavior is possible with the transient menu (=C-u M-x gptel-send=).&lt;/p&gt; 
 &lt;p&gt;For more programmable usage, gptel provides a general =gptel-request= function that accepts a custom prompt and a callback to act on the response. You can use this to build custom workflows not supported by =gptel-send=. See the documentation of =gptel-request=, and the [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][wiki]] for examples.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot; #+html:&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+begin_quote (HTTP/2 429) You exceeded your current quota, please check your plan and billing details. #+end_quote&lt;/p&gt; 
 &lt;p&gt;Using the ChatGPT (or any OpenAI) API requires [[https://platform.openai.com/account/billing/overview][adding credit to your account]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Why another LLM client? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Other Emacs clients for LLMs prescribe the format of the interaction (a comint shell, org-babel blocks, etc). I wanted:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Something that is as free-form as possible: query the model using any text in any buffer, and redirect the response as required. Using a dedicated =gptel= buffer just adds some visual flair to the interaction.&lt;/li&gt; 
  &lt;li&gt;Integration with org-mode, not using a walled-off org-babel block, but as regular text. This way the model can generate code blocks that I can run.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;** Additional Configuration :PROPERTIES: :ID: f885adac-58a3-4eba-a6b7-91e9e7a17829 :END: #+html: &lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :exports none :results list (let ((all)) (mapatoms (lambda (sym) (when (and (string-match-p &quot;^gptel-[^-]&quot; (symbol-name sym)) (get sym &#39;variable-documentation)) (push sym all)))) all) #+end_src&lt;/p&gt; 
&lt;p&gt;|----------------------+--------------------------------------------------------------------| | &lt;em&gt;Connection options&lt;/em&gt; | | |----------------------+--------------------------------------------------------------------| | =gptel-use-curl= | Use Curl (default), fallback to Emacs&#39; built-in =url=. | | =gptel-proxy= | Proxy server for requests, passed to curl via =--proxy=. | | =gptel-api-key= | Variable/function that returns the API key for the active backend. | |----------------------+--------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-----------------------+---------------------------------------------------------| | &lt;em&gt;LLM request options&lt;/em&gt; | /(Note: not supported uniformly across LLMs)/ | |-----------------------+---------------------------------------------------------| | =gptel-backend= | Default LLM Backend. | | =gptel-model= | Default model to use, depends on the backend. | | =gptel-stream= | Enable streaming responses, if the backend supports it. | | =gptel-directives= | Alist of system directives, can switch on the fly. | | =gptel-max-tokens= | Maximum token count (in query + response). | | =gptel-temperature= | Randomness in response text, 0 to 2. | | =gptel-cache= | Cache prompts, system message or tools (Anthropic only) | | =gptel-use-context= | How/whether to include additional context | | =gptel-use-tools= | Disable, allow or force LLM tool-use | | =gptel-tools= | List of tools to include with requests | |-----------------------+---------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+----------------------------------------------------------------| | &lt;em&gt;Chat UI options&lt;/em&gt; | | |-------------------------------+----------------------------------------------------------------| | =gptel-default-mode= | Major mode for dedicated chat buffers. | | =gptel-prompt-prefix-alist= | Text inserted before queries. | | =gptel-response-prefix-alist= | Text inserted before responses. | | =gptel-track-response= | Distinguish between user messages and LLM responses? | | =gptel-track-media= | Send images or other media from links? | | =gptel-confirm-tool-calls= | Confirm all tool calls? | | =gptel-include-tool-results= | Include tool results in the LLM response? | | =gptel-use-header-line= | Display status messages in header-line (default) or minibuffer | | =gptel-display-buffer-action= | Placement of the gptel chat buffer. | |-------------------------------+----------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+-------------------------------------------------------| | &lt;em&gt;Org mode UI options&lt;/em&gt; | | |-------------------------------+-------------------------------------------------------| | =gptel-org-branching-context= | Make each outline path a separate conversation branch | | =gptel-org-ignore-elements= | Ignore parts of the buffer when sending a query | |-------------------------------+-------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|---------------------------------+-------------------------------------------------------------| | &lt;em&gt;Hooks for customization&lt;/em&gt; | | |---------------------------------+-------------------------------------------------------------| | =gptel-save-state-hook= | Runs before saving the chat state to a file on disk | | =gptel-prompt-filter-hook= | Runs in a temp buffer to transform text before sending | | =gptel-post-request-hook= | Runs immediately after dispatching a =gptel-request=. | | =gptel-pre-response-hook= | Runs before inserting the LLM response into the buffer | | =gptel-post-response-functions= | Runs after inserting the full LLM response into the buffer | | =gptel-post-stream-hook= | Runs after each streaming insertion | | =gptel-context-wrap-function= | To include additional context formatted your way | | =gptel-rewrite-default-action= | Automatically diff, ediff, merge or replace refactored text | | =gptel-post-rewrite-functions= | Runs after a =gptel-rewrite= request succeeds | |---------------------------------+-------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt; 
&lt;p&gt;** COMMENT Will you add feature X?&lt;/p&gt; 
&lt;p&gt;Maybe, I&#39;d like to experiment a bit more first. Features added since the inception of this package include&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Curl support (=gptel-use-curl=).&lt;/li&gt; 
 &lt;li&gt;Streaming responses (=gptel-stream=).&lt;/li&gt; 
 &lt;li&gt;Cancelling requests in progress (=gptel-abort=)&lt;/li&gt; 
 &lt;li&gt;General API for writing your own commands (=gptel-request=, [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][wiki]])&lt;/li&gt; 
 &lt;li&gt;Dispatch menus using Transient (=gptel-send= with a prefix arg).&lt;/li&gt; 
 &lt;li&gt;Specifying the conversation context size.&lt;/li&gt; 
 &lt;li&gt;GPT-4 support.&lt;/li&gt; 
 &lt;li&gt;Response redirection (to the echo area, another buffer, etc).&lt;/li&gt; 
 &lt;li&gt;A built-in refactor/rewrite prompt.&lt;/li&gt; 
 &lt;li&gt;Limiting conversation context to Org headings using properties (#58).&lt;/li&gt; 
 &lt;li&gt;Saving and restoring chats (#17).&lt;/li&gt; 
 &lt;li&gt;Support for local LLMs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Features being considered or in the pipeline:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fully stateless design ([[https://github.com/karthink/gptel/discussions/119][discussion #119]]).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Alternatives&lt;/p&gt; 
&lt;p&gt;Other Emacs clients for LLMs include&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/ahyatt/llm][llm]]: llm provides a uniform API across language model providers for building LLM clients in Emacs, and is intended as a library for use by package authors. For similar scripting purposes, gptel provides the command =gptel-request=, which see.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/s-kostyaev/ellama][Ellama]]: A full-fledged LLM client built on llm, that supports many LLM providers (Ollama, Open AI, Vertex, GPT4All and more). Its usage differs from gptel in that it provides separate commands for dozens of common tasks, like general chat, summarizing code/text, refactoring code, improving grammar, translation and so on.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: comint-shell based interaction with ChatGPT. Also supports DALL-E, executable code blocks in the responses, and more.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rksm/org-ai][org-ai]]: Interaction through special =#+begin_ai ... #+end_ai= Org-mode blocks. Also supports DALL-E, querying ChatGPT with the contents of project files, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are several more: [[https://github.com/MichaelBurge/leafy-mode][leafy-mode]], [[https://github.com/iwahbe/chat.el][chat.el]], [[https://github.com/stuhlmueller/gpt.el][gpt.el]], [[https://github.com/AnselmC/le-gpt.el][le-gpt]], [[https://github.com/stevemolitor/robby][robby]].&lt;/p&gt; 
&lt;p&gt;*** Packages using gptel&lt;/p&gt; 
&lt;p&gt;gptel is a general-purpose package for chat and ad-hoc LLM interaction. The following packages use gptel to provide additional or specialized functionality:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/karthink/gptel-quick][gptel-quick]]: Quickly look up the region or text at point.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog/evedel][Evedel]]: Instructed LLM Programmer/Assistant.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/lanceberge/elysium][Elysium]]: Automatically apply AI-generated changes as you code.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/kamushadenes/ai-blog.el][ai-blog.el]]: Streamline generation of blog posts in Hugo.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/douo/magit-gptcommit][magit-gptcommit]]: Generate Commit Messages within magit-status Buffer using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/armindarvish/consult-omni][consult-omni]]: Versatile multi-source search package. It includes gptel as one of its many sources.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]]: Provides branching conversations in Org buffers using gptel. (Note that gptel includes this feature as well (see =gptel-org-branching-context=), but requires a recent version of Org mode 9.7 or later to be installed.)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rob137/Corsair][Corsair]]: Helps gather text to populate LLM prompts for gptel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** COMMENT Older Breaking Changes&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-post-response-hook= has been renamed to =gptel-post-response-functions=, and functions in this hook are now called with two arguments: the start and end buffer positions of the response. This should make it easy to act on the response text without having to locate it first.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Possible breakage, see #120: If streaming responses stop working for you after upgrading to v0.5, try reinstalling gptel and deleting its native comp eln cache in =native-comp-eln-load-path=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The user option =gptel-host= is deprecated. If the defaults don&#39;t work for you, use =gptel-make-openai= (which see) to customize server settings.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-api-key-from-auth-source= now searches for the API key using the host address for the active LLM backend, /i.e./ &quot;api.openai.com&quot; when using ChatGPT. You may need to update your =~/.authinfo=.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Acknowledgments&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/pabl0][Henrik Ahlgren]] for a keen eye to detail and polish applied to gptel&#39;s UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/positron-solutions/][Positron Solutions]] for extensive testing of the tool use feature and the design of gptel&#39;s in-buffer tool use records.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]] for feedback and code assistance with gptel-menu&#39;s redesign&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/meain][Abin Simon]] for extensive feedback on improving gptel&#39;s directives and UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/algal][Alexis Gallagher]] and [[https://github.com/d1egoaz][Diego Alvarez]] for fixing a nasty multi-byte bug with =url-retrieve=.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/tarsius][Jonas Bernoulli]] for the Transient library.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog][daedsidog]] for adding context support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/Aquan1412][Aquan1412]] for adding PrivateGPT support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/r0man][r0man]] for improving gptel&#39;s Curl integration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Local Variables:&lt;/h1&gt; 
&lt;h1&gt;toc-org-max-depth: 4&lt;/h1&gt; 
&lt;h1&gt;eval: (and (fboundp &#39;toc-org-mode) (toc-org-mode 1))&lt;/h1&gt; 
&lt;h1&gt;End:&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>emacs-lsp/lsp-mode</title>
      <link>https://github.com/emacs-lsp/lsp-mode</link>
      <description>&lt;p&gt;Emacs client/library for the Language Server Protocol&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; 
&lt;h2&gt;title: LSP Mode - Language Server Protocol support for Emacs description: Language Server Protocol support with multiples languages support for Emacs root_file: README.md&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/lsp-mode&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/lsp-mode-badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/lsp-mode&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/lsp-mode-badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/swuxy5AAgT&quot;&gt;&lt;img src=&quot;https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/emacs-lsp/lsp-mode/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/logo.png&quot; width=&quot;240&quot; align=&quot;right&quot;&gt; 
&lt;h1&gt;Language Server Protocol Support for Emacs&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/head.png&quot; alt=&quot;LSP mode&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode&quot;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/installation&quot;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/languages&quot;&gt;&lt;strong&gt;languages&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/settings/mode/&quot;&gt;&lt;strong&gt;settings&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/&quot;&gt;&lt;strong&gt;tutorials&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/troubleshooting&quot;&gt;&lt;strong&gt;troubleshooting&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/gallery&quot;&gt;&lt;strong&gt;screenshots&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/faq&quot;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;❤️&lt;/span&gt; &lt;strong&gt;Community Driven&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💎&lt;/span&gt; &lt;strong&gt;Fully featured&lt;/strong&gt; - supports &lt;strong&gt;all&lt;/strong&gt; features in Language Server Protocol v3.14.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;strong&gt;Fast&lt;/strong&gt; - see &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/performance&quot;&gt;performance section&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🌟&lt;/span&gt; &lt;strong&gt;Flexible&lt;/strong&gt; - choose between full-blown IDE with flashy UI or minimal distraction free.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;⚙&lt;/span&gt; &lt;strong&gt;Easy to configure&lt;/strong&gt; - works out of the box and automatically upgrades if additional packages are present.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Client for &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt; 
 &lt;li&gt;Real-time Diagnostics/linting via &lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;flycheck&lt;/a&gt; (recommended) or &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26 (requires flymake&amp;gt;=1.0.5)&lt;/li&gt; 
 &lt;li&gt;Code completion - &lt;code&gt;company-capf&lt;/code&gt; / &lt;code&gt;completion-at-point&lt;/code&gt; (note that &lt;a href=&quot;https://github.com/tigersoldier/company-lsp&quot;&gt;company-lsp&lt;/a&gt; is no longer supported).&lt;/li&gt; 
 &lt;li&gt;Hovers - using &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Code actions - via &lt;code&gt;lsp-execute-code-action&lt;/code&gt;, &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#code-actions-on-modeline&quot;&gt;modeline&lt;/a&gt; (recommended) or &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt; sideline.&lt;/li&gt; 
 &lt;li&gt;Code outline - using builtin &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&quot;&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Code navigation - using builtin &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&quot;&gt;xref&lt;/a&gt;, &lt;a href=&quot;https://github.com/emacs-lsp/lsp-treemacs&quot;&gt;lsp-treemacs&lt;/a&gt; tree views or &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt; peek functions.&lt;/li&gt; 
 &lt;li&gt;Code lens&lt;/li&gt; 
 &lt;li&gt;Symbol highlights&lt;/li&gt; 
 &lt;li&gt;Formatting&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#project-errors-on-modeline&quot;&gt;Project errors&lt;/a&gt; on modeline&lt;/li&gt; 
 &lt;li&gt;Debugger - &lt;a href=&quot;https://emacs-lsp.github.io/dap-mode/&quot;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#breadcrumb-on-headerline&quot;&gt;Breadcrumb on headerline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Helm integration - &lt;a href=&quot;https://github.com/emacs-lsp/helm-lsp/&quot;&gt;helm-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ivy integration - &lt;a href=&quot;https://github.com/emacs-lsp/lsp-ivy/&quot;&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Consult integration - &lt;a href=&quot;https://github.com/gagbo/consult-lsp&quot;&gt;consult-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Treemacs integration - &lt;a href=&quot;https://github.com/emacs-lsp/lsp-treemacs&quot;&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justbur/emacs-which-key/&quot;&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#iedit&quot;&gt;iedit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#dired&quot;&gt;dired&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#integrations&quot;&gt;ido&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Presentations/demos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/SystemCrafters&quot;&gt;System Crafters&lt;/a&gt; channel &lt;a href=&quot;https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN&quot;&gt;Emacs IDE Videos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skybert&quot;&gt;skybert&lt;/a&gt;&#39;s emacsconf &lt;a href=&quot;https://media.emacsconf.org/2019/19.html&quot;&gt;presentation&lt;/a&gt; (Java)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/thatwist&quot;&gt;thatwist&lt;/a&gt;&#39;s ScalaUA Conference &lt;a href=&quot;https://www.youtube.com/watch?v=x7ey0ifcqAg&amp;amp;feature=youtu.be&quot;&gt;presentation&lt;/a&gt; (Scala)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;See also&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacs-lsp/lsp-docker/&quot;&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sebastiencs/company-box/&quot;&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacs-lsp/dap-mode&quot;&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justbur/emacs-which-key/&quot;&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bbatsov/projectile/&quot;&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ubolonton/emacs-tree-sitter&quot;&gt;emacs-tree-sitter&lt;/a&gt; - Faster, fine-grained code highlighting via &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter&quot;&gt;tree-sitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://akrl.sdf.org/gccemacs.html&quot;&gt;gccemacs&lt;/a&gt; - modified Emacs capable of compiling and running Emacs Lisp as native code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Contributions are very much welcome!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Documentation for clients is generated from doc comments in the clients themselves (see &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-doc.el&quot;&gt;lsp-doc.el&lt;/a&gt;) and some metadata (see &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-clients.json&quot;&gt;lsp-clients.json&lt;/a&gt;) so please submit corrections accordingly.&lt;/p&gt; 
&lt;h2&gt;Support the project&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;emacs-lsp&lt;/code&gt; organization has more than &lt;strong&gt;20,000 lines of code&lt;/strong&gt;, to keep all of this working, we need to implement new features and help the community on a lot of issues.&lt;/p&gt; 
&lt;p&gt;You can help us keep going and improving it by &lt;strong&gt;&lt;a href=&quot;https://github.com/sponsors/emacs-lsp&quot;&gt;supporting the project&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/emacs-lsp&quot;&gt;&lt;img src=&quot;https://opencollective.com/emacs-lsp/tiers/backer.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Members&lt;/h3&gt; 
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt; 
&lt;table id=&quot;emacs-lsp-members&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/totbwf&quot;&gt; &lt;img src=&quot;https://github.com/totbwf.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;totbwf&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;totbwf&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; F# 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/brotzeit&quot;&gt; &lt;img src=&quot;https://github.com/brotzeit.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;brotzeit&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;brotzeit&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Rust 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/dsyzling&quot;&gt; &lt;img src=&quot;https://github.com/dsyzling.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;dsyzling&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;dsyzling&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Scala 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/kurnevsky&quot;&gt; &lt;img src=&quot;https://github.com/kurnevsky.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;kurnevsky&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kurnevsky&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Scala | Rust 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/seagle0128&quot;&gt; &lt;img src=&quot;https://github.com/seagle0128.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;seagle0128&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;seagle0128&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Go | Python MS 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/sebastiansturm&quot;&gt; &lt;img src=&quot;https://github.com/sebastiansturm.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;sebastiansturm&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;sebastiansturm&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core | C++ 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/vibhavp&quot;&gt; &lt;img src=&quot;https://github.com/vibhavp.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;vibhavp&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;vibhavp&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/yyoncho&quot;&gt; &lt;img src=&quot;https://github.com/yyoncho.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;yyoncho&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;yyoncho&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core | Java 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/ericdallo&quot;&gt; &lt;img src=&quot;https://github.com/ericdallo.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;ericdallo&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;ericdallo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Dart/Flutter | Clojure 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/danielmartin&quot;&gt; &lt;img src=&quot;https://github.com/danielmartin.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;danielmartin&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;danielmartin&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; C++ | Swift 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/kiennq&quot;&gt; &lt;img src=&quot;https://github.com/kiennq.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;kiennq&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kiennq&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; completions | pwsh 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/nbfalcon&quot;&gt; &lt;img src=&quot;https://github.com/nbfalcon.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;nbfalcon&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;nbfalcon&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core | iedit 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/psibi&quot;&gt; &lt;img src=&quot;https://github.com/psibi.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;psibi&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;psibi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Terraform | Nix 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/razzmatazz&quot;&gt; &lt;img src=&quot;https://github.com/razzmatazz.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;razzmatazz&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;razzmatazz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; C# | F# 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/jcs090218&quot;&gt; &lt;img src=&quot;https://github.com/jcs090218.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;jcs090218&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;jcs090218&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
  </channel>
</rss>
