<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Daily Trending</title>
    <description>Daily Trending of Lua in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:32:38 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>Exafunction/codeium.nvim</title>
      <link>https://github.com/Exafunction/codeium.nvim</link>
      <description>&lt;p&gt;A native neovim extension for Codeium&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;300&quot; alt=&quot;Codeium&quot; src=&quot;https://raw.githubusercontent.com/Exafunction/codeium.nvim/main/codeium.svg?sanitize=true&quot;&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/3XFf78nAx5&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1027685395649015980?label=community&amp;amp;color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=codeiumdev&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/style--blue?style=social&amp;amp;logo=twitter&amp;amp;label=Follow%20%40codeiumdev&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/license/Exafunction/codeium.nvim&quot; alt=&quot;License&quot;&gt; &lt;a href=&quot;https://docs.codeium.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Codeium%20Docs-09B6A2&quot; alt=&quot;Docs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeium.canny.io/feature-requests/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Feature%20Requests-6b69ff&quot; alt=&quot;Canny Board&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeium.com?repo_name=exafunction%2Fcodeium.nvim&quot;&gt;&lt;img src=&quot;https://codeium.com/badges/main&quot; alt=&quot;built with Codeium&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Codeium.codeium&quot;&gt;&lt;img src=&quot;https://img.shields.io/visual-studio-marketplace/i/Codeium.codeium?label=Visual%20Studio&amp;amp;logo=visualstudio&quot; alt=&quot;Visual Studio&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://plugins.jetbrains.com/plugin/20540-codeium/&quot;&gt;&lt;img src=&quot;https://img.shields.io/jetbrains/plugin/d/20540?label=JetBrains&quot; alt=&quot;JetBrains&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://open-vsx.org/extension/Codeium/codeium&quot;&gt;&lt;img src=&quot;https://img.shields.io/open-vsx/dt/Codeium/codeium?label=Open%20VSX&quot; alt=&quot;Open VSX&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://chrome.google.com/webstore/detail/codeium/hobjkcpmjhlegmobgonaagepfckjkceh&quot;&gt;&lt;img src=&quot;https://img.shields.io/chrome-web-store/users/hobjkcpmjhlegmobgonaagepfckjkceh?label=Google%20Chrome&amp;amp;logo=googlechrome&amp;amp;logoColor=FFFFFF&quot; alt=&quot;Google Chrome&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;codeium.nvim&lt;/h1&gt; 
&lt;p&gt;Native &lt;a href=&quot;https://www.codeium.com/&quot;&gt;Codeium&lt;/a&gt; plugin for Neovim.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/522465/215312040-d5e91a6b-cffa-48f1-909f-360328b5af79.webm&quot;&gt;Completion in Action&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
    &quot;Exafunction/codeium.nvim&quot;,
    requires = {
        &quot;nvim-lua/plenary.nvim&quot;,
        &quot;hrsh7th/nvim-cmp&quot;,
    },
    config = function()
        require(&quot;codeium&quot;).setup({
        })
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;Exafunction/codeium.nvim&quot;,
    dependencies = {
        &quot;nvim-lua/plenary.nvim&quot;,
        &quot;hrsh7th/nvim-cmp&quot;,
    },
    config = function()
        require(&quot;codeium&quot;).setup({
        })
    end
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;After installation and configuration, you will need to authenticate with Codeium. This can be done by running &lt;code&gt;:Codeium Auth&lt;/code&gt;, copying the token from your browser and pasting it into API token request.&lt;/p&gt; 
&lt;p&gt;To use Codeium Chat, execute the &lt;code&gt;:Codeium Chat&lt;/code&gt; command. The chat will be opened in your default browser using the xdg-open command.&lt;/p&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;config_path&lt;/code&gt;: the path to the config file, used to store the API key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;bin_path&lt;/code&gt;: the path to the directory where the Codeium server will be downloaded to.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;api&lt;/code&gt;: information about the API server to use:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;host&lt;/code&gt;: the hostname. Example: &lt;code&gt;&quot;codeium.example.com&quot;&lt;/code&gt;. Required when using enterprise mode&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;port&lt;/code&gt;: the port. Defaults to &lt;code&gt;443&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: the path prefix to the API server. Default for enterprise: &lt;code&gt;&quot;/_route/api_server&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;portal_url&lt;/code&gt;: the portal URL to use (for enterprise mode). Defaults to &lt;code&gt;host:port&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;enterprise_mode&lt;/code&gt;: enable enterprise mode&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;detect_proxy&lt;/code&gt;: enable or disable proxy detection&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;enable_chat&lt;/code&gt;: enable chat functionality&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;enable_cmp_source&lt;/code&gt;: defaults to true. Set &lt;code&gt;false&lt;/code&gt; to disable registering a &lt;code&gt;cmp&lt;/code&gt; source&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;virtual_text&lt;/code&gt;: configuration for showing completions in virtual text&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt;: defaults to &lt;code&gt;false&lt;/code&gt;. Set &lt;code&gt;true&lt;/code&gt; to enable the virtual text feature&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filetypes&lt;/code&gt;: A mapping of filetype to true or false, to enable virtual text&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;default_filetype_enabled&lt;/code&gt;: Whether to enable virtual text of not for types not listed in &lt;code&gt;filetypes&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;manual&lt;/code&gt;: Set &lt;code&gt;true&lt;/code&gt; to only trigger Codeium using a manual Lua function call&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;idle_delay&lt;/code&gt;: defaults to &lt;code&gt;75&lt;/code&gt;. Time in ms to wait before requesting completions after typing stops.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;virtual_text_priority&lt;/code&gt;: defaults to &lt;code&gt;65535&lt;/code&gt;. Priority of the virtual text&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;map_keys&lt;/code&gt;: defaults to &lt;code&gt;true&lt;/code&gt;. Set &lt;code&gt;false&lt;/code&gt; to not set any key bindings for completions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;accept_fallback&lt;/code&gt;: Emulate pressing this key when using the accept key binding but there is no completion. Defaults to &quot;\t&quot;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;key_bindings&lt;/code&gt;: key bindings for accepting and cycling through completions 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;accept&lt;/code&gt;: key binding for accepting a completion, default is &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;accept_word&lt;/code&gt;: key binding for accepting only the next word, default is not set&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;accept_line&lt;/code&gt;: key binding for accepting only the next line, default is not set&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;clear&lt;/code&gt;: key binding for clearing the virtual text, default is not set&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;next&lt;/code&gt;: key binding for cycling to the next completion, default is &lt;code&gt;&amp;lt;M-]&amp;gt;&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;prev&lt;/code&gt;: key binding for cycling to the previous completion, default is &lt;code&gt;&amp;lt;M-[&amp;gt;&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;workspace_root&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;use_lsp&lt;/code&gt;: Use Neovim&#39;s LSP support to find the workspace root, if possible.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;paths&lt;/code&gt;: paths to files that indicate a workspace root when not using the LSP support&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;find_root&lt;/code&gt;: An optional function that the plugin will call to find the workspace root.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tools&lt;/code&gt;: paths to binaries used by the plugin:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;uname&lt;/code&gt;: not needed on Windows, defaults given.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;uuidgen&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;gzip&lt;/code&gt;: not needed on Windows, default implemenation given using powershell.exe Expand-Archive instead&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;language_server&lt;/code&gt;: The path to the language server downloaded from the &lt;a href=&quot;https://github.com/Exafunction/codeium/releases/tag/language-server-v1.1.32&quot;&gt;official source.&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;wrapper&lt;/code&gt;: the path to a wrapper script/binary that is used to execute any binaries not listed under &lt;code&gt;tools&lt;/code&gt;. This is primarily useful for NixOS, where a FHS wrapper can be used for the downloaded codeium server.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;After calling &lt;code&gt;setup&lt;/code&gt;, this plugin will register a source in nvim-cmp. nvim-cmp can then be set up to use this source using the &lt;code&gt;sources&lt;/code&gt; configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp.setup({
    -- ...
    sources = {
        -- ...
        { name = &quot;codeium&quot; }
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are seeing the &lt;code&gt;codeium&lt;/code&gt; source as unused in &lt;code&gt;:CmpStatus&lt;/code&gt;, make sure that &lt;code&gt;nvim-cmp&lt;/code&gt; setup happens before the &lt;code&gt;codeium.nvim&lt;/code&gt; setup.&lt;/p&gt; 
&lt;p&gt;To set a symbol for codeium using lspkind, use the &lt;code&gt;Codeium&lt;/code&gt; keyword. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp.setup({
    -- ...
    formatting = {
        format = require(&#39;lspkind&#39;).cmp_format({
            mode = &quot;symbol&quot;,
            maxwidth = 50,
            ellipsis_char = &#39;...&#39;,
            symbol_map = { Codeium = &quot;&quot;, }
        })
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Virtual Text&lt;/h3&gt; 
&lt;p&gt;The plugin supports showing completions in virtual text. Set &lt;code&gt;virtual_text.enabled&lt;/code&gt; in the options to &lt;code&gt;true&lt;/code&gt; to enable it.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;codeium&quot;).setup({
    -- Optionally disable cmp source if using virtual text only
    enable_cmp_source = false,
    virtual_text = {
        enabled = true,

        -- These are the defaults

        -- Set to true if you never want completions to be shown automatically.
        manual = false,
        -- A mapping of filetype to true or false, to enable virtual text.
        filetypes = {},
        -- Whether to enable virtual text of not for filetypes not specifically listed above.
        default_filetype_enabled = true,
        -- How long to wait (in ms) before requesting completions after typing stops.
        idle_delay = 75,
        -- Priority of the virtual text. This usually ensures that the completions appear on top of
        -- other plugins that also add virtual text, such as LSP inlay hints, but can be modified if
        -- desired.
        virtual_text_priority = 65535,
        -- Set to false to disable all key bindings for managing completions.
        map_keys = true,
        -- The key to press when hitting the accept keybinding but no completion is showing.
        -- Defaults to \t normally or &amp;lt;c-n&amp;gt; when a popup is showing. 
        accept_fallback = nil,
        -- Key bindings for managing completions in virtual text mode.
        key_bindings = {
            -- Accept the current completion.
            accept = &quot;&amp;lt;Tab&amp;gt;&quot;,
            -- Accept the next word.
            accept_word = false,
            -- Accept the next line.
            accept_line = false,
            -- Clear the virtual text.
            clear = false,
            -- Cycle to the next completion.
            next = &quot;&amp;lt;M-]&amp;gt;&quot;,
            -- Cycle to the previous completion.
            prev = &quot;&amp;lt;M-[&amp;gt;&quot;,
        }
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Virtual Text Keybindings&lt;/h4&gt; 
&lt;p&gt;The plugin defines a number of key bindings for managing completion in virtual text mode. You can override these by setting &lt;code&gt;virtual_text.key_bindings&lt;/code&gt;. If you don&#39;t want any key bindings, set &lt;code&gt;virtual_text.map_keys&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, or you can set specific bindings to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;manual&lt;/code&gt; mode is enabled, you can call any of these functions to show completions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Request completions immediately.
require(&#39;codeium.virtual_text&#39;).complete()

-- Request a completion, or cycle to the next if we already have some
require(&#39;codeium.virtual_text&#39;).cycle_or_complete()

-- Complete only after idle_delay has passed with no other calls to debounced_complete().
require(&#39;codeium.virtual_text&#39;).debounced_complete()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Virtual Text Filetypes&lt;/h4&gt; 
&lt;p&gt;You can set the &lt;code&gt;filetypes&lt;/code&gt; and &lt;code&gt;default_filetype_enabled&lt;/code&gt; options in the &lt;code&gt;virtual_text&lt;/code&gt; table to configure which filetypes should use virtual text.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;codeium.virtual_text&#39;).setup({
    virtual_text = {
        filetypes = { 
            python = true,
            markdown = false
        },
        default_filetype_enabled = true
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Show Codeium status in statusline&lt;/h3&gt; 
&lt;p&gt;When using virtual text, Codeium status can be generated by calling &lt;code&gt;require(&#39;codeium.virtual_text&#39;).status_string()&lt;/code&gt;. It produces a 3 char long string with Codeium status:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&#39;3/8&#39;&lt;/code&gt; - third suggestion out of 8&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&#39;0&#39;&lt;/code&gt; - Codeium returned no suggestions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&#39;*&#39;&lt;/code&gt; - waiting for Codeium response&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In order to show it in status line add following line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;set statusline+=%3{v:lua.require(&#39;codeium.virtual_text&#39;).status_string()}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Please check &lt;code&gt;:help statusline&lt;/code&gt; for further information about building statusline in VIM.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;status_string&lt;/code&gt; function can also be used with other statusline plugins. You can call the &lt;code&gt;set_statusbar_refresh&lt;/code&gt; function to customize how the plugin refreshes the status bar.&lt;/p&gt; 
&lt;p&gt;For example, this sets up the plugin with lualine:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;codeium.virtual_text&#39;).set_statusbar_refresh(function()
	require(&#39;lualine&#39;).refresh()
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more customization, you can also call the &lt;code&gt;status&lt;/code&gt; function which returns an object that can be used to create a status string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;function custom_status()
	local status = require(&#39;codeium.virtual_text&#39;).status()

	if status.state == &#39;idle&#39; then
		-- Output was cleared, for example when leaving insert mode
        return &#39; &#39;
    end

	if status.state == &#39;waiting&#39; then
		-- Waiting for response
		return &quot;Waiting...&quot;
    end

	if status.state == &#39;completions&#39; and status.total &amp;gt; 0 then
        return string.format(&#39;%d/%d&#39;, status.current, status.total)
    end

	return &#39; 0 &#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Workspace Root Directory&lt;/h3&gt; 
&lt;p&gt;The plugin uses a few techniques to find the workspace root directory, which helps to inform the autocomplete and chat context.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Call the optional &lt;code&gt;workspace_root.find_root&lt;/code&gt; function, if provided. This is described below.&lt;/li&gt; 
 &lt;li&gt;Query Neovim&#39;s built-in LSP support for the workspace root, if &lt;code&gt;workspace_root.use_lsp&lt;/code&gt; is not set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Search upward in the filesystem for a file or directory in &lt;code&gt;workspace_root.paths&lt;/code&gt; that indicates a workspace root.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The default configuration is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;codeium&#39;).setup({
	workspace_root = {
		use_lsp = true,
		find_root = nil,
		paths = {
			&quot;.bzr&quot;,
			&quot;.git&quot;,
			&quot;.hg&quot;,
			&quot;.svn&quot;,
			&quot;_FOSSIL_&quot;,
			&quot;package.json&quot;,
		}
	}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;find_root&lt;/code&gt; function can help the plugin find the workspace root when you are not using Neovim&#39;s built-in LSP provider. For example, this snippet calls into &lt;code&gt;coc.nvim&lt;/code&gt; to find the workspace root.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;codeium&#39;).setup({
	workspace_root = {
		find_root = function()
			return vim.fn.CocAction(&quot;currentWorkspacePath&quot;)
		end
	}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;The plugin log is written to &lt;code&gt;~/.cache/nvim/codeium/codeium.log&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can set the logging level to one of &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; by exporting the &lt;code&gt;DEBUG_CODEIUM&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;This plugin was initially developed by &lt;a href=&quot;https://github.com/jcdickinson&quot;&gt;@jcdickinson&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kylechui/nvim-surround</title>
      <link>https://github.com/kylechui/nvim-surround</link>
      <description>&lt;p&gt;Add/change/delete surrounding delimiter pairs with ease. Written with ❤️ in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-surround&lt;/h1&gt; 
&lt;p&gt;Surround selections, stylishly &lt;span&gt;😎&lt;/span&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;video src=&quot;https://user-images.githubusercontent.com/48545987/178679494-c7d58bdd-d8ca-4802-a01c-a9444b8b882f.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt; 
&lt;/div&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add/delete/change surrounding pairs 
  &lt;ul&gt; 
   &lt;li&gt;Function calls and HTML tags out-of-the-box&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Dot-repeat previous actions&lt;/li&gt; 
 &lt;li&gt;Set buffer-local mappings and surrounds&lt;/li&gt; 
 &lt;li&gt;Jump to the &lt;em&gt;nearest&lt;/em&gt; surrounding pair for modification&lt;/li&gt; 
 &lt;li&gt;Use a single character as an alias for several text-objects 
  &lt;ul&gt; 
   &lt;li&gt;E.g. &lt;code&gt;q&lt;/code&gt; is aliased to &lt;code&gt;`,&#39;,&quot;&lt;/code&gt;, so &lt;code&gt;csqb&lt;/code&gt; replaces the &lt;em&gt;nearest&lt;/em&gt; set of quotes with parentheses&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Surround using powerful pairs that depend on user input&lt;/li&gt; 
 &lt;li&gt;Modify custom surrounds 
  &lt;ul&gt; 
   &lt;li&gt;First-class support for Vim motions, Lua patterns, and Tree-sitter nodes&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Highlight selections for visual feedback&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🔒&lt;/span&gt; Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/releases&quot;&gt;Neovim 0.8+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[Recommended] If &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt; is installed, then Tree-sitter nodes may be surrounded and modified, in addition to just Vim motions and Lua patterns&lt;/li&gt; 
 &lt;li&gt;[Recommended] If &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&quot;&gt;nvim-treesitter-textobjects&lt;/a&gt; is installed, then Tree-sitter text-objects can be used to define surrounds, simplifying configuration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;📦&lt;/span&gt; Installation&lt;/h2&gt; 
&lt;p&gt;Install this plugin using your favorite plugin manager, and then call &lt;code&gt;require(&quot;nvim-surround&quot;).setup()&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;kylechui/nvim-surround&quot;,
    version = &quot;^3.0.0&quot;, -- Use for stability; omit to use `main` branch for the latest features
    event = &quot;VeryLazy&quot;,
    config = function()
        require(&quot;nvim-surround&quot;).setup({
            -- Configuration here, or leave empty to use defaults
        })
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use({
    &quot;kylechui/nvim-surround&quot;,
    tag = &quot;*&quot;, -- Use for stability; omit to use `main` branch for the latest features
    config = function()
        require(&quot;nvim-surround&quot;).setup({
            -- Configuration here, or leave empty to use defaults
        })
    end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Usage&lt;/h2&gt; 
&lt;p&gt;The three &quot;core&quot; operations of &lt;code&gt;add&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt;/&lt;code&gt;change&lt;/code&gt; can be done with the keymaps &lt;code&gt;ys{motion}{char}&lt;/code&gt;, &lt;code&gt;ds{char}&lt;/code&gt;, and &lt;code&gt;cs{target}{replacement}&lt;/code&gt;, respectively. For the following examples, &lt;code&gt;*&lt;/code&gt; will denote the cursor position:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-help&quot;&gt;    Old text                    Command         New text
--------------------------------------------------------------------------------
    surr*ound_words             ysiw)           (surround_words)
    *make strings               ys$&quot;            &quot;make strings&quot;
    [delete ar*ound me!]        ds]             delete around me!
    remove &amp;lt;b&amp;gt;HTML t*ags&amp;lt;/b&amp;gt;    dst             remove HTML tags
    &#39;change quot*es&#39;            cs&#39;&quot;            &quot;change quotes&quot;
    &amp;lt;b&amp;gt;or tag* types&amp;lt;/b&amp;gt;        csth1&amp;lt;CR&amp;gt;       &amp;lt;h1&amp;gt;or tag types&amp;lt;/h1&amp;gt;
    delete(functi*on calls)     dsf             function calls
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Detailed information on how to use this plugin can be found in &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&quot;&gt;&lt;code&gt;:h nvim-surround.usage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⚙&lt;/span&gt; Configuration&lt;/h2&gt; 
&lt;p&gt;The default configuration is found &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/lua/nvim-surround/config.lua&quot;&gt;here&lt;/a&gt;. Simply call &lt;code&gt;require(&quot;nvim-surround&quot;).setup&lt;/code&gt; or &lt;code&gt;require(&quot;nvim-surround&quot;).buffer_setup&lt;/code&gt; with the desired options.&lt;/p&gt; 
&lt;p&gt;More information on how to configure this plugin can be found in &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&quot;&gt;&lt;code&gt;:h nvim-surround.configuration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/CONTRIBUTING.md&quot;&gt;the contributing file&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Shoutouts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tpope/vim-surround&quot;&gt;vim-surround&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.surround&quot;&gt;mini.surround&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Like this project? Give it a &lt;span&gt;⭐&lt;/span&gt; to show your support!&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nvim-tree/nvim-web-devicons</title>
      <link>https://github.com/nvim-tree/nvim-web-devicons</link>
      <description>&lt;p&gt;Provides Nerd Font icons (glyphs) for use by neovim plugins&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nvim-web-devicons&lt;/h1&gt; 
&lt;p&gt;Provides &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; [^1] icons (glyphs) for use by &lt;em&gt;Neovim&lt;/em&gt; plugins:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Icons by: 
  &lt;ul&gt; 
   &lt;li&gt;Extension&lt;/li&gt; 
   &lt;li&gt;Full name&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Colours&lt;/li&gt; 
 &lt;li&gt;Light and dark variants&lt;/li&gt; 
 &lt;li&gt;API to modify/add icons&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A &lt;code&gt;lua&lt;/code&gt; fork of &lt;a href=&quot;https://github.com/ryanoasis/vim-devicons&quot;&gt;vim-devicons&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Nerd fonts moved some symbols with version 3.0. Version 2.3 is meant for transition, supporting both version 2 and version 3 icons. Nvim-web-devicons requires version 2.3 or above to work properly. If you are unable to update please use your plugin manager to pin version of nvim-web-dev icons to &lt;code&gt;nerd-v2-compat&lt;/code&gt; tag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;[^1]: Not limited to Nerd Font icons: unicode and other fonts may be used.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/wiki/Installing-Neovim&quot;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;A Patched Nerd Font&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;nvim-tree/nvim-web-devicons&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or with &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use &#39;nvim-tree/nvim-web-devicons&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{ &quot;nvim-tree/nvim-web-devicons&quot;, opts = {} },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/nvim-tree/nvim-web-devicons&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/nvim-tree/nvim-web-devicons?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Additional Icons&lt;/h2&gt; 
&lt;p&gt;Additional icons may be added for icons that are present in Nerd Fonts: use the &lt;a href=&quot;https://www.nerdfonts.com/cheat-sheet&quot;&gt;Cheat Sheet&lt;/a&gt; search for available icons.&lt;/p&gt; 
&lt;p&gt;PRs are always welcome! Please see &lt;a href=&quot;https://raw.githubusercontent.com/nvim-tree/nvim-web-devicons/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] If the icon you need is not available on Nerd Fonts you first need to make a PR to a project that feeds glyphs to Nerd Fonts. Probably the most adequate project to contribute is &lt;a href=&quot;https://github.com/devicons/devicon&quot;&gt;https://github.com/devicons/devicon&lt;/a&gt;. Take into account that &lt;strong&gt;months&lt;/strong&gt; can pass before the icon is available on the Nerd Fonts project, once there feel free to open a PR on this project, see &lt;a href=&quot;https://raw.githubusercontent.com/nvim-tree/nvim-web-devicons/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Viewing&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;:NvimWebDeviconsHiTest&lt;/code&gt; to see all icons and their highlighting.&lt;/p&gt; 
&lt;h3&gt;Variants&lt;/h3&gt; 
&lt;p&gt;Light or dark color variants of the icons depend on &lt;code&gt;&amp;amp;background&lt;/code&gt;.&lt;br&gt; The variant can also be set manually in &lt;code&gt;setup&lt;/code&gt; with the &lt;code&gt;variant&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;The variant is updated:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;on &lt;code&gt;OptionSet&lt;/code&gt; event for &lt;code&gt;background&lt;/code&gt;, or&lt;/li&gt; 
 &lt;li&gt;after explicitly calling &lt;code&gt;require(&quot;nvim-web-devicons&quot;).refresh()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;However, be advised that the plugin using nvim-web-devicons may have cached the icons.&lt;/p&gt; 
&lt;h3&gt;Case Sensitivity&lt;/h3&gt; 
&lt;p&gt;Filename icons e.g. &lt;code&gt;&quot;Dockerfile&quot;&lt;/code&gt; are case insensitively matched.&lt;/p&gt; 
&lt;p&gt;Extension icons e.g. &lt;code&gt;&quot;lua&quot;&lt;/code&gt; are case sensitive.&lt;/p&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;p&gt;This adds all the highlight groups for the devicons i.e. it calls &lt;code&gt;vim.api.nvim_set_hl&lt;/code&gt; for all icons this might need to be re-called in a &lt;code&gt;Colorscheme&lt;/code&gt; to re-apply cleared highlights if the color scheme changes&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;nvim-web-devicons&#39;.setup {
 -- your personal icons can go here (to override)
 -- you can specify color or cterm_color instead of specifying both of them
 -- DevIcon will be appended to `name`
 override = {
  zsh = {
    icon = &quot;&quot;,
    color = &quot;#428850&quot;,
    cterm_color = &quot;65&quot;,
    name = &quot;Zsh&quot;
  }
 };
 -- globally enable different highlight colors per icon (default to true)
 -- if set to false all icons will have the default icon&#39;s color
 color_icons = true;
 -- globally enable default icons (default to false)
 -- will get overriden by `get_icons` option
 default = true;
 -- globally enable &quot;strict&quot; selection of icons - icon will be looked up in
 -- different tables, first by filename, and if not found by extension; this
 -- prevents cases when file doesn&#39;t have any extension but still gets some icon
 -- because its name happened to match some extension (default to false)
 strict = true;
 -- set the light or dark variant manually, instead of relying on `background`
 -- (default to nil)
 variant = &quot;light|dark&quot;;
 -- same as `override` but specifically for overrides by filename
 -- takes effect when `strict` is true
 override_by_filename = {
  [&quot;.gitignore&quot;] = {
    icon = &quot;&quot;,
    color = &quot;#f1502f&quot;,
    name = &quot;Gitignore&quot;
  }
 };
 -- same as `override` but specifically for overrides by extension
 -- takes effect when `strict` is true
 override_by_extension = {
  [&quot;log&quot;] = {
    icon = &quot;&quot;,
    color = &quot;#81e043&quot;,
    name = &quot;Log&quot;
  }
 };
 -- same as `override` but specifically for operating system
 -- takes effect when `strict` is true
 override_by_operating_system = {
  [&quot;apple&quot;] = {
    icon = &quot;&quot;,
    color = &quot;#A2AAAD&quot;,
    cterm_color = &quot;248&quot;,
    name = &quot;Apple&quot;,
  },
 };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Get Icon&lt;/h3&gt; 
&lt;p&gt;Get the icon for a given file by passing in the &lt;code&gt;name&lt;/code&gt;, the &lt;code&gt;extension&lt;/code&gt; and an &lt;em&gt;optional&lt;/em&gt; options &lt;code&gt;table&lt;/code&gt;. The name is passed in to check for an exact match e.g. &lt;code&gt;.bashrc&lt;/code&gt; if there is no exact name match the extension is used. Calls &lt;code&gt;.setup()&lt;/code&gt; if it hasn&#39;t already ran.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, options)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can used to change how the plugin works the keys include &lt;code&gt;default = &amp;lt;boolean&amp;gt;&lt;/code&gt; and &lt;code&gt;strict = &amp;lt;boolean&amp;gt;&lt;/code&gt;. If the default key is set to true this function will return a default if there is no matching icon. If the strict key is set to true this function will lookup icon specifically by filename, and if not found then specifically by extension, and fallback to default icon if default key is set to true. e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, { default = true })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check if the setup function was already called with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;nvim-web-devicons&#39;.has_loaded()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Get icon and color code&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;get_icon_color&lt;/code&gt; differs from &lt;code&gt;get_icon&lt;/code&gt; only in the second return value. &lt;code&gt;get_icon_cterm_color&lt;/code&gt; returns cterm color instead of gui color &lt;code&gt;get_icon&lt;/code&gt; returns icon and highlight name. If you want to get color code, you can use this function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local icon, color = require&#39;nvim-web-devicons&#39;.get_icon_color(&quot;init.lua&quot;, &quot;lua&quot;)
assert(icon == &quot;&quot;)
assert(color == &quot;#51a0cf&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Get all icons&lt;/h3&gt; 
&lt;p&gt;It is possible to get all of the registered icons with the &lt;code&gt;get_icons()&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;nvim-web-devicons&#39;.get_icons()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be useful for debugging purposes or for creating custom highlights for each icon.&lt;/p&gt; 
&lt;p&gt;Mapped categories can be fetched via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;nvim-web-devicons&#39;.get_icons_by_filename()
require&#39;nvim-web-devicons&#39;.get_icons_by_extension()
require&#39;nvim-web-devicons&#39;.get_icons_by_operating_system()
require&#39;nvim-web-devicons&#39;.get_icons_by_desktop_environment()
require&#39;nvim-web-devicons&#39;.get_icons_by_window_manager()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Set an icon&lt;/h3&gt; 
&lt;p&gt;You can override individual icons with the &lt;code&gt;set_icon({...})&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-web-devicons&quot;).set_icon {
  zsh = {
    icon = &quot;&quot;,
    color = &quot;#428850&quot;,
    cterm_color = &quot;65&quot;,
    name = &quot;Zsh&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can override the default icon with the &lt;code&gt;set_default_icon(icon, color, cterm_color)&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-web-devicons&quot;).set_default_icon(&#39;&#39;, &#39;#6d8086&#39;, 65)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Getting and setting icons by filetype&lt;/h3&gt; 
&lt;p&gt;You can get the icon and colors associated with a filetype using the &lt;code&gt;by_filetype&lt;/code&gt; functions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-web-devicons&quot;).get_icon_by_filetype(filetype, opts)
require(&quot;nvim-web-devicons&quot;).get_icon_colors_by_filetype(filetype, opts)
require(&quot;nvim-web-devicons&quot;).get_icon_color_by_filetype(filetype, opts)
require(&quot;nvim-web-devicons&quot;).get_icon_cterm_color_by_filetype(filetype, opts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or set the icon to use for a filetype with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-web-devicons&quot;).set_icon_by_filetype { cpp = &quot;c&quot;, pandoc = &quot;md&quot;, }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These functions are the same as their counterparts without the &lt;code&gt;_by_filetype&lt;/code&gt; suffix, but they take a filetype instead of a name/extension.&lt;/p&gt; 
&lt;p&gt;You can also use &lt;code&gt;get_icon_name_by_filetype(filetype)&lt;/code&gt; to get the icon name associated with the filetype.&lt;/p&gt; 
&lt;h2&gt;Known Issues&lt;/h2&gt; 
&lt;h3&gt;My &lt;code&gt;setup&lt;/code&gt; Overrides Are Not Applied&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Cause:&lt;/em&gt; A plugin may be calling nvim-web-devicons &lt;code&gt;setup&lt;/code&gt; before you do. Your &lt;code&gt;setup&lt;/code&gt; call will be ignored.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Workaround:&lt;/em&gt; Call nvim-web-devicons &lt;code&gt;setup&lt;/code&gt; before the plugin&#39;s own &lt;code&gt;setup&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Windows and WSL not rendering icons properly on some terminals&lt;/h3&gt; 
&lt;p&gt;On Windows and WSL, it is possible that the icons are not rendered properly when using a terminal that relies on Windows&#39; default system libraries. An example of this is Alacritty (&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons/issues/271#issuecomment-2081280928&quot;&gt;#271&lt;/a&gt;). Other terminals (e.g. Windows Terminal, and WezTerm) do no have this issue, as they ship newer versions of these libraries. More precisely, they use newer versions of &lt;code&gt;conpty.dll&lt;/code&gt; and &lt;code&gt;OpenConsole.exe&lt;/code&gt;. So, as a workaround to the rendering issue, you need to make your terminal use these newer files. Whether this is possible depends on the terminal you are using. Please refer to the terminal&#39;s documentation for this.&lt;/p&gt; 
&lt;p&gt;In the specific case of Alacritty, you need to place up-to-date &lt;code&gt;conpty.dll&lt;/code&gt; and &lt;code&gt;OpenConsole.exe&lt;/code&gt; files in your &lt;code&gt;PATH&lt;/code&gt;. Microsoft does not provide these files directly, but you can get them from other terminal emulators that ship them.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;PRs are always welcome! Please see &lt;a href=&quot;https://raw.githubusercontent.com/nvim-tree/nvim-web-devicons/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>akinsho/toggleterm.nvim</title>
      <link>https://github.com/akinsho/toggleterm.nvim</link>
      <description>&lt;p&gt;A neovim lua plugin to help easily manage multiple terminal windows&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; toggleterm.nvim &lt;/h1&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p align=&quot;center&quot;&gt;A &lt;i&gt;neovim&lt;/i&gt; plugin to persist and toggle multiple terminals during an editing session&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/22454918/224485816-8b0cb1b8-b0e6-4da6-9d71-a7299d39f1a0.gif&quot; alt=&quot;toggleterm in action&quot;&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h3&gt;Multiple orientations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/22454918/115306123-42d2ac00-a15f-11eb-84fc-c4246ee82a09.png&quot; alt=&quot;floating window&quot;&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/22454918/224485828-cd509271-8288-46e2-afb4-4e520fa049cb.png&quot; alt=&quot;vertical-terms&quot;&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Tab&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/22454918/133490969-6a59e623-79db-4ca7-a73b-ef4b24a73b91.gif&quot; alt=&quot;tab orientation&quot;&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h3&gt;Send commands to different terminals&lt;/h3&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/22454918/112119367-36d1e980-8bb5-11eb-9787-5936391127a3.gif&quot; alt=&quot;exec&quot;&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h3&gt;Winbar (Experimental/Nightly ONLY)&lt;/h3&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;img width=&quot;1728&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/22454918/179199998-75ec16cb-8271-490e-925f-6c82c50ffc5d.png&quot;&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;This plugin only works in &lt;em&gt;Neovim 0.7&lt;/em&gt; or newer.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer&lt;/a&gt; in lua&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {&quot;akinsho/toggleterm.nvim&quot;, tag = &#39;*&#39;, config = function()
  require(&quot;toggleterm&quot;).setup()
end}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; in lua&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- amongst your other plugins
  {&#39;akinsho/toggleterm.nvim&#39;, version = &quot;*&quot;, config = true}
  -- or
  {&#39;akinsho/toggleterm.nvim&#39;, version = &quot;*&quot;, opts = {--[[ things you want to change go here]]}}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; in vimscript&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;akinsho/toggleterm.nvim&#39;, {&#39;tag&#39; : &#39;*&#39;}

lua require(&quot;toggleterm&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can/should specify a tag for the current major version of the plugin, to avoid breaking changes as this plugin evolves. To use a version of this plugin compatible with nvim versions less than 0.7 please use the tag &lt;code&gt;v1.*&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Notices&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;28/07/1990&lt;/strong&gt; — If using &lt;code&gt;persist_mode&lt;/code&gt; terminal mappings should be changed to use &lt;code&gt;wincmd&lt;/code&gt; instead otherwise persist mode will not work correctly. See &lt;a href=&quot;https://raw.githubusercontent.com/akinsho/toggleterm.nvim/main/#terminal-window-mappings&quot;&gt;here&lt;/a&gt; for details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;p&gt;Neovim&#39;s terminal is a very cool, but not super ergonomic tool to use. I find that I often want to set a process going and leave it to continue to run in the background. I don&#39;t need to see it all the time. I just need to be able to refer back to it at intervals. I also sometimes want to create a new terminal and run a few commands.&lt;/p&gt; 
&lt;p&gt;Sometimes I want these side by side, and I &lt;em&gt;really&lt;/em&gt; want these terminals to be easy to access. I also want my terminal to look different from non-terminal buffers, so I use &lt;code&gt;winhighlight&lt;/code&gt; to darken them based on the &lt;code&gt;Normal&lt;/code&gt; background colour.&lt;/p&gt; 
&lt;p&gt;This is the exact use case this was designed for. If that&#39;s your use case this might work for you.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;All I really want this plugin to be is what I described above. A wrapper around the terminal functionality.&lt;/p&gt; 
&lt;p&gt;It basically (almost) does all that I need it to.&lt;/p&gt; 
&lt;p&gt;I won&#39;t be turning this into a REPL plugin or doing a bunch of complex stuff. If you find any issues, &lt;em&gt;please&lt;/em&gt; consider a &lt;em&gt;pull request&lt;/em&gt; not an issue. I&#39;m also going to be pretty conservative about what I add.&lt;/p&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;p&gt;This plugin must be explicitly enabled by using &lt;code&gt;require(&quot;toggleterm&quot;).setup{}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Setting the &lt;code&gt;open_mapping&lt;/code&gt; key to use for toggling the terminal(s) will set up mappings for &lt;em&gt;normal&lt;/em&gt; mode. The &lt;code&gt;open_mapping&lt;/code&gt; can be a key string or an array of key strings. If you prefix the mapping with a number that particular terminal will be opened. Otherwise if a prefix is not set, then the last toggled terminal will be opened. In case there are multiple terminals opened they&#39;ll all be closed, and on the next mapping key they&#39;ll be restored.&lt;/p&gt; 
&lt;p&gt;If you set the &lt;code&gt;insert_mappings&lt;/code&gt; key to &lt;code&gt;true&lt;/code&gt;, the mapping will also take effect in insert mode; similarly setting &lt;code&gt;terminal_mappings&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will have the mappings take effect in the opened terminal.&lt;/p&gt; 
&lt;p&gt;However you will not be able to use a count with the open mapping in terminal and insert modes. You can create buffer specific mappings to exit terminal mode and then use a count with the open mapping. Check &lt;em&gt;Terminal window mappings&lt;/em&gt; for an example of how to do this.&lt;/p&gt; 
&lt;p&gt;alternatively you can do this manually (not recommended but, your prerogative)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; set
autocmd TermEnter term://*toggleterm#*
      \ tnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &quot;ToggleTerm&quot;&amp;lt;CR&amp;gt;

&quot; By applying the mappings this way you can pass a count to your
&quot; mapping to open a specific window.
&quot; For example: 2&amp;lt;C-t&amp;gt; will open terminal 2
nnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &quot;ToggleTerm&quot;&amp;lt;CR&amp;gt;
inoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;exe v:count1 . &quot;ToggleTerm&quot;&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Please ensure you have set &lt;code&gt;hidden&lt;/code&gt; in your neovim config, otherwise the terminals will be discarded when closed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Please do not copy and paste this configuration! It is here to show what options are available. It is not written to be used as is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;toggleterm&quot;).setup{
  -- size can be a number or function which is passed the current terminal
  size = 20 | function(term)
    if term.direction == &quot;horizontal&quot; then
      return 15
    elseif term.direction == &quot;vertical&quot; then
      return vim.o.columns * 0.4
    end
  end,
  open_mapping = [[&amp;lt;c-\&amp;gt;]], -- or { [[&amp;lt;c-\&amp;gt;]], [[&amp;lt;c-¥&amp;gt;]] } if you also use a Japanese keyboard.
  on_create = fun(t: Terminal), -- function to run when the terminal is first created
  on_open = fun(t: Terminal), -- function to run when the terminal opens
  on_close = fun(t: Terminal), -- function to run when the terminal closes
  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout
  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr
  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits
  hide_numbers = true, -- hide the number column in toggleterm buffers
  shade_filetypes = {},
  autochdir = false, -- when neovim changes it current directory the terminal will change it&#39;s own when next it&#39;s opened
  highlights = {
    -- highlights which map to a highlight group name and a table of it&#39;s values
    -- NOTE: this is only a subset of values, any group placed here will be set for the terminal window split
    Normal = {
      guibg = &quot;&amp;lt;VALUE-HERE&amp;gt;&quot;,
    },
    NormalFloat = {
      link = &#39;Normal&#39;
    },
    FloatBorder = {
      guifg = &quot;&amp;lt;VALUE-HERE&amp;gt;&quot;,
      guibg = &quot;&amp;lt;VALUE-HERE&amp;gt;&quot;,
    },
  },
  shade_terminals = true, -- NOTE: this option takes priority over highlights specified so if you specify Normal highlights you should set this to false
  shading_factor = &#39;&amp;lt;number&amp;gt;&#39;, -- the percentage by which to lighten dark terminal background, default: -30
  shading_ratio = &#39;&amp;lt;number&amp;gt;&#39;, -- the ratio of shading factor for light/dark terminal background, default: -3
  start_in_insert = true,
  insert_mappings = true, -- whether or not the open mapping applies in insert mode
  terminal_mappings = true, -- whether or not the open mapping applies in the opened terminals
  persist_size = true,
  persist_mode = true, -- if set to true (default) the previous terminal mode will be remembered
  direction = &#39;vertical&#39; | &#39;horizontal&#39; | &#39;tab&#39; | &#39;float&#39;,
  close_on_exit = true, -- close the terminal window when the process exits
  clear_env = false, -- use only environmental variables from `env`, passed to jobstart()
   -- Change the default shell. Can be a string or a function returning a string
  shell = vim.o.shell,
  auto_scroll = true, -- automatically scroll to the bottom on terminal output
  -- This field is only relevant if direction is set to &#39;float&#39;
  float_opts = {
    -- The border key is *almost* the same as &#39;nvim_open_win&#39;
    -- see :h nvim_open_win for details on borders however
    -- the &#39;curved&#39; border is a custom border type
    -- not natively supported but implemented in this plugin.
    border = &#39;single&#39; | &#39;double&#39; | &#39;shadow&#39; | &#39;curved&#39; | ... other options supported by win open
    -- like `size`, width, height, row, and col can be a number or function which is passed the current terminal
    width = &amp;lt;value&amp;gt;,
    height = &amp;lt;value&amp;gt;,
    row = &amp;lt;value&amp;gt;,
    col = &amp;lt;value&amp;gt;,
    winblend = 3,
    zindex = &amp;lt;value&amp;gt;,
    title_pos = &#39;left&#39; | &#39;center&#39; | &#39;right&#39;, position of the title of the floating window
  },
  winbar = {
    enabled = false,
    name_formatter = function(term) --  term: Terminal
      return term.name
    end
  },
  responsiveness = {
    -- breakpoint in terms of `vim.o.columns` at which terminals will start to stack on top of each other
    -- instead of next to each other
    -- default = 0 which means the feature is turned off
    horizontal_breakpoint = 135,
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;h3&gt;&lt;code&gt;ToggleTerm&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This is the command the mappings call under the hood. You can use it directly and prefix it with a count to target a specific terminal. This function also takes arguments &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, &lt;code&gt;direction&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:ToggleTerm size=40 dir=~/Desktop direction=horizontal name=desktop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;code&gt;dir&lt;/code&gt; is specified on creation toggle term will open at the specified directory. If the terminal has already been opened at a particular directory it will remain in that directory.&lt;/p&gt; 
&lt;p&gt;The directory can also be specified as &lt;code&gt;git_dir&lt;/code&gt; which toggleterm will then use to try and derive the git repo directory. &lt;em&gt;NOTE&lt;/em&gt;: This will not work for &lt;code&gt;git-worktrees&lt;/code&gt; or other more complex setups.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;size&lt;/code&gt; is specified, and the command opens a split (horizontal/vertical) terminal, the height/width of all terminals in the same direction will be changed to &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;direction&lt;/code&gt; is specified, and the command opens a terminal, the terminal will be changed to the specified direction.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;name&lt;/code&gt; is specified, the display name is set for the toggled terminal. This name will be visible when using &lt;code&gt;TermSelect&lt;/code&gt; command to indicate the specific terminal.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; are ignored if the command closes a terminal.&lt;/p&gt; 
&lt;h4&gt;Caveats&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Having multiple terminals with different directions open at the same time is unsupported.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;ToggleTermToggleAll&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This command allows you to open all the previously toggled terminal in one go or close all the open terminals at once.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;TermExec&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This command allows you to open a terminal with a specific action. e.g. &lt;code&gt;2TermExec cmd=&quot;git status&quot; dir=~/&amp;lt;my-repo-path&amp;gt;&lt;/code&gt; will run git status in terminal 2. note that the &lt;code&gt;cmd&lt;/code&gt; argument &lt;strong&gt;must be quoted&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; the &lt;code&gt;dir&lt;/code&gt; argument can also be &lt;em&gt;optionally&lt;/em&gt; quoted if it contains spaces.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;cmd&lt;/code&gt; and &lt;code&gt;dir&lt;/code&gt; arguments can also expand the same special keywords as &lt;code&gt;:h expand&lt;/code&gt; e.g. &lt;code&gt;TermExec cmd=&quot;echo %&quot;&lt;/code&gt; will be expanded to &lt;code&gt;TermExec cmd=&quot;echo /file/example&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;These special keywords can be escaped using the &lt;code&gt;\&lt;/code&gt; character, if you want to print character as is.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;direction&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; arguments are like the &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;direction&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; arguments of &lt;code&gt;ToggleTerm&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;By default, focus is returned to the original window after executing the command (except for floating terminals). Use argument &lt;code&gt;go_back=0&lt;/code&gt; to disable this behaviour.&lt;/p&gt; 
&lt;p&gt;You can send commands to a terminal without opening its window by using the &lt;code&gt;open=0&lt;/code&gt; argument.&lt;/p&gt; 
&lt;p&gt;see &lt;code&gt;:h expand()&lt;/code&gt; for more details&lt;/p&gt; 
&lt;h3&gt;TermNew&lt;/h3&gt; 
&lt;p&gt;This command allows you to open a new terminal at the next available count. It&#39;s helpful in combination with &lt;code&gt;TermSelect&lt;/code&gt; (see below) to work with terminals without needing to remember numbers. The &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, &lt;code&gt;direction&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; arguments work the same as in &lt;code&gt;ToggleTerm&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;TermSelect&lt;/h3&gt; 
&lt;p&gt;This command uses &lt;code&gt;vim.ui.select&lt;/code&gt; to allow a user to select a terminal to open or to focus it if it&#39;s already open. This can be useful if you have a lot of terminals and want to open a specific one.&lt;/p&gt; 
&lt;h3&gt;Sending lines to the terminal&lt;/h3&gt; 
&lt;p&gt;You can &quot;send lines&quot; to the toggled terminals with the following commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ToggleTermSendCurrentLine &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends the whole line where you are standing with your cursor&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualLines &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends all the (whole) lines in your visual selection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualSelection &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends only the visually selected text (this can be a block of text or a selection in a single line)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(&lt;code&gt;&amp;lt;T_ID&lt;/code&gt; is an optional terminal ID parameter, which defines where should we send the lines. If the parameter is not provided, then the default is the &lt;code&gt;first terminal&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;Alternatively, for more fine-grained control and use in mappings, in lua:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local trim_spaces = true
vim.keymap.set(&quot;v&quot;, &quot;&amp;lt;space&amp;gt;s&quot;, function()
    require(&quot;toggleterm&quot;).send_lines_to_terminal(&quot;single_line&quot;, trim_spaces, { args = vim.v.count })
end)
    -- Replace with these for the other two options
    -- require(&quot;toggleterm&quot;).send_lines_to_terminal(&quot;visual_lines&quot;, trim_spaces, { args = vim.v.count })
    -- require(&quot;toggleterm&quot;).send_lines_to_terminal(&quot;visual_selection&quot;, trim_spaces, { args = vim.v.count })

-- For use as an operator map:
-- Send motion to terminal
vim.keymap.set(&quot;n&quot;, [[&amp;lt;leader&amp;gt;&amp;lt;c-\&amp;gt;]], function()
  set_opfunc(function(motion_type)
    require(&quot;toggleterm&quot;).send_lines_to_terminal(motion_type, false, { args = vim.v.count })
  end)
  vim.api.nvim_feedkeys(&quot;g@&quot;, &quot;n&quot;, false)
end)
-- Double the command to send line to terminal
vim.keymap.set(&quot;n&quot;, [[&amp;lt;leader&amp;gt;&amp;lt;c-\&amp;gt;&amp;lt;c-\&amp;gt;]], function()
  set_opfunc(function(motion_type)
    require(&quot;toggleterm&quot;).send_lines_to_terminal(motion_type, false, { args = vim.v.count })
  end)
  vim.api.nvim_feedkeys(&quot;g@_&quot;, &quot;n&quot;, false)
end)
-- Send whole file
vim.keymap.set(&quot;n&quot;, [[&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;&amp;lt;c-\&amp;gt;]], function()
  set_opfunc(function(motion_type)
    require(&quot;toggleterm&quot;).send_lines_to_terminal(motion_type, false, { args = vim.v.count })
  end)
  vim.api.nvim_feedkeys(&quot;ggg@G&#39;&#39;&quot;, &quot;n&quot;, false)
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Set &lt;code&gt;trim_spaces=false&lt;/code&gt; for sending to REPLs for whitespace-sensitive languages like python. (For python, you probably want to start ipython with &lt;code&gt;ipython --no-autoindent&lt;/code&gt;.)&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;
 &lt;video src=&quot;https://user-images.githubusercontent.com/18753533/159889865-724becab-877b-45a2-898e-820afd6a4ee1.mov&quot; controls=&quot;controls&quot; muted height=&quot;640px&quot;&gt;&lt;/video&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h3&gt;ToggleTermSetName&lt;/h3&gt; 
&lt;p&gt;This function allows setting a display name for a terminal. This name is primarily used inside the winbar, and can be a more descriptive way to remember, which terminal is for what.&lt;/p&gt; 
&lt;p&gt;You can map this to a key and call it with a count, which will then prompt you a name for the terminal with the matching ID. Alternatively you can call it with just the name e.g. &lt;code&gt;:ToggleTermSetName work&amp;lt;CR&amp;gt;&lt;/code&gt; this will the prompt you for which terminal it should apply to. Lastly you can call it without any arguments, and it will prompt you for which terminal it should apply to then prompt you for the name to use.&lt;/p&gt; 
&lt;h3&gt;Set terminal shading&lt;/h3&gt; 
&lt;p&gt;This plugin automatically shades terminal filetypes to be darker than other window you can disable this by setting &lt;code&gt;shade_terminals = false&lt;/code&gt; in the setup object&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;toggleterm&#39;.setup {
  shade_terminals = false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;alternatively you can set, &lt;em&gt;which&lt;/em&gt; filetypes should be shaded by setting&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- fzf is just an example
require&#39;toggleterm&#39;.setup {
  shade_filetypes = { &quot;none&quot;, &quot;fzf&quot; }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;setting &lt;code&gt;&quot;none&quot;&lt;/code&gt; will allow normal terminal buffers to be highlighted.&lt;/p&gt; 
&lt;h3&gt;Set persistent size&lt;/h3&gt; 
&lt;p&gt;By default, this plugin will persist the size of horizontal and vertical terminals. Split terminals in the same direction always have the same size. You can disable this behaviour by setting &lt;code&gt;persist_size = false&lt;/code&gt; in the setup object. Disabling this behaviour forces the opening terminal size to the &lt;code&gt;size&lt;/code&gt; defined in the setup object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;toggleterm&#39;.setup{
  persist_size = false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Terminal window mappings&lt;/h3&gt; 
&lt;p&gt;It can be helpful to add mappings to make moving in and out of a terminal easier once toggled, whilst still keeping it open.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;function _G.set_terminal_keymaps()
  local opts = {buffer = 0}
  vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)
  vim.keymap.set(&#39;t&#39;, &#39;jk&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)
  vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;C-h&amp;gt;&#39;, [[&amp;lt;Cmd&amp;gt;wincmd h&amp;lt;CR&amp;gt;]], opts)
  vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;C-j&amp;gt;&#39;, [[&amp;lt;Cmd&amp;gt;wincmd j&amp;lt;CR&amp;gt;]], opts)
  vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, [[&amp;lt;Cmd&amp;gt;wincmd k&amp;lt;CR&amp;gt;]], opts)
  vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;C-l&amp;gt;&#39;, [[&amp;lt;Cmd&amp;gt;wincmd l&amp;lt;CR&amp;gt;]], opts)
  vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;C-w&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-w&amp;gt;]], opts)
end

-- if you only want these mappings for toggle term use term://*toggleterm#* instead
vim.cmd(&#39;autocmd! TermOpen term://* lua set_terminal_keymaps()&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom Terminals&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/22454918/116447435-e69f1480-a84f-11eb-86dd-19fa29646aa1.png&quot; alt=&quot;lazy git&quot;&gt; &lt;em&gt;using &lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;lazygit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Toggleterm also exposes the &lt;code&gt;Terminal&lt;/code&gt; class so that this can be used to create custom terminals for showing terminal UIs like &lt;code&gt;lazygit&lt;/code&gt;, &lt;code&gt;htop&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;Each terminal can take the following arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;Terminal:new {
  cmd = string -- command to execute when creating the terminal e.g. &#39;top&#39;
  display_name = string -- the name of the terminal
  direction = string -- the layout for the terminal, same as the main config options
  dir = string -- the directory for the terminal
  close_on_exit = bool -- close the terminal window when the process exits
  highlights = table -- a table with highlights
  env = table -- key:value table with environmental variables passed to jobstart()
  clear_env = bool -- use only environmental variables from `env`, passed to jobstart()
  on_open = fun(t: Terminal) -- function to run when the terminal opens
  on_close = fun(t: Terminal) -- function to run when the terminal closes
  auto_scroll = boolean -- automatically scroll to the bottom on terminal output
  -- callbacks for processing the output
  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout
  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr
  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to spawn a custom terminal without running any command, you can omit the &lt;code&gt;cmd&lt;/code&gt; option.&lt;/p&gt; 
&lt;h4&gt;Custom terminal usage&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local Terminal  = require(&#39;toggleterm.terminal&#39;).Terminal
local lazygit = Terminal:new({ cmd = &quot;lazygit&quot;, hidden = true })

function _lazygit_toggle()
  lazygit:toggle()
end

vim.api.nvim_set_keymap(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;g&quot;, &quot;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&quot;, {noremap = true, silent = true})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a new terminal, but the specified command is not being run immediately. The command will run once the terminal is opened. Alternatively &lt;code&gt;term:spawn()&lt;/code&gt; can be used to start the command in a background buffer without opening a terminal window yet. If the &lt;code&gt;hidden&lt;/code&gt; key is set to true, this terminal will not be toggled by normal toggleterm commands such as &lt;code&gt;:ToggleTerm&lt;/code&gt; or the open mapping. It will only open and close by using the returned terminal object. A mapping for toggling the terminal can be set as in the example above.&lt;/p&gt; 
&lt;p&gt;Alternatively the terminal can be specified with a count, which is the number that can be used to trigger this specific terminal. This can then be triggered using the current count e.g. &lt;code&gt;:5ToggleTerm&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lazygit = Terminal:new({ cmd = &quot;lazygit&quot;, count = 5 })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also set a custom layout for a terminal.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lazygit = Terminal:new({
  cmd = &quot;lazygit&quot;,
  dir = &quot;git_dir&quot;,
  direction = &quot;float&quot;,
  float_opts = {
    border = &quot;double&quot;,
  },
  -- function to run on opening the terminal
  on_open = function(term)
    vim.cmd(&quot;startinsert!&quot;)
    vim.api.nvim_buf_set_keymap(term.bufnr, &quot;n&quot;, &quot;q&quot;, &quot;&amp;lt;cmd&amp;gt;close&amp;lt;CR&amp;gt;&quot;, {noremap = true, silent = true})
  end,
  -- function to run on closing the terminal
  on_close = function(term)
    vim.cmd(&quot;startinsert!&quot;)
  end,
})

function _lazygit_toggle()
  lazygit:toggle()
end

vim.api.nvim_set_keymap(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;g&quot;, &quot;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&quot;, {noremap = true, silent = true})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: do not use any of the private functionality of the terminal or other non-public parts of the API as these can change in the future.&lt;/p&gt; 
&lt;h3&gt;Statusline&lt;/h3&gt; 
&lt;p&gt;To tell each terminal apart you can use the terminal buffer variable &lt;code&gt;b:toggle_number&lt;/code&gt; in your statusline&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; this is pseudo code
let statusline .= &#39;%{&amp;amp;ft == &quot;toggleterm&quot; ? &quot;terminal (&quot;.b:toggle_number.&quot;)&quot; : &quot;&quot;}&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom commands&lt;/h3&gt; 
&lt;p&gt;You can create your own commands by using the lua functions this plugin provides directly&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;command! -count=1 TermGitPush  lua require&#39;toggleterm&#39;.exec(&quot;git push&quot;,    &amp;lt;count&amp;gt;, 12)
command! -count=1 TermGitPushF lua require&#39;toggleterm&#39;.exec(&quot;git push -f&quot;, &amp;lt;count&amp;gt;, 12)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Open multiple terminals side-by-side&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Direction&lt;/th&gt; 
   &lt;th&gt;Supported&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vertical&lt;/td&gt; 
   &lt;td&gt;✔️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;horizontal&lt;/td&gt; 
   &lt;td&gt;✔️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tab&lt;/td&gt; 
   &lt;td&gt;✖️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;float&lt;/td&gt; 
   &lt;td&gt;✖️&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;In your first terminal, you need to leave the &lt;code&gt;TERMINAL&lt;/code&gt; mode using &lt;kbd&gt;C-\&lt;/kbd&gt;&lt;kbd&gt;C-N&lt;/kbd&gt; which can be remapped to &lt;kbd&gt;Esc&lt;/kbd&gt; for ease of use. &lt;img src=&quot;https://user-images.githubusercontent.com/31947091/133395516-22fef1e6-633d-4964-9175-f76fabf66794.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Then you type on: &lt;code&gt;2&amp;lt;C-\&amp;gt;&lt;/code&gt;, and the result: &lt;img src=&quot;https://user-images.githubusercontent.com/31947091/133396789-fdf68b30-3a8c-440b-822f-6549f282c4fc.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Explain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: this is the terminal&#39;s number (or ID), your first terminal is &lt;code&gt;1&lt;/code&gt; (e.g. your 3rd terminal will be &lt;code&gt;3&amp;lt;C-\&amp;gt;&lt;/code&gt;, so on).&lt;/li&gt; 
 &lt;li&gt;&lt;kbd&gt;C-\&lt;/kbd&gt;: this is the combined key mapping to the command &lt;code&gt;:ToggleTerm&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;h4&gt;How do I get this plugin to work with Powershell?&lt;/h4&gt; 
&lt;p&gt;Please check out the &lt;a href=&quot;https://github.com/akinsho/toggleterm.nvim/wiki/Tips-and-Tricks#using-toggleterm-with-powershell&quot;&gt;Wiki section on this topic&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>numToStr/Comment.nvim</title>
      <link>https://github.com/numToStr/Comment.nvim</link>
      <description>&lt;p&gt;🧠 💪 // Smart and powerful comment plugin for neovim. Supports treesitter, dot repeat, left-right/up-down motions, hooks, and more&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;// Comment.nvim &lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;sup&gt;⚡ Smart and Powerful commenting plugin for neovim ⚡&lt;/sup&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42532967/136532939-926a8350-84b7-4e78-b045-fe21b5947388.gif&quot; alt=&quot;Comment.nvim&quot; title=&quot;Commenting go brrrr&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;✨ Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports treesitter. &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#treesitter&quot;&gt;Read more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Supports &lt;code&gt;commentstring&lt;/code&gt;. Read &lt;code&gt;:h comment.commentstring&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Supports line (&lt;code&gt;//&lt;/code&gt;) and block (&lt;code&gt;/* */&lt;/code&gt;) comments&lt;/li&gt; 
 &lt;li&gt;Dot (&lt;code&gt;.&lt;/code&gt;) repeat support for &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;gbc&lt;/code&gt; and friends&lt;/li&gt; 
 &lt;li&gt;Count support for &lt;code&gt;[count]gcc&lt;/code&gt; and &lt;code&gt;[count]gbc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Left-right (&lt;code&gt;gcw&lt;/code&gt; &lt;code&gt;gc$&lt;/code&gt;) and Up-Down (&lt;code&gt;gc2j&lt;/code&gt; &lt;code&gt;gc4k&lt;/code&gt;) motions&lt;/li&gt; 
 &lt;li&gt;Use with text-objects (&lt;code&gt;gci{&lt;/code&gt; &lt;code&gt;gbat&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Supports pre and post hooks&lt;/li&gt; 
 &lt;li&gt;Ignore certain lines, powered by Lua regex&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🚀 Installation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- add this to your lua/plugins.lua, lua/plugins/init.lua,  or the file you keep your other plugins:
{
    &#39;numToStr/Comment.nvim&#39;,
    opts = {
        -- add any options here
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
    &#39;numToStr/Comment.nvim&#39;,
    config = function()
        require(&#39;Comment&#39;).setup()
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;numToStr/Comment.nvim&#39;

&quot; Somewhere after plug#end()
lua require(&#39;Comment&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;📖 Getting Help&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;Comment.nvim&lt;/code&gt; provides help docs which can be accessed by running &lt;code&gt;:help comment-nvim&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a id=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;⚒️ Setup&lt;/h3&gt; 
&lt;p&gt;First you need to call the &lt;code&gt;setup()&lt;/code&gt; method to create the default mappings.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - If you are facing &lt;strong&gt;Keybindings are mapped but they are not working&lt;/strong&gt; issue then please try &lt;a href=&quot;https://github.com/numToStr/Comment.nvim/issues/115#issuecomment-1032290098&quot;&gt;this&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lua&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;Comment&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;VimL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;lua &amp;lt;&amp;lt; EOF
require(&#39;Comment&#39;).setup()
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a id=&quot;config&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Configuration (optional)&lt;/h4&gt; 
&lt;p&gt;Following are the &lt;strong&gt;default&lt;/strong&gt; config for the &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;. If you want to override, just modify the option that you want then it will be merged with the default config. Read &lt;code&gt;:h comment.config&lt;/code&gt; for more info.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    ---Add a space b/w comment and the line
    padding = true,
    ---Whether the cursor should stay at its position
    sticky = true,
    ---Lines to be ignored while (un)comment
    ignore = nil,
    ---LHS of toggle mappings in NORMAL mode
    toggler = {
        ---Line-comment toggle keymap
        line = &#39;gcc&#39;,
        ---Block-comment toggle keymap
        block = &#39;gbc&#39;,
    },
    ---LHS of operator-pending mappings in NORMAL and VISUAL mode
    opleader = {
        ---Line-comment keymap
        line = &#39;gc&#39;,
        ---Block-comment keymap
        block = &#39;gb&#39;,
    },
    ---LHS of extra mappings
    extra = {
        ---Add comment on the line above
        above = &#39;gcO&#39;,
        ---Add comment on the line below
        below = &#39;gco&#39;,
        ---Add comment at the end of line
        eol = &#39;gcA&#39;,
    },
    ---Enable keybindings
    ---NOTE: If given `false` then the plugin won&#39;t create any mappings
    mappings = {
        ---Operator-pending mapping; `gcc` `gbc` `gc[count]{motion}` `gb[count]{motion}`
        basic = true,
        ---Extra mapping; `gco`, `gcO`, `gcA`
        extra = true,
    },
    ---Function to call before (un)comment
    pre_hook = nil,
    ---Function to call after (un)comment
    post_hook = nil,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;🔥 Usage&lt;/h3&gt; 
&lt;p&gt;When you call &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;Comment.nvim&lt;/code&gt; sets up some basic mapping which can be used in NORMAL and VISUAL mode to get you started with the pleasure of commenting stuff out.&lt;/p&gt; 
&lt;p&gt;&lt;a id=&quot;basic-mappings&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Basic mappings&lt;/h4&gt; 
&lt;p&gt;These mappings are enabled by default. (config: &lt;code&gt;mappings.basic&lt;/code&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NORMAL mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-help&quot;&gt;`gcc` - Toggles the current line using linewise comment
`gbc` - Toggles the current line using blockwise comment
`[count]gcc` - Toggles the number of line given as a prefix-count using linewise
`[count]gbc` - Toggles the number of line given as a prefix-count using blockwise
`gc[count]{motion}` - (Op-pending) Toggles the region using linewise comment
`gb[count]{motion}` - (Op-pending) Toggles the region using blockwise comment
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;VISUAL mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-help&quot;&gt;`gc` - Toggles the region using linewise comment
`gb` - Toggles the region using blockwise comment
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a id=&quot;extra-mappings&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Extra mappings&lt;/h4&gt; 
&lt;p&gt;These mappings are enabled by default. (config: &lt;code&gt;mappings.extra&lt;/code&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NORMAL mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-help&quot;&gt;`gco` - Insert comment to the next line and enters INSERT mode
`gcO` - Insert comment to the previous line and enters INSERT mode
`gcA` - Insert comment to end of the current line and enters INSERT mode
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Examples&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-help&quot;&gt;# Linewise

`gcw` - Toggle from the current cursor position to the next word
`gc$` - Toggle from the current cursor position to the end of line
`gc}` - Toggle until the next blank line
`gc5j` - Toggle 5 lines after the current cursor position
`gc8k` - Toggle 8 lines before the current cursor position
`gcip` - Toggle inside of paragraph
`gca}` - Toggle around curly brackets

# Blockwise

`gb2}` - Toggle until the 2 next blank line
`gbaf` - Toggle comment around a function (w/ LSP/treesitter support)
`gbac` - Toggle comment around a class (w/ LSP/treesitter support)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a id=&quot;treesitter&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;🌳 Treesitter&lt;/h3&gt; 
&lt;p&gt;This plugin has native &lt;strong&gt;treesitter&lt;/strong&gt; support for calculating &lt;code&gt;commentstring&lt;/code&gt; which works for multiple (injected/embedded) languages like Vue or Markdown. But due to the nature of the parsed tree, this implementation has some known limitations.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;No &lt;code&gt;jsx/tsx&lt;/code&gt; support. Its implementation was quite complicated.&lt;/li&gt; 
 &lt;li&gt;Invalid comment on the region where one language ends and the other starts. &lt;a href=&quot;https://github.com/numToStr/Comment.nvim/pull/62#issuecomment-972790418&quot;&gt;Read more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Unexpected comment on a line with multiple languages. &lt;a href=&quot;https://github.com/numToStr/Comment.nvim/issues/144&quot;&gt;#144&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For advance use cases, use &lt;a href=&quot;https://github.com/JoosepAlviste/nvim-ts-context-commentstring&quot;&gt;nvim-ts-context-commentstring&lt;/a&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#pre-hook&quot;&gt;&lt;code&gt;pre_hook&lt;/code&gt;&lt;/a&gt; section for the integration.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - This plugin does not depend on &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt; however it is recommended in order to easily install tree-sitter parsers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a id=&quot;hooks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;🎣 Hooks&lt;/h3&gt; 
&lt;p&gt;There are two hook methods i.e &lt;code&gt;pre_hook&lt;/code&gt; and &lt;code&gt;post_hook&lt;/code&gt; which are called before comment and after comment respectively. Both should be provided during &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a id=&quot;pre-hook&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pre_hook&lt;/code&gt; - Called with a &lt;code&gt;ctx&lt;/code&gt; argument (Read &lt;code&gt;:h comment.utils.CommentCtx&lt;/code&gt;) before (un)comment. Can optionally return a &lt;code&gt;commentstring&lt;/code&gt; to be used for (un)commenting.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    pre_hook = function(ctx)
        if ctx.range.srow == ctx.range.erow then
            -- do something with the current line
        else
            -- do something with lines range
        end
    end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also integrate &lt;a href=&quot;https://github.com/JoosepAlviste/nvim-ts-context-commentstring#commentnvim&quot;&gt;nvim-ts-context-commentstring&lt;/a&gt; using &lt;code&gt;pre_hook&lt;/code&gt; to easily comment &lt;code&gt;tsx/jsx&lt;/code&gt; files.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - &lt;code&gt;Comment.nvim&lt;/code&gt; already supports &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#treesitter&quot;&gt;&lt;code&gt;treesitter&lt;/code&gt;&lt;/a&gt; out-of-the-box for all the languages except &lt;code&gt;tsx/jsx&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    pre_hook = require(&#39;ts_context_commentstring.integrations.comment_nvim&#39;).create_pre_hook(),
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a id=&quot;post-hook&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;post_hook&lt;/code&gt; - This method is called after (un)commenting. It receives the same &lt;code&gt;ctx&lt;/code&gt; (Read &lt;code&gt;:h comment.utils.CommentCtx&lt;/code&gt;) argument as &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#pre_hook&quot;&gt;&lt;code&gt;pre_hook&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    post_hook = function(ctx)
        if ctx.range.srow == ctx.range.erow then
            -- do something with the current line
        else
            -- do something with lines range
        end
    end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;post_hook&lt;/code&gt; can be implemented to cover some niche use cases like the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Using newlines instead of padding e.g. for commenting out code in C with &lt;code&gt;#if 0&lt;/code&gt;. See an example &lt;a href=&quot;https://github.com/numToStr/Comment.nvim/issues/38#issuecomment-945082507&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Duplicating the commented block (using &lt;code&gt;pre_hook&lt;/code&gt;) and moving the cursor to the next block (using &lt;code&gt;post_hook&lt;/code&gt;). See &lt;a href=&quot;https://github.com/numToStr/Comment.nvim/issues/70&quot;&gt;this&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE: When pressing &lt;code&gt;gc&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt; and friends, &lt;code&gt;cmode&lt;/code&gt; (Comment mode) inside &lt;code&gt;pre_hook&lt;/code&gt; will always be toggle because when pre-hook is called, in that moment we don&#39;t know whether &lt;code&gt;gc&lt;/code&gt; or &lt;code&gt;gb&lt;/code&gt; will comment or uncomment the lines. But luckily, we do know this before &lt;code&gt;post_hook&lt;/code&gt; and this will always receive either comment or uncomment status&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;🚫 Ignoring lines&lt;/h3&gt; 
&lt;p&gt;You can use &lt;code&gt;ignore&lt;/code&gt; to ignore certain lines during comment/uncomment. It can takes lua regex string or a function that returns a regex string and should be provided during &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE: Ignore only works when with linewise comment. This is by design. As ignoring lines in block comments doesn&#39;t make that much sense.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- ignores empty lines
ignore = &#39;^$&#39;

-- ignores line that starts with `local` (excluding any leading whitespace)
ignore = &#39;^(%s*)local&#39;

-- ignores any lines similar to arrow function
ignore = &#39;^const(.*)=(%s?)%((.*)%)(%s?)=&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    ignore = function()
        -- Only ignore empty lines for lua files
        if vim.bo.filetype == &#39;lua&#39; then
            return &#39;^$&#39;
        end
    end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a id=&quot;languages&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;🗨️ Filetypes + Languages&lt;/h3&gt; 
&lt;p&gt;Most languages/filetypes have native support for comments via &lt;code&gt;commentstring&lt;/code&gt; but there might be a filetype that is not supported. There are two ways to enable commenting for unsupported filetypes:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You can set &lt;code&gt;commentstring&lt;/code&gt; for that particular filetype like the following. Read &lt;code&gt;:h commentstring&lt;/code&gt; for more info.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.bo.commentstring = &#39;//%s&#39;

-- or
vim.api.nvim_command(&#39;set commentstring=//%s&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a id=&quot;ft-lua&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;You can also use this plugin interface to store both line and block commentstring for the filetype. You can treat this as a more powerful version of the &lt;code&gt;commentstring&lt;/code&gt;. Read &lt;code&gt;:h comment.ft&lt;/code&gt; for more info.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ft = require(&#39;Comment.ft&#39;)

-- 1. Using set function

ft
 -- Set only line comment
 .set(&#39;yaml&#39;, &#39;#%s&#39;)
 -- Or set both line and block commentstring
 .set(&#39;javascript&#39;, {&#39;//%s&#39;, &#39;/*%s*/&#39;})

-- 2. Metatable magic

ft.javascript = {&#39;//%s&#39;, &#39;/*%s*/&#39;}
ft.yaml = &#39;#%s&#39;

-- Multiple filetypes
ft({&#39;go&#39;, &#39;rust&#39;}, ft.get(&#39;c&#39;))
ft({&#39;toml&#39;, &#39;graphql&#39;}, &#39;#%s&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;PR(s) are welcome to add more commentstring inside the plugin&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;🤝 Contributing&lt;/h3&gt; 
&lt;p&gt;There are multiple ways to contribute reporting/fixing bugs, feature requests. You can also submit commentstring to this plugin by updating &lt;a href=&quot;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/lua/Comment/ft.lua&quot;&gt;ft.lua&lt;/a&gt; and sending PR.&lt;/p&gt; 
&lt;h3&gt;📺 Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-InmtHhk2qM&quot;&gt;TakeTuesday E02: Comment.nvim&lt;/a&gt; by &lt;a href=&quot;https://github.com/tjdevries&quot;&gt;TJ DeVries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;💐 Credits&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tomtom/tcomment_vim&quot;&gt;tcomment&lt;/a&gt; - To be with me forever and motivated me to write this.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/terrortylor/nvim-comment&quot;&gt;nvim-comment&lt;/a&gt; - Little and less powerful cousin. Also I took some code from it.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/b3nj5m1n/kommentary&quot;&gt;kommentary&lt;/a&gt; - Nicely done plugin but lacks some features. But it helped me to design this plugin.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🚗 Roadmap&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Doc comment i.e &lt;code&gt;/**%s*/&lt;/code&gt; (js), &lt;code&gt;///%s&lt;/code&gt; (rust)&lt;/li&gt; 
 &lt;li&gt;Header comment&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;----------------------
-- This is a header --
----------------------
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>hrsh7th/nvim-cmp</title>
      <link>https://github.com/hrsh7th/nvim-cmp</link>
      <description>&lt;p&gt;A completion plugin for neovim coded in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-cmp&lt;/h1&gt; 
&lt;p&gt;A completion engine plugin for neovim written in Lua. Completion sources are installed from external repositories and &quot;sourced&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp/assets/22756295/afa70011-9121-4e42-aedd-0153b630eeab&quot;&gt;https://github.com/hrsh7th/nvim-cmp/assets/22756295/afa70011-9121-4e42-aedd-0153b630eeab&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Readme!&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;There is a GitHub issue that documents &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp/issues/231&quot;&gt;breaking changes&lt;/a&gt; for nvim-cmp. Subscribe to the issue to be notified of upcoming breaking changes.&lt;/li&gt; 
 &lt;li&gt;This is my hobby project. You can support me via GitHub sponsors.&lt;/li&gt; 
 &lt;li&gt;Bug reports are welcome, but don&#39;t expect a fix unless you provide minimal configuration and steps to reproduce your issue.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;cmp.mapping.preset.*&lt;/code&gt; is pre-defined configuration that aims to mimic neovim&#39;s native like behavior. It can be changed without announcement. Please manage key-mapping by yourself.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Concept&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full support for LSP completion related capabilities&lt;/li&gt; 
 &lt;li&gt;Powerful customizability via Lua functions&lt;/li&gt; 
 &lt;li&gt;Smart handling of key mappings&lt;/li&gt; 
 &lt;li&gt;No flicker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Setup&lt;/h1&gt; 
&lt;h3&gt;Recommended Configuration&lt;/h3&gt; 
&lt;p&gt;This example configuration uses &lt;code&gt;vim-plug&lt;/code&gt; as the plugin manager and &lt;code&gt;vim-vsnip&lt;/code&gt; as a snippet plugin.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call plug#begin(s:plug_dir)
Plug &#39;neovim/nvim-lspconfig&#39;
Plug &#39;hrsh7th/cmp-nvim-lsp&#39;
Plug &#39;hrsh7th/cmp-buffer&#39;
Plug &#39;hrsh7th/cmp-path&#39;
Plug &#39;hrsh7th/cmp-cmdline&#39;
Plug &#39;hrsh7th/nvim-cmp&#39;

&quot; For vsnip users.
Plug &#39;hrsh7th/cmp-vsnip&#39;
Plug &#39;hrsh7th/vim-vsnip&#39;

&quot; For luasnip users.
&quot; Plug &#39;L3MON4D3/LuaSnip&#39;
&quot; Plug &#39;saadparwaiz1/cmp_luasnip&#39;

&quot; For mini.snippets users.
&quot; Plug &#39;echasnovski/mini.snippets&#39;
&quot; Plug &#39;abeldekat/cmp-mini-snippets&#39;

&quot; For ultisnips users.
&quot; Plug &#39;SirVer/ultisnips&#39;
&quot; Plug &#39;quangnguyen30192/cmp-nvim-ultisnips&#39;

&quot; For snippy users.
&quot; Plug &#39;dcampos/nvim-snippy&#39;
&quot; Plug &#39;dcampos/cmp-snippy&#39;

call plug#end()

lua &amp;lt;&amp;lt;EOF
  -- Set up nvim-cmp.
  local cmp = require&#39;cmp&#39;

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn[&quot;vsnip#anonymous&quot;](args.body) -- For `vsnip` users.
        -- require(&#39;luasnip&#39;).lsp_expand(args.body) -- For `luasnip` users.
        -- require(&#39;snippy&#39;).expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn[&quot;UltiSnips#Anon&quot;](args.body) -- For `ultisnips` users.
        -- vim.snippet.expand(args.body) -- For native neovim snippets (Neovim v0.10+)

        -- For `mini.snippets` users:
        -- local insert = MiniSnippets.config.expand.insert or MiniSnippets.default_insert
        -- insert({ body = args.body }) -- Insert at cursor
        -- cmp.resubscribe({ &quot;TextChangedI&quot;, &quot;TextChangedP&quot; })
        -- require(&quot;cmp.config&quot;).set_onetime({ sources = {} })
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      [&#39;&amp;lt;C-b&amp;gt;&#39;] = cmp.mapping.scroll_docs(-4),
      [&#39;&amp;lt;C-f&amp;gt;&#39;] = cmp.mapping.scroll_docs(4),
      [&#39;&amp;lt;C-Space&amp;gt;&#39;] = cmp.mapping.complete(),
      [&#39;&amp;lt;C-e&amp;gt;&#39;] = cmp.mapping.abort(),
      [&#39;&amp;lt;CR&amp;gt;&#39;] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = &#39;nvim_lsp&#39; },
      { name = &#39;vsnip&#39; }, -- For vsnip users.
      -- { name = &#39;luasnip&#39; }, -- For luasnip users.
      -- { name = &#39;ultisnips&#39; }, -- For ultisnips users.
      -- { name = &#39;snippy&#39; }, -- For snippy users.
    }, {
      { name = &#39;buffer&#39; },
    })
  })

  -- To use git you need to install the plugin petertriho/cmp-git and uncomment lines below
  -- Set configuration for specific filetype.
  --[[ cmp.setup.filetype(&#39;gitcommit&#39;, {
    sources = cmp.config.sources({
      { name = &#39;git&#39; },
    }, {
      { name = &#39;buffer&#39; },
    })
 })
 require(&quot;cmp_git&quot;).setup() ]]-- 

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won&#39;t work anymore).
  cmp.setup.cmdline({ &#39;/&#39;, &#39;?&#39; }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = &#39;buffer&#39; }
    }
  })

  -- Use cmdline &amp;amp; path source for &#39;:&#39; (if you enabled `native_menu`, this won&#39;t work anymore).
  cmp.setup.cmdline(&#39;:&#39;, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = &#39;path&#39; }
    }, {
      { name = &#39;cmdline&#39; }
    }),
    matching = { disallow_symbol_nonprefix_matching = false }
  })

  -- Set up lspconfig.
  local capabilities = require(&#39;cmp_nvim_lsp&#39;).default_capabilities()
  -- Replace &amp;lt;YOUR_LSP_SERVER&amp;gt; with each lsp server you&#39;ve enabled.
  require(&#39;lspconfig&#39;)[&#39;&amp;lt;YOUR_LSP_SERVER&amp;gt;&#39;].setup {
    capabilities = capabilities
  }
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Where can I find more completion sources?&lt;/h3&gt; 
&lt;p&gt;Have a look at the &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources&quot;&gt;Wiki&lt;/a&gt; and the &lt;code&gt;nvim-cmp&lt;/code&gt; &lt;a href=&quot;https://github.com/topics/nvim-cmp&quot;&gt;GitHub topic&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Where can I find advanced configuration examples?&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp/wiki&quot;&gt;Wiki&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yetone/avante.nvim</title>
      <link>https://github.com/yetone/avante.nvim</link>
      <description>&lt;p&gt;Use your Neovim like using Cursor AI IDE!&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img alt=&quot;logo&quot; width=&quot;120&quot; src=&quot;https://github.com/user-attachments/assets/2e2f2a58-2b28-4d11-afd1-87b65612b2de&quot;&gt; 
 &lt;h1&gt;avante.nvim&lt;/h1&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://neovim.io/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=Neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&quot; alt=&quot;Neovim: v0.10+&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/lua.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/lua.yaml?style=flat-square&amp;amp;logo=lua&amp;amp;logoColor=c7c7c7&amp;amp;label=Lua+CI&amp;amp;labelColor=1E40AF&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Lua CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/rust.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/rust.yaml?style=flat-square&amp;amp;logo=rust&amp;amp;logoColor=ffffff&amp;amp;label=Rust+CI&amp;amp;labelColor=BC826A&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Rust CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/python.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/python.yaml?style=flat-square&amp;amp;logo=python&amp;amp;logoColor=ffffff&amp;amp;label=Python+CI&amp;amp;labelColor=3672A5&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Python CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://discord.gg/QfnEFEdSjz&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/1302530866362323016?style=flat-square&amp;amp;logo=discord&amp;amp;label=Discord&amp;amp;logoColor=ffffff&amp;amp;labelColor=7376CF&amp;amp;color=268165&quot; alt=&quot;Discord&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://dotfyle.com/plugins/yetone/avante.nvim&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/yetone/avante.nvim/shield?style=flat-square&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;avante.nvim&lt;/strong&gt; is a Neovim plugin designed to emulate the behaviour of the &lt;a href=&quot;https://www.cursor.com&quot;&gt;Cursor&lt;/a&gt; AI IDE. It provides users with AI-driven code suggestions and the ability to apply these recommendations directly to their source files with minimal effort.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;🥰 This project is undergoing rapid iterations, and many exciting features will be added successively. Stay tuned!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&quot;&gt;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&quot;&gt;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsorship ❤️&lt;/h2&gt; 
&lt;p&gt;If you like this project, please consider supporting me on Patreon, as it helps me to continue maintaining and improving it:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://patreon.com/yetone&quot;&gt;Sponsor me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;AI-Powered Code Assistance&lt;/strong&gt;: Interact with AI to ask questions about your current code file and receive intelligent suggestions for improvement or modification.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;One-Click Application&lt;/strong&gt;: Quickly apply the AI&#39;s suggested changes to your source code with a single command, streamlining the editing process and saving time.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;For building binary if you wish to build from source, then &lt;code&gt;cargo&lt;/code&gt; is required. Otherwise &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; will be used to get prebuilt binary from GitHub.&lt;/p&gt; 
&lt;details open&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; (recommended)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;yetone/avante.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  version = false, -- Set this to &quot;*&quot; to always pull the latest release version, or set it to false to update to the latest code changes.
  opts = {
    -- add any opts here
    -- for example
    provider = &quot;openai&quot;,
    openai = {
      endpoint = &quot;https://api.openai.com/v1&quot;,
      model = &quot;gpt-4o&quot;, -- your desired model (or use gpt-4o, etc.)
      timeout = 30000, -- timeout in milliseconds
      temperature = 0, -- adjust if needed
      max_tokens = 4096,
      -- reasoning_effort = &quot;high&quot; -- only supported for reasoning models (o1, etc.)
    },
  },
  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  build = &quot;make&quot;,
  -- build = &quot;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false&quot; -- for windows
  dependencies = {
    &quot;nvim-treesitter/nvim-treesitter&quot;,
    &quot;stevearc/dressing.nvim&quot;,
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    --- The below dependencies are optional,
    &quot;echasnovski/mini.pick&quot;, -- for file_selector provider mini.pick
    &quot;nvim-telescope/telescope.nvim&quot;, -- for file_selector provider telescope
    &quot;hrsh7th/nvim-cmp&quot;, -- autocompletion for avante commands and mentions
    &quot;ibhagwan/fzf-lua&quot;, -- for file_selector provider fzf
    &quot;nvim-tree/nvim-web-devicons&quot;, -- or echasnovski/mini.icons
    &quot;zbirenbaum/copilot.lua&quot;, -- for providers=&#39;copilot&#39;
    {
      -- support for image pasting
      &quot;HakonHarnes/img-clip.nvim&quot;,
      event = &quot;VeryLazy&quot;,
      opts = {
        -- recommended settings
        default = {
          embed_image_as_base64 = false,
          prompt_for_file_name = false,
          drag_and_drop = {
            insert_mode = true,
          },
          -- required for Windows users
          use_absolute_path = true,
        },
      },
    },
    {
      -- Make sure to set this up properly if you have lazy=true
      &#39;MeanderingProgrammer/render-markdown.nvim&#39;,
      opts = {
        file_types = { &quot;markdown&quot;, &quot;Avante&quot; },
      },
      ft = { &quot;markdown&quot;, &quot;Avante&quot; },
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;vim-plug&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
&quot; Deps
Plug &#39;nvim-treesitter/nvim-treesitter&#39;
Plug &#39;stevearc/dressing.nvim&#39;
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;MunifTanjim/nui.nvim&#39;
Plug &#39;MeanderingProgrammer/render-markdown.nvim&#39;

&quot; Optional deps
Plug &#39;hrsh7th/nvim-cmp&#39;
Plug &#39;nvim-tree/nvim-web-devicons&#39; &quot;or Plug &#39;echasnovski/mini.icons&#39;
Plug &#39;HakonHarnes/img-clip.nvim&#39;
Plug &#39;zbirenbaum/copilot.lua&#39;

&quot; Yay, pass source=true if you want to build from source
Plug &#39;yetone/avante.nvim&#39;, { &#39;branch&#39;: &#39;main&#39;, &#39;do&#39;: &#39;make&#39; }
autocmd! User avante.nvim lua &amp;lt;&amp;lt; EOF
require(&#39;avante&#39;).setup()
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.deps&quot;&gt;mini.deps&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local add, later, now = MiniDeps.add, MiniDeps.later, MiniDeps.now

add({
  source = &#39;yetone/avante.nvim&#39;,
  monitor = &#39;main&#39;,
  depends = {
    &#39;nvim-treesitter/nvim-treesitter&#39;,
    &#39;stevearc/dressing.nvim&#39;,
    &#39;nvim-lua/plenary.nvim&#39;,
    &#39;MunifTanjim/nui.nvim&#39;,
    &#39;echasnovski/mini.icons&#39;
  },
  hooks = { post_checkout = function() vim.cmd(&#39;make&#39;) end }
})
--- optional
add({ source = &#39;hrsh7th/nvim-cmp&#39; })
add({ source = &#39;zbirenbaum/copilot.lua&#39; })
add({ source = &#39;HakonHarnes/img-clip.nvim&#39; })
add({ source = &#39;MeanderingProgrammer/render-markdown.nvim&#39; })

later(function() require(&#39;render-markdown&#39;).setup({...}) end)
later(function()
  require(&#39;img-clip&#39;).setup({...}) -- config img-clip
  require(&quot;copilot&quot;).setup({...}) -- setup copilot to your liking
  require(&quot;avante&quot;).setup({...}) -- config for avante.nvim
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;Packer&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
  -- Required plugins
  use &#39;nvim-treesitter/nvim-treesitter&#39;
  use &#39;stevearc/dressing.nvim&#39;
  use &#39;nvim-lua/plenary.nvim&#39;
  use &#39;MunifTanjim/nui.nvim&#39;
  use &#39;MeanderingProgrammer/render-markdown.nvim&#39;

  -- Optional dependencies
  use &#39;hrsh7th/nvim-cmp&#39;
  use &#39;nvim-tree/nvim-web-devicons&#39; -- or use &#39;echasnovski/mini.icons&#39;
  use &#39;HakonHarnes/img-clip.nvim&#39;
  use &#39;zbirenbaum/copilot.lua&#39;

  -- Avante.nvim with build process
  use {
    &#39;yetone/avante.nvim&#39;,
    branch = &#39;main&#39;,
    run = &#39;make&#39;,
    config = function()
      require(&#39;avante&#39;).setup()
    end
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/nix-community/home-manager&quot;&gt;Home Manager&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;programs.neovim = {
  plugins = [
    {
      plugin = pkgs.vimPlugins.avante-nvim;
      type = &quot;lua&quot;;
      config = &#39;&#39;require(&quot;avante&quot;).setup()&#39;&#39; # or builtins.readFile ./plugins/avante.lua;
    }
  ];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://nix-community.github.io/nixvim/plugins/avante/index.html&quot;&gt;Nixvim&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;  plugins.avante.enable = true;
  plugins.avante.settings = {
    # setup options here
  };
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- deps:
require(&#39;cmp&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;img-clip&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;copilot&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;render-markdown&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;avante&#39;).setup ({
  -- Your config here!
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;avante.nvim&lt;/code&gt; is currently only compatible with Neovim 0.10.1 or later. Please ensure that your Neovim version meets these requirements before proceeding.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;When loading the plugin synchronously, we recommend &lt;code&gt;require&lt;/code&gt;ing it sometime after your colorscheme.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Recommended &lt;strong&gt;Neovim&lt;/strong&gt; options:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- views can only be fully collapsed with the global statusline
vim.opt.laststatus = 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Any rendering plugins that support markdown should work with Avante as long as you add the supported filetype &lt;code&gt;Avante&lt;/code&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175&quot;&gt;https://github.com/yetone/avante.nvim/issues/175&lt;/a&gt; and &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175#issuecomment-2313749363&quot;&gt;this comment&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Default setup configuration&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/config.lua&quot;&gt;config.lua#L9&lt;/a&gt; for the full config&lt;/em&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  ---@alias Provider &quot;claude&quot; | &quot;openai&quot; | &quot;azure&quot; | &quot;gemini&quot; | &quot;cohere&quot; | &quot;copilot&quot; | string
  provider = &quot;claude&quot;, -- The provider used in Aider mode or in the planning phase of Cursor Planning Mode
  -- WARNING: Since auto-suggestions are a high-frequency operation and therefore expensive,
  -- currently designating it as `copilot` provider is dangerous because: https://github.com/yetone/avante.nvim/issues/1048
  -- Of course, you can reduce the request frequency by increasing `suggestion.debounce`.
  auto_suggestions_provider = &quot;claude&quot;,
  cursor_applying_provider = nil, -- The provider used in the applying phase of Cursor Planning Mode, defaults to nil, when nil uses Config.provider as the provider for the applying phase
  claude = {
    endpoint = &quot;https://api.anthropic.com&quot;,
    model = &quot;claude-3-5-sonnet-20241022&quot;,
    temperature = 0,
    max_tokens = 4096,
  },
  ---Specify the special dual_boost mode
  ---1. enabled: Whether to enable dual_boost mode. Default to false.
  ---2. first_provider: The first provider to generate response. Default to &quot;openai&quot;.
  ---3. second_provider: The second provider to generate response. Default to &quot;claude&quot;.
  ---4. prompt: The prompt to generate response based on the two reference outputs.
  ---5. timeout: Timeout in milliseconds. Default to 60000.
  ---How it works:
  --- When dual_boost is enabled, avante will generate two responses from the first_provider and second_provider respectively. Then use the response from the first_provider as provider1_output and the response from the second_provider as provider2_output. Finally, avante will generate a response based on the prompt and the two reference outputs, with the default Provider as normal.
  ---Note: This is an experimental feature and may not work as expected.
  dual_boost = {
    enabled = false,
    first_provider = &quot;openai&quot;,
    second_provider = &quot;claude&quot;,
    prompt = &quot;Based on the two reference outputs below, generate a response that incorporates elements from both but reflects your own judgment and unique perspective. Do not provide any explanation, just give the response directly. Reference Output 1: [{{provider1_output}}], Reference Output 2: [{{provider2_output}}]&quot;,
    timeout = 60000, -- Timeout in milliseconds
  },
  behaviour = {
    auto_suggestions = false, -- Experimental stage
    auto_set_highlight_group = true,
    auto_set_keymaps = true,
    auto_apply_diff_after_generation = false,
    support_paste_from_clipboard = false,
    minimize_diff = true, -- Whether to remove unchanged lines when applying a code block
    enable_token_counting = true, -- Whether to enable token counting. Default to true.
    enable_cursor_planning_mode = false, -- Whether to enable Cursor Planning Mode. Default to false.
  },
  mappings = {
    --- @class AvanteConflictMappings
    diff = {
      ours = &quot;co&quot;,
      theirs = &quot;ct&quot;,
      all_theirs = &quot;ca&quot;,
      both = &quot;cb&quot;,
      cursor = &quot;cc&quot;,
      next = &quot;]x&quot;,
      prev = &quot;[x&quot;,
    },
    suggestion = {
      accept = &quot;&amp;lt;M-l&amp;gt;&quot;,
      next = &quot;&amp;lt;M-]&amp;gt;&quot;,
      prev = &quot;&amp;lt;M-[&amp;gt;&quot;,
      dismiss = &quot;&amp;lt;C-]&amp;gt;&quot;,
    },
    jump = {
      next = &quot;]]&quot;,
      prev = &quot;[[&quot;,
    },
    submit = {
      normal = &quot;&amp;lt;CR&amp;gt;&quot;,
      insert = &quot;&amp;lt;C-s&amp;gt;&quot;,
    },
    sidebar = {
      apply_all = &quot;A&quot;,
      apply_cursor = &quot;a&quot;,
      retry_user_request = &quot;r&quot;,
      edit_user_request = &quot;e&quot;,
      switch_windows = &quot;&amp;lt;Tab&amp;gt;&quot;,
      reverse_switch_windows = &quot;&amp;lt;S-Tab&amp;gt;&quot;,
      remove_file = &quot;d&quot;,
      add_file = &quot;@&quot;,
      close = { &quot;&amp;lt;Esc&amp;gt;&quot;, &quot;q&quot; },
      close_from_input = nil, -- e.g., { normal = &quot;&amp;lt;Esc&amp;gt;&quot;, insert = &quot;&amp;lt;C-d&amp;gt;&quot; }
    },
  },
  hints = { enabled = true },
  windows = {
    ---@type &quot;right&quot; | &quot;left&quot; | &quot;top&quot; | &quot;bottom&quot;
    position = &quot;right&quot;, -- the position of the sidebar
    wrap = true, -- similar to vim.o.wrap
    width = 30, -- default % based on available width
    sidebar_header = {
      enabled = true, -- true, false to enable/disable the header
      align = &quot;center&quot;, -- left, center, right for title
      rounded = true,
    },
    input = {
      prefix = &quot;&amp;gt; &quot;,
      height = 8, -- Height of the input window in vertical layout
    },
    edit = {
      border = &quot;rounded&quot;,
      start_insert = true, -- Start insert mode when opening the edit window
    },
    ask = {
      floating = false, -- Open the &#39;AvanteAsk&#39; prompt in a floating window
      start_insert = true, -- Start insert mode when opening the ask window
      border = &quot;rounded&quot;,
      ---@type &quot;ours&quot; | &quot;theirs&quot;
      focus_on_apply = &quot;ours&quot;, -- which diff to focus after applying
    },
  },
  highlights = {
    ---@type AvanteConflictHighlights
    diff = {
      current = &quot;DiffText&quot;,
      incoming = &quot;DiffAdd&quot;,
    },
  },
  --- @class AvanteConflictUserConfig
  diff = {
    autojump = true,
    ---@type string | fun(): any
    list_opener = &quot;copen&quot;,
    --- Override the &#39;timeoutlen&#39; setting while hovering over a diff (see :help timeoutlen).
    --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`.
    --- Disable by setting to -1.
    override_timeoutlen = 500,
  },
  suggestion = {
    debounce = 600,
    throttle = 600,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Blink.cmp users&lt;/h2&gt; 
&lt;p&gt;For blink cmp users (nvim-cmp alternative) view below instruction for configuration This is achieved by emulating nvim-cmp using blink.compat or you can use &lt;a href=&quot;https://github.com/Kaiser-Yang/blink-cmp-avante&quot;&gt;Kaiser-Yang/blink-cmp-avante&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      file_selector = {
        --- @alias FileSelectorProvider &quot;native&quot; | &quot;fzf&quot; | &quot;mini.pick&quot; | &quot;snacks&quot; | &quot;telescope&quot; | string | fun(params: avante.file_selector.IParams|nil): nil
        provider = &quot;fzf&quot;,
        -- Options override for custom providers
        provider_opts = {},
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To create a customized file_selector, you can specify a customized function to launch a picker to select items and pass the selected items to the &lt;code&gt;handler&lt;/code&gt; callback.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      file_selector = {
        ---@param params avante.file_selector.IParams
        provider = function(params)
          local filepaths = params.filepaths ---@type string[]
          local title = params.title ---@type string
          local handler = params.handler ---@type fun(selected_filepaths: string[]|nil): nil

          -- Launch your customized picker with the items built from `filepaths`, then in the `on_confirm` callback,
          -- pass the selected items (convert back to file paths) to the `handler` function.

          local items = __your_items_formatter__(filepaths)
          __your_picker__({
            items = items,
            on_cancel = function()
              handler(nil)
            end,
            on_confirm = function(selected_items)
              local selected_filepaths = {}
              for _, item in ipairs(selected_items) do
                table.insert(selected_filepaths, item.filepath)
              end
              handler(selected_filepaths)
            end
          })
        end,
        ---below is optional
        provider_opts = {
          ---@param params avante.file_selector.opts.IGetFilepathsParams
          get_filepaths = function(params)
            local cwd = params.cwd ---@type string
            local selected_filepaths = params.selected_filepaths ---@type string[]
            local cmd = string.format(&quot;fd --base-directory &#39;%s&#39; --hidden&quot;, vim.fn.fnameescape(cwd))
            local output = vim.fn.system(cmd)
            local filepaths = vim.split(output, &quot;\n&quot;, { trimempty = true })
            return vim
              .iter(filepaths)
              :filter(function(filepath)
                return not vim.tbl_contains(selected_filepaths, filepath)
              end)
              :totable()
          end
        }
        end
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Choose a selector other that native, the default as that currently has an issue For lazyvim users copy the full config for blink.cmp from the website or extend the options&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      compat = {
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For other users just add a custom provider&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      default = {
        ...
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      providers = {
        avante_commands = {
          name = &quot;avante_commands&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 90, -- show at a higher priority than lsp
          opts = {},
        },
        avante_files = {
          name = &quot;avante_files&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 100, -- show at a higher priority than lsp
          opts = {},
        },
        avante_mentions = {
          name = &quot;avante_mentions&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 1000, -- show at a higher priority than lsp
          opts = {},
        }
        ...
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Given its early stage, &lt;code&gt;avante.nvim&lt;/code&gt; currently supports the following basic functionalities:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;Avante will only support Claude, and OpenAI (and its variants including azure)out-of-the-box due to its high code quality generation. For all OpenAI-compatible providers, see &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki/Custom-providers&quot;&gt;wiki&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;del&gt;Due to the poor performance of other models, avante.nvim only recommends using the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;All features can only be guaranteed to work properly on the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;We do not accept changes to the code or prompts to accommodate other models. Otherwise, it will greatly increase our maintenance costs.&lt;/del&gt; &amp;gt; &lt;del&gt;We hope everyone can understand. Thank you!&lt;/del&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;Since avante.nvim now supports &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor planning mode&lt;/a&gt;, the above statement is no longer valid! avante.nvim now supports most models! If you encounter issues with normal usage, please try enabling &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor planning mode&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;For most consistency between neovim session, it is recommended to set the environment variables in your shell file. By default, &lt;code&gt;Avante&lt;/code&gt; will prompt you at startup to input the API key for the provider you have selected.&lt;/p&gt; 
 &lt;p&gt;For Claude:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export ANTHROPIC_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Azure OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export AZURE_OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Amazon Bedrock:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export BEDROCK_KEYS=aws_access_key_id,aws_secret_access_key,aws_region[,aws_session_token]

&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: The aws_session_token is optional and only needed when using temporary AWS credentials&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open a code file in Neovim.&lt;/li&gt; 
 &lt;li&gt;Use the &lt;code&gt;:AvanteAsk&lt;/code&gt; command to query the AI about the code.&lt;/li&gt; 
 &lt;li&gt;Review the AI&#39;s suggestions.&lt;/li&gt; 
 &lt;li&gt;Apply the recommended changes directly to your code with a simple command or key binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The plugin is still under active development, and both its functionality and interface are subject to significant changes. Expect some rough edges and instability as the project evolves.&lt;/p&gt; 
&lt;h2&gt;Key Bindings&lt;/h2&gt; 
&lt;p&gt;The following key bindings are available for use with &lt;code&gt;avante.nvim&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key Binding&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;show sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;toggle sidebar visibility&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;refresh sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;switch sidebar focus&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;?&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;select model&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;edit selected blocks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose ours&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose all theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;0&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose none&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose both&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to previous conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to next conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;jump to previous codeblocks (results window)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;jump to next codeblocks (results windows)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;If you are using &lt;code&gt;lazy.nvim&lt;/code&gt;, then all keymap here will be safely set, meaning if &lt;code&gt;&amp;lt;leader&amp;gt;aa&lt;/code&gt; is already binded, then avante.nvim won&#39;t bind this mapping. In this case, user will be responsible for setting up their own. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki#keymaps-and-api-i-guess&quot;&gt;notes on keymaps&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Neotree shortcut&lt;/h3&gt; 
&lt;p&gt;In the neotree sidebar, you can also add a new keyboard shortcut to quickly add &lt;code&gt;file/folder&lt;/code&gt; to &lt;code&gt;Avante Selected Files&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neotree configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &#39;nvim-neo-tree/neo-tree.nvim&#39;,
    config = function()
      require(&#39;neo-tree&#39;).setup({
        filesystem = {
          commands = {
            avante_add_files = function(state)
              local node = state.tree:get_node()
              local filepath = node:get_id()
              local relative_path = require(&#39;avante.utils&#39;).relative_path(filepath)

              local sidebar = require(&#39;avante&#39;).get()

              local open = sidebar:is_open()
              -- ensure avante sidebar is open
              if not open then
                require(&#39;avante.api&#39;).ask()
                sidebar = require(&#39;avante&#39;).get()
              end

              sidebar.file_selector:add_selected_file(relative_path)

              -- remove neo tree buffer
              if not open then
                sidebar.file_selector:remove_selected_file(&#39;neo-tree filesystem [1]&#39;)
              end
            end,
          },
          window = {
            mappings = {
              [&#39;oa&#39;] = &#39;avante_add_files&#39;,
            },
          },
        },
      })
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Examples&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk [question] [position]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Ask AI about your code. Optional &lt;code&gt;position&lt;/code&gt; set window position and &lt;code&gt;ask&lt;/code&gt; enable/disable direct asking mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk position=right Refactor this code here&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteBuild&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Build dependencies for the project&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteChat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Start a chat session with AI about your codebase. Default is &lt;code&gt;ask&lt;/code&gt;=false&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteClear&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear the chat history&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteEdit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Edit the selected code blocks&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteFocus&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch focus to/from the sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteRefresh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Refresh all Avante windows&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteSwitchProvider&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch AI provider (e.g. openai)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteShowRepoMap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show repo map for project&#39;s structure&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle the Avante sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show model list&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Highlight Groups&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteTitle&lt;/td&gt; 
   &lt;td&gt;Title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteSubtitle&lt;/td&gt; 
   &lt;td&gt;Selected code title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedSubtitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteThirdTitle&lt;/td&gt; 
   &lt;td&gt;Prompt title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedThirdTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrent&lt;/td&gt; 
   &lt;td&gt;Current conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.current&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncoming&lt;/td&gt; 
   &lt;td&gt;Incoming conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.incoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrentLabel&lt;/td&gt; 
   &lt;td&gt;Current conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictCurrent&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncomingLabel&lt;/td&gt; 
   &lt;td&gt;Incoming conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictIncoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvantePopupHint&lt;/td&gt; 
   &lt;td&gt;Usage hints in popup menus&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteInlineHint&lt;/td&gt; 
   &lt;td&gt;The end-of-line hint displayed in visual mode&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/highlights.lua&quot;&gt;highlights.lua&lt;/a&gt; for more information&lt;/p&gt; 
&lt;h2&gt;Ollama&lt;/h2&gt; 
&lt;p&gt;ollama is a first-class provider for avante.nvim. You can use it by setting &lt;code&gt;provider = &quot;ollama&quot;&lt;/code&gt; in the configuration, and set the &lt;code&gt;model&lt;/code&gt; field in &lt;code&gt;ollama&lt;/code&gt; to the model you want to use. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;provider = &quot;ollama&quot;,
ollama = {
  model = &quot;qwq:32b&quot;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you use ollama, the code planning effect may not be ideal, so it is strongly recommended that you enable &lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/cursor-planning-mode.md&quot;&gt;cursor-planning-mode&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom providers&lt;/h2&gt; 
&lt;p&gt;Avante provides a set of default providers, but users can also create their own providers.&lt;/p&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki/Custom-providers&quot;&gt;Custom Providers&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Cursor planning mode&lt;/h2&gt; 
&lt;p&gt;Because avante.nvim has always used Aider’s method for planning applying, but its prompts are very picky with models and require ones like claude-3.5-sonnet or gpt-4o to work properly.&lt;/p&gt; 
&lt;p&gt;Therefore, I have adopted Cursor’s method to implement planning applying. For details on the implementation, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor-planning-mode.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;RAG Service&lt;/h2&gt; 
&lt;p&gt;Avante provides a RAG service, which is a tool for obtaining the required context for the AI to generate the codes. By default, it is not enabled. You can enable it this way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rag_service = {
  enabled = false, -- Enables the RAG service
  host_mount = os.getenv(&quot;HOME&quot;), -- Host mount path for the rag service
  provider = &quot;openai&quot;, -- The provider to use for RAG service (e.g. openai or ollama)
  llm_model = &quot;&quot;, -- The LLM model to use for RAG service
  embed_model = &quot;&quot;, -- The embedding model to use for RAG service
  endpoint = &quot;https://api.openai.com/v1&quot;, -- The API endpoint for RAG service
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;openai&lt;/code&gt;, then you need to set the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable!&lt;/p&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, you need to set the endpoint to &lt;code&gt;http://localhost:11434&lt;/code&gt; (note there is no &lt;code&gt;/v1&lt;/code&gt; at the end) or any address of your own ollama server.&lt;/p&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, when &lt;code&gt;llm_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;llama3&lt;/code&gt;, and when &lt;code&gt;embed_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;nomic-embed-text&lt;/code&gt;. Please make sure these models are available in your ollama server.&lt;/p&gt; 
&lt;p&gt;Additionally, RAG Service also depends on Docker! (For macOS users, OrbStack is recommended as a Docker alternative).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;host_mount&lt;/code&gt; is the path that will be mounted to the container, and the default is the home directory. The mount is required for the RAG service to access the files in the host machine. It is up to the user to decide if you want to mount the whole &lt;code&gt;/&lt;/code&gt; directory, just the project directory, or the home directory. If you plan using avante and RAG event for projects stored outside your home directory, you will need to set the &lt;code&gt;host_mount&lt;/code&gt; to the root directory of your file system.&lt;/p&gt; 
&lt;p&gt;The mount will be read only.&lt;/p&gt; 
&lt;p&gt;After changing the rag_service configuration, you need to manually delete the rag_service container to ensure the new configuration is used: &lt;code&gt;docker rm -fv avante-rag-service&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Web Search Engines&lt;/h2&gt; 
&lt;p&gt;Avante&#39;s tools include some web search engines, currently support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tavily.com/&quot;&gt;Tavily&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://serpapi.com/&quot;&gt;SerpApi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.searchapi.io/&quot;&gt;SearchAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google&#39;s &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;Programmable Search Engine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.kagi.com/kagi/api/search.html&quot;&gt;Kagi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api-dashboard.search.brave.com/app/documentation/web-search/get-started&quot;&gt;Brave Search&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The default is Tavily, and can be changed through configuring &lt;code&gt;Config.web_search_engine.provider&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;web_search_engine = {
  provider = &quot;tavily&quot;, -- tavily, serpapi, searchapi, google or kagi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Environment variables required for providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tavily: &lt;code&gt;TAVILY_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SerpApi: &lt;code&gt;SERPAPI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SearchAPI: &lt;code&gt;SEARCHAPI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Google: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_ENGINE_ID&lt;/code&gt; as the &lt;a href=&quot;https://programmablesearchengine.google.com&quot;&gt;search engine&lt;/a&gt; ID&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Kagi: &lt;code&gt;KAGI_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://kagi.com/settings?p=api&quot;&gt;API Token&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brave Search: &lt;code&gt;BRAVE_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://api-dashboard.search.brave.com/app/keys&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disable Tools&lt;/h2&gt; 
&lt;p&gt;Avante enables tools by default, but some LLM models do not support tools. You can disable tools by setting &lt;code&gt;disable_tools = true&lt;/code&gt; for the provider. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  claude = {
    endpoint = &quot;https://api.anthropic.com&quot;,
    model = &quot;claude-3-5-sonnet-20241022&quot;,
    timeout = 30000, -- Timeout in milliseconds
    temperature = 0,
    max_tokens = 4096,
    disable_tools = true, -- disable tools!
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you want to ban some tools to avoid its usage (like Claude 3.7 overusing the python tool) you can disable just specific tools&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  disabled_tools = { &quot;python&quot; },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tool list&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;rag_search, python, git_diff, git_commit, list_files, search_files, search_keyword, read_file_toplevel_symbols, read_file, create_file, rename_file, delete_file, create_dir, rename_dir, delete_dir, bash, web_search, fetch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom Tools&lt;/h2&gt; 
&lt;p&gt;Avante allows you to define custom tools that can be used by the AI during code generation and analysis. These tools can execute shell commands, run scripts, or perform any custom logic you need.&lt;/p&gt; 
&lt;h3&gt;Example: Go Test Runner&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Here&#39;s an example of a custom tool that runs Go unit tests:&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  custom_tools = {
    {
      name = &quot;run_go_tests&quot;,  -- Unique name for the tool
      description = &quot;Run Go unit tests and return results&quot;,  -- Description shown to AI
      command = &quot;go test -v ./...&quot;,  -- Shell command to execute
      param = {  -- Input parameters (optional)
        type = &quot;table&quot;,
        fields = {
          {
            name = &quot;target&quot;,
            description = &quot;Package or directory to test (e.g. &#39;./pkg/...&#39; or &#39;./internal/pkg&#39;)&quot;,
            type = &quot;string&quot;,
            optional = true,
          },
        },
      },
      returns = {  -- Expected return values
        {
          name = &quot;result&quot;,
          description = &quot;Result of the fetch&quot;,
          type = &quot;string&quot;,
        },
        {
          name = &quot;error&quot;,
          description = &quot;Error message if the fetch was not successful&quot;,
          type = &quot;string&quot;,
          optional = true,
        },
      },
      func = function(params, on_log, on_complete)  -- Custom function to execute
        local target = params.target or &quot;./...&quot;
        return vim.fn.system(string.format(&quot;go test -v %s&quot;, target))
      end,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;MCP&lt;/h2&gt; 
&lt;p&gt;Now you can integrate MCP functionality for Avante through &lt;code&gt;mcphub.nvim&lt;/code&gt;. For detailed documentation, please refer to &lt;a href=&quot;https://github.com/ravitemer/mcphub.nvim#avante-integration&quot;&gt;mcphub.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Custom prompts&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;avante.nvim&lt;/code&gt; provides three different modes to interact with: &lt;code&gt;planning&lt;/code&gt;, &lt;code&gt;editing&lt;/code&gt;, and &lt;code&gt;suggesting&lt;/code&gt;, followed with three different prompts per mode.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on sidebar&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;editing&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).edit()&lt;/code&gt; on selection codeblock&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;suggesting&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).get_suggestion():suggest()&lt;/code&gt; on Tab flow.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cursor-planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on Tab flow, but only when cursor planning mode is enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Users can customize the system prompts via &lt;code&gt;Config.system_prompt&lt;/code&gt;. We recommend calling this in a custom Autocmds depending on your need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;User&quot;, {
  pattern = &quot;ToggleMyPrompt&quot;,
  callback = function() require(&quot;avante.config&quot;).override({system_prompt = &quot;MY CUSTOM SYSTEM PROMPT&quot;}) end,
})

vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;am&quot;, function() vim.api.nvim_exec_autocmds(&quot;User&quot;, { pattern = &quot;ToggleMyPrompt&quot; }) end, { desc = &quot;avante: toggle my prompt&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If one wish to custom prompts for each mode, &lt;code&gt;avante.nvim&lt;/code&gt; will check for project root based on the given buffer whether it contains the following patterns: &lt;code&gt;*.{mode}.avanterules&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The rules for root hierarchy:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;lsp workspace folders&lt;/li&gt; 
 &lt;li&gt;lsp root_dir&lt;/li&gt; 
 &lt;li&gt;root pattern of filename of the current buffer&lt;/li&gt; 
 &lt;li&gt;root pattern of cwd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example folder structure for custom prompt&lt;/summary&gt; 
 &lt;p&gt;If you have the following structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;.
├── .git/
├── typescript.planning.avanterules
├── snippets.editing.avanterules
├── suggesting.avanterules
└── src/

&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;typescript.planning.avanterules&lt;/code&gt; will be used for &lt;code&gt;planning&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;snippets.editing.avanterules&lt;/code&gt; will be used for &lt;code&gt;editing&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;suggesting.avanterules&lt;/code&gt; will be used for &lt;code&gt;suggesting&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;*.avanterules&lt;/code&gt; is a jinja template file, in which will be rendered using &lt;a href=&quot;https://github.com/mitsuhiko/minijinja&quot;&gt;minijinja&lt;/a&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates&quot;&gt;templates&lt;/a&gt; for example on how to extend current templates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;TODOs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with current file&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Apply diff patch&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Slash commands&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Edit the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Smart Tab (Cursor Flow)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with project (You can use &lt;code&gt;@codebase&lt;/code&gt; to chat with the whole project)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with selected files&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Tool use&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; MCP&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Better codebase indexing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced AI Interactions&lt;/strong&gt;: Improve the depth of AI analysis and recommendations for more complex coding scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LSP + Tree-sitter + LLM Integration&lt;/strong&gt;: Integrate with LSP and Tree-sitter and LLM to provide more accurate and powerful code suggestions and analysis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to avante.nvim are welcome! If you&#39;re interested in helping out, please feel free to submit pull requests or open issues. Before contributing, ensure that your code has been thoroughly tested.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki&quot;&gt;wiki&lt;/a&gt; for more recipes and tricks.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;We would like to express our heartfelt gratitude to the contributors of the following open-source projects, whose code has provided invaluable inspiration and reference for the development of avante.nvim:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Nvim Plugin&lt;/th&gt; 
   &lt;th&gt;License&lt;/th&gt; 
   &lt;th&gt;Functionality&lt;/th&gt; 
   &lt;th&gt;Location&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/akinsho/git-conflict.nvim&quot;&gt;git-conflict.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;No License&lt;/td&gt; 
   &lt;td&gt;Diff comparison functionality&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/diff.lua&quot;&gt;lua/avante/diff.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jackMort/ChatGPT.nvim&quot;&gt;ChatGPT.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Calculation of tokens count&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/utils/tokens.lua&quot;&gt;lua/avante/utils/tokens.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HakonHarnes/img-clip.nvim&quot;&gt;img-clip.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Clipboard image support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/clipboard.lua&quot;&gt;lua/avante/clipboard.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot.lua&quot;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Copilot support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/copilot.lua&quot;&gt;lua/avante/providers/copilot.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HiPhish/jinja.vim&quot;&gt;jinja.vim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Template filetype support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/syntax/jinja.vim&quot;&gt;syntax/jinja.vim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim&quot;&gt;codecompanion.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Secrets logic support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/init.lua&quot;&gt;lua/avante/providers/init.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/paul-gauthier/aider&quot;&gt;aider&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Planning mode user prompt&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates/planning.avanterules&quot;&gt;lua/avante/templates/planning.avanterules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The high quality and ingenuity of these projects&#39; source code have been immensely beneficial throughout our development process. We extend our sincere thanks and respect to the authors and contributors of these projects. It is the selfless dedication of the open-source community that drives projects like avante.nvim forward.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Star History&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://star-history.com/#yetone/avante.nvim&amp;amp;Date&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&amp;amp;theme=dark&quot;&gt; 
   &lt;img alt=&quot;NebulaGraph Data Intelligence Suite(ngdi)&quot; src=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&quot;&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/LazyVim</title>
      <link>https://github.com/LazyVim/LazyVim</link>
      <description>&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&quot;&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;Install&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io/configuration&quot;&gt;Configure&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;💤 lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔥 Transform your Neovim into a full-fledged IDE&lt;/li&gt; 
 &lt;li&gt;💤 Easily customize and extend your config with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚀 Blazingly fast&lt;/li&gt; 
 &lt;li&gt;🧹 Sane default settings for options, autocmds, and keymaps&lt;/li&gt; 
 &lt;li&gt;📦 Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.9.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; compiler for &lt;code&gt;nvim-treesitter&lt;/code&gt;. See &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter#requirements&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Try it with Docker&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;
  apk add git lazygit fzf curl neovim ripgrep alpine-sdk --update
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  cd ~/.config/nvim
  nvim
&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Install the &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf ~/.config/nvim/.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;p&gt;There&#39;s a great video created by &lt;a href=&quot;https://github.com/elijahmanor&quot;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N93cTbtLCIM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&quot; alt=&quot;Watch the video&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dusty-phillips&quot;&gt;@dusty-phillips&lt;/a&gt; wrote a comprehensive book called &lt;a href=&quot;https://lazyvim-ambitious-devs.phillips.codes&quot;&gt;LazyVim for Ambitious Developers&lt;/a&gt; available for free online.&lt;/p&gt; 
&lt;h2&gt;📂 File Structure&lt;/h2&gt; 
&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&quot;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;
~/.config/nvim
├── lua
│&amp;nbsp;&amp;nbsp; ├── config
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── lazy.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── options.lua
│&amp;nbsp;&amp;nbsp; └── plugins
│&amp;nbsp;&amp;nbsp;     ├── spec1.lua
│&amp;nbsp;&amp;nbsp;     ├── **
│&amp;nbsp;&amp;nbsp;     └── spec2.lua
└── init.lua
&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lewis6991/gitsigns.nvim</title>
      <link>https://github.com/lewis6991/gitsigns.nvim</link>
      <description>&lt;p&gt;Git integration for buffers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitsigns.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/lewis6991/gitsigns.nvim/actions/workflows/ci.yml/badge.svg?branch=main&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/lewis6991/gitsigns.nvim&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&quot; alt=&quot;License: MIT&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/gitsigns-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/gitsigns-nvim/community.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim/shield&quot; alt=&quot;Dotfyle&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Deep buffer integration for Git&lt;/p&gt; 
&lt;h2&gt;👀 Preview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Hunk Actions&lt;/th&gt; 
   &lt;th&gt;Line Blame&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_actions.gif&quot; width=&quot;450em&quot;&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_blame.gif&quot; width=&quot;450em&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Signs&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Adds signs to the sign column to indicate added, changed, and deleted lines.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/e49ea0bf-c427-41fb-a67f-77c2d413a7cf&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Supports different signs for staged changes.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/28a3e286-96fa-478c-93a3-8028f9bd7123&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Add counts to signs.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d007b924-6811-44ea-b936-d8da4dc00b68&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Hunk Actions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Stage/unstage hunks with &lt;code&gt;:Gitsigns stage_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Reset hunks with &lt;code&gt;:Gitsigns reset_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Also works on partial hunks in visual mode.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks inline with &lt;code&gt;:Gitsigns preview_hunk_inline&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/60acd664-f4a8-4737-ba65-969f1efa7971&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks in popup with &lt;code&gt;:Gitsigns preview_hunk&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d2a9b801-5857-4054-80a8-195d111f4e8c&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Navigate between hunks with &lt;code&gt;:Gitsigns nav_hunk next/prev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Blame&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Show blame of current buffer using &lt;code&gt;:Gitsigns blame&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7d881e94-6e16-4f98-a526-7e785b11acf9&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in popup with &lt;code&gt;:Gitsigns blame_line&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/03ff7557-b538-4cd1-9478-f893bf7e616e&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in virtual text.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/0c79e880-6a6d-4c3f-aa62-33f734725cfd&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ current_line_blame = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_current_line_blame&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Diff&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Change the revision for the signs with &lt;code&gt;:Gitsigns change_base &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show the diff of the current buffer with the index or any revision with &lt;code&gt;:Gitsigns diffthis &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show intra-line word-diff in the buffer.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/409a1f91-5cee-404b-8b12-66b7db3ecac7&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ word_diff = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_word_diff&lt;/code&gt;.&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show hunks Quickfix/Location List&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Set the quickfix/location list with changes with &lt;code&gt;:Gitsign setqflist/setloclist&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/c17001a5-b9cf-4a00-9891-5b130c0b4745&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;Can show hunks for:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;whole repository (&lt;code&gt;target=all&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;attached buffers (&lt;code&gt;target=attached&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;a specific buffer (&lt;code&gt;target=[integer]&lt;/code&gt;).&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Text Object&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Select hunks as a text object.&lt;/li&gt; 
  &lt;li&gt;Can use &lt;code&gt;vim.keymap.set({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, &#39;&amp;lt;Cmd&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Status Line Integration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Use &lt;code&gt;b:gitsigns_status&lt;/code&gt; or &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt;. &lt;code&gt;b:gitsigns_status&lt;/code&gt; is formatted using &lt;code&gt;config.status_formatter&lt;/code&gt;. &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt; is a dictionary with the keys &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;removed&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;set statusline+=%{get(b:,&#39;gitsigns_status&#39;,&#39;&#39;)}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For the current branch use the variable &lt;code&gt;b:gitsigns_head&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show different revisions of buffers&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use &lt;code&gt;:Gitsigns show &amp;lt;REVISION&amp;gt;&lt;/code&gt; to &lt;code&gt;:edit&lt;/code&gt; the current buffer at &lt;code&gt;&amp;lt;REVISION&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;📋 Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= 0.9.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If your version of Neovim is too old, then you can use a past &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;release&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If you are running a development version of Neovim (aka &lt;code&gt;master&lt;/code&gt;), then breakage may occur if your build is behind latest.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Newish version of git. Older versions may not work with some features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🛠️ Installation &amp;amp; Usage&lt;/h2&gt; 
&lt;p&gt;Install using your package manager of choice.&lt;/p&gt; 
&lt;p&gt;For recommended setup with all batteries included:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Configuration can be passed to the setup function. Here is an example with most of the default settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup {
  signs = {
    add          = { text = &#39;┃&#39; },
    change       = { text = &#39;┃&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‾&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;┆&#39; },
  },
  signs_staged = {
    add          = { text = &#39;┃&#39; },
    change       = { text = &#39;┃&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‾&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;┆&#39; },
  },
  signs_staged_enable = true,
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    follow_files = true
  },
  auto_attach = true,
  attach_to_untracked = false,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = &#39;eol&#39;, -- &#39;eol&#39; | &#39;overlay&#39; | &#39;right_align&#39;
    delay = 1000,
    ignore_whitespace = false,
    virt_text_priority = 100,
    use_focus = true,
  },
  current_line_blame_formatter = &#39;&amp;lt;author&amp;gt;, &amp;lt;author_time:%R&amp;gt; - &amp;lt;summary&amp;gt;&#39;,
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    border = &#39;single&#39;,
    style = &#39;minimal&#39;,
    relative = &#39;cursor&#39;,
    row = 0,
    col = 1
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For information on configuring Neovim via lua please see &lt;a href=&quot;https://neovim.io/doc/user/lua-guide.html&quot;&gt;nvim-lua-guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;🎹 Keymaps&lt;/h3&gt; 
&lt;p&gt;Gitsigns provides an &lt;code&gt;on_attach&lt;/code&gt; callback which can be used to setup buffer mappings.&lt;/p&gt; 
&lt;p&gt;Here is a suggested example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup{
  ...
  on_attach = function(bufnr)
    local gitsigns = require(&#39;gitsigns&#39;)

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map(&#39;n&#39;, &#39;]c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;]c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;next&#39;)
      end
    end)

    map(&#39;n&#39;, &#39;[c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;[c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;prev&#39;)
      end
    end)

    -- Actions
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, gitsigns.stage_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, gitsigns.reset_hunk)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, function()
      gitsigns.stage_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, function()
      gitsigns.reset_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, gitsigns.stage_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, gitsigns.reset_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, gitsigns.preview_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hi&#39;, gitsigns.preview_hunk_inline)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, function()
      gitsigns.blame_line({ full = true })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, gitsigns.diffthis)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, function()
      gitsigns.diffthis(&#39;~&#39;)
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hQ&#39;, function() gitsigns.setqflist(&#39;all&#39;) end)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hq&#39;, gitsigns.setqflist)

    -- Toggles
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, gitsigns.toggle_current_line_blame)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;td&#39;, gitsigns.toggle_deleted)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tw&#39;, gitsigns.toggle_word_diff)

    -- Text object
    map({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, gitsigns.select_hunk)
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔗 Plugin Integrations&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When viewing revisions of a file (via &lt;code&gt;:0Gclog&lt;/code&gt; for example), Gitsigns will attach to the fugitive buffer with the base set to the commit immediately before the commit of that revision. This means the signs placed in the buffer reflect the changes introduced by that revision of the file.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;If installed and enabled (via &lt;code&gt;config.trouble&lt;/code&gt;; defaults to true if installed), &lt;code&gt;:Gitsigns setqflist&lt;/code&gt; or &lt;code&gt;:Gitsigns setloclist&lt;/code&gt; will open Trouble instead of Neovim&#39;s built-in quickfix or location list windows.&lt;/p&gt; 
&lt;h2&gt;🚫 Non-Goals&lt;/h2&gt; 
&lt;h3&gt;Implement every feature in &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;This plugin is actively developed and by one of the most well regarded vim plugin developers. Gitsigns will only implement features of this plugin if: it is simple, or, the technologies leveraged by Gitsigns (LuaJIT, Libuv, Neovim&#39;s API, etc) can provide a better experience.&lt;/p&gt; 
&lt;h3&gt;Support for other VCS&lt;/h3&gt; 
&lt;p&gt;There aren&#39;t any active developers of this plugin who use other kinds of VCS, so adding support for them isn&#39;t feasible. However a well written PR with a commitment of future support could change this.&lt;/p&gt; 
&lt;h2&gt;🔌 Similar plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.diff&quot;&gt;mini.diff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neoclide/coc-git&quot;&gt;coc-git&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- links --&gt;</description>
    </item>
    
    <item>
      <title>neovim/nvim-lspconfig</title>
      <link>https://github.com/neovim/nvim-lspconfig</link>
      <description>&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; 
&lt;p&gt;nvim-lspconfig is a &quot;data only&quot; repo, providing basic, default &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;Nvim LSP client&lt;/a&gt; configurations for various LSP servers.&lt;/p&gt; 
&lt;p&gt;View the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;documentation for all configs&lt;/a&gt; or &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; 
&lt;h2&gt;Important ⚠️&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you found a bug in the Nvim LSP functionality (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;These configs are &lt;strong&gt;best-effort and supported by the community.&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&quot;&gt;contributions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repo only provides &lt;em&gt;configurations&lt;/em&gt;. Its programmatic API is deprecated and should not be used externally. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/issues/28479&quot;&gt;Work is planned&lt;/a&gt; to selectively upstream the &quot;framework&quot; parts (&lt;em&gt;not&lt;/em&gt; the configs) of nvim-lspconfig, to Nvim core, and deprecate them in nvim-lspconfig.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neovim/nvim-lspconfig&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Nvim 0.9 above. Update Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; 
 &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &quot;packages&quot; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or use a 3rd-party plugin manager (consult the documentation for your plugin manager).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install a language server, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&quot;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g pyright
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add the language server setup to your init.lua. &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;lspconfig&#39;.pyright.setup{}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure your project/workspace contains a root marker which matches the server requirements specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Read &lt;code&gt;:help lspconfig&lt;/code&gt; for details. Read &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter when calling &lt;code&gt;setup()&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Nvim sets some default options and mappings when a buffer attaches to LSP (see &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;&lt;code&gt;:help lsp-config&lt;/code&gt;&lt;/a&gt;). In particular:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/tagsrch.html#tag-function&quot;&gt;&lt;code&gt;&#39;tagfunc&#39;&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Enables &quot;go to definition&quot; capabilities using &lt;a href=&quot;https://neovim.io/doc/user/tagsrch.html#CTRL-%5D&quot;&gt;&lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt;&lt;/a&gt; and other &lt;a href=&quot;https://neovim.io/doc/user/tagsrch.html#tag-commands&quot;&gt;tag commands&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;omnifunc&#39;&quot;&gt;&lt;code&gt;&#39;omnifunc&#39;&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Enables (manual) omni mode completion with &lt;code&gt;&amp;lt;C-X&amp;gt;&amp;lt;C-O&amp;gt;&lt;/code&gt; in Insert mode. For &lt;em&gt;auto&lt;/em&gt;completion, an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&quot;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;formatexpr&#39;&quot;&gt;&lt;code&gt;&#39;formatexpr&#39;&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Enables LSP formatting with &lt;a href=&quot;https://neovim.io/doc/user/change.html#gq&quot;&gt;&lt;code&gt;gq&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;K&lt;/code&gt; maps to &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.hover()&quot;&gt;&lt;code&gt;vim.lsp.buf.hover()&lt;/code&gt;&lt;/a&gt; in Normal mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[d&lt;/code&gt; and &lt;code&gt;]d&lt;/code&gt; map to &lt;code&gt;vim.diagnostic.goto_prev()&lt;/code&gt; and &lt;code&gt;vim.diagnostic.goto_next()&lt;/code&gt;, respectively.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-W&amp;gt;d&lt;/code&gt; maps to &lt;code&gt;vim.diagnostic.open_float()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Further customization can be achieved using the &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspAttach&quot;&gt;&lt;code&gt;LspAttach&lt;/code&gt;&lt;/a&gt; autocommand event. The &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspAttach&quot;&gt;&lt;code&gt;LspDetach&lt;/code&gt;&lt;/a&gt; autocommand event can be used to &quot;cleanup&quot; mappings if a buffer becomes detached from an LSP server. See &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspAttach&quot;&gt;&lt;code&gt;:h LspAttach&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspDetach&quot;&gt;&lt;code&gt;:h LspDetach&lt;/code&gt;&lt;/a&gt; for details and examples. See &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-buf&quot;&gt;&lt;code&gt;:h lsp-buf&lt;/code&gt;&lt;/a&gt; for details on other LSP functions.&lt;/p&gt; 
&lt;p&gt;Additional configuration options can be provided for each LSP server by passing arguments to the &lt;code&gt;setup&lt;/code&gt; function. See &lt;code&gt;:h lspconfig-setup&lt;/code&gt; for details. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lspconfig = require(&#39;lspconfig&#39;)
lspconfig.rust_analyzer.setup {
  -- Server-specific settings. See `:help lspconfig-setup`
  settings = {
    [&#39;rust-analyzer&#39;] = {},
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s Lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/li&gt; 
 &lt;li&gt;Missing filetype plugins. Certain languages are not detecting by Vim/Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/li&gt; 
 &lt;li&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;doc/configs.md&lt;/a&gt; or the source for the list of root directories.&lt;/li&gt; 
 &lt;li&gt;You must pass &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.set_log_level(&quot;debug&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:LspLog
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (deprecated alias to &lt;code&gt;:che lspconfig&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt; ...]&lt;/code&gt; Stops the given server(s). Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt; ...]&lt;/code&gt; Restarts the given client(s), and attempts to reattach to all previously attached buffers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If a language server is missing from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a new file at &lt;code&gt;lua/lspconfig/configs/SERVER_NAME.lua&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Copy an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/configs/&quot;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/configs/texlab.lua&quot;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&quot;https://app.element.io/#/room/%23neovim:matrix.org&quot;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Release process&lt;/h3&gt; 
&lt;p&gt;To publish a release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and push a new &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tags&quot;&gt;tag&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;After pushing the tag, a &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&quot;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; 
&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nvim-telescope/telescope.nvim</title>
      <link>https://github.com/nvim-telescope/telescope.nvim</link>
      <description>&lt;p&gt;Find, Filter, Preview, Pick. All lua, all the time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/nvim-telescope/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/nvim-telescope/community.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://luarocks.org/modules/Conni2461/telescope.nvim&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/Conni2461/telescope.nvim?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Gaze deeply into unknown regions using the power of the moon.&lt;/p&gt; 
&lt;h2&gt;What Is Telescope?&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;telescope.nvim&lt;/code&gt; is a highly extendable fuzzy finder over lists. Built on the latest awesome features from &lt;code&gt;neovim&lt;/code&gt; core. Telescope is centered around modularity, allowing for easy customization.&lt;/p&gt; 
&lt;p&gt;Community driven builtin &lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&quot;&gt;pickers&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&quot;&gt;sorters&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&quot;&gt;previewers&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TTTja6t.gif&quot; alt=&quot;Preview&quot;&gt; &lt;sub&gt;For more showcases of Telescope, please visit the &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/wiki/Showcase&quot;&gt;Showcase section&lt;/a&gt; in the Telescope Wiki&lt;/sub&gt;&lt;/p&gt; 
&lt;h2&gt;Telescope Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#customization&quot;&gt;Customization&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#default-mappings&quot;&gt;Default Mappings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&quot;&gt;Pickers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&quot;&gt;Previewers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&quot;&gt;Sorters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#layout-display&quot;&gt;Layout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#themes&quot;&gt;Themes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#vim-commands&quot;&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#autocmds&quot;&gt;Autocmds&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#media&quot;&gt;Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/raw/master/doc/telescope_changelog.txt&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;This section should guide you to run your first builtin pickers.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.9.0&quot;&gt;Neovim (v0.9.0)&lt;/a&gt; or the latest neovim nightly commit is required for &lt;code&gt;telescope.nvim&lt;/code&gt; to work. The neovim version also needs to be compiled with LuaJIT, we currently do not support Lua5.1 because of some ongoing issues.&lt;/p&gt; 
&lt;h3&gt;Required dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;nvim-lua/plenary.nvim&lt;/a&gt; is required.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Suggested dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;BurntSushi/ripgrep&lt;/a&gt; is required for &lt;code&gt;live_grep&lt;/code&gt; and &lt;code&gt;grep_string&lt;/code&gt; and is the first priority for &lt;code&gt;find_files&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We also suggest you install one native telescope sorter to significantly improve sorting performance. Take a look at either &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim&quot;&gt;telescope-fzf-native.nvim&lt;/a&gt; or &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzy-native.nvim&quot;&gt;telescope-fzy-native.nvim&lt;/a&gt;. For more information and a performance benchmark take a look at the &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&quot;&gt;Extensions&lt;/a&gt; wiki.&lt;/p&gt; 
&lt;h3&gt;Optional dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;sharkdp/fd&lt;/a&gt; (finder)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; (finder/preview)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;neovim LSP&lt;/a&gt; (picker)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;devicons&lt;/a&gt; (icons)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;It is suggested to either use the latest release &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/tags&quot;&gt;tag&lt;/a&gt; or our release branch (which will get consistent updates) &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/tree/0.1.x&quot;&gt;0.1.x&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It is not suggested to run latest master.&lt;/p&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;nvim-telescope/telescope.nvim&#39;, { &#39;tag&#39;: &#39;0.1.8&#39; }
&quot; or                                , { &#39;branch&#39;: &#39;0.1.x&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/Shougo/dein.vim&quot;&gt;dein&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;call dein#add(&#39;nvim-lua/plenary.nvim&#39;)
call dein#add(&#39;nvim-telescope/telescope.nvim&#39;, { &#39;rev&#39;: &#39;0.1.8&#39; })
&quot; or                                         , { &#39;rev&#39;: &#39;0.1.x&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &#39;nvim-telescope/telescope.nvim&#39;, tag = &#39;0.1.8&#39;,
-- or                            , branch = &#39;0.1.x&#39;,
  requires = { {&#39;nvim-lua/plenary.nvim&#39;} }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- init.lua:
    {
    &#39;nvim-telescope/telescope.nvim&#39;, tag = &#39;0.1.8&#39;,
-- or                              , branch = &#39;0.1.x&#39;,
      dependencies = { &#39;nvim-lua/plenary.nvim&#39; }
    }

-- plugins/telescope.lua:
return {
    &#39;nvim-telescope/telescope.nvim&#39;, tag = &#39;0.1.8&#39;,
-- or                              , branch = &#39;0.1.x&#39;,
      dependencies = { &#39;nvim-lua/plenary.nvim&#39; }
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;checkhealth&lt;/h3&gt; 
&lt;p&gt;Make sure you call &lt;code&gt;:checkhealth telescope&lt;/code&gt; after installing telescope to ensure everything is set up correctly.&lt;/p&gt; 
&lt;p&gt;After this setup you can continue reading here or switch to &lt;code&gt;:help telescope&lt;/code&gt; to get an understanding of how to use Telescope and how to configure it.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Try the command &lt;code&gt;:Telescope find_files&lt;/code&gt; to see if &lt;code&gt;telescope.nvim&lt;/code&gt; is installed correctly.&lt;/p&gt; 
&lt;p&gt;Using VimL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;&quot; Find files using Telescope command-line sugar.
nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;Telescope live_grep&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;Telescope buffers&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;Telescope help_tags&amp;lt;cr&amp;gt;

&quot; Using Lua functions
nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).find_files()&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).live_grep()&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).buffers()&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).help_tags()&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using Lua:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local builtin = require(&#39;telescope.builtin&#39;)
vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;ff&#39;, builtin.find_files, { desc = &#39;Telescope find files&#39; })
vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fg&#39;, builtin.live_grep, { desc = &#39;Telescope live grep&#39; })
vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fb&#39;, builtin.buffers, { desc = &#39;Telescope buffers&#39; })
vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fh&#39;, builtin.help_tags, { desc = &#39;Telescope help tags&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&quot;&gt;builtin pickers&lt;/a&gt; for a list of all builtin functions.&lt;/p&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;p&gt;This section should help you explore available options to configure and customize your &lt;code&gt;telescope.nvim&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Unlike most vim plugins, &lt;code&gt;telescope.nvim&lt;/code&gt; can be customized by either applying customizations globally, or individually per picker.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Global Customization&lt;/strong&gt; affecting all pickers can be done through the main &lt;code&gt;setup()&lt;/code&gt; method (see defaults below)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Individual Customization&lt;/strong&gt; affecting a single picker by passing &lt;code&gt;opts&lt;/code&gt; to builtin pickers (e.g. &lt;code&gt;builtin.find_files(opts)&lt;/code&gt;) see &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/wiki/Configuration-Recipes&quot;&gt;Configuration recipes&lt;/a&gt; wiki page for ideas.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Telescope setup structure&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;telescope&#39;).setup{
  defaults = {
    -- Default configuration for telescope goes here:
    -- config_key = value,
    mappings = {
      i = {
        -- map actions.which_key to &amp;lt;C-h&amp;gt; (default: &amp;lt;C-/&amp;gt;)
        -- actions.which_key shows the mappings for your picker,
        -- e.g. git_{create, delete, ...}_branch for the git_branches picker
        [&quot;&amp;lt;C-h&amp;gt;&quot;] = &quot;which_key&quot;
      }
    }
  },
  pickers = {
    -- Default configuration for builtin pickers goes here:
    -- picker_name = {
    --   picker_config_key = value,
    --   ...
    -- }
    -- Now the picker_config_key will be applied every time you call this
    -- builtin picker
  },
  extensions = {
    -- Your extension configuration goes here:
    -- extension_name = {
    --   extension_config_key = value,
    -- }
    -- please take a look at the readme of the extension you want to configure
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To look at what default configuration options exist please read: &lt;code&gt;:help telescope.setup()&lt;/code&gt;. For picker specific &lt;code&gt;opts&lt;/code&gt; please read: &lt;code&gt;:help telescope.builtin&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To embed the above code snippet in a &lt;code&gt;.vim&lt;/code&gt; file (for example in &lt;code&gt;after/plugin/telescope.nvim.vim&lt;/code&gt;), wrap it in &lt;code&gt;lua &amp;lt;&amp;lt; EOF code-snippet EOF&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lua &amp;lt;&amp;lt; EOF
require(&#39;telescope&#39;).setup{
  -- ...
}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Default Mappings&lt;/h2&gt; 
&lt;p&gt;Mappings are fully customizable. Many familiar mapping patterns are set up as defaults.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Mappings&lt;/th&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-n&amp;gt;/&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Next item&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;/&amp;lt;Up&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Previous item&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;j/k&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Next/previous (in normal mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;H/M/L&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Select High/Middle/Low (in normal mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gg/G&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Select the first/last item (in normal mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Confirm selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Go to file selection as a split&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Go to file selection as a vsplit&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Go to a file in a new tab&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Scroll up in preview window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Scroll down in preview window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Scroll left in preview window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Scroll right in preview window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;M-f&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Scroll left in results window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;M-k&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Scroll right in results window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show mappings for picker actions (insert mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show mappings for picker actions (normal mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close telescope (insert mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close telescope (in normal mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle selection and move to next selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle selection and move to prev selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-q&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send all items not filtered to quickfixlist (qflist)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;M-q&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send all selected items to qflist&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert cword in original window into prompt (insert mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&amp;lt;C-a&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert cWORD in original window into prompt (insert mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert cfile in original window into prompt (insert mode)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert cline in original window into prompt (insert mode)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To see the full list of mappings, check out &lt;code&gt;lua/telescope/mappings.lua&lt;/code&gt; and the &lt;code&gt;default_mappings&lt;/code&gt; table.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: you can use &lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; in insert and normal mode, respectively, to show the actions mapped to your picker.&lt;/p&gt; 
&lt;p&gt;Much like &lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&quot;&gt;builtin pickers&lt;/a&gt;, there are a number of &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/raw/master/lua/telescope/actions/init.lua&quot;&gt;actions&lt;/a&gt; you can pick from to remap your telescope buffer mappings, or create a new custom action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Built-in actions
local transform_mod = require(&#39;telescope.actions.mt&#39;).transform_mod

-- or create your custom action
local my_cool_custom_action = transform_mod({
  x = function(prompt_bufnr)
    print(&quot;This function ran after another action. Prompt_bufnr: &quot; .. prompt_bufnr)
    -- Enter your function logic here. You can take inspiration from lua/telescope/actions.lua
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To remap telescope mappings, please read &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;. To do picker specific mappings, its suggested to do this with the &lt;code&gt;pickers&lt;/code&gt; table in &lt;code&gt;telescope.setup&lt;/code&gt;. Each picker accepts a &lt;code&gt;mappings&lt;/code&gt; table like its explained in &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Pickers&lt;/h2&gt; 
&lt;p&gt;Built-in functions. Ready to be bound to any key you like.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:lua require&#39;telescope.builtin&#39;.planets{}

:nnoremap &amp;lt;Leader&amp;gt;pp :lua require&#39;telescope.builtin&#39;.planets{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;File Pickers&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Functions&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.find_files&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists files in your current working directory, respects .gitignore&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.git_files&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fuzzy search through the output of &lt;code&gt;git ls-files&lt;/code&gt; command, respects .gitignore&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.grep_string&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Searches for the string under your cursor or selection in your current working directory&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.live_grep&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Search for a string in your current working directory and get results live as you type, respects .gitignore. (Requires &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Vim Pickers&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Functions&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.buffers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists open buffers in current neovim instance&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.oldfiles&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists previously open files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.commands&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists available plugin/user commands and runs them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.tags&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists tags in current directory with tag location file preview (users are required to run ctags -R to generate tags or update when introducing new changes)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.command_history&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists commands that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.search_history&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists searches that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.help_tags&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists available help tags and opens a new window with the relevant help info on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.man_pages&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists manpage entries, opens them in a help window on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.marks&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists vim marks and their value&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.colorscheme&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists available colorschemes and applies them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.quickfix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists items in the quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.quickfixhistory&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists all quickfix lists in your history and open them with &lt;code&gt;builtin.quickfix&lt;/code&gt; or quickfix window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.loclist&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists items from the current window&#39;s location list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.jumplist&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists Jump List entries&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.vim_options&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists vim options, allows you to edit the current value on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.registers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists vim registers, pastes the contents of the register on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.autocommands&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists vim autocommands and goes to their declaration on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.spell_suggest&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists spelling suggestions for the current word under the cursor, replaces word with selected suggestion on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.keymaps&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists normal mode keymappings&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.filetypes&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists all available filetypes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.highlights&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists all available highlights&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.current_buffer_fuzzy_find&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Live fuzzy search inside of the currently open buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.current_buffer_tags&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists all of the tags for the currently open buffer, with a preview&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.resume&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists the results incl. multi-selections of the previous picker&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.pickers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists the previous pickers incl. multi-selections (see &lt;code&gt;:h telescope.defaults.cache_picker&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Neovim LSP Pickers&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Functions&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_references&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists LSP references for word under the cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists LSP incoming calls for word under the cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists LSP outgoing calls for word under the cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_document_symbols&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists LSP document symbols in the current buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists LSP document symbols in the current workspace&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_dynamic_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dynamically Lists LSP for all workspace symbols&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.diagnostics&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists Diagnostics for all open buffers or a specific buffer. Use option &lt;code&gt;bufnr=0&lt;/code&gt; for current buffer.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_implementations&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Goto the implementation of the word under the cursor if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_definitions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Goto the definition of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.lsp_type_definitions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Goto the definition of the type of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Git Pickers&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Functions&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.git_commits&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists git commits with diff preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, reset mixed &lt;code&gt;&amp;lt;C-r&amp;gt;m&lt;/code&gt;, reset soft &lt;code&gt;&amp;lt;C-r&amp;gt;s&lt;/code&gt; and reset hard &lt;code&gt;&amp;lt;C-r&amp;gt;h&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.git_bcommits&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists buffer&#39;s git commits with diff preview and checks them out on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.git_bcommits_range&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists buffer&#39;s git commits in a range of lines. Use options &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; to specify the range. In visual mode, lists commits for the selected lines&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.git_branches&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists all branches with log preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, track action &lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt;, rebase action&lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt;, create action &lt;code&gt;&amp;lt;C-a&amp;gt;&lt;/code&gt;, switch action &lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;, delete action &lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt; and merge action &lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.git_status&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists current changes per file with diff preview and add action. (Multi-selection still WIP)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.git_stash&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists stash items in current repository with ability to apply them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Treesitter Picker&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Functions&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.treesitter&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists Function names, variables, from Treesitter!&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Lists Picker&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Functions&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.planets&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use the telescope...&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.builtin&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists Built-in pickers and run them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.reloader&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists Lua modules and reload them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;builtin.symbols&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists symbols inside a file &lt;code&gt;data/telescope-sources/*.json&lt;/code&gt; found in your rtp. More info and symbol sources can be found &lt;a href=&quot;https://github.com/nvim-telescope/telescope-symbols.nvim&quot;&gt;here&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Previewers&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Previewers&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_cat.new&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Default previewer for files. Uses vim buffers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_vimgrep.new&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Default previewer for grep and similar. Uses vim buffers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_qflist.new&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Default previewer for qflist. Uses vim buffers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;previewers.cat.new&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Terminal previewer for files. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;previewers.vimgrep.new&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Terminal previewer for grep and similar. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;previewers.qflist.new&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Terminal previewer for qflist. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The default previewers are from now on &lt;code&gt;vim_buffer_&lt;/code&gt; previewers. They use vim buffers for displaying files and use tree-sitter or regex for file highlighting.&lt;/p&gt; 
&lt;p&gt;These previewers are using &lt;code&gt;vim.filetype&lt;/code&gt; to guess the filetype for the selected file. The guessing is done by inspecting the filename, the head of the file(shebang) and the tail of the file (modeline). If you have trouble with filetype detection you should read &lt;code&gt;:help vim.filetype&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We need to do it manually because we can&#39;t determine the filetype in the traditional way: We don&#39;t do &lt;code&gt;bufload&lt;/code&gt; and instead read the file asynchronously with &lt;code&gt;vim.loop.fs_&lt;/code&gt; and attach only a highlighter; otherwise the speed of the previewer would slow down considerably.&lt;/p&gt; 
&lt;p&gt;If you want to configure the &lt;code&gt;vim_buffer_&lt;/code&gt; previewer (e.g. you want the line to wrap), do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;User&quot;, {
  pattern = &quot;TelescopePreviewerLoaded&quot;,
  callback = function(args)
    if args.data.filetype ~= &quot;help&quot; then
      vim.wo.number = true
    elseif args.data.bufname:match(&quot;*.csv&quot;) then
      vim.wo.wrap = false
    end
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A data field is passed to the callback, which contains the filetype and the buffer name.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  title: string, # preview window title
  filetype: string,
  bufname: string,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sorters&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Sorters&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sorters.get_fuzzy_file&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Telescope&#39;s default sorter for files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sorters.get_generic_fuzzy_sorter&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Telescope&#39;s default sorter for everything else&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sorters.get_levenshtein_sorter&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Using Levenshtein distance algorithm (don&#39;t use :D)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sorters.get_fzy_sorter&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Using fzy algorithm&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sorters.fuzzy_with_index_bias&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Used to list stuff with consideration to when the item is added&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;A &lt;code&gt;Sorter&lt;/code&gt; is called by the &lt;code&gt;Picker&lt;/code&gt; on each item returned by the &lt;code&gt;Finder&lt;/code&gt;. It returns a number, which is equivalent to the &quot;distance&quot; between the current &lt;code&gt;prompt&lt;/code&gt; and the &lt;code&gt;entry&lt;/code&gt; returned by a &lt;code&gt;finder&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Layout (display)&lt;/h2&gt; 
&lt;p&gt;Layout can be configured by choosing a specific &lt;code&gt;layout_strategy&lt;/code&gt; and specifying a particular &lt;code&gt;layout_config&lt;/code&gt; for that strategy. For more details on available strategies and configuration options, see &lt;code&gt;:help telescope.layout&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Some options for configuring sizes in layouts are &quot;resolvable&quot;. This means that they can take different forms, and will be interpreted differently according to which form they take. For example, if we wanted to set the &lt;code&gt;width&lt;/code&gt; of a picker using the &lt;code&gt;vertical&lt;/code&gt; layout strategy to 50% of the screen width, we would specify that width as &lt;code&gt;0.5&lt;/code&gt;, but if we wanted to specify the &lt;code&gt;width&lt;/code&gt; to be exactly 80 characters wide, we would specify it as &lt;code&gt;80&lt;/code&gt;. For more details on resolving sizes, see &lt;code&gt;:help telescope.resolve&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;As an example, if we wanted to specify the layout strategy and width, but only for this instance, we could do something like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:lua require(&#39;telescope.builtin&#39;).find_files({layout_strategy=&#39;vertical&#39;,layout_config={width=0.5}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If we wanted to change the width for every time we use the &lt;code&gt;vertical&lt;/code&gt; layout strategy, we could add the following to our &lt;code&gt;setup()&lt;/code&gt; call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;telescope&#39;).setup({
  defaults = {
    layout_config = {
      vertical = { width = 0.5 }
      -- other layout configuration here
    },
    -- other defaults configuration here
  },
  -- other configuration values here
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Themes&lt;/h2&gt; 
&lt;p&gt;Common groups of settings can be set up to allow for themes. We have some built in themes but are looking for more cool options.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/SorAcXv.png&quot; alt=&quot;dropdown&quot;&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Themes&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;themes.get_dropdown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A list like centered list. &lt;a href=&quot;https://i.imgur.com/SorAcXv.png&quot;&gt;dropdown&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;themes.get_cursor&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/pull/878&quot;&gt;A cursor relative list.&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;themes.get_ivy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bottom panel overlay. &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/pull/771&quot;&gt;Ivy #771&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To use a theme, simply append it to a builtin function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({}))&amp;lt;cr&amp;gt;
&quot; Change an option
nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({ winblend = 10 }))&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or use with a command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Telescope find_files theme=dropdown
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can configure it in the pickers table in &lt;code&gt;telescope.setup&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;telescope&#39;).setup{
  defaults = {
    -- ...
  },
  pickers = {
    find_files = {
      theme = &quot;dropdown&quot;,
    }
  },
  extensions = {
    -- ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Themes should work with every &lt;code&gt;telescope.builtin&lt;/code&gt; function. If you wish to make a theme, check out &lt;code&gt;lua/telescope/themes.lua&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Vim Commands&lt;/h2&gt; 
&lt;p&gt;All &lt;code&gt;telescope.nvim&lt;/code&gt; functions are wrapped in &lt;code&gt;vim&lt;/code&gt; commands for easy access, tab completions and setting options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;&quot; Show all builtin pickers
:Telescope

&quot; Tab completion
:Telescope |&amp;lt;tab&amp;gt;
:Telescope find_files

&quot; Setting options
:Telescope find_files prompt_prefix=🔍

&quot; If the option accepts a Lua table as its value, you can use, to connect each
&quot; command string, e.g.: find_command, vimgrep_arguments are both options that
&quot; accept a Lua table as a value. So, you can configure them on the command line
&quot;like so:
:Telescope find_files find_command=rg,--ignore,--hidden,--files prompt_prefix=🔍
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;for more information and how to realize more complex commands please read &lt;code&gt;:help telescope.command&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Autocmds&lt;/h2&gt; 
&lt;p&gt;Telescope user autocmds:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Event&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;User TelescopeFindPre&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Do it before Telescope creates all the floating windows&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;User TelescopePreviewerLoaded&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Do it after Telescope previewer window is created&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;User TelescopeResumePost&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Do it after Telescope resume action is fully completed&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Extensions&lt;/h2&gt; 
&lt;p&gt;Telescope provides the capabilities to create &amp;amp; register extensions, which improves telescope in a variety of ways.&lt;/p&gt; 
&lt;p&gt;Some extensions provide integration with external tools, outside of the scope of &lt;code&gt;builtins&lt;/code&gt;. Others provide performance enhancements by using compiled C and interfacing directly with Lua over LuaJIT&#39;s FFI library.&lt;/p&gt; 
&lt;p&gt;A list of community extensions can be found in the &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&quot;&gt;Extensions&lt;/a&gt; wiki. Always read the README of the extension you want to install, but here is a general overview of how most extensions work.&lt;/p&gt; 
&lt;h3&gt;Loading extensions&lt;/h3&gt; 
&lt;p&gt;To load an extension, use the &lt;code&gt;load_extension&lt;/code&gt; function as shown in the example below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- This will load fzy_native and have it override the default file sorter
require(&#39;telescope&#39;).load_extension(&#39;fzy_native&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may skip explicitly loading extensions (they will then be lazy-loaded), but tab completions will not be available right away.&lt;/p&gt; 
&lt;h3&gt;Accessing pickers from extensions&lt;/h3&gt; 
&lt;p&gt;Pickers from extensions are added to the &lt;code&gt;:Telescope&lt;/code&gt; command under their respective name. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;&quot; Run the `configurations` picker from nvim-dap
:Telescope dap configurations
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;They can also be called directly from Lua:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Run the `configurations` picker from nvim-dap
require(&#39;telescope&#39;).extensions.dap.configurations()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;For writing your own picker and for information about the API please read the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/developers.md&quot;&gt;Developers Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Media&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.twitch.tv/teej_dv/clip/RichDistinctPlumberPastaThat&quot;&gt;What is Telescope? (Video)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.twitch.tv/videos/756229115&quot;&gt;More advanced configuration (Video)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3WEAjCXFiiM&quot;&gt;telescope.nvim 0.1 reflection (Video)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8SqFt5h2Lsg&quot;&gt;Why Telescope? (Video)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=guxLXcG1kzQ&quot;&gt;Telescope and Nvim 0.5 Intro (Video)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;All contributions are welcome! Just open a pull request. Please read &lt;a href=&quot;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Shougo/denite.nvim&quot;&gt;denite.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/liuchengxu/vim-clap&quot;&gt;vim-clap&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nvim-lualine/lualine.nvim</title>
      <link>https://github.com/nvim-lualine/lualine.nvim</link>
      <description>&lt;p&gt;A blazing fast and easy to configure neovim statusline plugin written in pure lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lualine.nvim&lt;/h1&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/languages/code-size/nvim-lualine/lualine.nvim?style=flat-square&quot; alt=&quot;code size&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/nvim-lualine/lualine.nvim?style=flat-square&quot; alt=&quot;license&quot;&gt; &lt;a href=&quot;https://buymeacoffee.com/shadmansalj&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Buy%20Me%20a%20Coffee-F7941D?style=plastic&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=white&quot; alt=&quot;Buy Me a Coffee&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;p&gt;A blazing fast and easy to configure Neovim statusline written in Lua.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;lualine.nvim&lt;/code&gt; requires Neovim &amp;gt;= 0.7.&lt;/p&gt; 
&lt;p&gt;For previous versions of neovim please use compatability tags for example compat-nvim-0.5&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented. If you have some question or need help with configuration, start a &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim/discussions&quot;&gt;discussion&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; before opening a PR. You can also help with documentation in the &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;Here is a preview of what lualine can look like.&lt;/p&gt; 
&lt;p&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/41551030/108650373-bb025580-74bf-11eb-8682-2c09321dd18e.png&quot;&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/41551030/108650377-bd64af80-74bf-11eb-9c55-fbfc51b39fe8.png&quot;&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/41551030/108650378-be95dc80-74bf-11eb-9718-82b242ecdd54.png&quot;&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/41551030/108650381-bfc70980-74bf-11eb-9245-85c48f0f154a.png&quot;&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/41551030/103467925-32372b00-4d54-11eb-88d6-6d39c46854d8.png&quot;&gt; &lt;/p&gt; 
&lt;p&gt;Screenshots of all available themes are listed in &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&quot;&gt;THEMES.md&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For those who want to break the norms, you can create custom looks for lualine.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/evil_lualine.lua&quot;&gt;evil_lualine&lt;/a&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/slanted-gaps.lua&quot;&gt;slanted-gaps&lt;/a&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/13149513/143395518-f6d6f748-c1ca-491b-9dab-246d0a8cf23f.png&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/bubbles.lua&quot;&gt;bubbles&lt;/a&gt; &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/20235646/131350468-fc556196-5f46-4bfe-a72e-960f6a58db2c.png&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;Performance compared to other plugins&lt;/h2&gt; 
&lt;p&gt;Unlike other statusline plugins, lualine loads only the components you specify, and nothing else.&lt;/p&gt; 
&lt;p&gt;Startup time performance measured with an amazing plugin &lt;a href=&quot;https://github.com/dstein64/vim-startuptime&quot;&gt;dstein64/vim-startuptime&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Times are measured with a clean &lt;code&gt;init.vim&lt;/code&gt; with only &lt;code&gt;vim-startuptime&lt;/code&gt;, &lt;code&gt;vim-plug&lt;/code&gt; and given statusline plugin installed. In control just &lt;code&gt;vim-startuptime&lt;/code&gt; and&lt;code&gt;vim-plug&lt;/code&gt; is installed. And measured time is complete startuptime of vim not time spent on specific plugin. These numbers are the average of 20 runs.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;control&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;lualine&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;lightline&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;airline&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;17.2 ms&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;24.8 ms&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;25.5 ms&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;79.9 ms&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Last Updated On: 18-04-2022&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;nvim-lualine/lualine.nvim&#39;
&quot; If you want to have icons in your statusline choose one of these
Plug &#39;nvim-tree/nvim-web-devicons&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &#39;nvim-lualine/lualine.nvim&#39;,
  requires = { &#39;nvim-tree/nvim-web-devicons&#39;, opt = true }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &#39;nvim-lualine/lualine.nvim&#39;,
    dependencies = { &#39;nvim-tree/nvim-web-devicons&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll also need to have a patched font if you want icons.&lt;/p&gt; 
&lt;h2&gt;Usage and customization&lt;/h2&gt; 
&lt;p&gt;Lualine has sections as shown below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;+-------------------------------------------------+
| A | B | C                             X | Y | Z |
+-------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each sections holds its components e.g. Vim&#39;s current mode.&lt;/p&gt; 
&lt;h3&gt;Configuring lualine in init.vim&lt;/h3&gt; 
&lt;p&gt;All the examples below are in lua. You can use the same examples in &lt;code&gt;.vim&lt;/code&gt; files by wrapping them in lua heredoc like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;lua &amp;lt;&amp;lt; END
require(&#39;lualine&#39;).setup()
END
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information, check out &lt;code&gt;:help lua-heredoc&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Default configuration&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).setup {
  options = {
    icons_enabled = true,
    theme = &#39;auto&#39;,
    component_separators = { left = &#39;&#39;, right = &#39;&#39;},
    section_separators = { left = &#39;&#39;, right = &#39;&#39;},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    always_show_tabline = true,
    globalstatus = false,
    refresh = {
      statusline = 100,
      tabline = 100,
      winbar = 100,
    }
  },
  sections = {
    lualine_a = {&#39;mode&#39;},
    lualine_b = {&#39;branch&#39;, &#39;diff&#39;, &#39;diagnostics&#39;},
    lualine_c = {&#39;filename&#39;},
    lualine_x = {&#39;encoding&#39;, &#39;fileformat&#39;, &#39;filetype&#39;},
    lualine_y = {&#39;progress&#39;},
    lualine_z = {&#39;location&#39;}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {&#39;filename&#39;},
    lualine_x = {&#39;location&#39;},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to get your current lualine config, you can do so with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).get_config()

&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Starting lualine&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Setting a theme&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;options = { theme = &#39;gruvbox&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All available themes are listed in &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&quot;&gt;THEMES.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please create a PR if you managed to port a popular theme before us, &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&quot;&gt;here is how to do it&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Customizing themes&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local custom_gruvbox = require&#39;lualine.themes.gruvbox&#39;

-- Change the background of lualine_c section for normal mode
custom_gruvbox.normal.c.bg = &#39;#112233&#39;

require(&#39;lualine&#39;).setup {
  options = { theme  = custom_gruvbox },
  ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Theme structure is available &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim/wiki/Writing-a-theme&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Separators&lt;/h3&gt; 
&lt;p&gt;lualine defines two kinds of separators:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;section_separators&lt;/code&gt; - separators between sections&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;component_separators&lt;/code&gt; - separators between the different components in sections&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if viewing this README in a browser, chances are the characters below will not be visible.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;options = {
  section_separators = { left = &#39;&#39;, right = &#39;&#39; },
  component_separators = { left = &#39;&#39;, right = &#39;&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here, left refers to the left-most sections (a, b, c), and right refers to the right-most sections (x, y, z).&lt;/p&gt; 
&lt;h4&gt;Disabling separators&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;options = { section_separators = &#39;&#39;, component_separators = &#39;&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Changing components in lualine sections&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {lualine_a = {&#39;mode&#39;}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available components&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;branch&lt;/code&gt; (git branch)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;buffers&lt;/code&gt; (shows currently available buffers)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt; (diagnostics count from your preferred source)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;diff&lt;/code&gt; (git diff status)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; (file encoding)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fileformat&lt;/code&gt; (file format)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;filesize&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;filetype&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;location&lt;/code&gt; (location in file in line:column format)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (vim mode)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;progress&lt;/code&gt; (%progress in file)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;searchcount&lt;/code&gt; (number of search matches when hlsearch is active)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;selectioncount&lt;/code&gt; (number of selected characters or lines)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tabs&lt;/code&gt; (shows currently available tabs)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;windows&lt;/code&gt; (shows currently available windows)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lsp_status&lt;/code&gt; (shows active LSPs in the current buffer and a progress spinner)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Custom components&lt;/h4&gt; 
&lt;h5&gt;Lua functions as lualine component&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local function hello()
  return [[hello world]]
end
sections = { lualine_a = { hello } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Vim functions as lualine component&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = { lualine_a = {&#39;FugitiveHead&#39;} }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Vim&#39;s statusline items as lualine component&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = { lualine_c = {&#39;%=&#39;, &#39;%t%m&#39;, &#39;%3p&#39;} }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Vim variables as lualine component&lt;/h5&gt; 
&lt;p&gt;Variables from &lt;code&gt;g:&lt;/code&gt;, &lt;code&gt;v:&lt;/code&gt;, &lt;code&gt;t:&lt;/code&gt;, &lt;code&gt;w:&lt;/code&gt;, &lt;code&gt;b:&lt;/code&gt;, &lt;code&gt;o:&lt;/code&gt;, &lt;code&gt;to:&lt;/code&gt;, &lt;code&gt;wo:&lt;/code&gt;, &lt;code&gt;bo:&lt;/code&gt; scopes can be used.&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;:h lua-vim-variables&lt;/code&gt; and &lt;code&gt;:h lua-vim-options&lt;/code&gt; if you are not sure what to use.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = { lualine_a = { &#39;g:coc_status&#39;, &#39;bo:filetype&#39; } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Lua expressions as lualine component&lt;/h5&gt; 
&lt;p&gt;You can use any valid lua expression as a component including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;oneliners&lt;/li&gt; 
 &lt;li&gt;global variables&lt;/li&gt; 
 &lt;li&gt;require statements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = { lualine_c = { &quot;os.date(&#39;%a&#39;)&quot;, &#39;data&#39;, &quot;require&#39;lsp-status&#39;.status()&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a global variable in this example.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Component options&lt;/h3&gt; 
&lt;p&gt;Component options can change the way a component behave. There are two kinds of options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;global options affecting all components&lt;/li&gt; 
 &lt;li&gt;local options affecting specific&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Global options can be used as local options (can be applied to specific components) but you cannot use local options as global. Global option used locally overwrites the global, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;    require(&#39;lualine&#39;).setup {
      options = { fmt = string.lower },
      sections = { lualine_a = {
        { &#39;mode&#39;, fmt = function(str) return str:sub(1,1) end } },
                  lualine_b = {&#39;branch&#39;} }
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; will be formatted with the passed function so only first char will be shown . On the other hand branch will be formatted with global formatter &lt;code&gt;string.lower&lt;/code&gt; so it will be showed in lower case.&lt;/p&gt; 
&lt;h4&gt;Available options&lt;/h4&gt; 
&lt;h4&gt;Global options&lt;/h4&gt; 
&lt;p&gt;These are &lt;code&gt;options&lt;/code&gt; that are used in options table. They set behavior of lualine.&lt;/p&gt; 
&lt;p&gt;Values set here are treated as default for other options that work in component level.&lt;/p&gt; 
&lt;p&gt;For example even though &lt;code&gt;icons_enabled&lt;/code&gt; is a general component option. You can set &lt;code&gt;icons_enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and icons will be disabled on all component. You can still overwrite defaults set in option table by specifying the option value in component.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;options = {
  theme = &#39;auto&#39;, -- lualine theme
  component_separators = { left = &#39;&#39;, right = &#39;&#39; },
  section_separators = { left = &#39;&#39;, right = &#39;&#39; },
  disabled_filetypes = {     -- Filetypes to disable lualine for.
      statusline = {},       -- only ignores the ft for statusline.
      winbar = {},           -- only ignores the ft for winbar.
  },

  ignore_focus = {},         -- If current filetype is in this list it&#39;ll
                             -- always be drawn as inactive statusline
                             -- and the last window will be drawn as active statusline.
                             -- for example if you don&#39;t want statusline of
                             -- your file tree / sidebar window to have active
                             -- statusline you can add their filetypes here.

  always_divide_middle = true, -- When set to true, left sections i.e. &#39;a&#39;,&#39;b&#39; and &#39;c&#39;
                               -- can&#39;t take over the entire statusline even
                               -- if neither of &#39;x&#39;, &#39;y&#39; or &#39;z&#39; are present.

  always_show_tabline = true -- When set to true, if you have configured lualine for displaying tabline
                          -- then tabline will always show. If set to false, then tabline will be displayed
                          -- only when there are more than 1 tab. (see :h showtabline)

  globalstatus = false,        -- enable global statusline (have a single statusline
                               -- at bottom of neovim instead of one for  every window).
                               -- This feature is only available in neovim 0.7 and higher.

  refresh = {                  -- sets how often lualine should refresh it&#39;s contents (in ms)
    statusline = 100,         -- The refresh option sets minimum time that lualine tries
    tabline = 100,            -- to maintain between refresh. It&#39;s not guarantied if situation
    winbar = 100              -- arises that lualine needs to refresh itself before this time
                               -- it&#39;ll do it.

                               -- Also you can force lualine&#39;s refresh by calling refresh function
                               -- like require(&#39;lualine&#39;).refresh()
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;General component options&lt;/h4&gt; 
&lt;p&gt;These are options that control behavior at component level and are available for all components.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;mode&#39;,
      icons_enabled = true, -- Enables the display of icons alongside the component.
      -- Defines the icon to be displayed in front of the component.
      -- Can be string|table
      -- As table it must contain the icon as first entry and can use
      -- color option to custom color the icon. Example:
      -- {&#39;branch&#39;, icon = &#39;&#39;} / {&#39;branch&#39;, icon = {&#39;&#39;, color={fg=&#39;green&#39;}}}

      -- icon position can also be set to the right side from table. Example:
      -- {&#39;branch&#39;, icon = {&#39;&#39;, align=&#39;right&#39;, color={fg=&#39;green&#39;}}}
      icon = nil,

      separator = nil,      -- Determines what separator to use for the component.
                            -- Note:
                            --  When a string is provided it&#39;s treated as component_separator.
                            --  When a table is provided it&#39;s treated as section_separator.
                            --  Passing an empty string disables the separator.
                            --
                            -- These options can be used to set colored separators
                            -- around a component.
                            --
                            -- The options need to be set as such:
                            --   separator = { left = &#39;&#39;, right = &#39;&#39;}
                            --
                            -- Where left will be placed on left side of component,
                            -- and right will be placed on its right.
                            --

      cond = nil,           -- Condition function, the component is loaded when the function returns `true`.

      draw_empty = false,   -- Whether to draw component even if it&#39;s empty.
                            -- Might be useful if you want just the separator.

      -- Defines a custom color for the component:
      --
      -- &#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; } | function
      -- Note:
      --  &#39;|&#39; is synonymous with &#39;or&#39;, meaning a different acceptable format for that placeholder.
      -- color function has to return one of other color types (&#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; })
      -- color functions can be used to have different colors based on state as shown below.
      --
      -- Examples:
      --   color = { fg = &#39;#ffaa88&#39;, bg = &#39;grey&#39;, gui=&#39;italic,bold&#39; },
      --   color = { fg = 204 }   -- When fg/bg are omitted, they default to the your theme&#39;s fg/bg.
      --   color = &#39;WarningMsg&#39;   -- Highlight groups can also be used.
      --   color = function(section)
      --      return { fg = vim.bo.modified and &#39;#aa3355&#39; or &#39;#33aa88&#39; }
      --   end,
      color = nil, -- The default is your theme&#39;s color for that section and mode.

      -- Specify what type a component is, if omitted, lualine will guess it for you.
      --
      -- Available types are:
      --   [format: type_name(example)], mod(branch/filename),
      --   stl(%f/%m), var(g:coc_status/bo:modifiable),
      --   lua_expr(lua expressions), vim_fun(viml function name)
      --
      -- Note:
      -- lua_expr is short for lua-expression and vim_fun is short for vim-function.
      type = nil,

      padding = 1, -- Adds padding to the left and right of components.
                   -- Padding can be specified to left or right independently, e.g.:
                   --   padding = { left = left_padding, right = right_padding }

      fmt = nil,   -- Format function, formats the component&#39;s output.
                   -- This function receives two arguments:
                   -- - string that is going to be displayed and
                   --   that can be changed, enhanced and etc.
                   -- - context object with information you might
                   --   need. E.g. tabnr if used with tabs.
      on_click = nil, -- takes a function that is called when component is clicked with mouse.
                   -- the function receives several arguments
                   -- - number of clicks in case of multiple clicks
                   -- - mouse button used (l(left)/r(right)/m(middle)/...)
                   -- - modifiers pressed (s(shift)/c(ctrl)/a(alt)/m(meta)...)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Component specific options&lt;/h4&gt; 
&lt;p&gt;These are options that are available on specific components. For example, you have option on &lt;code&gt;diagnostics&lt;/code&gt; component to specify what your diagnostic sources will be.&lt;/p&gt; 
&lt;h4&gt;buffers component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;buffers&#39;,
      show_filename_only = true,   -- Shows shortened relative path when set to false.
      hide_filename_extension = false,   -- Hide filename extension when set to true.
      show_modified_status = true, -- Shows indicator when the buffer is modified.

      mode = 0, -- 0: Shows buffer name
                -- 1: Shows buffer index
                -- 2: Shows buffer name + buffer index
                -- 3: Shows buffer number
                -- 4: Shows buffer name + buffer number

      max_length = vim.o.columns * 2 / 3, -- Maximum width of buffers component,
                                          -- it can also be a function that returns
                                          -- the value of `max_length` dynamically.
      filetype_names = {
        TelescopePrompt = &#39;Telescope&#39;,
        dashboard = &#39;Dashboard&#39;,
        packer = &#39;Packer&#39;,
        fzf = &#39;FZF&#39;,
        alpha = &#39;Alpha&#39;
      }, -- Shows specific buffer name for that filetype ( { `filetype` = `buffer_name`, ... } )

      -- Automatically updates active buffer color to match color of other components (will be overidden if buffers_color is set)
      use_mode_colors = false,

      buffers_color = {
        -- Same values as the general color option can be used here.
        active = &#39;lualine_{section}_normal&#39;,     -- Color for active buffer.
        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive buffer.
      },

      symbols = {
        modified = &#39; ●&#39;,      -- Text to show when the buffer is modified
        alternate_file = &#39;#&#39;, -- Text to show to identify the alternate file
        directory =  &#39;&#39;,     -- Text to show when the buffer is a directory
      },
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;datetime component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;datetime&#39;,
      -- options: default, us, uk, iso, or your own format string (&quot;%H:%M&quot;, etc..)
      style = &#39;default&#39;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;diagnostics component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;diagnostics&#39;,

      -- Table of diagnostic sources, available sources are:
      --   &#39;nvim_lsp&#39;, &#39;nvim_diagnostic&#39;, &#39;nvim_workspace_diagnostic&#39;, &#39;coc&#39;, &#39;ale&#39;, &#39;vim_lsp&#39;.
      -- or a function that returns a table as such:
      --   { error=error_cnt, warn=warn_cnt, info=info_cnt, hint=hint_cnt }
      sources = { &#39;nvim_diagnostic&#39;, &#39;coc&#39; },

      -- Displays diagnostics for the defined severity types
      sections = { &#39;error&#39;, &#39;warn&#39;, &#39;info&#39;, &#39;hint&#39; },

      diagnostics_color = {
        -- Same values as the general color option can be used here.
        error = &#39;DiagnosticError&#39;, -- Changes diagnostics&#39; error color.
        warn  = &#39;DiagnosticWarn&#39;,  -- Changes diagnostics&#39; warn color.
        info  = &#39;DiagnosticInfo&#39;,  -- Changes diagnostics&#39; info color.
        hint  = &#39;DiagnosticHint&#39;,  -- Changes diagnostics&#39; hint color.
      },
      symbols = {error = &#39;E&#39;, warn = &#39;W&#39;, info = &#39;I&#39;, hint = &#39;H&#39;},
      colored = true,           -- Displays diagnostics status in color if set to true.
      update_in_insert = false, -- Update diagnostics in insert mode.
      always_visible = false,   -- Show diagnostics even if there are none.
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;diff component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;diff&#39;,
      colored = true, -- Displays a colored diff status if set to true
      diff_color = {
        -- Same color values as the general color option can be used here.
        added    = &#39;LuaLineDiffAdd&#39;,    -- Changes the diff&#39;s added color
        modified = &#39;LuaLineDiffChange&#39;, -- Changes the diff&#39;s modified color
        removed  = &#39;LuaLineDiffDelete&#39;, -- Changes the diff&#39;s removed color you
      },
      symbols = {added = &#39;+&#39;, modified = &#39;~&#39;, removed = &#39;-&#39;}, -- Changes the symbols used by the diff.
      source = nil, -- A function that works as a data source for diff.
                    -- It must return a table as such:
                    --   { added = add_count, modified = modified_count, removed = removed_count }
                    -- or nil on failure. count &amp;lt;= 0 won&#39;t be displayed.
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;fileformat component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;fileformat&#39;,
      symbols = {
        unix = &#39;&#39;, -- e712
        dos = &#39;&#39;,  -- e70f
        mac = &#39;&#39;,  -- e711
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;filename component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;filename&#39;,
      file_status = true,      -- Displays file status (readonly status, modified status)
      newfile_status = false,  -- Display new file status (new file means no write after created)
      path = 0,                -- 0: Just the filename
                               -- 1: Relative path
                               -- 2: Absolute path
                               -- 3: Absolute path, with tilde as the home directory
                               -- 4: Filename and parent dir, with tilde as the home directory

      shorting_target = 40,    -- Shortens path to leave 40 spaces in the window
                               -- for other components. (terrible name, any suggestions?)
      symbols = {
        modified = &#39;[+]&#39;,      -- Text to show when the file is modified.
        readonly = &#39;[-]&#39;,      -- Text to show when the file is non-modifiable or readonly.
        unnamed = &#39;[No Name]&#39;, -- Text to show for unnamed buffers.
        newfile = &#39;[New]&#39;,     -- Text to show for newly created file before first write
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;filetype component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;filetype&#39;,
      colored = true,   -- Displays filetype icon in color if set to true
      icon_only = false, -- Display only an icon for filetype
      icon = { align = &#39;right&#39; }, -- Display filetype icon on the right hand side
      -- icon =    {&#39;X&#39;, align=&#39;right&#39;}
      -- Icon string ^ in table is ignored in filetype component
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;encoding component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;encoding&#39;,
      -- Show &#39;[BOM]&#39; when the file has a byte-order mark
        show_bomb = false,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;searchcount component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;searchcount&#39;,
      maxcount = 999,
      timeout = 500,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;tabs component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;tabs&#39;,
      tab_max_length = 40,  -- Maximum width of each tab. The content will be shorten dynamically (example: apple/orange -&amp;gt; a/orange)
      max_length = vim.o.columns / 3, -- Maximum width of tabs component.
                                      -- Note:
                                      -- It can also be a function that returns
                                      -- the value of `max_length` dynamically.
      mode = 0, -- 0: Shows tab_nr
                -- 1: Shows tab_name
                -- 2: Shows tab_nr + tab_name

      path = 0, -- 0: just shows the filename
                -- 1: shows the relative path and shorten $HOME to ~
                -- 2: shows the full path
                -- 3: shows the full path and shorten $HOME to ~

      -- Automatically updates active tab color to match color of other components (will be overidden if buffers_color is set)
      use_mode_colors = false,

      tabs_color = {
        -- Same values as the general color option can be used here.
        active = &#39;lualine_{section}_normal&#39;,     -- Color for active tab.
        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive tab.
      },

      show_modified_status = true,  -- Shows a symbol next to the tab name if the file has been modified.
      symbols = {
        modified = &#39;[+]&#39;,  -- Text to show when the file is modified.
      },

      fmt = function(name, context)
        -- Show + if buffer is modified in tab
        local buflist = vim.fn.tabpagebuflist(context.tabnr)
        local winnr = vim.fn.tabpagewinnr(context.tabnr)
        local bufnr = buflist[winnr]
        local mod = vim.fn.getbufvar(bufnr, &#39;&amp;amp;mod&#39;)

        return name .. (mod == 1 and &#39; +&#39; or &#39;&#39;)
      end
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;windows component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;windows&#39;,
      show_filename_only = true,   -- Shows shortened relative path when set to false.
      show_modified_status = true, -- Shows indicator when the window is modified.

      mode = 0, -- 0: Shows window name
                -- 1: Shows window index
                -- 2: Shows window name + window index

      max_length = vim.o.columns * 2 / 3, -- Maximum width of windows component,
                                          -- it can also be a function that returns
                                          -- the value of `max_length` dynamically.
      filetype_names = {
        TelescopePrompt = &#39;Telescope&#39;,
        dashboard = &#39;Dashboard&#39;,
        packer = &#39;Packer&#39;,
        fzf = &#39;FZF&#39;,
        alpha = &#39;Alpha&#39;
      }, -- Shows specific window name for that filetype ( { `filetype` = `window_name`, ... } )

      disabled_buftypes = { &#39;quickfix&#39;, &#39;prompt&#39; }, -- Hide a window if its buffer&#39;s type is disabled

      -- Automatically updates active window color to match color of other components (will be overidden if buffers_color is set)
      use_mode_colors = false,

      windows_color = {
        -- Same values as the general color option can be used here.
        active = &#39;lualine_{section}_normal&#39;,     -- Color for active window.
        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive window.
      },
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;lsp status component options&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sections = {
  lualine_a = {
    {
      &#39;lsp_status&#39;,
      icon = &#39;&#39;, -- f013
      symbols = {
        -- Standard unicode symbols to cycle through for LSP progress:
        spinner = { &#39;⠋&#39;, &#39;⠙&#39;, &#39;⠹&#39;, &#39;⠸&#39;, &#39;⠼&#39;, &#39;⠴&#39;, &#39;⠦&#39;, &#39;⠧&#39;, &#39;⠇&#39;, &#39;⠏&#39; },
        -- Standard unicode symbol for when LSP is done:
        done = &#39;✓&#39;,
        -- Delimiter inserted between LSP names:
        separator = &#39; &#39;,
      },
      -- List of LSP names to ignore (e.g., `null-ls`):
      ignore_lsp = {},
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Tabline&lt;/h3&gt; 
&lt;p&gt;You can use lualine to display components in tabline. The configuration for tabline sections is exactly the same as that of the statusline.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;tabline = {
  lualine_a = {},
  lualine_b = {&#39;branch&#39;},
  lualine_c = {&#39;filename&#39;},
  lualine_x = {},
  lualine_y = {},
  lualine_z = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will show the branch and filename components on top of neovim inside tabline.&lt;/p&gt; 
&lt;p&gt;lualine also provides 2 components, buffers and tabs, that you can use to get a more traditional tabline/bufferline.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;tabline = {
  lualine_a = {&#39;buffers&#39;},
  lualine_b = {&#39;branch&#39;},
  lualine_c = {&#39;filename&#39;},
  lualine_x = {},
  lualine_y = {},
  lualine_z = {&#39;tabs&#39;}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Winbar&lt;/h3&gt; 
&lt;p&gt;From neovim-0.8 you can customize your winbar with lualine. Winbar configuration is similar to statusline.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;winbar = {
  lualine_a = {},
  lualine_b = {},
  lualine_c = {&#39;filename&#39;},
  lualine_x = {},
  lualine_y = {},
  lualine_z = {}
}

inactive_winbar = {
  lualine_a = {},
  lualine_b = {},
  lualine_c = {&#39;filename&#39;},
  lualine_x = {},
  lualine_y = {},
  lualine_z = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Just like statusline you can separately specify winbar for active and inactive windows. Any lualine component can be placed in winbar. All kinds of custom components supported in statusline are also supported for winbar too. In general You can treat winbar as another lualine statusline that just appears on top of windows instead of at bottom.&lt;/p&gt; 
&lt;h4&gt;Buffers&lt;/h4&gt; 
&lt;p&gt;Shows currently open buffers. Like bufferline . See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#buffers-component-options&quot;&gt;buffers options&lt;/a&gt; for all builtin behaviors of buffers component. You can use &lt;code&gt;:LualineBuffersJump&lt;/code&gt; to jump to buffer based on index of buffer in buffers component. Jumping to non-existent buffer indices generates an error. To avoid these errors &lt;code&gt;LualineBuffersJump&lt;/code&gt; provides &lt;code&gt;&amp;lt;bang&amp;gt;&lt;/code&gt; support, meaning that you can call &lt;code&gt;:LualineBufferJump!&lt;/code&gt; to ignore these errors.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;  :LualineBuffersJump 2  &quot; Jumps to 2nd buffer in buffers component.
  :LualineBuffersJump $  &quot; Jumps to last buffer in buffers component.
  :LualineBuffersJump! 3  &quot; Attempts to jump to 3rd buffer, if it exists.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Tabs&lt;/h4&gt; 
&lt;p&gt;Shows currently open tab. Like usual tabline. See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#tabs-component-options&quot;&gt;tabs options&lt;/a&gt; for all builtin behaviors of tabs component. You can also use &lt;code&gt;:LualineRenameTab&lt;/code&gt; to set a name for a tabpage. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:LualineRenameTab Project_K
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s useful when you&#39;re using rendering mode 2/3 in tabs. To unname a tabpage run &lt;code&gt;:LualineRenameTab&lt;/code&gt; without argument.&lt;/p&gt; 
&lt;h4&gt;Tabline as statusline&lt;/h4&gt; 
&lt;p&gt;You can also completely move your statusline to a tabline by configuring &lt;code&gt;lualine.tabline&lt;/code&gt; and disabling &lt;code&gt;lualine.sections&lt;/code&gt; and &lt;code&gt;lualine.inactive_sections&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;tabline = {
......
  },
sections = {},
inactive_sections = {},
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want a more sophisticated tabline you can use other tabline plugins with lualine too, for example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/akinsho/nvim-bufferline.lua&quot;&gt;nvim-bufferline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kdheepak/tabline.nvim&quot;&gt;tabline.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;tabline.nvim even uses lualine&#39;s theme by default 🙌 You can find a bigger list &lt;a href=&quot;https://github.com/rockerBOO/awesome-neovim#tabline&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;p&gt;lualine extensions change statusline appearance for a window/buffer with specified filetypes.&lt;/p&gt; 
&lt;p&gt;By default no extensions are loaded to improve performance. You can load extensions with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;extensions = {&#39;quickfix&#39;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available extensions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;aerial&lt;/li&gt; 
 &lt;li&gt;chadtree&lt;/li&gt; 
 &lt;li&gt;ctrlspace&lt;/li&gt; 
 &lt;li&gt;fern&lt;/li&gt; 
 &lt;li&gt;fugitive&lt;/li&gt; 
 &lt;li&gt;fzf&lt;/li&gt; 
 &lt;li&gt;lazy&lt;/li&gt; 
 &lt;li&gt;man&lt;/li&gt; 
 &lt;li&gt;mason&lt;/li&gt; 
 &lt;li&gt;mundo&lt;/li&gt; 
 &lt;li&gt;neo-tree&lt;/li&gt; 
 &lt;li&gt;nerdtree&lt;/li&gt; 
 &lt;li&gt;nvim-dap-ui&lt;/li&gt; 
 &lt;li&gt;nvim-tree&lt;/li&gt; 
 &lt;li&gt;oil&lt;/li&gt; 
 &lt;li&gt;overseer&lt;/li&gt; 
 &lt;li&gt;quickfix&lt;/li&gt; 
 &lt;li&gt;symbols-outline&lt;/li&gt; 
 &lt;li&gt;toggleterm&lt;/li&gt; 
 &lt;li&gt;trouble&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Custom extensions&lt;/h4&gt; 
&lt;p&gt;You can define your own extensions. If you believe an extension may be useful to others, then please submit a PR.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local my_extension = { sections = { lualine_a = {&#39;mode&#39;} }, filetypes = {&#39;lua&#39;} }
require(&#39;lualine&#39;).setup { extensions = { my_extension } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Refreshing lualine&lt;/h3&gt; 
&lt;p&gt;By default lualine refreshes itself based on timer and some events. You can set the interval of the timer with refresh option. However you can also force lualine to refresh at any time by calling &lt;code&gt;lualine.refresh&lt;/code&gt; function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).refresh({
  scope = &#39;tabpage&#39;,  -- scope of refresh all/tabpage/window
  place = { &#39;statusline&#39;, &#39;winbar&#39;, &#39;tabline&#39; },  -- lualine segment ro refresh.
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The arguments shown here are default values. So not passing any of them will be treated as if a default value was passed.&lt;/p&gt; 
&lt;p&gt;So you can simply do&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).refresh()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Avoid calling &lt;code&gt;lualine.refresh&lt;/code&gt; inside components. Since components are evaluated during refresh, calling refresh while refreshing can have undesirable effects.&lt;/p&gt; 
&lt;h3&gt;Disabling lualine&lt;/h3&gt; 
&lt;p&gt;You can disable lualine for specific filetypes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;options = { disabled_filetypes = {&#39;lua&#39;} }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also disable lualine completely. Note that you need to call this after the setup&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  require(&#39;lualine&#39;).hide({
    place = {&#39;statusline&#39;, &#39;tabline&#39;, &#39;winbar&#39;}, -- The segment this change applies to.
    unhide = false,  -- whether to re-enable lualine again/
  })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The arguments show for hide above are default values. Which means even if the hide function is called without arguments it&#39;ll work as if these were passed.&lt;/p&gt; 
&lt;p&gt;So in short to disable lualine completely you can do&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).hide()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable it again you can do&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).hide({unhide=true})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;Thanks to these wonderful people, we enjoy this awesome plugin.&lt;/p&gt; 
&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=nvim-lualine/lualine.nvim&quot;&gt; &lt;/a&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h3&gt;Wiki&lt;/h3&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim/wiki&quot;&gt;wiki&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;p&gt;You can find some useful &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim/wiki/Component-snippets&quot;&gt;configuration snippets&lt;/a&gt; here. You can also share your awesome snippets with others.&lt;/p&gt; 
&lt;p&gt;If you want to extend lualine with plugins or want to know which ones already do, &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim/wiki/Plugins&quot;&gt;wiki/plugins&lt;/a&gt; is for you.&lt;/p&gt; 
&lt;h3&gt;Support&lt;/h3&gt; 
&lt;p&gt;If you find this project useful, consider supporting development:&lt;/p&gt; 
&lt;a href=&quot;https://buymeacoffee.com/shadmansalj&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&quot; alt=&quot;Buy Me a Coffee&quot; width=&quot;200&quot;&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>phillipi/pix2pix</title>
      <link>https://github.com/phillipi/pix2pix</link>
      <description>&lt;p&gt;Image-to-image translation with conditional adversarial nets&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pix2pix&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://phillipi.github.io/pix2pix/&quot;&gt;Project&lt;/a&gt; | &lt;a href=&quot;https://arxiv.org/abs/1611.07004&quot;&gt;Arxiv&lt;/a&gt; | &lt;a href=&quot;https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix&quot;&gt;PyTorch&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Torch implementation for learning a mapping from input images to output images, for example:&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/phillipi/pix2pix/master/imgs/examples.jpg&quot; width=&quot;900px&quot;&gt; 
&lt;p&gt;Image-to-Image Translation with Conditional Adversarial Networks&lt;br&gt; &lt;a href=&quot;http://web.mit.edu/phillipi/&quot;&gt;Phillip Isola&lt;/a&gt;, &lt;a href=&quot;https://www.cs.cmu.edu/~junyanz/&quot;&gt;Jun-Yan Zhu&lt;/a&gt;, &lt;a href=&quot;https://people.eecs.berkeley.edu/~tinghuiz/&quot;&gt;Tinghui Zhou&lt;/a&gt;, &lt;a href=&quot;https://people.eecs.berkeley.edu/~efros/&quot;&gt;Alexei A. Efros&lt;/a&gt;&lt;br&gt; CVPR, 2017.&lt;/p&gt; 
&lt;p&gt;On some tasks, decent results can be obtained fairly quickly and on small datasets. For example, to learn to generate facades (example shown above), we trained on just 400 images for about 2 hours (on a single Pascal Titan X GPU). However, for harder problems it may be important to train on far larger datasets, and for many hours or even days.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please check out our &lt;a href=&quot;https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix&quot;&gt;PyTorch&lt;/a&gt; implementation for pix2pix and CycleGAN. The PyTorch version is under active development and can produce results comparable to or better than this Torch version.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux or OSX&lt;/li&gt; 
 &lt;li&gt;NVIDIA GPU + CUDA CuDNN (CPU mode and CUDA without CuDNN may work with minimal modification, but untested)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install torch and dependencies from &lt;a href=&quot;https://github.com/torch/distro&quot;&gt;https://github.com/torch/distro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install torch packages &lt;code&gt;nngraph&lt;/code&gt; and &lt;code&gt;display&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;luarocks install nngraph
luarocks install https://raw.githubusercontent.com/szym/display/master/display-scm-0.rockspec
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone this repo:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:phillipi/pix2pix.git
cd pix2pix
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download the dataset (e.g., &lt;a href=&quot;http://cmp.felk.cvut.cz/~tylecr1/facade/&quot;&gt;CMP Facades&lt;/a&gt;):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bash ./datasets/download_dataset.sh facades
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Train the model&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DATA_ROOT=./datasets/facades name=facades_generation which_direction=BtoA th train.lua
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;(CPU only) The same training command without using a GPU or CUDNN. Setting the environment variables &lt;code&gt;gpu=0 cudnn=0&lt;/code&gt; forces CPU only&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DATA_ROOT=./datasets/facades name=facades_generation which_direction=BtoA gpu=0 cudnn=0 batchSize=10 save_epoch_freq=5 th train.lua
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Optionally) start the display server to view results as the model trains. ( See &lt;a href=&quot;https://raw.githubusercontent.com/phillipi/pix2pix/master/#display-ui&quot;&gt;Display UI&lt;/a&gt; for more details):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;th -ldisplay.start 8000 0.0.0.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Finally, test the model:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DATA_ROOT=./datasets/facades name=facades_generation which_direction=BtoA phase=val th test.lua
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The test results will be saved to an html file here: &lt;code&gt;./results/facades_generation/latest_net_G_val/index.html&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Train&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DATA_ROOT=/path/to/data/ name=expt_name which_direction=AtoB th train.lua
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Switch &lt;code&gt;AtoB&lt;/code&gt; to &lt;code&gt;BtoA&lt;/code&gt; to train translation in opposite direction.&lt;/p&gt; 
&lt;p&gt;Models are saved to &lt;code&gt;./checkpoints/expt_name&lt;/code&gt; (can be changed by passing &lt;code&gt;checkpoint_dir=your_dir&lt;/code&gt; in train.lua).&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;opt&lt;/code&gt; in train.lua for additional training options.&lt;/p&gt; 
&lt;h2&gt;Test&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DATA_ROOT=/path/to/data/ name=expt_name which_direction=AtoB phase=val th test.lua
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will run the model named &lt;code&gt;expt_name&lt;/code&gt; in direction &lt;code&gt;AtoB&lt;/code&gt; on all images in &lt;code&gt;/path/to/data/val&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Result images, and a webpage to view them, are saved to &lt;code&gt;./results/expt_name&lt;/code&gt; (can be changed by passing &lt;code&gt;results_dir=your_dir&lt;/code&gt; in test.lua).&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;opt&lt;/code&gt; in test.lua for additional testing options.&lt;/p&gt; 
&lt;h2&gt;Datasets&lt;/h2&gt; 
&lt;p&gt;Download the datasets using the following script. Some of the datasets are collected by other researchers. Please cite their papers if you use the data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bash ./datasets/download_dataset.sh dataset_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;facades&lt;/code&gt;: 400 images from &lt;a href=&quot;http://cmp.felk.cvut.cz/~tylecr1/facade/&quot;&gt;CMP Facades dataset&lt;/a&gt;. [&lt;a href=&quot;https://raw.githubusercontent.com/phillipi/pix2pix/master/datasets/bibtex/facades.tex&quot;&gt;Citation&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cityscapes&lt;/code&gt;: 2975 images from the &lt;a href=&quot;https://www.cityscapes-dataset.com/&quot;&gt;Cityscapes training set&lt;/a&gt;. [&lt;a href=&quot;https://raw.githubusercontent.com/phillipi/pix2pix/master/datasets/bibtex/cityscapes.tex&quot;&gt;Citation&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;maps&lt;/code&gt;: 1096 training images scraped from Google Maps&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;edges2shoes&lt;/code&gt;: 50k training images from &lt;a href=&quot;http://vision.cs.utexas.edu/projects/finegrained/utzap50k/&quot;&gt;UT Zappos50K dataset&lt;/a&gt;. Edges are computed by &lt;a href=&quot;https://github.com/s9xie/hed&quot;&gt;HED&lt;/a&gt; edge detector + post-processing. [&lt;a href=&quot;https://raw.githubusercontent.com/phillipi/pix2pix/master/datasets/bibtex/shoes.tex&quot;&gt;Citation&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;edges2handbags&lt;/code&gt;: 137K Amazon Handbag images from &lt;a href=&quot;https://github.com/junyanz/iGAN&quot;&gt;iGAN project&lt;/a&gt;. Edges are computed by &lt;a href=&quot;https://github.com/s9xie/hed&quot;&gt;HED&lt;/a&gt; edge detector + post-processing. [&lt;a href=&quot;https://raw.githubusercontent.com/phillipi/pix2pix/master/datasets/bibtex/handbags.tex&quot;&gt;Citation&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;night2day&lt;/code&gt;: around 20K natural scene images from &lt;a href=&quot;http://transattr.cs.brown.edu/&quot;&gt;Transient Attributes dataset&lt;/a&gt; [&lt;a href=&quot;https://raw.githubusercontent.com/phillipi/pix2pix/master/datasets/bibtex/transattr.tex&quot;&gt;Citation&lt;/a&gt;]. To train a &lt;code&gt;day2night&lt;/code&gt; pix2pix model, you need to add &lt;code&gt;which_direction=BtoA&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Models&lt;/h2&gt; 
&lt;p&gt;Download the pre-trained models with the following script. You need to rename the model (e.g., &lt;code&gt;facades_label2image&lt;/code&gt; to &lt;code&gt;/checkpoints/facades/latest_net_G.t7&lt;/code&gt;) after the download has finished.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bash ./models/download_model.sh model_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;facades_label2image&lt;/code&gt; (label -&amp;gt; facade): trained on the CMP Facades dataset.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cityscapes_label2image&lt;/code&gt; (label -&amp;gt; street scene): trained on the Cityscapes dataset.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cityscapes_image2label&lt;/code&gt; (street scene -&amp;gt; label): trained on the Cityscapes dataset.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;edges2shoes&lt;/code&gt; (edge -&amp;gt; photo): trained on UT Zappos50K dataset.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;edges2handbags&lt;/code&gt; (edge -&amp;gt; photo): trained on Amazon handbags images.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;day2night&lt;/code&gt; (daytime scene -&amp;gt; nighttime scene): trained on around 100 &lt;a href=&quot;http://transattr.cs.brown.edu/&quot;&gt;webcams&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Setup Training and Test data&lt;/h2&gt; 
&lt;h3&gt;Generating Pairs&lt;/h3&gt; 
&lt;p&gt;We provide a python script to generate training data in the form of pairs of images {A,B}, where A and B are two different depictions of the same underlying scene. For example, these might be pairs {label map, photo} or {bw image, color image}. Then we can learn to translate A to B or B to A:&lt;/p&gt; 
&lt;p&gt;Create folder &lt;code&gt;/path/to/data&lt;/code&gt; with subfolders &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; should each have their own subfolders &lt;code&gt;train&lt;/code&gt;, &lt;code&gt;val&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, etc. In &lt;code&gt;/path/to/data/A/train&lt;/code&gt;, put training images in style A. In &lt;code&gt;/path/to/data/B/train&lt;/code&gt;, put the corresponding images in style B. Repeat same for other data splits (&lt;code&gt;val&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, etc).&lt;/p&gt; 
&lt;p&gt;Corresponding images in a pair {A,B} must be the same size and have the same filename, e.g., &lt;code&gt;/path/to/data/A/train/1.jpg&lt;/code&gt; is considered to correspond to &lt;code&gt;/path/to/data/B/train/1.jpg&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Once the data is formatted this way, call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python scripts/combine_A_and_B.py --fold_A /path/to/data/A --fold_B /path/to/data/B --fold_AB /path/to/data
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will combine each pair of images (A,B) into a single image file, ready for training.&lt;/p&gt; 
&lt;h3&gt;Notes on Colorization&lt;/h3&gt; 
&lt;p&gt;No need to run &lt;code&gt;combine_A_and_B.py&lt;/code&gt; for colorization. Instead, you need to prepare some natural images and set &lt;code&gt;preprocess=colorization&lt;/code&gt; in the script. The program will automatically convert each RGB image into Lab color space, and create &lt;code&gt;L -&amp;gt; ab&lt;/code&gt; image pair during the training. Also set &lt;code&gt;input_nc=1&lt;/code&gt; and &lt;code&gt;output_nc=2&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Extracting Edges&lt;/h3&gt; 
&lt;p&gt;We provide python and Matlab scripts to extract coarse edges from photos. Run &lt;code&gt;scripts/edges/batch_hed.py&lt;/code&gt; to compute &lt;a href=&quot;https://github.com/s9xie/hed&quot;&gt;HED&lt;/a&gt; edges. Run &lt;code&gt;scripts/edges/PostprocessHED.m&lt;/code&gt; to simplify edges with additional post-processing steps. Check the code documentation for more details.&lt;/p&gt; 
&lt;h3&gt;Evaluating Labels2Photos on Cityscapes&lt;/h3&gt; 
&lt;p&gt;We provide scripts for running the evaluation of the Labels2Photos task on the Cityscapes &lt;strong&gt;validation&lt;/strong&gt; set. We assume that you have installed &lt;code&gt;caffe&lt;/code&gt; (and &lt;code&gt;pycaffe&lt;/code&gt;) in your system. If not, see the &lt;a href=&quot;http://caffe.berkeleyvision.org/installation.html&quot;&gt;official website&lt;/a&gt; for installation instructions. Once &lt;code&gt;caffe&lt;/code&gt; is successfully installed, download the pre-trained FCN-8s semantic segmentation model (512MB) by running&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bash ./scripts/eval_cityscapes/download_fcn8s.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then make sure &lt;code&gt;./scripts/eval_cityscapes/&lt;/code&gt; is in your system&#39;s python path. If not, run the following command to add it&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export PYTHONPATH=${PYTHONPATH}:./scripts/eval_cityscapes/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can run the following command to evaluate your predictions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python ./scripts/eval_cityscapes/evaluate.py --cityscapes_dir /path/to/original/cityscapes/dataset/ --result_dir /path/to/your/predictions/ --output_dir /path/to/output/directory/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Images stored under &lt;code&gt;--result_dir&lt;/code&gt; should contain your model predictions on the Cityscapes &lt;strong&gt;validation&lt;/strong&gt; split, and have the original Cityscapes naming convention (e.g., &lt;code&gt;frankfurt_000001_038418_leftImg8bit.png&lt;/code&gt;). The script will output a text file under &lt;code&gt;--output_dir&lt;/code&gt; containing the metric.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Further notes&lt;/strong&gt;: Our pre-trained FCN model is &lt;strong&gt;not&lt;/strong&gt; supposed to work on Cityscapes in the original resolution (1024x2048) as it was trained on 256x256 images that are then upsampled to 1024x2048 during training. The purpose of the resizing during training was to 1) keep the label maps in the original high resolution untouched and 2) avoid the need to change the standard FCN training code and the architecture for Cityscapes. During test time, you need to synthesize 256x256 results. Our test code will automatically upsample your results to 1024x2048 before feeding them to the pre-trained FCN model. The output is at 1024x2048 resolution and will be compared to 1024x2048 ground truth labels. You do not need to resize the ground truth labels. The best way to verify whether everything is correct is to reproduce the numbers for real images in the paper first. To achieve it, you need to resize the original/real Cityscapes images (&lt;strong&gt;not&lt;/strong&gt; labels) to 256x256 and feed them to the evaluation code.&lt;/p&gt; 
&lt;h2&gt;Display UI&lt;/h2&gt; 
&lt;p&gt;Optionally, for displaying images during training and test, use the &lt;a href=&quot;https://github.com/szym/display&quot;&gt;display package&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install it with: &lt;code&gt;luarocks install https://raw.githubusercontent.com/szym/display/master/display-scm-0.rockspec&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Then start the server with: &lt;code&gt;th -ldisplay.start&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Open this URL in your browser: &lt;a href=&quot;http://localhost:8000&quot;&gt;http://localhost:8000&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, the server listens on localhost. Pass &lt;code&gt;0.0.0.0&lt;/code&gt; to allow external connections on any interface:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;th -ldisplay.start 8000 0.0.0.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open &lt;code&gt;http://(hostname):(port)/&lt;/code&gt; in your browser to load the remote desktop.&lt;/p&gt; 
&lt;p&gt;L1 error is plotted to the display by default. Set the environment variable &lt;code&gt;display_plot&lt;/code&gt; to a comma-separated list of values &lt;code&gt;errL1&lt;/code&gt;, &lt;code&gt;errG&lt;/code&gt; and &lt;code&gt;errD&lt;/code&gt; to visualize the L1, generator, and discriminator error respectively. For example, to plot only the generator and discriminator errors to the display instead of the default L1 error, set &lt;code&gt;display_plot=&quot;errG,errD&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;If you use this code for your research, please cite our paper &lt;a href=&quot;https://arxiv.org/pdf/1611.07004v1.pdf&quot;&gt;Image-to-Image Translation Using Conditional Adversarial Networks&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@article{pix2pix2017,
  title={Image-to-Image Translation with Conditional Adversarial Networks},
  author={Isola, Phillip and Zhu, Jun-Yan and Zhou, Tinghui and Efros, Alexei A},
  journal={CVPR},
  year={2017}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Cat Paper Collection&lt;/h2&gt; 
&lt;p&gt;If you love cats, and love reading cool graphics, vision, and learning papers, please check out the Cat Paper Collection:&lt;br&gt; &lt;a href=&quot;https://github.com/junyanz/CatPapers&quot;&gt;[Github]&lt;/a&gt; &lt;a href=&quot;https://www.cs.cmu.edu/~junyanz/cat/cat_papers.html&quot;&gt;[Webpage]&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Code borrows heavily from &lt;a href=&quot;https://github.com/soumith/dcgan.torch&quot;&gt;DCGAN&lt;/a&gt;. The data loader is modified from &lt;a href=&quot;https://github.com/soumith/dcgan.torch&quot;&gt;DCGAN&lt;/a&gt; and &lt;a href=&quot;https://github.com/pathak22/context-encoder&quot;&gt;Context-Encoder&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>opentibiabr/canary</title>
      <link>https://github.com/opentibiabr/canary</link>
      <description>&lt;p&gt;Canary Server 13.x for OpenTibia community.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTibiaBR - Canary&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/gvTj5sh9Mp&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/528117503952551936.svg?style=flat-square&amp;amp;logo=discord&quot; alt=&quot;Discord Channel&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Ubuntu&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-cmake.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-cmake.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Windows - CMake&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-solution.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-solution.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Windows - Solution&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-docker.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-docker.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Docker&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sonarcloud.io/dashboard?id=opentibiabr_canary&quot;&gt;&lt;img src=&quot;https://sonarcloud.io/api/project_badges/measure?project=opentibiabr_canary&amp;amp;metric=alert_status&quot; alt=&quot;Quality Gate Status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/repo-size/opentibiabr/canary&quot; alt=&quot;GitHub repo size&quot;&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/opentibiabr/canary&quot; alt=&quot;GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenTibiaBR - Canary is a free and open-source MMORPG server emulator written in C++. It is a fork of the &lt;a href=&quot;https://github.com/opentibiabr/otservbr-global&quot;&gt;OTServBR-Global&lt;/a&gt; project. To connect to the server and to take a stable experience, you can use &lt;a href=&quot;https://github.com/mehah/otclient&quot;&gt;mehah&#39;s otclient&lt;/a&gt; or &lt;a href=&quot;https://github.com/dudantas/tibia-client/releases/latest&quot;&gt;tibia client&lt;/a&gt; and if you want to edit something, check our &lt;a href=&quot;https://docs.opentibiabr.com/opentibiabr/downloads/tools&quot;&gt;customized tools&lt;/a&gt;. If you want to edit the map, use our own &lt;a href=&quot;https://github.com/opentibiabr/remeres-map-editor/&quot;&gt;remere&#39;s map editor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.opentibiabr.com/opentibiabr/projects/canary&quot;&gt;Gitbook&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/wiki&quot;&gt;Wiki&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you need help, please visit our &lt;a href=&quot;https://discord.gg/gvTj5sh9Mp&quot;&gt;discord&lt;/a&gt;. Our issue tracker is not a support forum, and using it as one will result in your issue being closed.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Here are some ways you can contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/issues/new/choose&quot;&gt;Issue Tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/pulls&quot;&gt;Pull Request&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You are subject to our code of conduct, read at &lt;a href=&quot;https://github.com/opentibiabr/canary/raw/main/CODE_OF_CONDUCT.md&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributors (&lt;a href=&quot;https://github.com/opentibiabr/canary/graphs/contributors&quot;&gt;Canary&lt;/a&gt; | &lt;a href=&quot;https://github.com/opentibiabr/otservbr-global/graphs/contributors&quot;&gt;OTServBR-Global&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;See our &lt;a href=&quot;https://docs.opentibiabr.com/home/donate&quot;&gt;donate page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Project supported by JetBrains&lt;/h2&gt; 
&lt;p&gt;We extend our heartfelt gratitude to Jetbrains for generously granting us licenses to collaborate on this and various other open-source initiatives.&lt;/p&gt; 
&lt;a href=&quot;https://jb.gg/OpenSourceSupport/?from=https://github.com/opentibiabr/canary/&quot;&gt; &lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot; width=&quot;150&quot;&gt; &lt;/a&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://forums.otserv.com.br&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/otbr/otserv-brasil/main/otbr.png&quot; alt=&quot;Supported by OTServ Brasil&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ibhagwan/fzf-lua</title>
      <link>https://github.com/ibhagwan/fzf-lua</link>
      <description>&lt;p&gt;Improved fzf.vim written in lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;fzf &lt;span&gt;❤️&lt;/span&gt; lua&lt;/h1&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim-0.7-57A143?style=flat-square&amp;amp;logo=neovim&quot; alt=&quot;Neovim version&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#installation&quot;&gt;Installation&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#commands&quot;&gt;Commands&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&quot;&gt;Customization&lt;/a&gt; • &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/ibhagwan/fzf-lua/demo.gif&quot; alt=&quot;Demo&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;“because you can and you love fzf” - &lt;a href=&quot;https://github.com/junegunn&quot;&gt;@junegunn&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&quot;fzf changed my command life, it can change yours too, if you allow it&quot; - &lt;a href=&quot;https://github.com/ibhagwan&quot;&gt;@ibhagwan&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To quickly test this plugin without changing your configuration run (will run in its own sandbox with the default keybinds below):&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] it&#39;s good practice to first &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/scripts/mini.sh&quot;&gt;read the script&lt;/a&gt; before running &lt;code&gt;sh -c&lt;/code&gt; directly from the web&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sh -c &quot;$(curl -s https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/scripts/mini.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-\&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;grep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;live_grep&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;builtin commands&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F1&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;neovim help&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/ibhagwan/fzf-lua&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/ibhagwan/fzf-lua?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;ibhagwan/fzf-lua&quot;,
  -- optional for icon support
  dependencies = { &quot;nvim-tree/nvim-web-devicons&quot; },
  -- or if using mini.icons/mini.nvim
  -- dependencies = { &quot;echasnovski/mini.icons&quot; },
  opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Show dependencies&lt;/summary&gt; 
 &lt;h3&gt;Dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/releases&quot;&gt;&lt;code&gt;neovim&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.7.0&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.25&lt;/code&gt; or &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; binary installed&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; or &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Optional dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; - better &lt;code&gt;find&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; - better &lt;code&gt;grep&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt; - syntax highlighted previews when using fzf&#39;s native previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;delta&lt;/a&gt; - syntax highlighted git pager for git status previews&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; - for Debug Adapter Protocol (DAP) support&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; - for viewing treesitter context within the previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; or &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; - for rendering markdown files in the previewer&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Below are a few optional dependencies for viewing media files (which you need to configure in &lt;code&gt;previewer.builtin.extensions&lt;/code&gt;):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hpjansson/chafa&quot;&gt;chafa&lt;/a&gt; - terminal image previewer (recommended, supports most file formats)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/atanunq/viu&quot;&gt;viu&lt;/a&gt; - terminal image previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;ueberzugpp&lt;/a&gt; - terminal image previewer using X11/Wayland child windows, sixels, kitty and iterm2&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Windows Notes&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; is required for &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;git&lt;/a&gt; for Windows is required for &lt;code&gt;git&lt;/code&gt; (though installing &lt;code&gt;git-bash&lt;/code&gt;|&lt;code&gt;sh&lt;/code&gt; &lt;strong&gt;is not required&lt;/strong&gt;).&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Installation of dependencies (fzf, rg, fd, etc) is possible via &lt;a href=&quot;https://github.com/ScoopInstaller/Install&quot;&gt;scoop&lt;/a&gt;, &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; or &lt;a href=&quot;https://github.com/microsoft/winget-cli&quot;&gt;winget-cli&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Although almost everything works on Windows exactly as the *NIX/OSX check out the &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/README-Win.md&quot;&gt;Windows README&lt;/a&gt; for known issues and limitations.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Fzf-lua aims to be as plug and play as possible with sane defaults, you can run any fzf-lua command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files()
-- or using the `FzfLua` vim command:
:FzfLua files
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or with arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files({ cwd = &#39;~/.config&#39; })
-- or using the `FzfLua` vim command:
:FzfLua files cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Resume&lt;/h3&gt; 
&lt;p&gt;Resuming work from where you left off is as easy as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).resume()
-- or
:FzfLua resume
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, resuming work on a specific picker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files({ resume = true })
-- or
:FzfLua files resume=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] By default pressing esc or ctrl-c terminates the fzf process, as such resume is not perfect and is limited to resuming the picker/query and sometimes additional parameters such as regex in grep, etc, for a more complete resume use the &quot;hide&quot; profile, this will modify the esc bind to hide fzf-lua and keep the fzf process running in the background allowing &lt;code&gt;:FzfLua resume&lt;/code&gt; to restore the picker state entirely, including cursor position and selection. To configure hiding by default:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({
  &quot;hide&quot;,
  -- your other settings here 
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;LIST OF AVAILABLE COMMANDS BELOW&lt;/strong&gt; 👇&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Buffers and Files&lt;/summary&gt; 
 &lt;h3&gt;Buffers and Files&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; on a path&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oldfiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;opened files history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;blines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;treesitter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer treesitter symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tabs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open tabs&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;args&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;argument list&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Search&lt;/summary&gt; 
 &lt;h3&gt;Search&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search for a pattern with &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_last&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;run search again with the last pattern&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_project&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search all project lines (fzf.vim&#39;s &lt;code&gt;:Rg&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current buffer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current project&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep continue last search&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_glob&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live_grep with &lt;code&gt;rg --glob&lt;/code&gt; support&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;performant version of &lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tags&lt;/summary&gt; 
 &lt;h3&gt;Tags&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;btags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search buffer tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Git&lt;/summary&gt; 
 &lt;h3&gt;Git&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git ls-files&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_status&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_commits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (project)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_bcommits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_blame&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git blame (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_branches&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git branches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_stash&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git stash&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;LSP / Diagnostics&lt;/summary&gt; 
 &lt;h3&gt;LSP/Diagnostics&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_references&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;References&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_definitions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_declarations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Declarations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_typedefs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Type Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_implementations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Implementations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_live_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols (live query)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Incoming Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Outgoing Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_code_actions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Code Actions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_finder&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;All LSP locations, combined view&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Misc&lt;/summary&gt; 
 &lt;h3&gt;Misc&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;resume last command/query&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;builtin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;profiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua configuration profiles&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;helptags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;help tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;manpages&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;man pages&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;awesome_colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Awesome Neovim color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;highlights&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;highlight groups&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;command_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;command history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;search_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;marks&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:marks&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;jumps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:jumps&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;changes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:changes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;registers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:registers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tagstack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;autocmds&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:autocmd&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;nvim_options&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim options&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;keymaps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;key mappings&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;filetypes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;filetypes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;menus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;menus&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;spell_suggest&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;spelling suggestions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;packadd&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:packadd 
     &lt;package&gt;&lt;/package&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neovim API&lt;/summary&gt; 
 &lt;h3&gt;Neovim API&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;code&gt;:help vim.ui.select&lt;/code&gt; for more info&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;register_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;register fzf-lua as the UI interface for &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;deregister_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;de-register fzf-lua with &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;nvim-dap&lt;/summary&gt; 
 &lt;h3&gt;nvim-dap&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Requires &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run &lt;code&gt;nvim-dap&lt;/code&gt; builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_configurations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run debug configurations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_breakpoints&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,delete breakpoints&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_variables&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session variables&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_frames&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session jump to frame&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tmux&lt;/summary&gt; 
 &lt;h3&gt;tmux&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tmux_buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list tmux paste buffers&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Zoxide&lt;/summary&gt; 
 &lt;h3&gt;zoxide&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;zoxide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list recent directories&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Completion Functions&lt;/summary&gt; 
 &lt;h3&gt;Completion Functions&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_path&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete path under cursor (incl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_file&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete file under cursor (excl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_line&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (all open buffers)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_bline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (current buffer only)&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; to see detailed usage notes and a comprehensive list of yet more(!) available options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup{
  -- MISC GLOBAL SETUP OPTIONS, SEE BELOW
  -- fzf_bin = ...,
  winopts = { ...  },     -- UI Options
  keymap = { ...  },      -- Neovim keymaps / fzf binds
  actions = { ...  },     -- Fzf &quot;accept&quot; binds
  fzf_opts = { ...  },    -- Fzf CLI flags
  fzf_colors = { ...  },  -- Fzf `--color` specification
  hls = { ...  },         -- Highlights
  previewers = { ...  },  -- Previewers options
  -- SPECIFIC COMMAND/PICKER OPTIONS, SEE BELOW
  -- files = { ... },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;DEFAULT OPTIONS OF THE DIFFERENT CONFIG SECTIONS BELOW&lt;/strong&gt; 👇&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;globals&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- Use skim (or a speccific fzf binary/version) instead of fzf?
  -- fzf_bin = &#39;sk&#39;,
  -- Padding can help kitty term users with double-width icon rendering
  file_icon_padding = &#39;&#39;,
  -- Uncomment if your terminal/font does not support unicode character
  -- &#39;EN SPACE&#39; (U+2002), the below sets it to &#39;NBSP&#39; (U+00A0) instead
  -- nbsp = &#39;\xc2\xa0&#39;,
  -- Function override for opening the help window (default bound to `&amp;lt;F1&amp;gt;`)
  -- Override this function if you want to customize window config of the
  -- help window (location, width, border, etc.)
  help_open_win = vim.api.nvim_open_win,
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;winopts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;winopts = {
    -- split = &quot;belowright new&quot;,-- open in a split instead?
            -- &quot;belowright new&quot;  : split below
            -- &quot;aboveleft new&quot;   : split above
            -- &quot;belowright vnew&quot; : split right
            -- &quot;aboveleft vnew   : split left
    -- Only valid when using a float window
    -- (i.e. when &#39;split&#39; is not defined, default)
    height           = 0.85,            -- window height
    width            = 0.80,            -- window width
    row              = 0.35,            -- window row position (0=top, 1=bottom)
    col              = 0.50,            -- window col position (0=left, 1=right)
    -- border argument passthrough to nvim_open_win()
    border           = &quot;rounded&quot;,
    -- Backdrop opacity, 0 is fully opaque, 100 is fully transparent (i.e. disabled)
    backdrop         = 60,
    -- title         = &quot;Title&quot;,
    -- title_pos     = &quot;center&quot;,        -- &#39;left&#39;, &#39;center&#39; or &#39;right&#39;
    -- title_flags   = false,           -- uncomment to disable title flags
    fullscreen       = false,           -- start fullscreen?
    -- enable treesitter highlighting for the main fzf window will only have
    -- effect where grep like results are present, i.e. &quot;file:line:col:text&quot;
    -- due to highlight color collisions will also override `fzf_colors`
    -- set `fzf_colors=false` or `fzf_colors.hl=...` to override
    treesitter       = {
      enabled    = true,
      fzf_colors = { [&quot;hl&quot;] = &quot;-1:reverse&quot;, [&quot;hl+&quot;] = &quot;-1:reverse&quot; }
    },
    preview = {
      -- default     = &#39;bat&#39;,           -- override the default previewer?
                                        -- default uses the &#39;builtin&#39; previewer
      border         = &quot;rounded&quot;,       -- preview border: accepts both `nvim_open_win`
                                        -- and fzf values (e.g. &quot;border-top&quot;, &quot;none&quot;)
                                        -- native fzf previewers (bat/cat/git/etc)
                                        -- can also be set to `fun(winopts, metadata)`
      wrap           = false,           -- preview line wrap (fzf&#39;s &#39;wrap|nowrap&#39;)
      hidden         = false,           -- start preview hidden
      vertical       = &quot;down:45%&quot;,      -- up|down:size
      horizontal     = &quot;right:60%&quot;,     -- right|left:size
      layout         = &quot;flex&quot;,          -- horizontal|vertical|flex
      flip_columns   = 100,             -- #cols to switch to horizontal on flex
      -- Only used with the builtin previewer:
      title          = true,            -- preview border title (file/buf)?
      title_pos      = &quot;center&quot;,        -- left|center|right, title alignment
      scrollbar      = &quot;float&quot;,         -- `false` or string:&#39;float|border&#39;
                                        -- float:  in-window floating border
                                        -- border: in-border &quot;block&quot; marker
      scrolloff      = -1,              -- float scrollbar offset from right
                                        -- applies only when scrollbar = &#39;float&#39;
      delay          = 20,              -- delay(ms) displaying the preview
                                        -- prevents lag on fast scrolling
      winopts = {                       -- builtin previewer window options
        number            = true,
        relativenumber    = false,
        cursorline        = true,
        cursorlineopt     = &quot;both&quot;,
        cursorcolumn      = false,
        signcolumn        = &quot;no&quot;,
        list              = false,
        foldenable        = false,
        foldmethod        = &quot;manual&quot;,
      },
    },
    on_create = function()
      -- called once upon creation of the fzf main window
      -- can be used to add custom fzf-lua mappings, e.g:
      --   vim.keymap.set(&quot;t&quot;, &quot;&amp;lt;C-j&amp;gt;&quot;, &quot;&amp;lt;Down&amp;gt;&quot;, { silent = true, buffer = true })
    end,
    -- called once _after_ the fzf interface is closed
    -- on_close = function() ... end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;keymap&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;keymap = {
    -- Below are the default binds, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    builtin = {
      -- neovim `:tmap` mappings for the fzf win
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;&amp;lt;M-Esc&amp;gt;&quot;]     = &quot;hide&quot;,     -- hide fzf-lua, `:FzfLua resume` to continue
      [&quot;&amp;lt;F1&amp;gt;&quot;]        = &quot;toggle-help&quot;,
      [&quot;&amp;lt;F2&amp;gt;&quot;]        = &quot;toggle-fullscreen&quot;,
      -- Only valid with the &#39;builtin&#39; previewer
      [&quot;&amp;lt;F3&amp;gt;&quot;]        = &quot;toggle-preview-wrap&quot;,
      [&quot;&amp;lt;F4&amp;gt;&quot;]        = &quot;toggle-preview&quot;,
      -- Rotate preview clockwise/counter-clockwise
      [&quot;&amp;lt;F5&amp;gt;&quot;]        = &quot;toggle-preview-ccw&quot;,
      [&quot;&amp;lt;F6&amp;gt;&quot;]        = &quot;toggle-preview-cw&quot;,
      -- `ts-ctx` binds require `nvim-treesitter-context`
      [&quot;&amp;lt;F7&amp;gt;&quot;]        = &quot;toggle-preview-ts-ctx&quot;,
      [&quot;&amp;lt;F8&amp;gt;&quot;]        = &quot;preview-ts-ctx-dec&quot;,
      [&quot;&amp;lt;F9&amp;gt;&quot;]        = &quot;preview-ts-ctx-inc&quot;,
      [&quot;&amp;lt;S-Left&amp;gt;&quot;]    = &quot;preview-reset&quot;,
      [&quot;&amp;lt;S-down&amp;gt;&quot;]    = &quot;preview-page-down&quot;,
      [&quot;&amp;lt;S-up&amp;gt;&quot;]      = &quot;preview-page-up&quot;,
      [&quot;&amp;lt;M-S-down&amp;gt;&quot;]  = &quot;preview-down&quot;,
      [&quot;&amp;lt;M-S-up&amp;gt;&quot;]    = &quot;preview-up&quot;,
    },
    fzf = {
      -- fzf &#39;--bind=&#39; options
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;ctrl-z&quot;]      = &quot;abort&quot;,
      [&quot;ctrl-u&quot;]      = &quot;unix-line-discard&quot;,
      [&quot;ctrl-f&quot;]      = &quot;half-page-down&quot;,
      [&quot;ctrl-b&quot;]      = &quot;half-page-up&quot;,
      [&quot;ctrl-a&quot;]      = &quot;beginning-of-line&quot;,
      [&quot;ctrl-e&quot;]      = &quot;end-of-line&quot;,
      [&quot;alt-a&quot;]       = &quot;toggle-all&quot;,
      [&quot;alt-g&quot;]       = &quot;first&quot;,
      [&quot;alt-G&quot;]       = &quot;last&quot;,
      -- Only valid with fzf previewers (bat/cat/git/etc)
      [&quot;f3&quot;]          = &quot;toggle-preview-wrap&quot;,
      [&quot;f4&quot;]          = &quot;toggle-preview&quot;,
      [&quot;shift-down&quot;]  = &quot;preview-page-down&quot;,
      [&quot;shift-up&quot;]    = &quot;preview-page-up&quot;,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;actions&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local actions = require(&quot;fzf-lua&quot;).actions
actions = {
    -- Below are the default actions, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    files = {
      -- true,        -- uncomment to inherit all the below in your custom config
      -- Pickers inheriting these actions:
      --   files, git_files, git_status, grep, lsp, oldfiles, quickfix, loclist,
      --   tags, btags, args, buffers, tabs, lines, blines
      -- `file_edit_or_qf` opens a single selection or sends multiple selection to quickfix
      -- replace `enter` with `file_edit` to open all files/bufs whether single or multiple
      -- replace `enter` with `file_switch_or_edit` to attempt a switch in current tab first
      [&quot;enter&quot;]       = actions.file_edit_or_qf,
      [&quot;ctrl-s&quot;]      = actions.file_split,
      [&quot;ctrl-v&quot;]      = actions.file_vsplit,
      [&quot;ctrl-t&quot;]      = actions.file_tabedit,
      [&quot;alt-q&quot;]       = actions.file_sel_to_qf,
      [&quot;alt-Q&quot;]       = actions.file_sel_to_ll,
      [&quot;alt-i&quot;]       = actions.toggle_ignore,
      [&quot;alt-h&quot;]       = actions.toggle_hidden,
      [&quot;alt-f&quot;]       = actions.toggle_follow,
    },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_opts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf_opts = {
    -- options are sent as `&amp;lt;left&amp;gt;=&amp;lt;right&amp;gt;`
    -- set to `false` to remove a flag
    -- set to `true` for a no-value flag
    -- for raw args use `fzf_args` instead
    [&quot;--ansi&quot;]           = true,
    [&quot;--info&quot;]           = &quot;inline-right&quot;, -- fzf &amp;lt; v0.42 = &quot;inline&quot;
    [&quot;--height&quot;]         = &quot;100%&quot;,
    [&quot;--layout&quot;]         = &quot;reverse&quot;,
    [&quot;--border&quot;]         = &quot;none&quot;,
    [&quot;--highlight-line&quot;] = true,           -- fzf &amp;gt;= v0.53
  }

-- Only used when fzf_bin = &quot;fzf-tmux&quot;, by default opens as a
-- popup 80% width, 80% height (note `-p` requires tmux &amp;gt; 3.2)
-- and removes the sides margin added by `fzf-tmux` (fzf#3162)
-- for more options run `fzf-tmux --help`
-- NOTE: since fzf v0.53 / sk v0.15 it is recommended to use
-- native tmux integration by adding the below to `fzf_opts`
-- fzf_opts = { [&quot;--tmux&quot;] = &quot;center,80%,60%&quot; }
fzf_tmux_opts = { [&quot;-p&quot;] = &quot;80%,80%&quot;, [&quot;--margin&quot;] = &quot;0,0&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_colors&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#fzf-colors&quot;&gt;Fzf Colors&lt;/a&gt; section for more info.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- 
  -- Set fzf&#39;s terminal colorscheme (optional)
  --
  -- Set to `true` to automatically generate an fzf&#39;s colorscheme from
  -- Neovim&#39;s current colorscheme:
  -- fzf_colors       = true,
  -- 
  -- Building a custom colorscheme, has the below specifications:
  -- If rhs is of type &quot;string&quot; rhs will be passed raw, e.g.:
  --   `[&quot;fg&quot;] = &quot;underline&quot;` will be translated to `--color fg:underline`
  -- If rhs is of type &quot;table&quot;, the following convention is used:
  --   [1] &quot;what&quot; field to extract from the hlgroup, i.e &quot;fg&quot;, &quot;bg&quot;, etc.
  --   [2] Neovim highlight group(s), can be either &quot;string&quot; or &quot;table&quot;
  --       when type is &quot;table&quot; the first existing highlight group is used
  --   [3+] any additional fields are passed raw to fzf&#39;s command line args
  -- Example of a &quot;fully loaded&quot; color option:
  --   `[&quot;fg&quot;] = { &quot;fg&quot;, { &quot;NonExistentHl&quot;, &quot;Comment&quot; }, &quot;underline&quot;, &quot;bold&quot; }`
  -- Assuming `Comment.fg=#010101` the resulting fzf command line will be:
  --   `--color fg:#010101:underline:bold`
  -- NOTE: to pass raw arguments `fzf_opts[&quot;--color&quot;]` or `fzf_args`
  -- NOTE: below is an example, not the defaults:
  fzf_colors = {
      true,   -- inherit fzf colors that aren&#39;t specified below from
              -- the auto-generated theme similar to `fzf_colors=true`
      [&quot;fg&quot;]          = { &quot;fg&quot;, &quot;CursorLine&quot; },
      [&quot;bg&quot;]          = { &quot;bg&quot;, &quot;Normal&quot; },
      [&quot;hl&quot;]          = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;fg+&quot;]         = { &quot;fg&quot;, &quot;Normal&quot;, &quot;underline&quot; },
      [&quot;bg+&quot;]         = { &quot;bg&quot;, { &quot;CursorLine&quot;, &quot;Normal&quot; } },
      [&quot;hl+&quot;]         = { &quot;fg&quot;, &quot;Statement&quot; },
      [&quot;info&quot;]        = { &quot;fg&quot;, &quot;PreProc&quot; },
      [&quot;prompt&quot;]      = { &quot;fg&quot;, &quot;Conditional&quot; },
      [&quot;pointer&quot;]     = { &quot;fg&quot;, &quot;Exception&quot; },
      [&quot;marker&quot;]      = { &quot;fg&quot;, &quot;Keyword&quot; },
      [&quot;spinner&quot;]     = { &quot;fg&quot;, &quot;Label&quot; },
      [&quot;header&quot;]      = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;gutter&quot;]      = &quot;-1&quot;,
  },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;hls&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#highlights&quot;&gt;highlights&lt;/a&gt; section below for all available highlight groups.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hls = {
    normal = &quot;Normal&quot;          -- highlight group for normal fg/bg
    preview_normal = &quot;Normal&quot;  -- highlight group for preview fg/bg
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;previewers&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;previewers = {
    cat = {
      cmd             = &quot;cat&quot;,
      args            = &quot;-n&quot;,
    },
    bat = {
      cmd             = &quot;bat&quot;,
      args            = &quot;--color=always --style=numbers,changes&quot;,
    },
    head = {
      cmd             = &quot;head&quot;,
      args            = nil,
    },
    git_diff = {
      -- if required, use `{file}` for argument positioning
      -- e.g. `cmd_modified = &quot;git diff --color HEAD {file} | cut -c -30&quot;`
      cmd_deleted     = &quot;git diff --color HEAD --&quot;,
      cmd_modified    = &quot;git diff --color HEAD&quot;,
      cmd_untracked   = &quot;git diff --color --no-index /dev/null&quot;,
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;git.status.preview_pager&#39;
    },
    man = {
      -- NOTE: remove the `-c` flag when using man-db
      -- replace with `man -P cat %s | col -bx` on OSX
      cmd             = &quot;man -c %s | col -bx&quot;,
    },
    builtin = {
      syntax          = true,         -- preview syntax highlight?
      syntax_limit_l  = 0,            -- syntax limit (lines), 0=nolimit
      syntax_limit_b  = 1024*1024,    -- syntax limit (bytes), 0=nolimit
      limit_b         = 1024*1024*10, -- preview limit (bytes), 0=nolimit
      -- previewer treesitter options:
      -- enable specific filetypes with: `{ enabled = { &quot;lua&quot; } }
      -- exclude specific filetypes with: `{ disabled = { &quot;lua&quot; } }
      -- disable `nvim-treesitter-context` with `context = false`
      -- disable fully with: `treesitter = false` or `{ enabled = false }`
      treesitter      = {
        enabled = true,
        disabled = {},
        -- nvim-treesitter-context config options
        context = { max_lines = 1, trim_scope = &quot;inner&quot; }
      },
      -- By default, the main window dimensions are calculated as if the
      -- preview is visible, when hidden the main window will extend to
      -- full size. Set the below to &quot;extend&quot; to prevent the main window
      -- from being modified when toggling the preview.
      toggle_behavior = &quot;default&quot;,
      -- Title transform function, by default only displays the tail
      -- title_fnamemodify = function(s) vim.fn.fnamemodify(s, &quot;:t&quot;) end,
      -- preview extensions using a custom shell command:
      -- for example, use `viu` for image previews
      -- will do nothing if `viu` isn&#39;t executable
      extensions      = {
        -- neovim terminal only supports `viu` block output
        [&quot;png&quot;]       = { &quot;viu&quot;, &quot;-b&quot; },
        -- by default the filename is added as last argument
        -- if required, use `{file}` for argument positioning
        [&quot;svg&quot;]       = { &quot;chafa&quot;, &quot;{file}&quot; },
        [&quot;jpg&quot;]       = { &quot;ueberzug&quot; },
      },
      -- if using `ueberzug` in the above extensions map
      -- set the default image scaler, possible scalers:
      --   false (none), &quot;crop&quot;, &quot;distort&quot;, &quot;fit_contain&quot;,
      --   &quot;contain&quot;, &quot;forced_cover&quot;, &quot;cover&quot;
      -- https://github.com/seebye/ueberzug
      ueberzug_scaler = &quot;cover&quot;,
      -- Custom filetype autocmds aren&#39;t triggered on
      -- the preview buffer, define them here instead
      -- ext_ft_override = { [&quot;ksql&quot;] = &quot;sql&quot;, ... },
      -- render_markdown.nvim integration, enabled by default for markdown
      render_markdown = { enabled = true, filetypes = { [&quot;markdown&quot;] = true } },
    },
    -- Code Action previewers, default is &quot;codeaction&quot; (set via `lsp.code_actions.previewer`)
    -- &quot;codeaction_native&quot; uses fzf&#39;s native previewer, recommended when combined with git-delta
    codeaction = {
      -- options for vim.diff(): https://neovim.io/doc/user/lua.html#vim.diff()
      diff_opts = { ctxlen = 3 },
    },
    codeaction_native = {
      diff_opts = { ctxlen = 3 },
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;lsp.code_actions.preview_pager&#39;
      -- recommended styling for delta
      --pager = [[delta --width=$COLUMNS --hunk-header-style=&quot;omit&quot; --file-style=&quot;omit&quot;]],
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;picker options&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- use `defaults` (table or function) if you wish to set &quot;global-picker&quot; defaults
  -- for example, using &quot;mini.icons&quot; globally and open the quickfix list at the top
  --   defaults = {
  --     file_icons   = &quot;mini&quot;,
  --     copen        = &quot;topleft copen&quot;,
  --   },
  files = {
    -- previewer      = &quot;bat&quot;,          -- uncomment to override previewer
                                        -- (name from &#39;previewers&#39; table)
                                        -- set to &#39;false&#39; to disable
    prompt            = &#39;Files❯ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- path_shorten   = 1,              -- &#39;true&#39; or number, shorten path?
    -- Uncomment for custom vscode-like formatter where the filename is first:
    -- e.g. &quot;fzf-lua/previewer/fzf.lua&quot; =&amp;gt; &quot;fzf.lua previewer/fzf-lua&quot;
    -- formatter      = &quot;path.filename_first&quot;,
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `fd`:`rg`:`find`
    -- default options are controlled by &#39;fd|rg|find|_opts&#39;
    -- cmd            = &quot;rg --files&quot;,
    find_opts         = [[-type f \! -path &#39;*/.git/*&#39;]],
    rg_opts           = [[--color=never --hidden --files -g &quot;!.git&quot;]],
    fd_opts           = [[--color=never --hidden --type f --type l --exclude .git]],
    dir_opts          = [[/s/b/a:-d]],
    -- by default, cwd appears in the header only if {opts} contain a cwd
    -- parameter to a different folder than the current working directory
    -- uncomment if you wish to force display of the cwd as part of the
    -- query prompt string (fzf.vim style), header line or both
    -- cwd_header = true,
    cwd_prompt             = true,
    cwd_prompt_shorten_len = 32,        -- shorten prompt beyond this length
    cwd_prompt_shorten_val = 1,         -- shortened path parts length
    toggle_ignore_flag = &quot;--no-ignore&quot;, -- flag toggled in `actions.toggle_ignore`
    toggle_hidden_flag = &quot;--hidden&quot;,    -- flag toggled in `actions.toggle_hidden`
    toggle_follow_flag = &quot;-L&quot;,          -- flag toggled in `actions.toggle_follow`
    hidden             = true,          -- enable hidden files by default
    follow             = false,         -- do not follow symlinks by default
    no_ignore          = false,         -- respect &quot;.gitignore&quot;  by default
    actions = {
      -- inherits from &#39;actions.files&#39;, here we can override
      -- or set bind to &#39;false&#39; to disable a default action
      -- uncomment to override `actions.file_edit_or_qf`
      --   [&quot;enter&quot;]     = actions.file_edit,
      -- custom actions are available too
      --   [&quot;ctrl-y&quot;]    = function(selected) print(selected[1]) end,
    }
  },
  git = {
    files = {
      prompt        = &#39;GitFiles❯ &#39;,
      cmd           = &#39;git ls-files --exclude-standard&#39;,
      multiprocess  = true,           -- run command in a separate process
      git_icons     = true,           -- show git icons?
      file_icons    = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
      color_icons   = true,           -- colorize file|git icons
      -- force display the cwd header line regardless of your current working
      -- directory can also be used to hide the header when not wanted
      -- cwd_header = true
    },
    status = {
      prompt        = &#39;GitStatus❯ &#39;,
      cmd           = &quot;git -c color.status=false --no-optional-locks status --porcelain=v1 -u&quot;,
      multiprocess  = true,           -- run command in a separate process
      file_icons    = true,
      color_icons   = true,
      previewer     = &quot;git_diff&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        -- actions inherit from &#39;actions.files&#39; and merge
        [&quot;right&quot;]  = { fn = actions.git_unstage, reload = true },
        [&quot;left&quot;]   = { fn = actions.git_stage, reload = true },
        [&quot;ctrl-x&quot;] = { fn = actions.git_reset, reload = true },
      },
      -- If you wish to use a single stage|unstage toggle instead
      -- using &#39;ctrl-s&#39; modify the &#39;actions&#39; table as shown below
      -- actions = {
      --   [&quot;right&quot;]   = false,
      --   [&quot;left&quot;]    = false,
      --   [&quot;ctrl-x&quot;]  = { fn = actions.git_reset, reload = true },
      --   [&quot;ctrl-s&quot;]  = { fn = actions.git_stage_unstage, reload = true },
      -- },
    },
    commits = {
      prompt        = &#39;Commits❯ &#39;,
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot;]],
      preview       = &quot;git show --color {1}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_checkout,
        -- remove `exec_silent` or set to `false` to exit after yank
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    bcommits = {
      prompt        = &#39;BCommits❯ &#39;,
      -- default preview shows a git diff vs the previous commit
      -- if you prefer to see the entire commit you can use:
      --   git show --color {1} --rotate-to={file}
      --   {1}    : commit SHA (fzf field index expression)
      --   {file} : filepath placement within the commands
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_buf_edit,
        [&quot;ctrl-s&quot;]  = actions.git_buf_split,
        [&quot;ctrl-v&quot;]  = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;]  = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    blame = {
      prompt        = &quot;Blame&amp;gt; &quot;,
      cmd           = [[git blame --color-lines {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]  = actions.git_goto_line,
        [&quot;ctrl-s&quot;] = actions.git_buf_split,
        [&quot;ctrl-v&quot;] = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;] = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;] = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    branches = {
      prompt   = &#39;Branches❯ &#39;,
      cmd      = &quot;git branch --all --color&quot;,
      preview  = &quot;git log --graph --pretty=oneline --abbrev-commit --color {1}&quot;,
      remotes  = &quot;local&quot;, -- &quot;detach|local&quot;, switch behavior for remotes
      actions  = {
        [&quot;enter&quot;]   = actions.git_switch,
        [&quot;ctrl-x&quot;]  = { fn = actions.git_branch_del, reload = true },
        [&quot;ctrl-a&quot;]  = { fn = actions.git_branch_add, field_index = &quot;{q}&quot;, reload = true },
      },
      -- If you wish to add branch and switch immediately
      -- cmd_add  = { &quot;git&quot;, &quot;checkout&quot;, &quot;-b&quot; },
      cmd_add  = { &quot;git&quot;, &quot;branch&quot; },
      -- If you wish to delete unmerged branches add &quot;--force&quot;
      -- cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot;, &quot;--force&quot; },
      cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot; },
    },
    tags = {
      prompt   = &quot;Tags&amp;gt; &quot;,
      cmd      = [[git for-each-ref --color --sort=&quot;-taggerdate&quot; --format ]]
          .. [[&quot;%(color:yellow)%(refname:short)%(color:reset) ]]
          .. [[%(color:green)(%(taggerdate:relative))%(color:reset)]]
          .. [[ %(subject) %(color:blue)%(taggername)%(color:reset)&quot; refs/tags]],
      preview  = [[git log --graph --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {1}]],
      actions  = { [&quot;enter&quot;] = actions.git_checkout },
    },
    stash = {
      prompt          = &#39;Stash&amp;gt; &#39;,
      cmd             = &quot;git --no-pager stash list&quot;,
      preview         = &quot;git --no-pager stash show --patch --color {1}&quot;,
      actions = {
        [&quot;enter&quot;]     = actions.git_stash_apply,
        [&quot;ctrl-x&quot;]    = { fn = actions.git_stash_drop, reload = true },
      },
    },
    icons = {
      [&quot;M&quot;]           = { icon = &quot;M&quot;, color = &quot;yellow&quot; },
      [&quot;D&quot;]           = { icon = &quot;D&quot;, color = &quot;red&quot; },
      [&quot;A&quot;]           = { icon = &quot;A&quot;, color = &quot;green&quot; },
      [&quot;R&quot;]           = { icon = &quot;R&quot;, color = &quot;yellow&quot; },
      [&quot;C&quot;]           = { icon = &quot;C&quot;, color = &quot;yellow&quot; },
      [&quot;T&quot;]           = { icon = &quot;T&quot;, color = &quot;magenta&quot; },
      [&quot;?&quot;]           = { icon = &quot;?&quot;, color = &quot;magenta&quot; },
      -- override git icons?
      -- [&quot;M&quot;]        = { icon = &quot;★&quot;, color = &quot;red&quot; },
      -- [&quot;D&quot;]        = { icon = &quot;✗&quot;, color = &quot;red&quot; },
      -- [&quot;A&quot;]        = { icon = &quot;+&quot;, color = &quot;green&quot; },
    },
  },
  grep = {
    prompt            = &#39;Rg❯ &#39;,
    input_prompt      = &#39;Grep For❯ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `rg` over `grep`
    -- default options are controlled by &#39;rg|grep_opts&#39;
    -- cmd            = &quot;rg --vimgrep&quot;,
    grep_opts         = &quot;--binary-files=without-match --line-number --recursive --color=auto --perl-regexp -e&quot;,
    rg_opts           = &quot;--column --line-number --no-heading --color=always --smart-case --max-columns=4096 -e&quot;,
    hidden             = false,       -- disable hidden files by default
    follow             = false,       -- do not follow symlinks by default
    no_ignore          = false,       -- respect &quot;.gitignore&quot;  by default
    -- Uncomment to use the rg config file `$RIPGREP_CONFIG_PATH`
    -- RIPGREP_CONFIG_PATH = vim.env.RIPGREP_CONFIG_PATH
    --
    -- Set to &#39;true&#39; to always parse globs in both &#39;grep&#39; and &#39;live_grep&#39;
    -- search strings will be split using the &#39;glob_separator&#39; and translated
    -- to &#39;--iglob=&#39; arguments, requires &#39;rg&#39;
    -- can still be used when &#39;false&#39; by calling &#39;live_grep_glob&#39; directly
    rg_glob           = true,         -- default to glob parsing with `rg`
    glob_flag         = &quot;--iglob&quot;,    -- for case sensitive globs use &#39;--glob&#39;
    glob_separator    = &quot;%s%-%-&quot;,     -- query separator pattern (lua): &#39; --&#39;
    -- advanced usage: for custom argument parsing define
    -- &#39;rg_glob_fn&#39; to return a pair:
    --   first returned argument is the new search query
    --   second returned argument are additional rg flags
    -- rg_glob_fn = function(query, opts)
    --   ...
    --   return new_query, flags
    -- end,
    --
    -- Enable with narrow term width, split results to multiple lines
    -- NOTE: multiline requires fzf &amp;gt;= v0.53 and is ignored otherwise
    -- multiline      = 1,      -- Display as: PATH:LINE:COL\nTEXT
    -- multiline      = 2,      -- Display as: PATH:LINE:COL\nTEXT\n
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]      = { actions.grep_lgrep }
      -- uncomment to enable &#39;.gitignore&#39; toggle for grep
      -- [&quot;ctrl-r&quot;]   = { actions.toggle_ignore }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  args = {
    prompt            = &#39;Args❯ &#39;,
    files_only        = true,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions           = { [&quot;ctrl-x&quot;] = { fn = actions.arg_del, reload = true } },
  },
  oldfiles = {
    prompt            = &#39;History❯ &#39;,
    cwd_only          = false,
    stat_file         = true,         -- verify files exist on disk
    -- can also be a lua function, for example:
    -- stat_file = require(&quot;fzf-lua&quot;).utils.file_is_readable,
    -- stat_file = function() return true end,
    include_current_session = false,  -- include bufs from current session
  },
  buffers = {
    prompt            = &#39;Buffers❯ &#39;,
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    sort_lastused     = true,         -- sort buffers() by last used
    show_unloaded     = true,         -- show unloaded buffers
    cwd_only          = false,        -- buffers for the cwd only
    cwd               = nil,          -- buffers list for a given dir
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- by supplying a table of functions we&#39;re telling
      -- fzf-lua to not close the fzf window, this way we
      -- can resume the buffers picker on the same window
      -- eliminating an otherwise unaesthetic win &quot;flash&quot;
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    }
  },
  tabs = {
    prompt            = &#39;Tabs❯ &#39;,
    tab_title         = &quot;Tab&quot;,
    tab_marker        = &quot;&amp;lt;&amp;lt;&quot;,
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      [&quot;enter&quot;]       = actions.buf_switch,
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    },
    fzf_opts = {
      -- hide tabnr
      [&quot;--delimiter&quot;] = &quot;[\\):]&quot;,
      [&quot;--with-nth&quot;]  = &#39;2..&#39;,
    },
  },
  -- `blines` has the same defaults as `lines` aside from prompt and `show_bufname`
  lines = {
    prompt            = &#39;Lines❯ &#39;,
    file_icons        = true,
    show_bufname      = true,         -- display buffer name
    show_unloaded     = true,         -- show unloaded buffers
    show_unlisted     = false,        -- exclude &#39;help&#39; buffers
    no_term_buffers   = true,         -- exclude &#39;term&#39; buffers
    sort_lastused     = true,         -- sort by most recent
    winopts  = { treesitter = true }, -- enable TS highlights
    fzf_opts = {
      -- do not include bufnr in fuzzy matching
      -- tiebreak by line no.
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;1&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
      [&quot;--with-nth&quot;]  = &quot;2..&quot;,
      [&quot;--nth&quot;]       = &quot;4..&quot;,
    },
  },
  tags = {
    prompt                = &#39;Tags❯ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    multiprocess          = true,
    file_icons            = true,
    color_icons           = true,
    -- &#39;tags_live_grep&#39; options, `rg` prioritizes over `grep`
    rg_opts               = &quot;--no-heading --color=always --smart-case&quot;,
    grep_opts             = &quot;--color=auto --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]          = { actions.grep_lgrep }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  btags = {
    prompt                = &#39;BTags❯ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    ctags_autogen         = true,     -- dynamically generate ctags each call
    multiprocess          = true,
    file_icons            = false,
    rg_opts               = &quot;--color=never --no-heading&quot;,
    grep_opts             = &quot;--color=never --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    -- actions inherit from &#39;actions.files&#39;
  },
  colorschemes = {
    prompt            = &#39;Colorschemes❯ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    actions           = { [&quot;enter&quot;] = actions.colorscheme },
    winopts           = { height = 0.55, width = 0.30, },
    -- uncomment to ignore colorschemes names (lua patterns)
    -- ignore_patterns   = { &quot;^delek$&quot;, &quot;^blue$&quot; },
  },
  awesome_colorschemes = {
    prompt            = &#39;Colorschemes❯ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    max_threads       = 5,          -- max download/update threads
    winopts           = { row = 0, col = 0.99, width = 0.50 },
    fzf_opts          = {
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[:]&quot;,
      [&quot;--with-nth&quot;]  = &quot;3..&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
    },
    actions           = {
      [&quot;enter&quot;]   = actions.colorscheme,
      [&quot;ctrl-g&quot;]  = { fn = actions.toggle_bg, exec_silent = true },
      [&quot;ctrl-r&quot;]  = { fn = actions.cs_update, reload = true },
      [&quot;ctrl-x&quot;]  = { fn = actions.cs_delete, reload = true },
    },
  },
  keymaps = {
    prompt            = &quot;Keymaps&amp;gt; &quot;,
    winopts           = { preview = { layout = &quot;vertical&quot; } },
    fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;index&quot;, },
    -- by default, we ignore &amp;lt;Plug&amp;gt; and &amp;lt;SNR&amp;gt; mappings
    -- set `ignore_patterns = false` to disable filtering
    ignore_patterns   = { &quot;^&amp;lt;SNR&amp;gt;&quot;, &quot;^&amp;lt;Plug&amp;gt;&quot; },
    show_desc         = true,
    show_details      = true,
    actions           = {
      [&quot;enter&quot;]       = actions.keymap_apply,
      [&quot;ctrl-s&quot;]      = actions.keymap_split,
      [&quot;ctrl-v&quot;]      = actions.keymap_vsplit,
      [&quot;ctrl-t&quot;]      = actions.keymap_tabedit,
    },
  },
  nvim_options = {
    prompt            = &quot;Nvim Options&amp;gt; &quot;,
    separator         = &quot;│&quot;,  -- separator between option name and value
    color_values      = true, -- colorize boolean values
    actions           = {
      [&quot;enter&quot;]     = { fn = actions.nvim_opt_edit_local, reload = true },
      [&quot;alt-enter&quot;] = { fn = actions.nvim_opt_edit_global, reload = true },
    },
  },
  quickfix = {
    file_icons        = true,
    only_valid        = false, -- select among only the valid quickfix entries
  },
  quickfix_stack = {
    prompt = &quot;Quickfix Stack&amp;gt; &quot;,
    marker = &quot;&amp;gt;&quot;,                   -- current list marker
  },
  lsp = {
    prompt_postfix    = &#39;❯ &#39;,       -- will be appended to the LSP label
                                    -- to override use &#39;prompt&#39; instead
    cwd_only          = false,      -- LSP/diagnostics for cwd only?
    async_or_timeout  = 5000,       -- timeout(ms) or &#39;true&#39; for async calls
    file_icons        = true,
    git_icons         = false,
    jump1             = true,       -- skip the UI when result is a single entry
    jump1_action      = FzfLua.actions.file_edit
    -- The equivalent of using `includeDeclaration` in lsp buf calls, e.g:
    -- :lua vim.lsp.buf.references({includeDeclaration = false})
    includeDeclaration = true,      -- include current declaration in LSP context
    -- settings for &#39;lsp_{document|workspace|lsp_live_workspace}_symbols&#39;
    symbols = {
        -- lsp_query      = &quot;foo&quot;       -- query passed to the LSP directly
        -- query          = &quot;bar&quot;       -- query passed to fzf prompt for fuzzy matching
        async_or_timeout  = true,       -- symbols are async by default
        symbol_style      = 1,          -- style for document/workspace symbols
                                        -- false: disable,    1: icon+kind
                                        --     2: icon only,  3: kind only
                                        -- NOTE: icons are extracted from
                                        -- vim.lsp.protocol.CompletionItemKind
        -- icons for symbol kind
        -- see https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind
        -- see https://github.com/neovim/neovim/blob/829d92eca3d72a701adc6e6aa17ccd9fe2082479/runtime/lua/vim/lsp/protocol.lua#L117
        symbol_icons     = {
          File          = &quot;󰈙&quot;,
          Module        = &quot;&quot;,
          Namespace     = &quot;󰦮&quot;,
          Package       = &quot;&quot;,
          Class         = &quot;󰆧&quot;,
          Method        = &quot;󰊕&quot;,
          Property      = &quot;&quot;,
          Field         = &quot;&quot;,
          Constructor   = &quot;&quot;,
          Enum          = &quot;&quot;,
          Interface     = &quot;&quot;,
          Function      = &quot;󰊕&quot;,
          Variable      = &quot;󰀫&quot;,
          Constant      = &quot;󰏿&quot;,
          String        = &quot;&quot;,
          Number        = &quot;󰎠&quot;,
          Boolean       = &quot;󰨙&quot;,
          Array         = &quot;󱡠&quot;,
          Object        = &quot;&quot;,
          Key           = &quot;󰌋&quot;,
          Null          = &quot;󰟢&quot;,
          EnumMember    = &quot;&quot;,
          Struct        = &quot;󰆼&quot;,
          Event         = &quot;&quot;,
          Operator      = &quot;󰆕&quot;,
          TypeParameter = &quot;󰗴&quot;,
        },
        -- colorize using Treesitter &#39;@&#39; highlight groups (&quot;@function&quot;, etc).
        -- or &#39;false&#39; to disable highlighting
        symbol_hl         = function(s) return &quot;@&quot; .. s:lower() end,
        -- additional symbol formatting, works with or without style
        symbol_fmt        = function(s, opts) return &quot;[&quot; .. s .. &quot;]&quot; end,
        -- prefix child symbols. set to any string or `false` to disable
        child_prefix      = true,
        fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    },
    code_actions = {
        prompt            = &#39;Code Actions&amp;gt; &#39;,
        async_or_timeout  = 5000,
        -- when git-delta is installed use &quot;codeaction_native&quot; for beautiful diffs
        -- try it out with `:FzfLua lsp_code_actions previewer=codeaction_native`
        -- scroll up to `previewers.codeaction{_native}` for more previewer options
        previewer        = &quot;codeaction&quot;,
    },
    finder = {
        prompt      = &quot;LSP Finder&amp;gt; &quot;,
        file_icons  = true,
        color_icons = true,
        async       = true,         -- async by default
        silent      = true,         -- suppress &quot;not found&quot;
        separator   = &quot;| &quot;,         -- separator after provider prefix, `false` to disable
        includeDeclaration = true,  -- include current declaration in LSP context
        -- by default display all LSP locations
        -- to customize, duplicate table and delete unwanted providers
        providers   = {
            { &quot;references&quot;,      prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.blue(&quot;ref &quot;) },
            { &quot;definitions&quot;,     prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.green(&quot;def &quot;) },
            { &quot;declarations&quot;,    prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.magenta(&quot;decl&quot;) },
            { &quot;typedefs&quot;,        prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.red(&quot;tdef&quot;) },
            { &quot;implementations&quot;, prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.green(&quot;impl&quot;) },
            { &quot;incoming_calls&quot;,  prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.cyan(&quot;in  &quot;) },
            { &quot;outgoing_calls&quot;,  prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.yellow(&quot;out &quot;) },
        },
    }
  },
  diagnostics ={
    prompt            = &#39;Diagnostics❯ &#39;,
    cwd_only          = false,
    file_icons        = true,
    git_icons         = false,
    diag_icons        = true,
    diag_source       = true,   -- display diag source (e.g. [pycodestyle])
    icon_padding      = &#39;&#39;,     -- add padding for wide diagnostics signs
    multiline         = true,   -- concatenate multi-line diags into a single line
    -- severity_only:   keep any matching exact severity
    -- severity_limit:  keep any equal or more severe (lower)
    -- severity_bound:  keep any equal or less severe (higher)
  },
  marks = {
    marks = &quot;&quot;, -- filter vim marks with a lua pattern
    -- for example if you want to only show user defined marks
    -- you would set this option as %a this would match characters from [A-Za-z]
    -- or if you want to show only numbers you would set the pattern to %d (0-9).
  },
  complete_path = {
    cmd          = nil, -- default: auto detect fd|rg|find
    complete     = { [&quot;enter&quot;] = actions.complete },
    word_pattern = nil, -- default: &quot;[^%s\&quot;&#39;]*&quot;
  },
  complete_file = {
    cmd          = nil, -- default: auto detect rg|fd|find
    file_icons   = true,
    color_icons  = true,
    word_pattern = nil,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions      = { [&quot;enter&quot;] = actions.complete },
    -- previewer hidden by default
    winopts      = { preview = { hidden = true } },
  },
  zoxide = {
    cmd          = &quot;zoxide query --list --score&quot;,
    git_root     = false, -- auto-detect git root
    formatter    = &quot;path.dirname_first&quot;,
    fzf_opts     = {
      [&quot;--no-multi&quot;]  = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;4&quot;,
      [&quot;--tiebreak&quot;]  = &quot;end,index&quot;, -- prefer dirs ending with search term
      [&quot;--nth&quot;]       = &quot;2..&quot;,       -- exclude score from fuzzy matching
    },
    actions      = { enter = actions.cd }
  },
  -- uncomment to use fzf native previewers
  -- (instead of using a neovim floating window)
  -- manpages = { previewer = &quot;man_native&quot; },
  -- helptags = { previewer = &quot;help_native&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To experiment with different options without modifying the global config, options can be sent as inline parameters to the function calls. Expand below to see examples of inline customization and Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; for yet more examples.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR EXAMPLES OF INLINE CUSTOMIZATION&lt;/summary&gt; 
 &lt;h4&gt;Inline Customization&lt;/h4&gt; 
 &lt;p&gt;Different &lt;code&gt;fzf&lt;/code&gt; layout:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files({ fzf_opts = {[&#39;--layout&#39;] = &#39;reverse-list&#39;} })
-- Or via the vimL command
:FzfLua files fzf_opts.--layout=reverse-list
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;files&lt;/code&gt; with a different command and working directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.files({ prompt=&quot;LS&amp;gt; &quot;, cmd = &quot;ls&quot;, cwd=&quot;~/.config&quot; })
-- Or via the vimL command
:FzfLua files prompt=&quot;LS&amp;gt;\ &quot; cmd=ls cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;live_grep&lt;/code&gt; with &lt;code&gt;git grep&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.live_grep({ cmd = &quot;git grep --line-number --column --color=always&quot; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;code&gt;spell_suggest&lt;/code&gt; with non-default window size relative to cursor:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.spell_suggest({ winopts = { height=0.33, width=0.33, relative=&quot;cursor&quot; } })
-- Or via the vimL command
:FzfLua spell_suggest winopts={height=0.33,width=0.33,relative=cursor}
:FzfLua spell_suggest winopts={height=0.33,width=0.33} winopts.relative=cursor
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Profiles&lt;/h3&gt; 
&lt;p&gt;Conveniently, fzf-lua comes with a set of preconfigured profiles if you do not want to tinker with customization.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;:FzfLua profiles&lt;/code&gt; to experiment with the different profiles, once you&#39;ve found what you like and wish to make the profile persist, send a &lt;code&gt;string&lt;/code&gt; argument at the first index of the table sent to the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;code&gt;setup&lt;/code&gt; can be called multiple times for profile &quot;live&quot; switching, see &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/tree/main/lua/fzf-lua/profiles&quot;&gt;profiles&lt;/a&gt; page for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-native&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also start with a profile as &quot;baseline&quot; and customize it, for example, telescope defaults with &lt;code&gt;bat&lt;/code&gt; previewer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({&quot;telescope&quot;,winopts={preview={default=&quot;bat&quot;}}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Combining of profiles is also available by sending table instead of string as the first argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({{&quot;telescope&quot;,&quot;fzf-native&quot;},winopts={fullscreen=true}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Coming from fzf.vim?&lt;/h4&gt; 
&lt;p&gt;Easy! just use the &lt;code&gt;fzf-vim&lt;/code&gt; profile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-vim&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Using the &lt;code&gt;fzf-vim&lt;/code&gt; profile will automatically create &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s user commands (i.e. &lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;), if you wish to use a different profile you can create the same user commands by running &lt;code&gt;:FzfLua setup_fzfvim_cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE THE AVAILABLE PROFILES&lt;/summary&gt; 
 &lt;h4&gt;Available Profiles&lt;/h4&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Profile&lt;/th&gt; 
    &lt;th&gt;Details&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, uses neovim &quot;builtin&quot; buffer previewer and devicons (if available)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using title for picker info (default on neovim &amp;gt;= 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using prompt for picker info (default on neovim &amp;lt; 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;utilizes fzf&#39;s native previewing ability in the terminal where possible using &lt;code&gt;bat&lt;/code&gt; for previews&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-tmux&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and opens in a tmux popup (requires tmux &amp;gt; 3.2)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-vim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest to &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s defaults (+icons), also sets up user commands (&lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;, etc)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;max-perf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and disables icons globally for max performance&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest match to telescope defaults in look and feel and keybinds&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;uses &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; as an fzf alternative, (requires the &lt;code&gt;sk&lt;/code&gt; binary)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless and minimalistic seamless look &amp;amp; feel&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless-full&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless with description in window title (instead of prompt)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;border-fused&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;single border around both fzf and the previewer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;ivy&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;UI at bottom, similar to telescope&#39;s ivy layout&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;hide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;send fzf process to background instead of termination&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h3&gt;Extensibility&lt;/h3&gt; 
&lt;p&gt;Fzf-lua can be easily extended and customised for your own needs: have a look at a full list of examples and plugins browsing the 💡&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki/Advanced&quot;&gt;Wiki&lt;/a&gt; 💡&lt;/p&gt; 
&lt;p&gt;Have ideas for new pickers, plugins or extensions? Add it to the wiki, it&#39;s open edit!&lt;/p&gt; 
&lt;h3&gt;Insert-mode completion&lt;/h3&gt; 
&lt;p&gt;Fzf-lua comes with a set of completion functions for paths/files and lines from open buffers as well as custom completion, for example, set path/completion using &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;n&quot;, &quot;v&quot;, &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function() require(&quot;fzf-lua&quot;).complete_path() end,
  { silent = true, desc = &quot;Fuzzy complete path&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with a custom command and preview:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] only &lt;code&gt;complete_file&lt;/code&gt; supports a previewer as &lt;code&gt;complete_path&lt;/code&gt; mixes both files and directories.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function()
    require(&quot;fzf-lua&quot;).complete_file({
      cmd = &quot;rg --files&quot;,
      winopts = { preview = { hidden = true } }
    })
  end, { silent = true, desc = &quot;Fuzzy complete file&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR CUSTOM COMPLETION DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Custom Completion&lt;/h4&gt; 
 &lt;p&gt;Every fzf-lua function can be easily converted to a completion function by sending &lt;code&gt;complete = true&lt;/code&gt; in the options:&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;By default fzf-lua will insert the entry at the cursor location as if you used &lt;code&gt;p&lt;/code&gt; to paste the selected entry.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {complete = true})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Custom completion is possible using a custom completion callback, the example below will replace the text from the current cursor column with the selected entry:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {
  -- @param selected: the selected entry or entries
  -- @param opts: fzf-lua caller/provider options
  -- @param line: originating buffer completed line
  -- @param col: originating cursor column location
  -- @return newline: will replace the current buffer line
  -- @return newcol?: optional, sets the new cursor column
  complete = function(selected, opts, line, col)
    local newline = line:sub(1, col) .. selected[1]
    -- set cursor to EOL, since `nvim_win_set_cursor`
    -- is 0-based we have to lower the col value by 1
    return newline, #newline - 1
  end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Highlights&lt;/h3&gt; 
&lt;p&gt;Highlight groups can be easily customized either via the lua API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.api.nvim_set_hl(0, &quot;FzfLuaBorder&quot;, { link = &quot;FloatBorder&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or via &lt;code&gt;setup&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  hls = { border = &quot;FloatBorder&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or temporarily in the call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.files({ hls={preview_title=&quot;IncSearch&quot;} })
-- vimL equivalent
:FzfLua files hls.preview_title=IncSearch
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE AVAILABLE HIGHLIGHT GROUPS&lt;/summary&gt; 
 &lt;h4&gt;Highlight groups&lt;/h4&gt; 
 &lt;p&gt;FzfLua conveniently creates the below highlights, each hlgroup can be temporarily overridden by its corresponding &lt;code&gt;winopts&lt;/code&gt; option:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Highlight Group&lt;/th&gt; 
    &lt;th&gt;Default&lt;/th&gt; 
    &lt;th&gt;Override Via&lt;/th&gt; 
    &lt;th&gt;Notes&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitleFlags&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title_flags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title flags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBackdrop&lt;/td&gt; 
    &lt;td&gt;*bg=Black&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.backdrop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Backdrop color&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursor&lt;/td&gt; 
    &lt;td&gt;Cursor&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursor&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursor&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursorline&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLineNr&lt;/td&gt; 
    &lt;td&gt;CursorLineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorlinenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;CursorLineNr&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaSearch&lt;/td&gt; 
    &lt;td&gt;IncSearch&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.search&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview search matches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderEmpty&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderFull&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatEmpty&lt;/td&gt; 
    &lt;td&gt;PmenuSbar&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatFull&lt;/td&gt; 
    &lt;td&gt;PmenuThumb&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderBind&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_bind&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header keybind&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderText&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_text&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathColNr&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_colnr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path col nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathLineNr&lt;/td&gt; 
    &lt;td&gt;*LightGreen&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path line nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufName&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_name&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer name (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufId&lt;/td&gt; 
    &lt;td&gt;TabLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_id&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer ID (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufNr&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_nr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer number (&lt;code&gt;buffers,tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufLineNr&lt;/td&gt; 
    &lt;td&gt;LineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line nr (&lt;code&gt;lines,blines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagCur&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_cur&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagAlt&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_alt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabTitle&lt;/td&gt; 
    &lt;td&gt;*LightSkyBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab title (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabMarker&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab marker (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirIcon&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_icon&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Paths directory icon&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirPart&lt;/td&gt; 
    &lt;td&gt;Comment&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters directory hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFilePart&lt;/td&gt; 
    &lt;td&gt;@none&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.file_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters file hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLivePrompt&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&quot;live&quot; queries prompt text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLiveSym&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_sym&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;LSP live symbols query match&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg|bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfCursorLine&lt;/td&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg+|bg+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMatch&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.match&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;hl+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;border&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfScrollbar&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.scrollbar&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;scrollbar&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSeparator&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.separator&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;separator&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfGutter&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.gutter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;gutter&lt;/code&gt; (hl &lt;code&gt;bg&lt;/code&gt; is used)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfHeader&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.header&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfInfo&lt;/td&gt; 
    &lt;td&gt;NonText&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.info&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.pointer&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMarker&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;marker&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSpinner&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.spinner&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;spinner&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPrompt&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;prompt&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfQuery&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.query&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;sup&gt;&lt;sub&gt;*Not a highlight group, RGB color from &lt;code&gt;nvim_get_color_map&lt;/code&gt;&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR FZF COLORS DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Fzf Colors&lt;/h4&gt; 
 &lt;p&gt;Fzf&#39;s terminal colors are controlled by fzf&#39;s &lt;code&gt;--color&lt;/code&gt; flag which can be configured during setup via &lt;code&gt;fzf_colors&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to have fzf-lua automatically generate an fzf colorscheme from your current Neovim colorscheme:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({ fzf_colors = true })
-- Or in the direct call options
:lua require(&quot;fzf-lua&quot;).files({ fzf_colors = true })
:FzfLua files fzf_colors=true
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Customizing the fzf colorscheme (see &lt;code&gt;man fzf&lt;/code&gt; for all color options):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  fzf_colors = {
    -- First existing highlight group will be used
    -- values in 3rd+ index will be passed raw
    -- i.e:  `--color fg+:#010101:bold:underline`
    [&quot;fg+&quot;] = { &quot;fg&quot; , { &quot;Comment&quot;, &quot;Normal&quot; }, &quot;bold&quot;, &quot;underline&quot; },
    -- It is also possible to pass raw values directly
    [&quot;gutter&quot;] = &quot;-1&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Conveniently, fzf-lua can also be configured using fzf.vim&#39;s &lt;code&gt;g:fzf_colors&lt;/code&gt;, i.e:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Similarly, first existing highlight group will be used
:lua vim.g.fzf_colors = { [&quot;gutter&quot;] = { &quot;bg&quot;, &quot;DoesNotExist&quot;, &quot;IncSearch&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;However, the above doesn&#39;t allow combining both neovim highlights and raw args, if you&#39;re only using fzf-lua we can hijack &lt;code&gt;g:fzf_colors&lt;/code&gt; to accept fzf-lua style values (i.e. table at 2nd index and 3rd+ raw args):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.g.fzf_colors = { [&quot;fg+&quot;] = { &quot;fg&quot;, { &quot;ErrorMsg&quot; }, &quot;bold&quot;, &quot;underline&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Big thank you to all those I borrowed code/ideas from, I read so many configs and plugin codes that I probably forgot where I found some samples from so if I missed your name feel free to contact me and I&#39;ll add it below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/&quot;&gt;@junegunn&lt;/a&gt; for creating the magical &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; and &lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vijaymarupudi/&quot;&gt;@vijaymarupudi&lt;/a&gt; for the wonderful &lt;a href=&quot;https://github.com/vijaymarupudi/nvim-fzf&quot;&gt;nvim-fzf&lt;/a&gt; plugin which started this endeavour&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tjdevries/&quot;&gt;@tjdevries&lt;/a&gt; for too many great things to list here and borrowing code from &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;nvim-telescope&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lukas-reineke&quot;&gt;@lukas-reineke&lt;/a&gt; for inspiration after browsing &lt;a href=&quot;https://github.com/lukas-reineke/dotfiles&quot;&gt;dotfiles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindrets&quot;&gt;@sindrets&lt;/a&gt; for borrowing utilities from &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kevinhwang91&quot;&gt;@kevinhwang91&lt;/a&gt; for inspiring the builtin previewer code while using &lt;a href=&quot;https://github.com/kevinhwang91/nvim-bqf&quot;&gt;nvim-bqf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>sindrets/diffview.nvim</title>
      <link>https://github.com/sindrets/diffview.nvim</link>
      <description>&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diffview.nvim&lt;/h1&gt; 
&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/131269942-e34100dd-cbb9-48fe-af31-6e518ce06e9e.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Vim&#39;s diff mode is pretty good, but there is no convenient way to quickly bring up all modified files in a diffsplit. This plugin aims to provide a simple, unified, single tabpage interface that lets you easily review all changed files for any git rev.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git ≥ 2.31.0 (for Git support)&lt;/li&gt; 
 &lt;li&gt;Mercurial ≥ 5.4.0 (for Mercurial support)&lt;/li&gt; 
 &lt;li&gt;Neovim ≥ 0.7.0 (with LuaJIT)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; (optional) For file icons&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager of choice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; Plug
Plug &#39;sindrets/diffview.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Packer
use &quot;sindrets/diffview.nvim&quot; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Merge Tool&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/188286293-13bbf0ab-3595-425d-ba4a-12f514c17eb6.png&quot; alt=&quot;merge tool showcase&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Opening a diff view during a merge or a rebase will list the conflicted files in their own section. When opening a conflicted file, it will open in a 3-way diff allowing you to resolve the merge conflicts with the context of the target branch&#39;s version, as well as the version from the branch which is being merged.&lt;/p&gt; 
&lt;p&gt;The 3-way diff is only the default layout for merge conflicts. There are multiple variations on this layout, a 4-way diff layout, and a single window layout available.&lt;/p&gt; 
&lt;p&gt;In addition to the normal &lt;code&gt;:h copy-diffs&lt;/code&gt; mappings, there are default mappings provided for jumping between conflict markers, obtaining a hunk directly from any of the diff buffers, and accepting any one, all, or none of the versions of a file given by a conflict region.&lt;/p&gt; 
&lt;p&gt;For more information on the merge tool, mappings, layouts and how to configure them, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-merge-tool&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-config-view.x.layout&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;File History&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/188331057-f9ec9a0d-8cda-4ff8-ac98-febcc7aa4010.png&quot; alt=&quot;file history showcase&quot;&gt;&lt;/p&gt; 
&lt;p&gt;The file history view allows you to list all the commits that affected a given set of paths, and view the changes made in a diff split. This is a porcelain interface for git-log, and supports a good number of its options. Things like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Filtering commits by grepping commit messages and commit authors.&lt;/li&gt; 
 &lt;li&gt;Tracing the line evolution of a given set of line ranges for multiple files.&lt;/li&gt; 
 &lt;li&gt;Only listing changes for a specific commit range, branch, or tag.&lt;/li&gt; 
 &lt;li&gt;Following file changes through renames.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get started by opening file history for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The current branch: &lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;The current file: &lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more info, see &lt;code&gt;:h :DiffviewFileHistory&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;:DiffviewOpen [git rev] [options] [ -- {paths...}]&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Calling &lt;code&gt;:DiffviewOpen&lt;/code&gt; with no args opens a new Diffview that compares against the current index. You can also provide any valid git rev to view only changes for that rev.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~4..HEAD~2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d^!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d..519b30e&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen origin/main...HEAD&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also provide additional paths to narrow down what files are shown:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2 -- lua/diffview plugin&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For information about additional &lt;code&gt;[options]&lt;/code&gt;, visit the &lt;a href=&quot;https://github.com/sindrets/diffview.nvim/raw/main/doc/diffview.txt&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additional commands for convenience:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewClose&lt;/code&gt;: Close the current diffview. You can also use &lt;code&gt;:tabclose&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewToggleFiles&lt;/code&gt;: Toggle the file panel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFocusFiles&lt;/code&gt;: Bring focus to the file panel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewRefresh&lt;/code&gt;: Update stats and entries in the file list of the current Diffview.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With a Diffview open and the default key bindings, you can cycle through changed files with &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;s-tab&amp;gt;&lt;/code&gt; (see configuration to change the key bindings).&lt;/p&gt; 
&lt;h4&gt;Staging&lt;/h4&gt; 
&lt;p&gt;You can stage individual hunks by editing any buffer that represents the index (after running &lt;code&gt;:DiffviewOpen&lt;/code&gt; with no &lt;code&gt;[git-rev]&lt;/code&gt; the entries under &quot;Changes&quot; will have the index buffer on the left side, and the entries under &quot;Staged changes&quot; will have it on the right side). Once you write to an index buffer the index will be updated.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;:[range]DiffviewFileHistory [paths] [options]&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Opens a new file history view that lists all commits that affected the given paths. This is a porcelain interface for git-log. Both &lt;code&gt;[paths]&lt;/code&gt; and &lt;code&gt;[options]&lt;/code&gt; may be specified in any order, even interchangeably.&lt;/p&gt; 
&lt;p&gt;If no &lt;code&gt;[paths]&lt;/code&gt; are given, defaults to the top-level of the working tree. The top-level will be inferred from the current buffer when possible, otherwise the cwd is used. Multiple &lt;code&gt;[paths]&lt;/code&gt; may be provided and git pathspec is supported.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;[range]&lt;/code&gt; is given, the file history view will trace the line evolution of the given range in the current file (for more info, see the &lt;code&gt;-L&lt;/code&gt; flag in the docs).&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/file.txt&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/directory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory include/this and/this :!but/not/this&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=origin..HEAD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=feat/example-branch&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:&#39;&amp;lt;,&#39;&amp;gt;DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;h3&gt;Familiarize Yourself With &lt;code&gt;:h diff-mode&lt;/code&gt;&lt;/h3&gt; 
 &lt;p&gt;This plugin assumes you&#39;re familiar with all the features already provided by nvim&#39;s builtin diff-mode. These features include:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Jumping between hunks (&lt;code&gt;:h jumpto-diffs&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;Applying the changes of a diff hunk from any of the diffed buffers (&lt;code&gt;:h copy-diffs&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;And more...&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Read the help page for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;br&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Additionally check out &lt;a href=&quot;https://raw.githubusercontent.com/sindrets/diffview.nvim/main/USAGE.md&quot;&gt;USAGE&lt;/a&gt; for examples of some more specific use-cases.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br&gt; 
&lt;hr&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt; &lt;/p&gt;
&lt;details&gt; 
 &lt;summary style=&quot;cursor: pointer&quot;&gt;&lt;b&gt;Example config with default values&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
local actions = require(&quot;diffview.actions&quot;)

require(&quot;diffview&quot;).setup({
  diff_binaries = false,    -- Show diffs for binaries
  enhanced_diff_hl = false, -- See |diffview-config-enhanced_diff_hl|
  git_cmd = { &quot;git&quot; },      -- The git executable followed by default args.
  hg_cmd = { &quot;hg&quot; },        -- The hg executable followed by default args.
  use_icons = true,         -- Requires nvim-web-devicons
  show_help_hints = true,   -- Show hints for how to open the help panel
  watch_index = true,       -- Update views and index buffers when the git index changes.
  icons = {                 -- Only applies when use_icons is true.
    folder_closed = &quot;&quot;,
    folder_open = &quot;&quot;,
  },
  signs = {
    fold_closed = &quot;&quot;,
    fold_open = &quot;&quot;,
    done = &quot;✓&quot;,
  },
  view = {
    -- Configure the layout and behavior of different types of views.
    -- Available layouts:
    --  &#39;diff1_plain&#39;
    --    |&#39;diff2_horizontal&#39;
    --    |&#39;diff2_vertical&#39;
    --    |&#39;diff3_horizontal&#39;
    --    |&#39;diff3_vertical&#39;
    --    |&#39;diff3_mixed&#39;
    --    |&#39;diff4_mixed&#39;
    -- For more info, see |diffview-config-view.x.layout|.
    default = {
      -- Config for changed files, and staged files in diff views.
      layout = &quot;diff2_horizontal&quot;,
      disable_diagnostics = false,  -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = false,          -- See |diffview-config-view.x.winbar_info|
    },
    merge_tool = {
      -- Config for conflicted files in diff views during a merge or rebase.
      layout = &quot;diff3_horizontal&quot;,
      disable_diagnostics = true,   -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = true,           -- See |diffview-config-view.x.winbar_info|
    },
    file_history = {
      -- Config for changed files in file history views.
      layout = &quot;diff2_horizontal&quot;,
      disable_diagnostics = false,  -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = false,          -- See |diffview-config-view.x.winbar_info|
    },
  },
  file_panel = {
    listing_style = &quot;tree&quot;,             -- One of &#39;list&#39; or &#39;tree&#39;
    tree_options = {                    -- Only applies when listing_style is &#39;tree&#39;
      flatten_dirs = true,              -- Flatten dirs that only contain one single dir
      folder_statuses = &quot;only_folded&quot;,  -- One of &#39;never&#39;, &#39;only_folded&#39; or &#39;always&#39;.
    },
    win_config = {                      -- See |diffview-config-win_config|
      position = &quot;left&quot;,
      width = 35,
      win_opts = {},
    },
  },
  file_history_panel = {
    log_options = {   -- See |diffview-config-log_options|
      git = {
        single_file = {
          diff_merges = &quot;combined&quot;,
        },
        multi_file = {
          diff_merges = &quot;first-parent&quot;,
        },
      },
      hg = {
        single_file = {},
        multi_file = {},
      },
    },
    win_config = {    -- See |diffview-config-win_config|
      position = &quot;bottom&quot;,
      height = 16,
      win_opts = {},
    },
  },
  commit_log_panel = {
    win_config = {},  -- See |diffview-config-win_config|
  },
  default_args = {    -- Default args prepended to the arg-list for the listed commands
    DiffviewOpen = {},
    DiffviewFileHistory = {},
  },
  hooks = {},         -- See |diffview-config-hooks|
  keymaps = {
    disable_defaults = false, -- Disable the default keymaps
    view = {
      -- The `view` bindings are active in the diff buffers, only when the current
      -- tabpage is a Diffview.
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,       actions.select_next_entry,              { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,     actions.select_prev_entry,              { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,          actions.select_first_entry,             { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,          actions.select_last_entry,              { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,          actions.goto_file_edit,                 { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,  actions.goto_file_split,                { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,     actions.goto_file_tab,                  { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,   actions.focus_files,                    { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,   actions.toggle_files,                   { desc = &quot;Toggle the file panel.&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,      actions.cycle_layout,                   { desc = &quot;Cycle through available layouts.&quot; } },
      { &quot;n&quot;, &quot;[x&quot;,          actions.prev_conflict,                  { desc = &quot;In the merge-tool: jump to the previous conflict&quot; } },
      { &quot;n&quot;, &quot;]x&quot;,          actions.next_conflict,                  { desc = &quot;In the merge-tool: jump to the next conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;co&quot;,  actions.conflict_choose(&quot;ours&quot;),        { desc = &quot;Choose the OURS version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;ct&quot;,  actions.conflict_choose(&quot;theirs&quot;),      { desc = &quot;Choose the THEIRS version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cb&quot;,  actions.conflict_choose(&quot;base&quot;),        { desc = &quot;Choose the BASE version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;ca&quot;,  actions.conflict_choose(&quot;all&quot;),         { desc = &quot;Choose all the versions of a conflict&quot; } },
      { &quot;n&quot;, &quot;dx&quot;,          actions.conflict_choose(&quot;none&quot;),        { desc = &quot;Delete the conflict region&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cO&quot;,  actions.conflict_choose_all(&quot;ours&quot;),    { desc = &quot;Choose the OURS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cT&quot;,  actions.conflict_choose_all(&quot;theirs&quot;),  { desc = &quot;Choose the THEIRS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cB&quot;,  actions.conflict_choose_all(&quot;base&quot;),    { desc = &quot;Choose the BASE version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cA&quot;,  actions.conflict_choose_all(&quot;all&quot;),     { desc = &quot;Choose all the versions of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;dX&quot;,          actions.conflict_choose_all(&quot;none&quot;),    { desc = &quot;Delete the conflict region for the whole file&quot; } },
    },
    diff1 = {
      -- Mappings in single window diff layouts
      { &quot;n&quot;, &quot;g?&quot;, actions.help({ &quot;view&quot;, &quot;diff1&quot; }), { desc = &quot;Open the help panel&quot; } },
    },
    diff2 = {
      -- Mappings in 2-way diff layouts
      { &quot;n&quot;, &quot;g?&quot;, actions.help({ &quot;view&quot;, &quot;diff2&quot; }), { desc = &quot;Open the help panel&quot; } },
    },
    diff3 = {
      -- Mappings in 3-way diff layouts
      { { &quot;n&quot;, &quot;x&quot; }, &quot;2do&quot;,  actions.diffget(&quot;ours&quot;),            { desc = &quot;Obtain the diff hunk from the OURS version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;3do&quot;,  actions.diffget(&quot;theirs&quot;),          { desc = &quot;Obtain the diff hunk from the THEIRS version of the file&quot; } },
      { &quot;n&quot;,          &quot;g?&quot;,   actions.help({ &quot;view&quot;, &quot;diff3&quot; }),  { desc = &quot;Open the help panel&quot; } },
    },
    diff4 = {
      -- Mappings in 4-way diff layouts
      { { &quot;n&quot;, &quot;x&quot; }, &quot;1do&quot;,  actions.diffget(&quot;base&quot;),            { desc = &quot;Obtain the diff hunk from the BASE version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;2do&quot;,  actions.diffget(&quot;ours&quot;),            { desc = &quot;Obtain the diff hunk from the OURS version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;3do&quot;,  actions.diffget(&quot;theirs&quot;),          { desc = &quot;Obtain the diff hunk from the THEIRS version of the file&quot; } },
      { &quot;n&quot;,          &quot;g?&quot;,   actions.help({ &quot;view&quot;, &quot;diff4&quot; }),  { desc = &quot;Open the help panel&quot; } },
    },
    file_panel = {
      { &quot;n&quot;, &quot;j&quot;,              actions.next_entry,                     { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;down&amp;gt;&quot;,         actions.next_entry,                     { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;k&quot;,              actions.prev_entry,                     { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;up&amp;gt;&quot;,           actions.prev_entry,                     { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;cr&amp;gt;&quot;,           actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;o&quot;,              actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;l&quot;,              actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;2-LeftMouse&amp;gt;&quot;,  actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;-&quot;,              actions.toggle_stage_entry,             { desc = &quot;Stage / unstage the selected entry&quot; } },
      { &quot;n&quot;, &quot;s&quot;,              actions.toggle_stage_entry,             { desc = &quot;Stage / unstage the selected entry&quot; } },
      { &quot;n&quot;, &quot;S&quot;,              actions.stage_all,                      { desc = &quot;Stage all entries&quot; } },
      { &quot;n&quot;, &quot;U&quot;,              actions.unstage_all,                    { desc = &quot;Unstage all entries&quot; } },
      { &quot;n&quot;, &quot;X&quot;,              actions.restore_entry,                  { desc = &quot;Restore entry to the state on the left side&quot; } },
      { &quot;n&quot;, &quot;L&quot;,              actions.open_commit_log,                { desc = &quot;Open the commit log panel&quot; } },
      { &quot;n&quot;, &quot;zo&quot;,             actions.open_fold,                      { desc = &quot;Expand fold&quot; } },
      { &quot;n&quot;, &quot;h&quot;,              actions.close_fold,                     { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;zc&quot;,             actions.close_fold,                     { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;za&quot;,             actions.toggle_fold,                    { desc = &quot;Toggle fold&quot; } },
      { &quot;n&quot;, &quot;zR&quot;,             actions.open_all_folds,                 { desc = &quot;Expand all folds&quot; } },
      { &quot;n&quot;, &quot;zM&quot;,             actions.close_all_folds,                { desc = &quot;Collapse all folds&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-b&amp;gt;&quot;,          actions.scroll_view(-0.25),             { desc = &quot;Scroll the view up&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-f&amp;gt;&quot;,          actions.scroll_view(0.25),              { desc = &quot;Scroll the view down&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,          actions.select_next_entry,              { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,        actions.select_prev_entry,              { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,             actions.select_first_entry,             { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,             actions.select_last_entry,              { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,             actions.goto_file_edit,                 { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,     actions.goto_file_split,                { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,        actions.goto_file_tab,                  { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;i&quot;,              actions.listing_style,                  { desc = &quot;Toggle between &#39;list&#39; and &#39;tree&#39; views&quot; } },
      { &quot;n&quot;, &quot;f&quot;,              actions.toggle_flatten_dirs,            { desc = &quot;Flatten empty subdirectories in tree listing style&quot; } },
      { &quot;n&quot;, &quot;R&quot;,              actions.refresh_files,                  { desc = &quot;Update stats and entries in the file list&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,      actions.focus_files,                    { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,      actions.toggle_files,                   { desc = &quot;Toggle the file panel&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,         actions.cycle_layout,                   { desc = &quot;Cycle available layouts&quot; } },
      { &quot;n&quot;, &quot;[x&quot;,             actions.prev_conflict,                  { desc = &quot;Go to the previous conflict&quot; } },
      { &quot;n&quot;, &quot;]x&quot;,             actions.next_conflict,                  { desc = &quot;Go to the next conflict&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,             actions.help(&quot;file_panel&quot;),             { desc = &quot;Open the help panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cO&quot;,     actions.conflict_choose_all(&quot;ours&quot;),    { desc = &quot;Choose the OURS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cT&quot;,     actions.conflict_choose_all(&quot;theirs&quot;),  { desc = &quot;Choose the THEIRS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cB&quot;,     actions.conflict_choose_all(&quot;base&quot;),    { desc = &quot;Choose the BASE version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cA&quot;,     actions.conflict_choose_all(&quot;all&quot;),     { desc = &quot;Choose all the versions of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;dX&quot;,             actions.conflict_choose_all(&quot;none&quot;),    { desc = &quot;Delete the conflict region for the whole file&quot; } },
    },
    file_history_panel = {
      { &quot;n&quot;, &quot;g!&quot;,            actions.options,                     { desc = &quot;Open the option panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-A-d&amp;gt;&quot;,       actions.open_in_diffview,            { desc = &quot;Open the entry under the cursor in a diffview&quot; } },
      { &quot;n&quot;, &quot;y&quot;,             actions.copy_hash,                   { desc = &quot;Copy the commit hash of the entry under the cursor&quot; } },
      { &quot;n&quot;, &quot;L&quot;,             actions.open_commit_log,             { desc = &quot;Show commit details&quot; } },
      { &quot;n&quot;, &quot;X&quot;,             actions.restore_entry,               { desc = &quot;Restore file to the state from the selected entry&quot; } },
      { &quot;n&quot;, &quot;zo&quot;,            actions.open_fold,                   { desc = &quot;Expand fold&quot; } },
      { &quot;n&quot;, &quot;zc&quot;,            actions.close_fold,                  { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;h&quot;,             actions.close_fold,                  { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;za&quot;,            actions.toggle_fold,                 { desc = &quot;Toggle fold&quot; } },
      { &quot;n&quot;, &quot;zR&quot;,            actions.open_all_folds,              { desc = &quot;Expand all folds&quot; } },
      { &quot;n&quot;, &quot;zM&quot;,            actions.close_all_folds,             { desc = &quot;Collapse all folds&quot; } },
      { &quot;n&quot;, &quot;j&quot;,             actions.next_entry,                  { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;down&amp;gt;&quot;,        actions.next_entry,                  { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;k&quot;,             actions.prev_entry,                  { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;up&amp;gt;&quot;,          actions.prev_entry,                  { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;cr&amp;gt;&quot;,          actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;o&quot;,             actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;l&quot;,             actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;2-LeftMouse&amp;gt;&quot;, actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-b&amp;gt;&quot;,         actions.scroll_view(-0.25),          { desc = &quot;Scroll the view up&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-f&amp;gt;&quot;,         actions.scroll_view(0.25),           { desc = &quot;Scroll the view down&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,         actions.select_next_entry,           { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,       actions.select_prev_entry,           { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,            actions.select_first_entry,          { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,            actions.select_last_entry,           { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,            actions.goto_file_edit,              { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,    actions.goto_file_split,             { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,       actions.goto_file_tab,               { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,     actions.focus_files,                 { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,     actions.toggle_files,                { desc = &quot;Toggle the file panel&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,        actions.cycle_layout,                { desc = &quot;Cycle available layouts&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,            actions.help(&quot;file_history_panel&quot;),  { desc = &quot;Open the help panel&quot; } },
    },
    option_panel = {
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;, actions.select_entry,          { desc = &quot;Change the current option&quot; } },
      { &quot;n&quot;, &quot;q&quot;,     actions.close,                 { desc = &quot;Close the panel&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,    actions.help(&quot;option_panel&quot;),  { desc = &quot;Open the help panel&quot; } },
    },
    help_panel = {
      { &quot;n&quot;, &quot;q&quot;,     actions.close,  { desc = &quot;Close help menu&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;esc&amp;gt;&quot;, actions.close,  { desc = &quot;Close help menu&quot; } },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h3&gt;Hooks&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; table allows you to define callbacks for various events emitted from Diffview. The available hooks are documented in detail in &lt;code&gt;:h diffview-config-hooks&lt;/code&gt;. The hook events are also available as User autocommands. See &lt;code&gt;:h diffview-user-autocmds&lt;/code&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hooks = {
  diff_buf_read = function(bufnr)
    -- Change local options in diff buffers
    vim.opt_local.wrap = false
    vim.opt_local.list = false
    vim.opt_local.colorcolumn = { 80 }
  end,
  view_opened = function(view)
    print(
      (&quot;A new %s was opened on tab page %d!&quot;)
      :format(view.class:name(), view.tabpage)
    )
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Keymaps&lt;/h3&gt; 
&lt;p&gt;The keymaps config is structured as a table with sub-tables for various different contexts where mappings can be declared. In these sub-tables key-value pairs are treated as the &lt;code&gt;{lhs}&lt;/code&gt; and &lt;code&gt;{rhs}&lt;/code&gt; of a normal mode mapping. These mappings all use the &lt;code&gt;:map-arguments&lt;/code&gt; &lt;code&gt;silent&lt;/code&gt;, &lt;code&gt;nowait&lt;/code&gt;, and &lt;code&gt;noremap&lt;/code&gt;. The implementation uses &lt;code&gt;vim.keymap.set()&lt;/code&gt;, so the &lt;code&gt;{rhs}&lt;/code&gt; can be either a vim command in the form of a string, or it can be a lua function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  view = {
    -- Vim command:
    [&quot;a&quot;] = &quot;&amp;lt;Cmd&amp;gt;echom &#39;foo&#39;&amp;lt;CR&amp;gt;&quot;,
    -- Lua function:
    [&quot;b&quot;] = function() print(&quot;bar&quot;) end,
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more control (i.e. mappings for other modes), you can also define index values as list-like tables containing the arguments for &lt;code&gt;vim.keymap.set()&lt;/code&gt;. This way you can also change all the &lt;code&gt;:map-arguments&lt;/code&gt; with the only exception being the &lt;code&gt;buffer&lt;/code&gt; field, as this will be overridden with the target buffer number:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;view = {
  -- Normal and visual mode mapping to vim command:
  { { &quot;n&quot;, &quot;v&quot; }, &quot;&amp;lt;leader&amp;gt;a&quot;, &quot;&amp;lt;Cmd&amp;gt;echom &#39;foo&#39;&amp;lt;CR&amp;gt;&quot;, { silent = true } },
  -- Visual mode mapping to lua function:
  { &quot;v&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;, function() print(&quot;bar&quot;) end, { nowait = true } },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To disable any single mapping without disabling them all, set its &lt;code&gt;{rhs}&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  view = {
    -- Disable the default normal mode mapping for `&amp;lt;tab&amp;gt;`:
    [&quot;&amp;lt;tab&amp;gt;&quot;] = false,
    -- Disable the default visual mode mapping for `gf`:
    { &quot;x&quot;, &quot;gf&quot;, false },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Most of the mapped file panel actions also work from the view if they are added to the view maps (and vice versa). The exception is for actions that only really make sense specifically in the file panel, such as &lt;code&gt;next_entry&lt;/code&gt;, &lt;code&gt;prev_entry&lt;/code&gt;. Actions such as &lt;code&gt;toggle_stage_entry&lt;/code&gt; and &lt;code&gt;restore_entry&lt;/code&gt; work just fine from the view. When invoked from the view, these will target the file currently open in the view rather than the file under the cursor in the file panel.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;For more details on how to set mappings for other modes, actions, and more see:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-config-keymaps&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-actions&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Restoring Files&lt;/h2&gt; 
&lt;p&gt;If the right side of the diff is showing the local state of a file, you can restore the file to the state from the left side of the diff (key binding &lt;code&gt;X&lt;/code&gt; from the file panel by default). The current state of the file is stored in the git object database, and a command is echoed that shows how to undo the change.&lt;/p&gt; 
&lt;h2&gt;Tips and FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hide untracked files:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -uno&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Exclude certain paths:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -- :!exclude/this :!and/this&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Run as if git was started in a specific directory:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -C/foo/bar/baz&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Diff the index against a git rev:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen HEAD~2 --cached&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Defaults to &lt;code&gt;HEAD&lt;/code&gt; if no rev is given.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q: How do I get the diagonal lines in place of deleted lines in diff-mode?&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A: Change your &lt;code&gt;:h &#39;fillchars&#39;&lt;/code&gt;: 
    &lt;ul&gt; 
     &lt;li&gt;(vimscript): &lt;code&gt;set fillchars+=diff:╱&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;(Lua): &lt;code&gt;vim.opt.fillchars:append { diff = &quot;╱&quot; }&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Note: whether or not the diagonal lines will line up nicely will depend on your terminal emulator. The terminal used in the screenshots is Kitty.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q: How do I jump between hunks in the diff?&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A: Use &lt;code&gt;[c&lt;/code&gt; and &lt;code&gt;]c&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:h jumpto-diffs&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim: set tw=80 --&gt;</description>
    </item>
    
    <item>
      <title>CopilotC-Nvim/CopilotChat.nvim</title>
      <link>https://github.com/CopilotC-Nvim/CopilotChat.nvim</link>
      <description>&lt;p&gt;Chat with GitHub Copilot in Neovim&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Copilot Chat for Neovim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/CopilotC-Nvim/CopilotChat.nvim?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/CopilotC-Nvim/CopilotChat.nvim/ci.yml?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://copilotc-nvim.github.io/CopilotChat.nvim/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-up-green.svg?logo=vim&amp;amp;style=for-the-badge&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/#contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/all-contributors/CopilotC-Nvim/CopilotChat.nvim?color=ee8449&amp;amp;logo=github&amp;amp;label=contributors&amp;amp;style=for-the-badge&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/vy6hJsTWaZ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1200633211236122665?logo=discord&amp;amp;label=discord&amp;amp;style=for-the-badge&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim/shield?style=for-the-badge&quot; alt=&quot;Dotfyle&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/9ee30811-0fb8-4500-91f6-34ea6b26adea&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&quot;&gt;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;CopilotChat.nvim is a Neovim plugin that brings GitHub Copilot Chat capabilities directly into your editor. It provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🤖 GitHub Copilot Chat integration with official model and agent support (GPT-4o, Claude 3.7 Sonnet, Gemini 2.0 Flash, and more)&lt;/li&gt; 
 &lt;li&gt;💻 Rich workspace context powered by smart embeddings system&lt;/li&gt; 
 &lt;li&gt;🔒 Explicit context sharing - only sends what you specifically request, either as context or selection&lt;/li&gt; 
 &lt;li&gt;🔌 Modular provider architecture supporting both official and custom LLM backends (Ollama, LM Studio, Mistral.ai and more)&lt;/li&gt; 
 &lt;li&gt;📝 Interactive chat UI with completion, diffs and quickfix integration&lt;/li&gt; 
 &lt;li&gt;🎯 Powerful prompt system with composable templates and sticky prompts&lt;/li&gt; 
 &lt;li&gt;🔄 Extensible context providers for granular workspace understanding (buffers, files, git diffs, URLs, and more)&lt;/li&gt; 
 &lt;li&gt;⚡ Efficient token usage with tiktoken optimization&lt;/li&gt; 
 &lt;li&gt;📜 Intelligent chat memory management with automatic summarization to handle lengthy conversations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Requirements&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim 0.10.0+&lt;/a&gt; - Older versions are not officially supported&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;curl&lt;/a&gt; - Version 8.0.0+ recommended for best compatibility&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/settings/copilot&quot;&gt;Copilot chat in the IDE&lt;/a&gt; enabled in GitHub settings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] For Neovim &amp;lt; 0.11.0, add &lt;code&gt;noinsert&lt;/code&gt; or &lt;code&gt;noselect&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; otherwise chat autocompletion will not work. For best autocompletion experience, also add &lt;code&gt;popup&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; (even on Neovim 0.11.0+).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Optional Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gptlang/lua-tiktoken&quot;&gt;tiktoken_core&lt;/a&gt; - For accurate token counting&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Arch Linux: Install &lt;a href=&quot;https://aur.archlinux.org/packages/luajit-tiktoken-bin&quot;&gt;&lt;code&gt;luajit-tiktoken-bin&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://aur.archlinux.org/packages/lua51-tiktoken-bin&quot;&gt;&lt;code&gt;lua51-tiktoken-bin&lt;/code&gt;&lt;/a&gt; from AUR&lt;/li&gt; 
   &lt;li&gt;Via luarocks: &lt;code&gt;sudo luarocks install --lua-version 5.1 tiktoken_core&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Manual: Download from &lt;a href=&quot;https://github.com/gptlang/lua-tiktoken/releases&quot;&gt;lua-tiktoken releases&lt;/a&gt; and save as &lt;code&gt;tiktoken_core.so&lt;/code&gt; in your Lua path&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; - For git diff context features&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; - For improved search performance&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://lynx.invisible-island.net/&quot;&gt;lynx&lt;/a&gt; - For improved URL context features&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integration with pickers&lt;/h2&gt; 
&lt;p&gt;For various plugin pickers to work correctly, you need to replace &lt;code&gt;vim.ui.select&lt;/code&gt; with your desired picker (as the default &lt;code&gt;vim.ui.select&lt;/code&gt; is very basic). Here are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua?tab=readme-ov-file#neovim-api&quot;&gt;fzf-lua&lt;/a&gt; - call &lt;code&gt;require(&#39;fzf-lua&#39;).register_ui_select()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope-ui-select.nvim?tab=readme-ov-file#telescope-setup-and-configuration&quot;&gt;telescope&lt;/a&gt; - setup &lt;code&gt;telescope-ui-select.nvim&lt;/code&gt; plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md#%EF%B8%8F-config&quot;&gt;snacks.picker&lt;/a&gt; - enable &lt;code&gt;ui_select&lt;/code&gt; config&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick/raw/main/lua/mini/pick.lua#L1229&quot;&gt;mini.pick&lt;/a&gt; - set &lt;code&gt;vim.ui.select = require(&#39;mini.pick&#39;).ui_select&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Plugin features that use picker:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt; - for selecting prompts&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt; - for selecting models&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatAgents&lt;/code&gt; - for selecting agents&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;#&amp;lt;context&amp;gt;:&amp;lt;input&amp;gt;&lt;/code&gt; - for selecting context input&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;CopilotC-Nvim/CopilotChat.nvim&quot;,
    dependencies = {
      { &quot;github/copilot.vim&quot; }, -- or zbirenbaum/copilot.lua
      { &quot;nvim-lua/plenary.nvim&quot;, branch = &quot;master&quot; }, -- for curl, log and async functions
    },
    build = &quot;make tiktoken&quot;, -- Only on MacOS or Linux
    opts = {
      -- See Configuration section for options
    },
    -- See Commands section for default commands if you want to lazy load on them
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/jellydn&quot;&gt;@jellydn&lt;/a&gt; for &lt;a href=&quot;https://github.com/jellydn/lazy-nvim-ide/raw/main/lua/plugins/extras/copilot-chat-v2.lua&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Similar to the lazy setup, you can use the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call plug#begin()
Plug &#39;github/copilot.vim&#39;
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;CopilotC-Nvim/CopilotChat.nvim&#39;
call plug#end()

lua &amp;lt;&amp;lt; EOF
require(&quot;CopilotChat&quot;).setup {
  -- See Configuration section for options
}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Put the files in the right place&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;mkdir -p ~/.config/nvim/pack/copilotchat/start
cd ~/.config/nvim/pack/copilotchat/start

git clone https://github.com/github/copilot.vim
git clone https://github.com/nvim-lua/plenary.nvim

git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Add to your configuration (e.g. &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;CopilotChat&quot;).setup {
  -- See Configuration section for options
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/deathbeam&quot;&gt;@deathbeam&lt;/a&gt; for &lt;a href=&quot;https://github.com/deathbeam/dotfiles/raw/master/nvim/.config/nvim/lua/config/copilot.lua&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;Commands are used to control the chat interface:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat &amp;lt;input&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat with optional input&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatOpen&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatClose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatStop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stop current output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatSave &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Save chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatLoad &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select prompt templates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatAgents&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available agents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use specific prompt template&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Key Mappings&lt;/h2&gt; 
&lt;p&gt;Default mappings in the chat interface:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Insert&lt;/th&gt; 
   &lt;th&gt;Normal&lt;/th&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Trigger/accept completion menu for tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset and clear the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Submit the current prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grr&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle sticky prompt for line under cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grx&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear all sticky prompts in prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Accept nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gj&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Jump to section of nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqa&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all answers from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all diffs from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yank nearest diff to register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show diff between source and nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gi&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show info about current chat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show current chat context&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show help message&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The mappings can be customized by setting the &lt;code&gt;mappings&lt;/code&gt; table in your configuration. Each mapping can have:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;normal&lt;/code&gt;: Key for normal mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;insert&lt;/code&gt;: Key for insert mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to change the submit prompt mapping or show_diff full diff option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    mappings = {
      submit_prompt = {
        normal = &#39;&amp;lt;Leader&amp;gt;s&#39;,
        insert = &#39;&amp;lt;C-s&amp;gt;&#39;
      }
      show_diff = {
        full_diff = true
      }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Prompts&lt;/h2&gt; 
&lt;h3&gt;Predefined Prompts&lt;/h3&gt; 
&lt;p&gt;Predefined prompt templates for common tasks. Reference them with &lt;code&gt;/PromptName&lt;/code&gt; in chat, use &lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt; or &lt;code&gt;:CopilotChatPrompts&lt;/code&gt; to select them:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Explain&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write an explanation for the selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Review&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Review the selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Fix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Rewrite the code with bug fixes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Optimize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Optimize code for performance and readability&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Docs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add documentation comments to the code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Tests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generate tests for the code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Commit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write commit message using commitizen convention&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Define your own prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    MyCustomPrompt = {
      prompt = &#39;Explain how it works.&#39;,
      system_prompt = &#39;You are very good at explaining stuff&#39;,
      mapping = &#39;&amp;lt;leader&amp;gt;ccmc&#39;,
      description = &#39;My custom prompt description&#39;,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;System Prompts&lt;/h3&gt; 
&lt;p&gt;System prompts define the AI model&#39;s behavior. Reference them with &lt;code&gt;/PROMPT_NAME&lt;/code&gt; in chat:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_BASE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;All prompts should be built on top of this&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_INSTRUCTIONS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Base instructions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_EXPLAIN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds coding tutor behavior&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_REVIEW&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds code review behavior with diagnostics&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Define your own system prompts in the configuration (similar to &lt;code&gt;prompts&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    Yarrr = {
      system_prompt = &#39;You are fascinated by pirates, so please respond in pirate speak.&#39;,
    },
    NiceInstructions = {
      system_prompt = &#39;You are a nice coding tutor, so please respond in a friendly and helpful manner.&#39; .. require(&#39;CopilotChat.config.prompts&#39;).COPILOT_BASE.system_prompt,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sticky Prompts&lt;/h3&gt; 
&lt;p&gt;Sticky prompts persist across chat sessions. They&#39;re useful for maintaining context or agent selection. They work as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Prefix text with &lt;code&gt;&amp;gt; &lt;/code&gt; using markdown blockquote syntax&lt;/li&gt; 
 &lt;li&gt;The prompt will be copied at the start of every new chat prompt&lt;/li&gt; 
 &lt;li&gt;Edit sticky prompts freely while maintaining the &lt;code&gt;&amp;gt; &lt;/code&gt; prefix&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; #files
&amp;gt; List all files in the workspace

&amp;gt; @models Using Mistral-small
&amp;gt; What is 1 + 11
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also set default sticky prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  sticky = {
    &#39;@models Using Mistral-small&#39;,
    &#39;#files&#39;,
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Models and Agents&lt;/h2&gt; 
&lt;h3&gt;Models&lt;/h3&gt; 
&lt;p&gt;You can control which AI model to use in three ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;List available models with &lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Set model in prompt with &lt;code&gt;$model_name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configure default model via &lt;code&gt;model&lt;/code&gt; config key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For supported models, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/copilot/using-github-copilot/ai-models/changing-the-ai-model-for-copilot-chat#ai-models-for-copilot-chat&quot;&gt;Copilot Chat Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marketplace/models&quot;&gt;GitHub Marketplace Models&lt;/a&gt; (experimental, limited usage)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Agents&lt;/h3&gt; 
&lt;p&gt;Agents determine the AI assistant&#39;s capabilities. Control agents in three ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;List available agents with &lt;code&gt;:CopilotChatAgents&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Set agent in prompt with &lt;code&gt;@agent_name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configure default agent via &lt;code&gt;agent&lt;/code&gt; config key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The default &quot;noop&quot; agent is &lt;code&gt;none&lt;/code&gt;. For more information:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/copilot/using-github-copilot/using-extensions-to-integrate-external-tools-with-copilot-chat&quot;&gt;Extension Agents Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marketplace?type=apps&amp;amp;copilot_app=true&quot;&gt;Available Agents&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contexts&lt;/h2&gt; 
&lt;p&gt;Contexts provide additional information to the chat. Add context using &lt;code&gt;#context_name[:input]&lt;/code&gt; syntax:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Context&lt;/th&gt; 
   &lt;th&gt;Input Support&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (number)&lt;/td&gt; 
   &lt;td&gt;Current or specified buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (type)&lt;/td&gt; 
   &lt;td&gt;All buffers content (listed/all)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (path)&lt;/td&gt; 
   &lt;td&gt;Content of specified file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (glob)&lt;/td&gt; 
   &lt;td&gt;Workspace files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;filenames&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (glob)&lt;/td&gt; 
   &lt;td&gt;Workspace file names&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;git&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (ref)&lt;/td&gt; 
   &lt;td&gt;Git diff (unstaged/staged/commit)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (url)&lt;/td&gt; 
   &lt;td&gt;Content from URL&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;register&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (name)&lt;/td&gt; 
   &lt;td&gt;Content of vim register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Quickfix list file contents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (command)&lt;/td&gt; 
   &lt;td&gt;Output of shell command&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] The AI is aware of these context providers and may request additional context if needed by asking you to input a specific context command like &lt;code&gt;#file:path/to/file.js&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; #buffer
&amp;gt; #buffer:2
&amp;gt; #files:\*.lua
&amp;gt; #filenames
&amp;gt; #git:staged
&amp;gt; #url:https://example.com
&amp;gt; #system:`ls -la | grep lua`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Define your own contexts in the configuration with input handling and resolution:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  contexts = {
    birthday = {
      input = function(callback)
        vim.ui.select({ &#39;user&#39;, &#39;napoleon&#39; }, {
          prompt = &#39;Select birthday&amp;gt; &#39;,
        }, callback)
      end,
      resolve = function(input)
        return {
          {
            content = input .. &#39; birthday info&#39;,
            filename = input .. &#39;_birthday&#39;,
            filetype = &#39;text&#39;,
          }
        }
      end
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Contexts&lt;/h3&gt; 
&lt;p&gt;For external contexts, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/contexts&quot;&gt;contexts discussion page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Selections&lt;/h2&gt; 
&lt;p&gt;Selections determine the source content for chat interactions.&lt;/p&gt; 
&lt;p&gt;Available selections are located in &lt;code&gt;local select = require(&quot;CopilotChat.select&quot;)&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Selection&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;visual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current visual selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;line&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current line content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;unnamed&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Unnamed register (last deleted/changed/yanked content)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You can set a default selection in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Default uses visual selection or falls back to buffer
  selection = function(source)
    return select.visual(source) or select.buffer(source)
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Providers&lt;/h2&gt; 
&lt;p&gt;Providers are modules that implement integration with different AI providers.&lt;/p&gt; 
&lt;h3&gt;Built-in Providers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot&lt;/code&gt; - Default GitHub Copilot provider used for chat&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;github_models&lt;/code&gt; - Provider for GitHub Marketplace models&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;copilot_embeddings&lt;/code&gt; - Provider for Copilot embeddings, not standalone&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Provider Interface&lt;/h3&gt; 
&lt;p&gt;Custom providers can implement these methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Optional: Disable provider
  disabled?: boolean,

  -- Optional: Embeddings provider name or function
  embed?: string|function,

  -- Optional: Get extra request headers with optional expiration time
  get_headers?(): table&amp;lt;string,string&amp;gt;, number?,

  -- Optional: Get API endpoint URL
  get_url?(opts: CopilotChat.Provider.options): string,

  -- Optional: Prepare request input
  prepare_input?(inputs: table&amp;lt;CopilotChat.Provider.input&amp;gt;, opts: CopilotChat.Provider.options): table,

  -- Optional: Prepare response output
  prepare_output?(output: table, opts: CopilotChat.Provider.options): CopilotChat.Provider.output,

  -- Optional: Get available models
  get_models?(headers: table): table&amp;lt;CopilotChat.Provider.model&amp;gt;,

  -- Optional: Get available agents
  get_agents?(headers: table): table&amp;lt;CopilotChat.Provider.agent&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Providers&lt;/h3&gt; 
&lt;p&gt;For external providers (Ollama, LM Studio, Mistral.ai), see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/providers&quot;&gt;providers discussion page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;h2&gt;Default Configuration&lt;/h2&gt; 
&lt;p&gt;Below are all available configuration options with their default values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{

  -- Shared config starts here (can be passed to functions at runtime and configured via setup function)

  system_prompt = &#39;COPILOT_INSTRUCTIONS&#39;, -- System prompt to use (can be specified manually in prompt via /).

  model = &#39;gpt-4o&#39;, -- Default model to use, see &#39;:CopilotChatModels&#39; for available models (can be specified manually in prompt via $).
  agent = &#39;copilot&#39;, -- Default agent to use, see &#39;:CopilotChatAgents&#39; for available agents (can be specified manually in prompt via @).
  context = nil, -- Default context or array of contexts to use (can be specified manually in prompt via #).
  sticky = nil, -- Default sticky prompt or array of sticky prompts to use at start of every new chat.

  temperature = 0.1, -- GPT result temperature
  headless = false, -- Do not write to chat buffer and use history (useful for using custom processing)
  stream = nil, -- Function called when receiving stream updates (returned string is appended to the chat buffer)
  callback = nil, -- Function called when full response is received (retuned string is stored to history)
  remember_as_sticky = true, -- Remember model/agent/context as sticky prompts when asking questions

  -- default selection
  -- see select.lua for implementation
  selection = function(source)
    return select.visual(source) or select.buffer(source)
  end,

  -- default window options
  window = {
    layout = &#39;vertical&#39;, -- &#39;vertical&#39;, &#39;horizontal&#39;, &#39;float&#39;, &#39;replace&#39;
    width = 0.5, -- fractional width of parent, or absolute width in columns when &amp;gt; 1
    height = 0.5, -- fractional height of parent, or absolute height in rows when &amp;gt; 1
    -- Options below only apply to floating windows
    relative = &#39;editor&#39;, -- &#39;editor&#39;, &#39;win&#39;, &#39;cursor&#39;, &#39;mouse&#39;
    border = &#39;single&#39;, -- &#39;none&#39;, single&#39;, &#39;double&#39;, &#39;rounded&#39;, &#39;solid&#39;, &#39;shadow&#39;
    row = nil, -- row position of the window, default is centered
    col = nil, -- column position of the window, default is centered
    title = &#39;Copilot Chat&#39;, -- title of chat window
    footer = nil, -- footer of chat window
    zindex = 1, -- determines if window is on top or below other floating windows
  },

  show_help = true, -- Shows help message as virtual lines when waiting for user input
  highlight_selection = true, -- Highlight selection
  highlight_headers = true, -- Highlight headers in chat, disable if using markdown renderers (like render-markdown.nvim)
  references_display = &#39;virtual&#39;, -- &#39;virtual&#39;, &#39;write&#39;, Display references in chat as virtual text or write to buffer
  auto_follow_cursor = true, -- Auto-follow cursor in chat
  auto_insert_mode = false, -- Automatically enter insert mode when opening window and on new prompt
  insert_at_end = false, -- Move cursor to end of buffer when inserting text
  clear_chat_on_new_prompt = false, -- Clears chat on every new prompt

  -- Static config starts here (can be configured only via setup function)

  debug = false, -- Enable debug logging (same as &#39;log_level = &#39;debug&#39;)
  log_level = &#39;info&#39;, -- Log level to use, &#39;trace&#39;, &#39;debug&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;error&#39;, &#39;fatal&#39;
  proxy = nil, -- [protocol://]host[:port] Use this proxy
  allow_insecure = false, -- Allow insecure server connections

  chat_autocomplete = true, -- Enable chat autocompletion (when disabled, requires manual `mappings.complete` trigger)

  log_path = vim.fn.stdpath(&#39;state&#39;) .. &#39;/CopilotChat.log&#39;, -- Default path to log file
  history_path = vim.fn.stdpath(&#39;data&#39;) .. &#39;/copilotchat_history&#39;, -- Default path to stored history

  question_header = &#39;# User &#39;, -- Header to use for user questions
  answer_header = &#39;# Copilot &#39;, -- Header to use for AI answers
  error_header = &#39;# Error &#39;, -- Header to use for errors
  separator = &#39;───&#39;, -- Separator to use in chat

  -- default providers
  -- see config/providers.lua for implementation
  providers = {
    copilot = {
    },
    github_models = {
    },
    copilot_embeddings = {
    },
  }

  -- default contexts
  -- see config/contexts.lua for implementation
  contexts = {
    buffer = {
    },
    buffers = {
    },
    file = {
    },
    files = {
    },
    git = {
    },
    url = {
    },
    register = {
    },
    quickfix = {
    },
    system = {
    }
  },

  -- default prompts
  -- see config/prompts.lua for implementation
  prompts = {
    Explain = {
      prompt = &#39;Write an explanation for the selected code as paragraphs of text.&#39;,
      system_prompt = &#39;COPILOT_EXPLAIN&#39;,
    },
    Review = {
      prompt = &#39;Review the selected code.&#39;,
      system_prompt = &#39;COPILOT_REVIEW&#39;,
    },
    Fix = {
      prompt = &#39;There is a problem in this code. Identify the issues and rewrite the code with fixes. Explain what was wrong and how your changes address the problems.&#39;,
    },
    Optimize = {
      prompt = &#39;Optimize the selected code to improve performance and readability. Explain your optimization strategy and the benefits of your changes.&#39;,
    },
    Docs = {
      prompt = &#39;Please add documentation comments to the selected code.&#39;,
    },
    Tests = {
      prompt = &#39;Please generate tests for my code.&#39;,
    },
    Commit = {
      prompt = &#39;Write commit message for the change with commitizen convention. Keep the title under 50 characters and wrap message at 72 characters. Format as a gitcommit code block.&#39;,
      context = &#39;git:staged&#39;,
    },
  },

  -- default mappings
  -- see config/mappings.lua for implementation
  mappings = {
    complete = {
      insert = &#39;&amp;lt;Tab&amp;gt;&#39;,
    },
    close = {
      normal = &#39;q&#39;,
      insert = &#39;&amp;lt;C-c&amp;gt;&#39;,
    },
    reset = {
      normal = &#39;&amp;lt;C-l&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-l&amp;gt;&#39;,
    },
    submit_prompt = {
      normal = &#39;&amp;lt;CR&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-s&amp;gt;&#39;,
    },
    toggle_sticky = {
      normal = &#39;grr&#39;,
    },
    clear_stickies = {
      normal = &#39;grx&#39;,
    },
    accept_diff = {
      normal = &#39;&amp;lt;C-y&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-y&amp;gt;&#39;,
    },
    jump_to_diff = {
      normal = &#39;gj&#39;,
    },
    quickfix_answers = {
      normal = &#39;gqa&#39;,
    },
    quickfix_diffs = {
      normal = &#39;gqd&#39;,
    },
    yank_diff = {
      normal = &#39;gy&#39;,
      register = &#39;&quot;&#39;, -- Default register to use for yanking
    },
    show_diff = {
      normal = &#39;gd&#39;,
      full_diff = false, -- Show full diff instead of unified diff when showing diff window
    },
    show_info = {
      normal = &#39;gi&#39;,
    },
    show_context = {
      normal = &#39;gc&#39;,
    },
    show_help = {
      normal = &#39;gh&#39;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customizing Buffers&lt;/h2&gt; 
&lt;p&gt;Types of copilot buffers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot-chat&lt;/code&gt; - Main chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;copilot-overlay&lt;/code&gt; - Overlay buffers (e.g. help, info, diff)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can set local options for plugin buffers like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;BufEnter&#39;, {
    pattern = &#39;copilot-*&#39;,
    callback = function()
        -- Set buffer-local options
        vim.opt_local.relativenumber = false
        vim.opt_local.number = false
        vim.opt_local.conceallevel = 0
    end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customizing Highlights&lt;/h2&gt; 
&lt;p&gt;Types of copilot highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHeader&lt;/code&gt; - Header highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSeparator&lt;/code&gt; - Separator highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatStatus&lt;/code&gt; - Status and spinner in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHelp&lt;/code&gt; - Help messages in chat buffer (help, references)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSelection&lt;/code&gt; - Selection highlight in source buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatKeyword&lt;/code&gt; - Keyword highlight in chat buffer (e.g. prompts, contexts)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatInput&lt;/code&gt; - Input highlight in chat buffer (for contexts)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;API Reference&lt;/h1&gt; 
&lt;h2&gt;Core&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local chat = require(&quot;CopilotChat&quot;)

-- Basic Chat Functions
chat.ask(prompt, config)      -- Ask a question with optional config
chat.response()               -- Get the last response text
chat.resolve_prompt()         -- Resolve prompt references
chat.resolve_context()        -- Resolve context embeddings (WARN: async, requires plenary.async.run)
chat.resolve_agent()          -- Resolve agent from prompt (WARN: async, requires plenary.async.run)
chat.resolve_model()          -- Resolve model from prompt (WARN: async, requires plenary.async.run)

-- Window Management
chat.open(config)             -- Open chat window with optional config
chat.close()                  -- Close chat window
chat.toggle(config)           -- Toggle chat window visibility with optional config
chat.reset()                  -- Reset the chat
chat.stop()                   -- Stop current output

-- Source Management
chat.get_source()             -- Get the current source buffer and window
chat.set_source(winnr)        -- Set the source window

-- Selection Management
chat.get_selection()                                   -- Get the current selection
chat.set_selection(bufnr, start_line, end_line, clear) -- Set or clear selection

-- Prompt &amp;amp; Context Management
chat.select_prompt(config)    -- Open prompt selector with optional config
chat.select_model()           -- Open model selector
chat.select_agent()           -- Open agent selector
chat.prompts()                -- Get all available prompts

-- Completion
chat.trigger_complete()       -- Trigger completion in chat window
chat.complete_info()          -- Get completion info for custom providers
chat.complete_items()         -- Get completion items (WARN: async, requires plenary.async.run)

-- History Management
chat.save(name, history_path) -- Save chat history
chat.load(name, history_path) -- Load chat history

-- Configuration
chat.setup(config)            -- Update configuration
chat.log_level(level)         -- Set log level (debug, info, etc.)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Chat Window&lt;/h2&gt; 
&lt;p&gt;You can also access the chat window UI methods through the &lt;code&gt;chat.chat&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local window = require(&quot;CopilotChat&quot;).chat

-- Chat UI State
window:visible()             -- Check if chat window is visible
window:focused()             -- Check if chat window is focused

-- Content Management
window:get_prompt()          -- Get current prompt from chat window
window:set_prompt(prompt)    -- Set prompt in chat window
window:add_sticky(sticky)    -- Add sticky prompt to chat window
window:append(text)          -- Append text to chat window
window:clear()               -- Clear chat window content
window:finish()              -- Finish writing to chat window

-- Navigation
window:follow()              -- Move cursor to end of chat content
window:focus()               -- Focus the chat window

-- Advanced Features
window:get_closest_section() -- Get section closest to cursor
window:get_closest_block()   -- Get code block closest to cursor
window:overlay(opts)         -- Show overlay with specified options
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Open chat, ask a question and handle response
require(&quot;CopilotChat&quot;).open()
require(&quot;CopilotChat&quot;).ask(&quot;Explain this code&quot;, {
  callback = function(response)
    vim.notify(&quot;Got response: &quot; .. response:sub(1, 50) .. &quot;...&quot;)
    return response
  end,
  context = &quot;buffer&quot;
})

-- Save and load chat history
require(&quot;CopilotChat&quot;).save(&quot;my_debugging_session&quot;)
require(&quot;CopilotChat&quot;).load(&quot;my_debugging_session&quot;)

-- Use custom context and model
require(&quot;CopilotChat&quot;).ask(&quot;How can I optimize this?&quot;, {
  model = &quot;gpt-4o&quot;,
  context = {&quot;buffer&quot;, &quot;git:staged&quot;}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more examples, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/wiki/Examples-and-Tips&quot;&gt;examples wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;To set up the environment:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
cd CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Install development dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install pre-commit hooks
make install-pre-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create your feature branch&lt;/li&gt; 
 &lt;li&gt;Make your changes&lt;/li&gt; 
 &lt;li&gt;Run tests and lint checks&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gptlang&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/121417512?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;gptlang&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;gptlang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://productsway.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/870029?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dung Duc Huynh (Kaka)&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dung Duc Huynh (Kaka)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qoobes.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/58834655?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahmed Haracic&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ahmed Haracic&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=qoobes&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://youtube.com/@ziontee113&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/102876811?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Trí Thiện Nguyễn&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Trí Thiện Nguyễn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ziontee113&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Cassius0924&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62874592?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;He Zhizhou&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;He Zhizhou&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Cassius0924&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/guruprakashrajakkannu/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9963717?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Guruprakash Rajakkannu&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Guruprakash Rajakkannu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rguruprakash&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kristofka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/140354?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;kristofka&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;kristofka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kristofka&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PostCyberPunk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/134976996?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;PostCyberPunk&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;PostCyberPunk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PostCyberPunk&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ktns&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1302759?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Katsuhiko Nishimra&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Katsuhiko Nishimra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ktns&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/errnoh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/373946?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Erno Hopearuoho&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Erno Hopearuoho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=errnoh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shaungarwood&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4156525?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shaun Garwood&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shaun Garwood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=shaungarwood&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/neutrinoA4&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/122616073?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;neutrinoA4&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;neutrinoA4&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/banjocat&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3247309?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jack Muratore&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jack Muratore&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=banjocat&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AdrielVelazquez&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3443378?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Adriel Velazquez&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adriel Velazquez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/deathbeam&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5115805?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomas Slusny&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tomas Slusny&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://nisalvd.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30633436?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nisal&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nisal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nisalVD&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.gaardhus.dk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46934916?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tobias Gårdhus&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tobias Gårdhus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gaardhus&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.patreon.com/PetrDlouhy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/156755?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Petr Dlouhý&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Petr Dlouhý&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PetrDlouhy&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.dylanmadisetti.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2689338?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dylan Madisetti&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dylan Madisetti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dmadisetti&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/aweis89&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5186956?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaron Weisberg&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aaron Weisberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tlacuilose&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65783495?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jose Tlacuilo&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jose Tlacuilo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://kevintraver.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/196406?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kevin Traver&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kevin Traver&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/D7ry&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/92609548?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;dTry&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;dTry&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=D7ry&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://blog.ornew.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19766770?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Arata Furukawa&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Arata Furukawa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ornew&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lingjie00&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64540764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ling&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ling&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lingjie00&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/frolvanya&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/59515280?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ivan Frolov&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ivan Frolov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=frolvanya&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.folkelemaitre.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/292349?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Folke Lemaitre&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Folke Lemaitre&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/GitMurf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64155612?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;GitMurf&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;GitMurf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=GitMurf&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://dimalip.in&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6877858?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dmitrii Lipin&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dmitrii Lipin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=festeh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nvimer.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/41784264?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;jinzhongjia&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;jinzhongjia&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jinzhongjia&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/guill&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3157454?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;guill&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;guill&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=guill&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sjonpaulbrown-cc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/81941908?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sjon-Paul Brown&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sjon-Paul Brown&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=sjonpaulbrown-cc&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/renxzen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13023797?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Renzo Mondragón&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Renzo Mondragón&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/fjchen7&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10106636?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;fjchen7&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;fjchen7&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=fjchen7&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/radwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/184065?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Radosław Woźniak&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Radosław Woźniak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=radwo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/JakubPecenka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/87969308?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JakubPecenka&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JakubPecenka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=JakubPecenka&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/thomastthai&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16532581?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;thomastthai&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;thomastthai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=thomastthai&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://lisk.in/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/300342?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomáš Janoušek&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tomáš Janoušek&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=liskin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Moriango&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43554061?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Toddneal Stallworth&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Toddneal Stallworth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Moriango&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/taketwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1241736?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sergey Alexandrov&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sergey Alexandrov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=taketwo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lemeb&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7331643?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Léopold Mebazaa&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Léopold Mebazaa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lemeb&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://atko.space&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14937572?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JunKi Jin&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JunKi Jin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=atkodev&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/abdennourzahaf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62243290?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;abdennourzahaf&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;abdennourzahaf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=abdennourzahaf&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/josiahdenton&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44758384?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Josiah&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Josiah&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=josiahdenton&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tku137&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3052212?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tony Fischer&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tony Fischer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qiita.com/program3152019&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64008205?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kohei Wada&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kohei Wada&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Kohei-Wada&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://zags.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/79172513?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sebastian Yaghoubi&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sebastian Yaghoubi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=syaghoubi00&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/johncming&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11719334?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;johncming&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;johncming&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=johncming&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dzonatan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5166666?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rokas Brazdžionis&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rokas Brazdžionis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dzonatan&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/unlimitedsola&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3632663?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sola&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sola&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ThisIsMani&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/84711804?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mani Chandra&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mani Chandra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ThisIsMani&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; 
&lt;h1&gt;Stargazers&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg?variant=adaptive&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>beyond-all-reason/Beyond-All-Reason</title>
      <link>https://github.com/beyond-all-reason/Beyond-All-Reason</link>
      <description>&lt;p&gt;Main game repository for Beyond All Reason.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beyond-All-Reason&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/discord/225695362004811776&quot; alt=&quot;Discord&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Open source RTS game built on top of the Recoil RTS Engine&lt;/p&gt; 
&lt;h2&gt;Where to download&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download&quot;&gt;https://www.beyondallreason.info/download&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;How to play&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/guides&quot;&gt;https://www.beyondallreason.info/guides&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development Quick Start&lt;/h2&gt; 
&lt;p&gt;Beyond All Reason (BAR), consists of 2 primary components, the lobby (Chobby - &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby&quot;&gt;https://github.com/beyond-all-reason/BYAR-Chobby&lt;/a&gt;) and the game code itself (this repository).&lt;/p&gt; 
&lt;p&gt;The game runs on top of the Recoil engine &lt;a href=&quot;https://github.com/beyond-all-reason/spring&quot;&gt;https://github.com/beyond-all-reason/spring&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In order to develop the game (this repository) you first need a working install of the lobby/launcher. There are 2 ways to do this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download#How-To-Install&quot;&gt;Download the full BAR application&lt;/a&gt; from the website and run it. This is probably what you will have done if you have previously installed and played the game.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OR if you want to develop the lobby client, follow &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;the guide in the Chobby README&lt;/a&gt;. First download a &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby/releases&quot;&gt;release of Chobby&lt;/a&gt; and then launch Chobby, this will automatically download and install the engine and other dependencies.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Once you have a working install of BAR you need a local development copy of the game code to work with. This code will live in the BAR install directory.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;To find the BAR install directory simply open the launcher (not full game) and click the &quot;Open install directory&quot; button. This is one of the 3 buttons (&lt;code&gt;Toggle log&lt;/code&gt; and &lt;code&gt;Upload log&lt;/code&gt; are the other 2). For Windows installs this might be your user&#39;s &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory create the empty file &lt;code&gt;devmode.txt&lt;/code&gt;. E.g: &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data/devmode.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory in the &lt;code&gt;data&lt;/code&gt; folder in the &lt;code&gt;games&lt;/code&gt; sub-directory (create &lt;code&gt;games&lt;/code&gt; if it doesn&#39;t exist) clone the code for this repository into a directory with a name ending in &lt;code&gt;.sdd&lt;/code&gt;. For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/beyond-all-reason/Beyond-All-Reason.git BAR.sdd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure that you have the correct path by looking for the file &lt;code&gt;Beyond-All-Reason/data/games/BAR.sdd/modinfo.lua&lt;/code&gt;&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Now you have the game code launch the full game from the launcher as normal. Then go to &lt;code&gt;Settings &amp;gt; Developer &amp;gt; Singleplayer&lt;/code&gt; and select &lt;code&gt;Beyond All Reason Dev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch a match normally through the game UI. This match will use the dev copy of the LUA code which is in &lt;code&gt;BAR-install-directory/data/games/BAR.sdd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If developing Chobby also clone the code into the &lt;code&gt;games&lt;/code&gt; directory. Follow the guide in the &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;Chobby README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;More on the &lt;code&gt;.sdd&lt;/code&gt; directory to run raw LUA and the structure expected by Spring Engine is &lt;a href=&quot;https://springrts.com/wiki/Gamedev:Structure&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NeogitOrg/neogit</title>
      <link>https://github.com/NeogitOrg/neogit</link>
      <description>&lt;p&gt;An interactive and powerful Git interface for Neovim, inspired by Magit&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   &lt;img src=&quot;https://github.com/NeogitOrg/neogit/assets/7228095/7684545f-47b5-40e2-aedd-ccf56e0553f4&quot; width=&quot;400px&quot;&gt;
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;h1&gt;Neogit&lt;/h1&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;strong&gt;A git interface for &lt;a href=&quot;https://neovim.io&quot;&gt;Neovim&lt;/a&gt;, inspired by &lt;a href=&quot;https://magit.vc&quot;&gt;Magit&lt;/a&gt;.&lt;/strong&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;p&gt;&lt;a href=&quot;http://www.lua.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&quot; alt=&quot;Lua&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://neovim.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim%200.10+-green.svg?style=for-the-badge&amp;amp;logo=neovim&quot; alt=&quot;Neovim&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/MIT-yellow.svg?style=for-the-badge&quot; alt=&quot;MIT&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/NeogitOrg/neogit&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/NeogitOrg/neogit/shield?style=for-the-badge&quot;&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/NeogitOrg/neogit/assets/7228095/d964cbb4-a557-4e97-ac5b-ea571a001f5c&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Here&#39;s an example spec for &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;Lazy&lt;/a&gt;, but you&#39;re free to use whichever plugin manager suits you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;NeogitOrg/neogit&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,         -- required
    &quot;sindrets/diffview.nvim&quot;,        -- optional - Diff integration

    -- Only one of these is needed.
    &quot;nvim-telescope/telescope.nvim&quot;, -- optional
    &quot;ibhagwan/fzf-lua&quot;,              -- optional
    &quot;echasnovski/mini.pick&quot;,         -- optional
  },
  config = true
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re not using lazy, you&#39;ll need to require and setup the plugin like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- init.lua
local neogit = require(&#39;neogit&#39;)
neogit.setup {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch will always be compatible with the latest &lt;strong&gt;stable&lt;/strong&gt; release of Neovim, and usually with the latest &lt;strong&gt;nightly&lt;/strong&gt; build as well.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;You can configure neogit by running the &lt;code&gt;neogit.setup()&lt;/code&gt; function, passing a table as the argument.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default Config&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local neogit = require(&quot;neogit&quot;)

neogit.setup {
  -- Hides the hints at the top of the status buffer
  disable_hint = false,
  -- Disables changing the buffer highlights based on where the cursor is.
  disable_context_highlighting = false,
  -- Disables signs for sections/items/hunks
  disable_signs = false,
  -- Offer to force push when branches diverge
  prompt_force_push = true,
  -- Changes what mode the Commit Editor starts in. `true` will leave nvim in normal mode, `false` will change nvim to
  -- insert mode, and `&quot;auto&quot;` will change nvim to insert mode IF the commit message is empty, otherwise leaving it in
  -- normal mode.
  disable_insert_on_commit = &quot;auto&quot;,
  -- When enabled, will watch the `.git/` directory for changes and refresh the status buffer in response to filesystem
  -- events.
  filewatcher = {
    interval = 1000,
    enabled = true,
  },
  -- &quot;ascii&quot;   is the graph the git CLI generates
  -- &quot;unicode&quot; is the graph like https://github.com/rbong/vim-flog
  -- &quot;kitty&quot;   is the graph like https://github.com/isakbm/gitgraph.nvim - use https://github.com/rbong/flog-symbols if you don&#39;t use Kitty
  graph_style = &quot;ascii&quot;,
  -- Show relative date by default. When set, use `strftime` to display dates
  commit_date_format = nil,
  log_date_format = nil,
  -- Show message with spinning animation when a git command is running.
  process_spinner = false,
  -- Used to generate URL&#39;s for branch popup action &quot;pull request&quot;.
  git_services = {
    [&quot;github.com&quot;] = &quot;https://github.com/${owner}/${repository}/compare/${branch_name}?expand=1&quot;,
    [&quot;bitbucket.org&quot;] = &quot;https://bitbucket.org/${owner}/${repository}/pull-requests/new?source=${branch_name}&amp;amp;t=1&quot;,
    [&quot;gitlab.com&quot;] = &quot;https://gitlab.com/${owner}/${repository}/merge_requests/new?merge_request[source_branch]=${branch_name}&quot;,
    [&quot;azure.com&quot;] = &quot;https://dev.azure.com/${owner}/_git/${repository}/pullrequestcreate?sourceRef=${branch_name}&amp;amp;targetRef=${target}&quot;,
  },
  -- Allows a different telescope sorter. Defaults to &#39;fuzzy_with_index_bias&#39;. The example below will use the native fzf
  -- sorter instead. By default, this function returns `nil`.
  telescope_sorter = function()
    return require(&quot;telescope&quot;).extensions.fzf.native_fzf_sorter()
  end,
  -- Persist the values of switches/options within and across sessions
  remember_settings = true,
  -- Scope persisted settings on a per-project basis
  use_per_project_settings = true,
  -- Table of settings to never persist. Uses format &quot;Filetype--cli-value&quot;
  ignored_settings = {
    &quot;NeogitPushPopup--force-with-lease&quot;,
    &quot;NeogitPushPopup--force&quot;,
    &quot;NeogitPullPopup--rebase&quot;,
    &quot;NeogitCommitPopup--allow-empty&quot;,
    &quot;NeogitRevertPopup--no-edit&quot;,
  },
  -- Configure highlight group features
  highlight = {
    italic = true,
    bold = true,
    underline = true
  },
  -- Set to false if you want to be responsible for creating _ALL_ keymappings
  use_default_keymaps = true,
  -- Neogit refreshes its internal state after specific events, which can be expensive depending on the repository size.
  -- Disabling `auto_refresh` will make it so you have to manually refresh the status after you open it.
  auto_refresh = true,
  -- Value used for `--sort` option for `git branch` command
  -- By default, branches will be sorted by commit date descending
  -- Flag description: https://git-scm.com/docs/git-branch#Documentation/git-branch.txt---sortltkeygt
  -- Sorting keys: https://git-scm.com/docs/git-for-each-ref#_options
  sort_branches = &quot;-committerdate&quot;,
  -- Default for new branch name prompts
  initial_branch_name = &quot;&quot;,
  -- Change the default way of opening neogit
  kind = &quot;tab&quot;,
  -- Disable line numbers
  disable_line_numbers = true,
  -- Disable relative line numbers
  disable_relative_line_numbers = true,
  -- The time after which an output console is shown for slow running commands
  console_timeout = 2000,
  -- Automatically show console if a command takes more than console_timeout milliseconds
  auto_show_console = true,
  -- Automatically close the console if the process exits with a 0 (success) status
  auto_close_console = true,
  notification_icon = &quot;󰊢&quot;,
  status = {
    show_head_commit_hash = true,
    recent_commit_count = 10,
    HEAD_padding = 10,
    HEAD_folded = false,
    mode_padding = 3,
    mode_text = {
      M = &quot;modified&quot;,
      N = &quot;new file&quot;,
      A = &quot;added&quot;,
      D = &quot;deleted&quot;,
      C = &quot;copied&quot;,
      U = &quot;updated&quot;,
      R = &quot;renamed&quot;,
      DD = &quot;unmerged&quot;,
      AU = &quot;unmerged&quot;,
      UD = &quot;unmerged&quot;,
      UA = &quot;unmerged&quot;,
      DU = &quot;unmerged&quot;,
      AA = &quot;unmerged&quot;,
      UU = &quot;unmerged&quot;,
      [&quot;?&quot;] = &quot;&quot;,
    },
  },
  commit_editor = {
    kind = &quot;tab&quot;,
    show_staged_diff = true,
    -- Accepted values:
    -- &quot;split&quot; to show the staged diff below the commit editor
    -- &quot;vsplit&quot; to show it to the right
    -- &quot;split_above&quot; Like :top split
    -- &quot;vsplit_left&quot; like :vsplit, but open to the left
    -- &quot;auto&quot; &quot;vsplit&quot; if window would have 80 cols, otherwise &quot;split&quot;
    staged_diff_split_kind = &quot;split&quot;,
    spell_check = true,
  },
  commit_select_view = {
    kind = &quot;tab&quot;,
  },
  commit_view = {
    kind = &quot;vsplit&quot;,
    verify_commit = vim.fn.executable(&quot;gpg&quot;) == 1, -- Can be set to true or false, otherwise we try to find the binary
  },
  log_view = {
    kind = &quot;tab&quot;,
  },
  rebase_editor = {
    kind = &quot;auto&quot;,
  },
  reflog_view = {
    kind = &quot;tab&quot;,
  },
  merge_editor = {
    kind = &quot;auto&quot;,
  },
  description_editor = {
    kind = &quot;auto&quot;,
  },
  tag_editor = {
    kind = &quot;auto&quot;,
  },
  preview_buffer = {
    kind = &quot;floating_console&quot;,
  },
  popup = {
    kind = &quot;split&quot;,
  },
  stash = {
    kind = &quot;tab&quot;,
  },
  refs_view = {
    kind = &quot;tab&quot;,
  },
  signs = {
    -- { CLOSED, OPENED }
    hunk = { &quot;&quot;, &quot;&quot; },
    item = { &quot;&amp;gt;&quot;, &quot;v&quot; },
    section = { &quot;&amp;gt;&quot;, &quot;v&quot; },
  },
  -- Each Integration is auto-detected through plugin presence, however, it can be disabled by setting to `false`
  integrations = {
    -- If enabled, use telescope for menu selection rather than vim.ui.select.
    -- Allows multi-select and some things that vim.ui.select doesn&#39;t.
    telescope = nil,
    -- Neogit only provides inline diffs. If you want a more traditional way to look at diffs, you can use `diffview`.
    -- The diffview integration enables the diff popup.
    --
    -- Requires you to have `sindrets/diffview.nvim` installed.
    diffview = nil,

    -- If enabled, uses fzf-lua for menu selection. If the telescope integration
    -- is also selected then telescope is used instead
    -- Requires you to have `ibhagwan/fzf-lua` installed.
    fzf_lua = nil,

    -- If enabled, uses mini.pick for menu selection. If the telescope integration
    -- is also selected then telescope is used instead
    -- Requires you to have `echasnovski/mini.pick` installed.
    mini_pick = nil,
  },
  sections = {
    -- Reverting/Cherry Picking
    sequencer = {
      folded = false,
      hidden = false,
    },
    untracked = {
      folded = false,
      hidden = false,
    },
    unstaged = {
      folded = false,
      hidden = false,
    },
    staged = {
      folded = false,
      hidden = false,
    },
    stashes = {
      folded = true,
      hidden = false,
    },
    unpulled_upstream = {
      folded = true,
      hidden = false,
    },
    unmerged_upstream = {
      folded = false,
      hidden = false,
    },
    unpulled_pushRemote = {
      folded = true,
      hidden = false,
    },
    unmerged_pushRemote = {
      folded = false,
      hidden = false,
    },
    recent = {
      folded = true,
      hidden = false,
    },
    rebase = {
      folded = true,
      hidden = false,
    },
  },
  mappings = {
    commit_editor = {
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
      [&quot;&amp;lt;m-p&amp;gt;&quot;] = &quot;PrevMessage&quot;,
      [&quot;&amp;lt;m-n&amp;gt;&quot;] = &quot;NextMessage&quot;,
      [&quot;&amp;lt;m-r&amp;gt;&quot;] = &quot;ResetMessage&quot;,
    },
    commit_editor_I = {
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
    },
    rebase_editor = {
      [&quot;p&quot;] = &quot;Pick&quot;,
      [&quot;r&quot;] = &quot;Reword&quot;,
      [&quot;e&quot;] = &quot;Edit&quot;,
      [&quot;s&quot;] = &quot;Squash&quot;,
      [&quot;f&quot;] = &quot;Fixup&quot;,
      [&quot;x&quot;] = &quot;Execute&quot;,
      [&quot;d&quot;] = &quot;Drop&quot;,
      [&quot;b&quot;] = &quot;Break&quot;,
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;OpenCommit&quot;,
      [&quot;gk&quot;] = &quot;MoveUp&quot;,
      [&quot;gj&quot;] = &quot;MoveDown&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
      [&quot;[c&quot;] = &quot;OpenOrScrollUp&quot;,
      [&quot;]c&quot;] = &quot;OpenOrScrollDown&quot;,
    },
    rebase_editor_I = {
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
    },
    finder = {
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;Select&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;c-n&amp;gt;&quot;] = &quot;Next&quot;,
      [&quot;&amp;lt;c-p&amp;gt;&quot;] = &quot;Previous&quot;,
      [&quot;&amp;lt;down&amp;gt;&quot;] = &quot;Next&quot;,
      [&quot;&amp;lt;up&amp;gt;&quot;] = &quot;Previous&quot;,
      [&quot;&amp;lt;tab&amp;gt;&quot;] = &quot;InsertCompletion&quot;,
      [&quot;&amp;lt;space&amp;gt;&quot;] = &quot;MultiselectToggleNext&quot;,
      [&quot;&amp;lt;s-space&amp;gt;&quot;] = &quot;MultiselectTogglePrevious&quot;,
      [&quot;&amp;lt;c-j&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;ScrollWheelDown&amp;gt;&quot;] = &quot;ScrollWheelDown&quot;,
      [&quot;&amp;lt;ScrollWheelUp&amp;gt;&quot;] = &quot;ScrollWheelUp&quot;,
      [&quot;&amp;lt;ScrollWheelLeft&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;ScrollWheelRight&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;LeftMouse&amp;gt;&quot;] = &quot;MouseClick&quot;,
      [&quot;&amp;lt;2-LeftMouse&amp;gt;&quot;] = &quot;NOP&quot;,
    },
    -- Setting any of these to `false` will disable the mapping.
    popup = {
      [&quot;?&quot;] = &quot;HelpPopup&quot;,
      [&quot;A&quot;] = &quot;CherryPickPopup&quot;,
      [&quot;d&quot;] = &quot;DiffPopup&quot;,
      [&quot;M&quot;] = &quot;RemotePopup&quot;,
      [&quot;P&quot;] = &quot;PushPopup&quot;,
      [&quot;X&quot;] = &quot;ResetPopup&quot;,
      [&quot;Z&quot;] = &quot;StashPopup&quot;,
      [&quot;i&quot;] = &quot;IgnorePopup&quot;,
      [&quot;t&quot;] = &quot;TagPopup&quot;,
      [&quot;b&quot;] = &quot;BranchPopup&quot;,
      [&quot;B&quot;] = &quot;BisectPopup&quot;,
      [&quot;w&quot;] = &quot;WorktreePopup&quot;,
      [&quot;c&quot;] = &quot;CommitPopup&quot;,
      [&quot;f&quot;] = &quot;FetchPopup&quot;,
      [&quot;l&quot;] = &quot;LogPopup&quot;,
      [&quot;m&quot;] = &quot;MergePopup&quot;,
      [&quot;p&quot;] = &quot;PullPopup&quot;,
      [&quot;r&quot;] = &quot;RebasePopup&quot;,
      [&quot;v&quot;] = &quot;RevertPopup&quot;,
    },
    status = {
      [&quot;j&quot;] = &quot;MoveDown&quot;,
      [&quot;k&quot;] = &quot;MoveUp&quot;,
      [&quot;o&quot;] = &quot;OpenTree&quot;,
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;I&quot;] = &quot;InitRepo&quot;,
      [&quot;1&quot;] = &quot;Depth1&quot;,
      [&quot;2&quot;] = &quot;Depth2&quot;,
      [&quot;3&quot;] = &quot;Depth3&quot;,
      [&quot;4&quot;] = &quot;Depth4&quot;,
      [&quot;Q&quot;] = &quot;Command&quot;,
      [&quot;&amp;lt;tab&amp;gt;&quot;] = &quot;Toggle&quot;,
      [&quot;x&quot;] = &quot;Discard&quot;,
      [&quot;s&quot;] = &quot;Stage&quot;,
      [&quot;S&quot;] = &quot;StageUnstaged&quot;,
      [&quot;&amp;lt;c-s&amp;gt;&quot;] = &quot;StageAll&quot;,
      [&quot;u&quot;] = &quot;Unstage&quot;,
      [&quot;K&quot;] = &quot;Untrack&quot;,
      [&quot;U&quot;] = &quot;UnstageStaged&quot;,
      [&quot;y&quot;] = &quot;ShowRefs&quot;,
      [&quot;$&quot;] = &quot;CommandHistory&quot;,
      [&quot;Y&quot;] = &quot;YankSelected&quot;,
      [&quot;&amp;lt;c-r&amp;gt;&quot;] = &quot;RefreshBuffer&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;GoToFile&quot;,
      [&quot;&amp;lt;s-cr&amp;gt;&quot;] = &quot;PeekFile&quot;,
      [&quot;&amp;lt;c-v&amp;gt;&quot;] = &quot;VSplitOpen&quot;,
      [&quot;&amp;lt;c-x&amp;gt;&quot;] = &quot;SplitOpen&quot;,
      [&quot;&amp;lt;c-t&amp;gt;&quot;] = &quot;TabOpen&quot;,
      [&quot;{&quot;] = &quot;GoToPreviousHunkHeader&quot;,
      [&quot;}&quot;] = &quot;GoToNextHunkHeader&quot;,
      [&quot;[c&quot;] = &quot;OpenOrScrollUp&quot;,
      [&quot;]c&quot;] = &quot;OpenOrScrollDown&quot;,
      [&quot;&amp;lt;c-k&amp;gt;&quot;] = &quot;PeekUp&quot;,
      [&quot;&amp;lt;c-j&amp;gt;&quot;] = &quot;PeekDown&quot;,
      [&quot;&amp;lt;c-n&amp;gt;&quot;] = &quot;NextSection&quot;,
      [&quot;&amp;lt;c-p&amp;gt;&quot;] = &quot;PreviousSection&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;You can either open Neogit by using the &lt;code&gt;Neogit&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:Neogit             &quot; Open the status buffer in a new tab
:Neogit cwd=&amp;lt;cwd&amp;gt;   &quot; Use a different repository path
:Neogit cwd=%:p:h   &quot; Uses the repository of the current file
:Neogit kind=&amp;lt;kind&amp;gt; &quot; Open specified popup directly
:Neogit commit      &quot; Open commit popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or using the lua api:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local neogit = require(&#39;neogit&#39;)

-- open using defaults
neogit.open()

-- open a specific popup
neogit.open({ &quot;commit&quot; })

-- open as a split
neogit.open({ kind = &quot;split&quot; })

-- open with different project
neogit.open({ cwd = &quot;~&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;kind&lt;/code&gt; option can be one of the following values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tab&lt;/code&gt; (default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_above&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_above_all&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_below&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_below_all&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vsplit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;floating&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;auto&lt;/code&gt; (&lt;code&gt;vsplit&lt;/code&gt; if window would have 80 cols, otherwise &lt;code&gt;split&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Popups&lt;/h2&gt; 
&lt;p&gt;The following popup menus are available from all buffers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bisect&lt;/li&gt; 
 &lt;li&gt;Branch + Branch Config&lt;/li&gt; 
 &lt;li&gt;Cherry Pick&lt;/li&gt; 
 &lt;li&gt;Commit&lt;/li&gt; 
 &lt;li&gt;Diff&lt;/li&gt; 
 &lt;li&gt;Fetch&lt;/li&gt; 
 &lt;li&gt;Ignore&lt;/li&gt; 
 &lt;li&gt;Log&lt;/li&gt; 
 &lt;li&gt;Merge&lt;/li&gt; 
 &lt;li&gt;Pull&lt;/li&gt; 
 &lt;li&gt;Push&lt;/li&gt; 
 &lt;li&gt;Rebase&lt;/li&gt; 
 &lt;li&gt;Remote + Remote Config&lt;/li&gt; 
 &lt;li&gt;Reset&lt;/li&gt; 
 &lt;li&gt;Revert&lt;/li&gt; 
 &lt;li&gt;Stash&lt;/li&gt; 
 &lt;li&gt;Tag&lt;/li&gt; 
 &lt;li&gt;Worktree&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Many popups will use whatever is currently under the cursor or selected as input for an action. For example, to cherry-pick a range of commits from the log view, a linewise visual selection can be made, and using either &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;pick&lt;/code&gt; from the cherry-pick menu will use the selection.&lt;/p&gt; 
&lt;p&gt;This works for just about everything that has an object-ID in git, and if you find one that you think &lt;em&gt;should&lt;/em&gt; work but doesn&#39;t, open an issue :)&lt;/p&gt; 
&lt;h2&gt;Highlight Groups&lt;/h2&gt; 
&lt;p&gt;See the built-in documentation for a comprehensive list of highlight groups. If your theme doesn&#39;t style a particular group, we&#39;ll try our best to do a nice job.&lt;/p&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;Neogit emits the following events:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Event&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Event Data&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitStatusRefreshed&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Status has been reloaded&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitCommitComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Commit has been created&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitPushComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Push has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitPullComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pull has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitFetchComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetch has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchCreate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was created, starting from &lt;code&gt;base&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, base: string? }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchDelete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was deleted&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchCheckout&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was checked out&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was reset to a commit/branch&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, resetting_to: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchRename&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was renamed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, new_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitRebase&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A rebase finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commit: string, status: &quot;ok&quot;|&quot;conflict&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A branch was reset to a certain commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commit: string, mode: &quot;soft&quot;|&quot;mixed&quot;|&quot;hard&quot;|&quot;keep&quot;|&quot;index&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitTagCreate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A tag was placed on a certain commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ name: string, ref: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitTagDelete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A tag was removed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitCherryPick&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;One or more commits were cherry-picked&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commits: string[] }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitMerge&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A merge finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch: string, args = string[], status: &quot;ok&quot;|&quot;conflict&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitStash&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A stash finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ success: boolean }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;Neogit follows semantic versioning.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/NeogitOrg/neogit/raw/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kolja&quot;&gt;kolja&lt;/a&gt; for the Neogit Logo&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; for the &quot;kitty&quot; git graph renderer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rbong/vim-flog&quot;&gt;vim-flog&lt;/a&gt; for the &quot;unicode&quot; git graph renderer&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LuaLS/lua-language-server</title>
      <link>https://github.com/LuaLS/lua-language-server</link>
      <description>&lt;p&gt;A language server that offers Lua language support - programmed in Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lua-language-server&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/LuaLS/lua-language-server/.github%2Fworkflows%2Fbuild.yml&quot; alt=&quot;build&quot;&gt; &lt;img src=&quot;https://img.shields.io/visual-studio-marketplace/v/sumneko.lua&quot; alt=&quot;Version (including pre-releases)&quot;&gt; &lt;img src=&quot;https://img.shields.io/visual-studio-marketplace/i/sumneko.lua&quot; alt=&quot;Installs&quot;&gt; &lt;img src=&quot;https://img.shields.io/visual-studio-marketplace/d/sumneko.lua&quot; alt=&quot;Downloads&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Lua development just got a whole lot better&lt;/strong&gt;&lt;/em&gt; 🧠&lt;/p&gt; 
&lt;p&gt;The Lua language server provides various language features for Lua to make development easier and faster. With nearly a million installs in Visual Studio Code, it is the most popular extension for Lua language support.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://luals.github.io&quot;&gt;See our website for more info&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚙️ Supports &lt;code&gt;Lua 5.4&lt;/code&gt;, &lt;code&gt;Lua 5.3&lt;/code&gt;, &lt;code&gt;Lua 5.2&lt;/code&gt;, &lt;code&gt;Lua 5.1&lt;/code&gt;, and &lt;code&gt;LuaJIT&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;📄 Over 20 supported &lt;a href=&quot;https://luals.github.io/wiki/annotations/&quot;&gt;annotations&lt;/a&gt; for documenting your code&lt;/li&gt; 
 &lt;li&gt;↪ Go to definition&lt;/li&gt; 
 &lt;li&gt;🦺 Dynamic &lt;a href=&quot;https://luals.github.io/wiki/type-checking/&quot;&gt;type checking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔍 Find references&lt;/li&gt; 
 &lt;li&gt;⚠️ &lt;a href=&quot;https://luals.github.io/wiki/diagnostics/&quot;&gt;Diagnostics/Warnings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🕵️ &lt;a href=&quot;https://luals.github.io/wiki/syntax-errors/&quot;&gt;Syntax checking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📝 Element renaming&lt;/li&gt; 
 &lt;li&gt;🗨️ Hover to view details on variables, functions, and more&lt;/li&gt; 
 &lt;li&gt;🖊️ Autocompletion&lt;/li&gt; 
 &lt;li&gt;📚 Support for &lt;a href=&quot;https://luals.github.io/wiki/settings/#workspacelibrary&quot;&gt;libraries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💅 &lt;a href=&quot;https://luals.github.io/wiki/formatter/&quot;&gt;Code formatting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💬 &lt;a href=&quot;https://luals.github.io/wiki/diagnostics/#spell-check&quot;&gt;Spell checking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🛠️ Custom &lt;a href=&quot;https://luals.github.io/wiki/plugins/&quot;&gt;plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 &lt;a href=&quot;https://luals.github.io/wiki/export-docs/&quot;&gt;Documentation Generation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;The language server can be installed for use in Visual Studio Code, NeoVim, and any &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/implementors/tools/&quot;&gt;other clients&lt;/a&gt; that support the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://luals.github.io/#install&quot;&gt;installation instructions on our website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://luals.github.io/#vscode-install&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/VS%20Code-Install-blue?style=for-the-badge&amp;amp;logo=visualstudiocode&quot; alt=&quot;Install in VS Code&quot; title=&quot;Install in VS Code&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://luals.github.io/#neovim-install&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/NeoVim-Install-blue?style=for-the-badge&amp;amp;logo=neovim&quot; alt=&quot;Install for NeoVim&quot; title=&quot;Install for NeoVim&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://luals.github.io/#other-install&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Other-Install-blue?style=for-the-badge&amp;amp;logo=windowsterminal&quot; alt=&quot;Other&quot; title=&quot;Install for command line&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Community Install Methods&lt;/h3&gt; 
&lt;p&gt;The install methods below are maintained by community members.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/bellini666/asdf-lua-language-server&quot;&gt;asdf plugin&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LuaLS/lua-language-server/raw/master/changelog.md&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://luals.github.io/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://luals.github.io/wiki/faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LuaLS/lua-language-server/issues&quot;&gt;Report an issue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LuaLS/lua-language-server/issues&quot;&gt;Suggest a feature&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LuaLS/lua-language-server/discussions&quot;&gt;Discuss&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you find any mistakes, please &lt;a href=&quot;https://github.com/LuaLS/lua-language-server/issues&quot;&gt;report it&lt;/a&gt; or open a &lt;a href=&quot;https://github.com/LuaLS/lua-language-server/pulls&quot;&gt;pull request&lt;/a&gt; if you have a fix of your own ❤️&lt;/p&gt; 
 &lt;p&gt;如果你发现了任何错误，请&lt;a href=&quot;https://github.com/LuaLS/lua-language-server/issues&quot;&gt;告诉我&lt;/a&gt;或使用&lt;a href=&quot;https://github.com/LuaLS/lua-language-server/pulls&quot;&gt;Pull Requests&lt;/a&gt;来直接修复。❤️&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Available Languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;en-us&lt;/code&gt; 🇺🇸&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;zh-cn&lt;/code&gt; 🇨🇳&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;zh-tw&lt;/code&gt; 🇹🇼&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pt-br&lt;/code&gt; 🇧🇷&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; All translations are provided and collaborated on by the community. If you find an inappropriate or harmful translation, &lt;a href=&quot;https://github.com/LuaLS/lua-language-server/issues&quot;&gt;please report it immediately&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Are you able to &lt;a href=&quot;https://luals.github.io/wiki/translations&quot;&gt;provide a translation&lt;/a&gt;? It would be greatly appreciated!&lt;/p&gt; 
&lt;p&gt;Thank you to &lt;a href=&quot;https://github.com/LuaLS/lua-language-server/commits/master/locale&quot;&gt;all contributors of translations&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;The language server had &lt;strong&gt;opt-in&lt;/strong&gt; telemetry that collected usage data and sent it to the development team to help improve the extension. Read our &lt;a href=&quot;https://luals.github.io/privacy#language-server&quot;&gt;privacy policy&lt;/a&gt; to learn more. Telemetry was removed in &lt;code&gt;v3.6.5&lt;/code&gt; and is no longer part of the language server.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://contrib.rocks/image?repo=sumneko/lua-language-server&quot; alt=&quot;GitHub Contributors Image&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Credit&lt;/h2&gt; 
&lt;p&gt;Software that the language server (or the development of it) uses:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actboy168/bee.lua&quot;&gt;bee.lua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actboy168/luamake&quot;&gt;luamake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sqmedeiros/lpeglabel&quot;&gt;LPegLabel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LuaLS/LuaParser&quot;&gt;LuaParser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NickeManarin/ScreenToGif&quot;&gt;ScreenToGif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/vscode-languageserver-node&quot;&gt;vscode-languageclient&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/textmate/lua.tmbundle&quot;&gt;lua.tmbundle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emmylua.github.io&quot;&gt;EmmyLua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LuaLS/lua-glob&quot;&gt;lua-glob&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LuaLS/utility&quot;&gt;utility&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actboy168/vscode-lua-doc&quot;&gt;vscode-lua-doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actboy168/json.lua&quot;&gt;json.lua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CppCXY/EmmyLuaCodeStyle&quot;&gt;EmmyLuaCodeStyle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kikito/inspect.lua&quot;&gt;inspect.lua&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ｜ AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;AI Gateway&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot;&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot;&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway – Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
