<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Objective-C Daily Trending</title>
    <description>Daily Trending of Objective-C in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:35:55 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>opa334/TrollStore</title>
      <link>https://github.com/opa334/TrollStore</link>
      <description>&lt;p&gt;Jailed iOS app that can install IPAs permanently with arbitary entitlements and root helpers because it trolls Apple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TrollStore&lt;/h1&gt; 
&lt;p&gt;TrollStore is a permasigned jailed app that can permanently install any IPA you open in it.&lt;/p&gt; 
&lt;p&gt;It works because of an AMFI/CoreTrust bug where iOS does not correctly verify code signatures of binaries in which there are multiple signers.&lt;/p&gt; 
&lt;p&gt;Supported versions: 14.0 beta 2 - 16.6.1, 16.7 RC (20H18), 17.0&lt;/p&gt; 
&lt;h2&gt;Installing TrollStore&lt;/h2&gt; 
&lt;p&gt;For installing TrollStore, refer to the guides at &lt;a href=&quot;https://ios.cfw.guide/installing-trollstore&quot;&gt;ios.cfw.guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;16.7.x (excluding 16.7 RC) and 17.0.1+ will NEVER be supported (unless a third CoreTrust bug is discovered, which is unlikely).&lt;/p&gt; 
&lt;h2&gt;Updating TrollStore&lt;/h2&gt; 
&lt;p&gt;When a new TrollStore update is available, a button to install it will appear at the top in the TrollStore settings. After tapping the button, TrollStore will automatically download the update, install it, and respring.&lt;/p&gt; 
&lt;p&gt;Alternatively (if anything goes wrong), you can download the TrollStore.tar file under Releases and open it in TrollStore, TrollStore will install the update and respring.&lt;/p&gt; 
&lt;h2&gt;Uninstalling an app&lt;/h2&gt; 
&lt;p&gt;Apps installed from TrollStore can only be uninstalled from TrollStore itself, tap an app or swipe it to the left in the &#39;Apps&#39; tab to delete it.&lt;/p&gt; 
&lt;h2&gt;Persistence Helper&lt;/h2&gt; 
&lt;p&gt;The CoreTrust bug used in TrollStore is only enough to install &quot;System&quot; apps, this is because FrontBoard has an additional security check (it calls libmis) every time before a user app is launched. Unfortunately it is not possible to install new &quot;System&quot; apps that stay through an icon cache reload. Therefore, when iOS reloads the icon cache, all TrollStore installed apps including TrollStore itself will revert back to &quot;User&quot; state and will no longer launch.&lt;/p&gt; 
&lt;p&gt;The only way to work around this is to install a persistence helper into a system app, this helper can then be used to reregister TrollStore and its installed apps as &quot;System&quot; so that they become launchable again, an option for this is available in TrollStore settings.&lt;/p&gt; 
&lt;p&gt;On jailbroken iOS 14 when TrollHelper is used for installation, it is located in /Applications and will persist as a &quot;System&quot; app through icon cache reloads, therefore TrollHelper is used as the persistence helper on iOS 14.&lt;/p&gt; 
&lt;h2&gt;URL Scheme&lt;/h2&gt; 
&lt;p&gt;As of version 1.3, TrollStore replaces the system URL scheme &quot;apple-magnifier&quot; (this is done so &quot;jailbreak&quot; detections can&#39;t detect TrollStore like they could if TrollStore had a unique URL scheme). This URL scheme can be used to install applications right from the browser, or to enable JIT from the app itself (only 2.0.12 and above), the format goes as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;apple-magnifier://install?url=&amp;lt;URL_to_IPA&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;apple-magnifier://enable-jit?bundle-id=&amp;lt;Bundle_ID&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;On devices that don&#39;t have TrollStore (1.3+) installed, this will just open the magnifier app.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The binaries inside an IPA can have arbitrary entitlements, fakesign them with ldid and the entitlements you want (&lt;code&gt;ldid -S&amp;lt;path/to/entitlements.plist&amp;gt; &amp;lt;path/to/binary&amp;gt;&lt;/code&gt;) and TrollStore will preserve the entitlements when resigning them with the fake root certificate on installation. This gives you a lot of possibilities, some of which are explained below.&lt;/p&gt; 
&lt;h3&gt;Banned entitlements&lt;/h3&gt; 
&lt;p&gt;iOS 15 on A12+ has banned the following three entitlements related to running unsigned code, these are impossible to get without a PPL bypass, apps signed with them will crash on launch.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;com.apple.private.cs.debugger&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;dynamic-codesigning&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;com.apple.private.skip-library-validation&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Unsandboxing&lt;/h3&gt; 
&lt;p&gt;Your app can run unsandboxed using one of the following entitlements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.container-required&amp;lt;/key&amp;gt;
&amp;lt;false/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-container&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-sandbox&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The third one is recommended if you still want a sandbox container for your application.&lt;/p&gt; 
&lt;p&gt;You might also need the platform-application entitlement in order for these to work properly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;platform-application&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note that the platform-application entitlement causes side effects such as some parts of the sandbox becoming tighter, so you may need additional private entitlements to circumvent that. (For example afterwards you need an exception entitlement for every single IOKit user client class you want to access).&lt;/p&gt; 
&lt;p&gt;In order for an app with &lt;code&gt;com.apple.private.security.no-sandbox&lt;/code&gt; and &lt;code&gt;platform-application&lt;/code&gt; to be able to access it&#39;s own data container, you might need the additional entitlement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.storage.AppDataContainers&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Root Helpers&lt;/h3&gt; 
&lt;p&gt;When your app is not sandboxed, you can spawn other binaries using posix_spawn, you can also spawn binaries as root with the following entitlement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.persona-mgmt&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also add your own binaries into your app bundle.&lt;/p&gt; 
&lt;p&gt;Afterwards you can use the &lt;a href=&quot;https://raw.githubusercontent.com/opa334/TrollStore/main/Shared/TSUtil.m#L79&quot;&gt;spawnRoot function in TSUtil.m&lt;/a&gt; to spawn the binary as root.&lt;/p&gt; 
&lt;h3&gt;Things that are not possible using TrollStore&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Getting proper platformization (&lt;code&gt;TF_PLATFORM&lt;/code&gt; / &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Spawning a launch daemon (Would need &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Injecting a tweak into a system process (Would need &lt;code&gt;TF_PLATFORM&lt;/code&gt;, a userland PAC bypass and a PMAP trust level bypass)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compilation&lt;/h3&gt; 
&lt;p&gt;To compile TrollStore, ensure &lt;a href=&quot;https://theos.dev/docs/installation&quot;&gt;theos&lt;/a&gt; is installed. Additionaly ensure &lt;a href=&quot;https://brew.sh/&quot;&gt;brew&lt;/a&gt; is installed and install &lt;a href=&quot;https://formulae.brew.sh/formula/libarchive&quot;&gt;libarchive&lt;/a&gt; from brew.&lt;/p&gt; 
&lt;h2&gt;Credits and Further Reading&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/alfiecg_dev/&quot;&gt;@alfiecg_dev&lt;/a&gt; - Found the CoreTrust bug that allows TrollStore to work through patchdiffing and worked on automating the bypass.&lt;/p&gt; 
&lt;p&gt;Google Threat Analysis Group - Found the CoreTrust bug as part of an in-the-wild spyware chain and reported it to Apple.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LinusHenze&quot;&gt;@LinusHenze&lt;/a&gt; - Found the installd bypass used to install TrollStore on iOS 14-15.6.1 via TrollHelperOTA, as well as the original CoreTrust bug used in TrollStore 1.0.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/rPTifU1lG7Q&quot;&gt;Fugu15 Presentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://worthdoingbadly.com/coretrust/&quot;&gt;Write-Up on the first CoreTrust bug with more information&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openid/AppAuth-iOS</title>
      <link>https://github.com/openid/AppAuth-iOS</link>
      <description>&lt;p&gt;iOS and macOS SDK for communicating with OAuth 2.0 and OpenID Connect providers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://rawgit.com/openid/AppAuth-iOS/master/appauth_lockup.svg?sanitize=true&quot; alt=&quot;AppAuth for iOS and macOS&quot;&gt; &lt;a href=&quot;https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml&quot;&gt;&lt;img src=&quot;https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml/badge.svg?event=push&quot; alt=&quot;tests&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/openid/AppAuth-iOS&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/openid/AppAuth-iOS/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?style=flat&quot; alt=&quot;SwiftPM compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/AppAuth&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/AppAuth.svg?style=flat&quot; alt=&quot;Pod Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openid/AppAuth-iOS/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/AppAuth.svg?style=flat&quot; alt=&quot;Pod License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/AppAuth&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/AppAuth.svg?style=flat&quot; alt=&quot;Pod Platform&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?style=flat&quot; alt=&quot;Catalyst compatible&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;AppAuth for iOS and macOS, and tvOS is a client SDK for communicating with &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot;&gt;OAuth 2.0&lt;/a&gt; and &lt;a href=&quot;http://openid.net/specs/openid-connect-core-1_0.html&quot;&gt;OpenID Connect&lt;/a&gt; providers. It strives to directly map the requests and responses of those specifications, while following the idiomatic style of the implementation language. In addition to mapping the raw protocol flows, convenience methods are available to assist with common tasks like performing an action with fresh tokens.&lt;/p&gt; 
&lt;p&gt;It follows the best practices set out in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252&quot;&gt;RFC 8252&amp;nbsp;- OAuth 2.0 for Native Apps&lt;/a&gt; including using &lt;code&gt;SFAuthenticationSession&lt;/code&gt; and &lt;code&gt;SFSafariViewController&lt;/code&gt; on iOS for the auth request. &lt;code&gt;UIWebView&lt;/code&gt; and &lt;code&gt;WKWebView&lt;/code&gt; are explicitly &lt;em&gt;not&lt;/em&gt; supported due to the security and usability reasons explained in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252#section-8.12&quot;&gt;Section 8.12 of RFC 8252&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It also supports the &lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot;&gt;PKCE&lt;/a&gt; extension to OAuth, which was created to secure authorization codes in public clients when custom URI scheme redirects are used. The library is friendly to other extensions (standard or otherwise), with the ability to handle additional params in all protocol requests and responses.&lt;/p&gt; 
&lt;p&gt;For tvOS, AppAuth implements &lt;a href=&quot;https://tools.ietf.org/html/rfc8628&quot;&gt;OAuth 2.0 Device Authorization Grant &lt;/a&gt; to allow for tvOS sign-ins through a secondary device.&lt;/p&gt; 
&lt;h2&gt;Specification&lt;/h2&gt; 
&lt;h3&gt;iOS&lt;/h3&gt; 
&lt;h4&gt;Supported Versions&lt;/h4&gt; 
&lt;p&gt;AppAuth supports iOS 7 and above.&lt;/p&gt; 
&lt;p&gt;iOS 9+ uses the in-app browser tab pattern (via &lt;code&gt;SFSafariViewController&lt;/code&gt;), and falls back to the system browser (mobile Safari) on earlier versions.&lt;/p&gt; 
&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; 
&lt;p&gt;Both Custom URI Schemes (all supported versions of iOS) and Universal Links (iOS 9+) can be used with the library.&lt;/p&gt; 
&lt;p&gt;In general, AppAuth can work with any authorization server that supports native apps, as documented in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252&quot;&gt;RFC 8252&lt;/a&gt;, either through custom URI scheme redirects, or universal links. Authorization servers that assume all clients are web-based, or require clients to maintain confidentiality of the client secrets may not work well.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;h4&gt;Supported Versions&lt;/h4&gt; 
&lt;p&gt;AppAuth supports macOS (OS X) 10.9 and above.&lt;/p&gt; 
&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; 
&lt;p&gt;AppAuth for macOS supports both custom schemes; a loopback HTTP redirects via a small embedded server.&lt;/p&gt; 
&lt;p&gt;In general, AppAuth can work with any authorization server that supports native apps, as documented in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252&quot;&gt;RFC 8252&lt;/a&gt;; either through custom URI schemes, or loopback HTTP redirects. Authorization servers that assume all clients are web-based, or require clients to maintain confidentiality of the client secrets may not work well.&lt;/p&gt; 
&lt;h3&gt;tvOS&lt;/h3&gt; 
&lt;h4&gt;Supported Versions&lt;/h4&gt; 
&lt;p&gt;AppAuth supports tvOS 9.0 and above. Please note that while it is possible to run the standard AppAuth library on tvOS, the documentation below describes implementing &lt;a href=&quot;https://tools.ietf.org/html/rfc8628&quot;&gt;OAuth 2.0 Device Authorization Grant&lt;/a&gt; (AppAuthTV).&lt;/p&gt; 
&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; 
&lt;p&gt;AppAuthTV is designed for servers that support the device authorization flow as documented in &lt;a href=&quot;https://tools.ietf.org/html/rfc8628&quot;&gt;RFC 8628&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Try&lt;/h2&gt; 
&lt;p&gt;Want to try out AppAuth? Just run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod try AppAuth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Follow the instructions in &lt;a href=&quot;https://raw.githubusercontent.com/openid/AppAuth-iOS/master/Examples/README.md&quot;&gt;Examples/README.md&lt;/a&gt; to configure with your own OAuth client (you need to update three configuration points with your client info to try the demo).&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;AppAuth supports four options for dependency management.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;With &lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html&quot;&gt;CocoaPods&lt;/a&gt;, add the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod &#39;AppAuth&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;TV&lt;/code&gt; subspec:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod &#39;AppAuth/TV&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;With &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;, add the following &lt;code&gt;dependency&lt;/code&gt; to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/openid/AppAuth-iOS.git&quot;, .upToNextMajor(from: &quot;1.3.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;AppAuthTV&lt;/code&gt; target.&lt;/p&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;With &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;openid/AppAuth-iOS&quot; &quot;master&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run &lt;code&gt;carthage bootstrap&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;AppAuthTV&lt;/code&gt; framework.&lt;/p&gt; 
&lt;h3&gt;Static Library&lt;/h3&gt; 
&lt;p&gt;You can also use AppAuth as a static library. This requires linking the library and your project, and including the headers. Here is a suggested configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create an Xcode Workspace.&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;AppAuth.xcodeproj&lt;/code&gt; to your Workspace.&lt;/li&gt; 
 &lt;li&gt;Include libAppAuth as a linked library for your target (in the &quot;General -&amp;gt; Linked Framework and Libraries&quot; section of your target).&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;AppAuth-iOS/Source&lt;/code&gt; to your search paths of your target (&quot;Build Settings -&amp;gt; &quot;Header Search Paths&quot;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;Note: There is no static library for AppAuthTV.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Auth Flow&lt;/h2&gt; 
&lt;p&gt;AppAuth supports both manual interaction with the authorization server where you need to perform your own token exchanges, as well as convenience methods that perform some of this logic for you. This example uses the convenience method, which returns either an &lt;code&gt;OIDAuthState&lt;/code&gt; object, or an error.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;OIDAuthState&lt;/code&gt; is a class that keeps track of the authorization and token requests and responses, and provides a convenience method to call an API with fresh tokens. This is the only object that you need to serialize to retain the authorization state of the session.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;You can configure AppAuth by specifying the endpoints directly:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *authorizationEndpoint =
    [NSURL URLWithString:@&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;];
NSURL *tokenEndpoint =
    [NSURL URLWithString:@&quot;https://www.googleapis.com/oauth2/v4/token&quot;];

OIDServiceConfiguration *configuration =
    [[OIDServiceConfiguration alloc]
        initWithAuthorizationEndpoint:authorizationEndpoint
                        tokenEndpoint:tokenEndpoint];

// perform the auth request...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let authorizationEndpoint = URL(string: &quot;https://accounts.google.com/o/oauth2/v2/auth&quot;)!
let tokenEndpoint = URL(string: &quot;https://www.googleapis.com/oauth2/v4/token&quot;)!
let configuration = OIDServiceConfiguration(authorizationEndpoint: authorizationEndpoint,
                                            tokenEndpoint: tokenEndpoint)

// perform the auth request...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *deviceAuthorizationEndpoint =
    [NSURL URLWithString:@&quot;https://oauth2.googleapis.com/device/code&quot;];
NSURL *tokenEndpoint =
    [NSURL URLWithString:@&quot;https://www.googleapis.com/oauth2/v4/token&quot;];

OIDTVServiceConfiguration *configuration =
    [[OIDTVServiceConfiguration alloc]
        initWithDeviceAuthorizationEndpoint:deviceAuthorizationEndpoint
                              tokenEndpoint:tokenEndpoint];

// perform the auth request...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or through discovery:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *issuer = [NSURL URLWithString:@&quot;https://accounts.google.com&quot;];

[OIDAuthorizationService discoverServiceConfigurationForIssuer:issuer
    completion:^(OIDServiceConfiguration *_Nullable configuration,
                 NSError *_Nullable error) {

  if (!configuration) {
    NSLog(@&quot;Error retrieving discovery document: %@&quot;,
          [error localizedDescription]);
    return;
  }

  // perform the auth request...
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let issuer = URL(string: &quot;https://accounts.google.com&quot;)!

// discovers endpoints
OIDAuthorizationService.discoverConfiguration(forIssuer: issuer) { configuration, error in
  guard let config = configuration else {
    print(&quot;Error retrieving discovery document: \(error?.localizedDescription ?? &quot;Unknown error&quot;)&quot;)
    return
  }

  // perform the auth request...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *issuer = [NSURL URLWithString:@&quot;https://accounts.google.com&quot;];

[OIDTVAuthorizationService discoverServiceConfigurationForIssuer:issuer
    completion:^(OIDTVServiceConfiguration *_Nullable configuration,
                 NSError *_Nullable error) {

  if (!configuration) {
    NSLog(@&quot;Error retrieving discovery document: %@&quot;,
          [error localizedDescription]);
    return;
  }

  // perform the auth request...
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authorizing –&amp;nbsp;iOS&lt;/h3&gt; 
&lt;p&gt;First, you need to have a property in your &lt;code&gt;UIApplicationDelegate&lt;/code&gt; implementation to hold the session, in order to continue the authorization flow from the redirect. In this example, the implementation of this delegate is a class named &lt;code&gt;AppDelegate&lt;/code&gt;, if your app&#39;s application delegate has a different name, please update the class name in samples below accordingly.&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate&amp;gt;
// property of the app&#39;s AppDelegate
@property(nonatomic, strong, nullable) id&amp;lt;OIDExternalUserAgentSession&amp;gt; currentAuthorizationFlow;
@end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class AppDelegate: UIResponder, UIApplicationDelegate {
  // property of the app&#39;s AppDelegate
  var currentAuthorizationFlow: OIDExternalUserAgentSession?
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And your main class, a property to store the auth state:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// property of the containing class
@property(nonatomic, strong, nullable) OIDAuthState *authState;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// property of the containing class
private var authState: OIDAuthState?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, initiate the authorization request. By using the &lt;code&gt;authStateByPresentingAuthorizationRequest&lt;/code&gt; convenience method, the token exchange will be performed automatically, and everything will be protected with PKCE (if the server supports it). AppAuth also lets you perform these requests manually. See the &lt;code&gt;authNoCodeExchange&lt;/code&gt; method in the included Example app for a demonstration:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// builds authentication request
OIDAuthorizationRequest *request =
    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration
                                                  clientId:kClientID
                                                    scopes:@[OIDScopeOpenID,
                                                             OIDScopeProfile]
                                               redirectURL:kRedirectURI
                                              responseType:OIDResponseTypeCode
                                      additionalParameters:nil];

// performs authentication request
AppDelegate *appDelegate =
    (AppDelegate *)[UIApplication sharedApplication].delegate;
appDelegate.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
        presentingViewController:self
                        callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  if (authState) {
    NSLog(@&quot;Got authorization tokens. Access token: %@&quot;,
          authState.lastTokenResponse.accessToken);
    [self setAuthState:authState];
  } else {
    NSLog(@&quot;Authorization error: %@&quot;, [error localizedDescription]);
    [self setAuthState:nil];
  }
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// builds authentication request
let request = OIDAuthorizationRequest(configuration: configuration,
                                      clientId: clientID,
                                      clientSecret: clientSecret,
                                      scopes: [OIDScopeOpenID, OIDScopeProfile],
                                      redirectURL: redirectURI,
                                      responseType: OIDResponseTypeCode,
                                      additionalParameters: nil)

// performs authentication request
print(&quot;Initiating authorization request with scope: \(request.scope ?? &quot;nil&quot;)&quot;)

let appDelegate = UIApplication.shared.delegate as! AppDelegate

appDelegate.currentAuthorizationFlow =
    OIDAuthState.authState(byPresenting: request, presenting: self) { authState, error in
  if let authState = authState {
    self.setAuthState(authState)
    print(&quot;Got authorization tokens. Access token: &quot; +
          &quot;\(authState.lastTokenResponse?.accessToken ?? &quot;nil&quot;)&quot;)
  } else {
    print(&quot;Authorization error: \(error?.localizedDescription ?? &quot;Unknown error&quot;)&quot;)
    self.setAuthState(nil)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Handling the Redirect&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The authorization response URL is returned to the app via the iOS openURL app delegate method, so you need to pipe this through to the current authorization session (created in the previous session):&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (BOOL)application:(UIApplication *)app
            openURL:(NSURL *)url
            options:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)options {
  // Sends the URL to the current authorization flow (if any) which will
  // process it if it relates to an authorization response.
  if ([_currentAuthorizationFlow resumeExternalUserAgentFlowWithURL:url]) {
    _currentAuthorizationFlow = nil;
    return YES;
  }

  // Your additional URL handling (if any) goes here.

  return NO;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func application(_ app: UIApplication,
                 open url: URL,
                 options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -&amp;gt; Bool {
  // Sends the URL to the current authorization flow (if any) which will
  // process it if it relates to an authorization response.
  if let authorizationFlow = self.currentAuthorizationFlow,
                             authorizationFlow.resumeExternalUserAgentFlow(with: url) {
    self.currentAuthorizationFlow = nil
    return true
  }

  // Your additional URL handling (if any)

  return false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authorizing –&amp;nbsp;MacOS&lt;/h3&gt; 
&lt;p&gt;On macOS, the most popular way to get the authorization response redirect is to start a local HTTP server on the loopback interface (limited to incoming requests from the user&#39;s machine only). When the authorization is complete, the user is redirected to that local server, and the authorization response can be processed by the app. AppAuth takes care of managing the local HTTP server lifecycle for you.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;h4&gt;&lt;span&gt;💡&lt;/span&gt; Alternative: Custom URI Schemes&lt;/h4&gt; 
 &lt;p&gt;Custom URI schemes are also supported on macOS, but some browsers display an interstitial, which reduces the usability. For an example on using custom URI schemes with macOS, See &lt;code&gt;Example-Mac&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To receive the authorization response using a local HTTP server, first you need to have an instance variable in your main class to retain the HTTP redirect handler:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;OIDRedirectHTTPHandler *_redirectHTTPHandler;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, as the port used by the local HTTP server varies, you need to start it before building the authorization request, in order to get the exact redirect URI to use:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;static NSString *const kSuccessURLString =
    @&quot;http://openid.github.io/AppAuth-iOS/redirect/&quot;;
NSURL *successURL = [NSURL URLWithString:kSuccessURLString];

// Starts a loopback HTTP redirect listener to receive the code.  This needs to be started first,
// as the exact redirect URI (including port) must be passed in the authorization request.
_redirectHTTPHandler = [[OIDRedirectHTTPHandler alloc] initWithSuccessURL:successURL];
NSURL *redirectURI = [_redirectHTTPHandler startHTTPListener:nil];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, initiate the authorization request. By using the &lt;code&gt;authStateByPresentingAuthorizationRequest&lt;/code&gt; convenience method, the token exchange will be performed automatically, and everything will be protected with PKCE (if the server supports it). By assigning the return value to the &lt;code&gt;OIDRedirectHTTPHandler&lt;/code&gt;&#39;s &lt;code&gt;currentAuthorizationFlow&lt;/code&gt;, the authorization will continue automatically once the user makes their choice:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// builds authentication request
OIDAuthorizationRequest *request =
    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration
                                                  clientId:kClientID
                                              clientSecret:kClientSecret
                                                    scopes:@[ OIDScopeOpenID ]
                                               redirectURL:redirectURI
                                              responseType:OIDResponseTypeCode
                                      additionalParameters:nil];
// performs authentication request
__weak __typeof(self) weakSelf = self;
_redirectHTTPHandler.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
                        callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  // Brings this app to the foreground.
  [[NSRunningApplication currentApplication]
      activateWithOptions:(NSApplicationActivateAllWindows |
                           NSApplicationActivateIgnoringOtherApps)];

  // Processes the authorization response.
  if (authState) {
    NSLog(@&quot;Got authorization tokens. Access token: %@&quot;,
          authState.lastTokenResponse.accessToken);
  } else {
    NSLog(@&quot;Authorization error: %@&quot;, error.localizedDescription);
  }
  [weakSelf setAuthState:authState];
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authorizing –&amp;nbsp;tvOS&lt;/h3&gt; 
&lt;p&gt;Ensure that your main class is a delegate of &lt;code&gt;OIDAuthStateChangeDelegate&lt;/code&gt;, &lt;code&gt;OIDAuthStateErrorDelegate&lt;/code&gt;, implement the corresponding methods, and include the following property and instance variable:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// property of the containing class
@property(nonatomic, strong, nullable) OIDAuthState *authState;

// instance variable of the containing class
OIDTVAuthorizationCancelBlock _cancelBlock;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, build and perform the authorization request.&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// builds authentication request
__weak __typeof(self) weakSelf = self;

OIDTVAuthorizationRequest *request =
    [[OIDTVAuthorizationRequest alloc] initWithConfiguration:configuration
                                                    clientId:kClientID
                                                clientSecret:kClientSecret
                                                      scopes:@[ OIDScopeOpenID, OIDScopeProfile ]
                                        additionalParameters:nil
                                           additionalHeaders:nil];

// performs authentication request
OIDTVAuthorizationInitialization initBlock =
    ^(OIDTVAuthorizationResponse *_Nullable response, NSError *_Nullable error) {
      if (response) {
        // process authorization response
        NSLog(@&quot;Got authorization response: %@&quot;, response);
      } else {
        // handle initialization error
        NSLog(@&quot;Error: %@&quot;, error);
      }
    };

OIDTVAuthorizationCompletion completionBlock =
    ^(OIDAuthState *_Nullable authState, NSError *_Nullable error) {
      weakSelf.signInView.hidden = YES;
      if (authState) {
        NSLog(@&quot;Token response: %@&quot;, authState.lastTokenResponse);
        [weakSelf setAuthState:authState];
      } else {
        NSLog(@&quot;Error: %@&quot;, error);
        [weakSelf setAuthState:nil];
      }
    };

_cancelBlock = [OIDTVAuthorizationService authorizeTVRequest:request
                                              initialization:initBlock
                                                  completion:completionBlock];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Making API Calls&lt;/h3&gt; 
&lt;p&gt;AppAuth gives you the raw token information, if you need it. However, we recommend that users of the &lt;code&gt;OIDAuthState&lt;/code&gt; convenience wrapper use the provided &lt;code&gt;performActionWithFreshTokens:&lt;/code&gt; method to perform their API calls to avoid needing to worry about token freshness:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;[_authState performActionWithFreshTokens:^(NSString *_Nonnull accessToken,
                                           NSString *_Nonnull idToken,
                                           NSError *_Nullable error) {
  if (error) {
    NSLog(@&quot;Error fetching fresh tokens: %@&quot;, [error localizedDescription]);
    return;
  }

  // perform your API request using the tokens
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let userinfoEndpoint = URL(string:&quot;https://openidconnect.googleapis.com/v1/userinfo&quot;)!
self.authState?.performAction() { (accessToken, idToken, error) in

  if error != nil  {
    print(&quot;Error fetching fresh tokens: \(error?.localizedDescription ?? &quot;Unknown error&quot;)&quot;)
    return
  }
  guard let accessToken = accessToken else {
    return
  }

  // Add Bearer token to request
  var urlRequest = URLRequest(url: userinfoEndpoint)
  urlRequest.allHTTPHeaderFields = [&quot;Authorization&quot;: &quot;Bearer \(accessToken)&quot;]

  // Perform request...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom User-Agents (iOS and macOS)&lt;/h3&gt; 
&lt;p&gt;Each OAuth flow involves presenting an external user-agent to the user, that allows them to interact with the OAuth authorization server. Typical examples of a user-agent are the user&#39;s browser, or an in-app browser tab incarnation like &lt;code&gt;ASWebAuthenticationSession&lt;/code&gt; on iOS.&lt;/p&gt; 
&lt;p&gt;AppAuth ships with several implementations of an external user-agent out of the box, including defaults for iOS and macOS suitable for most cases. The default user-agents typically share persistent cookies with the system default browser, to improve the chance that the user doesn&#39;t need to sign-in all over again.&lt;/p&gt; 
&lt;p&gt;It is possible to change the user-agent that AppAuth uses, and even write your own - all without needing to fork the library.&lt;/p&gt; 
&lt;p&gt;All implementations of the external user-agent, be they included or created by you need to conform to the &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html&quot;&gt;&lt;code&gt;OIDExternalUserAgent&lt;/code&gt;&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;p&gt;Instances of the &lt;code&gt;OIDExternalUserAgent&lt;/code&gt;are passed into &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_auth_state.html#ac762fe2bf95c116f0b437419be211fa1&quot;&gt;&lt;code&gt;OIDAuthState.authStateByPresentingAuthorizationRequest:externalUserAgent:callback&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_authorization_service.html#ae551f8e6887366a46e49b09b37389b8f&quot;&gt;&lt;code&gt;OIDAuthorizationService.presentAuthorizationRequest:externalUserAgent:callback:&lt;/code&gt;&lt;/a&gt; rather than using the platform-specific convenience methods (which use the default user-agents for their respective platforms), like &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/category_o_i_d_auth_state_07_i_o_s_08.html#ae32fd0732cd3192cd5219f2655a4c85c&quot;&gt;&lt;code&gt;OIDAuthState.authStateByPresentingAuthorizationRequest:presentingViewController:callback:&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Popular use-cases for writing your own user-agent implementation include needing to style the user-agent in ways not supported by AppAuth, and implementing a fully custom flow with your own business logic. You can take one of the existing implementations as a starting point to copy, rename, and customize to your needs.&lt;/p&gt; 
&lt;h4&gt;Custom Browser User-Agent&lt;/h4&gt; 
&lt;p&gt;AppAuth for iOS includes a few extra user-agent implementations which you can try, or use as a reference for your own implementation. One of them, &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_external_user_agent_i_o_s_custom_browser.html&quot;&gt;&lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt;&lt;/a&gt; enables you to use a different browser for authentication, like Chrome for iOS or Firefox for iOS.&lt;/p&gt; 
&lt;p&gt;Here&#39;s how to configure AppAuth to use a custom browser using the &lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt; user agent:&lt;/p&gt; 
&lt;p&gt;First, add the following array to your &lt;a href=&quot;https://github.com/openid/AppAuth-iOS/raw/135f99d2cb4e9d18d310ac2588b905e612461561/Examples/Example-iOS_ObjC/Source/Info.plist#L34&quot;&gt;Info.plist&lt;/a&gt; (in XCode, right click -&amp;gt; Open As -&amp;gt; Source Code)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    &amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;googlechromes&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;opera-https&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;firefox&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is required so that AppAuth can test for the browser and open the app store if it&#39;s not installed (the default behavior of this user-agent). You only need to include the URL scheme of the actual browser you intend to use.&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// performs authentication request
AppDelegate *appDelegate =
    (AppDelegate *)[UIApplication sharedApplication].delegate;
id&amp;lt;OIDExternalUserAgent&amp;gt; userAgent =
    [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome];
appDelegate.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
        externalUserAgent:userAgent
                 callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  if (authState) {
    NSLog(@&quot;Got authorization tokens. Access token: %@&quot;,
          authState.lastTokenResponse.accessToken);
    [self setAuthState:authState];
  } else {
    NSLog(@&quot;Authorization error: %@&quot;, [error localizedDescription]);
    [self setAuthState:nil];
  }
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            self.logMessage(&quot;Error accessing AppDelegate&quot;)
            return
        }
let userAgent = OIDExternalUserAgentIOSCustomBrowser.customBrowserChrome()		
appDelegate.currentAuthorizationFlow = OIDAuthState.authState(byPresenting: request, externalUserAgent: userAgent) { authState, error in
    if let authState = authState {
        self.setAuthState(authState)
        self.logMessage(&quot;Got authorization tokens. Access token: \(authState.lastTokenResponse?.accessToken ?? &quot;DEFAULT_TOKEN&quot;)&quot;)
    } else {
        self.logMessage(&quot;Authorization error: \(error?.localizedDescription ?? &quot;DEFAULT_ERROR&quot;)&quot;)
        self.setAuthState(nil)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! With those two changes (which you can try on the included sample), AppAuth will use Chrome iOS for the authorization request (and open Chrome in the App Store if it&#39;s not installed).&lt;/p&gt; 
&lt;p&gt;⚠️&lt;strong&gt;Note: the &lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt; user-agent is not intended for consumer apps&lt;/strong&gt;. It is designed for advanced enterprise use-cases where the app developers have greater control over the operating environment and have special requirements that require a custom browser like Chrome.&lt;/p&gt; 
&lt;p&gt;You don&#39;t need to stop with the included external user agents either! Since the &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html&quot;&gt;&lt;code&gt;OIDExternalUserAgent&lt;/code&gt;&lt;/a&gt; protocol is part of AppAuth&#39;s public API, you can implement your own versions of it. In the above example, &lt;code&gt;userAgent = [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome]&lt;/code&gt; would be replaced with an instantiation of your user-agent implementation.&lt;/p&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;Browse the &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/annotated.html&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Included Samples&lt;/h2&gt; 
&lt;p&gt;Sample apps that explore core AppAuth features are available for iOS, macOS and tvOS; follow the instructions in &lt;a href=&quot;https://raw.githubusercontent.com/openid/AppAuth-iOS/master/Examples/README.md&quot;&gt;Examples/README.md&lt;/a&gt; to get started.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sparkle-project/Sparkle</title>
      <link>https://github.com/sparkle-project/Sparkle</link>
      <description>&lt;p&gt;A software update framework for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sparkle 2 &lt;img src=&quot;https://github.com/sparkle-project/Sparkle/workflows/Build%20%26%20Tests/badge.svg?branch=2.x&quot; alt=&quot;Build Status&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-4BC51D.svg?style=flat&quot; alt=&quot;SwiftPM&quot;&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Sparkle&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Sparkle.svg?cacheSeconds=86400&quot; alt=&quot;CocoaPods&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Secure and reliable software update framework for macOS.&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/Resources/Screenshot.png&quot; width=&quot;732&quot; alt=&quot;Sparkle shows familiar update window with release notes&quot;&gt; 
&lt;p&gt;Sparkle 2 adds support for application sandboxing, custom user interfaces, updating external bundles, and a more modern architecture which includes faster and more reliable installs.&lt;/p&gt; 
&lt;p&gt;Pre-releases when available can be found on the &lt;a href=&quot;https://github.com/sparkle-project/Sparkle/releases&quot;&gt;Sparkle&#39;s Releases&lt;/a&gt; or on your favorite package manager. More nightly builds can be downloaded by selecting a recent &lt;a href=&quot;https://github.com/sparkle-project/Sparkle/actions?query=event%3Apush+is%3Asuccess+branch%3A2.x&quot;&gt;workflow run&lt;/a&gt; and downloading the corresponding Sparkle-distribution artifact.&lt;/p&gt; 
&lt;p&gt;The current status for future versions of Sparkle is tracked by &lt;a href=&quot;https://github.com/sparkle-project/Sparkle/milestones&quot;&gt;its roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please visit &lt;a href=&quot;http://sparkle-project.org&quot;&gt;Sparkle&#39;s website&lt;/a&gt; for up to date documentation on using and migrating over to Sparkle 2. Refer to &lt;a href=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/CHANGELOG&quot;&gt;Changelog&lt;/a&gt; for a more detailed list of changes. More internal design documents to the project can be found in the repository under &lt;a href=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/Documentation/&quot;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Seamless. There&#39;s no mention of Sparkle; your icons and app name are used.&lt;/li&gt; 
 &lt;li&gt;Secure. Updates are verified using EdDSA signatures and Apple Code Signing. Supports Sandboxed applications in Sparkle 2.&lt;/li&gt; 
 &lt;li&gt;Fast. Supports delta updates which only patch files that have changed and atomic-safe installs.&lt;/li&gt; 
 &lt;li&gt;Easy to install. Sparkle requires no code in your app, and only needs static files on a web server.&lt;/li&gt; 
 &lt;li&gt;Customizable. Sparkle 2 supports plugging in a custom UI for updates.&lt;/li&gt; 
 &lt;li&gt;Flexible. Supports applications, package installers, preference panes, and other plug-ins. Sparkle 2 supports updating external bundles.&lt;/li&gt; 
 &lt;li&gt;Handles permissions, quarantine, and automatically asks for authentication if needed.&lt;/li&gt; 
 &lt;li&gt;Uses RSS-based appcasts for release information. Appcasts are a de-facto standard supported by 3rd party update-tracking programs and websites.&lt;/li&gt; 
 &lt;li&gt;Stays hidden until second launch for better first impressions.&lt;/li&gt; 
 &lt;li&gt;Truly self-updating — the user can choose to automatically download and install all updates in the background.&lt;/li&gt; 
 &lt;li&gt;Ability to use channels for beta updates (in Sparkle 2), add phased rollouts to users, and mark updates as critical or major.&lt;/li&gt; 
 &lt;li&gt;Progress and status notifications for the host app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Runtime: macOS 10.13 or later.&lt;/li&gt; 
 &lt;li&gt;Build: Latest major Xcode (stable or beta, whichever is latest) and one major version less.&lt;/li&gt; 
 &lt;li&gt;HTTPS server for serving updates (see &lt;a href=&quot;http://sparkle-project.org/documentation/app-transport-security/&quot;&gt;App Transport Security&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://sparkle-project.org/documentation/&quot;&gt;getting started guide&lt;/a&gt;. No code is necessary, but a bit of configuration is required.&lt;/p&gt; 
&lt;h3&gt;Troubleshooting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Please check &lt;strong&gt;Console.app&lt;/strong&gt; for logs under your application. Sparkle prints detailed information there about all problems it encounters. It often also suggests solutions to the problems, so please read Sparkle&#39;s log messages carefully.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;generate_appcast&lt;/code&gt; tool which creates appcast files, correct signatures, and delta updates automatically.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the URL specified in &lt;a href=&quot;https://sparkle-project.org/documentation/customization/&quot;&gt;&lt;code&gt;SUFeedURL&lt;/code&gt;&lt;/a&gt; is valid (typos/404s are a common error!), and that it uses modern TLS (&lt;a href=&quot;https://www.ssllabs.com/ssltest/&quot;&gt;test it&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;API symbols&lt;/h3&gt; 
&lt;p&gt;Sparkle is built with &lt;code&gt;-fvisibility=hidden -fvisibility-inlines-hidden&lt;/code&gt; which means no symbols are exported by default. If you are adding a symbol to the public API you must decorate the declaration with the &lt;code&gt;SU_EXPORT&lt;/code&gt; macro (grep the source code for examples).&lt;/p&gt; 
&lt;h3&gt;Building the distribution package&lt;/h3&gt; 
&lt;p&gt;You do not usually need to build a Sparkle distribution unless you&#39;re making changes to Sparkle itself.&lt;/p&gt; 
&lt;p&gt;To build a Sparkle distribution, &lt;code&gt;cd&lt;/code&gt; to the root of the Sparkle source tree and run &lt;code&gt;make release&lt;/code&gt;. Sparkle-&lt;em&gt;VERSION&lt;/em&gt;.tar.xz will be created and revealed in Finder after the build has completed.&lt;/p&gt; 
&lt;p&gt;Alternatively, build the Distribution scheme in the Xcode UI.&lt;/p&gt; 
&lt;h3&gt;Code of Conduct&lt;/h3&gt; 
&lt;p&gt;We pledge to have an open and welcoming environment. See our &lt;a href=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/GoogleUtilities</title>
      <link>https://github.com/google/GoogleUtilities</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/GoogleUtilities.svg?style=flat&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/GoogleUtilities.svg?style=flat&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/GoogleUtilities.svg?style=flat&quot; alt=&quot;Platform&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/firebase/firebase-ios-sdk/actions&quot;&gt;&lt;img src=&quot;https://github.com/firebase/firebase-ios-sdk/workflows/google-utilities/badge.svg?sanitize=true&quot; alt=&quot;Actions Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;GoogleUtilities&lt;/h1&gt; 
&lt;p&gt;GoogleUtilities provides a set of utilities for Firebase and other Google SDKs for Apple platform development.&lt;/p&gt; 
&lt;p&gt;The utilities are not directly supported for non-Google library usage.&lt;/p&gt; 
&lt;h2&gt;Integration Testing&lt;/h2&gt; 
&lt;p&gt;These instructions apply to minor and patch version updates. Major versions need a customized adaptation.&lt;/p&gt; 
&lt;p&gt;After the CI is green:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Determine the next version for release by checking the &lt;a href=&quot;https://github.com/google/GoogleUtilities/tags&quot;&gt;tagged releases&lt;/a&gt;. Ensure that the next release version keeps the Swift PM and CocoaPods versions in sync.&lt;/li&gt; 
 &lt;li&gt;Verify that the releasing version is the latest entry in the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;, updating it if necessary.&lt;/li&gt; 
 &lt;li&gt;Update the version in the podspec to match the latest entry in the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Checkout the &lt;code&gt;main&lt;/code&gt; branch and ensure it is up to date &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git checkout main
git pull
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add the CocoaPods tag (&lt;code&gt;{version}&lt;/code&gt; will be the latest version in the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/GoogleUtilities.podspec#L3&quot;&gt;podspec&lt;/a&gt;) &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git tag CocoaPods-{version}
git push origin CocoaPods-{version}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Push the podspec to the designated repo 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;If this version of GoogleUtilities is intended to launch &lt;strong&gt;before or with&lt;/strong&gt; the next Firebase release:&lt;/p&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Push to &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo push --skip-tests --use-json staging GoogleUtilities.podspec
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;staging&#39; repo.&lt;/code&gt;, add the staging repo with:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo add staging git@github.com:firebase/SpecsStaging.git
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Otherwise:&lt;/p&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Push to &lt;b&gt;SpecsDev&lt;/b&gt;&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo push --skip-tests --use-json dev GoogleUtilities.podspec
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;dev&#39; repo.&lt;/code&gt;, add the dev repo with:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo add dev git@github.com:firebase/SpecsDev.git
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run Firebase CI by waiting until next nightly or adding a PR that touches &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;On google3, run copybara using the command below. Then, start a global TAP on the generated CL. Deflake as needed. &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;third_party/firebase/ios/Releases/run_copy_bara.py --directory GoogleUtilities --branch main
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Publishing&lt;/h2&gt; 
&lt;p&gt;The release process is as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#swift-package-manager&quot;&gt;Tag and release for Swift PM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#cocoapods&quot;&gt;Publish to CocoaPods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#create-github-release&quot;&gt;Create GitHub Release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&quot;&gt;Perform post release cleanup&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;By creating and &lt;a href=&quot;https://github.com/google/GoogleUtilities/tags&quot;&gt;pushing a tag&lt;/a&gt; for Swift PM, the newly tagged version will be immediately released for public use. Given this, please verify the intended time of release for Swift PM.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a version tag for Swift PM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git tag {version}
git push origin {version}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note: Ensure that any inflight PRs that depend on the new &lt;code&gt;GoogleUtilities&lt;/code&gt; version are updated to point to the newly tagged version rather than a checksum.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Publish the newly versioned pod to CocoaPods&lt;/p&gt; &lt;p&gt;It&#39;s recommended to point to the &lt;code&gt;GoogleUtilities.podspec&lt;/code&gt; in &lt;code&gt;staging&lt;/code&gt; to make sure the correct spec is being published.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod trunk push ~/.cocoapods/repos/staging/GoogleUtilities/{version}/GoogleUtilities.podspec.json
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: In some cases, it may be acceptable to &lt;code&gt;pod trunk push&lt;/code&gt; with the &lt;code&gt;--skip-tests&lt;/code&gt; flag. Please double check with the maintainers before doing so.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The pod push was successful if the above command logs: &lt;code&gt;🚀 GoogleUtilities ({version}) successfully published&lt;/code&gt;. In addition, a new commit that publishes the new version (co-authored by &lt;a href=&quot;https://github.com/CocoaPodsAtGoogle&quot;&gt;CocoaPodsAtGoogle&lt;/a&gt;) should appear in the &lt;a href=&quot;https://github.com/CocoaPods/Specs&quot;&gt;CocoaPods specs repo&lt;/a&gt;. Last, the latest version should be displayed on &lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;GoogleUtilities&#39;s CocoaPods page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/google/GoogleUtilities/releases/new/&quot;&gt;Create GitHub Release&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Update the &lt;a href=&quot;https://github.com/google/GoogleUtilities/releases/new/&quot;&gt;release template&lt;/a&gt;&#39;s &lt;strong&gt;Tag version&lt;/strong&gt; and &lt;strong&gt;Release title&lt;/strong&gt; fields with the latest version. In addition, reference the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&quot;&gt;Release Notes&lt;/a&gt; in the release&#39;s description.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/google/GoogleUtilities/releases/edit/7.7.0&quot;&gt;this release&lt;/a&gt; for an example.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Don&#39;t forget to perform the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&quot;&gt;post release cleanup&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Post Release Cleanup&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Clean up &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pwd=$(pwd)
mkdir -p /tmp/release-cleanup &amp;amp;&amp;amp; cd $_
git clone git@github.com:firebase/SpecsStaging.git
cd SpecsStaging/
git rm -rf GoogleUtilities/
git commit -m &quot;Post publish cleanup&quot;
git push origin master
rm -rf /tmp/release-cleanup
cd $pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;To develop in this repository, ensure that you have at least the following software:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode 12.0 (or later)&lt;/li&gt; 
 &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/square/cocoapods-generate&quot;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; 
&lt;h3&gt;Development for Catalyst&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; 
 &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; 
 &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; 
 &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; 
 &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; 
 &lt;li&gt;Run it to build and test&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to Build Settings tab&lt;/li&gt; 
 &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Code Formatting&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/firebase/firebase-ios-sdk?tab=readme-ov-file#code-formatting&quot;&gt;firebase-ios-sdk&#39;s code formatting docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Running Unit Tests&lt;/h3&gt; 
&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The contents of this repository is licensed under the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/gtm-session-fetcher</title>
      <link>https://github.com/google/gtm-session-fetcher</link>
      <description>&lt;p&gt;Google Toolbox for Mac - Session Fetcher&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Toolbox for Mac - Session Fetcher&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Project site&lt;/strong&gt; &lt;a href=&quot;https://github.com/google/gtm-session-fetcher&quot;&gt;https://github.com/google/gtm-session-fetcher&lt;/a&gt;&lt;br&gt; &lt;strong&gt;Discussion group&lt;/strong&gt; &lt;a href=&quot;http://groups.google.com/group/google-toolbox-for-mac&quot;&gt;http://groups.google.com/group/google-toolbox-for-mac&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/swiftpm.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/swiftpm.yml/badge.svg?branch=main&quot; alt=&quot;SwiftPM&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/cocoapods.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/cocoapods.yml/badge.svg?branch=main&quot; alt=&quot;CocoaPods&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;GTMSessionFetcher&lt;/code&gt; makes it easy for Cocoa applications to perform http operations. The fetcher is implemented as a wrapper on &lt;code&gt;NSURLSession&lt;/code&gt;, so its behavior is asynchronous and uses operating-system settings.&lt;/p&gt; 
&lt;p&gt;Features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple to build; only one source/header file pair is required&lt;/li&gt; 
 &lt;li&gt;Simple to use: takes just two lines of code to fetch a request&lt;/li&gt; 
 &lt;li&gt;Supports upload and download sessions&lt;/li&gt; 
 &lt;li&gt;Flexible cookie storage&lt;/li&gt; 
 &lt;li&gt;Automatic retry on errors, with exponential backoff&lt;/li&gt; 
 &lt;li&gt;Support for generating multipart MIME upload streams&lt;/li&gt; 
 &lt;li&gt;Easy, convenient logging of http requests and responses&lt;/li&gt; 
 &lt;li&gt;Supports plug-in authentication such as with GTMAppAuth&lt;/li&gt; 
 &lt;li&gt;Easily testable; self-mocking&lt;/li&gt; 
 &lt;li&gt;Automatic rate limiting when created by the &lt;code&gt;GTMSessionFetcherService&lt;/code&gt; factory class&lt;/li&gt; 
 &lt;li&gt;Fully independent of other projects&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;To get started&lt;/strong&gt; please read &lt;a href=&quot;https://raw.githubusercontent.com/google/gtm-session-fetcher/main/USING.md&quot;&gt;USING.md&lt;/a&gt; for detailed information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>adjust/ios_sdk</title>
      <link>https://github.com/adjust/ios_sdk</link>
      <description>&lt;p&gt;This is the iOS SDK of&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Adjust SDK for iOS&lt;/h1&gt; 
&lt;p&gt;This is the &lt;a href=&quot;https://adjust.com&quot;&gt;Adjust&lt;/a&gt;™ SDK for iOS. Documentation is available on our help center in the following languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/en/developer/ios-sdk-documentation&quot;&gt;English&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/zh/developer/ios-sdk-documentation&quot;&gt;中文&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/ja/developer/ios-sdk-documentation&quot;&gt;日本語&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/ko/developer/ios-sdk-documentation&quot;&gt;한국어&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Distributed under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/adjust/ios_sdk/master/MIT-LICENSE&quot;&gt;&lt;code&gt;MIT-LICENSE&lt;/code&gt;&lt;/a&gt; for the full text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SDWebImage/SDWebImage</title>
      <link>https://github.com/SDWebImage/SDWebImage</link>
      <description>&lt;p&gt;Asynchronous image downloader with cache support as a UIImageView category&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/SDWebImage_logo.png&quot; title=&quot;SDWebImage logo&quot; float=&quot;left&quot;&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/actions/workflows/CI.yml&quot;&gt;&lt;img src=&quot;https://github.com/SDWebImage/SDWebImage/actions/workflows/CI.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoadocs.org/docsets/SDWebImage/&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/v/SDWebImage.svg?style=flat&quot; alt=&quot;Pod Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoadocs.org/docsets/SDWebImage/&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/p/SDWebImage.svg?style=flat&quot; alt=&quot;Pod Platform&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/l/SDWebImage.svg?style=flat&quot; alt=&quot;Pod License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;SwiftPM compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;Mac Catalyst compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/SDWebImage/SDWebImage&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/SDWebImage/SDWebImage/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This library provides an async image downloader with cache support. For convenience, we added categories for UI elements like &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: &lt;code&gt;SD&lt;/code&gt; is the prefix for &lt;strong&gt;Simple Design&lt;/strong&gt; (which is the team name in Daily Motion company from the author Olivier Poitrey)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Categories for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt; adding web image and cache management&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; An asynchronous image downloader&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; An asynchronous memory + disk image caching with automatic cache expiration handling&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; A background image decompression to avoid frame rate drop&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#progressive-animation&quot;&gt;Progressive image loading&lt;/a&gt; (including animated image, like GIF showing in Web browser)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#thumbnail-decoding-550&quot;&gt;Thumbnail image decoding&lt;/a&gt; to save CPU &amp;amp;&amp;amp; Memory for large images&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-coder-420&quot;&gt;Extendable image coder&lt;/a&gt; to support massive image format, like WebP&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&quot;&gt;Full-stack solution for animated images&lt;/a&gt; which keep a balance between CPU &amp;amp;&amp;amp; Memory&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#transformer-50&quot;&gt;Customizable and composable transformations&lt;/a&gt; can be applied to the images right after download&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-cache-50&quot;&gt;Customizable and multiple caches system&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-loader-50&quot;&gt;Customizable and multiple loaders system&lt;/a&gt; to expand the capabilities, like &lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePhotosPlugin&quot;&gt;Photos Library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/How-to-use#use-view-indicator-50&quot;&gt;Image loading indicators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#image-transition-430&quot;&gt;Image loading transition animation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; A guarantee that the same URL won&#39;t be downloaded several times&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; A guarantee that bogus URLs won&#39;t be retried again and again&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; A guarantee that main thread will never be blocked&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Modern Objective-C and better Swift support&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Performances!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;For Apple visionOS&lt;/h2&gt; 
&lt;p&gt;From 5.19+, SDWebImage supports visionOS on all Package Managers (include CocoaPods/Carthage/SPM). Upgrade the related tools if you&#39;re facing issues.&lt;/p&gt; 
&lt;p&gt;For 5.18+, SDWebImage can be compiled for visionOS platform. However, it&#39;s still in beta and may contains issues unlike the stable iOS UIKit support. Welcome to have a try and &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/issues&quot;&gt;report issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To build on visionOS, currently we only support the standard Xcode integration.&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;Installation with Swift Package Manager&lt;/code&gt; and &lt;code&gt;Manual Installation Guide&lt;/code&gt; below.&lt;/p&gt; 
&lt;h2&gt;Supported Image Formats&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Image formats supported by Apple system (JPEG, PNG, TIFF, BMP, ...), including &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#gif-coder&quot;&gt;GIF&lt;/a&gt;/&lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#apng-coder&quot;&gt;APNG&lt;/a&gt; animated image&lt;/li&gt; 
 &lt;li&gt;HEIC format from iOS 11/macOS 10.13, including animated HEIC from iOS 13/macOS 10.15 via &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#heic-coder&quot;&gt;SDWebImageHEICCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageHEIFCoder&quot;&gt;SDWebImageHEIFCoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WebP format from iOS 14/macOS 11.0 via &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#awebp-coder&quot;&gt;SDWebImageAWebPCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageWebPCoder&quot;&gt;SDWebImageWebPCoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;JPEG-XL format from iOS 17/macOS 14.0 built-in. For lower firmware, use coder plugin &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageJPEGXLCoder&quot;&gt;SDWebImageJPEGXLCoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support extendable coder plugins for new image formats like BPG, AVIF. And vector format like PDF, SVG. See all the list in &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&quot;&gt;Image coder plugin List&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: For new user&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;SDWebImage use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&quot;&gt;Coder Plugin System&lt;/a&gt; to support both Apple&#39;s built-in and external image format. For static image we always use Apple&#39;s built-in as fallback, but not for animated image. Currently (updated to 5.19.x version) we only register traditional animated format like GIF/APNG by default, without the modern format like AWebP/HEICS/AVIF, even on the latest firmware.&lt;/p&gt; 
&lt;p&gt;If you want these animated image format support, simply register by yourself with one-line code, see more in &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#awebp-coder&quot;&gt;WebP Coder&lt;/a&gt; and &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#heic-coder&quot;&gt;HEIC Coder&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In future we will change this behavior by always registering all Apple&#39;s built-in animated image format, to make it easy for new user to integrate.&lt;/p&gt; 
&lt;h2&gt;Additional modules and Ecosystem&lt;/h2&gt; 
&lt;p&gt;In order to keep SDWebImage focused and limited to the core features, but also allow extensibility and custom behaviors, during the 5.0 refactoring we focused on modularizing the library. As such, we have moved/built new modules to &lt;a href=&quot;https://github.com/SDWebImage&quot;&gt;SDWebImage org&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;SwiftUI&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/xcode/swiftui/&quot;&gt;SwiftUI&lt;/a&gt; is an innovative UI framework written in Swift to build user interfaces across all Apple platforms.&lt;/p&gt; 
&lt;p&gt;We support SwiftUI by building a brand new framework called &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSwiftUI&quot;&gt;SDWebImageSwiftUI&lt;/a&gt;, which is built on top of SDWebImage core functions (caching, loading and animation).&lt;/p&gt; 
&lt;p&gt;The new framework introduce two View structs &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt; for SwiftUI world, &lt;code&gt;ImageIndicator&lt;/code&gt; modifier for any View, &lt;code&gt;ImageManager&lt;/code&gt; observable object for data source. Supports iOS 13+/macOS 10.15+/tvOS 13+/watchOS 6+ and Swift 5.1. Have a nice try and provide feedback!&lt;/p&gt; 
&lt;h4&gt;Coders for additional image formats&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageWebPCoder&quot;&gt;SDWebImageWebPCoder&lt;/a&gt; - coder for WebP format. iOS 9+/macOS 10.11+. Based on &lt;a href=&quot;https://chromium.googlesource.com/webm/libwebp&quot;&gt;libwebp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageHEIFCoder&quot;&gt;SDWebImageHEIFCoder&lt;/a&gt; - coder for HEIF format, iOS 9+/macOS 10.11+ support. Based on &lt;a href=&quot;https://github.com/strukturag/libheif&quot;&gt;libheif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageBPGCoder&quot;&gt;SDWebImageBPGCoder&lt;/a&gt; - coder for BPG format. Based on &lt;a href=&quot;https://github.com/mirrorer/libbpg&quot;&gt;libbpg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageFLIFCoder&quot;&gt;SDWebImageFLIFCoder&lt;/a&gt; - coder for FLIF format. Based on &lt;a href=&quot;https://github.com/FLIF-hub/FLIF&quot;&gt;libflif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageAVIFCoder&quot;&gt;SDWebImageAVIFCoder&lt;/a&gt; - coder for AVIF (AV1-based) format. Based on &lt;a href=&quot;https://github.com/AOMediaCodec/libavif&quot;&gt;libavif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePDFCoder&quot;&gt;SDWebImagePDFCoder&lt;/a&gt; - coder for PDF vector format. Using built-in frameworks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSVGCoder&quot;&gt;SDWebImageSVGCoder&lt;/a&gt; - coder for SVG vector format. Using built-in frameworks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSVGNativeCoder&quot;&gt;SDWebImageSVGNativeCoder&lt;/a&gt; - coder for SVG-Native vector format. Based on &lt;a href=&quot;https://github.com/adobe/svg-native-viewer&quot;&gt;svg-native&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageLottieCoder&quot;&gt;SDWebImageLottieCoder&lt;/a&gt; - coder for Lottie animation format. Based on &lt;a href=&quot;https://github.com/Samsung/rlottie&quot;&gt;rlottie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageJPEGXLCoder&quot;&gt;SDWebImageJPEGXLCoder&lt;/a&gt; - coder for JPEG-XL format. iOS 9+/macOS 10.11+. Based on &lt;a href=&quot;https://github.com/libjxl/libjxl&quot;&gt;libjxl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;and more from community!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Custom Caches&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageYYPlugin&quot;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&quot;https://github.com/ibireme/YYCache&quot;&gt;YYCache&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePINPlugin&quot;&gt;SDWebImagePINPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&quot;https://github.com/pinterest/PINCache&quot;&gt;PINCache&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Custom Loaders&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePhotosPlugin&quot;&gt;SDWebImagePhotosPlugin&lt;/a&gt; - plugin to support loading images from Photos (using &lt;code&gt;Photos.framework&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageLinkPlugin&quot;&gt;SDWebImageLinkPlugin&lt;/a&gt; - plugin to support loading images from rich link url, as well as &lt;code&gt;LPLinkView&lt;/code&gt; (using &lt;code&gt;LinkPresentation.framework&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Integration with 3rd party libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageLottiePlugin&quot;&gt;SDWebImageLottiePlugin&lt;/a&gt; - plugin to support &lt;a href=&quot;https://github.com/airbnb/lottie-ios&quot;&gt;Lottie-iOS&lt;/a&gt;, vector animation rending with remote JSON files&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSVGKitPlugin&quot;&gt;SDWebImageSVGKitPlugin&lt;/a&gt; - plugin to support &lt;a href=&quot;https://github.com/SVGKit/SVGKit&quot;&gt;SVGKit&lt;/a&gt;, SVG rendering using Core Animation, iOS 9+/macOS 10.11+ support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageFLPlugin&quot;&gt;SDWebImageFLPlugin&lt;/a&gt; - plugin to support &lt;a href=&quot;https://github.com/Flipboard/FLAnimatedImage&quot;&gt;FLAnimatedImage&lt;/a&gt; as the engine for animated GIFs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageYYPlugin&quot;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to integrate &lt;a href=&quot;https://github.com/ibireme/YYImage&quot;&gt;YYImage&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/ibireme/YYCache&quot;&gt;YYCache&lt;/a&gt; for image rendering &amp;amp; caching&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Community driven popular libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/firebase/FirebaseUI-iOS&quot;&gt;FirebaseUI&lt;/a&gt; - Firebase Storage binding for query images, based on SDWebImage loader system&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DylanVann/react-native-fast-image&quot;&gt;react-native-fast-image&lt;/a&gt; - React Native fast image component, based on SDWebImage Animated Image solution&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFlutter/flutter_image_compress&quot;&gt;flutter_image_compress&lt;/a&gt; - Flutter compresses image plugin, based on SDWebImage WebP coder plugin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Make our lives easier&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/libwebp-Xcode&quot;&gt;libwebp-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&quot;https://chromium.googlesource.com/webm/libwebp&quot;&gt;libwebp&lt;/a&gt; + an Xcode project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/libheif-Xcode&quot;&gt;libheif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&quot;https://github.com/strukturag/libheif&quot;&gt;libheif&lt;/a&gt; + an Xcode project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/libavif-Xcode&quot;&gt;libavif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&quot;https://github.com/AOMediaCodec/libavif&quot;&gt;libavif&lt;/a&gt; + an Xcode project.&lt;/li&gt; 
 &lt;li&gt;and more third-party C/C++ image codec libraries with CocoaPods/Carthage/SwiftPM support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use those directly, or create similar components of your own, by using the customizable architecture of SDWebImage.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 9.0 or later&lt;/li&gt; 
 &lt;li&gt;tvOS 9.0 or later&lt;/li&gt; 
 &lt;li&gt;watchOS 2.0 or later&lt;/li&gt; 
 &lt;li&gt;macOS 10.11 or later (10.15 for Catalyst)&lt;/li&gt; 
 &lt;li&gt;visionOS 1.0 or later&lt;/li&gt; 
 &lt;li&gt;Xcode 15.0 or later&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Backwards compatibility&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;For iOS 8, macOS 10.10 or Xcode &amp;lt; 11, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/5.9.5&quot;&gt;any 5.x version up to 5.9.5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For iOS 7, macOS 10.9 or Xcode &amp;lt; 8, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/4.4.6&quot;&gt;any 4.x version up to 4.4.6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For macOS 10.8, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/4.3.0&quot;&gt;any 4.x version up to 4.3.0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For iOS 5 and 6, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/3.7.6&quot;&gt;any 3.x version up to 3.7.6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For iOS &amp;lt; 5.0, please use the last &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/tree/2.0-compat&quot;&gt;2.0 version&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read this Readme doc&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage#how-to-use&quot;&gt;How to use section&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://sdwebimage.github.io/&quot;&gt;Latest Documentation&lt;/a&gt; and &lt;a href=&quot;http://cocoadocs.org/docsets/SDWebImage/&quot;&gt;CocoaDocs for old version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Try the example by downloading the project from Github or even easier using CocoaPods try &lt;code&gt;pod try SDWebImage&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide&quot;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-5.0-Migration-guide.md&quot;&gt;SDWebImage 5.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 4.x to 5.x&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-4.0-Migration-guide.md&quot;&gt;SDWebImage 4.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 3.x to 4.x&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Common-Problems&quot;&gt;Common Problems&lt;/a&gt; to find the solution for common problems&lt;/li&gt; 
 &lt;li&gt;Go to the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki&quot;&gt;Wiki Page&lt;/a&gt; for more information such as &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage&quot;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses It&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find out &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Who-Uses-SDWebImage&quot;&gt;who uses SDWebImage&lt;/a&gt; and add your app to the list.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/sdwebimage&quot;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;sdwebimage&#39;)&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/sdwebimage&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;need IRC channel&lt;/strong&gt;, use &lt;a href=&quot;https://gitter.im/SDWebImage/community&quot;&gt;Gitter&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For &lt;strong&gt;development contribution guide&lt;/strong&gt;, read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/How-to-Contribute&quot;&gt;How-To-Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For &lt;strong&gt;understanding code architecture&lt;/strong&gt;, read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&quot;&gt;Code Architecture Analysis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How To Use&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;
...
[imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http://www.domain.com/path/to/image.jpg&quot;]
             placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;]];
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SDWebImage

imageView.sd_setImage(with: URL(string: &quot;http://www.domain.com/path/to/image.jpg&quot;), placeholderImage: UIImage(named: &quot;placeholder.png&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;For details about how to use the library and clear examples, see &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/HowToUse.md&quot;&gt;The detailed How to use&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Animated Images (GIF) support&lt;/h2&gt; 
&lt;p&gt;In 5.0, we introduced a brand new mechanism for supporting animated images. This includes animated image loading, rendering, decoding, and also supports customizations (for advanced users).&lt;/p&gt; 
&lt;p&gt;This animated image solution is available for &lt;code&gt;iOS&lt;/code&gt;/&lt;code&gt;tvOS&lt;/code&gt;/&lt;code&gt;macOS&lt;/code&gt;. The &lt;code&gt;SDAnimatedImage&lt;/code&gt; is subclass of &lt;code&gt;UIImage/NSImage&lt;/code&gt;, and &lt;code&gt;SDAnimatedImageView&lt;/code&gt; is subclass of &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;, to make them compatible with the common frameworks APIs.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;SDAnimatedImageView&lt;/code&gt; supports the familiar image loading category methods, works like drop-in replacement for &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don&#39;t have &lt;code&gt;UIView&lt;/code&gt; (like &lt;code&gt;WatchKit&lt;/code&gt; or &lt;code&gt;CALayer&lt;/code&gt;)? you can still use &lt;code&gt;SDAnimatedPlayer&lt;/code&gt; the player engine for advanced playback and rendering.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&quot;&gt;Animated Image&lt;/a&gt; for more detailed information.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;SDAnimatedImageView *imageView = [SDAnimatedImageView new];
SDAnimatedImage *animatedImage = [SDAnimatedImage imageNamed:@&quot;image.gif&quot;];
imageView.image = animatedImage;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let imageView = SDAnimatedImageView()
let animatedImage = SDAnimatedImage(named: &quot;image.gif&quot;)
imageView.image = animatedImage
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;FLAnimatedImage integration has its own dedicated repo&lt;/h4&gt; 
&lt;p&gt;In order to clean up things and make our core project do less things, we decided that the &lt;code&gt;FLAnimatedImage&lt;/code&gt; integration does not belong here. From 5.0, this will still be available, but under a dedicated repo &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageFLPlugin&quot;&gt;SDWebImageFLPlugin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are 5 ways to use SDWebImage in your project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;using CocoaPods&lt;/li&gt; 
 &lt;li&gt;using Carthage&lt;/li&gt; 
 &lt;li&gt;using Swift Package Manager&lt;/li&gt; 
 &lt;li&gt;download binary XCFramework&lt;/li&gt; 
 &lt;li&gt;manual install (build frameworks or embed Xcode Project)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation with CocoaPods&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries in your projects. See the &lt;a href=&quot;http://cocoapods.org/#get_started&quot;&gt;Get Started&lt;/a&gt; section for more details.&lt;/p&gt; 
&lt;h4&gt;Podfile&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;
pod &#39;SDWebImage&#39;, &#39;~&amp;gt; 5.0&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Swift and static framework&lt;/h5&gt; 
&lt;p&gt;Swift project previously had to use &lt;code&gt;use_frameworks!&lt;/code&gt; to make all Pods into dynamic framework to let CocoaPods work.&lt;/p&gt; 
&lt;p&gt;However, starting with &lt;code&gt;CocoaPods 1.5.0+&lt;/code&gt; (with &lt;code&gt;Xcode 9+&lt;/code&gt;), which supports to build both Objective-C &amp;amp;&amp;amp; Swift code into static framework. You can use modular headers to use SDWebImage as static framework, without the need of &lt;code&gt;use_frameworks!&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;
# Uncomment the next line when you want all Pods as static framework
# use_modular_headers!
pod &#39;SDWebImage&#39;, :modular_headers =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more on &lt;a href=&quot;http://blog.cocoapods.org/CocoaPods-1.5.0/&quot;&gt;CocoaPods 1.5.0 — Swift Static Libraries&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If not, you still need to add &lt;code&gt;use_frameworks!&lt;/code&gt; to use SDWebImage as dynamic framework:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;
use_frameworks!
pod &#39;SDWebImage&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Subspecs&lt;/h4&gt; 
&lt;p&gt;There are 2 subspecs available now: &lt;code&gt;Core&lt;/code&gt; and &lt;code&gt;MapKit&lt;/code&gt; (this means you can install only some of the SDWebImage modules. By default, you get just &lt;code&gt;Core&lt;/code&gt;, so if you need &lt;code&gt;MapKit&lt;/code&gt;, you need to specify it).&lt;/p&gt; 
&lt;p&gt;Podfile example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod &#39;SDWebImage/MapKit&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installation with Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a lightweight dependency manager for Swift and Objective-C. It leverages CocoaTouch modules and is less invasive than CocoaPods.&lt;/p&gt; 
&lt;p&gt;To install with carthage, follow the instruction on &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like: SDWebImage, SDWebImageMapKit or both.&lt;/p&gt; 
&lt;p&gt;Make the following entry in your Cartfile: &lt;code&gt;github &quot;SDWebImage/SDWebImage&quot;&lt;/code&gt; Then run &lt;code&gt;carthage update&lt;/code&gt; If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&quot;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: At this time, Carthage does not provide a way to build only specific repository subcomponents (or equivalent of CocoaPods&#39;s subspecs). All components and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;SDWebImageMapKit&lt;/code&gt;, feel free to delete that framework from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: &lt;a href=&quot;https://developer.apple.com/support/third-party-SDK-requirements/&quot;&gt;Apple requires SDWebImage contains signatures&lt;/a&gt;. So, by default the &lt;code&gt;carthage build&lt;/code&gt; binary framework does not do codesign, this will cause validation error. You can sign yourself with the Apple Developer Program identity, or using the binary framework:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;binary &quot;https://github.com/SDWebImage/SDWebImage/raw/master/SDWebImage.json&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installation with Swift Package Manager (Xcode 11+)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; (SwiftPM) is a tool for managing the distribution of Swift code as well as C-family dependency. From Xcode 11, SwiftPM got natively integrated with Xcode.&lt;/p&gt; 
&lt;p&gt;SDWebImage support SwiftPM from version 5.1.0. To use SwiftPM, you should use Xcode 11 to open your project. Click &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Swift Packages&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Package Dependency&lt;/code&gt;, enter &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage.git&quot;&gt;SDWebImage repo&#39;s URL&lt;/a&gt;. Or you can login Xcode with your GitHub account and just type &lt;code&gt;SDWebImage&lt;/code&gt; to search.&lt;/p&gt; 
&lt;p&gt;After select the package, you can choose the dependency type (tagged version, branch or commit). Then Xcode will setup all the stuff for you.&lt;/p&gt; 
&lt;p&gt;If you&#39;re a framework author and use SDWebImage as a dependency, update your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let package = Package(
    // 5.1.0 ..&amp;lt; 6.0.0
    dependencies: [
        .package(url: &quot;https://github.com/SDWebImage/SDWebImage.git&quot;, from: &quot;5.1.0&quot;)
    ],
    // ...
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Download binary XCFramework&lt;/h3&gt; 
&lt;p&gt;From 5.19.2, SDWebImage provide the canonical official binary XCFramework on &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases&quot;&gt;GitHub release pages&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can choose to download &lt;code&gt;SDWebImage-dynamic.xcframework.zip&lt;/code&gt; for dynamic linked one, or &lt;code&gt;SDWebImage-static.xcframework.zip&lt;/code&gt; for static-linked one.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Integrate to Xcode Project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Drag the unzipped &lt;code&gt;.xcframework&lt;/code&gt; into your Xcode Project&#39;s Framework tab.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Verify signature of binary XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;From Xcode 15 Apple will verify the signature of binary XCFramework, to avoid supply chain attack.&lt;/p&gt; 
&lt;p&gt;The fingerprint currently should be &lt;code&gt;FC 3B 10 13 86 34 4C 50 DB 70 2A 9A D1 01 6F B5 1A 3E CC 8B 9D A9 B7 AE 47 A0 48 D4 D0 63 39 83&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The certificate is stored in the repo &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Certificate/SDWebImage%20Signing%20Certificate.cer&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The public key is stored in the repo &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Certificate/SDWebImage%20Signing%20Certificate.pem&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See more: &lt;a href=&quot;https://developer.apple.com/documentation/Xcode/verifying-the-origin-of-your-xcframeworks&quot;&gt;Verifying the origin of your XCFrameworks&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Manual Installation Guide&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check your command line Xcode version&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo xcode-select -s /path/to/Xcode.app
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export DEVELOPER_DIR=/path/to/Xcode.app/Contents/Developer
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the script to build frameworks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;./Scripts/build-frameworks.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the script to merge XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;./Scripts/create-xcframework.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use your own certificate to sign XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// https://developer.apple.com/support/third-party-SDK-requirements/
codesign --timestamp -v --sign &quot;your own certificate&quot; SDWebImage.xcframework
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more on wiki: &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide#manual-installation-guide&quot;&gt;Manual install Guide&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Import headers in your source files&lt;/h3&gt; 
&lt;p&gt;In the source files where you need to use the library, import the umbrella header file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s also recommend to use the module import syntax, available for CocoaPods(enable &lt;code&gt;modular_headers&lt;/code&gt;)/Carthage/SwiftPM.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objecitivec&quot;&gt;@import SDWebImage;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build Project&lt;/h3&gt; 
&lt;p&gt;At this point your workspace should build without error. If you are having problem, post to the Issue and the community can help you solve it.&lt;/p&gt; 
&lt;h2&gt;Data Collection Practices&lt;/h2&gt; 
&lt;p&gt;From Xcode 15, we provide the new &lt;code&gt;PrivacyInfo.xcprivacy&lt;/code&gt; file for privacy details, see &lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests?language=objc&quot;&gt;Describing data use in privacy manifests&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can exports the privacy report after archive your App by integrate SDWebImage via SwiftPM/XCFramework or CocoaPods (&lt;code&gt;use_frameworks&lt;/code&gt; set to true).&lt;/p&gt; 
&lt;p&gt;For old version or if you&#39;re using static ar archive, as required by the &lt;a href=&quot;https://developer.apple.com/app-store/app-privacy-details/&quot;&gt;App privacy details on the App Store&lt;/a&gt;, here&#39;s SDWebImage&#39;s list of &lt;a href=&quot;https://sdwebimage.github.io/DataCollection/index.html&quot;&gt;Data Collection Practices&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rs&quot;&gt;Olivier Poitrey&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Collaborators&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mythodeia&quot;&gt;Konstantinos K.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bpoplauschi&quot;&gt;Bogdan Poplauschi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyline75489&quot;&gt;Chester Liu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dreampiggy&quot;&gt;DreamPiggy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zhongwuzw&quot;&gt;Wu Zhong&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Thank you to all the people who have already contributed to SDWebImage.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/SDWebImage/contributors.svg?width=890&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;All source code is licensed under the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;To learn about SDWebImage&#39;s architecture design for contribution, read &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&quot;&gt;The Core of SDWebImage v5.6 Architecture&lt;/a&gt;. Thanks @looseyi for the post and translation.&lt;/p&gt; 
&lt;h4&gt;High Level Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageHighLevelDiagram.jpeg&quot; title=&quot;SDWebImage high level diagram&quot;&gt; &lt;/p&gt; 
&lt;h4&gt;Overall Class Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageClassDiagram.png&quot; title=&quot;SDWebImage overall class diagram&quot;&gt; &lt;/p&gt; 
&lt;h4&gt;Top Level API Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageTopLevelClassDiagram.png&quot; title=&quot;SDWebImage top level API diagram&quot;&gt; &lt;/p&gt; 
&lt;h4&gt;Main Sequence Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageSequenceDiagram.png&quot; title=&quot;SDWebImage sequence diagram&quot;&gt; &lt;/p&gt; 
&lt;h4&gt;More detailed diagrams&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageManagerClassDiagram.png&quot;&gt;Manager API Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCodersClassDiagram.png&quot;&gt;Coders API Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageLoaderClassDiagram.png&quot;&gt;Loader API Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCacheClassDiagram.png&quot;&gt;Cache API Diagram&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>FLEXTool/FLEX</title>
      <link>https://github.com/FLEXTool/FLEX</link>
      <description>&lt;p&gt;An in-app debugging and exploration tool for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FLEX&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/?q=FLEX&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/FLEX.svg?sanitize=true&quot; alt=&quot;CocoaPods&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Flipboard/FLEX/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/FLEX.svg?sanitize=true&quot; alt=&quot;CocoaPods&quot;&gt;&lt;/a&gt; &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/FLEX.svg?sanitize=true&quot; alt=&quot;CocoaPods&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ryanolsonk&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-@ryanolsonk-blue.svg?style=flat&quot; alt=&quot;Twitter: @ryanolsonk&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/Flipboard/FLEX&quot;&gt;&lt;img src=&quot;https://travis-ci.org/Flipboard/FLEX.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;FLEX (Flipboard Explorer) is a set of in-app debugging and exploration tools for iOS development. When presented, FLEX shows a toolbar that lives in a window above your application. From this toolbar, you can view and modify nearly every piece of state in your running application.&lt;/p&gt; 
&lt;img alt=&quot;Demo&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70185687-e842c800-16af-11ea-8ef9-9e071380a462.gif&quot;&gt; 
&lt;h2&gt;Give Yourself Debugging Superpowers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Inspect and modify views in the hierarchy.&lt;/li&gt; 
 &lt;li&gt;See the properties and ivars on any object.&lt;/li&gt; 
 &lt;li&gt;Dynamically modify many properties and ivars.&lt;/li&gt; 
 &lt;li&gt;Dynamically call instance and class methods.&lt;/li&gt; 
 &lt;li&gt;Observe detailed network request history with timing, headers, and full responses.&lt;/li&gt; 
 &lt;li&gt;Add your own simulator keyboard shortcuts.&lt;/li&gt; 
 &lt;li&gt;View system log messages (e.g. from &lt;code&gt;NSLog&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;Access any live object via a scan of the heap.&lt;/li&gt; 
 &lt;li&gt;View the file system within your app&#39;s sandbox.&lt;/li&gt; 
 &lt;li&gt;Browse SQLite/Realm databases in the file system.&lt;/li&gt; 
 &lt;li&gt;Trigger 3D touch in the simulator using the control, shift, and command keys.&lt;/li&gt; 
 &lt;li&gt;Explore all classes in your app and linked systems frameworks (public and private).&lt;/li&gt; 
 &lt;li&gt;Quickly access useful objects such as &lt;code&gt;[UIApplication sharedApplication]&lt;/code&gt;, the app delegate, the root view controller on the key window, and more.&lt;/li&gt; 
 &lt;li&gt;Dynamically view and modify &lt;code&gt;NSUserDefaults&lt;/code&gt; values.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Unlike many other debugging tools, FLEX runs entirely inside your app, so you don&#39;t need to be connected to LLDB/Xcode or a different remote debugging server. It works well in the simulator and on physical devices.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;In the iOS simulator, you can use keyboard shortcuts to activate FLEX. &lt;code&gt;f&lt;/code&gt; will toggle the FLEX toolbar. Hit the &lt;code&gt;?&lt;/code&gt; key for a full list of shortcuts. You can also show FLEX programmatically:&lt;/p&gt; 
&lt;p&gt;Short version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// Objective-C
[[FLEXManager sharedManager] showExplorer];
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Swift
FLEXManager.shared.showExplorer()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More complete version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;#if DEBUG
#import &quot;FLEXManager.h&quot;
#endif

...

- (void)handleSixFingerQuadrupleTap:(UITapGestureRecognizer *)tapRecognizer
{
#if DEBUG
    if (tapRecognizer.state == UIGestureRecognizerStateRecognized) {
        // This could also live in a handler for a keyboard shortcut, debug menu item, etc.
        [[FLEXManager sharedManager] showExplorer];
    }
#endif
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Aside: tvOS&lt;/h4&gt; 
&lt;p&gt;FLEX itself does not support tvOS out of the box. However, others have taken it upon themselves to port FLEX to tvOS. If you need tvOS support, seek out one of these forks. &lt;a href=&quot;https://github.com/lechium/FLEX/tree/tvos&quot;&gt;Here is one such fork.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Feature Examples&lt;/h2&gt; 
&lt;h3&gt;Modify Views&lt;/h3&gt; 
&lt;p&gt;Once a view is selected, you can tap on the info bar below the toolbar to present more details about the view. From there, you can modify properties and call methods.&lt;/p&gt; 
&lt;img alt=&quot;Modify Views&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271816-c5c2b480-176c-11ea-8bf4-2c5a755bc392.gif&quot;&gt; 
&lt;h3&gt;Network History&lt;/h3&gt; 
&lt;p&gt;When enabled, network debugging allows you to view all requests made using NSURLConnection or NSURLSession. Settings allow you to adjust what kind of response bodies get cached and the maximum size limit of the response cache. You can choose to have network debugging enabled automatically on app launch. This setting is persisted across launches.&lt;/p&gt; 
&lt;img alt=&quot;Network History&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271876-e5f27380-176c-11ea-98ef-24170205b706.gif&quot;&gt; 
&lt;h3&gt;All Objects on the Heap&lt;/h3&gt; 
&lt;p&gt;FLEX queries malloc for all the live allocated memory blocks and searches for ones that look like objects. You can see everything from here.&lt;/p&gt; 
&lt;img alt=&quot;Heap/Live Objects Explorer&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271850-d83cee00-176c-11ea-9750-ee3a479c6769.gif&quot;&gt; 
&lt;h3&gt;Explore-at-address&lt;/h3&gt; 
&lt;p&gt;If you get your hands on an arbitrary address, you can try explore the object at that address, and FLEX will open it if it can verify the address points to a valid object. If FLEX isn&#39;t sure, it&#39;ll warn you and refuse to dereference the pointer. If you know better, however, you can choose to explore it anyway by choosing &quot;Unsafe Explore&quot;&lt;/p&gt; 
&lt;img alt=&quot;Address Explorer&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271798-bb081f80-176c-11ea-806d-9d74ac293641.gif&quot;&gt; 
&lt;h3&gt;Simulator Keyboard Shortcuts&lt;/h3&gt; 
&lt;p&gt;Default keyboard shortcuts allow you to activate the FLEX tools, scroll with the arrow keys, and close modals using the escape key. You can also add custom keyboard shortcuts via &lt;code&gt;-[FLEXManager registerSimulatorShortcutWithKey:modifiers:action:description]&lt;/code&gt;&lt;/p&gt; 
&lt;img alt=&quot;Simulator Keyboard Shortcuts&quot; width=&quot;40%&quot; height=&quot;40%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70272984-d3793980-176e-11ea-89a2-66d187d71b4c.png&quot;&gt; 
&lt;h3&gt;File Browser&lt;/h3&gt; 
&lt;p&gt;View the file system within your app&#39;s bundle or sandbox container. FLEX shows file sizes, image previews, and pretty prints &lt;code&gt;.json&lt;/code&gt; and &lt;code&gt;.plist&lt;/code&gt; files. You can rename and delete files and folders. You can &quot;share&quot; any file if you want to inspect them outside of your app.&lt;/p&gt; 
&lt;img alt=&quot;File Browser&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271831-d115e000-176c-11ea-8078-ada291f980f3.gif&quot;&gt; 
&lt;h3&gt;SQLite Browser&lt;/h3&gt; 
&lt;p&gt;SQLite database files (with either &lt;code&gt;.db&lt;/code&gt; or &lt;code&gt;.sqlite&lt;/code&gt; extensions), or &lt;a href=&quot;https://realm.io&quot;&gt;Realm&lt;/a&gt; database files can be explored using FLEX. The database browser lets you view all tables, and individual tables can be sorted by tapping column headers.&lt;/p&gt; 
&lt;img alt=&quot;SQLite Browser&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271881-ea1e9100-176c-11ea-9a42-01618311c869.gif&quot;&gt; 
&lt;h3&gt;3D Touch in the Simulator&lt;/h3&gt; 
&lt;p&gt;Using a combination of the command, control, and shift keys, you can simulate different levels of 3D touch pressure in the simulator. Each key contributes 1/3 of maximum possible force. Note that you need to move the touch slightly to get pressure updates.&lt;/p&gt; 
&lt;img alt=&quot;Simulator 3D Touch&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://cloud.githubusercontent.com/assets/1422245/11786615/5d4ef96c-a23c-11e5-975e-67275341e439.gif&quot;&gt; 
&lt;h3&gt;Explore Loaded Libraries&lt;/h3&gt; 
&lt;p&gt;Go digging for all things public and private. To learn more about a class, you can create an instance of it and explore its default state. You can also type in a class name to jump to that class directly if you know which class you&#39;re looking for.&lt;/p&gt; 
&lt;img alt=&quot;Loaded Libraries Exploration&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271868-dffc9280-176c-11ea-8704-a0c05b75cc5f.gif&quot;&gt; 
&lt;h3&gt;NSUserDefaults Editing&lt;/h3&gt; 
&lt;p&gt;FLEX allows you to edit defaults that are any combination of strings, numbers, arrays, and dictionaries. The input is parsed as &lt;code&gt;JSON&lt;/code&gt;. If other kinds of objects are set for a defaults key (i.e. &lt;code&gt;NSDate&lt;/code&gt;), you can view them but not edit them.&lt;/p&gt; 
&lt;img alt=&quot;NSUserDefaults Editing&quot; width=&quot;36%&quot; height=&quot;36%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70271889-edb21800-176c-11ea-92b4-71e07d2b6ce7.gif&quot;&gt; 
&lt;h3&gt;Learning from Other Apps&lt;/h3&gt; 
&lt;p&gt;The code injection is left as an exercise for the reader. &lt;span&gt;😇&lt;/span&gt;&lt;/p&gt; 
&lt;p float=&quot;left&quot;&gt; &lt;img alt=&quot;Springboard Lock Screen&quot; width=&quot;25%&quot; height=&quot;25%&quot; src=&quot;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-1.png&quot;&gt; &lt;img alt=&quot;Springboard Home Screen&quot; width=&quot;25%&quot; height=&quot;25%&quot; src=&quot;https://engineering.flipboard.com/assets/flex/flex-readme-reverse-2.png&quot;&gt; &lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;FLEX requires an app that targets iOS 9 or higher. To run the Example project, open a Terminal window in the Example/ folder and run &lt;code&gt;pod install&lt;/code&gt;, then open the generated workspace.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;FLEX is available on &lt;a href=&quot;https://cocoapods.org/pods/FLEX&quot;&gt;CocoaPods&lt;/a&gt;. Simply add the following line to your podfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;Add the following to your Cartfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;flipboard/FLEX&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Buck&lt;/h3&gt; 
&lt;p&gt;If you&#39;re using Buck, you may want to silence some of the warnings emitted by FLEX. You will need to build FLEX as an &lt;code&gt;apple_library&lt;/code&gt; and pass the &lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt; flag, as well as the other warning flags below to disable any other warnings FLEX may have.&lt;/p&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;Manually add the files in &lt;code&gt;Classes/&lt;/code&gt; to your Xcode project, or just drag in the entire &lt;code&gt;FLEX/&lt;/code&gt; folder. Be sure to exclude FLEX from &lt;code&gt;Release&lt;/code&gt; builds or your app will be rejected.&lt;/p&gt; 
&lt;h5&gt;Silencing warnings&lt;/h5&gt; 
&lt;p&gt;Add the following flags to to &lt;strong&gt;Other Warnings Flags&lt;/strong&gt; in &lt;strong&gt;Build Settings:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-Wno-deprecated-declarations&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-Wno-strict-prototypes&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-Wno-unsupported-availability-guard&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;Include the dependency in the &lt;code&gt;depdendencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/FLEXTool/FLEX.git&quot;, .upToNextMajor(from: &quot;4.3.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, include the library in your target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;.target(
    name: &quot;YourDependency&quot;,
    dependencies: [
        &quot;FLEX&quot;
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Excluding FLEX from Release (App Store) Builds&lt;/h2&gt; 
&lt;p&gt;FLEX makes it easy to explore the internals of your app, so it is not something you should expose to your users. Fortunately, it is easy to exclude FLEX files from Release builds. The strategies differ depending on how you integrated FLEX in your project, and are described below.&lt;/p&gt; 
&lt;p&gt;Wrap the places in your code where you integrate FLEX with an &lt;code&gt;#if DEBUG&lt;/code&gt; statement to ensure the tool is only accessible in your &lt;code&gt;Debug&lt;/code&gt; builds and to avoid errors in your &lt;code&gt;Release&lt;/code&gt; builds. For more help with integrating FLEX, see the example project.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;CocoaPods automatically excludes FLEX from release builds if you only specify the Debug configuration for FLEX in your Podfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;FLEX&#39;, :configurations =&amp;gt; [&#39;Debug&#39;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Do NOT add &lt;code&gt;FLEX.framework&lt;/code&gt; to the embedded binaries of your target, as it would otherwise be included in all builds (therefore also in release ones).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Instead, add &lt;code&gt;$(PROJECT_DIR)/Carthage/Build/iOS&lt;/code&gt; to your target &lt;em&gt;Framework Search Paths&lt;/em&gt; (this setting might already be present if you already included other frameworks with Carthage). This makes it possible to import the FLEX framework from your source files. It does not harm if this setting is added for all configurations, but it should at least be added for the debug one.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a &lt;em&gt;Run Script Phase&lt;/em&gt; to your target (inserting it after the existing &lt;code&gt;Link Binary with Libraries&lt;/code&gt; phase, for example), and which will embed &lt;code&gt;FLEX.framework&lt;/code&gt; in debug builds only:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;if [ &quot;$CONFIGURATION&quot; == &quot;Debug&quot; ]; then
  /usr/local/bin/carthage copy-frameworks
fi
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, add &lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/FLEX.framework&lt;/code&gt; as input file of this script phase.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;img width=&quot;75%&quot; height=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70274062-0d4b3f80-1771-11ea-94ea-ca7e7b5ca244.jpg&quot;&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX*&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; 
&lt;img width=&quot;75%&quot; height=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/1234765/98673373-8545c080-2357-11eb-9587-0743998e23ba.png&quot;&gt; 
&lt;h3&gt;FLEX files added manually to a project&lt;/h3&gt; 
&lt;p&gt;In Xcode, navigate to &lt;code&gt;Build Settings &amp;gt; Build Options &amp;gt; Excluded Source File Names&lt;/code&gt;. For your &lt;code&gt;Release&lt;/code&gt; configuration, set it to &lt;code&gt;FLEX*&lt;/code&gt; like this to exclude all files with the &lt;code&gt;FLEX&lt;/code&gt; prefix:&lt;/p&gt; 
&lt;img width=&quot;75%&quot; height=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/8371943/70281926-e21d1c00-1781-11ea-92eb-aee340791da8.png&quot;&gt; 
&lt;h2&gt;Additional Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;When setting fields of type &lt;code&gt;id&lt;/code&gt; or values in &lt;code&gt;NSUserDefaults&lt;/code&gt;, FLEX attempts to parse the input string as &lt;code&gt;JSON&lt;/code&gt;. This allows you to use a combination of strings, numbers, arrays, and dictionaries. If you want to set a string value, it must be wrapped in quotes. For ivars or properties that are explicitly typed as &lt;code&gt;NSStrings&lt;/code&gt;, quotes are not required.&lt;/li&gt; 
 &lt;li&gt;You may want to disable the exception breakpoint while using FLEX. Certain functions that FLEX uses throw exceptions when they get input they can&#39;t handle (i.e. &lt;code&gt;NSGetSizeAndAlignment()&lt;/code&gt;). FLEX catches these to avoid crashing, but your breakpoint will get hit if it is active.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks &amp;amp; Credits&lt;/h2&gt; 
&lt;p&gt;FLEX builds on ideas and inspiration from open source tools that came before it. The following resources have been particularly helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NSExceptional/MirrorKit&quot;&gt;MirrorKit&lt;/a&gt;: an Objective-C wrapper around the Objective-C runtime.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/domesticcatsoftware/DCIntrospect&quot;&gt;DCIntrospect&lt;/a&gt;: view hierarchy debugging for the iOS simulator.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/square/PonyDebugger&quot;&gt;PonyDebugger&lt;/a&gt;: network, core data, and view hierarchy debugging using the Chrome Developer Tools interface.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/&quot;&gt;Mike Ash&lt;/a&gt;: well written, informative blog posts on all things obj-c and more. The links below were very useful for this project:&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mikeash/MAObjCRuntime&quot;&gt;MAObjCRuntime&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2013-02-08-lets-build-key-value-coding.html&quot;&gt;Let&#39;s Build Key Value Coding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html&quot;&gt;ARM64 and You&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/heardrwt/RHObjectiveBeagle&quot;&gt;RHObjectiveBeagle&lt;/a&gt;: a tool for scanning the heap for live objects. It should be noted that the source code of RHObjectiveBeagle was not consulted due to licensing concerns.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.opensource.apple.com/source/lldb/lldb-179.1/examples/darwin/heap_find/heap/heap_find.cpp&quot;&gt;heap_find.cpp&lt;/a&gt;: an example of enumerating malloc blocks for finding objects on the heap.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/samdmarshall/17f4e66b5e2e579fd396&quot;&gt;Gist&lt;/a&gt; from &lt;a href=&quot;https://github.com/samdmarshall&quot;&gt;@samdmarshall&lt;/a&gt;: another example of enumerating malloc blocks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html&quot;&gt;Non-pointer isa&lt;/a&gt;: an explanation of changes to the isa field on iOS for ARM64 and mention of the useful &lt;code&gt;objc_debug_isa_class_mask&lt;/code&gt; variable.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood/GZIP&quot;&gt;GZIP&lt;/a&gt;: A library for compressing/decompressing data on iOS using libz.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot;&gt;FMDB&lt;/a&gt;: This is an Objective-C wrapper around SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/indragiek/InAppViewDebugger&quot;&gt;InAppViewDebugger&lt;/a&gt;: The inspiration and reference implementation for FLEX 4&#39;s 3D view explorer, by @indragiek.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://github.com/Flipboard/FLEX/raw/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;TODO&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift runtime introspection (swift classes, swift objects on the heap, etc.)&lt;/li&gt; 
 &lt;li&gt;Add new NSUserDefault key/value pairs on the fly&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>BranchMetrics/ios-branch-deep-linking-attribution</title>
      <link>https://github.com/BranchMetrics/ios-branch-deep-linking-attribution</link>
      <description>&lt;p&gt;The Branch iOS SDK for deep linking and attribution. Branch helps mobile apps grow with deep links / deeplinks that power paid acquisition and re-engagement campaigns, referral programs, content sharing, deep linked emails, smart banners, custom user onboarding, and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Branch SDK Documentation for iOS&lt;/h1&gt; 
&lt;p&gt;The Branch iOS SDK for deep linking and attribution.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;h2&gt;Branch Sandbox Program&lt;/h2&gt; 
 &lt;p&gt;As part of this &lt;a href=&quot;https://help.branch.io/developers-hub/docs/branch-sandbox-program&quot;&gt;sandbox program&lt;/a&gt;, you will be able to partner directly with Branch’s Product and Engineering team for exclusive access to test drive our innovative products before the market and proactively exchange valuable feedback. With your support, we will create the winning measurement and linking solutions of the future together.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;If you would like to join, please reach out to us today at &lt;a href=&quot;mailto:sandbox@branch.io&quot; title=&quot;mailto:sandbox@branch.io&quot;&gt;sandbox@branch.io&lt;/a&gt; or by filling out this &lt;a href=&quot;https://branch.link/sandbox?~channel=ios-repo&quot;&gt;form&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Branch helps mobile apps grow with deep links / deeplinks that power paid acquisition and re-engagement campaigns, referral programs, content sharing, deep linked emails, smart banners, custom user onboarding, and more.&lt;/p&gt; 
&lt;p&gt;View &lt;a href=&quot;https://help.branch.io/developers-hub/docs/ios-sdk-overview&quot;&gt;Branch&#39;s SDK documentation for iOS&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CocoaLumberjack/CocoaLumberjack</title>
      <link>https://github.com/CocoaLumberjack/CocoaLumberjack</link>
      <description>&lt;p&gt;A fast &amp; simple, yet powerful &amp; flexible logging framework for macOS, iOS, tvOS and watchOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/LumberjackLogo.png&quot; title=&quot;Lumberjack logo&quot; float=&quot;left&quot;&gt; &lt;/p&gt; 
&lt;h1&gt;CocoaLumberjack&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/CocoaLumberjack/CocoaLumberjack.svg?display_name=tag&amp;amp;style=flat&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/BSD-3-Clause&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/CocoaLumberjack/CocoaLumberjack.svg?style=flat&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoadocs.org/docsets/CocoaLumberjack/&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/CocoaLumberjack.svg?style=flat&quot; alt=&quot;Pod Platform&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack/workflows/Unit%20Tests/badge.svg?sanitize=true&quot; alt=&quot;Unit Tests&quot;&gt; &lt;a href=&quot;https://codecov.io/gh/CocoaLumberjack/CocoaLumberjack&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/CocoaLumberjack/CocoaLumberjack/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codebeat.co/projects/github-com-cocoalumberjack-cocoalumberjack-master&quot;&gt;&lt;img src=&quot;https://codebeat.co/badges/840b714a-c8f3-4936-ada4-363473cd4e6b&quot; alt=&quot;codebeat badge&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;CocoaLumberjack&lt;/strong&gt; is a fast &amp;amp; simple, yet powerful &amp;amp; flexible logging framework for macOS, iOS, tvOS, watchOS and visionOS.&lt;/p&gt; 
&lt;h2&gt;How to get started&lt;/h2&gt; 
&lt;p&gt;First, install CocoaLumberjack via &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;, &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; or manually. Then use &lt;code&gt;DDOSLogger&lt;/code&gt; for iOS 10 and later, or &lt;code&gt;DDTTYLogger&lt;/code&gt; and &lt;code&gt;DDASLLogger&lt;/code&gt; for earlier versions to begin logging messages.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;platform :ios, &#39;11.0&#39;

target &#39;SampleTarget&#39; do
  use_frameworks!
  pod &#39;CocoaLumberjack/Swift&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: &lt;code&gt;Swift&lt;/code&gt; is a subspec which will include all the Obj-C code plus the Swift one, so this is sufficient. For more details about how to use Swift with Lumberjack, see &lt;a href=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack/issues/405&quot;&gt;this conversation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For Objective-C use the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;platform :ios, &#39;11.0&#39;

target &#39;SampleTarget&#39; do
    pod &#39;CocoaLumberjack&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;Carthage is a lightweight dependency manager for Swift and Objective-C. It leverages CocoaTouch modules and is less invasive than CocoaPods.&lt;/p&gt; 
&lt;p&gt;To install with Carthage, follow the instruction on &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Cartfile&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;CocoaLumberjack/CocoaLumberjack&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;As of CocoaLumberjack 3.6.0, you can use the Swift Package Manager as integration method. If you want to use the Swift Package Manager as integration method, either use Xcode to add the package dependency or add the following dependency to your Package.swift:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/CocoaLumberjack/CocoaLumberjack.git&quot;, from: &quot;3.8.0&quot;),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you may need to add both products, &lt;code&gt;CocoaLumberjack&lt;/code&gt; and &lt;code&gt;CocoaLumberjackSwift&lt;/code&gt; to your target since SPM sometimes fails to detect that &lt;code&gt;CocoaLumberjackSwift&lt;/code&gt; depends on &lt;code&gt;CocoaLumberjack&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Install manually&lt;/h3&gt; 
&lt;p&gt;If you want to install CocoaLumberjack manually, read the &lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md#manual-installation&quot;&gt;manual installation&lt;/a&gt; guide for more information.&lt;/p&gt; 
&lt;h3&gt;Swift Usage&lt;/h3&gt; 
&lt;p&gt;Usually, you can simply &lt;code&gt;import CocoaLumberjackSwift&lt;/code&gt;. If you installed CocoaLumberjack using CocoaPods, you need to use &lt;code&gt;import CocoaLumberjack&lt;/code&gt; instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;DDLog.add(DDOSLogger.sharedInstance) // Uses os_log

let fileLogger: DDFileLogger = DDFileLogger() // File Logger
fileLogger.rollingFrequency = 60 * 60 * 24 // 24 hours
fileLogger.logFileManager.maximumNumberOfLogFiles = 7
DDLog.add(fileLogger)

...

DDLogVerbose(&quot;Verbose&quot;)
DDLogDebug(&quot;Debug&quot;)
DDLogInfo(&quot;Info&quot;)
DDLogWarn(&quot;Warn&quot;)
DDLogError(&quot;Error&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Obj-C usage&lt;/h3&gt; 
&lt;p&gt;If you&#39;re using Lumberjack as a framework, you can &lt;code&gt;@import CocoaLumberjack;&lt;/code&gt;. Otherwise, &lt;code&gt;#import &amp;lt;CocoaLumberjack/CocoaLumberjack.h&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;[DDLog addLogger:[DDOSLogger sharedInstance]]; // Uses os_log

DDFileLogger *fileLogger = [[DDFileLogger alloc] init]; // File Logger
fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hour rolling
fileLogger.logFileManager.maximumNumberOfLogFiles = 7;
[DDLog addLogger:fileLogger];

...

DDLogVerbose(@&quot;Verbose&quot;);
DDLogDebug(@&quot;Debug&quot;);
DDLogInfo(@&quot;Info&quot;);
DDLogWarn(@&quot;Warn&quot;);
DDLogError(@&quot;Error&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Objective-C ARC Semantic Issue&lt;/h3&gt; 
&lt;p&gt;When integrating Lumberjack into an existing Objective-C it is possible to run into &lt;code&gt;Multiple methods named &#39;tag&#39; found with mismatched result, parameter type or attributes&lt;/code&gt; build error.&lt;/p&gt; 
&lt;p&gt;Add &lt;code&gt;#define DD_LEGACY_MESSAGE_TAG 0&lt;/code&gt; before importing CocoaLumberjack or add &lt;code&gt;#define DD_LEGACY_MESSAGE_TAG 0&lt;/code&gt; or add &lt;code&gt;-DDD_LEGACY_MESSAGE_TAG=0&lt;/code&gt; to &lt;em&gt;Other C Flags&lt;/em&gt;/&lt;em&gt;OTHER_CFLAGS&lt;/em&gt; in your Xcode project.&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/apple/swift-log&quot;&gt;swift-log&lt;/a&gt; backend&lt;/h2&gt; 
&lt;p&gt;CocoaLumberjack also ships with a backend implementation for &lt;a href=&quot;https://github.com/apple/swift-log&quot;&gt;swift-log&lt;/a&gt;. Simply add CocoaLumberjack as dependency to your SPM target (see above) and also add the &lt;code&gt;CocoaLumberjackSwiftLogBackend&lt;/code&gt; product as dependency to your target.&lt;/p&gt; 
&lt;p&gt;You can then use &lt;code&gt;DDLogHandler&lt;/code&gt; as backend for swift-log, which will forward all messages to CocoaLumberjack&#39;s &lt;code&gt;DDLog&lt;/code&gt;. You will still configure the loggers and log formatters you want via &lt;code&gt;DDLog&lt;/code&gt;, but writing log messages will be done using &lt;code&gt;Logger&lt;/code&gt; from swift-log.&lt;/p&gt; 
&lt;p&gt;In your own log formatters, you can make use of the &lt;code&gt;swiftLogInfo&lt;/code&gt; property on &lt;code&gt;DDLogMessage&lt;/code&gt; to retrieve the details of a message that is logged via swift-log.&lt;/p&gt; 
&lt;p&gt;To use swift-log with CocoaLumberjack, take a look the following code snippet to see how to get started.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import CocoaLumberjack
import CocoaLumberjackSwiftLogBackend
import Logging

// In your application&#39;s entry point (e.g. AppDelegate):
DDLog.add(DDOSLogger.sharedInstance) // Configure loggers
LoggingSystem.bootstrapWithCocoaLumberjack() // Use CocoaLumberjack as swift-log backend
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;read the &lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md&quot;&gt;Getting started&lt;/a&gt; guide, check out the &lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/FAQ.md&quot;&gt;FAQ&lt;/a&gt; section or the other &lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/&quot;&gt;docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;if you find issues or want to suggest improvements, create an issue or a pull request&lt;/li&gt; 
 &lt;li&gt;for all kinds of questions involving CocoaLumberjack, use the &lt;a href=&quot;https://groups.google.com/group/cocoalumberjack&quot;&gt;Google group&lt;/a&gt; or StackOverflow (use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/lumberjack&quot;&gt;#lumberjack&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;CocoaLumberjack 3&lt;/h2&gt; 
&lt;h3&gt;Migrating to 3.x&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;To be determined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Lumberjack is Fast &amp;amp; Simple, yet Powerful &amp;amp; Flexible.&lt;/h3&gt; 
&lt;p&gt;It is similar in concept to other popular logging frameworks such as log4j, yet is designed specifically for Objective-C, and takes advantage of features such as multi-threading, grand central dispatch (if available), lockless atomic operations, and the dynamic nature of the Objective-C runtime.&lt;/p&gt; 
&lt;h3&gt;Lumberjack is Fast&lt;/h3&gt; 
&lt;p&gt;In most cases it is an order of magnitude faster than NSLog.&lt;/p&gt; 
&lt;h3&gt;Lumberjack is Simple&lt;/h3&gt; 
&lt;p&gt;It takes as little as a single line of code to configure lumberjack when your application launches. Then simply replace your NSLog statements with DDLog statements and that&#39;s about it. (And the DDLog macros have the exact same format and syntax as NSLog, so it&#39;s super easy.)&lt;/p&gt; 
&lt;h3&gt;Lumberjack is Powerful:&lt;/h3&gt; 
&lt;p&gt;One log statement can be sent to multiple loggers, meaning you can log to a file and the console simultaneously. Want more? Create your own loggers (it&#39;s easy) and send your log statements over the network. Or to a database or distributed file system. The sky is the limit.&lt;/p&gt; 
&lt;h3&gt;Lumberjack is Flexible:&lt;/h3&gt; 
&lt;p&gt;Configure your logging however you want. Change log levels per file (perfect for debugging). Change log levels per logger (verbose console, but concise log file). Change log levels per xcode configuration (verbose debug, but concise release). Have your log statements compiled out of the release build. Customize the number of log levels for your application. Add your own fine-grained logging. Dynamically change log levels during runtime. Choose how &amp;amp; when you want your log files to be rolled. Upload your log files to a central server. Compress archived log files to save disk space...&lt;/p&gt; 
&lt;h2&gt;This framework is for you if:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;You&#39;re looking for a way to track down that impossible-to-reproduce bug that keeps popping up in the field.&lt;/li&gt; 
 &lt;li&gt;You&#39;re frustrated with the super short console log on the iPhone.&lt;/li&gt; 
 &lt;li&gt;You&#39;re looking to take your application to the next level in terms of support and stability.&lt;/li&gt; 
 &lt;li&gt;You&#39;re looking for an enterprise level logging solution for your application (Mac or iPhone).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/GettingStarted.md&quot;&gt;Get started using Lumberjack&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/XcodeTricks.md&quot;&gt;Different log levels for Debug and Release builds&lt;/a&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/PerLoggerLogLevels.md&quot;&gt;Different log levels for each logger&lt;/a&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/XcodeColors.md&quot;&gt;Use colors in the Xcode debugging console&lt;/a&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/CustomFormatters.md&quot;&gt;Write your own custom formatters&lt;/a&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/FAQ.md&quot;&gt;FAQ&lt;/a&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/Performance.md&quot;&gt;Analysis of performance with benchmarks&lt;/a&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/ProblemSolution.md&quot;&gt;Common issues you may encounter and their solutions&lt;/a&gt;&lt;br&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/AppCode-support.md&quot;&gt;AppCode support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/&quot;&gt;Full Lumberjack documentation&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;The current version of Lumberjack requires:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode 14.1 or later&lt;/li&gt; 
 &lt;li&gt;Swift 5.5 or later&lt;/li&gt; 
 &lt;li&gt;macOS 10.13 or later&lt;/li&gt; 
 &lt;li&gt;iOS 11 or later&lt;/li&gt; 
 &lt;li&gt;tvOS 11 or later&lt;/li&gt; 
 &lt;li&gt;watchOS 4 or later&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Backwards compatibility&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;for iOS/tvOS up to 10, watchOS up to 3, macOS up to 10.12, Xcode up to 13 and Swift up to 5.4, use the 3.7.4 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 11 and Swift up to 5.2, use the 3.6.2 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 10 and Swift 4.2, use the 3.5.2 version&lt;/li&gt; 
 &lt;li&gt;for iOS 8, use the 3.6.1 version&lt;/li&gt; 
 &lt;li&gt;for iOS 6, iOS 7, OS X 10.8, OS X 10.9 and Xcode 9, use the 3.4.2 version&lt;/li&gt; 
 &lt;li&gt;for iOS 5 and OS X 10.7, use the 3.3 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 8 and Swift 3, use the 3.2 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 7.3 and Swift 2.3, use the 2.4.0 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 7.3 and Swift 2.2, use the 2.3.0 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 7.2 and 7.1, use the 2.2.0 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 7.0 or earlier, use the 2.1.0 version&lt;/li&gt; 
 &lt;li&gt;for Xcode 6 or earlier, use the 2.0.x version&lt;/li&gt; 
 &lt;li&gt;for OS X &amp;lt; 10.7 support, use the 1.6.0 version&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/lumberjack&quot;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;lumberjack&#39;)&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/lumberjack&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Data Collection Practices&lt;/h2&gt; 
&lt;p&gt;Per &lt;a href=&quot;https://developer.apple.com/app-store/app-privacy-details/&quot;&gt;App privacy details on the App Store&lt;/a&gt;, Apple is requesting app developers to provide info about their data collection, us SDK maintainers must provide them with the same data.&lt;/p&gt; 
&lt;h3&gt;Data collection by the framework&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;By default, CocoaLumberjack does NOT collect any data on its own.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoalumberjack.github.io/DataCollection/index.html&quot;&gt;See our Data Collection Practices list.&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Indirect data collection through the framework&lt;/h3&gt; 
&lt;p&gt;CocoaLumberjack is a logging framework which makes it easy to send those logs to different platforms.&lt;/p&gt; 
&lt;p&gt;This is why collecting data might happen quite easily, if app developers include any sensitive data into their log messages.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important note: app developers are fully responsible for any sensitive data collected through our logging system!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In consequence, you must comply to the Apple&#39;s privacy details policy (mentioned above) and document the ways in which user data is being collected. Since the number of scenarios where data might be indirectly collected through CocoaLumberjack is quite large, it&#39;s up to you, as app developers, to properly review your app&#39;s code and identify those cases. What we can do to help is raise awareness about potential data collection through our framework.&lt;/p&gt; 
&lt;p&gt;Private data includes but isn&#39;t limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;user info (name, email, address, ...)&lt;/li&gt; 
 &lt;li&gt;location info&lt;/li&gt; 
 &lt;li&gt;contacts&lt;/li&gt; 
 &lt;li&gt;identifiers (user id, device id, ...)&lt;/li&gt; 
 &lt;li&gt;app usage data&lt;/li&gt; 
 &lt;li&gt;performance data&lt;/li&gt; 
 &lt;li&gt;health and fitness info&lt;/li&gt; 
 &lt;li&gt;financial info&lt;/li&gt; 
 &lt;li&gt;sensitive info&lt;/li&gt; 
 &lt;li&gt;user content&lt;/li&gt; 
 &lt;li&gt;history (browsing, search, ...)&lt;/li&gt; 
 &lt;li&gt;purchases&lt;/li&gt; 
 &lt;li&gt;diagnostics&lt;/li&gt; 
 &lt;li&gt;...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;DDLogInfo(&quot;User: \(myUser)&quot;)&lt;/code&gt; will add the &lt;code&gt;myUser&lt;/code&gt; info to the logs, so if those are forwarded to a 3rd party or sent via email, that may qualify as data collection.&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/robbiehanson&quot;&gt;Robbie Hanson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Love the project? Wanna buy me a coffee? (or a beer :D) &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=UZRA26JPJB3DA&quot;&gt;&lt;img src=&quot;https://www.paypal.com/en_US/i/btn/btn_donate_SM.gif&quot; alt=&quot;donation&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Collaborators&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rivera-ernesto&quot;&gt;Ernesto Rivera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dvor&quot;&gt;Dmitry Vorobyov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bpoplauschi&quot;&gt;Bogdan Poplauschi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MaddTheSane&quot;&gt;C.W. Betts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sushichop&quot;&gt;Koichi Yokota (sushichop)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nrbrook&quot;&gt;Nick Brook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ffried&quot;&gt;Florian Friedrich&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/diederich&quot;&gt;Stephan Diederich&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ksuther&quot;&gt;Kent Sutherland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lolgear&quot;&gt;Dmitry Lobanov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hhanesand&quot;&gt;Hakon Hanesand&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;CocoaLumberjack is available under the BSD 3 license. See the &lt;a href=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/LICENSE&quot;&gt;LICENSE file&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Extensions&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gruffins/birch-lumberjack&quot;&gt;Birch-Lumberjack&lt;/a&gt; A remote logger for CocoaLumberjack&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bugfender/BugfenderSDK-CocoaLumberjack&quot;&gt;BugfenderSDK-CocoaLumberjack&lt;/a&gt; A Bugfender logger for CocoaLumberjack&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/s4nchez/LogIO-CocoaLumberjack&quot;&gt;LogIO-CocoaLumberjack&lt;/a&gt; A log.io logger for CocoaLumberjack&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/0xced/XCDLumberjackNSLogger&quot;&gt;XCDLumberjackNSLogger&lt;/a&gt; CocoaLumberjack logger which sends logs to NSLogger&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/CocoaLumberjack/CocoaLumberjack/master/Documentation/CocoaLumberjackClassDiagram.png&quot; title=&quot;CocoaLumberjack class diagram&quot;&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>braze-inc/braze-swift-sdk</title>
      <link>https://github.com/braze-inc/braze-swift-sdk</link>
      <description>&lt;p&gt;Braze SDK for the Apple ecosystem, including: iOS, macOS, iPadOS, visionOS, tvOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;480&quot; alt=&quot;Braze Logo&quot; src=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/.github/assets/logo-light.png#gh-light-mode-only&quot;&gt; &lt;img width=&quot;480&quot; alt=&quot;Braze Logo&quot; src=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/.github/assets/logo-dark.png#gh-dark-mode-only&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk/releases&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/version/11.8.0/blue&quot; alt=&quot;Version: 11.8.0&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/#&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/platforms/iOS%20%7C%20visionOS%20%7C%20tvOS%20%7C%20Mac%20Catalyst/orange&quot; alt=&quot;Platforms: iOS - visionOS – tvOS – Mac Catalyst&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/#&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/package%20managers/SwiftPM%20%7C%20CocoaPods/green&quot; alt=&quot;Package Managers: SwiftPM - CocoaPods&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk/raw/main/LICENSE&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/license/Commercial/black&quot; alt=&quot;License: Commercial&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Braze Swift SDK&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.braze.com/docs/user_guide/introduction/&quot; title=&quot;Braze User Guide&quot;&gt;Braze User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://braze-inc.github.io/braze-swift-sdk&quot;&gt;Braze Swift SDK Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://braze-inc.github.io/braze-swift-sdk/documentation/braze/appboy-migration-guide&quot;&gt;Appboy-iOS-SDK: Migration guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Version Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The Braze Swift SDK supports 
  &lt;ul&gt; 
   &lt;li&gt;iOS 12.0+&lt;/li&gt; 
   &lt;li&gt;Mac Catalyst 13.0+&lt;/li&gt; 
   &lt;li&gt;tvOS 12.0+&lt;/li&gt; 
   &lt;li&gt;visionOS 1.0+&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Xcode 15.2 (15C500b) or newer&lt;/li&gt; 
 &lt;li&gt;This repository follows &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Package Managers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift Package Manager&lt;/li&gt; 
 &lt;li&gt;CocoaPods&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Libraries&lt;/h2&gt; 
&lt;!-- Table generated with https://www.tablesgenerator.com/markdown_tables --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;iOS&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;tvOS&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;macCatatyst&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;visionOS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeKit&lt;/strong&gt;&lt;br&gt; &lt;em&gt;Main SDK library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/data_and_analytics/user_data_collection/sdk_data_collection/&quot;&gt;analytics&lt;/a&gt; and &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/push&quot;&gt;push notifications&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeUI&lt;/strong&gt;&lt;br&gt; &lt;em&gt;Braze-provided user interface library for &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/in-app_messages&quot;&gt;In-App Messages&lt;/a&gt; and &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/content_cards&quot;&gt;Content Cards&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeLocation&lt;/strong&gt;&lt;br&gt; &lt;em&gt;Location library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/engagement_tools/locations_and_geofences&quot;&gt;location analytics and geofence monitoring&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeNotificationService&lt;/strong&gt;&lt;br&gt; &lt;em&gt;Notification service extension library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/push/ios/rich_notifications/&quot;&gt;rich push notifications&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazePushStory&lt;/strong&gt;&lt;br&gt; &lt;em&gt;Notification content extension library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/push/advanced_push_options/push_stories/&quot;&gt;Push Stories&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;em&gt;Push notifications not supported on tvOS&lt;/em&gt;&lt;br&gt; &lt;sup&gt;2&lt;/sup&gt; &lt;em&gt;Geofence monitoring not supported on tvOS and visionOS&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Explore our &lt;a href=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/Examples&quot;&gt;examples project&lt;/a&gt; which showcases multiple features&#39; integrations.&lt;/p&gt; 
&lt;h2&gt;Wrapper Support&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;Wrapper SDK&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;Swift SDK Support&lt;/th&gt; 
   &lt;th&gt;Release Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;React Native&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;2.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Flutter&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;3.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Cordova&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;2.33.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Unity&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;4.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Xamarin&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;4.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Alternative Repositories&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variant&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;Repository&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;GH Issues, SDK info&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;→ &lt;strong&gt;Sources and Static XCFrameworks&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk&quot;&gt;braze-inc/braze-swift-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Static XCFrameworks&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk-prebuilt-static&quot;&gt;braze-inc/braze-swift-sdk-prebuilt-static&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✗&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dynamic XCFrameworks&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk-prebuilt-dynamic&quot;&gt;braze-inc/braze-swift-sdk-prebuilt-dynamic&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✗&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mergeable XCFrameworks (early access)&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk-prebuilt-mergeable&quot;&gt;braze-inc/braze-swift-sdk-prebuilt-mergeable&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✗&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;&lt;code&gt;Appboy-iOS-SDK&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;As of version 5.8.0, the Braze Swift SDK provides all the features available in the &lt;code&gt;Appboy-iOS-SDK&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We recommend all users to migrate to the Braze Swift SDK. For more information, please refer to our &lt;a href=&quot;https://braze-inc.github.io/braze-swift-sdk/documentation/braze/appboy-migration-guide&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;Appboy-iOS-SDK&lt;/code&gt; (Objective-C) SDK is now in maintenance mode, which means only critical bug fixes, and security updates will be made. No new features or minor bug fixes will be added to that library.&lt;/p&gt; 
&lt;h2&gt;Questions?&lt;/h2&gt; 
&lt;p&gt;If you have questions, please contact &lt;a href=&quot;mailto:support@braze.com&quot;&gt;support@braze.com&lt;/a&gt; or open a &lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk/issues&quot;&gt;Github Issue&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/GoogleSignIn-iOS</title>
      <link>https://github.com/google/GoogleSignIn-iOS</link>
      <description>&lt;p&gt;Enables iOS and macOS apps to sign in with Google.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/GoogleSignIn&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/GoogleSignIn.svg?style=flat&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleSignIn&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/GoogleSignIn.svg?style=flat&quot; alt=&quot;Platform&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleSignIn&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/GoogleSignIn.svg?style=flat&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/unit_tests.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/unit_tests.yml/badge.svg?branch=main&quot; alt=&quot;unit_tests&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/integration_tests.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/integration_tests.yml/badge.svg?branch=main&quot; alt=&quot;integration_tests&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Google Sign-In for iOS and macOS&lt;/h1&gt; 
&lt;p&gt;Get users into your apps quickly and securely, using a registration system they already use and trust—their Google account.&lt;/p&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://developers.google.com/identity/sign-in/ios/&quot;&gt;our developer site&lt;/a&gt; for integration instructions, documentation, support information, and terms of service.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Try either the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/ObjC&quot;&gt;Objective-C&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift&quot;&gt;Swift&lt;/a&gt; sample app. For example, to demo the Objective-C sample project, you have two options:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Using CocoaPod&#39;s &lt;code&gt;install&lt;/code&gt; method:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS
cd GoogleSignIn-iOS/Samples/ObjC/SignInSample/
pod install
open SignInSampleForPod.xcworkspace
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Using &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS
open GoogleSignIn-iOS/Samples/ObjC/SignInSample/SignInSample.xcodeproj
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like to see a Swift example, take a look at &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift/DaysUntilBirthday&quot;&gt;Samples/Swift/DaysUntilBirthday&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add Google Sign-In to your own app by following our &lt;a href=&quot;https://developers.google.com/identity/sign-in/ios/start-integrating&quot;&gt;getting started guides&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Take a look at the &lt;a href=&quot;https://developers.google.com/identity/sign-in/ios/api/&quot;&gt;API reference&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Google Sign-In on macOS&lt;/h2&gt; 
&lt;p&gt;Google Sign-In allows your users to sign-in to your native macOS app using their Google account and default browser. When building for macOS, the &lt;code&gt;signInWithConfiguration:&lt;/code&gt; and &lt;code&gt;addScopes:&lt;/code&gt; methods take a &lt;code&gt;presentingWindow:&lt;/code&gt; parameter in place of &lt;code&gt;presentingViewController:&lt;/code&gt;. Note that in order for your macOS app to store credientials via the Keychain on macOS, you will need to &lt;a href=&quot;https://developer.apple.com/support/code-signing/&quot;&gt;sign your app&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Mac Catalyst&lt;/h3&gt; 
&lt;p&gt;Google Sign-In also supports iOS apps that are built for macOS via &lt;a href=&quot;https://developer.apple.com/mac-catalyst/&quot;&gt;Mac Catalyst&lt;/a&gt;. In order for your Mac Catalyst app to store credientials via the Keychain on macOS, you will need to &lt;a href=&quot;https://developer.apple.com/support/code-signing/&quot;&gt;sign your app&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Using the Google Sign-In Button&lt;/h2&gt; 
&lt;p&gt;There are several ways to add a &#39;Sign in with Google&#39; button to your app, which path you choose will depend on your UI framework and target platform.&lt;/p&gt; 
&lt;h3&gt;SwiftUI (iOS and macOS)&lt;/h3&gt; 
&lt;p&gt;Creating a &#39;Sign in with Google&#39; button in SwiftUI can be as simple as this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GoogleSignInButton {
  GIDSignIn.sharedInstance.signIn(withPresenting: yourViewController) { signInResult, error in
      // check `error`; do something with `signInResult`
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This example takes advantage of the initializer&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButton.swift#L39&quot;&gt;default argument for the view model&lt;/a&gt;. The default arguments for the view model will use the light scheme, the standard button style, and the normal button state. You can supply an instance of &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButtonViewModel.swift&quot;&gt;&lt;code&gt;GoogleSignInButtonViewModel&lt;/code&gt;&lt;/a&gt; with different values for these properties to customize the button. &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButton.swift#L56&quot;&gt;This convenience initializer&lt;/a&gt; provides parameters that you can use to set these values as needed.&lt;/p&gt; 
&lt;h3&gt;UIKit (iOS)&lt;/h3&gt; 
&lt;p&gt;If you are not using SwiftUI to build your user interfaces, you can either create &lt;code&gt;GIDSignInButton&lt;/code&gt; programmatically, or in a Xib/Storyboard. If you are writing programmatic UI code, it will look something like this:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;let button = GIDSignInButton(frame: CGRect(&amp;lt;YOUR_RECT&amp;gt;))&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;AppKit (macOS)&lt;/h3&gt; 
&lt;p&gt;Given that &lt;code&gt;GIDSignInButton&lt;/code&gt; is implemented as a subclass of &lt;code&gt;UIControl&lt;/code&gt;, it will not be available on macOS. You can instead use the SwiftUI Google sign-in button. Doing so will require that you wrap the SwiftUI button in a hosting view so that it will be available for use in AppKit.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;let signInButton = GoogleSignInButton {
  GIDSignIn.sharedInstance.signIn(withPresenting: yourViewController) { signInResult, error in
      // check `error`; do something with `signInResult`
  }
}
let hostedButton = NSHostingView(rootView: signInButton)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>AliSoftware/OHHTTPStubs</title>
      <link>https://github.com/AliSoftware/OHHTTPStubs</link>
      <description>&lt;p&gt;Stub your network requests easily! Test your apps with fake network data and custom response time, response code and headers!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OHHTTPStubs&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoadocs.org/docsets/OHHTTPStubs&quot;&gt;&lt;img src=&quot;http://cocoapod-badges.herokuapp.com/p/OHHTTPStubs/badge.png&quot; alt=&quot;Platform&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-2.x%2F3.x%2F4.x%2F5.x-orange.svg?sanitize=true&quot; alt=&quot;Language: Swift-2.x/3.x/4.x/5.x&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/AliSoftware/OHHTTPStubs&quot;&gt;&lt;img src=&quot;https://travis-ci.org/AliSoftware/OHHTTPStubs.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoadocs.org/docsets/OHHTTPStubs&quot;&gt;&lt;img src=&quot;http://cocoapod-badges.herokuapp.com/v/OHHTTPStubs/badge.png&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/carthage-supported-4BC51D.svg?style=flat&quot; alt=&quot;Carthage Supported&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/spm-supported-4BC51D.svg?style=flat&quot; alt=&quot;Swift Package Manager Supported&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is a library designed to stub your network requests very easily. It can help you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;test your apps with &lt;strong&gt;fake network data&lt;/strong&gt; (stubbed from file) and &lt;strong&gt;simulate slow networks&lt;/strong&gt;, to check your application behavior in bad network conditions&lt;/li&gt; 
 &lt;li&gt;write &lt;strong&gt;unit tests&lt;/strong&gt; that use fake network data from your fixtures.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It works with &lt;code&gt;NSURLConnection&lt;/code&gt;, &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;AFNetworking&lt;/code&gt;, &lt;code&gt;Alamofire&lt;/code&gt; or any networking framework that use Cocoa&#39;s URL Loading System.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&quot; title=&quot;Donate&quot;&gt;&lt;img alt=&quot;Donate&quot; src=&quot;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&quot; height=&quot;32px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;Documentation &amp;amp; Usage Examples&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; headers are fully documented using Appledoc-like / Headerdoc-like comments in the header files. You can also &lt;a href=&quot;http://cocoadocs.org/docsets/OHHTTPStubs&quot;&gt;read the &lt;strong&gt;online documentation&lt;/strong&gt; here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Basic example&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;In Objective-C&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;[HTTPStubs stubRequestsPassingTest:^BOOL(NSURLRequest *request) {
  return [request.URL.host isEqualToString:@&quot;mywebservice.com&quot;];
} withStubResponse:^HTTPStubsResponse*(NSURLRequest *request) {
  // Stub it with our &quot;wsresponse.json&quot; stub file (which is in same bundle as self)
  NSString* fixture = OHPathForFile(@&quot;wsresponse.json&quot;, self.class);
  return [HTTPStubsResponse responseWithFileAtPath:fixture
            statusCode:200 headers:@{@&quot;Content-Type&quot;:@&quot;application/json&quot;}];
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details open=&quot;1&quot;&gt; 
 &lt;summary&gt;In Swift&lt;/summary&gt; 
 &lt;p&gt;This example is using the Swift helpers found in &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; provided by the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec or &lt;code&gt;OHHTTPStubs&lt;/code&gt; package.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;stub(condition: isHost(&quot;mywebservice.com&quot;)) { _ in
  // Stub it with our &quot;wsresponse.json&quot; stub file (which is in same bundle as self)
  let stubPath = OHPathForFile(&quot;wsresponse.json&quot;, type(of: self))
  return fixture(filePath: stubPath!, headers: [&quot;Content-Type&quot;:&quot;application/json&quot;])
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you&#39;re using &lt;code&gt;OHHTTPStubs&lt;/code&gt;&#39;s Swiftier API (&lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt; and the &lt;code&gt;Swift&lt;/code&gt; subspec or &lt;code&gt;OHTTPStubsSwift&lt;/code&gt; package), you can also compose the matcher functions like this: &lt;code&gt;stub(isScheme(&quot;http&quot;) &amp;amp;&amp;amp; isHost(&quot;myhost&quot;)) { … }&lt;/code&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;More examples &amp;amp; Help Topics&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;For a lot more examples, see the dedicated &quot;&lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/wiki/Usage-Examples&quot;&gt;Usage Examples&lt;/a&gt;&quot; wiki page.&lt;/li&gt; 
 &lt;li&gt;The wiki also contain &lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/wiki&quot;&gt;some articles that can help you get started&lt;/a&gt; with (and troubleshoot if needed) &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Recording requests to replay them later&lt;/h2&gt; 
&lt;p&gt;Instead of writing the content of the stubs you want to use manually, you can use tools like &lt;a href=&quot;https://github.com/capitalone/SWHttpTrafficRecorder&quot;&gt;SWHttpTrafficRecorder&lt;/a&gt; to record network requests into files. This way you can later use those files as stub responses.&lt;br&gt; This tool can record all three formats that are supported by &lt;code&gt;OHHTTPStubs&lt;/code&gt; (the &lt;code&gt;HTTPMessage&lt;/code&gt; format, the simple response boby/content file, and the &lt;code&gt;Mocktail&lt;/code&gt; format).&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;(There are also other ways to perform a similar task, including using &lt;code&gt;curl -is &amp;lt;url&amp;gt; &amp;gt;foo.response&lt;/code&gt; to generate files compatible with the &lt;code&gt;HTTPMessage&lt;/code&gt; format, or using other network recording libraries similar to &lt;code&gt;SWHttpTrafficRecorder&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;Compatibility&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with &lt;strong&gt;iOS5+&lt;/strong&gt;, &lt;strong&gt;OS X 10.7+&lt;/strong&gt;, &lt;strong&gt;tvOS&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; also works with &lt;code&gt;NSURLSession&lt;/code&gt; as well as any network library wrapping them.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is &lt;strong&gt;fully compatible with Swift 3.x, 4.x and Swift 5.x&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://developer.apple.com/swift/blog/?id=25&quot;&gt;Nullability annotations&lt;/a&gt; have also been added to the ObjC API to allow a cleaner API when used from Swift even if you don&#39;t use the dedicated Swift API wrapper provided by &lt;code&gt;OHHTTPStubsSwift.swift&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Updating to Version 9.0+&lt;/b&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;All classes dropped the &lt;code&gt;OH&lt;/code&gt; prefix (&lt;code&gt;OHHHTTPStubs&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubs&lt;/code&gt;, &lt;code&gt;OHHTTPStubsResponse&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPStubsResponse&lt;/code&gt;, etc).&lt;/li&gt; 
  &lt;li&gt;The &lt;code&gt;OHPathHelpers&lt;/code&gt; class was renamed &lt;code&gt;HTTPStubsPathHelpers&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;No method and module names were changed.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h1&gt;Installing in your projects&lt;/h1&gt; 
&lt;h2&gt;CocoaPods&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://guides.cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is the recommended way.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Objective-C only&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;intend to use &lt;code&gt;OHHTTPStubs&lt;/code&gt; from Swift&lt;/strong&gt;, add &lt;code&gt;pod &#39;OHHTTPStubs/Swift&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; instead.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;OHHTTPStubs/Swift&#39; # includes the Default subspec, with support for NSURLSession &amp;amp; JSON, and the Swiftier API wrappers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;All available subspecs&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is split into subspecs so that when using Cocoapods, you can get only what you need, no more, no less.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The default subspec includes &lt;code&gt;NSURLSession&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, and &lt;code&gt;OHPathHelpers&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;Swift&lt;/code&gt; subspec adds the Swiftier API to that default subspec&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; are opt-in subspecs: list them explicitly if you need them&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OHPathHelpers&lt;/code&gt; doesn&#39;t depend on &lt;code&gt;Core&lt;/code&gt; and can be used independently of &lt;code&gt;OHHTTPStubs&lt;/code&gt; altogether&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;List of all the subspecs &amp;amp; their dependencies&lt;/summary&gt; 
 &lt;p&gt;Here&#39;s a list of which subspecs are included for each of the different lines you could use in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Subspec&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;Core&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;NSURLSession&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;JSON&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;Swift&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;OHPathHelpers&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;HTTPMessage&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;Mocktail&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Default&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Swift&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Core&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/NSURLSession&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/JSON&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/OHPathHelpers&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/HTTPMessage&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;pod&amp;nbsp;&#39;OHHTTPStubs/Mocktail&#39;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;Swift Package Manager&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is compatible with Swift Package Manager, and provides 2 targets for consumption: &lt;code&gt;OHHTTPStubs&lt;/code&gt; and &lt;code&gt;OHHTTPStubsSwift&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs&lt;/code&gt; subspec.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OHHTTPStubsSwift&lt;/code&gt; is equivalent to the &lt;code&gt;OHHTTPStubs/Swift&lt;/code&gt; subspec.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Note: We currently do not have support for the HTTPMessage or Mocktail subspecs in Swift Package Manager. If you are interested in these, please open an issue to explain your needs.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Carthage&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is also compatible with Carthage. Just add it to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;OHHTTPStubs.framework&lt;/code&gt; built with Carthage will include &lt;strong&gt;all&lt;/strong&gt; features of &lt;code&gt;OHHTTPStubs&lt;/code&gt; turned on (in other words, all subspecs of the pod), including &lt;code&gt;NSURLSession&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; support, &lt;code&gt;OHPathHelpers&lt;/code&gt;, &lt;code&gt;HTTPMessage&lt;/code&gt; and &lt;code&gt;Mocktail&lt;/code&gt; support, and the Swiftier API.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Using the right Swift version for your project&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; supports Swift 3.0 (Xcode 8+), Swift 3.1 (Xcode 8.3+), Swift 3.2 (Xcode 9.0+), Swift 4.0 (Xcode 9.0+), Swift 4.1 (Xcode 9.3+), Swift 4.2 (Xcode 10+), Swift 5.0 (Xcode 10.2), and Swift 5.1 (Xcode 11) however we are only testing Swift 4.x (using Xcode 9.1 and 10.1) and Swift 5.x (using Xcode 10.2 AND 11) in CI.&lt;/p&gt; 
&lt;p&gt;Here are some details about the correct setup you need depending on how you integrated &lt;code&gt;OHHTTPStubs&lt;/code&gt; into your project.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;CocoaPods: nothing to do&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;If you use CocoaPods version &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/releases/tag/1.1.0.beta.1&quot;&gt;&lt;code&gt;1.1.0.beta.1&lt;/code&gt;&lt;/a&gt; or later, then CocoaPods will compile &lt;code&gt;OHHTTPStubs&lt;/code&gt; with the right Swift Version matching the one you use for your project automatically. You have nothing to do! 🎉&lt;/p&gt; 
 &lt;p&gt;For more info, see &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/pull/5540&quot;&gt;CocoaPods/CocoaPods#5540&lt;/a&gt; and &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/pull/5760&quot;&gt;CocoaPods/CocoaPods#5760&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Carthage: choose the right version&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;The project is set up with &lt;code&gt;SWIFT_VERSION=5.0&lt;/code&gt; on &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;This means that the framework on &lt;code&gt;master&lt;/code&gt; will build using:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Swift 5.1 on Xcode 11&lt;/li&gt; 
  &lt;li&gt;Swift 5.0 on Xcode 10.2&lt;/li&gt; 
  &lt;li&gt;Swift 4.2 on Xcode 10.1&lt;/li&gt; 
  &lt;li&gt;Swift 4.0 on Xcode 9.1&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;If you want Carthage to build the framework with Swift 3.x you can:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;either use an older Xcode version&lt;/li&gt; 
  &lt;li&gt;or use the previous version of &lt;code&gt;OHHTTPStubs&lt;/code&gt; (6.2.0) — whose &lt;code&gt;master&lt;/code&gt; branch uses &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;or fork the repo just to change the &lt;code&gt;SWIFT_VERSION&lt;/code&gt; build setting to &lt;code&gt;3.0&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;or build the framework passing a &lt;code&gt;SWIFT_VERSION&lt;/code&gt; to carthage via &lt;code&gt;XCODE_XCCONFIG_FILE=&amp;lt;config file declaring SWIFT_VERSION&amp;gt; carthage build&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h1&gt;Special Considerations&lt;/h1&gt; 
&lt;h2&gt;Using OHHTTPStubs in your unit tests&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is ideal to write unit tests that normally would perform network requests. But if you use it in your unit tests, don&#39;t forget to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;remove any stubs you installed after each test — to avoid those stubs to still be installed when executing the next Test Case — by calling &lt;code&gt;[HTTPStubs removeAllStubs]&lt;/code&gt; in your &lt;code&gt;tearDown&lt;/code&gt; method. &lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/wiki/Remove-stubs-after-each-test&quot;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;be sure to wait until the request has received its response before doing your assertions and letting the test case finish (like for any asynchronous test). &lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/wiki/OHHTTPStubs-and-asynchronous-tests&quot;&gt;see this wiki page for more info&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Automatic loading&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; is automatically loaded and installed (at the time the library is loaded in memory), both for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;requests made using &lt;code&gt;NSURLConnection&lt;/code&gt; or &lt;code&gt;[NSURLSession sharedSession]&lt;/code&gt; — &lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/OHHTTPStubs.m#L107-L113&quot;&gt;thanks to this code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;requests made using a &lt;code&gt;NSURLSession&lt;/code&gt; that was created via &lt;code&gt;[NSURLSession sessionWithConfiguration:…]&lt;/code&gt; and using either &lt;code&gt;[NSURLSessionConfiguration defaultSessionConfiguration]&lt;/code&gt; or &lt;code&gt;[NSURLSessionConfiguration ephemeralSessionConfiguration]&lt;/code&gt; configuration — thanks to &lt;a href=&quot;http://nshipster.com/method-swizzling/&quot;&gt;method swizzling&lt;/a&gt; done &lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/raw/master/OHHTTPStubs/Sources/NSURLSession/HTTPStubs+NSURLSessionConfiguration.m&quot;&gt;here in the code&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need to disable (and re-enable) &lt;code&gt;OHHTTPStubs&lt;/code&gt; — globally or per &lt;code&gt;NSURLSession&lt;/code&gt; — you can use &lt;code&gt;[HTTPStubs setEnabled:]&lt;/code&gt; / &lt;code&gt;[HTTPStubs setEnabled:forSessionConfiguration:]&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Known limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can&#39;t work on background sessions&lt;/strong&gt; (sessions created using &lt;code&gt;[NSURLSessionConfiguration backgroundSessionConfiguration]&lt;/code&gt;) because background sessions don&#39;t allow the use of custom &lt;code&gt;NSURLProtocols&lt;/code&gt; and are handled by the iOS Operating System itself.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; don&#39;t simulate data upload. The &lt;code&gt;NSURLProtocolClient&lt;/code&gt; &lt;code&gt;@protocol&lt;/code&gt; does not provide a way to signal the delegate that data has been &lt;strong&gt;sent&lt;/strong&gt; (only that some has been loaded), so any data in the &lt;code&gt;HTTPBody&lt;/code&gt; or &lt;code&gt;HTTPBodyStream&lt;/code&gt; of an &lt;code&gt;NSURLRequest&lt;/code&gt;, or data provided to &lt;code&gt;-[NSURLSession uploadTaskWithRequest:fromData:];&lt;/code&gt; will be ignored, and more importantly, the &lt;code&gt;-URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:&lt;/code&gt; delegate method will never be called when you stub the request using &lt;code&gt;OHHTTPStubs&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OHTTPStubs&lt;/code&gt; &lt;strong&gt;has a known issue with redirects&lt;/strong&gt; that we believe is an Apple bug. It has been discussed &lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/issues/230&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/AliSoftware/OHHTTPStubs/issues/280&quot;&gt;here&lt;/a&gt;. The actual result of this bug is that redirects with a zero second delay may nondeterministically end up with a null response.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;As far as I know, there&#39;s nothing we can do about those three limitations. Please let me know if you know a solution that would make that possible anyway.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Submitting to the App Store&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt; &lt;strong&gt;can be used&lt;/strong&gt; on apps submitted &lt;strong&gt;on the App Store&lt;/strong&gt;. It does not use any private API and nothing prevents you from shipping it.&lt;/p&gt; 
&lt;p&gt;But you generally only use stubs during the development phase and want to remove your stubs when submitting to the App Store. So be careful to only include &lt;code&gt;OHHTTPStubs&lt;/code&gt; when needed (only in your test targets, or only inside &lt;code&gt;#if DEBUG&lt;/code&gt; sections, or by using &lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#pod&quot;&gt;per-Build-Configuration pods&lt;/a&gt;) to avoid forgetting to remove it when the time comes that you release for the App Store and you want your requests to hit the real network!&lt;/p&gt; 
&lt;h1&gt;License and Credits&lt;/h1&gt; 
&lt;p&gt;This project and library has been created by Olivier Halligon (&lt;a href=&quot;https://twitter.com/aligatr&quot;&gt;@aligatr&lt;/a&gt; on Twitter) and is under the MIT License.&lt;/p&gt; 
&lt;p&gt;It has been inspired by &lt;a href=&quot;https://web-beta.archive.org/web/20161219003951/http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/&quot;&gt;this article from InfiniteLoop.dk&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;I would also like to thank:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sébastien Duperron (&lt;a href=&quot;https://github.com/Liquidsoul&quot;&gt;@Liquidsoul&lt;/a&gt;) for helping me maintaining this library, triaging and responding to issues and PRs&lt;/li&gt; 
 &lt;li&gt;Kevin Harwood (&lt;a href=&quot;https://github.com/kcharwood&quot;&gt;@kcharwood&lt;/a&gt;) for migrating the code to &lt;code&gt;NSInputStream&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Jinlian Wang (&lt;a href=&quot;https://github.com/JinlianWang&quot;&gt;@JinlianWang&lt;/a&gt;) for adding Mocktail support&lt;/li&gt; 
 &lt;li&gt;and everyone else who contributed to this project on GitHub somehow.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you want to support the development of this library, feel free to &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=TRTU3UEWEHV92&quot; title=&quot;Donate&quot;&gt;&lt;img alt=&quot;Donate&quot; src=&quot;https://www.paypalobjects.com/webstatic/mktg/merchant_portal/button/donate.en.png&quot; height=&quot;25px&quot;&gt;&lt;/a&gt;. Thanks to all contributors so far!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/promises</title>
      <link>https://github.com/google/promises</link>
      <description>&lt;p&gt;Promises is a modern framework that provides a synchronization construct for Swift and Objective-C.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/google/promises.svg?sanitize=true&quot; alt=&quot;Apache License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/google/promises&quot;&gt;&lt;img src=&quot;https://api.travis-ci.org/google/promises.svg?branch=master&quot; alt=&quot;Travis&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/google/promises&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/google/promises.svg?sanitize=true&quot; alt=&quot;Gitter Chat&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/platforms-macOS%20%7C%20iOS%20%7C%20tvOS%20%7C%20watchOS-blue.svg?longCache=true&amp;amp;style=flat&quot; alt=&quot;Platforms&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/languages-Swift%20%7C%20ObjC-orange.svg?longCache=true&amp;amp;style=flat&quot; alt=&quot;Languages&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/supports-Bazel%20%7C%20SwiftPM%20%7C%20CocoaPods%20%7C%20Carthage-yellow.svg?longCache=true&amp;amp;style=flat&quot; alt=&quot;Package Managers&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Promises&lt;/h1&gt; 
&lt;p&gt;Promises is a modern framework that provides a synchronization construct for Objective-C and Swift to facilitate writing asynchronous code.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md&quot;&gt;Introduction&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#the-problem-with-async-code&quot;&gt;The problem with async code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#promises-to-the-rescue&quot;&gt;Promises to the rescue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#what-is-a-promise&quot;&gt;What is a promise?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#framework&quot;&gt;Framework&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#getting-started&quot;&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#add-dependency&quot;&gt;Add dependency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#import&quot;&gt;Import&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#adopt&quot;&gt;Adopt&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#basics&quot;&gt;Basics&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#creating-promises&quot;&gt;Creating promises&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#async&quot;&gt;Async&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#do&quot;&gt;Do&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#pending&quot;&gt;Pending&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#create-a-resolved-promise&quot;&gt;Resolved&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#observing-fulfillment&quot;&gt;Observing fulfillment&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#then&quot;&gt;Then&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#observing-rejection&quot;&gt;Observing rejection&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#catch&quot;&gt;Catch&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#extensions&quot;&gt;Extensions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#all&quot;&gt;All&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#always&quot;&gt;Always&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#any&quot;&gt;Any&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#awaitpromise&quot;&gt;AwaitPromise&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#delay&quot;&gt;Delay&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#race&quot;&gt;Race&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#recover&quot;&gt;Recover&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#reduce&quot;&gt;Reduce&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#retry&quot;&gt;Retry&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#validate&quot;&gt;Validate&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#wrap&quot;&gt;Wrap&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#advanced-topics&quot;&gt;Advanced topics&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#default-dispatch-queue&quot;&gt;Default dispatch queue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#ownership-and-retain-cycles&quot;&gt;Ownership and retain cycles&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#objective-c---swift-interoperability&quot;&gt;Objective-C &amp;lt;-&amp;gt; Swift interoperability&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#dot-syntax-in-objective-c&quot;&gt;Dot-syntax in Objective-C&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#anti-patterns&quot;&gt;Anti-patterns&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#broken-chain&quot;&gt;Broken chain&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#nested-promises&quot;&gt;Nested promises&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>realm/realm-swift</title>
      <link>https://github.com/realm/realm-swift</link>
      <description>&lt;p&gt;Realm is a mobile database: a replacement for Core Data &amp; SQLite&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] We announced the deprecation of Atlas Device Sync + Realm SDKs in September 2024. For more information please see:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/atlas/device-sdks/deprecation&quot;&gt;SDK Deprecation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/atlas/app-services/sync/device-sync-deprecation&quot;&gt;Device Sync Deprecation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;For a version of &lt;code&gt;realm-swift&lt;/code&gt; without sync features, install version 20 or see the &lt;code&gt;community&lt;/code&gt; branch.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;picture&gt; 
 &lt;source srcset=&quot;./media/logo-dark.svg&quot; media=&quot;(prefers-color-scheme: dark)&quot; alt=&quot;realm by MongoDB&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/realm/realm-swift/master/media/logo.svg?sanitize=true&quot; alt=&quot;realm by MongoDB&quot;&gt; 
&lt;/picture&gt; 
&lt;h1&gt;About Realm Database&lt;/h1&gt; 
&lt;p&gt;Realm is a mobile database that runs directly inside phones, tablets or wearables. This repository holds the source code for the iOS, macOS, tvOS &amp;amp; watchOS versions of Realm Swift &amp;amp; Realm Objective-C.&lt;/p&gt; 
&lt;h2&gt;Why Use Realm&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Intuitive to Developers:&lt;/strong&gt; Realm’s object-oriented data model is simple to learn, doesn’t need an ORM, and lets you write less code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built for Mobile:&lt;/strong&gt; Realm is fully-featured, lightweight, and efficiently uses memory, disk space, and battery life.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Designed for Offline Use:&lt;/strong&gt; Realm’s local database persists data on-disk, so apps work as well offline as they do online.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.mongodb.com/docs/atlas/app-services/sync/&quot;&gt;MongoDB Atlas Device Sync&lt;/a&gt;&lt;/strong&gt;: Makes it simple to keep data in sync across users, devices, and your backend in real-time. Get started for free with &lt;a href=&quot;https://github.com/mongodb/template-app-swiftui-todo&quot;&gt;a template application&lt;/a&gt; and &lt;a href=&quot;http://mongodb.com/realm/register?utm_medium=github_atlas_CTA&amp;amp;utm_source=realm_swift_github&quot;&gt;create the cloud backend&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Object-Oriented: Streamline Your Code&lt;/h2&gt; 
&lt;p&gt;Realm was built for mobile developers, with simplicity in mind. The idiomatic, object-oriented data model can save you thousands of lines of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Define your models like regular Swift classes
class Dog: Object {
    @Persisted var name: String
    @Persisted var age: Int
}
class Person: Object {
    @Persisted(primaryKey: true) var _id: String
    @Persisted var name: String
    @Persisted var age: Int
    // Create relationships by pointing an Object field to another Class
    @Persisted var dogs: List&amp;lt;Dog&amp;gt;
}
// Use them like regular Swift objects
let dog = Dog()
dog.name = &quot;Rex&quot;
dog.age = 1
print(&quot;name of dog: \(dog.name)&quot;)

// Get the default Realm
let realm = try! Realm()
// Persist your data easily with a write transaction
try! realm.write {
    realm.add(dog)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Live Objects: Build Reactive Apps&lt;/h2&gt; 
&lt;p&gt;Realm’s live objects mean data updated anywhere is automatically updated everywhere.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Open the default realm.
let realm = try! Realm()

var token: NotificationToken?

let dog = Dog()
dog.name = &quot;Max&quot;

// Create a dog in the realm.
try! realm.write {
    realm.add(dog)
}

//  Set up the listener &amp;amp; observe object notifications.
token = dog.observe { change in
    switch change {
    case .change(let properties):
        for property in properties {
            print(&quot;Property &#39;\(property.name)&#39; changed to &#39;\(property.newValue!)&#39;&quot;);
        }
    case .error(let error):
        print(&quot;An error occurred: (error)&quot;)
    case .deleted:
        print(&quot;The object was deleted.&quot;)
    }
}

// Update the dog&#39;s name to see the effect.
try! realm.write {
    dog.name = &quot;Wolfie&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SwiftUI&lt;/h3&gt; 
&lt;p&gt;Realm integrates directly with SwiftUI, updating your views so you don&#39;t have to.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContactsView: View {
    @ObservedResults(Person.self) var persons

    var body: some View {
        List {
            ForEach(persons) { person in
                Text(person.name)
            }
            .onMove(perform: $persons.move)
            .onDelete(perform: $persons.remove)
        }.navigationBarItems(trailing:
            Button(&quot;Add&quot;) {
                $persons.append(Person())
            }
        )
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fully Encrypted&lt;/h2&gt; 
&lt;p&gt;Data can be encrypted in-flight and at-rest, keeping even the most sensitive data secure.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Generate a random encryption key
var key = Data(count: 64)
_ = key.withUnsafeMutableBytes { (pointer: UnsafeMutableRawBufferPointer) in
    guard let baseAddress = pointer.baseAddress else {
        fatalError(&quot;Failed to obtain base address&quot;)
    }
    SecRandomCopyBytes(kSecRandomDefault, 64, baseAddress)
}

// Add the encryption key to the config and open the realm
let config = Realm.Configuration(encryptionKey: key)
let realm = try Realm(configuration: config)

// Use the Realm as normal
let dogs = realm.objects(Dog.self).filter(&quot;name contains &#39;Fido&#39;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We support installing Realm via Swift Package Manager, CocoaPods, Carthage, or by importing a dynamic XCFramework.&lt;/p&gt; 
&lt;p&gt;For more information, see the detailed instructions in our &lt;a href=&quot;https://www.mongodb.com/docs/atlas/device-sdks/sdk/swift/install/&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Interested in getting started for free with &lt;a href=&quot;https://github.com/mongodb/template-app-swiftui-todo&quot;&gt;a template application&lt;/a&gt; that includes a cloud backend and Sync? &lt;a href=&quot;http://mongodb.com/realm/register?utm_medium=github_atlas_CTA&amp;amp;utm_source=realm_swift_github&quot;&gt;Create a MongoDB Atlas Account&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The documentation can be found at &lt;a href=&quot;https://www.mongodb.com/docs/atlas/device-sdks/sdk/swift/&quot;&gt;mongodb.com/docs/atlas/device-sdks/sdk/swift/&lt;/a&gt;. The API reference is located at &lt;a href=&quot;https://www.mongodb.com/docs/realm-sdks/swift/latest/&quot;&gt;mongodb.com/docs/realm-sdks/swift/latest/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Need help with your code?&lt;/strong&gt;: Look for previous questions with the&lt;a href=&quot;https://stackoverflow.com/questions/tagged/realm?sort=newest&quot;&gt;&lt;code&gt;realm&lt;/code&gt; tag&lt;/a&gt; on Stack Overflow or &lt;a href=&quot;https://stackoverflow.com/questions/ask?tags=realm&quot;&gt;ask a new question&lt;/a&gt;. For general discussion that might be considered too broad for Stack Overflow, use the &lt;a href=&quot;https://developer.mongodb.com/community/forums/tags/c/realm-sdks/58/swift/&quot;&gt;Community Forum&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Have a bug to report?&lt;/strong&gt; &lt;a href=&quot;https://github.com/realm/realm-swift/issues/new&quot;&gt;Open a GitHub issue&lt;/a&gt;. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Have a feature request?&lt;/strong&gt; &lt;a href=&quot;https://github.com/realm/realm-swift/issues/new&quot;&gt;Open a GitHub issue&lt;/a&gt;. Tell us what the feature should do and why you want the feature.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building Realm&lt;/h2&gt; 
&lt;p&gt;In case you don&#39;t want to use the precompiled version, you can build Realm yourself from source.&lt;/p&gt; 
&lt;p&gt;Prerequisites:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Building Realm requires Xcode 14.1 or newer.&lt;/li&gt; 
 &lt;li&gt;Building Realm documentation requires &lt;a href=&quot;https://github.com/realm/jazzy&quot;&gt;jazzy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Once you have all the necessary prerequisites, building Realm just takes a single command: &lt;code&gt;sh build.sh build&lt;/code&gt;. You&#39;ll need an internet connection the first time you build Realm to download the core binary. This will produce Realm.xcframework and RealmSwift.xcframework in &lt;code&gt;build/Release/&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;sh build.sh help&lt;/code&gt; to see all the actions you can perform (build ios/osx, generate docs, test, etc.).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/realm/realm-swift/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more details!&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;This project adheres to the &lt;a href=&quot;https://www.mongodb.com/community-code-of-conduct&quot;&gt;MongoDB Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&quot;mailto:community-conduct@mongodb.com&quot;&gt;community-conduct@mongodb.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Realm Objective-C &amp;amp; Realm Swift are published under the Apache 2.0 license. Realm Core is also published under the Apache 2.0 license and is available &lt;a href=&quot;https://github.com/realm/realm-core&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you use Realm and are happy with it, please consider sending out a tweet mentioning &lt;a href=&quot;https://twitter.com/realm&quot;&gt;@realm&lt;/a&gt; to share your thoughts!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;And if you don&#39;t like it, please let us know what you would like improved, so we can fix it!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;img style=&quot;width: 0px; height: 0px;&quot; src=&quot;https://3eaz4mshcd.execute-api.us-east-1.amazonaws.com/prod?s=https://github.com/realm/realm-swift#README.md&quot;&gt;</description>
    </item>
    
    <item>
      <title>react-native-maps/react-native-maps</title>
      <link>https://github.com/react-native-maps/react-native-maps</link>
      <description>&lt;p&gt;React Native Mapview component for iOS + Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-maps &lt;a href=&quot;https://www.npmjs.com/package/react-native-maps&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/react-native-maps.svg?style=flat&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;React Native Map components for iOS + Android&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;This project is being maintained by a small group of people, and any help with issues and pull requests are always appreciated. If you are able and willing to contribute, please read the &lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/CONTRIBUTING.md&quot;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&quot;&gt;Installation Instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/examples-setup.md&quot;&gt;Setup Instructions for the Included Example Project&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;h2&gt;React Native Compatibility&lt;/h2&gt; 
&lt;h3&gt;Important Notes:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fabric is not yet supported&lt;/strong&gt;:&lt;br&gt; This feature is currently under development. Fabric is enabled by default in React Native &lt;code&gt;0.76&lt;/code&gt; and above, so &lt;strong&gt;please disable it&lt;/strong&gt; for now.&lt;br&gt; Follow updates on this issue here: &lt;a href=&quot;https://github.com/react-native-maps/react-native-maps/issues/5206&quot;&gt;react-native-maps/issues/5206&lt;/a&gt;.&lt;br&gt; Kindly refrain from opening duplicate tickets regarding this matter.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Version Requirements:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Version &lt;code&gt;1.14.0&lt;/code&gt; and above&lt;/strong&gt;: Requires &lt;strong&gt;React Native &lt;code&gt;&amp;gt;= 0.74&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Versions below &lt;code&gt;1.14.0&lt;/code&gt;&lt;/strong&gt;: Require &lt;strong&gt;React Native &lt;code&gt;&amp;gt;= 0.64.3&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Component API&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/mapview.md&quot;&gt;&lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/marker.md&quot;&gt;&lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/callout.md&quot;&gt;&lt;code&gt;&amp;lt;Callout /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polygon.md&quot;&gt;&lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polyline.md&quot;&gt;&lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/circle.md&quot;&gt;&lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/overlay.md&quot;&gt;&lt;code&gt;&amp;lt;Overlay /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/heatmap.md&quot;&gt;&lt;code&gt;&amp;lt;Heatmap /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/geojson.md&quot;&gt;&lt;code&gt;&amp;lt;Geojson /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;General Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import MapView from &#39;react-native-maps&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var MapView = require(&#39;react-native-maps&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This MapView component is built so that features on the map (such as Markers, Polygons, etc.) are specified as children of the MapView itself. This provides an intuitive and react-like API for declaratively controlling features on the map.&lt;/p&gt; 
&lt;h3&gt;Rendering a Map with an initial region&lt;/h3&gt; 
&lt;h2&gt;MapView&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;MapView
  initialRegion={{
    latitude: 37.78825,
    longitude: -122.4324,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using a MapView while controlling the region as state&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;getInitialState() {
  return {
    region: {
      latitude: 37.78825,
      longitude: -122.4324,
      latitudeDelta: 0.0922,
      longitudeDelta: 0.0421,
    },
  };
}

onRegionChange(region) {
  this.setState({ region });
}

render() {
  return (
    &amp;lt;MapView
      region={this.state.region}
      onRegionChange={this.onRegionChange}
    /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Rendering a list of markers on a map&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import {Marker} from &#39;react-native-maps&#39;;

&amp;lt;MapView region={this.state.region} onRegionChange={this.onRegionChange}&amp;gt;
  {this.state.markers.map((marker, index) =&amp;gt; (
    &amp;lt;Marker
      key={index}
      coordinate={marker.latlng}
      title={marker.title}
      description={marker.description}
    /&amp;gt;
  ))}
&amp;lt;/MapView&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Rendering a Marker with a custom image&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;You need to generate an &lt;code&gt;png&lt;/code&gt; image with various resolution (lets call them &lt;code&gt;custom_pin&lt;/code&gt;) - for more information go to &lt;a href=&quot;https://developer.android.com/studio/write/resource-manager#import&quot;&gt;Android&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding-images-to-your-xcode-project&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;put all images in Android drawables and iOS assets dir&lt;/li&gt; 
 &lt;li&gt;Now you can use the following code:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Marker
  coordinate={{latitude: latitude, longitude: longitude}}
  image={{uri: &#39;custom_pin&#39;}}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: You can also pass the image binary data like &lt;code&gt;image={require(&#39;custom_pin.png&#39;)}&lt;/code&gt;, but this will not scale good with the different screen sizes.&lt;/p&gt; 
&lt;h3&gt;Rendering a Marker with a custom view&lt;/h3&gt; 
&lt;p&gt;Note: This has performance implications, if you wish for a simpler solution go with a custom image (save your self the headache)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Marker coordinate={{latitude: latitude, longitude: longitude}}&amp;gt;
  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;
&amp;lt;/Marker&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Rendering a custom Marker with a custom Callout&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import {Callout} from &#39;react-native-maps&#39;;

&amp;lt;Marker coordinate={marker.latlng}&amp;gt;
  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;
  &amp;lt;Callout&amp;gt;
    &amp;lt;MyCustomCalloutView {...marker} /&amp;gt;
  &amp;lt;/Callout&amp;gt;
&amp;lt;/Marker&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Draggable Markers&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;MapView initialRegion={...}&amp;gt;
  &amp;lt;Marker draggable
    coordinate={this.state.x}
    onDragEnd={(e) =&amp;gt; this.setState({ x: e.nativeEvent.coordinate })}
  /&amp;gt;
&amp;lt;/MapView&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using a custom Tile Overlay&lt;/h3&gt; 
&lt;h4&gt;Tile Overlay using tile server&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import {UrlTile} from &#39;react-native-maps&#39;;

&amp;lt;MapView region={this.state.region} onRegionChange={this.onRegionChange}&amp;gt;
  &amp;lt;UrlTile
    /**
     * The url template of the tile server. The patterns {x} {y} {z} will be replaced at runtime
     * For example, http://c.tile.openstreetmap.org/{z}/{x}/{y}.png
     */
    urlTemplate={this.state.urlTemplate}
    /**
     * The maximum zoom level for this tile overlay. Corresponds to the maximumZ setting in
     * MKTileOverlay. iOS only.
     */
    maximumZ={19}
    /**
     * flipY allows tiles with inverted y coordinates (origin at bottom left of map)
     * to be used. Its default value is false.
     */
    flipY={false}
  /&amp;gt;
&amp;lt;/MapView&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Android: add the following line in your AndroidManifest.xml&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For IOS: configure &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&quot;&gt;App Transport Security&lt;/a&gt; in your app&lt;/p&gt; 
&lt;h2&gt;React Native Configuration for Fabric / New Architecture&lt;/h2&gt; 
&lt;p&gt;This library works with Fabric using the &lt;a href=&quot;https://github.com/reactwg/react-native-new-architecture/discussions/135&quot;&gt;New Renderer Interop Layer&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;There is a warning message that those steps are not necessary; but we couldn&#39;t get the example working without them so far.&lt;/p&gt; 
&lt;h3&gt;Configuration Steps&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open your configuration file&lt;/strong&gt;: Locate the &lt;code&gt;react-native-config&lt;/code&gt; file in your project directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add the following configuration&lt;/strong&gt;: Include the &lt;code&gt;unstable_reactLegacyComponentNames&lt;/code&gt; array for both Android and iOS platforms as shown below:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
  project: {
    android: {
      unstable_reactLegacyComponentNames: [
        &#39;AIRMap&#39;,
        &#39;AIRMapCallout&#39;,
        &#39;AIRMapCalloutSubview&#39;,
        &#39;AIRMapCircle&#39;,
        &#39;AIRMapHeatmap&#39;,
        &#39;AIRMapLocalTile&#39;,
        &#39;AIRMapMarker&#39;,
        &#39;AIRMapOverlay&#39;,
        &#39;AIRMapPolygon&#39;,
        &#39;AIRMapPolyline&#39;,
        &#39;AIRMapUrlTile&#39;,
        &#39;AIRMapWMSTile&#39;,
      ],
    },
    ios: {
      unstable_reactLegacyComponentNames: [
        &#39;AIRMap&#39;,
        &#39;AIRMapCallout&#39;,
        &#39;AIRMapCalloutSubview&#39;,
        &#39;AIRMapCircle&#39;,
        &#39;AIRMapHeatmap&#39;,
        &#39;AIRMapLocalTile&#39;,
        &#39;AIRMapMarker&#39;,
        &#39;AIRMapOverlay&#39;,
        &#39;AIRMapPolygon&#39;,
        &#39;AIRMapPolyline&#39;,
        &#39;AIRMapUrlTile&#39;,
        &#39;AIRMapWMSTile&#39;,
      ],
    },
  },
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;checkout the example project to see it in action.&lt;/p&gt; 
&lt;h4&gt;Tile Overlay using local tiles&lt;/h4&gt; 
&lt;p&gt;Tiles can be stored locally within device using xyz tiling scheme and displayed as tile overlay as well. This is usefull especially for offline map usage when tiles are available for selected map region within device storage.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import {LocalTile} from &#39;react-native-maps&#39;;

&amp;lt;MapView region={this.state.region} onRegionChange={this.onRegionChange}&amp;gt;
  &amp;lt;LocalTile
    /**
     * The path template of the locally stored tiles. The patterns {x} {y} {z} will be replaced at runtime
     * For example, /storage/emulated/0/mytiles/{z}/{x}/{y}.png
     */
    pathTemplate={this.state.pathTemplate}
    /**
     * The size of provided local tiles (usually 256 or 512).
     */
    tileSize={256}
  /&amp;gt;
&amp;lt;/MapView&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Android: LocalTile is still just overlay over original map tiles. It means that if device is online, underlying tiles will be still downloaded. If original tiles download/display is not desirable set mapType to &#39;none&#39;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;MapView
  mapType={Platform.OS == &quot;android&quot; ? &quot;none&quot; : &quot;standard&quot;}
&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Category:Tile_downloading&quot;&gt;OSM Wiki&lt;/a&gt; for how to download tiles for offline usage.&lt;/p&gt; 
&lt;h3&gt;Overlaying other components on the map&lt;/h3&gt; 
&lt;p&gt;Place components that you wish to overlay &lt;code&gt;MapView&lt;/code&gt; underneath the &lt;code&gt;MapView&lt;/code&gt; closing tag. Absolutely position these elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return (
    &amp;lt;MapView
      region={this.state.region}
    /&amp;gt;
    &amp;lt;OverlayComponent
      style={{position: &quot;absolute&quot;, bottom: 50}}
    /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing the map style (Google Maps Only)&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;&amp;lt;MapView provider=&quot;google&quot; googleMapId=&quot;yourStyledMapId&quot; /&amp;gt;&lt;/code&gt; Google Maps on iOS and Android supports styling via google cloud platform, the styled maps are published under a googleMapId, by simply setting the property googleMapId to the MapView you can use that styled map more info here: &lt;a href=&quot;https://developers.google.com/maps/documentation/get-map-id&quot;&gt;google map id&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;MapView Events&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component and its child components have several events that you can subscribe to. This example displays some of them in a log as a demonstration.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/3o6UBpncYQASu2WTW8.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/xT77YdviLqtjaecRYA.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Tracking Region / Location&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/3o6UBoPSLlIKQ2dv7q.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/xT77XWjqECvdgjx9oA.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Programmatically Changing Region&lt;/h3&gt; 
&lt;p&gt;One can change the mapview&#39;s position using refs and component methods, or by passing in an updated &lt;code&gt;region&lt;/code&gt; prop. The component methods will allow one to animate to a given position like the native API could.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/3o6UB7poyB6YJ0KPWU.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/xT77Yc4wK3pzZusEbm.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Changing the style of the map&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/a9WqCL6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Arbitrary React Views as Markers&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/3o6UBcsCLoLQtksJxe.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/3o6UB1qGEM9jYni3KM.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Using the MapView with the Animated API&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component can be made to work with the Animated API, having the entire &lt;code&gt;region&lt;/code&gt; prop be declared as an animated value. This allows one to animate the zoom and position of the MapView along with other gestures, giving a nice feel.&lt;/p&gt; 
&lt;p&gt;Further, Marker views can use the animated API to enhance the effect.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/xT77XMw9IwS6QAv0nC.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/3o6UBdGQdM1GmVoIdq.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Issue: Since android needs to render its marker views as a bitmap, the animations APIs may not be compatible with the Marker views. Not sure if this can be worked around yet or not.&lt;/p&gt; 
&lt;p&gt;Markers&#39; coordinates can also be animated, as shown in this example:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/xTcnTelp1OwGPu1Wh2.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/xTcnT6WVpwlCiQnFW8.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Polygon Creator&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/3o6UAZWqQBkOzs8HE4.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/xT77XVBRErNZl3zyWQ.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Other Overlays&lt;/h3&gt; 
&lt;p&gt;So far, &lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; are available to pass in as children to the &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/xT77XZCH8JpEhzVcNG.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/xT77XZyA0aYeOX5jsA.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Gradient Polylines (iOS MapKit only)&lt;/h3&gt; 
&lt;p&gt;Gradient polylines can be created using the &lt;code&gt;strokeColors&lt;/code&gt; prop of the &lt;code&gt;&amp;lt;Polyline&amp;gt;&lt;/code&gt; component.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/P7UeqAm.png?1&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Default Markers&lt;/h3&gt; 
&lt;p&gt;Default markers will be rendered unless a custom marker is specified. One can optionally adjust the color of the default marker by using the &lt;code&gt;pinColor&lt;/code&gt; prop.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/xT77Y0pWKmUUnguHK0.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/3o6UBfk3I58VIwZjVe.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Custom Callouts&lt;/h3&gt; 
&lt;p&gt;Callouts to markers can be completely arbitrary react views, similar to markers. As a result, they can be interacted with like any other view.&lt;/p&gt; 
&lt;p&gt;Additionally, you can fall back to the standard behavior of just having a title/description through the &lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; props.&lt;/p&gt; 
&lt;p&gt;Custom callout views can be the entire tooltip bubble, or just the content inside of the system default bubble.&lt;/p&gt; 
&lt;p&gt;To handle press on specific subview of callout use &lt;code&gt;&amp;lt;CalloutSubview /&amp;gt;&lt;/code&gt; with &lt;code&gt;onPress&lt;/code&gt;. See &lt;code&gt;Callouts.js&lt;/code&gt; example.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/xT77XNePGnMIIDpbnq.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/xT77YdU0HXryvoRqaQ.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Image-based Markers&lt;/h3&gt; 
&lt;p&gt;Markers can be customized by just using images, and specified using the &lt;code&gt;image&lt;/code&gt; prop.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/mzrOjTR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Draggable Markers&lt;/h3&gt; 
&lt;p&gt;Markers are draggable, and emit continuous drag events to update other UI during drags.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/l2JImnZxdv1WbpQfC.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/l2JIhv4Jx6Ugx1EGI.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Lite Mode ( Android )&lt;/h3&gt; 
&lt;p&gt;Enable lite mode on Android with &lt;code&gt;liteMode&lt;/code&gt; prop. Ideal when having multiple maps in a View or ScrollView.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/qZ2lAf18s89na.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;On Poi Click (Google Maps Only)&lt;/h3&gt; 
&lt;p&gt;Poi are clickable, you can catch the event to get its information (usually to get the full detail from Google Place using the placeId).&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/3480VsCKnHr31uCLU3/giphy.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Animated Region&lt;/h3&gt; 
&lt;p&gt;The MapView can accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as its &lt;code&gt;region&lt;/code&gt; prop. This allows you to utilize the Animated API to control the map&#39;s center and zoom.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import MapView, { AnimatedRegion, Animated } from &#39;react-native-maps&#39;;

getInitialState() {
  return {
    region: new AnimatedRegion({
      latitude: LATITUDE,
      longitude: LONGITUDE,
      latitudeDelta: LATITUDE_DELTA,
      longitudeDelta: LONGITUDE_DELTA,
    }),
  };
}

onRegionChange(region) {
  this.state.region.setValue(region);
}

render() {
  return (
    &amp;lt;Animated
      region={this.state.region}
      onRegionChange={this.onRegionChange}
    /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Animated Marker Position&lt;/h3&gt; 
&lt;p&gt;Markers can also accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as a coordinate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import MapView, { AnimatedRegion, MarkerAnimated } from &#39;react-native-maps&#39;;

getInitialState() {
  return {
    coordinate: new AnimatedRegion({
      latitude: LATITUDE,
      longitude: LONGITUDE,
    }),
  };
}

componentWillReceiveProps(nextProps) {
  const duration = 500

  if (this.props.coordinate !== nextProps.coordinate) {
    if (Platform.OS === &#39;android&#39;) {
      if (this.marker) {
        this.marker.animateMarkerToCoordinate(
          nextProps.coordinate,
          duration
        );
      }
    } else {
      this.state.coordinate.timing({
        ...nextProps.coordinate,
        useNativeDriver: true, // defaults to false if not passed explicitly
        duration
      }).start();
    }
  }
}

render() {
  return (
    &amp;lt;MapView initialRegion={...}&amp;gt;
      &amp;lt;MarkerAnimated
        ref={marker =&amp;gt; { this.marker = marker }}
        coordinate={this.state.coordinate}
      /&amp;gt;
    &amp;lt;/MapView&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Take Snapshot of map&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import MapView, { Marker } from &#39;react-native-maps&#39;;

getInitialState() {
  return {
    coordinate: {
      latitude: LATITUDE,
      longitude: LONGITUDE,
    },
  };
}

takeSnapshot () {
  // &#39;takeSnapshot&#39; takes a config object with the
  // following options
  const snapshot = this.map.takeSnapshot({
    width: 300,      // optional, when omitted the view-width is used
    height: 300,     // optional, when omitted the view-height is used
    region: {..},    // iOS only, optional region to render
    format: &#39;png&#39;,   // image formats: &#39;png&#39;, &#39;jpg&#39; (default: &#39;png&#39;)
    quality: 0.8,    // image quality: 0..1 (only relevant for jpg, default: 1)
    result: &#39;file&#39;   // result types: &#39;file&#39;, &#39;base64&#39; (default: &#39;file&#39;)
  });
  snapshot.then((uri) =&amp;gt; {
    this.setState({ mapSnapshot: uri });
  });
}

render() {
  return (
    &amp;lt;View&amp;gt;
      &amp;lt;MapView initialRegion={...} ref={map =&amp;gt; { this.map = map }}&amp;gt;
        &amp;lt;Marker coordinate={this.state.coordinate} /&amp;gt;
      &amp;lt;/MapView&amp;gt;
      &amp;lt;Image source={{ uri: this.state.mapSnapshot.uri }} /&amp;gt;
      &amp;lt;TouchableOpacity onPress={this.takeSnapshot}&amp;gt;
        Take Snapshot
      &amp;lt;/TouchableOpacity&amp;gt;
    &amp;lt;/View&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Zoom to Specified Markers&lt;/h3&gt; 
&lt;p&gt;Pass an array of marker identifiers to have the map re-focus.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/3o7qEbOQnO0yoXqKJ2.gif&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://i.giphy.com/l41YdrQZ7m6Dz4h0c.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Zoom to Specified Coordinates&lt;/h3&gt; 
&lt;p&gt;Pass an array of coordinates to focus a map region on said coordinates.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1627824/18609960/da5d9e06-7cdc-11e6-811e-34e255093df9.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Troubleshooting&lt;/h3&gt; 
&lt;h4&gt;My map is blank&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that you have &lt;a href=&quot;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&quot;&gt;properly installed&lt;/a&gt; react-native-maps.&lt;/li&gt; 
 &lt;li&gt;Check in the logs if there is more informations about the issue.&lt;/li&gt; 
 &lt;li&gt;Try setting the style of the MapView to an absolute position with top, left, right and bottom values set.&lt;/li&gt; 
 &lt;li&gt;Make sure you have enabled Google Maps API in &lt;a href=&quot;https://console.developers.google.com/apis/library&quot;&gt;Google developer console&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const styles = StyleSheet.create({
  map: {
    ...StyleSheet.absoluteFillObject,
  },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;MapView
  style={styles.map}
  // other props
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Inputs don&#39;t focus&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;When inputs don&#39;t focus or elements don&#39;t respond to tap, look at the order of the view hierarchy, sometimes the issue could be due to ordering of rendered components, prefer putting MapView as the first component.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Bad:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;View&amp;gt;
  &amp;lt;TextInput /&amp;gt;
  &amp;lt;MapView /&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Good:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;View&amp;gt;
  &amp;lt;MapView /&amp;gt;
  &amp;lt;TextInput /&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Children Components Not Re-Rendering&lt;/h4&gt; 
&lt;p&gt;Components that aren&#39;t declared by this library (Ex: Markers, Polyline) must not be children of the MapView component due to MapView&#39;s unique rendering methodology. Have your custom components / views outside the MapView component and position absolute to ensure they only re-render as needed. Example: Bad:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;
  &amp;lt;MapView style={StyleSheet.absoluteFillObject}&amp;gt;
    &amp;lt;View style={{position: &#39;absolute&#39;, top: 100, left: 50}} /&amp;gt;
  &amp;lt;/MapView&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Good:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;
  &amp;lt;MapView style={StyleSheet.absoluteFillObject} /&amp;gt;
  &amp;lt;View style={{position: &#39;absolute&#39;, top: 100, left: 50}} /&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/react-native-maps/react-native-maps/issues/1901&quot;&gt;https://github.com/react-native-maps/react-native-maps/issues/1901&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Crashing with EXC_BAD_ACCESS on iOS when switching apps&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;MapView&amp;gt;&lt;/code&gt; using Apple Maps in &lt;code&gt;mapType: &quot;standard&quot;&lt;/code&gt; will sometimes crash when you background the app or switch into another app. This is only an issue in XCode using Metal API Validation, and won&#39;t happen in production. To eliminate this problem even while debugging in XCode, go to &lt;code&gt;Edit Scheme... -&amp;gt; Run (Debug) -&amp;gt; Diagnostics&lt;/code&gt; and uncheck &lt;code&gt;Metal -&amp;gt; API Validation&lt;/code&gt;. (h/t &lt;a href=&quot;https://github.com/Simon-TechForm&quot;&gt;@Simon-TechForm&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&quot;&gt;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;onRegionChangeComplete() callback is called infinitely&lt;/h4&gt; 
&lt;p&gt;If changing the state in &lt;code&gt;onRegionChangeComplete&lt;/code&gt; is called infinitely, add a condition to limit these calls to occur only when the region change was done as a result of a user&#39;s action.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;onRegionChangeComplete={ (region, gesture) =&amp;gt; {
	// This fix only works on Google Maps because isGesture is NOT available on Apple Maps
	if (!gesture.isGesture) {
    return;
  }

  // You can use
  dispatch({ type: &quot;map_region&quot;, payload: { mapRegion: region }}); // if using useReducer
	// setMapRegionState(region); // if using useState
}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/react-native-maps/react-native-maps/issues/846#issuecomment-1210079461&quot;&gt;https://github.com/react-native-maps/react-native-maps/issues/846#issuecomment-1210079461&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt; Copyright (c) 2017 Airbnb

 Licensed under the The MIT License (MIT) (the &quot;License&quot;);
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    https://raw.githubusercontent.com/airbnb/react-native-maps/master/LICENSE

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
