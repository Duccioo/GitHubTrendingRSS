<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:37:24 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>AFLplusplus/LibAFL</title>
      <link>https://github.com/AFLplusplus/LibAFL</link>
      <description>&lt;p&gt;Advanced Fuzzing Library - Slot your Fuzzer together in Rust! Scales across cores and machines. For Windows, Android, MacOS, Linux, no_std, ...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LibAFL, the fuzzer library.&lt;/h1&gt; 
&lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/AFLplusplus/Website/main/static/libafl_logo.svg?sanitize=true&quot; alt=&quot;LibAFL logo&quot; width=&quot;250&quot; heigh=&quot;250&quot;&gt; 
&lt;p&gt;Advanced Fuzzing Library - Slot your own fuzzers together and extend their features using Rust.&lt;/p&gt; 
&lt;p&gt;LibAFL is a collection of reusable pieces of fuzzers, written in Rust, it gives you many of the benefits of an off-the-shelf fuzzer, while being completely customizable. Some highlight features currently include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;fast&lt;/code&gt;: We do everything we can at compile time, keeping runtime overhead minimal. Users reach 120k execs/sec in frida-mode on a phone (using all cores).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scalable&lt;/code&gt;: &lt;code&gt;Low Level Message Passing&lt;/code&gt;, &lt;code&gt;LLMP&lt;/code&gt; for short, allows LibAFL to scale almost linearly over cores, and via TCP to multiple machines.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;adaptable&lt;/code&gt;: You can replace each part of LibAFL. For example, &lt;code&gt;BytesInput&lt;/code&gt; is just one potential form input: feel free to add an AST-based input for structured fuzzing, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;multi platform&lt;/code&gt;: LibAFL was confirmed to work on &lt;em&gt;Windows&lt;/em&gt;, &lt;em&gt;MacOS&lt;/em&gt;, &lt;em&gt;Linux&lt;/em&gt;, and &lt;em&gt;Android&lt;/em&gt; on &lt;em&gt;x86_64&lt;/em&gt; and &lt;em&gt;aarch64&lt;/em&gt;. &lt;code&gt;LibAFL&lt;/code&gt; can be built in &lt;code&gt;no_std&lt;/code&gt; mode to inject LibAFL into obscure targets like embedded devices and hypervisors.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bring your own target&lt;/code&gt;: We support binary-only modes, like Frida-Mode, as well as multiple compilation passes for sourced-based instrumentation. Of course it&#39;s easy to add custom instrumentation backends.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Core concepts&lt;/h2&gt; 
&lt;p&gt;LibAFL is fast, multi-platform, no_std compatible, and scales over cores and machines. It offers a main crate that provide building blocks for custom fuzzers, &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/libafl&quot;&gt;libafl&lt;/a&gt;, a library containing common code that can be used for targets instrumentation, &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/libafl_targets&quot;&gt;libafl_targets&lt;/a&gt;, and a library providing facilities to wrap compilers, &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/libafl_cc&quot;&gt;libafl_cc&lt;/a&gt;. It offers integrations with popular instrumentation frameworks. At the moment, the supported backends are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;SanitizerCoverage&lt;/code&gt;, in &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/libafl_targets&quot;&gt;libafl_targets&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Frida&lt;/code&gt;, in &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/libafl_frida&quot;&gt;libafl_frida&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;QEMU&lt;/code&gt; user-mode and system mode, including hooks for emulation, in &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/libafl_qemu&quot;&gt;libafl_qemu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;TinyInst&lt;/code&gt;, in &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/libafl_tinyinst&quot;&gt;libafl_tinyinst&lt;/a&gt; by &lt;a href=&quot;https://github.com/elbiazo&quot;&gt;elbiazo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building and installing&lt;/h2&gt; 
&lt;h4&gt;Install the Dependencies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;The Rust development language&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;We highly recommend &lt;em&gt;not&lt;/em&gt; to use e.g. your Linux distribution package as this is likely outdated. So rather install Rust directly, instructions can be found &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLVM tools&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The LLVM tools (including clang, clang++) are needed (newer than LLVM 15.0.0 up to LLVM 18.1.3) If you are using Debian/Ubuntu, again, we highly recommmend that you install the package from &lt;a href=&quot;https://apt.llvm.org/&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;(In &lt;code&gt;libafl_concolic&lt;/code&gt;, we only support LLVM version newer than 18)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Just: 
  &lt;ul&gt; 
   &lt;li&gt;We use &lt;a href=&quot;https://github.com/casey/just&quot;&gt;just&lt;/a&gt; to build the fuzzers in &lt;code&gt;fuzzers/&lt;/code&gt; directory. You can find instructions to install it in your environment &lt;a href=&quot;https://just.systems/man/en/packages.html&quot;&gt;in the Just Programmer&#39;s Manual&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Clone the LibAFL repository with&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/AFLplusplus/LibAFL
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Build the library using&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Build the API documentation with&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cargo doc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Browse the LibAFL book (WIP!) with (requires &lt;a href=&quot;https://rust-lang.github.io/mdBook/index.html&quot;&gt;mdbook&lt;/a&gt;)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd docs &amp;amp;&amp;amp; mdbook serve
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;We collect all example fuzzers in &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/fuzzers/&quot;&gt;&lt;code&gt;./fuzzers&lt;/code&gt;&lt;/a&gt;. Be sure to read their documentation (and source), this is &lt;em&gt;the natural way to get started!&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;just run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run each example fuzzer with this following command, as long as the fuzzer directory has a &lt;code&gt;Justfile&lt;/code&gt; file. The best-tested fuzzer is &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/fuzzers/inprocess/libfuzzer_libpng&quot;&gt;&lt;code&gt;./fuzzers/inprocess/libfuzzer_libpng&lt;/code&gt;&lt;/a&gt;, a multicore libfuzzer-like fuzzer using LibAFL for a libpng harness.&lt;/p&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/docs/src/getting_started/setup.md&quot;&gt;Installation guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.rs/libafl/&quot;&gt;Online API documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The LibAFL book (WIP) &lt;a href=&quot;https://aflplus.plus/libafl-book&quot;&gt;online&lt;/a&gt; or in the &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/docs/src/&quot;&gt;repo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Our research &lt;a href=&quot;https://www.s3.eurecom.fr/docs/ccs22_fioraldi.pdf&quot;&gt;paper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Our RC3 &lt;a href=&quot;http://www.youtube.com/watch?v=3RWkT1Q5IV0&quot; title=&quot;Fuzzers Like LEGO&quot;&gt;talk&lt;/a&gt; explaining the core concepts&lt;/li&gt; 
 &lt;li&gt;Our Fuzzcon Europe &lt;a href=&quot;https://www.youtube.com/watch?v=PWB8GIhFAaI&quot; title=&quot;LibAFL: The Advanced Fuzzing Library&quot;&gt;talk&lt;/a&gt; with a (a bit but not so much outdated) step-by-step discussion on how to build some example fuzzers&lt;/li&gt; 
 &lt;li&gt;The Fuzzing101 &lt;a href=&quot;https://github.com/epi052/fuzzing-101-solutions&quot;&gt;solutions&lt;/a&gt; &amp;amp; series of &lt;a href=&quot;https://epi052.gitlab.io/notes-to-self/blog/2021-11-01-fuzzing-101-with-libafl/&quot;&gt;blog posts&lt;/a&gt; by &lt;a href=&quot;https://github.com/epi052&quot;&gt;epi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blogpost on binary-only fuzzing lib libaf_qemu, &lt;a href=&quot;https://blog.bricked.tech/posts/tmnf/part1/&quot;&gt;Hacking TMNF - Fuzzing the game server&lt;/a&gt;, by &lt;a href=&quot;https://github.com/RickdeJager&quot;&gt;RickdeJager&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.atredis.com/blog/2023/12/4/a-libafl-introductory-workshop&quot;&gt;A LibAFL Introductory Workshop&lt;/a&gt;, by &lt;a href=&quot;https://github.com/jordan9001&quot;&gt;Jordan Whitehead&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;LibAFL is written and maintained by&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/andreafioraldi&quot;&gt;Andrea Fioraldi&lt;/a&gt; &lt;a href=&quot;mailto:andrea@aflplus.plus&quot;&gt;andrea@aflplus.plus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/domenuk&quot;&gt;Dominik Maier&lt;/a&gt; &lt;a href=&quot;mailto:dominik@aflplus.plus&quot;&gt;dominik@aflplus.plus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/srubenst1341&quot;&gt;s1341&lt;/a&gt; &lt;a href=&quot;mailto:github@shmarya.net&quot;&gt;github@shmarya.net&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tokatoka&quot;&gt;Dongjia Zhang&lt;/a&gt; &lt;a href=&quot;mailto:toka@aflplus.plus&quot;&gt;toka@aflplus.plus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/addisoncrump&quot;&gt;Addison Crump&lt;/a&gt; &lt;a href=&quot;mailto:me@addisoncrump.info&quot;&gt;me@addisoncrump.info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rmalmain&quot;&gt;Romain Malmain&lt;/a&gt; &lt;a href=&quot;mailto:rmalmain@pm.me&quot;&gt;rmalmain@pm.me&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please check out &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/strong&gt; for the contributing guideline.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;p&gt;Your fuzzer doesn&#39;t work as expected? Try reading &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/docs/src/DEBUGGING.md&quot;&gt;DEBUGGING.md&lt;/a&gt; to understand how to debug your problems.&lt;/p&gt; 
&lt;h2&gt;Cite&lt;/h2&gt; 
&lt;p&gt;If you use LibAFL for your academic work, please cite the following paper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@inproceedings{libafl,
 author       = {Andrea Fioraldi and Dominik Maier and Dongjia Zhang and Davide Balzarotti},
 title        = {{LibAFL: A Framework to Build Modular and Reusable Fuzzers}},
 booktitle    = {Proceedings of the 29th ACM conference on Computer and communications security (CCS)},
 series       = {CCS &#39;22},
 year         = {2022},
 month        = {November},
 location     = {Los Angeles, U.S.A.},
 publisher    = {ACM},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;License&lt;/h4&gt; 
&lt;sup&gt; Licensed under either of &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/LICENSE-APACHE&quot;&gt;Apache License, Version 2.0&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/LibAFL/main/LICENSE-MIT&quot;&gt;MIT license&lt;/a&gt; at your option. &lt;/sup&gt; 
&lt;br&gt; 
&lt;sub&gt; Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. &lt;/sub&gt;</description>
    </item>
    
    <item>
      <title>huggingface/candle</title>
      <link>https://github.com/huggingface/candle</link>
      <description>&lt;p&gt;Minimalist ML framework for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;candle&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/hugging-face-879548962464493619&quot;&gt;&lt;img src=&quot;https://dcbadge.vercel.app/api/server/hugging-face-879548962464493619&quot; alt=&quot;discord server&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/candle-core&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/candle-core.svg?sanitize=true&quot; alt=&quot;Latest version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/candle-core&quot;&gt;&lt;img src=&quot;https://docs.rs/candle-core/badge.svg?sanitize=true&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/huggingface/candle/raw/main/LICENSE-MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/base-org/node?color=blue&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/huggingface/candle/raw/main/LICENSE-APACHE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202.0-blue?style=flat-square&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Candle is a minimalist ML framework for Rust with a focus on performance (including GPU support) and ease of use. Try our online demos: &lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-whisper&quot;&gt;whisper&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-llama2&quot;&gt;LLaMA2&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/radames/Candle-T5-Generation-Wasm&quot;&gt;T5&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-yolo&quot;&gt;yolo&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/radames/candle-segment-anything-wasm&quot;&gt;Segment Anything&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;p&gt;Make sure that you have &lt;a href=&quot;https://github.com/huggingface/candle/tree/main/candle-core&quot;&gt;&lt;code&gt;candle-core&lt;/code&gt;&lt;/a&gt; correctly installed as described in &lt;a href=&quot;https://huggingface.github.io/candle/guide/installation.html&quot;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Let&#39;s see how to run a simple matrix multiplication. Write the following to your &lt;code&gt;myapp/src/main.rs&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use candle_core::{Device, Tensor};

fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let device = Device::Cpu;

    let a = Tensor::randn(0f32, 1., (2, 3), &amp;amp;device)?;
    let b = Tensor::randn(0f32, 1., (3, 4), &amp;amp;device)?;

    let c = a.matmul(&amp;amp;b)?;
    println!(&quot;{c}&quot;);
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;cargo run&lt;/code&gt; should display a tensor of shape &lt;code&gt;Tensor[[2, 4], f32]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Having installed &lt;code&gt;candle&lt;/code&gt; with Cuda support, simply define the &lt;code&gt;device&lt;/code&gt; to be on GPU:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;- let device = Device::Cpu;
+ let device = Device::new_cuda(0)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced examples, please have a look at the following section.&lt;/p&gt; 
&lt;h2&gt;Check out our examples&lt;/h2&gt; 
&lt;p&gt;These online demos run entirely in your browser:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-yolo&quot;&gt;yolo&lt;/a&gt;: pose estimation and object recognition.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-whisper&quot;&gt;whisper&lt;/a&gt;: speech recognition.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-llama2&quot;&gt;LLaMA2&lt;/a&gt;: text generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/radames/Candle-T5-Generation-Wasm&quot;&gt;T5&lt;/a&gt;: text generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/radames/Candle-Phi-1.5-Wasm&quot;&gt;Phi-1.5, and Phi-2&lt;/a&gt;: text generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/radames/candle-segment-anything-wasm&quot;&gt;Segment Anything Model&lt;/a&gt;: Image segmentation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/radames/Candle-BLIP-Image-Captioning&quot;&gt;BLIP&lt;/a&gt;: image captioning.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We also provide a some command line based examples using state of the art models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/llama/&quot;&gt;LLaMA v1, v2, and v3&lt;/a&gt;: general LLM, includes the SOLAR-10.7B variant.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/falcon/&quot;&gt;Falcon&lt;/a&gt;: general LLM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/codegeex4-9b/&quot;&gt;Codegeex4&lt;/a&gt;: Code completion,code interpreter,web search,fuction calling,repository-level&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/glm4/&quot;&gt;GLM4&lt;/a&gt;: Open Multilingual Multimodal Chat LMs by THUDM&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/gemma/&quot;&gt;Gemma v1 and v2&lt;/a&gt;: 2b and 7b+/9b general LLMs from Google Deepmind.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/recurrent-gemma/&quot;&gt;RecurrentGemma&lt;/a&gt;: 2b and 7b Griffin based models from Google that mix attention with a RNN like state.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/phi/&quot;&gt;Phi-1, Phi-1.5, Phi-2, and Phi-3&lt;/a&gt;: 1.3b, 2.7b, and 3.8b general LLMs with performance on par with 7b models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/stable-lm/&quot;&gt;StableLM-3B-4E1T&lt;/a&gt;: a 3b general LLM pre-trained on 1T tokens of English and code datasets. Also supports StableLM-2, a 1.6b LLM trained on 2T tokens, as well as the code variants.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/mamba/&quot;&gt;Mamba&lt;/a&gt;: an inference only implementation of the Mamba state space model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/mistral/&quot;&gt;Mistral7b-v0.1&lt;/a&gt;: a 7b general LLM with better performance than all publicly available 13b models as of 2023-09-28.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/mixtral/&quot;&gt;Mixtral8x7b-v0.1&lt;/a&gt;: a sparse mixture of experts 8x7b general LLM with better performance than a Llama 2 70B model with much faster inference.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/bigcode/&quot;&gt;StarCoder&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/starcoder2/&quot;&gt;StarCoder2&lt;/a&gt;: LLM specialized to code generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/qwen/&quot;&gt;Qwen1.5&lt;/a&gt;: Bilingual (English/Chinese) LLMs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/rwkv/&quot;&gt;RWKV v5 and v6&lt;/a&gt;: An RNN with transformer level LLM performance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/replit-code/&quot;&gt;Replit-code-v1.5&lt;/a&gt;: a 3.3b LLM specialized for code completion.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/yi/&quot;&gt;Yi-6B / Yi-34B&lt;/a&gt;: two bilingual (English/Chinese) general LLMs with 6b and 34b parameters.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/quantized/&quot;&gt;Quantized LLaMA&lt;/a&gt;: quantized version of the LLaMA model using the same quantization techniques as &lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;llama.cpp&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://github.com/huggingface/candle/raw/main/candle-examples/examples/quantized/assets/aoc.gif&quot; width=&quot;600&quot;&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/stable-diffusion/&quot;&gt;Stable Diffusion&lt;/a&gt;: text to image generative model, support for the 1.5, 2.1, SDXL 1.0 and Turbo versions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://github.com/huggingface/candle/raw/main/candle-examples/examples/stable-diffusion/assets/stable-diffusion-xl.jpg&quot; width=&quot;200&quot;&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/wuerstchen/&quot;&gt;Wuerstchen&lt;/a&gt;: another text to image generative model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://github.com/huggingface/candle/raw/main/candle-examples/examples/wuerstchen/assets/cat.jpg&quot; width=&quot;200&quot;&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/yolo-v3/&quot;&gt;yolo-v3&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/yolo-v8/&quot;&gt;yolo-v8&lt;/a&gt;: object detection and pose estimation models.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/huggingface/candle/raw/main/candle-examples/examples/yolo-v8/assets/bike.od.jpg&quot; width=&quot;200&quot;&gt;&lt;img src=&quot;https://github.com/huggingface/candle/raw/main/candle-examples/examples/yolo-v8/assets/bike.pose.jpg&quot; width=&quot;200&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/segment-anything/&quot;&gt;segment-anything&lt;/a&gt;: image segmentation model with prompt.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://github.com/huggingface/candle/raw/main/candle-examples/examples/segment-anything/assets/sam_merged.jpg&quot; width=&quot;200&quot;&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/segformer/&quot;&gt;SegFormer&lt;/a&gt;: transformer based semantic segmentation model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/whisper/&quot;&gt;Whisper&lt;/a&gt;: speech recognition model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/encodec/&quot;&gt;EnCodec&lt;/a&gt;: high-quality audio compression model using residual vector quantization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/metavoice/&quot;&gt;MetaVoice&lt;/a&gt;: foundational model for text-to-speech.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/parler-tts/&quot;&gt;Parler-TTS&lt;/a&gt;: large text-to-speech model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/t5&quot;&gt;T5&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/bert/&quot;&gt;Bert&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/jina-bert/&quot;&gt;JinaBert&lt;/a&gt; : useful for sentence embeddings.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/dinov2/&quot;&gt;DINOv2&lt;/a&gt;: computer vision model trained using self-supervision (can be used for imagenet classification, depth evaluation, segmentation).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/vgg/&quot;&gt;VGG&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/repvgg&quot;&gt;RepVGG&lt;/a&gt;: computer vision models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/blip/&quot;&gt;BLIP&lt;/a&gt;: image to text model, can be used to generate captions for an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/clip/&quot;&gt;CLIP&lt;/a&gt;: multi-model vision and language model.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/trocr/&quot;&gt;TrOCR&lt;/a&gt;: a transformer OCR model, with dedicated submodels for hand-writing and printed recognition.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/marian-mt/&quot;&gt;Marian-MT&lt;/a&gt;: neural machine translation model, generates the translated text from the input text.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/examples/moondream/&quot;&gt;Moondream&lt;/a&gt;: tiny computer-vision model that can answer real-world questions about images.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Run them using commands like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo run --example quantized --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to use &lt;strong&gt;CUDA&lt;/strong&gt; add &lt;code&gt;--features cuda&lt;/code&gt; to the example command line. If you have cuDNN installed, use &lt;code&gt;--features cudnn&lt;/code&gt; for even more speedups.&lt;/p&gt; 
&lt;p&gt;There are also some wasm examples for whisper and &lt;a href=&quot;https://github.com/karpathy/llama2.c&quot;&gt;llama2.c&lt;/a&gt;. You can either build them with &lt;code&gt;trunk&lt;/code&gt; or try them online: &lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-whisper&quot;&gt;whisper&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/lmz/candle-llama2&quot;&gt;llama2&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/radames/Candle-T5-Generation-Wasm&quot;&gt;T5&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/radames/Candle-Phi-1.5-Wasm&quot;&gt;Phi-1.5, and Phi-2&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/spaces/radames/candle-segment-anything-wasm&quot;&gt;Segment Anything Model&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For LLaMA2, run the following command to retrieve the weight files and start a test server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd candle-wasm-examples/llama2-c
wget https://huggingface.co/spaces/lmz/candle-llama2/resolve/main/model.bin
wget https://huggingface.co/spaces/lmz/candle-llama2/resolve/main/tokenizer.json
trunk serve --release --port 8081
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then head over to &lt;a href=&quot;http://localhost:8081/&quot;&gt;http://localhost:8081/&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- ANCHOR: useful_libraries ---&gt; 
&lt;h2&gt;Useful External Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ToluClassics/candle-tutorial&quot;&gt;&lt;code&gt;candle-tutorial&lt;/code&gt;&lt;/a&gt;: A very detailed tutorial showing how to convert a PyTorch model to Candle.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EricLBuehler/candle-lora&quot;&gt;&lt;code&gt;candle-lora&lt;/code&gt;&lt;/a&gt;: Efficient and ergonomic LoRA implementation for Candle. &lt;code&gt;candle-lora&lt;/code&gt; has&lt;br&gt; out-of-the-box LoRA support for many models from Candle, which can be found &lt;a href=&quot;https://github.com/EricLBuehler/candle-lora/tree/master/candle-lora-transformers/examples&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/KGrewal1/optimisers&quot;&gt;&lt;code&gt;optimisers&lt;/code&gt;&lt;/a&gt;: A collection of optimisers including SGD with momentum, AdaGrad, AdaDelta, AdaMax, NAdam, RAdam, and RMSprop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EricLBuehler/candle-vllm&quot;&gt;&lt;code&gt;candle-vllm&lt;/code&gt;&lt;/a&gt;: Efficient platform for inference and serving local LLMs including an OpenAI compatible API server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mokeyish/candle-ext&quot;&gt;&lt;code&gt;candle-ext&lt;/code&gt;&lt;/a&gt;: An extension library to Candle that provides PyTorch functions not currently available in Candle.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vishpat/candle-coursera-ml&quot;&gt;&lt;code&gt;candle-coursera-ml&lt;/code&gt;&lt;/a&gt;: Implementation of ML algorithms from Coursera&#39;s &lt;a href=&quot;https://www.coursera.org/specializations/machine-learning-introduction&quot;&gt;Machine Learning Specialization&lt;/a&gt; course.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/floneum/floneum/tree/master/interfaces/kalosm&quot;&gt;&lt;code&gt;kalosm&lt;/code&gt;&lt;/a&gt;: A multi-modal meta-framework in Rust for interfacing with local pre-trained models with support for controlled generation, custom samplers, in-memory vector databases, audio transcription, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EricLBuehler/candle-sampling&quot;&gt;&lt;code&gt;candle-sampling&lt;/code&gt;&lt;/a&gt;: Sampling techniques for Candle.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jeroenvlek/gpt-from-scratch-rs&quot;&gt;&lt;code&gt;gpt-from-scratch-rs&lt;/code&gt;&lt;/a&gt;: A port of Andrej Karpathy&#39;s &lt;em&gt;Let&#39;s build GPT&lt;/em&gt; tutorial on YouTube showcasing the Candle API on a toy problem.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tomsanbear/candle-einops&quot;&gt;&lt;code&gt;candle-einops&lt;/code&gt;&lt;/a&gt;: A pure rust implementation of the python &lt;a href=&quot;https://github.com/arogozhnikov/einops&quot;&gt;einops&lt;/a&gt; library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/atoma-network/atoma-infer&quot;&gt;&lt;code&gt;atoma-infer&lt;/code&gt;&lt;/a&gt;: A Rust library for fast inference at scale, leveraging FlashAttention2 for efficient attention computation, PagedAttention for efficient KV-cache memory management, and multi-GPU support. It is OpenAI api compatible.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nerdai/llms-from-scratch-rs&quot;&gt;&lt;code&gt;llms-from-scratch-rs&lt;/code&gt;&lt;/a&gt;: A comprehensive Rust translation of the code from Sebastian Raschka&#39;s Build an LLM from Scratch book.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you have an addition to this list, please submit a pull request.&lt;/p&gt; 
&lt;!-- ANCHOR_END: useful_libraries ---&gt; 
&lt;!-- ANCHOR: features ---&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple syntax, looks and feels like PyTorch. 
  &lt;ul&gt; 
   &lt;li&gt;Model training.&lt;/li&gt; 
   &lt;li&gt;Embed user-defined ops/kernels, such as &lt;a href=&quot;https://github.com/huggingface/candle/raw/89ba005962495f2bfbda286e185e9c3c7f5300a3/candle-flash-attn/src/lib.rs#L152&quot;&gt;flash-attention v2&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Backends. 
  &lt;ul&gt; 
   &lt;li&gt;Optimized CPU backend with optional MKL support for x86 and Accelerate for macs.&lt;/li&gt; 
   &lt;li&gt;CUDA backend for efficiently running on GPUs, multiple GPU distribution via NCCL.&lt;/li&gt; 
   &lt;li&gt;WASM support, run your models in a browser.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Included models. 
  &lt;ul&gt; 
   &lt;li&gt;Language Models. 
    &lt;ul&gt; 
     &lt;li&gt;LLaMA v1, v2, and v3 with variants such as SOLAR-10.7B.&lt;/li&gt; 
     &lt;li&gt;Falcon.&lt;/li&gt; 
     &lt;li&gt;StarCoder, StarCoder2.&lt;/li&gt; 
     &lt;li&gt;Phi 1, 1.5, 2, and 3.&lt;/li&gt; 
     &lt;li&gt;Mamba, Minimal Mamba&lt;/li&gt; 
     &lt;li&gt;Gemma v1 2b and 7b+, v2 2b and 9b.&lt;/li&gt; 
     &lt;li&gt;Mistral 7b v0.1.&lt;/li&gt; 
     &lt;li&gt;Mixtral 8x7b v0.1.&lt;/li&gt; 
     &lt;li&gt;StableLM-3B-4E1T, StableLM-2-1.6B, Stable-Code-3B.&lt;/li&gt; 
     &lt;li&gt;Replit-code-v1.5-3B.&lt;/li&gt; 
     &lt;li&gt;Bert.&lt;/li&gt; 
     &lt;li&gt;Yi-6B and Yi-34B.&lt;/li&gt; 
     &lt;li&gt;Qwen1.5, Qwen1.5 MoE.&lt;/li&gt; 
     &lt;li&gt;RWKV v5 and v6.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Quantized LLMs. 
    &lt;ul&gt; 
     &lt;li&gt;Llama 7b, 13b, 70b, as well as the chat and code variants.&lt;/li&gt; 
     &lt;li&gt;Mistral 7b, and 7b instruct.&lt;/li&gt; 
     &lt;li&gt;Mixtral 8x7b.&lt;/li&gt; 
     &lt;li&gt;Zephyr 7b a and b (Mistral-7b based).&lt;/li&gt; 
     &lt;li&gt;OpenChat 3.5 (Mistral-7b based).&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Text to text. 
    &lt;ul&gt; 
     &lt;li&gt;T5 and its variants: FlanT5, UL2, MADLAD400 (translation), CoEdit (Grammar correction).&lt;/li&gt; 
     &lt;li&gt;Marian MT (Machine Translation).&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Text to image. 
    &lt;ul&gt; 
     &lt;li&gt;Stable Diffusion v1.5, v2.1, XL v1.0.&lt;/li&gt; 
     &lt;li&gt;Wurstchen v2.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Image to text. 
    &lt;ul&gt; 
     &lt;li&gt;BLIP.&lt;/li&gt; 
     &lt;li&gt;TrOCR.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Audio. 
    &lt;ul&gt; 
     &lt;li&gt;Whisper, multi-lingual speech-to-text.&lt;/li&gt; 
     &lt;li&gt;EnCodec, audio compression model.&lt;/li&gt; 
     &lt;li&gt;MetaVoice-1B, text-to-speech model.&lt;/li&gt; 
     &lt;li&gt;Parler-TTS, text-to-speech model.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Computer Vision Models. 
    &lt;ul&gt; 
     &lt;li&gt;DINOv2, ConvMixer, EfficientNet, ResNet, ViT, VGG, RepVGG, ConvNeXT, ConvNeXTv2, MobileOne, EfficientVit (MSRA), MobileNetv4, Hiera, FastViT.&lt;/li&gt; 
     &lt;li&gt;yolo-v3, yolo-v8.&lt;/li&gt; 
     &lt;li&gt;Segment-Anything Model (SAM).&lt;/li&gt; 
     &lt;li&gt;SegFormer.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;File formats: load models from safetensors, npz, ggml, or PyTorch files.&lt;/li&gt; 
 &lt;li&gt;Serverless (on CPU), small and fast deployments.&lt;/li&gt; 
 &lt;li&gt;Quantization support using the llama.cpp quantized types.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- ANCHOR_END: features ---&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;!-- ANCHOR: cheatsheet ---&gt; 
&lt;p&gt;Cheatsheet:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Using PyTorch&lt;/th&gt; 
   &lt;th&gt;Using Candle&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Creation&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;torch.Tensor([[1, 2], [3, 4]])&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Tensor::new(&amp;amp;[[1f32, 2.], [3., 4.]], &amp;amp;Device::Cpu)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Creation&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;torch.zeros((2, 2))&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Tensor::zeros((2, 2), DType::F32, &amp;amp;Device::Cpu)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Indexing&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor[:, :4]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.i((.., ..4))?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Operations&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.view((2, 2))&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.reshape((2, 2))?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Operations&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a.matmul(b)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a.matmul(&amp;amp;b)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Arithmetic&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;amp;a + &amp;amp;b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Device&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to(device=&quot;cuda&quot;)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to_device(&amp;amp;Device::new_cuda(0)?)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dtype&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to(dtype=torch.float16)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tensor.to_dtype(&amp;amp;DType::F16)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Saving&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;torch.save({&quot;A&quot;: A}, &quot;model.bin&quot;)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;candle::safetensors::save(&amp;amp;HashMap::from([(&quot;A&quot;, A)]), &quot;model.safetensors&quot;)?&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Loading&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;weights = torch.load(&quot;model.bin&quot;)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;candle::safetensors::load(&quot;model.safetensors&quot;, &amp;amp;device)&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- ANCHOR_END: cheatsheet ---&gt; 
&lt;h2&gt;Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-core&quot;&gt;candle-core&lt;/a&gt;: Core ops, devices, and &lt;code&gt;Tensor&lt;/code&gt; struct definition&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-nn/&quot;&gt;candle-nn&lt;/a&gt;: Tools to build real models&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-examples/&quot;&gt;candle-examples&lt;/a&gt;: Examples of using the library in realistic settings&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-kernels/&quot;&gt;candle-kernels&lt;/a&gt;: CUDA custom kernels&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-datasets/&quot;&gt;candle-datasets&lt;/a&gt;: Datasets and data loaders.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-transformers&quot;&gt;candle-transformers&lt;/a&gt;: transformers-related utilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-flash-attn&quot;&gt;candle-flash-attn&lt;/a&gt;: Flash attention v2 layer.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/huggingface/candle/main/candle-onnx/&quot;&gt;candle-onnx&lt;/a&gt;: ONNX model evaluation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Why should I use Candle?&lt;/h3&gt; 
&lt;p&gt;Candle&#39;s core goal is to &lt;em&gt;make serverless inference possible&lt;/em&gt;. Full machine learning frameworks like PyTorch are very large, which makes creating instances on a cluster slow. Candle allows deployment of lightweight binaries.&lt;/p&gt; 
&lt;p&gt;Secondly, Candle lets you &lt;em&gt;remove Python&lt;/em&gt; from production workloads. Python overhead can seriously hurt performance, and the &lt;a href=&quot;https://www.backblaze.com/blog/the-python-gil-past-present-and-future/&quot;&gt;GIL&lt;/a&gt; is a notorious source of headaches.&lt;/p&gt; 
&lt;p&gt;Finally, Rust is cool! A lot of the HF ecosystem already has Rust crates, like &lt;a href=&quot;https://github.com/huggingface/safetensors&quot;&gt;safetensors&lt;/a&gt; and &lt;a href=&quot;https://github.com/huggingface/tokenizers&quot;&gt;tokenizers&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Other ML frameworks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/coreylowman/dfdx&quot;&gt;dfdx&lt;/a&gt; is a formidable crate, with shapes being included in types. This prevents a lot of headaches by getting the compiler to complain about shape mismatches right off the bat. However, we found that some features still require nightly, and writing code can be a bit daunting for non rust experts.&lt;/p&gt; &lt;p&gt;We&#39;re leveraging and contributing to other core crates for the runtime so hopefully both crates can benefit from each other.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/burn-rs/burn&quot;&gt;burn&lt;/a&gt; is a general crate that can leverage multiple backends so you can choose the best engine for your workload.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/LaurentMazare/tch-rs.git&quot;&gt;tch-rs&lt;/a&gt; Bindings to the torch library in Rust. Extremely versatile, but they bring in the entire torch library into the runtime. The main contributor of &lt;code&gt;tch-rs&lt;/code&gt; is also involved in the development of &lt;code&gt;candle&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Common Errors&lt;/h3&gt; 
&lt;h4&gt;Missing symbols when compiling with the mkl feature.&lt;/h4&gt; 
&lt;p&gt;If you get some missing symbols when compiling binaries/tests using the mkl or accelerate features, e.g. for mkl you get:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  = note: /usr/bin/ld: (....o): in function `blas::sgemm&#39;:
          .../blas-0.22.0/src/lib.rs:1944: undefined reference to `sgemm_&#39; collect2: error: ld returned 1 exit status

  = note: some `extern` functions couldn&#39;t be found; some native libraries may need to be installed or have their path specified
  = note: use the `-l` flag to specify native libraries to link
  = note: use the `cargo:rustc-link-lib` directive to specify the native libraries to link with Cargo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or for accelerate:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Undefined symbols for architecture arm64:
            &quot;_dgemm_&quot;, referenced from:
                candle_core::accelerate::dgemm::h1b71a038552bcabe in libcandle_core...
            &quot;_sgemm_&quot;, referenced from:
                candle_core::accelerate::sgemm::h2cf21c592cba3c47 in libcandle_core...
          ld: symbol(s) not found for architecture arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is likely due to a missing linker flag that was needed to enable the mkl library. You can try adding the following for mkl at the top of your binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;extern crate intel_mkl_src;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or for accelerate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;extern crate accelerate_src;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Cannot run the LLaMA examples: access to source requires login credentials&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;Error: request error: https://huggingface.co/meta-llama/Llama-2-7b-hf/resolve/main/tokenizer.json: status code 401
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is likely because you&#39;re not permissioned for the LLaMA-v2 model. To fix this, you have to register on the huggingface-hub, accept the &lt;a href=&quot;https://huggingface.co/meta-llama/Llama-2-7b-hf&quot;&gt;LLaMA-v2 model conditions&lt;/a&gt;, and set up your authentication token. See issue &lt;a href=&quot;https://github.com/huggingface/candle/issues/350&quot;&gt;#350&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h4&gt;Missing cute/cutlass headers when compiling flash-attn&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;  In file included from kernels/flash_fwd_launch_template.h:11:0,
                   from kernels/flash_fwd_hdim224_fp16_sm80.cu:5:
  kernels/flash_fwd_kernel.h:8:10: fatal error: cute/algorithm/copy.hpp: No such file or directory
   #include &amp;lt;cute/algorithm/copy.hpp&amp;gt;
            ^~~~~~~~~~~~~~~~~~~~~~~~~
  compilation terminated.
  Error: nvcc error while compiling:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/NVIDIA/cutlass&quot;&gt;cutlass&lt;/a&gt; is provided as a git submodule so you may want to run the following command to check it in properly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git submodule update --init
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Compiling with flash-attention fails&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with ‘...’:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a bug in gcc-11 triggered by the Cuda compiler. To fix this, install a different, supported gcc version - for example gcc-10, and specify the path to the compiler in the NVCC_CCBIN environment variable.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;env NVCC_CCBIN=/usr/lib/gcc/x86_64-linux-gnu/10 cargo ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Linking error on windows when running rustdoc or mdbook tests&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;Couldn&#39;t compile the test.
---- .\candle-book\src\inference\hub.md - Using_the_hub::Using_in_a_real_model_ (line 50) stdout ----
error: linking with `link.exe` failed: exit code: 1181
//very long chain of linking
 = note: LINK : fatal error LNK1181: cannot open input file &#39;windows.0.48.5.lib&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure you link all native libraries that might be located outside a project target, e.g., to run mdbook tests, you should run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mdbook test candle-book -L .\target\debug\deps\ `
-L native=$env:USERPROFILE\.cargo\registry\src\index.crates.io-6f17d22bba15001f\windows_x86_64_msvc-0.42.2\lib `
-L native=$env:USERPROFILE\.cargo\registry\src\index.crates.io-6f17d22bba15001f\windows_x86_64_msvc-0.48.5\lib
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Extremely slow model load time with WSL&lt;/h4&gt; 
&lt;p&gt;This may be caused by the models being loaded from &lt;code&gt;/mnt/c&lt;/code&gt;, more details on &lt;a href=&quot;https://stackoverflow.com/questions/68972448/why-is-wsl-extremely-slow-when-compared-with-native-windows-npm-yarn-processing&quot;&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Tracking down errors&lt;/h4&gt; 
&lt;p&gt;You can set &lt;code&gt;RUST_BACKTRACE=1&lt;/code&gt; to be provided with backtraces when a candle error is generated.&lt;/p&gt; 
&lt;h4&gt;CudaRC error&lt;/h4&gt; 
&lt;p&gt;If you encounter an error like this one &lt;code&gt;called &lt;/code&gt;Result::unwrap()&lt;code&gt;on an&lt;/code&gt;Err&lt;code&gt; value: LoadLibraryExW { source: Os { code: 126, kind: Uncategorized, message: &quot;The specified module could not be found.&quot; } }&lt;/code&gt; on windows. To fix copy and rename these 3 files (make sure they are in path). The paths depend on your cuda version. &lt;code&gt;c:\Windows\System32\nvcuda.dll&lt;/code&gt; -&amp;gt; &lt;code&gt;cuda.dll&lt;/code&gt; &lt;code&gt;c:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\bin\cublas64_12.dll&lt;/code&gt; -&amp;gt; &lt;code&gt;cublas.dll&lt;/code&gt; &lt;code&gt;c:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\bin\curand64_10.dll&lt;/code&gt; -&amp;gt; &lt;code&gt;curand.dll&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell/DSC</title>
      <link>https://github.com/PowerShell/DSC</link>
      <description>&lt;p&gt;This repo is for the DSC v3 project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DSCv3&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This repo isn&#39;t accepting code contributions. It&#39;s public and open source to show progress and enable feedback. Once we&#39;re at a feature complete state, we can start taking code contributions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;What&#39;s DSCv3?&lt;/h2&gt; 
&lt;p&gt;DSCv3 is the latest iteration of Microsoft&#39;s Desired State Configuration platform. DSCv3 is an open source command line application that abstracts the management of software components declaratively and idempotently. DSCv3 runs on Linux, macOS, and Windows without any external dependencies.&lt;/p&gt; 
&lt;p&gt;With DSCv3, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Author resources to manage your systems in any language&lt;/li&gt; 
 &lt;li&gt;Invoke individual resources&lt;/li&gt; 
 &lt;li&gt;Create configuration documents that define the desired state of a system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Differences from PowerShell DSC&lt;/h3&gt; 
&lt;p&gt;DSCv3 differs from PowerShell DSC in a few important ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;DSCv3 doesn&#39;t depend on PowerShell. You can use DSCv3 without PowerShell installed and manage resources written in bash, python, C#, Go, or any other language.&lt;/li&gt; 
 &lt;li&gt;DSCv3 use of PowerShell based resources does not depend on PSDesiredStateConfiguration module&lt;/li&gt; 
 &lt;li&gt;DSCv3 doesn&#39;t include a local configuration manager. DSCv3 is invoked as a command. It doesn&#39;t run as a service.&lt;/li&gt; 
 &lt;li&gt;Non-PowerShell resources define their schemas with JSON files, not MOF files.&lt;/li&gt; 
 &lt;li&gt;Configuration documents are defined in JSON or YAML files, not PowerShell script files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Importantly, while DSCv3 represents a major change to the DSC platform, DSCv3 is able to invoke PowerShell DSC Resources, including script-based and class-based DSC Resources, as they exist today. The configuration documents aren&#39;t compatible, but all published PowerShell DSC Resources are. You can use PowerShell DSC resources in DSCv3 with both Windows PowerShell and PowerShell.&lt;/p&gt; 
&lt;h2&gt;Installing DSCv3&lt;/h2&gt; 
&lt;p&gt;To install DSC v3:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the &lt;a href=&quot;https://github.com/PowerShell/DSC/releases/latest&quot;&gt;latest release from this repository&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Expand the release archive.&lt;/li&gt; 
 &lt;li&gt;Add the folder containing the expanded archive contents to the &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Explore DSCv3&lt;/h2&gt; 
&lt;p&gt;If you&#39;re new to DSC or configuration management, we recommend reviewing the &lt;a href=&quot;https://learn.microsoft.com/powershell/dsc/overview?view=dsc-3.0&amp;amp;preserve-view=true&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Learning and authoring tutorials&lt;/h3&gt; 
&lt;p&gt;If you&#39;re already familiar with DSC or just want to start experimenting with v3, we recommend reviewing the &lt;a href=&quot;https://github.com/PowerShell/DSC-Samples&quot;&gt;Samples repository&lt;/a&gt; and the accompanying &lt;a href=&quot;https://powershell.github.io/DSC-Samples&quot;&gt;tutorial site&lt;/a&gt;. The Samples repo is ready to accept Pull Requests, which is a great way to contribute while v3 is in early phases of development.&lt;/p&gt; 
&lt;h2&gt;Integrating with DSCv3&lt;/h2&gt; 
&lt;p&gt;DSCv3 is a platform tool that abstracts the concerns for defining and invoking resources. Higher order tools, like Azure Machine Configuration, Azure Automanaged VM, and WinGet are early partners for DSCv3 as orchestration agents.&lt;/p&gt; 
&lt;p&gt;DSCv3 uses JSON schemas to define the structure of resources, configuration documents, and the outputs that DSCv3 returns. These schemas make it easier to integrate DSCv3 with other tools, because they standardize and document how to interface with DSCv3.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/PowerShell/DSC/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; before participating in this project.&lt;/p&gt; 
&lt;h2&gt;Security Policy&lt;/h2&gt; 
&lt;p&gt;For any security issues, please see our &lt;a href=&quot;https://raw.githubusercontent.com/PowerShell/DSC/main/SECURITY.md&quot;&gt;Security Policy&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>shadowsocks/shadowsocks-rust</title>
      <link>https://github.com/shadowsocks/shadowsocks-rust</link>
      <description>&lt;p&gt;A Rust port of shadowsocks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shadowsocks&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/zonyitoo/shadowsocks-rust&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/zonyitoo/shadowsocks-rust.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-and-test.yml&quot;&gt;&lt;img src=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-and-test.yml/badge.svg?sanitize=true&quot; alt=&quot;Build &amp;amp; Test&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-msrv.yml&quot;&gt;&lt;img src=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-msrv.yml/badge.svg?sanitize=true&quot; alt=&quot;Build MSRV&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-release.yml&quot;&gt;&lt;img src=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-release.yml/badge.svg?event=push&quot; alt=&quot;Build Releases&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-nightly-release.yml&quot;&gt;&lt;img src=&quot;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-nightly-release.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Nightly Releases&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gurubase.io/g/shadowsocks&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gurubase-Ask%20shadowsocks%20Guru-006BFF&quot; alt=&quot;Gurubase&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://crates.io/crates/shadowsocks-rust&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/shadowsocks-rust.svg?sanitize=true&quot; alt=&quot;crates.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/shadowsocks/shadowsocks-rust.svg?sanitize=true&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://archlinux.org/packages/extra/x86_64/shadowsocks-rust/&quot;&gt;&lt;img src=&quot;https://img.shields.io/archlinux/v/extra/x86_64/shadowsocks-rust&quot; alt=&quot;shadowsocks-rust&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://aur.archlinux.org/packages/shadowsocks-rust-git&quot;&gt;&lt;img src=&quot;https://img.shields.io/aur/version/shadowsocks-rust-git&quot; alt=&quot;aur shadowsocks-rust-git&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/NixOS/nixpkgs/tree/master/pkgs/tools/networking/shadowsocks-rust&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/NixOS-shadowsocks--rust-blue?logo=nixos&quot; alt=&quot;NixOS&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://snapcraft.io/shadowsocks-rust&quot;&gt;&lt;img src=&quot;https://snapcraft.io/shadowsocks-rust/badge.svg?sanitize=true&quot; alt=&quot;snap shadowsocks-rust&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/shadowsocks-rust#default&quot;&gt;&lt;img src=&quot;https://img.shields.io/homebrew/v/shadowsocks-rust&quot; alt=&quot;homebrew shadowsocks-rust&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ports.macports.org/port/shadowsocks-rust/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fports.macports.org%2Fapi%2Fv1%2Fports%2Fshadowsocks-rust%2F&amp;amp;query=%24.version&amp;amp;label=macports&quot; alt=&quot;MacPorts shadowsocks-rust&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is a port of &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks&quot;&gt;shadowsocks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;shadowsocks is a fast tunnel proxy that helps you bypass firewalls.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Library&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://crates.io/crates/shadowsocks&quot;&gt;&lt;strong&gt;shadowsocks&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://crates.io/crates/shadowsocks&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/shadowsocks.svg?sanitize=true&quot; alt=&quot;crates.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/shadowsocks&quot;&gt;&lt;img src=&quot;https://img.shields.io/docsrs/shadowsocks&quot; alt=&quot;docs.rs&quot;&gt;&lt;/a&gt; shadowsocks core protocol&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://crates.io/crates/shadowsocks-service&quot;&gt;&lt;strong&gt;shadowsocks-service&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://crates.io/crates/shadowsocks-service&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/shadowsocks-service.svg?sanitize=true&quot; alt=&quot;crates.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/shadowsocks-service&quot;&gt;&lt;img src=&quot;https://img.shields.io/docsrs/shadowsocks-service&quot; alt=&quot;docs.rs&quot;&gt;&lt;/a&gt; Services for serving shadowsocks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://crates.io/crates/shadowsocks-rust&quot;&gt;&lt;strong&gt;shadowsocks-rust&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://crates.io/crates/shadowsocks-rust&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/shadowsocks-rust.svg?sanitize=true&quot; alt=&quot;crates.io&quot;&gt;&lt;/a&gt; Binaries running common shadowsocks services&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Related Projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/spyophobia/shadowsocks-gtk-rs&quot;&gt;spyophobia/shadowsocks-gtk-rs&lt;/a&gt; A GUI on Linux for &lt;code&gt;sslocal&lt;/code&gt; using GTK, &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/issues/664&quot;&gt;discussion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/honwen/openwrt-shadowsocks-rust&quot;&gt;honwen/openwrt-shadowsocks-rust&lt;/a&gt; OpenWRT solution for &lt;code&gt;sslocal&lt;/code&gt;, &lt;a href=&quot;https://github.com/honwen/openwrt-shadowsocks-rust&quot;&gt;discussion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cg31/shadowsocks-windows-gui-rust&quot;&gt;cg31/shadowsocks-windows-gui-rust&lt;/a&gt; Windows GUI client, &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/issues/375&quot;&gt;discussion&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Build &amp;amp; Install&lt;/h2&gt; 
&lt;h3&gt;Optional Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;hickory-dns&lt;/code&gt; - Uses &lt;a href=&quot;https://crates.io/crates/hickory-resolver&quot;&gt;&lt;code&gt;hickory-resolver&lt;/code&gt;&lt;/a&gt; as DNS resolver instead of &lt;code&gt;tokio&lt;/code&gt;&#39;s builtin.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-http&lt;/code&gt; - Allow using HTTP protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;local-http-native-tls&lt;/code&gt; - Support HTTPS with &lt;a href=&quot;https://crates.io/crates/native-tls&quot;&gt;&lt;code&gt;native-tls&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;local-http-rustls&lt;/code&gt; - Support HTTPS with &lt;a href=&quot;https://crates.io/crates/rustls&quot;&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-tunnel&lt;/code&gt; - Allow using tunnel protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-socks4&lt;/code&gt; - Allow using SOCKS4/4a protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-redir&lt;/code&gt; - Allow using redir (transparent proxy) protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-dns&lt;/code&gt; - Allow using dns protocol for &lt;code&gt;sslocal&lt;/code&gt;, serves as a DNS server proxying queries to local or remote DNS servers by ACL rules&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-fake-dns&lt;/code&gt; - FakeDNS, allocating an IP address for each individual Query from a specific IP pool&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-tun&lt;/code&gt; - &lt;a href=&quot;https://en.wikipedia.org/wiki/TUN/TAP&quot;&gt;TUN&lt;/a&gt; interface support for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;local-online-config&lt;/code&gt; - &lt;a href=&quot;https://shadowsocks.org/doc/sip008.html&quot;&gt;SIP008&lt;/a&gt; Online Configuration Delivery&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;stream-cipher&lt;/code&gt; - Enable deprecated stream ciphers. WARN: stream ciphers are UNSAFE!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;aead-cipher-extra&lt;/code&gt; - Enable non-standard AEAD ciphers&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;aead-cipher-2022&lt;/code&gt; - Enable AEAD-2022 ciphers (&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/196&quot;&gt;SIP022&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;aead-cipher-2022-extra&lt;/code&gt; - Enable AEAD-2022 extra ciphers (non-standard ciphers)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Memory Allocators&lt;/h4&gt; 
&lt;p&gt;This project uses system (libc) memory allocator (Rust&#39;s default). But it also allows you to use other famous allocators by features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;jemalloc&lt;/code&gt; - Uses &lt;a href=&quot;http://jemalloc.net/&quot;&gt;jemalloc&lt;/a&gt; as global memory allocator&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mimalloc&lt;/code&gt; - Uses &lt;a href=&quot;https://microsoft.github.io/mimalloc/&quot;&gt;mi-malloc&lt;/a&gt; as global memory allocator&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tcmalloc&lt;/code&gt; - Uses &lt;a href=&quot;https://google.github.io/tcmalloc/overview.html&quot;&gt;TCMalloc&lt;/a&gt; as global memory allocator. It tries to link system-wide tcmalloc by default, use vendored from source with &lt;code&gt;tcmalloc-vendored&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;snmalloc&lt;/code&gt; - Uses &lt;a href=&quot;https://github.com/microsoft/snmalloc&quot;&gt;snmalloc&lt;/a&gt; as global memory allocator&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rpmalloc&lt;/code&gt; - Uses &lt;a href=&quot;https://github.com/mjansson/rpmalloc&quot;&gt;rpmalloc&lt;/a&gt; as global memory allocator&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;crates.io&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Install from &lt;a href=&quot;https://crates.io/crates/shadowsocks-rust&quot;&gt;crates.io&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install from crates.io
cargo install shadowsocks-rust
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;then you can find &lt;code&gt;sslocal&lt;/code&gt; and &lt;code&gt;ssserver&lt;/code&gt; in &lt;code&gt;$CARGO_HOME/bin&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Install using Homebrew&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;For macOS and Linux, you can install it using &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install shadowsocks-rust
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;strong&gt;Install using snap&lt;/strong&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install from snapstore
snap install shadowsocks-rust

# List services
snap services shadowsocks-rust

# Enable and start shadowsocks-rust.sslocal-daemon snap service
snap start --enable shadowsocks-rust.sslocal-daemon

# Show generated systemd service status
systemctl status snap.shadowsocks-rust.sslocal-daemon.service

# Override generated systemd service (configure startup options)
systemctl edit snap.shadowsocks-rust.sslocal-daemon.service

## NOTE: you can pass args to sslocal:
##  [Service]
##  ExecStart=
##  ExecStart=/usr/bin/snap run shadowsocks-rust.sslocal-daemon -b &quot;127.0.0.1:1080&quot; --server-url &quot;ss://....&quot;

# Restart generated systemd service to apply changes
systemctl restart snap.shadowsocks-rust.sslocal-daemon.service

# ... and show service status
systemctl status snap.shadowsocks-rust.sslocal-daemon.service
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;strong&gt;Download release&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Download static-linked build &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/releases&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;build-windows&lt;/code&gt;: Build for &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;build-linux&lt;/code&gt;: Build for &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, Debian 9 (Stretch), GLIBC 2.18&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;build-docker&lt;/code&gt;: Build for &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;, &lt;code&gt;x86_64-pc-windows-gnu&lt;/code&gt;, ... (statically linked)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;This project provided Docker images for the &lt;code&gt;linux/i386&lt;/code&gt; and &lt;code&gt;linux/amd64&lt;/code&gt; and &lt;code&gt;linux/arm64/v8&lt;/code&gt; architectures.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Docker containers do not have access to IPv6 by default&lt;/strong&gt;: Make sure to disable IPv6 Route in the client or &lt;a href=&quot;https://docs.docker.com/config/daemon/ipv6/#use-ipv6-for-the-default-bridge-network&quot;&gt;enable IPv6 access to docker containers&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Pull from GitHub Container Registry&lt;/h4&gt; 
&lt;p&gt;Docker will pull the image of the appropriate architecture from our &lt;a href=&quot;https://github.com/orgs/shadowsocks/packages?repo_name=shadowsocks-rust&quot;&gt;GitHub Packages&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull ghcr.io/shadowsocks/sslocal-rust:latest
docker pull ghcr.io/shadowsocks/ssserver-rust:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Build on the local machine（Optional）&lt;/h4&gt; 
&lt;p&gt;If you want to build the Docker image yourself, you need to use the &lt;a href=&quot;https://docs.docker.com/buildx/working-with-buildx/&quot;&gt;BuildX&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker buildx build -t shadowsocks/ssserver-rust:latest -t shadowsocks/ssserver-rust:v1.15.2 --target ssserver .
docker buildx build -t shadowsocks/sslocal-rust:latest -t shadowsocks/sslocal-rust:v1.15.2 --target sslocal .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Run the container&lt;/h4&gt; 
&lt;p&gt;You need to mount the configuration file into the container and create an external port map for the container to connect to it.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --name sslocal-rust \
  --restart always \
  -p 1080:1080/tcp \
  -v /path/to/config.json:/etc/shadowsocks-rust/config.json \
  -dit ghcr.io/shadowsocks/sslocal-rust:latest

docker run --name ssserver-rust \
  --restart always \
  -p 8388:8388/tcp \
  -p 8388:8388/udp \
  -v /path/to/config.json:/etc/shadowsocks-rust/config.json \
  -dit ghcr.io/shadowsocks/ssserver-rust:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;strong&gt;Deploy to Kubernetes&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;This project provided yaml manifests for deploying to Kubernetes.&lt;/p&gt; 
&lt;p&gt;You can leverage k8s Service to expose traffic outside, like LoadBalancer or NodePort which gains more fine-grained compared with fixed host or port.&lt;/p&gt; 
&lt;p&gt;For a more interesting use case, you can use a Ingress(Istio, nginx, etc.) which routes the matched traffic to shadowsocks along with the real web service.&lt;/p&gt; 
&lt;h4&gt;Using &lt;code&gt;kubectl&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;kubectl apply -f https://github.com/shadowsocks/shadowsocks-rust/raw/master/k8s/shadowsocks-rust.yaml&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can change the config via editing the ConfigMap named &lt;code&gt;shadowsocks-rust&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For more fine-grained control, use &lt;code&gt;helm&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Using &lt;code&gt;helm&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;helm install my-release k8s/chart -f my-values.yaml&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Below is the common default values you can change:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# This is the shadowsocks config which will be mount to /etc/shadowocks-rust.
# You can put arbitrary yaml here, and it will be translated to json before mounting.
servers:
- server: &quot;::&quot;
  server_port: 8388
  service_port: 80 # the k8s service port, default to server_port
  password: mypassword
  method: aes-256-gcm
  fast_open: true
  mode: tcp_and_udp
  # plugin: v2ray-plugin
  # plugin_opts: server;tls;host=github.com

# Whether to download v2ray and xray plugin.
downloadPlugins: false

# Name of the ConfigMap with config.json configuration for shadowsocks-rust.
configMapName: &quot;&quot;

service:
  # Change to LoadBalancer if you are behind a cloud provider like aws, gce, or tke.
  type: ClusterIP

# Bind shadowsocks port port to host, i.e., we can use host:port to access shawdowsocks server.
hostPort: false

replicaCount: 1

image:
  repository: ghcr.io/shadowsocks/ssserver-rust
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: &quot;latest&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;strong&gt;Build from source&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Use cargo to build. NOTE: &lt;strong&gt;RAM &amp;gt;= 2GiB&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;sslocal&lt;/code&gt; and &lt;code&gt;ssserver&lt;/code&gt; will appear in &lt;code&gt;./target/(debug|release)/&lt;/code&gt;, it works similarly as the two binaries in the official ShadowSocks&#39; implementation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make install TARGET=release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssserver&lt;/code&gt;, &lt;code&gt;ssmanager&lt;/code&gt; and &lt;code&gt;ssurl&lt;/code&gt; will be installed to &lt;code&gt;/usr/local/bin&lt;/code&gt; (variable PREFIX).&lt;/p&gt; 
&lt;p&gt;For Windows users, if you have encountered any problem in building, check and discuss in &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/issues/102&quot;&gt;#102&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;target-cpu optimization&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;If you are building for your current CPU platform (for example, build and run on your personal computer), it is recommended to set &lt;code&gt;target-cpu=native&lt;/code&gt; feature to let &lt;code&gt;rustc&lt;/code&gt; generate and optimize code for the CPU running the compiler.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export RUSTFLAGS=&quot;-C target-cpu=native&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;strong&gt;Build standalone binaries&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./build/build-release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssserver&lt;/code&gt;, &lt;code&gt;ssmanager&lt;/code&gt; and &lt;code&gt;ssurl&lt;/code&gt; will be packaged in&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;./build/shadowsocks-${VERSION}-stable.x86_64-unknown-linux-musl.tar.xz&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;./build/shadowsocks-${VERSION}-stable.x86_64-pc-windows-gnu.zip&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read &lt;code&gt;Cargo.toml&lt;/code&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Generate a safe and secured password for a specific encryption method (&lt;code&gt;aes-128-gcm&lt;/code&gt; in the example) with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssservice genkey -m &quot;aes-128-gcm&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a ShadowSocks&#39; configuration file. Example&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsonc&quot;&gt;{
    &quot;server&quot;: &quot;my_server_ip&quot;,
    &quot;server_port&quot;: 8388,
    &quot;password&quot;: &quot;rwQc8qPXVsRpGx3uW+Y3Lj4Y42yF9Bs0xg1pmx8/+bo=&quot;,
    &quot;method&quot;: &quot;aes-256-gcm&quot;,
    // ONLY FOR `sslocal`
    // Delete these lines if you are running `ssserver` or `ssmanager`
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;: 1080
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Detailed explanation of the configuration file could be found in &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki&quot;&gt;shadowsocks&#39; documentation&lt;/a&gt;. (Link to original project, not maintained anymore !)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; For snap installations, configuration file is most probably located in &lt;code&gt;/var/snap/shadowsocks-rust/common/etc/shadowsocks-rust/config.json&lt;/code&gt; (see &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/issues/621&quot;&gt;https://github.com/shadowsocks/shadowsocks-rust/issues/621&lt;/a&gt; / &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-rust/issues/1146&quot;&gt;https://github.com/shadowsocks/shadowsocks-rust/issues/1146&lt;/a&gt;)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In shadowsocks-rust, we also have an extended configuration file format, which is able to define more than one server. You can also disable individual servers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsonc&quot;&gt;{
    &quot;servers&quot;: [
        {
            &quot;server&quot;: &quot;127.0.0.1&quot;,
            &quot;server_port&quot;: 8388,
            &quot;password&quot;: &quot;rwQc8qPXVsRpGx3uW+Y3Lj4Y42yF9Bs0xg1pmx8/+bo=&quot;,
            &quot;method&quot;: &quot;aes-256-gcm&quot;,
            &quot;timeout&quot;: 7200
        },
        {
            &quot;server&quot;: &quot;127.0.0.1&quot;,
            &quot;server_port&quot;: 8389,
            &quot;password&quot;: &quot;/dliNXn5V4jg6vBW4MnC1I8Jljg9x7vSihmk6UZpRBM=&quot;,
            &quot;method&quot;: &quot;chacha20-ietf-poly1305&quot;
        },
        {
            &quot;disabled&quot;: true,
            &quot;server&quot;: &quot;eg.disable.me&quot;,
            &quot;server_port&quot;: 8390,
            &quot;password&quot;: &quot;mGvbWWay8ueP9IHnV5F1uWGN2BRToiVCAWJmWOTLU24=&quot;,
            &quot;method&quot;: &quot;chacha20-ietf-poly1305&quot;
        }
    ],
    // ONLY FOR `sslocal`
    // Delete these lines if you are running `ssserver` or `ssmanager`
    &quot;local_port&quot;: 1080,
    &quot;local_address&quot;: &quot;127.0.0.1&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;sslocal&lt;/code&gt; automatically selects the best server with the lowest latency and the highest availability.&lt;/p&gt; 
&lt;p&gt;Start Shadowsocks client and server with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sslocal -c config.json
ssserver -c config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you Build it with Cargo:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run --bin sslocal -- -c config.json
cargo run --bin ssserver -- -c config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;List all available arguments with &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Start local client with configuration file&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Read local client configuration from file
sslocal -c /path/to/shadowsocks.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Socks5 Local client&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Pass all parameters via command line
sslocal -b &quot;127.0.0.1:1080&quot; -s &quot;[::1]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot; --plugin &quot;v2ray-plugin&quot; --plugin-opts &quot;server;tls;host=github.com&quot;

# Pass server with SIP002 URL
sslocal -b &quot;127.0.0.1:1080&quot; --server-url &quot;ss://YWVzLTI1Ni1nY206cGFzc3dvcmQ@127.0.0.1:8388/?plugin=v2ray-plugin%3Bserver%3Btls%3Bhost%3Dgithub.com&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;HTTP Local client&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sslocal -b &quot;127.0.0.1:3128&quot; --protocol http -s &quot;[::1]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All parameters are the same as Socks5 client, except &lt;code&gt;--protocol http&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tunnel Local client&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Set 127.0.0.1:8080 as the target for forwarding to
sslocal --protocol tunnel -b &quot;127.0.0.1:3128&quot; -f &quot;127.0.0.1:8080&quot; -s &quot;[::1]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--protocol tunnel&lt;/code&gt; enables local client Tunnel mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-f &quot;127.0.0.1:8080&lt;/code&gt; sets the tunnel target address&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Transparent Proxy Local client&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It currently only supports&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux (with &lt;code&gt;iptables&lt;/code&gt; targets &lt;code&gt;REDIRECT&lt;/code&gt; and &lt;code&gt;TPROXY&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;BSDs (with &lt;code&gt;pf&lt;/code&gt;), such as OS X 10.10+, FreeBSD, ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sslocal -b &quot;127.0.0.1:60080&quot; --protocol redir -s &quot;[::1]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot; --tcp-redir &quot;redirect&quot; --udp-redir &quot;tproxy&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Redirects connections with &lt;code&gt;iptables&lt;/code&gt; configurations to the port that &lt;code&gt;sslocal&lt;/code&gt; is listening on.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--protocol redir&lt;/code&gt; enables local client Redir mode&lt;/li&gt; 
 &lt;li&gt;(optional) &lt;code&gt;--tcp-redir&lt;/code&gt; sets TCP mode to &lt;code&gt;REDIRECT&lt;/code&gt; (Linux)&lt;/li&gt; 
 &lt;li&gt;(optional) &lt;code&gt;--udp-redir&lt;/code&gt; sets UDP mode to &lt;code&gt;TPROXY&lt;/code&gt; (Linux)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Tun interface client&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It currently only supports&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux, Android&lt;/li&gt; 
 &lt;li&gt;macOS, iOS&lt;/li&gt; 
 &lt;li&gt;Windows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;p&gt;Create a Tun interface with name &lt;code&gt;tun0&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ip tuntap add mode tun tun0
ifconfig tun0 inet 10.255.0.1 netmask 255.255.255.0 up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start &lt;code&gt;sslocal&lt;/code&gt; with &lt;code&gt;--protocol tun&lt;/code&gt; and binds to &lt;code&gt;tun0&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sslocal --protocol tun -s &quot;[::1]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot; --outbound-bind-interface lo0 --tun-interface-name tun0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sslocal --protocol tun -s &quot;[::1]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot; --outbound-bind-interface lo0 --tun-interface-address 10.255.0.1/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will create a Tun interface with address &lt;code&gt;10.255.0.1&lt;/code&gt; and netmask &lt;code&gt;255.255.255.0&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;Download &lt;code&gt;wintun.dll&lt;/code&gt; from &lt;a href=&quot;https://www.wintun.net/&quot;&gt;Wintun&lt;/a&gt;, and place it in the folder with shadowsocks&#39; runnable binaries, or in the system PATH.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;sslocal --protocol tun -s &quot;[::1]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot; --outbound-bind-interface &quot;Ethernet 0&quot; --tun-interface-name &quot;shadowsocks&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Local client for Windows Service&lt;/h3&gt; 
&lt;p&gt;Compile it by enabling &lt;code&gt;--features &quot;winservice&quot;&lt;/code&gt; (not included in the default build):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo build --release --bin &quot;sswinservice&quot; --features &quot;winservice&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install it as a Windows Service (PowerShell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;New-Service -Name &quot;shadowsocks-local-service&quot; `
            -DisplayName &quot;Shadowsocks Local Service&quot; `
            -BinaryPathName &quot;&amp;lt;Path\to&amp;gt;\sswinservice.exe local -c &amp;lt;Path\to&amp;gt;\local_config.json&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are other ways to install &lt;code&gt;sswinservice&lt;/code&gt; as a Windows Service, for example, the &lt;code&gt;sc&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;As you may have noticed that the &lt;code&gt;-BinaryPathName&lt;/code&gt; contains not only just the &lt;code&gt;sswinservice.exe&lt;/code&gt;, but &lt;code&gt;local -c local_config.json&lt;/code&gt;. These command line parameters will be used as the default parameter when the Windows Service starts. You can also start the service with customized parameters.&lt;/p&gt; 
&lt;p&gt;Learn more from &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/framework/windows-services/introduction-to-windows-service-applications&quot;&gt;Microsoft&#39;s Document&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;sswinservice&lt;/code&gt;&#39;s parameter works exactly the same as &lt;code&gt;ssservice&lt;/code&gt;. It supports &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;manager&lt;/code&gt; subcommands.&lt;/p&gt; 
&lt;h3&gt;Server&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Read server configuration from file
ssserver -c /path/to/shadowsocks.json

# Pass all parameters via command line
ssserver -s &quot;[::]:8388&quot; -m &quot;aes-256-gcm&quot; -k &quot;hello-kitty&quot; --plugin &quot;v2ray-plugin&quot; --plugin-opts &quot;server;tls;host=github.com&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Server Manager&lt;/h3&gt; 
&lt;p&gt;Supported &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Manage-Multiple-Users&quot;&gt;Manage Multiple Users&lt;/a&gt; API:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;add&lt;/code&gt; - Starts a server instance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;remove&lt;/code&gt; - Deletes an existing server instance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;list&lt;/code&gt; - Lists all current running servers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ping&lt;/code&gt; - Lists all servers&#39; statistic data&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;NOTE: &lt;code&gt;stat&lt;/code&gt; command is not supported. Because servers are running in the same process with the manager itself.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Start it just with --manager-address command line parameter
ssmanager --manager-address &quot;127.0.0.1:6100&quot;

# For *nix system, manager can bind to unix socket address
ssmanager --manager-address &quot;/tmp/shadowsocks-manager.sock&quot;

# You can also provide a configuration file
#
# `manager_address` key must be provided in the configuration file
ssmanager -c /path/to/shadowsocks.json

# Create one server by UDP
echo &#39;add: {&quot;server_port&quot;:8388,&quot;password&quot;:&quot;hello-kitty&quot;}&#39; | nc -u &#39;127.0.0.1&#39; &#39;6100&#39;

# Close one server by unix socket
echo &#39;remove: {&quot;server_port&quot;:8388}&#39; | nc -Uu &#39;/tmp/shadowsocks-manager.sock&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For manager UI, check more details in the &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-manager&quot;&gt;shadowsocks-manager&lt;/a&gt; project.&lt;/p&gt; 
&lt;p&gt;Example configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsonc&quot;&gt;{
    // Required option
    // Address that ssmanager is listening on
    &quot;manager_address&quot;: &quot;127.0.0.1&quot;,
    &quot;manager_port&quot;: 6100,

    // Or bind to a Unix Domain Socket
    &quot;manager_address&quot;: &quot;/tmp/shadowsocks-manager.sock&quot;,

    &quot;servers&quot;: [
        // These servers will be started automatically when ssmanager is started
    ],

    // Outbound socket binds to this IP address
    // For choosing different network interface on the same machine
    &quot;local_address&quot;: &quot;xxx.xxx.xxx.xxx&quot;,

    // Other options that may be passed directly to new servers
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsonc&quot;&gt;{
    // LOCAL: Listen address. This is exactly the same as `locals[0]`
    // SERVER: Bind address for remote sockets, mostly used for choosing interface
    //         Don&#39;t set it if you don&#39;t know what&#39;s this for.
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;: 1080,

    // Extended multiple local configuration
    &quot;locals&quot;: [
        {
            // Basic configuration, a SOCKS5 local server
            &quot;local_address&quot;: &quot;127.0.0.1&quot;,
            &quot;local_port&quot;: 1080,
            // OPTIONAL. Setting the `mode` for this specific local server instance.
            // If not set, it will derive from the outer `mode`
            &quot;mode&quot;: &quot;tcp_and_udp&quot;,
            // OPTIONAL. Authentication configuration file
            // Configuration file document could be found in the next section.
            &quot;socks5_auth_config_path&quot;: &quot;/path/to/auth.json&quot;,
            // OPTIONAL. Instance specific ACL
            &quot;acl&quot;: &quot;/path/to/acl/file.acl&quot;,
            // OPTIONAL. macOS launchd activate socket
            &quot;launchd_tcp_socket_name&quot;: &quot;TCPListener&quot;,
            &quot;launchd_udp_socket_name&quot;: &quot;UDPListener&quot;
        },
        {
            // SOCKS5, SOCKS4/4a local server
            &quot;protocol&quot;: &quot;socks&quot;,
            // Listen address
            &quot;local_address&quot;: &quot;127.0.0.1&quot;,
            &quot;local_port&quot;: 1081,
            // OPTIONAL. Enables UDP relay
            &quot;mode&quot;: &quot;tcp_and_udp&quot;,
            // OPTIONAL. Customizing the UDP&#39;s binding address. Depending on `mode`, if
            // - TCP is enabled, then SOCKS5&#39;s UDP Association command will return this address
            // - UDP is enabled, then SOCKS5&#39;s UDP server will listen to this address.
            &quot;local_udp_address&quot;: &quot;127.0.0.1&quot;,
            &quot;local_udp_port&quot;: 2081,
            // OPTIONAL. macOS launchd activate socket
            &quot;launchd_tcp_socket_name&quot;: &quot;TCPListener&quot;,
            &quot;launchd_udp_socket_name&quot;: &quot;UDPListener&quot;
        },
        {
            // Tunnel local server (feature = &quot;local-tunnel&quot;)
            &quot;protocol&quot;: &quot;tunnel&quot;,
            // Listen address
            &quot;local_address&quot;: &quot;127.0.0.1&quot;,
            &quot;local_port&quot;: 5353,
            // Forward address, the target of this tunnel
            // In this example, this will build a `127.0.0.1:5353` -&amp;gt; `8.8.8.8:53` tunnel
            &quot;forward_address&quot;: &quot;8.8.8.8&quot;,
            &quot;forward_port&quot;: 53,
            // OPTIONAL. Customizing whether to start TCP and UDP tunnel
            &quot;mode&quot;: &quot;tcp_only&quot;,
            // OPTIONAL. macOS launchd activate socket
            &quot;launchd_tcp_socket_name&quot;: &quot;TCPListener&quot;,
            &quot;launchd_udp_socket_name&quot;: &quot;UDPListener&quot;
        },
        {
            // HTTP local server (feature = &quot;local-http&quot;)
            &quot;protocol&quot;: &quot;http&quot;,
            // Listen address
            &quot;local_address&quot;: &quot;127.0.0.1&quot;,
            &quot;local_port&quot;: 3128,
            // OPTIONAL. macOS launchd activate socket
            &quot;launchd_tcp_socket_name&quot;: &quot;TCPListener&quot;
        },
        {
            // DNS local server (feature = &quot;local-dns&quot;)
            // This DNS works like China-DNS, it will send requests to `local_dns` and `remote_dns` and choose by ACL rules
            &quot;protocol&quot;: &quot;dns&quot;,
            // Listen address
            &quot;local_address&quot;: &quot;127.0.0.1&quot;,
            &quot;local_port&quot;: 53,
            // OPTIONAL. DNS local server uses `tcp_and_udp` mode by default
            &quot;mode&quot;: &quot;udp_only&quot;,
            // Local DNS address, DNS queries will be sent directly to this address
            &quot;local_dns_address&quot;: &quot;114.114.114.114&quot;,
            // OPTIONAL. Local DNS&#39;s port, 53 by default
            &quot;local_dns_port&quot;: 53,
            // Remote DNS address, DNS queries will be sent through ssserver to this address
            &quot;remote_dns_address&quot;: &quot;8.8.8.8&quot;,
            // OPTIONAL. Remote DNS&#39;s port, 53 by default
            &quot;remote_dns_port&quot;: 53,
            // OPTIONAL. dns client cache size for fetching dns queries.
            &quot;client_cache_size&quot;: 5,
            // OPTIONAL. macOS launchd activate socket
            &quot;launchd_tcp_socket_name&quot;: &quot;TCPListener&quot;,
            &quot;launchd_udp_socket_name&quot;: &quot;UDPListener&quot;
        },
        {
            // Tun local server (feature = &quot;local-tun&quot;)
            &quot;protocol&quot;: &quot;tun&quot;,
            // Tun interface name
            &quot;tun_interface_name&quot;: &quot;tun0&quot;,
            // Tun interface address
            //
            // It has to be a host address in CIDR form
            &quot;tun_interface_address&quot;: &quot;10.255.0.1/24&quot;
        },
        {
            // Transparent Proxy (redir) local server (feature = &quot;local-redir&quot;)
            &quot;protocol&quot;: &quot;redir&quot;,
            // OPTIONAL: TCP type, may be different between platforms
            // Linux/Android: redirect (default), tproxy
            // FreeBSD/OpenBSD: pf (default), ipfw
            // NetBSD/macOS/Solaris: pf (default), ipfw
            &quot;tcp_redir&quot;: &quot;tproxy&quot;,
            // OPTIONAL: UDP type, may be different between platforms
            // Linux/Android: tproxy (default)
            // FreeBSD/OpenBSD: pf (default)
            &quot;udp_redir&quot;: &quot;tproxy&quot;
        },
        {
            // FakeDNS local server (feature = &quot;local-fake-dns&quot;)
            // FakeDNS is a DNS server that allocates an IPv4 / IPv6 address in a specific pool for each queries.
            // Subsequence requests from the other local interfaces that the target addresses includes those allocated IP addresses,
            // will be substituted back to their original domain name addresses.
            // This feature is useful mostly for transparent proxy, which will allow the proxied domain names to be resolved remotely.
            &quot;protocol&quot;: &quot;fake-dns&quot;,
            // Listen address
            &quot;local_address&quot;: &quot;127.0.0.1&quot;,
            &quot;local_port&quot;: 10053,
            // IPv4 address pool (for A records)
            &quot;fake_dns_ipv4_network&quot;: &quot;10.255.0.0/16&quot;,
            // IPv6 address pool (for AAAA records)
            &quot;fake_dns_ipv6_network&quot;: &quot;fdf2:e786:ab40:9d2f::/64&quot;,
            // Persistent storage for all allocated DNS records
            &quot;fake_dns_database_path&quot;: &quot;/var/shadowsocks/fakedns.db&quot;,
            // OPTIONAL: Record expire duration in seconds, 10s by default
            &quot;fake_dns_record_expire_duration&quot;: 10
        }
    ],

    // Server configuration
    // listen on :: for dual stack support, no need add [] around.
    &quot;server&quot;: &quot;::&quot;,
    // Change to use your custom port number
    &quot;server_port&quot;: 8388,
    &quot;method&quot;: &quot;aes-256-gcm&quot;,
    &quot;password&quot;: &quot;your-password&quot;,
    &quot;plugin&quot;: &quot;v2ray-plugin&quot;,
    &quot;plugin_opts&quot;: &quot;mode=quic;host=github.com&quot;,
    &quot;plugin_args&quot;: [
        // Each line is an argument passed to &quot;plugin&quot;
        &quot;--verbose&quot;
    ],
    &quot;plugin_mode&quot;: &quot;tcp_and_udp&quot;, // SIP003u, default is &quot;tcp_only&quot;
    // Server: TCP socket timeout in seconds.
    // Client: TCP connection timeout in seconds.
    // Omit this field if you don&#39;t have specific needs.
    &quot;timeout&quot;: 7200,

    // Extended multiple server configuration
    // LOCAL: Choosing the best server to connect dynamically
    // SERVER: Creating multiple servers in one process
    &quot;servers&quot;: [
        {
            // Fields are the same as the single server&#39;s configuration

            // Individual servers can be disabled
            // &quot;disabled&quot;: true,
            &quot;address&quot;: &quot;0.0.0.0&quot;,
            &quot;port&quot;: 8389,
            &quot;method&quot;: &quot;aes-256-gcm&quot;,
            &quot;password&quot;: &quot;your-password&quot;,
            &quot;plugin&quot;: &quot;...&quot;,
            &quot;plugin_opts&quot;: &quot;...&quot;,
            &quot;plugin_args&quot;: [],
            &quot;plugin_mode&quot;: &quot;...&quot;,
            &quot;timeout&quot;: 7200,

            // Customized weight for local server&#39;s balancer
            //
            // Weight must be in [0, 1], default is 1.0.
            // The higher weight, the server may rank higher.
            &quot;tcp_weight&quot;: 1.0,
            &quot;udp_weight&quot;: 1.0,

            // OPTIONAL. Instance specific ACL
            &quot;acl&quot;: &quot;/path/to/acl/file.acl&quot;,
        },
        {
            // Same key as basic format &quot;server&quot; and &quot;server_port&quot;
            &quot;server&quot;: &quot;0.0.0.0&quot;,
            &quot;server_port&quot;: 8388,
            &quot;method&quot;: &quot;chacha20-ietf-poly1305&quot;,
            // Read the actual password from environment variable PASSWORD_FROM_ENV
            &quot;password&quot;: &quot;${PASSWORD_FROM_ENV}&quot;
        },
        {
            // AEAD-2022
            &quot;server&quot;: &quot;::&quot;,
            &quot;server_port&quot;: 8390,
            &quot;method&quot;: &quot;2022-blake3-aes-256-gcm&quot;,
            &quot;password&quot;: &quot;3SYJ/f8nmVuzKvKglykRQDSgg10e/ADilkdRWrrY9HU=&quot;,
            // For Server (OPTIONAL)
            // Support multiple users with Extensible Identity Header
            // https://github.com/Shadowsocks-NET/shadowsocks-specs/blob/main/2022-2-shadowsocks-2022-extensible-identity-headers.md
            &quot;users&quot;: [
                {
                    &quot;name&quot;: &quot;username&quot;,
                    // User&#39;s password must have the same length as server&#39;s password
                    &quot;password&quot;: &quot;4w0GKJ9U3Ox7CIXGU4A3LDQAqP6qrp/tUi/ilpOR9p4=&quot;
                }
            ],
            // For Client (OPTIONAL)
            // If EIH enabled, then &quot;password&quot; should have the following format: iPSK:iPSK:iPSK:uPSK
            // - iPSK is one of the middle relay servers&#39; PSK, for the last `ssserver`, it must be server&#39;s PSK (&quot;password&quot;)
            // - uPSK is the user&#39;s PSK (&quot;password&quot;)
            // Example:
            // &quot;password&quot;: &quot;3SYJ/f8nmVuzKvKglykRQDSgg10e/ADilkdRWrrY9HU=:4w0GKJ9U3Ox7CIXGU4A3LDQAqP6qrp/tUi/ilpOR9p4=&quot;
        }
    ],

    // Global configurations for UDP associations
    &quot;udp_timeout&quot;: 300, // Timeout for UDP associations (in seconds), 5 minutes by default
    &quot;udp_max_associations&quot;: 512, // Maximum UDP associations to be kept in one server, unlimited by default

    // Options for Manager
    &quot;manager_address&quot;: &quot;127.0.0.1&quot;, // Could be a path to UNIX socket, /tmp/shadowsocks-manager.sock
    &quot;manager_port&quot;: 5300, // Not needed for UNIX socket

    // DNS server&#39;s address for resolving domain names
    // For *NIX and Windows, it uses system&#39;s configuration by default
    //
    // Value could be IP address of DNS server, for example, &quot;8.8.8.8&quot;.
    // DNS client will automatically request port 53 with both TCP and UDP protocol.
    //
    // - system, uses system provided API (`getaddrinfo` on *NIX)
    //
    // It also allows some pre-defined well-known public DNS servers:
    // - google (TCP, UDP)
    // - cloudflare (TCP, UDP)
    // - cloudflare_tls (TLS), enable by feature &quot;dns-over-tls&quot;
    // - cloudflare_https (HTTPS), enable by feature &quot;dns-over-https&quot;
    // - quad9 (TCP, UDP)
    // - quad9_tls (TLS), enable by feature &quot;dns-over-tls&quot;
    //
    // The field is only effective if feature &quot;hickory-dns&quot; is enabled.
    &quot;dns&quot;: &quot;google&quot;,
    // Configure `cache_size` for &quot;hickory-dns&quot; ResolverOpts. Set to &quot;0&quot; to disable DNS cache.
    &quot;dns_cache_size&quot;: 0,

    // Mode, could be one of the
    // - tcp_only
    // - tcp_and_udp
    // - udp_only
    &quot;mode&quot;: &quot;tcp_only&quot;,

    // TCP_NODELAY
    &quot;no_delay&quot;: false,

    // Enables `SO_KEEPALIVE` and set `TCP_KEEPIDLE`, `TCP_KEEPINTVL` to the specified seconds
    &quot;keep_alive&quot;: 15,

    // Soft and Hard limit of file descriptors on *NIX systems
    &quot;nofile&quot;: 10240,

    // Try to resolve domain name to IPv6 (AAAA) addresses first
    &quot;ipv6_first&quot;: false,
    // Set IPV6_V6ONLY for all IPv6 listener sockets
    // Only valid for locals and servers listening on `::`
    &quot;ipv6_only&quot;: false,

    // Outbound socket options
    // Linux Only (SO_MARK)
    &quot;outbound_fwmark&quot;: 255,
    // FreeBSD only (SO_USER_COOKIE)
    &quot;outbound_user_cookie&quot;: 255,
    // `SO_BINDTODEVICE` (Linux), `IP_BOUND_IF` (BSD), `IP_UNICAST_IF` (Windows) socket option for outbound sockets
    &quot;outbound_bind_interface&quot;: &quot;eth1&quot;,
    // Outbound socket bind() to this IP (choose a specific interface)
    &quot;outbound_bind_addr&quot;: &quot;11.22.33.44&quot;,
    // Outbound UDP socket allows IP fragmentation (default false)
    &quot;outbound_udp_allow_fragmentation&quot;: false

    // Balancer customization
    &quot;balancer&quot;: {
        // MAX Round-Trip-Time (RTT) of servers
        // The timeout seconds of each individual checks
        &quot;max_server_rtt&quot;: 5,
        // Interval seconds between each check
        &quot;check_interval&quot;: 10,
        // Interval seconds between each check for the best server
        // Optional. Specify to enable shorter checking interval for the best server only.
        &quot;check_best_interval&quot;: 5
    },

    // SIP008 Online Configuration Delivery
    // https://shadowsocks.org/doc/sip008.html
    &quot;online_config&quot;: {
        &quot;config_url&quot;: &quot;https://path-to-online-sip008-configuration&quot;,
        // Optional. Seconds between each update to config_url. Default to 3600s
        &quot;update_interval&quot;: 3600
    },

    // Service configurations
    // Logger configuration
    &quot;log&quot;: {
        // Equivalent to `-v` command line option
        &quot;level&quot;: 1,
        &quot;format&quot;: {
            // Euiqvalent to `--log-without-time`
            &quot;without_time&quot;: false,
        },
        // Equivalent to `--log-config`
        // More detail could be found in https://crates.io/crates/log4rs
        &quot;config_path&quot;: &quot;/path/to/log4rs/config.yaml&quot;
    },
    // Runtime configuration
    &quot;runtime&quot;: {
        // single_thread or multi_thread
        &quot;mode&quot;: &quot;multi_thread&quot;,
        // Worker threads that are used in multi-thread runtime
        &quot;worker_count&quot;: 10
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SOCKS5 Authentication Configuration&lt;/h3&gt; 
&lt;p&gt;The configuration file is set by &lt;code&gt;socks5_auth_config_path&lt;/code&gt; in &lt;code&gt;locals&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsonc&quot;&gt;{
    // Password/Username Authentication (RFC1929)
    &quot;password&quot;: {
        &quot;users&quot;: [
            {
                &quot;user_name&quot;: &quot;USERNAME in UTF-8&quot;,
                &quot;password&quot;: &quot;PASSWORD in UTF-8&quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Environment Variables&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;SS_SERVER_PASSWORD&lt;/code&gt;: A default password for servers that created from command line argument (&lt;code&gt;--server-addr&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SS_SYSTEM_DNS_RESOLVER_FORCE_BUILTIN&lt;/code&gt;: &lt;code&gt;&quot;system&quot;&lt;/code&gt; DNS resolver force use system&#39;s builtin (&lt;code&gt;getaddrinfo&lt;/code&gt; in *NIX)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Ciphers&lt;/h2&gt; 
&lt;h3&gt;AEAD 2022 Ciphers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;2022-blake3-aes-128-gcm&lt;/code&gt;, &lt;code&gt;2022-blake3-aes-256-gcm&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;2022-blake3-chacha20-poly1305&lt;/code&gt;, &lt;code&gt;2022-blake3-chacha8-poly1305&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These Ciphers require &lt;code&gt;&quot;password&quot;&lt;/code&gt; to be a Base64 string of key that have &lt;strong&gt;exactly the same length&lt;/strong&gt; of Cipher&#39;s Key Size. It is recommended to use &lt;code&gt;ssservice genkey -m &quot;METHOD_NAME&quot;&lt;/code&gt; to generate a secured and safe key.&lt;/p&gt; 
&lt;h3&gt;AEAD Ciphers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;chacha20-ietf-poly1305&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;aes-128-gcm&lt;/code&gt;, &lt;code&gt;aes-256-gcm&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Stream Ciphers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;plain&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt; (No encryption, only used for debugging or with plugins that ensure transport security)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;Deprecated&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;table&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;aes-128-cfb&lt;/code&gt;, &lt;code&gt;aes-128-cfb1&lt;/code&gt;, &lt;code&gt;aes-128-cfb8&lt;/code&gt;, &lt;code&gt;aes-128-cfb128&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;aes-192-cfb&lt;/code&gt;, &lt;code&gt;aes-192-cfb1&lt;/code&gt;, &lt;code&gt;aes-192-cfb8&lt;/code&gt;, &lt;code&gt;aes-192-cfb128&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;aes-256-cfb&lt;/code&gt;, &lt;code&gt;aes-256-cfb1&lt;/code&gt;, &lt;code&gt;aes-256-cfb8&lt;/code&gt;, &lt;code&gt;aes-256-cfb128&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;aes-128-ctr&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;aes-192-ctr&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;aes-256-ctr&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;camellia-128-cfb&lt;/code&gt;, &lt;code&gt;camellia-128-cfb1&lt;/code&gt;, &lt;code&gt;camellia-128-cfb8&lt;/code&gt;, &lt;code&gt;camellia-128-cfb128&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;camellia-192-cfb&lt;/code&gt;, &lt;code&gt;camellia-192-cfb1&lt;/code&gt;, &lt;code&gt;camellia-192-cfb8&lt;/code&gt;, &lt;code&gt;camellia-192-cfb128&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;camellia-256-cfb&lt;/code&gt;, &lt;code&gt;camellia-256-cfb1&lt;/code&gt;, &lt;code&gt;camellia-256-cfb8&lt;/code&gt;, &lt;code&gt;camellia-256-cfb128&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;rc4-md5&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;chacha20-ietf&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;ACL&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssserver&lt;/code&gt;, and &lt;code&gt;ssmanager&lt;/code&gt; support ACL file with syntax like &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-libev&quot;&gt;shadowsocks-libev&lt;/a&gt;. Some examples could be found in &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-libev/tree/master/acl&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Available sections&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;For local servers (&lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssredir&lt;/code&gt;, ...) 
  &lt;ul&gt; 
   &lt;li&gt;Modes: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;[bypass_all]&lt;/code&gt; - ACL runs in &lt;code&gt;BlackList&lt;/code&gt; mode. Bypasses all addresses that didn&#39;t match any rules.&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;[proxy_all]&lt;/code&gt; - ACL runs in &lt;code&gt;WhiteList&lt;/code&gt; mode. Proxies all addresses that didn&#39;t match any rules.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Rules: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;[bypass_list]&lt;/code&gt; - Rules for connecting directly&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;[proxy_list]&lt;/code&gt; - Rules for connecting through proxies&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;For remote servers (&lt;code&gt;ssserver&lt;/code&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Modes: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;[reject_all]&lt;/code&gt; - ACL runs in &lt;code&gt;BlackList&lt;/code&gt; mode. Rejects all clients that didn&#39;t match any rules.&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;[accept_all]&lt;/code&gt; - ACL runs in &lt;code&gt;WhiteList&lt;/code&gt; mode. Accepts all clients that didn&#39;t match any rules.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Rules: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;[white_list]&lt;/code&gt; - Rules for accepted clients&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;[black_list]&lt;/code&gt; - Rules for rejected clients&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;[outbound_block_list]&lt;/code&gt; - Rules for blocking outbound addresses.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;# SERVERS
# For ssserver, accepts requests from all clients by default
[accept_all]

# Blocks these clients
[black_list]
1.2.3.4
127.0.0.1/8

# Disallow these outbound addresses
[outbound_block_list]
127.0.0.1/8
::1
# Using regular expression
^[a-z]{5}\.baidu\.com
# Match exactly
|baidu.com
# Match with subdomains
||google.com
# An internationalized domain name should be converted to punycode
# |☃-⌘.com - WRONG
|xn----dqo34k.com
# ||джpумлатест.bрфa - WRONG
||xn--p-8sbkgc5ag7bhce.xn--ba-lmcq

# CLIENTS
# For sslocal, ..., bypasses all targets by default
[bypass_all]

# Proxy these addresses
[proxy_list]
||google.com
8.8.8.8
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Useful Tools&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;ssurl&lt;/code&gt; is for encoding and decoding ShadowSocks URLs (SIP002). Example:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;ss://YWVzLTI1Ni1jZmI6cGFzc3dvcmQ@127.0.0.1:8388/?plugin=obfs-local%3Bobfs%3Dhttp%3Bobfs-host%3Dwww.baidu.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;p&gt;It supports the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; SOCKS5 CONNECT command&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; SOCKS5 UDP ASSOCIATE command (partial)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; SOCKS4/4a CONNECT command&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Various crypto algorithms&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Load balancing (multiple servers) and server delay checking&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/30&quot;&gt;SIP004&lt;/a&gt; AEAD ciphers&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/28&quot;&gt;SIP003&lt;/a&gt; Plugins&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/180&quot;&gt;SIP003u&lt;/a&gt; Plugin with UDP support&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/27&quot;&gt;SIP002&lt;/a&gt; Extension ss URLs&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/196&quot;&gt;SIP022&lt;/a&gt; AEAD 2022 ciphers&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; HTTP Proxy Supports (&lt;a href=&quot;http://tools.ietf.org/html/rfc7230&quot;&gt;RFC 7230&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/draft-luotonen-web-proxy-tunneling-01&quot;&gt;CONNECT&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Defend against replay attacks, &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/44&quot;&gt;shadowsocks/shadowsocks-org#44&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Manager APIs, supporting &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Manage-Multiple-Users&quot;&gt;Manage Multiple Users&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; ACL (Access Control List)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Support HTTP/HTTPS Proxy protocol&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;TODO&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Documentation&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Extend configuration format&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Improved logging format (waiting for the new official log crate)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Support more ciphers without depending on &lt;code&gt;libcrypto&lt;/code&gt; (waiting for an acceptable Rust crypto lib implementation)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Windows support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Build with stable &lt;code&gt;rustc&lt;/code&gt; &lt;del&gt;(blocking by &lt;code&gt;crypto2&lt;/code&gt;)&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Support HTTP Proxy protocol&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; AEAD ciphers. (proposed in &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-org/issues/30&quot;&gt;SIP004&lt;/a&gt;, still under discussion)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Choose server based on delay #152&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;The MIT License (MIT)&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2014 Y. T. CHUNG&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/shadowsocks/shadowsocks-rust&quot;&gt;&lt;img src=&quot;https://starchart.cc/shadowsocks/shadowsocks-rust.svg?sanitize=true&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solana-labs/solana</title>
      <link>https://github.com/solana-labs/solana</link>
      <description>&lt;p&gt;Web-Scale Blockchain for fast, secure, scalable, decentralized apps and marketplaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PLEASE READ: This repo is now a public archive&lt;/h1&gt; 
&lt;p&gt;This repo still exists in archived form, feel free to fork any reference implementations it still contains.&lt;/p&gt; 
&lt;p&gt;See Agave, the Solana validator implementation from Anza: &lt;a href=&quot;https://github.com/anza-xyz/agave&quot;&gt;https://github.com/anza-xyz/agave&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://solana.com&quot;&gt; &lt;img alt=&quot;Solana&quot; src=&quot;https://i.imgur.com/IKyzQ6T.png&quot; width=&quot;250&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://crates.io/crates/solana-core&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/solana-core.svg?sanitize=true&quot; alt=&quot;Solana crate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/solana-core&quot;&gt;&lt;img src=&quot;https://docs.rs/solana-core/badge.svg?sanitize=true&quot; alt=&quot;Solana documentation&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://buildkite.com/solana-labs/solana/builds?branch=master&quot;&gt;&lt;img src=&quot;https://badge.buildkite.com/8cc350de251d61483db98bdfc895b9ea0ac8ffa4a32ee850ed.svg?branch=master&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/solana-labs/solana&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/solana-labs/solana/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;h2&gt;&lt;strong&gt;1. Install rustc, cargo and rustfmt.&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ curl https://sh.rustup.rs -sSf | sh
$ source $HOME/.cargo/env
$ rustup component add rustfmt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When building the master branch, please make sure you are using the latest stable rust version by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ rustup update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When building a specific release branch, you should check the rust version in &lt;code&gt;ci/rust-version.sh&lt;/code&gt; and if necessary, install that version by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ rustup install VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if this is not the latest rust version on your machine, cargo commands may require an &lt;a href=&quot;https://rust-lang.github.io/rustup/overrides.html&quot;&gt;override&lt;/a&gt; in order to use the correct version.&lt;/p&gt; 
&lt;p&gt;On Linux systems you may need to install libssl-dev, pkg-config, zlib1g-dev, protobuf etc.&lt;/p&gt; 
&lt;p&gt;On Ubuntu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo apt-get update
$ sudo apt-get install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang cmake make libprotobuf-dev protobuf-compiler
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo dnf install openssl-devel systemd-devel pkg-config zlib-devel llvm clang cmake make protobuf-devel protobuf-compiler perl-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;strong&gt;2. Download the source code.&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone https://github.com/solana-labs/solana.git
$ cd solana
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;strong&gt;3. Build.&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cargo build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Testing&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Run the test suite:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Starting a local testnet&lt;/h3&gt; 
&lt;p&gt;Start your own testnet locally, instructions are in the &lt;a href=&quot;https://docs.solanalabs.com/clusters/benchmark&quot;&gt;online docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Accessing the remote development cluster&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;devnet&lt;/code&gt; - stable public cluster for development accessible via devnet.solana.com. Runs 24/7. Learn more about the &lt;a href=&quot;https://docs.solanalabs.com/clusters&quot;&gt;public clusters&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Benchmarking&lt;/h1&gt; 
&lt;p&gt;First, install the nightly build of rustc. &lt;code&gt;cargo bench&lt;/code&gt; requires the use of the unstable features only available in the nightly build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ rustup install nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the benchmarks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo +nightly bench
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Release Process&lt;/h1&gt; 
&lt;p&gt;The release process for this project is described &lt;a href=&quot;https://raw.githubusercontent.com/solana-labs/solana/master/RELEASE.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Code coverage&lt;/h1&gt; 
&lt;p&gt;To generate code coverage statistics:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ scripts/coverage.sh
$ open target/cov/lcov-local/index.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Why coverage? While most see coverage as a code quality metric, we see it primarily as a developer productivity metric. When a developer makes a change to the codebase, presumably it&#39;s a &lt;em&gt;solution&lt;/em&gt; to some problem. Our unit-test suite is how we encode the set of &lt;em&gt;problems&lt;/em&gt; the codebase solves. Running the test suite should indicate that your change didn&#39;t &lt;em&gt;infringe&lt;/em&gt; on anyone else&#39;s solutions. Adding a test &lt;em&gt;protects&lt;/em&gt; your solution from future changes. Say you don&#39;t understand why a line of code exists, try deleting it and running the unit-tests. The nearest test failure should tell you what problem was solved by that code. If no test fails, go ahead and submit a Pull Request that asks, &quot;what problem is solved by this code?&quot; On the other hand, if a test does fail and you can think of a better way to solve the same problem, a Pull Request with your solution would most certainly be welcome! Likewise, if rewriting a test can better communicate what code it&#39;s protecting, please send us that patch!&lt;/p&gt; 
&lt;h1&gt;Disclaimer&lt;/h1&gt; 
&lt;p&gt;All claims, content, designs, algorithms, estimates, roadmaps, specifications, and performance measurements described in this project are done with the Solana Labs, Inc. (“SL”) good faith efforts. It is up to the reader to check and validate their accuracy and truthfulness. Furthermore, nothing in this project constitutes a solicitation for investment.&lt;/p&gt; 
&lt;p&gt;Any content produced by SL or developer resources that SL provides are for educational and inspirational purposes only. SL does not encourage, induce or sanction the deployment, integration or use of any such applications (including the code comprising the Solana blockchain protocol) in violation of applicable laws or regulations and hereby prohibits any such deployment, integration or use. This includes the use of any such applications by the reader (a) in violation of export control or sanctions laws of the United States or any other applicable jurisdiction, (b) if the reader is located in or ordinarily resident in a country or territory subject to comprehensive sanctions administered by the U.S. Office of Foreign Assets Control (OFAC), or (c) if the reader is or is working on behalf of a Specially Designated National (SDN) or a person subject to similar blocking or denied party prohibitions.&lt;/p&gt; 
&lt;p&gt;The reader should be aware that U.S. export control and sanctions laws prohibit U.S. persons (and other persons that are subject to such laws) from transacting with persons in certain countries and territories or that are on the SDN list. Accordingly, there is a risk to individuals that other persons using any of the code contained in this repo, or a derivation thereof, may be sanctioned persons and that transactions with such persons would be a violation of U.S. export controls and sanctions law.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/zed-industries/zed/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href=&quot;https://github.com/atom/atom&quot;&gt;Atom&lt;/a&gt; and &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter&quot;&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;a href=&quot;https://repology.org/project/zed-editor/versions&quot;&gt; &lt;img src=&quot;https://repology.org/badge/vertical-allrepos/zed-editor.svg?minversion=0.143.5&quot; alt=&quot;Packaging status&quot; align=&quot;right&quot;&gt; &lt;/a&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href=&quot;https://zed.dev/download&quot;&gt;download Zed directly&lt;/a&gt; or &lt;a href=&quot;https://zed.dev/docs/linux#installing-via-a-package-manager&quot;&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href=&quot;https://github.com/zed-industries/zed/issues/5394&quot;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href=&quot;https://github.com/zed-industries/zed/issues/5396&quot;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md&quot;&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md&quot;&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md&quot;&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md&quot;&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we&#39;re hiring! Check out our &lt;a href=&quot;https://zed.dev/jobs&quot;&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://github.com/EmbarkStudios/cargo-about&quot;&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you&#39;ve created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate&#39;s Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license&#39;s requirements. If you&#39;re unsure, ask a lawyer. Once you&#39;ve verified that this system is acceptable add the license&#39;s SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href=&quot;https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration&quot;&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tree-sitter/tree-sitter</title>
      <link>https://github.com/tree-sitter/tree-sitter</link>
      <description>&lt;p&gt;An incremental parsing system for programming tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tree-sitter&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://zenodo.org/badge/latestdoi/14164618&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/14164618.svg?sanitize=true&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/w7nTvsVJhm&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1063097320771698699?logo=discord&amp;amp;label=discord&quot; alt=&quot;discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://matrix.to/#/%23tree-sitter-chat:matrix.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/matrix/tree-sitter-chat%3Amatrix.org?logo=matrix&amp;amp;label=matrix&quot; alt=&quot;matrix&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;General&lt;/strong&gt; enough to parse any programming language&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; enough to parse on every keystroke in a text editor&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; enough to provide useful results even in the presence of syntax errors&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dependency-free&lt;/strong&gt; so that the runtime library (which is written in pure C) can be embedded in any application&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tree-sitter.github.io&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/lib/binding_rust/README.md&quot;&gt;Rust binding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/lib/binding_web/README.md&quot;&gt;WASM binding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/cli/README.md&quot;&gt;Command-line interface&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jdx/mise</title>
      <link>https://github.com/jdx/mise</link>
      <description>&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;&lt;a href=&quot;https://mise.jdx.dev&quot;&gt; &lt;img src=&quot;https://github.com/jdx/mise/assets/216188/27a8ea18-9383-4d86-a445-305b9a6248c1&quot; alt=&quot;mise-logo&quot; width=&quot;400&quot;&gt;&lt;br&gt; mise-en-place &lt;/a&gt;&lt;/h1&gt; 
 &lt;!-- &lt;a href=&quot;https://mise.jdx.dev&quot;&gt;&lt;picture&gt; --&gt; 
 &lt;!--   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; width=&quot;617&quot; srcset=&quot;./docs/logo-dark@2x.png&quot;&gt; --&gt; 
 &lt;!--   &lt;img alt=&quot;mise logo&quot; width=&quot;617&quot; src=&quot;./docs/logo-light@2x.png&quot;&gt; --&gt; 
 &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; 
 &lt;a href=&quot;https://crates.io/crates/mise&quot;&gt;&lt;img alt=&quot;Crates.io&quot; src=&quot;https://img.shields.io/crates/v/mise?style=for-the-badge&quot;&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/jdx/mise/raw/main/LICENSE&quot;&gt;&lt;img alt=&quot;GitHub&quot; src=&quot;https://img.shields.io/github/license/jdx/mise?color=%2344CC11&amp;amp;style=for-the-badge&quot;&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/jdx/mise/actions/workflows/test.yml&quot;&gt;&lt;img alt=&quot;GitHub Workflow Status&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?style=for-the-badge&quot;&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://discord.gg/mABnUDvP57&quot;&gt;&lt;img alt=&quot;Discord&quot; src=&quot;https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge&quot;&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;em&gt;The front-end to your dev env.&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like &lt;a href=&quot;https://asdf-vm.com&quot;&gt;asdf&lt;/a&gt; (or &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;nvm&lt;/a&gt; or &lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;pyenv&lt;/a&gt; but for any language) it manages &lt;a href=&quot;https://mise.jdx.dev/dev-tools/&quot;&gt;dev tools&lt;/a&gt; like node, python, cmake, terraform, and &lt;a href=&quot;https://mise.jdx.dev/registry.html&quot;&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href=&quot;https://github.com/direnv/direnv&quot;&gt;direnv&lt;/a&gt; it manages &lt;a href=&quot;https://mise.jdx.dev/environments/&quot;&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href=&quot;https://www.gnu.org/software/make/manual/make.html&quot;&gt;make&lt;/a&gt; it manages &lt;a href=&quot;https://mise.jdx.dev/tasks/&quot;&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;30 Second Demo&lt;/h2&gt; 
&lt;p&gt;The following shows using mise to install different versions of &lt;a href=&quot;https://nodejs.org&quot;&gt;node&lt;/a&gt;. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jdx/mise/main/docs/demo.gif&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jdx/mise/main/docs/demo.gif&quot; alt=&quot;demo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Install mise (other methods &lt;a href=&quot;https://mise.jdx.dev/getting-started.html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh-session&quot;&gt;$ curl https://mise.run | sh
$ ~/.local/bin/mise --version
2025.3.3 macos-arm64 (a1b2d3e 2025-03-14)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or install a specific a version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh-session&quot;&gt;$ curl https://mise.run | MISE_VERSION=v2024.5.16 sh
$ ~/.local/bin/mise --version
2024.5.16 macos-arm64 (8838098 2024-05-14)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh-session&quot;&gt;# note this assumes mise is located at ~/.local/bin/mise
# which is what https://mise.run does by default
echo &#39;eval &quot;$(~/.local/bin/mise activate bash)&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;eval &quot;$(~/.local/bin/mise activate zsh)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc
echo &#39;~/.local/bin/mise activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish
echo &#39;~/.local/bin/mise activate mise activate pwsh | Out-String | Invoke-Expression&#39; &amp;gt;&amp;gt; ~/.config/powershell/Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install a runtime and set it as the global default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh-session&quot;&gt;$ mise use --global node@20
$ node -v
v20.0.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Full Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://mise.jdx.dev&quot;&gt;mise.jdx.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/jdx/mise/graphs/contributors&quot;&gt;&lt;img src=&quot;https://contrib.rocks/image?repo=jdx/mise&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YaLTeR/niri</title>
      <link>https://github.com/YaLTeR/niri</link>
      <description>&lt;p&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;niri&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://matrix.to/#/%23niri:matrix.org&quot;&gt;&lt;img alt=&quot;Matrix&quot; src=&quot;https://img.shields.io/badge/matrix-%23niri-blue?logo=matrix&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/YaLTeR/niri/raw/main/LICENSE&quot;&gt;&lt;img alt=&quot;GitHub License&quot; src=&quot;https://img.shields.io/github/license/YaLTeR/niri&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/YaLTeR/niri/releases&quot;&gt;&lt;img alt=&quot;GitHub Release&quot; src=&quot;https://img.shields.io/github/v/release/YaLTeR/niri?logo=github&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Getting-Started&quot;&gt;Getting Started&lt;/a&gt; | &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Configuration:-Overview&quot;&gt;Configuration&lt;/a&gt; | &lt;a href=&quot;https://github.com/YaLTeR/niri/discussions/325&quot;&gt;Setup&amp;nbsp;Showcase&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d142e57d-a25d-4ddb-ab46-311417458211&quot; alt=&quot;niri with a few windows open&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Windows are arranged in columns on an infinite strip going to the right. Opening a new window never causes existing windows to resize.&lt;/p&gt; 
&lt;p&gt;Every monitor has its own separate window strip. Windows can never &quot;overflow&quot; onto an adjacent monitor.&lt;/p&gt; 
&lt;p&gt;Workspaces are dynamic and arranged vertically. Every monitor has an independent set of workspaces, and there&#39;s always one empty workspace present all the way down.&lt;/p&gt; 
&lt;p&gt;The workspace arrangement is preserved across disconnecting and connecting monitors where it makes sense. When a monitor disconnects, its workspaces will move to another monitor, but upon reconnection they will move back to the original monitor.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built from the ground up for scrollable tiling&lt;/li&gt; 
 &lt;li&gt;Dynamic workspaces like in GNOME&lt;/li&gt; 
 &lt;li&gt;Built-in screenshot UI&lt;/li&gt; 
 &lt;li&gt;Monitor and window screencasting through xdg-desktop-portal-gnome 
  &lt;ul&gt; 
   &lt;li&gt;You can &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules#block-out-from&quot;&gt;block out&lt;/a&gt; sensitive windows from screencasts&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/946a910e-9bec-4cd1-a923-4a9421707515&quot;&gt;Touchpad&lt;/a&gt; and &lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/8464e65d-4bf2-44fa-8c8e-5883355bd000&quot;&gt;mouse&lt;/a&gt; gestures&lt;/li&gt; 
 &lt;li&gt;Group windows into &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Tabs&quot;&gt;tabs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Configurable layout: gaps, borders, struts, window sizes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Configuration:-Layout#gradients&quot;&gt;Gradient borders&lt;/a&gt; with Oklab and Oklch support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/ce178da2-af9e-4c51-876f-8709c241d95e&quot;&gt;Animations&lt;/a&gt; with support for &lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/27a238d6-0a22-4692-b794-30dc7a626fad&quot;&gt;custom shaders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Live-reloading config&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Video Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&quot;&gt;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Niri is stable for day-to-day use and does most things expected of a Wayland compositor. Many people are daily-driving niri, and are happy to help in our &lt;a href=&quot;https://matrix.to/#/%23niri:matrix.org&quot;&gt;Matrix channel&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Give it a try! Follow the instructions on the &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Getting-Started&quot;&gt;Getting Started&lt;/a&gt; wiki page. Have your &lt;a href=&quot;https://github.com/Alexays/Waybar&quot;&gt;waybar&lt;/a&gt;s and &lt;a href=&quot;https://codeberg.org/dnkl/fuzzel&quot;&gt;fuzzel&lt;/a&gt;s ready: niri is not a complete desktop environment.&lt;/p&gt; 
&lt;p&gt;Here are some points you may have questions about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-monitor&lt;/strong&gt;: yes, a core part of the design from the very start. Mixed DPI works.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fractional scaling&lt;/strong&gt;: yes, plus all niri UI stays pixel-perfect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;: seems to work fine.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Floating windows&lt;/strong&gt;: yes, starting from niri 25.01.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Input devices&lt;/strong&gt;: niri supports tablets, touchpads, and touchscreens. You can map the tablet to a specific monitor, or use &lt;a href=&quot;https://opentabletdriver.net/&quot;&gt;OpenTabletDriver&lt;/a&gt;. We have touchpad gestures, but no touchscreen gestures yet.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Wlr protocols&lt;/strong&gt;: yes, we have most of the important ones like layer-shell, gamma-control, screencopy. You can check on &lt;a href=&quot;https://wayland.app&quot;&gt;wayland.app&lt;/a&gt; at the bottom of each protocol&#39;s page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: while I run niri on beefy machines, I try to stay conscious of performance. I&#39;ve seen someone use it fine on an Eee&amp;nbsp;PC&amp;nbsp;900 from&amp;nbsp;2008, of all things.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xwayland&lt;/strong&gt;: no built-in support, but xwayland-satellite is &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Xwayland#using-xwayland-satellite&quot;&gt;easy to set up&lt;/a&gt; and works very well. 
  &lt;ul&gt; 
   &lt;li&gt;Steam and games, including Proton: work perfectly through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;JetBrains IDEs, Ghidra: work well through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;Discord and other Electron apps: work well through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;Chromium and VSCode: work perfectly natively on Wayland with the right flags.&lt;/li&gt; 
   &lt;li&gt;X11 apps that want to position windows or bars at specific screen coordinates: won&#39;t work well; you can run them in a nested compositor like &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Xwayland#using-the-labwc-wayland-compositor&quot;&gt;labwc&lt;/a&gt; or &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Xwayland#directly-running-xwayland-in-rootful-mode&quot;&gt;rootful Xwayland&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Display scaling (integer or fractional) will make X11 apps look blurry; this needs to be supported in xwayland-satellite. For games, you can run them in &lt;a href=&quot;https://github.com/ValveSoftware/gamescope&quot;&gt;gamescope&lt;/a&gt; at native resolution, even with display scaling.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;Niri is heavily inspired by &lt;a href=&quot;https://github.com/paperwm/PaperWM&quot;&gt;PaperWM&lt;/a&gt; which implements scrollable tiling on top of GNOME Shell.&lt;/p&gt; 
&lt;p&gt;One of the reasons that prompted me to try writing my own compositor is being able to properly separate the monitors. Being a GNOME Shell extension, PaperWM has to work against Shell&#39;s global window coordinate space to prevent windows from overflowing.&lt;/p&gt; 
&lt;h2&gt;Tile Scrollably Elsewhere&lt;/h2&gt; 
&lt;p&gt;Here are some other projects which implement a similar workflow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/paperwm/PaperWM&quot;&gt;PaperWM&lt;/a&gt;: scrollable tiling on top of GNOME Shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterfajdiga/karousel&quot;&gt;karousel&lt;/a&gt;: scrollable tiling on top of KDE.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spwhitton.name/tech/code/papersway/&quot;&gt;papersway&lt;/a&gt;: scrollable tiling on top of sway/i3.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dawsers/hyprscroller&quot;&gt;hyprscroller&lt;/a&gt; and &lt;a href=&quot;https://gitlab.com/magus/hyprslidr&quot;&gt;hyprslidr&lt;/a&gt;: scrollable tiling on top of Hyprland.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mogenson/PaperWM.spoon&quot;&gt;PaperWM.spoon&lt;/a&gt;: scrollable tiling on top of macOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;We have a Matrix chat, feel free to join and ask a question: &lt;a href=&quot;https://matrix.to/#/%23niri:matrix.org&quot;&gt;https://matrix.to/#/#niri:matrix.org&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>uutils/coreutils</title>
      <link>https://github.com/uutils/coreutils</link>
      <description>&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;div class=&quot;oranda-hide&quot;&gt; 
 &lt;div align=&quot;center&quot;&gt; 
  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/logo.svg?sanitize=true&quot; alt=&quot;uutils logo&quot;&gt;&lt;/p&gt; 
  &lt;h1&gt;uutils coreutils&lt;/h1&gt; 
  &lt;p&gt;&lt;a href=&quot;https://crates.io/crates/coreutils&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/coreutils.svg?sanitize=true&quot; alt=&quot;Crates.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/wQVJbvJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/uutils/coreutils/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://deps.rs/repo/github/uutils/coreutils&quot;&gt;&lt;img src=&quot;https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true&quot; alt=&quot;dependency status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;a href=&quot;https://codecov.io/gh/uutils/coreutils&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;CodeCov&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/MSRV-1.82.0-brightgreen&quot; alt=&quot;MSRV&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr&gt; 
&lt;/div&gt; 
&lt;p&gt;uutils coreutils is a cross-platform reimplementation of the GNU coreutils in &lt;a href=&quot;http://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; 
&lt;div class=&quot;oranda-hide&quot;&gt; 
 &lt;p&gt;To install it:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo install coreutils
~/.cargo/bin/coreutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-disable-next-line MD026 --&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;uutils aims to be a drop-in replacement for the GNU utils. Differences with GNU are treated as bugs.&lt;/p&gt; 
&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, Mac, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms.&lt;/p&gt; 
&lt;div class=&quot;oranda-hide&quot;&gt; 
 &lt;h2&gt;Documentation&lt;/h2&gt; 
 &lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://uutils.github.io/coreutils/docs/&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.rs/crate/coreutils/&quot;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href=&quot;https://github.com/uutils/uutils.github.io&quot;&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; 
 &lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;Requirements&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;GNU Make (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Rust Version&lt;/h3&gt; 
 &lt;p&gt;uutils follows Rust&#39;s release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.82.0&lt;/code&gt;.&lt;/p&gt; 
 &lt;h2&gt;Building&lt;/h2&gt; 
 &lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Building the full package, including all documentation, requires both Cargo and Gnu Make on a Unix platform.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone https://github.com/uutils/coreutils
cd coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Cargo&lt;/h3&gt; 
 &lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named &#39;coreutils&#39;, on most Rust-supported platforms.&lt;/p&gt; 
 &lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build --release --features macos
# or ...
cargo build --release --features windows
# or ...
cargo build --release --features unix
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don&#39;t want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build --features &quot;base32 cat echo rm&quot; --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don&#39;t want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named &quot;uu_UTILNAME&quot;. To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;GNU Make&lt;/h3&gt; 
 &lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; 
 &lt;p&gt;To simply build all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In release mode:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make PROFILE=release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make UTILS=&#39;UTILITY_1 UTILITY_2&#39;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Installation&lt;/h2&gt; 
 &lt;h3&gt;Install with Cargo&lt;/h3&gt; 
 &lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command will install uutils into Cargo&#39;s &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; 
 &lt;p&gt;This does not install files necessary for shell completion or manpages. For manpages or shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;/&lt;code&gt;Manually install manpages&lt;/code&gt;.&lt;/p&gt; 
 &lt;h3&gt;Install with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To install all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo -E make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39; install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make UTILS=&#39;UTILITY_1 UTILITY_2&#39; install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make PROG_PREFIX=PREFIX_GOES_HERE install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make MULTICALL=y install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# DESTDIR is also supported
make PREFIX=/my/path install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;To skip installation of completions and manpages:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make COMPLETIONS=n MANPAGES=n install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install shell completions&lt;/h3&gt; 
 &lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; 
 &lt;p&gt;The syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install manpages&lt;/h3&gt; 
 &lt;p&gt;To generate manpages, the syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run manpage &amp;lt;utility&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install the manpage for &lt;code&gt;ls&lt;/code&gt; to &lt;code&gt;/usr/local/share/man/man1/ls.1&lt;/code&gt; run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run manpage ls &amp;gt; /usr/local/share/man/man1/ls.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Un-installation&lt;/h2&gt; 
 &lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; 
 &lt;h3&gt;Uninstall with Cargo&lt;/h3&gt; 
 &lt;p&gt;To uninstall uutils:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo uninstall coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Uninstall with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To uninstall all utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make PROG_PREFIX=PREFIX_GOES_HERE uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make MULTICALL=y uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# DESTDIR is also supported
make PREFIX=/my/path uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;GNU test suite compatibility&lt;/h2&gt; 
 &lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href=&quot;https://uutils.github.io/coreutils/docs/test_coverage.html&quot;&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://github.com/orgs/uutils/projects/1&quot;&gt;https://github.com/orgs/uutils/projects/1&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.png?raw=true&quot; alt=&quot;Evolution over time&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- close oranda-hide div --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to uutils, please see &lt;a href=&quot;https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; 
&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/axum</title>
      <link>https://github.com/tokio-rs/axum</link>
      <description>&lt;p&gt;Ergonomic and modular web framework built with Tokio, Tower, and Hyper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;axum&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a web application framework that focuses on ergonomics and modularity.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/tokio-rs/axum/actions/workflows/CI.yml&quot;&gt;&lt;img src=&quot;https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/axum&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/axum&quot; alt=&quot;Crates.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/axum&quot;&gt;&lt;img src=&quot;https://docs.rs/axum/badge.svg?sanitize=true&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href=&quot;https://docs.rs/axum&quot;&gt;crate documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;High level features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Route requests to handlers with a macro free API.&lt;/li&gt; 
 &lt;li&gt;Declaratively parse requests using extractors.&lt;/li&gt; 
 &lt;li&gt;Simple and predictable error handling model.&lt;/li&gt; 
 &lt;li&gt;Generate responses with minimal boilerplate.&lt;/li&gt; 
 &lt;li&gt;Take full advantage of the &lt;a href=&quot;https://crates.io/crates/tower&quot;&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://crates.io/crates/tower-http&quot;&gt;&lt;code&gt;tower-http&lt;/code&gt;&lt;/a&gt; ecosystem of middleware, services, and utilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In particular the last point is what sets &lt;code&gt;axum&lt;/code&gt; apart from other frameworks. &lt;code&gt;axum&lt;/code&gt; doesn&#39;t have its own middleware system but instead uses &lt;a href=&quot;https://docs.rs/tower/latest/tower/trait.Service.html&quot;&gt;&lt;code&gt;tower::Service&lt;/code&gt;&lt;/a&gt;. This means &lt;code&gt;axum&lt;/code&gt; gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using &lt;a href=&quot;https://crates.io/crates/hyper&quot;&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://crates.io/crates/tonic&quot;&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use axum::{
    routing::{get, post},
    http::StatusCode,
    Json, Router,
};
use serde::{Deserialize, Serialize};

#[tokio::main]
async fn main() {
    // initialize tracing
    tracing_subscriber::fmt::init();

    // build our application with a route
    let app = Router::new()
        // `GET /` goes to `root`
        .route(&quot;/&quot;, get(root))
        // `POST /users` goes to `create_user`
        .route(&quot;/users&quot;, post(create_user));

    // run our app with hyper, listening globally on port 3000
    let listener = tokio::net::TcpListener::bind(&quot;0.0.0.0:3000&quot;).await.unwrap();
    axum::serve(listener, app).await.unwrap();
}

// basic handler that responds with a static string
async fn root() -&amp;gt; &amp;amp;&#39;static str {
    &quot;Hello, World!&quot;
}

async fn create_user(
    // this argument tells axum to parse the request body
    // as JSON into a `CreateUser` type
    Json(payload): Json&amp;lt;CreateUser&amp;gt;,
) -&amp;gt; (StatusCode, Json&amp;lt;User&amp;gt;) {
    // insert your application logic here
    let user = User {
        id: 1337,
        username: payload.username,
    };

    // this will be converted into a JSON response
    // with a status code of `201 Created`
    (StatusCode::CREATED, Json(user))
}

// the input to our `create_user` handler
#[derive(Deserialize)]
struct CreateUser {
    username: String,
}

// the output to our `create_user` handler
#[derive(Serialize)]
struct User {
    id: u64,
    username: String,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find this &lt;a href=&quot;https://github.com/tokio-rs/axum/tree/main/examples/readme&quot;&gt;example&lt;/a&gt; as well as other example projects in the &lt;a href=&quot;https://github.com/tokio-rs/axum/tree/main/examples&quot;&gt;example directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.rs/axum&quot;&gt;crate documentation&lt;/a&gt; for way more examples.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a relatively thin layer on top of &lt;a href=&quot;https://crates.io/crates/hyper&quot;&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; and adds very little overhead. So &lt;code&gt;axum&lt;/code&gt;&#39;s performance is comparable to &lt;a href=&quot;https://crates.io/crates/hyper&quot;&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;. You can find benchmarks &lt;a href=&quot;https://github.com/programatik29/rust-web-benchmarks&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://web-frameworks-benchmark.netlify.app/result?l=rust&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;This crate uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; to ensure everything is implemented in 100% safe Rust.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version&lt;/h2&gt; 
&lt;p&gt;axum&#39;s MSRV is 1.75.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/tokio-rs/axum/tree/main/examples&quot;&gt;examples&lt;/a&gt; folder contains various examples of how to use &lt;code&gt;axum&lt;/code&gt;. The &lt;a href=&quot;https://docs.rs/axum&quot;&gt;docs&lt;/a&gt; also provide lots of code snippets and examples. For full-fledged examples, check out community-maintained &lt;a href=&quot;https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase&quot;&gt;showcases&lt;/a&gt; or &lt;a href=&quot;https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;In the &lt;code&gt;axum&lt;/code&gt;&#39;s repo we also have a &lt;a href=&quot;https://github.com/tokio-rs/axum/tree/main/examples&quot;&gt;number of examples&lt;/a&gt; showing how to put everything together. Community-maintained &lt;a href=&quot;https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase&quot;&gt;showcases&lt;/a&gt; and &lt;a href=&quot;https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials&quot;&gt;tutorials&lt;/a&gt; also demonstrate how to use &lt;code&gt;axum&lt;/code&gt; for real-world applications. You&#39;re also welcome to ask in the &lt;a href=&quot;https://discord.gg/tokio&quot;&gt;Discord channel&lt;/a&gt; or open a &lt;a href=&quot;https://github.com/tokio-rs/axum/discussions/new?category=q-a&quot;&gt;discussion&lt;/a&gt; with your question.&lt;/p&gt; 
&lt;h2&gt;Community projects&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md&quot;&gt;here&lt;/a&gt; for a list of community maintained crates and projects built with &lt;code&gt;axum&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;🎈 Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href=&quot;https://github.com/tokio-rs/axum/raw/main/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to help you get involved in the &lt;code&gt;axum&lt;/code&gt; project.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href=&quot;https://github.com/tokio-rs/axum/raw/main/axum/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in &lt;code&gt;axum&lt;/code&gt; by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yewstack/yew</title>
      <link>https://github.com/yewstack/yew</link>
      <description>&lt;p&gt;Rust / Wasm framework for creating reliable and efficient web applications&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://yew.rs/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://yew.rs/img/logo.png&quot; width=&quot;150&quot;&gt;&lt;/a&gt; 
 &lt;h1&gt;Yew&lt;/h1&gt; 
 &lt;p&gt; &lt;strong&gt;Rust / Wasm client web app framework&lt;/strong&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;a href=&quot;https://crates.io/crates/yew&quot;&gt;&lt;img alt=&quot;Crate Info&quot; src=&quot;https://img.shields.io/crates/v/yew.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/yew/&quot;&gt;&lt;img alt=&quot;API Docs&quot; src=&quot;https://img.shields.io/badge/docs.rs-yew-green&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/VQck8X4&quot;&gt;&lt;img alt=&quot;Discord Chat&quot; src=&quot;https://img.shields.io/discord/701068342760570933&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitlocalize.com/repo/7052/whole_project?utm_source=badge&quot;&gt; &lt;img src=&quot;https://gitlocalize.com/repo/7052/whole_project/badge.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://blog.rust-lang.org/2020/12/31/Rust-1.56.1.html&quot;&gt;&lt;img alt=&quot;Rustc Version 1.56.1+&quot; src=&quot;https://img.shields.io/badge/rustc-1.56%2B-lightgrey.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
 &lt;h4&gt; &lt;a href=&quot;https://yew.rs/&quot;&gt;Documentation (stable)&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://yew.rs/docs/next/&quot;&gt;Documentation (latest)&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://github.com/yewstack/yew/tree/master/examples&quot;&gt;Examples&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://github.com/yewstack/yew/raw/master/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://yew.rs/docs/more/roadmap&quot;&gt;Roadmap&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://yew.rs/zh-Hans&quot;&gt;简体中文文档&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://yew.rs/zh-Hant&quot;&gt;繁體中文文檔&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://yew.rs/ja&quot;&gt;ドキュメント&lt;/a&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Yew&lt;/strong&gt; is a modern Rust framework for creating multi-threaded front-end web apps with WebAssembly.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Features a macro for declaring interactive HTML with Rust expressions. Developers who have experience using JSX in React should feel quite at home when using Yew.&lt;/li&gt; 
 &lt;li&gt;Achieves high performance by minimizing DOM API calls for each page render and by making it easy to offload processing to background web workers.&lt;/li&gt; 
 &lt;li&gt;Supports JavaScript interoperability, allowing developers to leverage NPM packages and integrate with existing JavaScript applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Note: Yew is not 1.0 yet. Be prepared to do major refactoring due to breaking API changes.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Yew is a community effort and we welcome all kinds of contributions, big or small, from developers of all backgrounds. We want the Yew community to be a fun and friendly place, so please review our &lt;a href=&quot;https://github.com/yewstack/yew/raw/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; to learn what behavior will not be tolerated.&lt;/p&gt; 
&lt;h4&gt;🤠 New to Yew?&lt;/h4&gt; 
&lt;p&gt;Start learning about the framework by helping us improve our &lt;a href=&quot;https://github.com/yewstack/yew/tree/master/website/docs&quot;&gt;documentation&lt;/a&gt;. Pull requests which improve test coverage are also very welcome.&lt;/p&gt; 
&lt;h4&gt;😎 Looking for inspiration?&lt;/h4&gt; 
&lt;p&gt;Check out the community curated list of awesome things related to Yew / WebAssembly at &lt;a href=&quot;https://github.com/jetli/awesome-yew&quot;&gt;jetli/awesome-yew&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;🤔 Confused about something?&lt;/h4&gt; 
&lt;p&gt;Feel free to drop into our &lt;a href=&quot;https://discord.gg/VQck8X4&quot;&gt;Discord chatroom&lt;/a&gt; or open a &lt;a href=&quot;https://github.com/yewstack/yew/issues/new/choose&quot;&gt;new &quot;Question&quot; issue&lt;/a&gt; to get help from contributors. Often questions lead to improvements to the ergonomics of the framework, better documentation, and even new features!&lt;/p&gt; 
&lt;h4&gt;🙂 Ready to dive into the code?&lt;/h4&gt; 
&lt;p&gt;After reviewing the &lt;a href=&quot;https://github.com/yewstack/yew/raw/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;, check out the &lt;a href=&quot;https://github.com/yewstack/yew/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&quot;&gt;&quot;Good First Issues&quot;&lt;/a&gt; (they are eager for attention!). Once you find one that interests you, feel free to assign yourself to an issue and don&#39;t hesitate to reach out for guidance, the issues vary in complexity.&lt;/p&gt; 
&lt;h4&gt;😱 Found a bug?&lt;/h4&gt; 
&lt;p&gt;Please &lt;a href=&quot;https://github.com/yewstack/yew/issues/new/choose&quot;&gt;report all bugs!&lt;/a&gt; We are happy to help support developers fix the bugs they find if they are interested and have the time.&lt;/p&gt; 
&lt;h4&gt;🤓 Want to help translate?&lt;/h4&gt; 
&lt;p&gt;Translations can be submitted on the &lt;a href=&quot;https://gitlocalize.com/repo/7052&quot;&gt;Yew GitLocalize Repo&lt;/a&gt;. If you are interested in being the official moderator for a language, please reach out on Discord.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;h3&gt;Code Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&quot;https://github.com/yewstack/yew/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/contributors.svg?width=890&amp;amp;button=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Financial Contributors&lt;/h3&gt; 
&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&quot;https://opencollective.com/yew/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;h4&gt;Individuals&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/yew&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/individuals.svg?width=890&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Organizations&lt;/h4&gt; 
&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/yew/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/yew/organization/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/0/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/1/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/2/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/3/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/4/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/5/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/6/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/7/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/8/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/yew/organization/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/yew/organization/9/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphiteEditor/Graphite</title>
      <link>https://github.com/GraphiteEditor/Graphite</link>
      <description>&lt;p&gt;2D vector &amp; raster editor that melds traditional layers &amp; tools with a modern node-based, non-destructive, procedural workflow.&lt;/p&gt;&lt;hr&gt;&lt;a href=&quot;https://graphite.rs/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/9366c148-4405-484f-909a-9a3526eb9209&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/791508ab-bcd5-4e31-a3b9-1187cfd7a2f6&quot;&gt; 
  &lt;img alt=&quot;Graphite logo&quot; src=&quot;https://github.com/user-attachments/assets/791508ab-bcd5-4e31-a3b9-1187cfd7a2f6&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h1&gt;Your procedural toolbox for 2D content creation&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Graphite is a free, open source vector and raster graphics engine, &lt;a href=&quot;https://editor.graphite.rs&quot;&gt;available now&lt;/a&gt; in alpha. Get creative with a fully nondestructive editing workflow that combines layer-based compositing with node-based generative design.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Having begun life as a vector editor, Graphite continues evolving into a generalized, all-in-one graphics toolbox that&#39;s built more like a game engine than a conventional creative app. The editor&#39;s tools wrap its node graph core, providing user-friendly workflows for vector, raster, and beyond. Photo editing, motion graphics, digital painting, desktop publishing, and VFX compositing are additional competencies from the &lt;a href=&quot;https://graphite.rs/features/#roadmap&quot;&gt;roadmap&lt;/a&gt; making Graphite into a highly versatile content creation tool.&lt;/p&gt; 
&lt;p&gt;Learn more from the &lt;a href=&quot;https://graphite.rs/&quot;&gt;website&lt;/a&gt;, subscribe to the &lt;a href=&quot;https://graphite.rs/#newsletter&quot;&gt;newsletter&lt;/a&gt;, consider &lt;a href=&quot;https://graphite.rs/volunteer/&quot;&gt;volunteering&lt;/a&gt; or &lt;a href=&quot;https://graphite.rs/donate/&quot;&gt;donating&lt;/a&gt;, and remember to give this repository a ⭐!&lt;/p&gt; 
&lt;br&gt; 
&lt;a href=&quot;https://discord.graphite.rs/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/ad185fac-3b48-446d-863c-2bcb0724abee&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/aa23f503-f3bf-444a-9080-8eaa19fa2fa8&quot;&gt; 
  &lt;img alt=&quot;Discord&quot; src=&quot;https://github.com/user-attachments/assets/aa23f503-f3bf-444a-9080-8eaa19fa2fa8&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://www.reddit.com/r/graphite/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/d8c05686-2eb9-4ac1-8149-728c12b4e71a&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/6f32329a-4d6f-42d8-9a2f-42977c0b3c05&quot;&gt; 
  &lt;img alt=&quot;Reddit&quot; src=&quot;https://github.com/user-attachments/assets/6f32329a-4d6f-42d8-9a2f-42977c0b3c05&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://bsky.app/profile/graphiteeditor.bsky.social&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/c736d80c-e9bf-4591-a7e0-a7723057a906&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/3db9b0a1-5ab7-4bff-bfd3-8a4ade7b98bd&quot;&gt; 
  &lt;img alt=&quot;Bluesky&quot; src=&quot;https://github.com/user-attachments/assets/3db9b0a1-5ab7-4bff-bfd3-8a4ade7b98bd&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://twitter.com/graphiteeditor&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/115f04cc-e3c2-4f90-ac35-eb9edd3ca9be&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/4ed4185d-a622-418c-bbf4-a0419e690ca9&quot;&gt; 
  &lt;img alt=&quot;Twitter&quot; src=&quot;https://github.com/user-attachments/assets/4ed4185d-a622-418c-bbf4-a0419e690ca9&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://www.youtube.com/@GraphiteEditor&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/cbc02fad-5cbc-4715-a8e5-860198e989c7&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/d13b484d-97a8-4d9e-bbe4-c60348b3f676&quot;&gt; 
  &lt;img alt=&quot;YouTube&quot; src=&quot;https://github.com/user-attachments/assets/d13b484d-97a8-4d9e-bbe4-c60348b3f676&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;br&gt;
&lt;br&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.graphite.rs/content/index/gui-demo-node-graph-isometric-fountain.png&quot; alt=&quot;&amp;quot;Isometric Fountain&amp;quot; vector artwork&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.graphite.rs/content/index/gui-demo-fractal__3.png&quot; alt=&quot;&amp;quot;Marbled Mandelbrot&amp;quot; fractal raster artwork&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing/building the code&lt;/h2&gt; 
&lt;p&gt;Are you a graphics programmer or Rust developer? Graphite aims to be one of the most approachable projects for putting your engineering skills to use in the world of open source. See &lt;a href=&quot;https://graphite.rs/volunteer/guide/&quot;&gt;instructions here&lt;/a&gt; for setting up the project and getting started.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;By submitting code for inclusion in the project, you are agreeing to license your changes under the Apache 2.0 license, and that you have the authority to do so. Some directories may have other licenses, like dual-licensed MIT/Apache 2.0, and code submissions to those directories mean you agree to the applicable license(s).&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Support our mission ❤️&lt;/h2&gt; 
&lt;p&gt;Graphite is 100% community built and funded. Please become a part of keeping our project alive and thriving with a &lt;a href=&quot;https://graphite.rs/donate/&quot;&gt;donation&lt;/a&gt; if you share a belief in our mission:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Graphite strives to unshackle the creativity of every budding artist and seasoned professional by building the best comprehensive art and design tool that&#39;s accessible to all.&lt;/p&gt; 
 &lt;p&gt;Mission success will come when Graphite is an industry standard. A cohesive product vision and focus on innovation over imitation is the strategy that will make that possible.&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>gitbutlerapp/gitbutler</title>
      <link>https://github.com/gitbutlerapp/gitbutler</link>
      <description>&lt;p&gt;The GitButler version control client, backed by Git, powered by Tauri/Rust/Svelte&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img align=&quot;center&quot; width=&quot;128px&quot; src=&quot;https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/crates/gitbutler-tauri/icons/128x128@2x.png&quot;&gt; 
 &lt;h1 align=&quot;center&quot;&gt;&lt;b&gt;GitButler&lt;/b&gt;&lt;/h1&gt; 
 &lt;p align=&quot;center&quot;&gt; Git branch management tool, built from the ground up for modern workflows &lt;br&gt; &lt;a href=&quot;https://gitbutler.com&quot;&gt;&lt;strong&gt;gitbutler.com »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;b&gt;Download for &lt;/b&gt; macOS (&lt;a href=&quot;https://app.gitbutler.com/downloads/release/darwin/aarch64/dmg&quot;&gt;Apple Silicon&lt;/a&gt; | &lt;a href=&quot;https://app.gitbutler.com/downloads/release/darwin/x86_64/dmg&quot;&gt;Intel&lt;/a&gt;) · Linux (&lt;a href=&quot;https://app.gitbutler.com/downloads/release/linux/x86_64/gz&quot;&gt;AppImage&lt;/a&gt; | &lt;a href=&quot;https://app.gitbutler.com/downloads/release/linux/x86_64/deb&quot;&gt;deb&lt;/a&gt;) · Windows (&lt;a href=&quot;https://app.gitbutler.com/downloads/release/windows/x86_64/msi&quot;&gt;msi&lt;/a&gt;) &lt;br&gt; &lt;br&gt; (Unstable Nightly releases can be found &lt;a href=&quot;https://app.gitbutler.com/downloads&quot;&gt;here&lt;/a&gt;) &lt;/p&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/gitbutlerapp/gitbutler/assets/16262535/0d180bfd-7a3c-4a66-a923-30534c5a8197&quot; alt=&quot;gitbutler_client&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml&quot;&gt;&lt;img src=&quot;https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitbutler.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D&quot; alt=&quot;BADGE&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=gitbutler&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Twitter-black?logo=x&amp;amp;logoColor=white&quot; alt=&quot;TWEET&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/MmFkmaJ42D&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1060193121130000425?label=Discord&amp;amp;color=5865F2&quot; alt=&quot;DISCORD&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/gitbutler/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Instagram-E4405F?logo=instagram&amp;amp;logoColor=white&quot; alt=&quot;INSTA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/@gitbutlerapp&quot;&gt;&lt;img src=&quot;https://img.shields.io/youtube/channel/subscribers/UCEwkZIHGqsTGYvX8wgD0LoQ&quot; alt=&quot;YOUTUBE&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://repobeats.axiom.co/api/embed/fb23382bcf57c609832661874d3019a43555d6ae.svg?sanitize=true&quot; alt=&quot;Alt&quot; title=&quot;Repobeats analytics for GitButler&quot;&gt;&lt;/p&gt; 
&lt;p&gt;GitButler is a git client that lets you work on multiple branches at the same time. It allows you to quickly organize file changes into separate branches while still having them applied to your working directory. You can then push branches individually to your remote, or directly create pull requests.&lt;/p&gt; 
&lt;p&gt;In a nutshell, it&#39;s a more flexible version of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git rebase -i&lt;/code&gt;, allowing you to efficiently multitask across branches.&lt;/p&gt; 
&lt;h2&gt;How Does It Work?&lt;/h2&gt; 
&lt;p&gt;GitButler keeps track of uncommitted changes in a layer on top of Git. Changes to files or parts of files can be grouped into what we call virtual branches. Whenever you are happy with the contents of a virtual branch, you can push it to a remote. GitButler makes sure that the state of other virtual branches is kept separate.&lt;/p&gt; 
&lt;h2&gt;How Do GB&#39;s Virtual Branches Differ From Git Branches?&lt;/h2&gt; 
&lt;p&gt;The branches that we know and love in Git are separate universes, and switching between them is a full context switch. GitButler allows you to work with multiple branches in parallel in the same working directory. This effectively means having the content of multiple branches available at the same time.&lt;/p&gt; 
&lt;p&gt;GitButler is aware of changes before they are committed. This allows it to keep a record of which virtual branch each individual diff belongs to. Effectively, this means that you can separate out individual branches with their content at any time to push them to a remote or to unapply them from your working directory.&lt;/p&gt; 
&lt;p&gt;And finally, while in Git it is preferable that you create your desired branch ahead of time, using GitButler you can move changes between virtual branches at any point during development.&lt;/p&gt; 
&lt;h2&gt;Why GitButler?&lt;/h2&gt; 
&lt;p&gt;We love Git. Our own &lt;a href=&quot;https://github.com/schacon&quot;&gt;@schacon&lt;/a&gt; has even published the &lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;Pro Git&lt;/a&gt; book. At the same time, Git&#39;s user interface hasn&#39;t been fundamentally changed for 15 years. While it was written for Linux kernel devs sending patches to each other over mailing lists, most developers today have different workflows and needs.&lt;/p&gt; 
&lt;p&gt;Instead of trying to fit the semantics of the Git CLI into a graphical interface, we are starting with the developer workflow and mapping it back to Git.&lt;/p&gt; 
&lt;h2&gt;Tech&lt;/h2&gt; 
&lt;p&gt;GitButler is a &lt;a href=&quot;https://tauri.app/&quot;&gt;Tauri&lt;/a&gt;-based application. Its UI is written in &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt; using &lt;a href=&quot;https://www.typescriptlang.org&quot;&gt;TypeScript&lt;/a&gt; and its backend is written in &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Main Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Virtual Branches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Organize work on multiple branches simultaneously, rather than constantly switching branches&lt;/li&gt; 
   &lt;li&gt;Automatically create new branches when needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy Commit Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Undo, Amend and Squash commits by dragging and dropping&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Undo Timeline&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Logs all operations and changes and allows you to easily undo or revert any operation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Integration&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Authenticate to GitHub to open Pull Requests, list branches and statuses and more&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy SSH Key Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GitButler can generate an SSH key to upload to GitHub automatically&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Tooling&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically write commit messages based on your work in progress&lt;/li&gt; 
   &lt;li&gt;Automatically create descriptive branch names&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Commit Signing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Easy commit signing with GPG or SSH&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Uses&lt;/h2&gt; 
&lt;h3&gt;Fixing a Bug While Working on a Feature&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say that while developing a feature, you encounter a bug that you wish to fix. It&#39;s often desirable that you ship the fix as a separate contribution (Pull request).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git you can stash your changes and switch to another branch, where you can commit, and push your fix.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;With GitButler&lt;/em&gt; you simply assign your fix to a separate virtual branch, which you can individually push (or directly create a PR). An additional benefit is that you can retain the fix in your working directory while waiting for CI and/or code review.&lt;/p&gt; 
&lt;h3&gt;Trying Someone Else&#39;s Branch Together With My Work in Progress&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say you want to test a branch from someone else for the purpose of code review.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git trying out someone else&#39;s branch is a full context switch away from your own work. &lt;em&gt;With GitButler&lt;/em&gt; you can apply and unapply (add / remove) any remote branch directly into your working directory.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find our end user documentation at: &lt;a href=&quot;https://docs.gitbutler.com&quot;&gt;https://docs.gitbutler.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Bugs and Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a bug or feature request, feel free to open an &lt;a href=&quot;https://github.com/gitbutlerapp/gitbutler/issues/new&quot;&gt;issue&lt;/a&gt;, or &lt;a href=&quot;https://discord.gg/MmFkmaJ42D&quot;&gt;join our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AI Commit Message Generation&lt;/h2&gt; 
&lt;p&gt;Commit message generation is an opt-in feature. You can enable it while adding your repository for the first time or later in the project settings.&lt;/p&gt; 
&lt;p&gt;Currently, GitButler uses OpenAI&#39;s API for diff summarization, which means that if enabled, code diffs would be sent to OpenAI&#39;s servers.&lt;/p&gt; 
&lt;p&gt;Our goal is to make this feature more modular such that in the future you can modify the prompt as well as plug a different LLM endpoints (including local ones).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;So you want to help out? Please check out the &lt;a href=&quot;https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;p&gt;If you want to skip right to getting the code to actually compile, take a look at the &lt;a href=&quot;https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/DEVELOPMENT.md&quot;&gt;DEVELOPMENT.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Want to show your support? Add a GitButler badge to your project&#39;s README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;[![GitButler](https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D)](https://gitbutler.com/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitbutler.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D&quot; alt=&quot;BADGE&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rerun-io/rerun</title>
      <link>https://github.com/rerun-io/rerun</link>
      <description>&lt;p&gt;Visualize streams of multimodal data. Free, fast, easy to use, and simple to integrate. Built in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.rerun.io/&quot;&gt; &lt;img alt=&quot;banner&quot; src=&quot;https://user-images.githubusercontent.com/1148717/218142418-1d320929-6b7a-486e-8277-fbeef2432529.png&quot;&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;h1 align=&quot;center&quot;&gt; &lt;a href=&quot;https://pypi.org/project/rerun-sdk/&quot;&gt; &lt;img alt=&quot;PyPi&quot; src=&quot;https://img.shields.io/pypi/v/rerun-sdk.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/rerun&quot;&gt; &lt;img alt=&quot;crates.io&quot; src=&quot;https://img.shields.io/crates/v/rerun.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/rerun-io/rerun/raw/main/LICENSE-MIT&quot;&gt; &lt;img alt=&quot;MIT&quot; src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/rerun-io/rerun/raw/main/LICENSE-APACHE&quot;&gt; &lt;img alt=&quot;Apache&quot; src=&quot;https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.gg/Gcm8BbTaAj&quot;&gt; &lt;img alt=&quot;Rerun Discord&quot; src=&quot;https://img.shields.io/discord/1062300748202921994?label=Rerun%20Discord&quot;&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;h1&gt;Time-aware multimodal data stack and visualizations&lt;/h1&gt; 
&lt;p&gt;Rerun is building the multimodal data stack to model, ingest, store, query and view robotics-style data. It&#39;s used in areas like robotics, spatial and embodied AI, generative media, industrial processing, simulation, security, and health.&lt;/p&gt; 
&lt;p&gt;Rerun is easy to use! Use the Rerun SDK (available for C++, Python and Rust) to log data like images, tensors, point clouds, and text. Logs are streamed to the Rerun Viewer for live visualization or to file for later use. You can also query the logged data through &lt;a href=&quot;https://rerun.io/docs/howto/dataframe-api&quot;&gt;our dataframe API&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/#getting-started&quot;&gt;Get started&lt;/a&gt; in minutes – no account needed.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rerun.io/viewer&quot;&gt;Run the Rerun Viewer in your browser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rerun.io/docs/getting-started/what-is-rerun&quot;&gt;Read about what Rerun is and who it is for&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;A short taste&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;import rerun as rr  # pip install rerun-sdk

rr.init(&quot;rerun_example_app&quot;)

rr.connect()  # Connect to a remote viewer
# rr.spawn()  # Spawn a child process with a viewer and connect
# rr.save(&quot;recording.rrd&quot;)  # Stream all logs to disk

# Associate subsequent data with 42 on the “frame” timeline
rr.set_index(&quot;frame&quot;, sequence=42)

# Log colored 3D points to the entity at `path/to/points`
rr.log(&quot;path/to/points&quot;, rr.Points3D(positions, colors=colors))
…
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;picture&gt; 
  &lt;img src=&quot;https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/full.png&quot; alt=&quot;&quot;&gt; 
  &lt;source media=&quot;(max-width: 480px)&quot; srcset=&quot;https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/480w.png&quot;&gt; 
  &lt;source media=&quot;(max-width: 768px)&quot; srcset=&quot;https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/768w.png&quot;&gt; 
  &lt;source media=&quot;(max-width: 1024px)&quot; srcset=&quot;https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/1024w.png&quot;&gt; 
  &lt;source media=&quot;(max-width: 1200px)&quot; srcset=&quot;https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/1200w.png&quot;&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rerun.io/docs/getting-started/quick-start/cpp&quot;&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rerun.io/docs/getting-started/quick-start/python&quot;&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or on &lt;a href=&quot;https://github.com/conda-forge/rerun-sdk-feedstock&quot;&gt;&lt;code&gt;conda&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rerun.io/docs/getting-started/quick-start/rust&quot;&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;cargo add rerun&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installing the Rerun Viewer binary&lt;/h3&gt; 
&lt;p&gt;To stream log data over the network or load our &lt;code&gt;.rrd&lt;/code&gt; data files you also need the &lt;code&gt;rerun&lt;/code&gt; binary. It can be installed with &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or with &lt;code&gt;cargo install rerun-cli --locked --features nasm&lt;/code&gt; (see note below). Note that only the Python SDK comes bundled with the Viewer whereas C++ &amp;amp; Rust always rely on a separate install.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;nasm&lt;/code&gt; Cargo feature requires the &lt;a href=&quot;https://www.nasm.us&quot;&gt;&lt;code&gt;nasm&lt;/code&gt;&lt;/a&gt; CLI to be installed and available in your path. Alternatively, you may skip enabling this feature, but this may result in inferior video decoding performance.&lt;/p&gt; 
&lt;p&gt;You should now be able to run &lt;code&gt;rerun --help&lt;/code&gt; in any terminal.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📚 &lt;a href=&quot;http://rerun.io/docs&quot;&gt;High-level docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⏃ &lt;a href=&quot;https://www.rerun.io/docs/reference/types&quot;&gt;Loggable Types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⚙️ &lt;a href=&quot;http://rerun.io/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 &lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/docs/snippets/INDEX.md&quot;&gt;Code snippets&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌊 &lt;a href=&quot;https://ref.rerun.io/docs/cpp&quot;&gt;C++ API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🐍 &lt;a href=&quot;https://ref.rerun.io/docs/python&quot;&gt;Python API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🦀 &lt;a href=&quot;https://docs.rs/rerun/&quot;&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⁉️ &lt;a href=&quot;https://www.rerun.io/docs/getting-started/troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;We are in active development. There are many features we want to add, and the API is still evolving. &lt;em&gt;Expect breaking changes!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Some shortcomings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rerun-io/rerun/issues/1136&quot;&gt;Multi-million point clouds are slow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rerun-io/rerun/issues/7115&quot;&gt;The viewer slows down when there are too many entities&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The data you want to visualize must fit in RAM 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://www.rerun.io/docs/howto/limit-ram&quot;&gt;https://www.rerun.io/docs/howto/limit-ram&lt;/a&gt; for how to bound memory use.&lt;/li&gt; 
   &lt;li&gt;We plan on having a disk-based data store some time in the future.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Rerun for?&lt;/h2&gt; 
&lt;p&gt;Rerun is built to help you understand and improve complex processes that include rich multimodal data, like 2D, 3D, text, time series, tensors, etc. It is used in many industries, including robotics, simulation, computer vision, or anything that involves a lot of sensors or other signals that evolve over time.&lt;/p&gt; 
&lt;h3&gt;Example use case&lt;/h3&gt; 
&lt;p&gt;Say you&#39;re building a vacuum cleaning robot and it keeps running into walls. Why is it doing that? You need some tool to debug it, but a normal debugger isn&#39;t gonna be helpful. Similarly, just logging text won&#39;t be very helpful either. The robot may log &quot;Going through doorway&quot; but that won&#39;t explain why it thinks the wall is a door.&lt;/p&gt; 
&lt;p&gt;What you need is a visual and temporal debugger, that can log all the different representations of the world the robots holds in its little head, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RGB camera feed&lt;/li&gt; 
 &lt;li&gt;depth images&lt;/li&gt; 
 &lt;li&gt;lidar scan&lt;/li&gt; 
 &lt;li&gt;segmentation image (how the robot interprets what it sees)&lt;/li&gt; 
 &lt;li&gt;its 3D map of the apartment&lt;/li&gt; 
 &lt;li&gt;all the objects the robot has detected (or thinks it has detected), as 3D shapes in the 3D map&lt;/li&gt; 
 &lt;li&gt;its confidence in its prediction&lt;/li&gt; 
 &lt;li&gt;etc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You also want to see how all these streams of data evolve over time so you can go back and pinpoint exactly what went wrong, when and why.&lt;/p&gt; 
&lt;p&gt;Maybe it turns out that a glare from the sun hit one of the sensors in the wrong way, confusing the segmentation network leading to bad object detection. Or maybe it was a bug in the lidar scanning code. Or maybe the robot thought it was somewhere else in the apartment, because its odometry was broken. Or it could be one of a thousand other things. Rerun will help you find out!&lt;/p&gt; 
&lt;p&gt;But seeing the world from the point of the view of the robot is not just for debugging - it will also give you ideas on how to improve the algorithms, new test cases to set up, or datasets to collect. It will also let you explain the brains of the robot to your colleagues, boss, and customers. And so on. Seeing is believing, and an image is worth a thousand words, and multimodal temporal logging is worth a thousand images :)&lt;/p&gt; 
&lt;p&gt;While seeing and understanding your data is core to making progress in robotics, there is one more thing: You can also use the data you collected for visualization to create new datasets for training and evaluating the models and algorithms that run on your robot. Rerun provides query APIs to make it easy to extract clean datasets from your recording for exactly that purpose.&lt;/p&gt; 
&lt;p&gt;Of course, Rerun is useful for much more than just robots. Any time you have any form of sensors, or 2D or 3D state evolving over time, Rerun is a great tool.&lt;/p&gt; 
&lt;h2&gt;Business model&lt;/h2&gt; 
&lt;p&gt;Rerun uses an open-core model. Everything in this repository will stay open source and free (both as in beer and as in freedom).&lt;/p&gt; 
&lt;p&gt;We are also building a commercial data platform. Right now that is only available for a few select design partners. &lt;a href=&quot;https://rerun.io/pricing&quot;&gt;Click here if you&#39;re interested&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Rerun open source project targets the needs of individual developers. The commercial product targets the needs specific to teams that build and run computer vision and robotics products.&lt;/p&gt; 
&lt;h2&gt;How to cite Rerun&lt;/h2&gt; 
&lt;p&gt;When using Rerun in your research, please cite it to acknowledge its contribution to your work. This can be done by including a reference to Rerun in the software or methods section of your paper.&lt;/p&gt; 
&lt;p&gt;Suggested citation format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@software{RerunSDK,
  title = {Rerun: A Visualization SDK for Multimodal Data},
  author = {{Rerun Development Team}},
  url = {https://www.rerun.io},
  version = {insert version number},
  date = {insert date of usage},
  year = {2024},
  publisher = {{Rerun Technologies AB}},
  address = {Online},
  note = {Available from https://www.rerun.io/ and https://github.com/rerun-io/rerun}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please replace &quot;insert version number&quot; with the version of Rerun you used and &quot;insert date of usage&quot; with the date(s) you used the tool in your research. This citation format helps ensure that Rerun&#39;s development team receives appropriate credit for their work and facilitates the tool&#39;s discovery by other researchers.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/ARCHITECTURE.md&quot;&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_OF_CONDUCT.md&quot;&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_STYLE.md&quot;&gt;&lt;code&gt;CODE_STYLE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/CONTRIBUTING.md&quot;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/BUILD.md&quot;&gt;&lt;code&gt;BUILD.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/rerun_py/README.md&quot;&gt;&lt;code&gt;rerun_py/README.md&lt;/code&gt;&lt;/a&gt; - instructions for Python SDK&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rerun-io/rerun/main/rerun_cpp/README.md&quot;&gt;&lt;code&gt;rerun_cpp/README.md&lt;/code&gt;&lt;/a&gt; - instructions for C++ SDK&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installing a pre-release Python SDK&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the correct &lt;code&gt;.whl&lt;/code&gt; from &lt;a href=&quot;https://github.com/rerun-io/rerun/releases&quot;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;pip install rerun_sdk&amp;lt;…&amp;gt;.whl&lt;/code&gt; (replace &lt;code&gt;&amp;lt;…&amp;gt;&lt;/code&gt; with the actual filename)&lt;/li&gt; 
 &lt;li&gt;Test it: &lt;code&gt;rerun --version&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>pola-rs/polars</title>
      <link>https://github.com/pola-rs/polars</link>
      <description>&lt;p&gt;Dataframes powered by a multithreaded, vectorized query engine, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;a href=&quot;https://pola.rs&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pola-rs/polars-static/master/banner/polars_github_banner.svg?sanitize=true&quot; alt=&quot;Polars logo&quot;&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://crates.io/crates/polars&quot;&gt; &lt;img src=&quot;https://img.shields.io/crates/v/polars.svg?sanitize=true&quot; alt=&quot;crates.io Latest Release&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://pypi.org/project/polars/&quot;&gt; &lt;img src=&quot;https://img.shields.io/pypi/v/polars.svg?sanitize=true&quot; alt=&quot;PyPi Latest Release&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://www.npmjs.com/package/nodejs-polars&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/v/nodejs-polars.svg?sanitize=true&quot; alt=&quot;NPM Latest Release&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://rpolars.r-universe.dev&quot;&gt; &lt;img src=&quot;https://rpolars.r-universe.dev/badges/polars&quot; alt=&quot;R-universe Latest Release&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://doi.org/10.5281/zenodo.7697217&quot;&gt; &lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg?sanitize=true&quot; alt=&quot;DOI Latest Release&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;Documentation&lt;/b&gt;: &lt;a href=&quot;https://docs.pola.rs/api/python/stable/reference/index.html&quot;&gt;Python&lt;/a&gt; - &lt;a href=&quot;https://docs.rs/polars/latest/polars/&quot;&gt;Rust&lt;/a&gt; - &lt;a href=&quot;https://pola-rs.github.io/nodejs-polars/index.html&quot;&gt;Node.js&lt;/a&gt; - &lt;a href=&quot;https://pola-rs.github.io/r-polars/index.html&quot;&gt;R&lt;/a&gt; | &lt;b&gt;StackOverflow&lt;/b&gt;: &lt;a href=&quot;https://stackoverflow.com/questions/tagged/python-polars&quot;&gt;Python&lt;/a&gt; - &lt;a href=&quot;https://stackoverflow.com/questions/tagged/rust-polars&quot;&gt;Rust&lt;/a&gt; - &lt;a href=&quot;https://stackoverflow.com/questions/tagged/nodejs-polars&quot;&gt;Node.js&lt;/a&gt; - &lt;a href=&quot;https://stackoverflow.com/questions/tagged/r-polars&quot;&gt;R&lt;/a&gt; | &lt;a href=&quot;https://docs.pola.rs/&quot;&gt;User guide&lt;/a&gt; | &lt;a href=&quot;https://discord.gg/4UfP5cfBE7&quot;&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Polars: Blazingly fast DataFrames in Rust, Python, Node.js, R, and SQL&lt;/h2&gt; 
&lt;p&gt;Polars is a DataFrame interface on top of an OLAP Query Engine implemented in Rust using &lt;a href=&quot;https://arrow.apache.org/docs/format/Columnar.html&quot;&gt;Apache Arrow Columnar Format&lt;/a&gt; as the memory model.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lazy | eager execution&lt;/li&gt; 
 &lt;li&gt;Multi-threaded&lt;/li&gt; 
 &lt;li&gt;SIMD&lt;/li&gt; 
 &lt;li&gt;Query optimization&lt;/li&gt; 
 &lt;li&gt;Powerful expression API&lt;/li&gt; 
 &lt;li&gt;Hybrid Streaming (larger-than-RAM datasets)&lt;/li&gt; 
 &lt;li&gt;Rust | Python | NodeJS | R | ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more, read the &lt;a href=&quot;https://docs.pola.rs/&quot;&gt;user guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import polars as pl
&amp;gt;&amp;gt;&amp;gt; df = pl.DataFrame(
...     {
...         &quot;A&quot;: [1, 2, 3, 4, 5],
...         &quot;fruits&quot;: [&quot;banana&quot;, &quot;banana&quot;, &quot;apple&quot;, &quot;apple&quot;, &quot;banana&quot;],
...         &quot;B&quot;: [5, 4, 3, 2, 1],
...         &quot;cars&quot;: [&quot;beetle&quot;, &quot;audi&quot;, &quot;beetle&quot;, &quot;beetle&quot;, &quot;beetle&quot;],
...     }
... )

# embarrassingly parallel execution &amp;amp; very expressive query language
&amp;gt;&amp;gt;&amp;gt; df.sort(&quot;fruits&quot;).select(
...     &quot;fruits&quot;,
...     &quot;cars&quot;,
...     pl.lit(&quot;fruits&quot;).alias(&quot;literal_string_fruits&quot;),
...     pl.col(&quot;B&quot;).filter(pl.col(&quot;cars&quot;) == &quot;beetle&quot;).sum(),
...     pl.col(&quot;A&quot;).filter(pl.col(&quot;B&quot;) &amp;gt; 2).sum().over(&quot;cars&quot;).alias(&quot;sum_A_by_cars&quot;),
...     pl.col(&quot;A&quot;).sum().over(&quot;fruits&quot;).alias(&quot;sum_A_by_fruits&quot;),
...     pl.col(&quot;A&quot;).reverse().over(&quot;fruits&quot;).alias(&quot;rev_A_by_fruits&quot;),
...     pl.col(&quot;A&quot;).sort_by(&quot;B&quot;).over(&quot;fruits&quot;).alias(&quot;sort_A_by_B_by_fruits&quot;),
... )
shape: (5, 8)
┌──────────┬──────────┬──────────────┬─────┬─────────────┬─────────────┬─────────────┬─────────────┐
│ fruits   ┆ cars     ┆ literal_stri ┆ B   ┆ sum_A_by_ca ┆ sum_A_by_fr ┆ rev_A_by_fr ┆ sort_A_by_B │
│ ---      ┆ ---      ┆ ng_fruits    ┆ --- ┆ rs          ┆ uits        ┆ uits        ┆ _by_fruits  │
│ str      ┆ str      ┆ ---          ┆ i64 ┆ ---         ┆ ---         ┆ ---         ┆ ---         │
│          ┆          ┆ str          ┆     ┆ i64         ┆ i64         ┆ i64         ┆ i64         │
╞══════════╪══════════╪══════════════╪═════╪═════════════╪═════════════╪═════════════╪═════════════╡
│ &quot;apple&quot;  ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 7           ┆ 4           ┆ 4           │
│ &quot;apple&quot;  ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 7           ┆ 3           ┆ 3           │
│ &quot;banana&quot; ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 8           ┆ 5           ┆ 5           │
│ &quot;banana&quot; ┆ &quot;audi&quot;   ┆ &quot;fruits&quot;     ┆ 11  ┆ 2           ┆ 8           ┆ 2           ┆ 2           │
│ &quot;banana&quot; ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 8           ┆ 1           ┆ 1           │
└──────────┴──────────┴──────────────┴─────┴─────────────┴─────────────┴─────────────┴─────────────┘
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SQL&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; df = pl.scan_csv(&quot;docs/assets/data/iris.csv&quot;)
&amp;gt;&amp;gt;&amp;gt; ## OPTION 1
&amp;gt;&amp;gt;&amp;gt; # run SQL queries on frame-level
&amp;gt;&amp;gt;&amp;gt; df.sql(&quot;&quot;&quot;
...	SELECT species,
...	  AVG(sepal_length) AS avg_sepal_length
...	FROM self
...	GROUP BY species
...	&quot;&quot;&quot;).collect()
shape: (3, 2)
┌────────────┬──────────────────┐
│ species    ┆ avg_sepal_length │
│ ---        ┆ ---              │
│ str        ┆ f64              │
╞════════════╪══════════════════╡
│ Virginica  ┆ 6.588            │
│ Versicolor ┆ 5.936            │
│ Setosa     ┆ 5.006            │
└────────────┴──────────────────┘
&amp;gt;&amp;gt;&amp;gt; ## OPTION 2
&amp;gt;&amp;gt;&amp;gt; # use pl.sql() to operate on the global context
&amp;gt;&amp;gt;&amp;gt; df2 = pl.LazyFrame({
...    &quot;species&quot;: [&quot;Setosa&quot;, &quot;Versicolor&quot;, &quot;Virginica&quot;],
...    &quot;blooming_season&quot;: [&quot;Spring&quot;, &quot;Summer&quot;, &quot;Fall&quot;]
...})
&amp;gt;&amp;gt;&amp;gt; pl.sql(&quot;&quot;&quot;
... SELECT df.species,
...     AVG(df.sepal_length) AS avg_sepal_length,
...     df2.blooming_season
... FROM df
... LEFT JOIN df2 ON df.species = df2.species
... GROUP BY df.species, df2.blooming_season
... &quot;&quot;&quot;).collect()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SQL commands can also be run directly from your terminal using the Polars CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# run an inline SQL query
&amp;gt; polars -c &quot;SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv(&#39;docs/assets/data/iris.csv&#39;) GROUP BY species;&quot;

# run interactively
&amp;gt; polars
Polars CLI v0.3.0
Type .help for help.

&amp;gt; SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv(&#39;docs/assets/data/iris.csv&#39;) GROUP BY species;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/pola-rs/polars-cli&quot;&gt;Polars CLI repository&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Performance 🚀🚀&lt;/h2&gt; 
&lt;h3&gt;Blazingly fast&lt;/h3&gt; 
&lt;p&gt;Polars is very fast. In fact, it is one of the best performing solutions available. See the &lt;a href=&quot;https://www.pola.rs/benchmarks.html&quot;&gt;PDS-H benchmarks&lt;/a&gt; results.&lt;/p&gt; 
&lt;h3&gt;Lightweight&lt;/h3&gt; 
&lt;p&gt;Polars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;polars: 70ms&lt;/li&gt; 
 &lt;li&gt;numpy: 104ms&lt;/li&gt; 
 &lt;li&gt;pandas: 520ms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Handles larger-than-RAM data&lt;/h3&gt; 
&lt;p&gt;If you have data that does not fit into memory, Polars&#39; query engine is able to process your query (or parts of your query) in a streaming fashion. This drastically reduces memory requirements, so you might be able to process your 250GB dataset on your laptop. Collect with &lt;code&gt;collect(engine=&#39;streaming&#39;)&lt;/code&gt; to run the query streaming. (This might be a little slower, but it is still very fast!)&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;Install the latest Polars version with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pip install polars
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We also have a conda package (&lt;code&gt;conda install -c conda-forge polars&lt;/code&gt;), however pip is the preferred way to install Polars.&lt;/p&gt; 
&lt;p&gt;Install Polars with all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pip install &#39;polars[all]&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install a subset of all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pip install &#39;polars[numpy,pandas,pyarrow]&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.pola.rs/user-guide/installation/#feature-flags&quot;&gt;User Guide&lt;/a&gt; for more details on optional dependencies&lt;/p&gt; 
&lt;p&gt;To see the current Polars version and a full list of its optional dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pl.show_versions()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Releases happen quite often (weekly / every few days) at the moment, so updating Polars regularly to get the latest bugfixes / features might not be a bad idea.&lt;/p&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;You can take latest release from &lt;code&gt;crates.io&lt;/code&gt;, or if you want to use the latest features / performance improvements point to the &lt;code&gt;main&lt;/code&gt; branch of this repo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;polars = { git = &quot;https://github.com/pola-rs/polars&quot;, rev = &quot;&amp;lt;optional git tag&amp;gt;&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Requires Rust version &lt;code&gt;&amp;gt;=1.80&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute? Read our &lt;a href=&quot;https://docs.pola.rs/development/contributing/&quot;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python: compile Polars from source&lt;/h2&gt; 
&lt;p&gt;If you want a bleeding edge release or maximal performance you should compile Polars from source.&lt;/p&gt; 
&lt;p&gt;This can be done by going through the following steps in sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;Rust compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://maturin.rs/&quot;&gt;maturin&lt;/a&gt;: &lt;code&gt;pip install maturin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cd py-polars&lt;/code&gt; and choose one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;, slow binary with debug assertions and symbols, fast compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-release&lt;/code&gt;, fast binary without debug assertions, minimal debug symbols, long compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-nodebug-release&lt;/code&gt;, same as build-release but without any debug symbols, slightly faster to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-debug-release&lt;/code&gt;, same as build-release but with full debug symbols, slightly slower to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-dist-release&lt;/code&gt;, fastest binary, extreme compile times&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default the binary is compiled with optimizations turned on for a modern CPU. Specify &lt;code&gt;LTS_CPU=1&lt;/code&gt; with the command if your CPU is older and does not support e.g. AVX2.&lt;/p&gt; 
&lt;p&gt;Note that the Rust crate implementing the Python bindings is called &lt;code&gt;py-polars&lt;/code&gt; to distinguish from the wrapped Rust crate &lt;code&gt;polars&lt;/code&gt; itself. However, both the Python package and the Python module are named &lt;code&gt;polars&lt;/code&gt;, so you can &lt;code&gt;pip install polars&lt;/code&gt; and &lt;code&gt;import polars&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Using custom Rust functions in Python&lt;/h2&gt; 
&lt;p&gt;Extending Polars with UDFs compiled in Rust is easy. We expose PyO3 extensions for &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; data structures. See more in &lt;a href=&quot;https://github.com/pola-rs/pyo3-polars&quot;&gt;https://github.com/pola-rs/pyo3-polars&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Going big...&lt;/h2&gt; 
&lt;p&gt;Do you expect more than 2^32 (~4.2 billion) rows? Compile Polars with the &lt;code&gt;bigidx&lt;/code&gt; feature flag or, for Python users, install &lt;code&gt;pip install polars-u64-idx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don&#39;t use this unless you hit the row boundary as the default build of Polars is faster and consumes less memory.&lt;/p&gt; 
&lt;h2&gt;Legacy&lt;/h2&gt; 
&lt;p&gt;Do you want Polars to run on an old CPU (e.g. dating from before 2011), or on an &lt;code&gt;x86-64&lt;/code&gt; build of Python on Apple Silicon under Rosetta? Install &lt;code&gt;pip install polars-lts-cpu&lt;/code&gt;. This version of Polars is compiled without &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX&lt;/a&gt; target features.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com&quot;&gt;&lt;img src=&quot;https://www.jetbrains.com/company/brand/img/jetbrains_logo.png&quot; height=&quot;50&quot; alt=&quot;JetBrains logo&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vercel/turborepo</title>
      <link>https://github.com/vercel/turborepo</link>
      <description>&lt;p&gt;Build system optimized for JavaScript and TypeScript, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://turbo.build&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://user-images.githubusercontent.com/4060187/196936123-f6e1db90-784d-4174-b774-92502b718836.png&quot;&gt; 
   &lt;img src=&quot;https://user-images.githubusercontent.com/4060187/196936104-5797972c-ab10-4834-bd61-0d1e5f442c9c.png&quot; height=&quot;128&quot;&gt; 
  &lt;/picture&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;&lt;a href=&quot;https://turbo.build&quot;&gt;Turborepo&lt;/a&gt;&lt;/h1&gt;
&lt;a href=&quot;https://turbo.build&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a aria-label=&quot;Vercel logo&quot; href=&quot;https://vercel.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=Vercel&amp;amp;labelColor=000&quot;&gt;&lt;/a&gt; &lt;a aria-label=&quot;NPM version&quot; href=&quot;https://www.npmjs.com/package/turbo&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/npm/v/turbo.svg?style=for-the-badge&amp;amp;labelColor=000000&quot;&gt;&lt;/a&gt; &lt;a aria-label=&quot;License&quot; href=&quot;https://github.com/vercel/turborepo/raw/main/LICENSE&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/npm/l/turbo.svg?style=for-the-badge&amp;amp;labelColor=000000&amp;amp;color=&quot;&gt;&lt;/a&gt; &lt;a aria-label=&quot;Join the community on GitHub&quot; href=&quot;https://github.com/vercel/turborepo/discussions&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&amp;amp;logo=turborepo&amp;amp;labelColor=000000&amp;amp;logoWidth=20&amp;amp;logoColor=white&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Turborepo is a high-performance build system for JavaScript and TypeScript codebases, written in Rust.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://turbo.build/repo&quot;&gt;https://turbo.build/repo&lt;/a&gt; to get started with Turborepo.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/vercel/turborepo/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Turborepo community can be found on &lt;a href=&quot;https://github.com/vercel/turborepo/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; 
&lt;p&gt;To chat with other community members, you can join &lt;a href=&quot;https://vercel.community/tag/turborepo&quot;&gt;Vercel Community&#39;s &lt;code&gt;#turborepo&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/vercel/turborepo/raw/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; applies to all Turborepo community channels.&lt;/p&gt; 
&lt;h2&gt;Who is using Turborepo?&lt;/h2&gt; 
&lt;p&gt;Turborepo is used by the world&#39;s leading companies. Check out the &lt;a href=&quot;https://turbo.build/showcase&quot;&gt;Turborepo Showcase&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Updates&lt;/h2&gt; 
&lt;p&gt;Follow &lt;a href=&quot;https://x.com/turborepo&quot;&gt;@turborepo&lt;/a&gt; on X for project updates.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Turborepo&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jared Palmer (&lt;a href=&quot;https://x.com/jaredpalmer&quot;&gt;@jaredpalmer&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you believe you have found a security vulnerability in Turborepo, we encourage you to responsibly disclose this and not open a public issue. We will investigate all legitimate reports. Email &lt;code&gt;security@vercel.com&lt;/code&gt; to disclose any security vulnerabilities.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://vercel.com/security&quot;&gt;https://vercel.com/security&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>raydium-io/raydium-amm</title>
      <link>https://github.com/raydium-io/raydium-amm</link>
      <description>&lt;p&gt;Constant product AMM integrated with the OpenBook CLOB&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;raydium-amm&lt;/h1&gt; 
&lt;/div&gt; 
&lt;h2&gt;Program Deployments&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Environment&lt;/th&gt; 
   &lt;th&gt;&lt;a href=&quot;https://raw.githubusercontent.com/raydium-io/raydium-amm/master/program&quot;&gt;PROGRAM&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mainnet&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Devnet&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;HWy1jotHpo6UqeQxx49dpYYdQB8wj9Qk9MdxwjLvDHB8&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;The Raydium AMM is an on-chain smart contract based on the “constant product” in a permissionless and decentralized manner built on the Solana blockchain.And it also shares its liquidity according to the Fibonacci sequence in the form of limit orders on &lt;a href=&quot;https://github.com/openbook-dex/program&quot;&gt;OpenBook&lt;/a&gt;, the primary central limit order book (CLOB) of Solana&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;The audit process is &lt;a href=&quot;https://github.com/raydium-io/raydium-docs/tree/master/audit&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;The dev document is &lt;a href=&quot;https://github.com/raydium-io/raydium-docs/tree/master/dev-resources&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Environment Setup&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;Rust&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://docs.solana.com/cli/install-solana-cli-tools&quot;&gt;Solana&lt;/a&gt; and then run &lt;code&gt;solana-keygen new&lt;/code&gt; to create a keypair at the default location.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;Clone the repository and enter the source code directory.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/raydium-io/raydium-amm
cd raydium-amm/program
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mainnet Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo build-sbf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Devnet Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo build-sbf --features devnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Localnet Build&lt;/h3&gt; 
&lt;p&gt;You must update these pubkeys in the &quot;config_feature&quot; as yours over the localnet feature before build;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo build-sbf --features localnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After building, the smart contract files are all located in the target directory.&lt;/p&gt; 
&lt;h2&gt;Deploy&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;solana deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attention, check your configuration and confirm the environment you want to deploy.&lt;/p&gt; 
&lt;h2&gt;QuickStart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You must have an openbook market not associated to any amm pool if you want to initialize a new amm pool. And you can refer to &lt;a href=&quot;https://github.com/openbook-dex/program/raw/master/dex/crank/src/lib.rs#L349&quot;&gt;ListMarket&lt;/a&gt; to create a new market.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add dependencies in your Cargo.toml&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;[dependencies]
[features]
# default is mainnet
devnet = [
    &quot;amm-cli/devnet&quot;,
    &quot;common/devnet&quot;,
]

[dependencies]
amm-cli = { git = &quot;https://github.com/raydium-io/raydium-library&quot; }
common = { git = &quot;https://github.com/raydium-io/raydium-library&quot; }
spl-token = { version = &quot;4.0.0&quot;, features = [&quot;no-entrypoint&quot;] }
spl-associated-token-account = { version = &quot;2.2.0&quot;, features = [
    &quot;no-entrypoint&quot;,
] }
spl-token-2022 = { version = &quot;0.9.0&quot;, features = [&quot;no-entrypoint&quot;] }
solana-client = &quot;&amp;lt;1.17.0&quot;
solana-sdk = &quot;&amp;lt;1.17.0&quot;
anyhow = &quot;1.0.53&quot;
clap = { version = &quot;4.1.8&quot;, features = [&quot;derive&quot;] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Import dependent libraries&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;#![allow(dead_code)]
use anyhow::{Ok, Result};
use clap::Parser;
use solana_client::rpc_client::RpcClient;
use solana_sdk::{commitment_config::CommitmentConfig, signer::Signer};
use std::sync::Arc;

use {
    amm_cli::{self, AmmCommands},
    common::{common_types, common_utils, rpc},
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Custom configuration parameters in your code.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;// default config
let mut config = common_types::CommonConfig::default();
// Replace the default configuration parameters you need
config.set_cluster(&quot;http&quot;, &quot;ws&quot;);
config.set_wallet(&quot;your wallet path&quot;);
config.set_amm_program(&quot;675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8&quot;);
config.set_openbook_program(&quot;srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX&quot;);
config.set_slippage(50);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;Constructing a signed storage object.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;let payer = common_utils::read_keypair_file(&amp;amp;config.wallet())?;
let fee_payer = payer.pubkey();
let mut signing_keypairs: Vec&amp;lt;Arc&amp;lt;dyn Signer&amp;gt;&amp;gt; = Vec::new();
let payer: Arc&amp;lt;dyn Signer&amp;gt; = Arc::new(payer);
if !signing_keypairs.contains(&amp;amp;payer) {
    signing_keypairs.push(payer);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;6&quot;&gt; 
 &lt;li&gt;initialize a new amm pool with an associate openbook market&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;// build initialize pool instruction
let subcmd = AmmCommands::CreatePool {
    market: Pubkey::from_str(&quot;The amm associated with openbook market&quot;).unwrap(),
    coin_mint: Pubkey::from_str(&quot;The openbook market&#39;s coin_mint&quot;).unwrap(),
    pc_mint: Pubkey::from_str(&quot;The openbook market&#39;s pc_mint&quot;).unwrap(),
    user_token_coin: Pubkey::from_str(&quot;User&#39;s token coin&quot;).unwrap(),
    user_token_pc: Pubkey::from_str(&quot;User&#39;s token pc&quot;).unwrap(),
    init_coin_amount: 100000u64,
    init_pc_amount: 100000u64,
    open_time: 0,
};
let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;deposit assets to an amm pool&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;// build deposit instruction
let subcmd = AmmCommands::Deposit {
    pool_id: Pubkey::from_str(&quot;The specified pool of the assets deposite to&quot;).unwrap(),
    deposit_token_coin: Some(Pubkey::from_str(&quot;The specified token coin of the user deposit&quot;).unwrap()),
    deposit_token_pc: Some(Pubkey::from_str(&quot;The specified token pc of the user deposit&quot;).unwrap()),
    recipient_token_lp: Some(Pubkey::from_str(&quot;The specified lp token of the user will receive&quot;).unwrap()),
    amount_specified: 100000u64,
    another_min_limit: false,
    base_coin: false,
};
let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Note&lt;/h3&gt; 
&lt;p&gt;If the parameter of the deposit_token_coin, deposit_token_pc or recipient_token_lp is None, it will be ATA token by default.&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;withdraw assets from amm pool&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;// build withdraw instruction
let subcmd = AmmCommands::Withdraw {
    pool_id: Pubkey::from_str(&quot;The specified pool of the assets withdraw from&quot;).unwrap(),
    withdraw_token_lp: Some(Pubkey::from_str(&quot;The specified lp token of the user withdraw&quot;).unwrap()),
    recipient_token_coin: Some(Pubkey::from_str(&quot;The specified token coin of the user will receive&quot;).unwrap()),
    recipient_token_pc: Some(Pubkey::from_str(&quot;The specified token pc of the user will receive&quot;).unwrap()),
    input_lp_amount: 100000u64,
    slippage_limit: false,
};
let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Note&lt;/h3&gt; 
&lt;p&gt;If the parameter of the withdraw_token_lp, recipient_token_coin or recipient_token_pc is None, it will be ATA token by default.&lt;/p&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;swap&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;// build swap instruction
let subcmd = AmmCommands::Swap {
    pool_id: Pubkey::from_str(&quot; The specified pool of trading&quot;).unwrap(),
    user_input_token: Pubkey::from_str(&quot;The token of user want to swap from&quot;).unwrap(),
    user_output_token: Some(Pubkey::from_str(&quot;The token of user want to swap to&quot;).unwrap()),
    amount_specified: 100000u64,
    base_out: false,
};
let instruction = amm_cli::process_amm_commands(subcmd, &amp;amp;config).unwrap();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Note&lt;/h3&gt; 
&lt;p&gt;If the parameter of the user_output_token is None, it will be ATA token by default.&lt;/p&gt; 
&lt;p&gt;For more information, you can see the repo &lt;a href=&quot;https://github.com/raydium-io/raydium-library&quot;&gt;raydium-library&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kata-containers/kata-containers</title>
      <link>https://github.com/kata-containers/kata-containers</link>
      <description>&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs. https://katacontainers.io/&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-images-prod/openstack-logo/kata/SVG/kata-1.svg?sanitize=true&quot; width=&quot;900&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml&quot;&gt;&lt;img src=&quot;https://github.com/kata-containers/kata-containers/actions/workflows/payload-after-push.yaml/badge.svg?sanitize=true&quot; alt=&quot;CI | Publish Kata Containers payload&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml&quot;&gt;&lt;img src=&quot;https://github.com/kata-containers/kata-containers/actions/workflows/ci-nightly.yaml/badge.svg?sanitize=true&quot; alt=&quot;Kata Containers Nightly CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Kata Containers&lt;/h1&gt; 
&lt;p&gt;Welcome to Kata Containers!&lt;/p&gt; 
&lt;p&gt;This repository is the home of the Kata Containers code for the 2.0 and newer releases.&lt;/p&gt; 
&lt;p&gt;If you want to learn about Kata Containers, visit the main &lt;a href=&quot;https://katacontainers.io&quot;&gt;Kata Containers website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code is licensed under the Apache 2.0 license. See &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/LICENSE&quot;&gt;the license file&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;Kata Containers currently runs on 64-bit systems supporting the following technologies:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
   &lt;th&gt;Virtualization technology&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.intel.com&quot;&gt;Intel&lt;/a&gt; VT-x, AMD SVM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;aarch64&lt;/code&gt; (&quot;&lt;code&gt;arm64&lt;/code&gt;&quot;)&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.arm.com&quot;&gt;ARM&lt;/a&gt; Hyp&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ppc64le&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.ibm.com&quot;&gt;IBM&lt;/a&gt; Power&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;s390x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.ibm.com&quot;&gt;IBM&lt;/a&gt; Z &amp;amp; LinuxONE SIE&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Hardware requirements&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime&quot;&gt;Kata Containers runtime&lt;/a&gt; provides a command to determine if your host system is capable of running and creating a Kata Container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ kata-runtime check
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;This command runs a number of checks including connecting to the network to determine if a newer release of Kata Containers is available on GitHub. If you do not wish this to check to run, add the &lt;code&gt;--no-network-checks&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;By default, only a brief success / failure message is printed. If more details are needed, the &lt;code&gt;--verbose&lt;/code&gt; flag can be used to display the list of all the checks performed.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If the command is run as the &lt;code&gt;root&lt;/code&gt; user additional checks are run (including checking if another incompatible hypervisor is running). When running as &lt;code&gt;root&lt;/code&gt;, network checks are automatically disabled.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install&quot;&gt;installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs&quot;&gt;official documentation&lt;/a&gt; including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install&quot;&gt;Installation guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md&quot;&gt;Developer guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design&quot;&gt;Design documents&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture&quot;&gt;Architecture overview&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/design/architecture_3.0/&quot;&gt;Architecture 3.0 overview&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Kata Containers uses a single &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#configuration&quot;&gt;configuration file&lt;/a&gt; which contains a number of sections for various parts of the Kata Containers system including the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime&quot;&gt;runtime&lt;/a&gt;, the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent&quot;&gt;agent&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/#hypervisors&quot;&gt;hypervisor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Hypervisors&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/hypervisors.md&quot;&gt;hypervisors document&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime/README.md#hypervisor-specific-configuration&quot;&gt;Hypervisor specific configuration details&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;To learn more about the project, its community and governance, see the &lt;a href=&quot;https://github.com/kata-containers/community&quot;&gt;community repository&lt;/a&gt;. This is the first place to go if you wish to contribute to the project.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/#community&quot;&gt;community&lt;/a&gt; section for ways to contact us.&lt;/p&gt; 
&lt;h3&gt;Raising issues&lt;/h3&gt; 
&lt;p&gt;Please raise an issue &lt;a href=&quot;https://github.com/kata-containers/kata-containers/issues&quot;&gt;in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are reporting a security issue, please follow the &lt;a href=&quot;https://github.com/kata-containers/community#vulnerability-handling&quot;&gt;vulnerability reporting process&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Developers&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/Developer-Guide.md&quot;&gt;developer guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Components&lt;/h3&gt; 
&lt;h3&gt;Main components&lt;/h3&gt; 
&lt;p&gt;The table below lists the core parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime&quot;&gt;runtime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Main component run by a container manager and providing a containerd shimv2 runtime implementation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/runtime-rs&quot;&gt;runtime-rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;The Rust version runtime.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/agent&quot;&gt;agent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;Management process running inside the virtual machine / POD that sets up the container environment.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/dragonball&quot;&gt;&lt;code&gt;dragonball&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;core&lt;/td&gt; 
   &lt;td&gt;An optional built-in VMM brings out-of-the-box Kata Containers experience with optimizations on container workloads&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs&quot;&gt;documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;documentation&lt;/td&gt; 
   &lt;td&gt;Documentation common to all components (such as design and install documentation).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests&quot;&gt;tests&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;tests&lt;/td&gt; 
   &lt;td&gt;Excludes unit tests which live with the main code.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Additional components&lt;/h3&gt; 
&lt;p&gt;The table below lists the remaining parts of the project:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging&quot;&gt;packaging&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Scripts and metadata for producing packaged binaries&lt;br&gt;(components, hypervisors, kernel and rootfs).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.kernel.org&quot;&gt;kernel&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;kernel&lt;/td&gt; 
   &lt;td&gt;Linux kernel used by the hypervisor to boot the guest image. Patches are stored &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kernel&quot;&gt;here&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/osbuilder&quot;&gt;osbuilder&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Tool to create &quot;mini O/S&quot; rootfs and initrd images and kernel for the hypervisor.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kata-debug/README.md&quot;&gt;kata-debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;infrastructure&lt;/td&gt; 
   &lt;td&gt;Utility tool to gather Kata Containers debug information from Kubernetes clusters.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/agent-ctl&quot;&gt;&lt;code&gt;agent-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides low-level access for testing the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/kata-ctl&quot;&gt;&lt;code&gt;kata-ctl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Tool that provides advanced commands and debug facilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/trace-forwarder&quot;&gt;&lt;code&gt;trace-forwarder&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Agent tracing helper.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/src/tools/runk&quot;&gt;&lt;code&gt;runk&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Standard OCI container runtime based on the agent.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/.github/workflows&quot;&gt;&lt;code&gt;ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration files and scripts.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/ci/openshift-ci/README.md&quot;&gt;&lt;code&gt;ocp-ci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CI&lt;/td&gt; 
   &lt;td&gt;Continuous Integration configuration for the OpenShift pipelines.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/kata-containers/www.katacontainers.io&quot;&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Source for the &lt;a href=&quot;https://www.katacontainers.io&quot;&gt;&lt;code&gt;katacontainers.io&lt;/code&gt;&lt;/a&gt; site.&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/testing/kata-webhook/README.md&quot;&gt;&lt;code&gt;Webhook&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;utility&lt;/td&gt; 
   &lt;td&gt;Example of a simple admission controller webhook to annotate pods with the Kata runtime class&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Packaging and releases&lt;/h3&gt; 
&lt;p&gt;Kata Containers is now &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/install/README.md#packaged-installation-methods&quot;&gt;available natively for most distributions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;General tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/README.md&quot;&gt;tests documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Metrics tests&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/kata-containers/kata-containers/main/tests/metrics/README.md&quot;&gt;metrics documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Glossary of Terms&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/kata-containers/kata-containers/wiki/Glossary&quot;&gt;glossary of terms&lt;/a&gt; related to Kata Containers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>risingwavelabs/risingwave</title>
      <link>https://github.com/risingwavelabs/risingwave</link>
      <description>&lt;p&gt;Stream processing and management platform.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; 
 &lt;picture&gt; 
  &lt;source srcset=&quot;.github/RisingWave-logo-dark.svg&quot; width=&quot;500px&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt; 
  &lt;img src=&quot;https://raw.githubusercontent.com/risingwavelabs/risingwave/main/.github/RisingWave-logo-light.svg?sanitize=true&quot; width=&quot;500px&quot;&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;h3&gt;🌊 Ride the Wave of Streaming Data.&lt;/h3&gt; 
&lt;/div&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://docs.risingwave.com/&quot;&gt;Docs&lt;/a&gt; | &lt;a href=&quot;https://docs.risingwave.com/get-started/rw-benchmarks-stream-processing&quot;&gt;Benchmarks&lt;/a&gt; | &lt;a href=&quot;https://docs.risingwave.com/demos/overview&quot;&gt;Demos&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://go.risingwave.com/slack&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;Slack&quot; src=&quot;https://badgen.net/badge/Slack/Join%20RisingWave/0abd59?icon=slack&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://x.com/risingwavelabs&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;X&quot; src=&quot;https://img.shields.io/twitter/follow/risingwavelabs&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://www.youtube.com/@risingwave-labs&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;YouTube&quot; src=&quot;https://img.shields.io/youtube/channel/views/UCsHwdyBRxBpmkA5RRd0YNEA&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;RisingWave is the world&#39;s most advanced event stream processing platform engineered to provide the &lt;i&gt;&lt;b&gt;simplest&lt;/b&gt;&lt;/i&gt; and &lt;i&gt;&lt;b&gt;most cost-efficient&lt;/b&gt;&lt;/i&gt; approach for &lt;b&gt;processing&lt;/b&gt;, &lt;b&gt;analyzing&lt;/b&gt;, and &lt;b&gt;managing&lt;/b&gt; real-time event streaming data. It provides both a Postgres-compatible &lt;a href=&quot;https://docs.risingwave.com/sql/overview&quot;&gt;SQL interface&lt;/a&gt; and a DataFrame-style &lt;a href=&quot;https://docs.risingwave.com/python-sdk/intro&quot;&gt;Python interface&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;RisingWave can &lt;b&gt;ingest&lt;/b&gt; millions of events per second, continuously &lt;b&gt;join and analyze&lt;/b&gt; live data streams with historical tables, &lt;b&gt;serve&lt;/b&gt; ad-hoc queries at low latency, and &lt;b&gt;deliver&lt;/b&gt; fresh, consistent results wherever needed.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/risingwavelabs/risingwave/main/docs/dev/src/images/architecture_20250127.png&quot; alt=&quot;RisingWave&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Try it out in 60 seconds&lt;/h2&gt; 
&lt;p&gt;Install RisingWave standalone mode:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -L https://risingwave.com/sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To learn about other installation options, such as using a Docker image, see &lt;a href=&quot;https://docs.risingwave.com/docs/current/get-started/&quot;&gt;Quick Start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Not just a stream processor!&lt;/h2&gt; 
&lt;p&gt;RisingWave simplifies &lt;strong&gt;end-to-end&lt;/strong&gt; development of real-time data pipelines and applications - going beyond traditional stream processors.&lt;/p&gt; 
&lt;p&gt;Like other stream processors, RisingWave supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Ingestion:&lt;/strong&gt; Ingest millions of events per second from streaming and batch sources.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stream processing:&lt;/strong&gt; Perform real-time incremental processing to join and analyze live data with historical tables.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Delivery:&lt;/strong&gt; Deliver fresh, consistent results to data lakes (e.g., Apache Iceberg) or any destination.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;But RisingWave does more. It provides both &lt;strong&gt;online and offline storage&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Online serving:&lt;/strong&gt; Row-based storage for ad-hoc point/range queries with single-digit millisecond latency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Offline persistence:&lt;/strong&gt; Apache Iceberg-based storage that persists streaming data at low cost, enabling open access by other query engines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Key design decisions&lt;/h2&gt; 
&lt;p&gt;RisingWave is designed to be easier to use and more cost-efficient:&lt;/p&gt; 
&lt;h3&gt;PostgreSQL compatibility&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless integration:&lt;/strong&gt; Connects via the PostgreSQL wire protocol, working with psql, JDBC, and any Postgres tool.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Expressive SQL:&lt;/strong&gt; Supports structured, semi-structured, and unstructured data with a familiar SQL dialect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No manual state tuning:&lt;/strong&gt; Eliminates complex state management configurations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Zero disk architecture&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Cloud-native storage:&lt;/strong&gt; Stores data in S3 (or equivalent), using local disk as a cache.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High performance:&lt;/strong&gt; Optimized for complex queries like joins and time windowing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast recovery:&lt;/strong&gt; Recovers from system crashes within seconds.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic scaling:&lt;/strong&gt; Instantly adjusts resources for workload spikes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;In what use cases does RisingWave excel?&lt;/h2&gt; 
&lt;p&gt;RisingWave is particularly effective for the following use cases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Streaming analytics&lt;/strong&gt;: Achieve sub-second data freshness in live dashboards, ideal for high-stakes scenarios like stock trading, sports betting, and IoT monitoring.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Event-driven applications&lt;/strong&gt;: Develop sophisticated monitoring and alerting systems for critical applications such as fraud and anomaly detection.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real-time data enrichment&lt;/strong&gt;: Continuously ingest data from diverse sources, conduct real-time data enrichment, and efficiently deliver the results to downstream systems.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feature engineering&lt;/strong&gt;: Transform batch and streaming data into features in your machine learning models using a unified codebase, ensuring seamless integration and consistency.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Production deployments&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://cloud.risingwave.com&quot;&gt;&lt;strong&gt;RisingWave Cloud&lt;/strong&gt;&lt;/a&gt; offers the easiest way to run RisingWave in production.&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;Docker deployment&lt;/strong&gt;, please refer to &lt;a href=&quot;https://docs.risingwave.com/docs/current/risingwave-docker-compose/&quot;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;Kubernetes deployment&lt;/strong&gt;, please refer to &lt;a href=&quot;https://docs.risingwave.com/docs/current/risingwave-k8s-helm/&quot;&gt;Kubernetes with Helm&lt;/a&gt; or &lt;a href=&quot;https://docs.risingwave.com/docs/current/risingwave-kubernetes/&quot;&gt;Kubernetes with Operator&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Looking for help, discussions, collaboration opportunities, or a casual afternoon chat with our fellow engineers and community members? Join our &lt;a href=&quot;https://risingwave.com/slack&quot;&gt;Slack workspace&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Notes on telemetry&lt;/h2&gt; 
&lt;p&gt;RisingWave uses &lt;a href=&quot;https://scarf.sh/&quot;&gt;Scarf&lt;/a&gt; to collect anonymized installation analytics. These analytics help support us understand and improve the distribution of our package. The privacy policy of Scarf is available at &lt;a href=&quot;https://about.scarf.sh/privacy-policy&quot;&gt;https://about.scarf.sh/privacy-policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;RisingWave also collects anonymous usage statistics to better understand how the community is using RisingWave. The sole intention of this exercise is to help improve the product. Users may opt out easily at any time. Please refer to the &lt;a href=&quot;https://docs.risingwave.com/docs/current/telemetry/&quot;&gt;user documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;RisingWave is distributed under the Apache License (Version 2.0). Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/risingwavelabs/risingwave/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thanks for your interest in contributing to the project! Please refer to &lt;a href=&quot;https://risingwavelabs.github.io/risingwave/&quot;&gt;RisingWave Developer Guide&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust</title>
      <link>https://github.com/rust-lang/rust</link>
      <description>&lt;p&gt;Empowering everyone to build reliable and efficient software.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-dark.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg&quot;&gt; 
  &lt;img alt=&quot;The Rust Programming Language: A language empowering everyone to build reliable and efficient software&quot; src=&quot;https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg?sanitize=true&quot; width=&quot;50%&quot;&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Website&lt;/a&gt; | &lt;a href=&quot;https://www.rust-lang.org/learn/get-started&quot;&gt;Getting started&lt;/a&gt; | &lt;a href=&quot;https://www.rust-lang.org/learn&quot;&gt;Learn&lt;/a&gt; | &lt;a href=&quot;https://www.rust-lang.org/learn#learn-use&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;This is the main source code repository for &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;. It contains the compiler, standard library, and documentation.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Fast and memory-efficient, suitable for critical services, embedded devices, and easily integrated with other languages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; Our rich type system and ownership model ensure memory and thread safety, reducing bugs at compile-time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; Comprehensive documentation, a compiler committed to providing great diagnostics, and advanced tooling including package manager and build tool (&lt;a href=&quot;https://github.com/rust-lang/cargo&quot;&gt;Cargo&lt;/a&gt;), auto-formatter (&lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;rustfmt&lt;/a&gt;), linter (&lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;Clippy&lt;/a&gt;) and editor support (&lt;a href=&quot;https://github.com/rust-lang/rust-analyzer&quot;&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Read &lt;a href=&quot;https://doc.rust-lang.org/book/ch01-01-installation.html&quot;&gt;&quot;Installation&quot;&lt;/a&gt; from &lt;a href=&quot;https://doc.rust-lang.org/book/index.html&quot;&gt;The Book&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing from Source&lt;/h2&gt; 
&lt;p&gt;If you really want to install from source (though this is not recommended), see &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/INSTALL.md&quot;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.rust-lang.org/community&quot;&gt;https://www.rust-lang.org/community&lt;/a&gt; for a list of chat platforms and forums.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-APACHE&quot;&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT&quot;&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Trademark&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://foundation.rust-lang.org/&quot;&gt;The Rust Foundation&lt;/a&gt; owns and protects the Rust and Cargo trademarks and logos (the &quot;Rust Trademarks&quot;).&lt;/p&gt; 
&lt;p&gt;If you want to use these names or brands, please read the &lt;a href=&quot;https://foundation.rust-lang.org/policies/logo-policy-and-media-guide/&quot;&gt;media guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Third-party logos may be subject to third-party copyrights and trademarks. See &lt;a href=&quot;https://www.rust-lang.org/policies/licenses&quot;&gt;Licenses&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qdrant/qdrant</title>
      <link>https://github.com/qdrant/qdrant</link>
      <description>&lt;p&gt;Qdrant - High-performance, massive-scale Vector Database and Vector Search Engine for the next generation of AI. Also available in the cloud https://cloud.qdrant.io/&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img height=&quot;100&quot; src=&quot;https://github.com/qdrant/qdrant/raw/master/docs/logo.svg?sanitize=true&quot; alt=&quot;Qdrant&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;Vector Search Engine for the next generation of AI applications&lt;/b&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/qdrant/qdrant/actions/workflows/rust.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/qdrant/qdrant/rust.yml?style=flat-square&quot; alt=&quot;Tests status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://api.qdrant.tech/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Docs-OpenAPI%203.0-success?style=flat-square&quot; alt=&quot;OpenAPI Docs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/qdrant/qdrant/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/qdrant/qdrant?style=flat-square&quot; alt=&quot;Apache 2.0 License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://qdrant.to/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/907569970500743200?logo=Discord&amp;amp;style=flat-square&amp;amp;color=7289da&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://qdrant.to/roadmap&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Roadmap-2024-bc1439.svg?style=flat-square&quot; alt=&quot;Roadmap 2024&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.qdrant.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Qdrant-Cloud-24386C.svg?logo=cloud&amp;amp;style=flat-square&quot; alt=&quot;Qdrant Cloud&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Qdrant&lt;/strong&gt; (read: &lt;em&gt;quadrant&lt;/em&gt;) is a vector similarity search engine and vector database. It provides a production-ready service with a convenient API to store, search, and manage points—vectors with an additional payload Qdrant is tailored to extended filtering support. It makes it useful for all sorts of neural-network or semantic-based matching, faceted search, and other applications.&lt;/p&gt; 
&lt;p&gt;Qdrant is written in Rust 🦀, which makes it fast and reliable even under high load. See &lt;a href=&quot;https://qdrant.tech/benchmarks/&quot;&gt;benchmarks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!&lt;/p&gt; 
&lt;p&gt;Qdrant is also available as a fully managed &lt;strong&gt;&lt;a href=&quot;https://cloud.qdrant.io/&quot;&gt;Qdrant Cloud&lt;/a&gt;&lt;/strong&gt; ⛅ including a &lt;strong&gt;free tier&lt;/strong&gt;.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md&quot;&gt;Quick Start&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/qdrant/qdrant/master/#clients&quot;&gt;Client Libraries&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/qdrant/qdrant/master/#demo-projects&quot;&gt;Demo Projects&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/qdrant/qdrant/master/#integrations&quot;&gt;Integrations&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/qdrant/qdrant/master/#contacts&quot;&gt;Contact&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;pip install qdrant-client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The python client offers a convenient way to start with Qdrant locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from qdrant_client import QdrantClient
qdrant = QdrantClient(&quot;:memory:&quot;) # Create in-memory Qdrant instance, for testing, CI/CD
# OR
client = QdrantClient(path=&quot;path/to/db&quot;)  # Persists changes to disk, fast prototyping
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Client-Server&lt;/h3&gt; 
&lt;p&gt;To experience the full power of Qdrant locally, run the container with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -p 6333:6333 qdrant/qdrant
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can connect to this with any client, including Python:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;qdrant = QdrantClient(&quot;http://localhost:6333&quot;) # Connect to existing Qdrant instance
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Before deploying Qdrant to production, be sure to read our &lt;a href=&quot;https://qdrant.tech/documentation/guides/installation/&quot;&gt;installation&lt;/a&gt; and &lt;a href=&quot;https://qdrant.tech/documentation/guides/security/&quot;&gt;security&lt;/a&gt; guides.&lt;/p&gt; 
&lt;h3&gt;Clients&lt;/h3&gt; 
&lt;p&gt;Qdrant offers the following client libraries to help you integrate it into your application stack with ease:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/qdrant/go-client&quot;&gt;Go client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/qdrant/rust-client&quot;&gt;Rust client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/qdrant/qdrant-js&quot;&gt;JavaScript/TypeScript client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/qdrant/qdrant-client&quot;&gt;Python client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/qdrant/qdrant-dotnet&quot;&gt;.NET/C# client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/qdrant/java-client&quot;&gt;Java client&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Community: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/qdrant/readme.html&quot;&gt;Elixir&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/hkulekci/qdrant-php&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/andreibondarev/qdrant-ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/metaloom/qdrant-java-client&quot;&gt;Java&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Where do I go from here?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md&quot;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;End to End &lt;a href=&quot;https://colab.research.google.com/drive/1Bz8RSVHwnNDaNtDwotfPj0w7AYzsdXZ-?usp=sharing&quot;&gt;Colab Notebook&lt;/a&gt; demo with SentenceBERT and Qdrant&lt;/li&gt; 
 &lt;li&gt;Detailed &lt;a href=&quot;https://qdrant.tech/documentation/&quot;&gt;Documentation&lt;/a&gt; are great starting points&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://qdrant.to/qdrant-tutorial&quot;&gt;Step-by-Step Tutorial&lt;/a&gt; to create your first neural network project with Qdrant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo Projects &lt;a href=&quot;https://replit.com/@qdrant&quot;&gt;&lt;img align=&quot;right&quot; src=&quot;https://replit.com/badge/github/qdrant/qdrant&quot; alt=&quot;Run on Repl.it&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Discover Semantic Text Search 🔍&lt;/h3&gt; 
&lt;p&gt;Unlock the power of semantic embeddings with Qdrant, transcending keyword-based search to find meaningful connections in short texts. Deploy a neural search in minutes using a pre-trained neural network, and experience the future of text search. &lt;a href=&quot;https://qdrant.to/semantic-search-demo&quot;&gt;Try it online!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Explore Similar Image Search - Food Discovery 🍕&lt;/h3&gt; 
&lt;p&gt;There&#39;s more to discovery than text search, especially when it comes to food. People often choose meals based on appearance rather than descriptions and ingredients. Let Qdrant help your users find their next delicious meal using visual search, even if they don&#39;t know the dish&#39;s name. &lt;a href=&quot;https://qdrant.to/food-discovery&quot;&gt;Check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Master Extreme Classification - E-commerce Product Categorization 📺&lt;/h3&gt; 
&lt;p&gt;Enter the cutting-edge realm of extreme classification, an emerging machine learning field tackling multi-class and multi-label problems with millions of labels. Harness the potential of similarity learning models, and see how a pre-trained transformer model and Qdrant can revolutionize e-commerce product categorization. &lt;a href=&quot;https://qdrant.to/extreme-classification-demo&quot;&gt;Play with it online!&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; More solutions &lt;/summary&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td width=&quot;30%&quot;&gt; &lt;img src=&quot;https://qdrant.tech/content/images/text_search.png&quot;&gt; &lt;/td&gt; 
    &lt;td width=&quot;30%&quot;&gt; &lt;img src=&quot;https://qdrant.tech/content/images/image_search.png&quot;&gt; &lt;/td&gt; 
    &lt;td width=&quot;30%&quot;&gt; &lt;img src=&quot;https://qdrant.tech/content/images/recommendations.png&quot;&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Semantic Text Search &lt;/td&gt; 
    &lt;td&gt; Similar Image Search &lt;/td&gt; 
    &lt;td&gt; Recommendations &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;img width=&quot;300px&quot; src=&quot;https://qdrant.tech/content/images/chat_bots.png&quot;&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width=&quot;300px&quot; src=&quot;https://qdrant.tech/content/images/matching_engines.png&quot;&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width=&quot;300px&quot; src=&quot;https://qdrant.tech/content/images/anomalies_detection.png&quot;&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Chat Bots &lt;/td&gt; 
    &lt;td&gt; Matching Engines &lt;/td&gt; 
    &lt;td&gt; Anomaly Detection &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;REST&lt;/h3&gt; 
&lt;p&gt;Online OpenAPI 3.0 documentation is available &lt;a href=&quot;https://api.qdrant.tech/&quot;&gt;here&lt;/a&gt;. OpenAPI makes it easy to generate a client for virtually any framework or programming language.&lt;/p&gt; 
&lt;p&gt;You can also download raw OpenAPI &lt;a href=&quot;https://github.com/qdrant/qdrant/raw/master/docs/redoc/master/openapi.json&quot;&gt;definitions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;gRPC&lt;/h3&gt; 
&lt;p&gt;For faster production-tier searches, Qdrant also provides a gRPC interface. You can find gRPC documentation &lt;a href=&quot;https://qdrant.tech/documentation/interfaces/#grpc-interface&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Filtering and Payload&lt;/h3&gt; 
&lt;p&gt;Qdrant can attach any JSON payloads to vectors, allowing for both the storage and filtering of data based on the values in these payloads. Payload supports a wide range of data types and query conditions, including keyword matching, full-text filtering, numerical ranges, geo-locations, and more.&lt;/p&gt; 
&lt;p&gt;Filtering conditions can be combined in various ways, including &lt;code&gt;should&lt;/code&gt;, &lt;code&gt;must&lt;/code&gt;, and &lt;code&gt;must_not&lt;/code&gt; clauses, ensuring that you can implement any desired business logic on top of similarity matching.&lt;/p&gt; 
&lt;h3&gt;Hybrid Search with Sparse Vectors&lt;/h3&gt; 
&lt;p&gt;To address the limitations of vector embeddings when searching for specific keywords, Qdrant introduces support for sparse vectors in addition to the regular dense ones.&lt;/p&gt; 
&lt;p&gt;Sparse vectors can be viewed as an generalization of BM25 or TF-IDF ranking. They enable you to harness the capabilities of transformer-based neural networks to weigh individual tokens effectively.&lt;/p&gt; 
&lt;h3&gt;Vector Quantization and On-Disk Storage&lt;/h3&gt; 
&lt;p&gt;Qdrant provides multiple options to make vector search cheaper and more resource-efficient. Built-in vector quantization reduces RAM usage by up to 97% and dynamically manages the trade-off between search speed and precision.&lt;/p&gt; 
&lt;h3&gt;Distributed Deployment&lt;/h3&gt; 
&lt;p&gt;Qdrant offers comprehensive horizontal scaling support through two key mechanisms:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Size expansion via sharding and throughput enhancement via replication&lt;/li&gt; 
 &lt;li&gt;Zero-downtime rolling updates and seamless dynamic scaling of the collections&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Highlighted Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Query Planning and Payload Indexes&lt;/strong&gt; - leverages stored payload information to optimize query execution strategy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SIMD Hardware Acceleration&lt;/strong&gt; - utilizes modern CPU x86-x64 and Neon architectures to deliver better performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Async I/O&lt;/strong&gt; - uses &lt;code&gt;io_uring&lt;/code&gt; to maximize disk throughput utilization even on a network-attached storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Write-Ahead Logging&lt;/strong&gt; - ensures data persistence with update confirmation, even during power outages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Integrations&lt;/h1&gt; 
&lt;p&gt;Examples and/or documentation of Qdrant integrations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.cohere.com/docs/qdrant-and-cohere&quot;&gt;Cohere&lt;/a&gt; (&lt;a href=&quot;https://qdrant.tech/articles/qa-with-cohere-and-qdrant/&quot;&gt;blogpost on building a QA app with Cohere and Qdrant&lt;/a&gt;) - Use Cohere embeddings with Qdrant&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.docarray.org/user_guide/storing/index_qdrant/&quot;&gt;DocArray&lt;/a&gt; - Use Qdrant as a document store in DocArray&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://haystack.deepset.ai/integrations/qdrant-document-store&quot;&gt;Haystack&lt;/a&gt; - Use Qdrant as a document store with Haystack (&lt;a href=&quot;https://haystack.deepset.ai/blog/qdrant-integration&quot;&gt;blogpost&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://python.langchain.com/docs/integrations/providers/qdrant/&quot;&gt;LangChain&lt;/a&gt; (&lt;a href=&quot;https://qdrant.tech/articles/langchain-integration/&quot;&gt;blogpost&lt;/a&gt;) - Use Qdrant as a memory backend for LangChain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gpt-index.readthedocs.io/en/latest/examples/vector_stores/QdrantIndexDemo.html&quot;&gt;LlamaIndex&lt;/a&gt; - Use Qdrant as a Vector Store with LlamaIndex.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openai/chatgpt-retrieval-plugin/raw/main/docs/providers/qdrant/setup.md&quot;&gt;OpenAI - ChatGPT retrieval plugin&lt;/a&gt; - Use Qdrant as a memory backend for ChatGPT&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://devblogs.microsoft.com/semantic-kernel/the-power-of-persistent-memory-with-semantic-kernel-and-qdrant-vector-database/&quot;&gt;Microsoft Semantic Kernel&lt;/a&gt; - Use Qdrant as persistent memory with Semantic Kernel&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Have questions? Join our &lt;a href=&quot;https://qdrant.to/discord&quot;&gt;Discord channel&lt;/a&gt; or mention &lt;a href=&quot;https://qdrant.to/twitter&quot;&gt;@qdrant_engine on Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Want to stay in touch with latest releases? Subscribe to our &lt;a href=&quot;https://qdrant.tech/subscribe/&quot;&gt;Newsletters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Looking for a managed cloud? Check &lt;a href=&quot;https://qdrant.tech/pricing/&quot;&gt;pricing&lt;/a&gt;, need something personalised? We&#39;re at &lt;a href=&quot;mailto:info@qdrant.tech&quot;&gt;info@qdrant.tech&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Qdrant is licensed under the Apache License, Version 2.0. View a copy of the &lt;a href=&quot;https://github.com/qdrant/qdrant/raw/master/LICENSE&quot;&gt;License file&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
