<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Swift Daily Trending</title>
    <description>Daily Trending of Swift in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:38:05 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>johnbean393/Sidekick</title>
      <link>https://github.com/johnbean393/Sidekick</link>
      <description>&lt;p&gt;A native macOS app that allows users to chat with a local LLM that can respond with information from files, folders and websites on your Mac without installing any other software. Powered by llama.cpp.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/appIcon.png&quot; width=&quot;200&quot; height=&quot;200&quot;&gt; &lt;br&gt; Sidekick &lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Downloads&quot; src=&quot;https://img.shields.io/github/downloads/johnbean393/Sidekick/total?label=Downloads&quot; height=&quot;22.5&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/johnbean393/Sidekick?label=License&quot; height=&quot;22.5&quot;&gt; &lt;/p&gt; 
&lt;p&gt;Chat with a local LLM that can respond with information from your files, folders and websites on your Mac without installing any other software. All conversations happen offline, and your data stays secure. Sidekick is a &lt;strong&gt;local first&lt;/strong&gt; application –– with a built in inference engine for local models, while accomodating OpenAI compatible APIs for additional model options.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/demoScreenshot.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Example Use&lt;/h2&gt; 
&lt;p&gt;Let’s say you&#39;re collecting evidence for a History paper about interactions between Aztecs and Spanish troops, and you’re looking for text about whether the Aztecs used captured Spanish weapons.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/demoHistoryScreenshot.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Here, you can ask Sidekick, “Did the Aztecs use captured Spanish weapons?”, and it responds with direct quotes with page numbers and a brief analysis.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/demoHistorySource.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To verify Sidekick’s answer, just click on the references displayed below Sidekick’s answer, and the academic paper referenced by Sidekick immediately opens in your viewer.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Resource Use&lt;/h3&gt; 
&lt;p&gt;Sidekick accesses files, folders, and websites from your experts, which can be individually configured to contain resources related to specific areas of interest. Activating an expert allows Sidekick to fetch and reference materials as needed.&lt;/p&gt; 
&lt;p&gt;Because Sidekick uses RAG (Retrieval Augmented Generation), you can theoretically put unlimited resources into each expert, and Sidekick will still find information relevant to your request to aid its analysis.&lt;/p&gt; 
&lt;p&gt;For example, a student might create the experts &lt;code&gt;English Literature&lt;/code&gt;, &lt;code&gt;Mathematics&lt;/code&gt;, &lt;code&gt;Geography&lt;/code&gt;, &lt;code&gt;Computer Science&lt;/code&gt; and &lt;code&gt;Physics&lt;/code&gt;. In the image below, he has activated the expert &lt;code&gt;Computer Science&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/demoExpertUse.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Users can also give Sidekick access to files just by dragging them into the input field.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/demoTemporaryResource.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Sidekick can even respond with the latest information using &lt;strong&gt;web search&lt;/strong&gt;, speeding up research.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/webSearch.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Bring Your Own API Key&lt;/h3&gt; 
&lt;p&gt;In addition to its core local-first capabilities, Sidekick now offers an option to bring your own key for OpenAI compatible APIs. This allows you to tap into additional remote models while still preserving a primarily local-first workflow.&lt;/p&gt; 
&lt;h3&gt;Reasoning Model Support&lt;/h3&gt; 
&lt;p&gt;Sidekick supports a variety of reasoning models, including Alibaba Cloud&#39;s QwQ-32B and DeepSeek&#39;s DeepSeek-R1.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/reasoningModelSupport.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Code Interpreter&lt;/h3&gt; 
&lt;p&gt;Sidekick uses a code interpreter to boost the mathematical and logical capabilities of models.&lt;/p&gt; 
&lt;p&gt;Since small models are much better at writing code than doing math, having it write the code, execute it, and present the results dramatically increases trustworthiness of answers.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/codeInterpreter.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Image Generation&lt;/h3&gt; 
&lt;p&gt;Sidekick can generate images from text, allowing you to create visual aids for your work.&lt;/p&gt; 
&lt;p&gt;There are no buttons, no switches to flick, no &lt;code&gt;Image Generation&lt;/code&gt; mode. Instead, a built-in CoreML model &lt;strong&gt;automatically identifies&lt;/strong&gt; image generation prompts, and generates an image when necessary.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/imageGeneration.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Image generation is available on macOS 15.2 or above, and requires Apple Intelligence.&lt;/p&gt; 
&lt;h3&gt;Inline Writing Assistant&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;Command + Control + I&lt;/code&gt; to access Sidekick&#39;s inline writing assistant. For example, use the &lt;code&gt;Answer Question&lt;/code&gt; command to do your homework without leaving Microsoft Word!&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/inlineWritingAssistant.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Advanced Markdown Rendering&lt;/h3&gt; 
&lt;p&gt;Markdown is rendered beautifully in Sidekick.&lt;/p&gt; 
&lt;h4&gt;LaTeX&lt;/h4&gt; 
&lt;p&gt;Sidekick offers native LaTeX rendering for mathematical equations.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/latexRendering1.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/latexRendering2.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Data Visualization&lt;/h4&gt; 
&lt;p&gt;Visualizations are automatically generated for tables when appropriate, with a variety of charts available, including bar charts, line charts and pie charts.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/dataVisualization1.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/dataVisualization2.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Charts can be dragged and dropped into third party apps.&lt;/p&gt; 
&lt;h4&gt;Code&lt;/h4&gt; 
&lt;p&gt;Code is beautifully rendered with syntax highlighting, and can be exported or copied at the click of a button.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/codeExport.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Toolbox&lt;/h3&gt; 
&lt;p&gt;Use &lt;strong&gt;Tools&lt;/strong&gt; in Sidekick to supercharge your workflow.&lt;/p&gt; 
&lt;h4&gt;Detector&lt;/h4&gt; 
&lt;p&gt;Use Detector to evaluate the AI percentage of text, and use provided suggestions to rewrite AI content.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/detectorEvaluationResults.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Diagrammer&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/diagrammerPrompt.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Diagrammer allows you to swiftly generate intricate relational diagrams all from a prompt. Take advantage of the integrated preview and editor for quick edits.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/diagrammerPreviewEditor.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Slide Studio&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/slideStudioPrompt.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Instead of making a PowerPoint, just write a prompt. Use AI to craft 10-minute presentations in just 5 minutes.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/slideStudioPreviewEditor.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Export to common formats like PDF and PowerPoint.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/slideStudioExport.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Fast Generation&lt;/h3&gt; 
&lt;p&gt;Sidekick uses &lt;code&gt;llama.cpp&lt;/code&gt; as its inference backend, which is optimized to deliver lightning fast generation speeds on Apple Silicon. It also supports speculative decoding, which can further improve the generation speed.&lt;/p&gt; 
&lt;p&gt;Optionally, you can offload generation to speed up processing while extending the battery life of your MacBook.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/speculativeDecodingSupport.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnbean393/Sidekick/refs/heads/main/README%20Images/serverUse.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Mac with Apple Silicon&lt;/li&gt; 
 &lt;li&gt;RAM ≥ 8 GB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download the disk image from &lt;a href=&quot;https://github.com/johnbean393/Sidekick/releases/&quot;&gt;Releases&lt;/a&gt;, and open it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;The main goal of Sidekick is to make open, local, private models accessible to more people, and allow a local model to gain context from select files, folders, and websites.&lt;/p&gt; 
&lt;p&gt;Sidekick is a local-first native LLM application for macOS. Download it and ask your LLM a question without doing any configuration. Give the LLM access to your folders, files and websites with just 1 click, allowing it to reply with context.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;No config. Usable by people who haven&#39;t heard of models, prompts, or LLMs.&lt;/li&gt; 
 &lt;li&gt;Performance and simplicity over developer experience or features. Notes not Word, Swift not Electron.&lt;/li&gt; 
 &lt;li&gt;Local first. Core functionality works without an internet connection, but you have the option to leverage online models.&lt;/li&gt; 
 &lt;li&gt;No conversation tracking. Talk about whatever you want with Sidekick, just like Notes.&lt;/li&gt; 
 &lt;li&gt;Open source. What&#39;s the point of running local AI if you can&#39;t audit that it&#39;s actually running locally?&lt;/li&gt; 
 &lt;li&gt;Context aware. Understands and accesses your files, folders, and even content on the web.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Developer Setup&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Mac with Apple Silicon&lt;/li&gt; 
 &lt;li&gt;RAM ≥ 8 GB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developer Setup Instructions&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone this repository.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;security find-identity -p codesigning -v&lt;/code&gt; to find your signing identity. 
  &lt;ul&gt; 
   &lt;li&gt;You&#39;ll see something like&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt; 1) &amp;lt;SIGNING IDENTITY&amp;gt; &quot;Apple Development: Michael DiGovanni ( XXXXXXXXXX)&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;./setup.sh &amp;lt;TEAM_NAME&amp;gt; &amp;lt;SIGNING IDENTITY FROM STEP 2&amp;gt;&lt;/code&gt; to change the team in the Xcode project and download and sign the &lt;code&gt;marp&lt;/code&gt; binary. 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;code&gt;marp&lt;/code&gt; binary is required for building and must be signed to create presentations.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Open and run in Xcode.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are very welcome. Let&#39;s make Sidekick simple and powerful.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Contact this repository&#39;s owner at &lt;a href=&quot;mailto:johnbean393@gmail.com&quot;&gt;johnbean393@gmail.com&lt;/a&gt;, or file an issue.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;This project would not be possible without the hard work of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;psugihara and contributors who built &lt;a href=&quot;https://github.com/psugihara/FreeChat&quot;&gt;FreeChat&lt;/a&gt;, which this project took heavy inspiration from&lt;/li&gt; 
 &lt;li&gt;Georgi Gerganov for &lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;llama.cpp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Alibaba for training Qwen 2.5&lt;/li&gt; 
 &lt;li&gt;Meta for training Llama 3&lt;/li&gt; 
 &lt;li&gt;Google for training Gemma 3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;a href=&quot;https://star-history.com/#johnbean393/Sidekick&amp;amp;Date&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=johnbean393/Sidekick&amp;amp;type=Date&amp;amp;theme=dark&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=johnbean393/Sidekick&amp;amp;type=Date&quot;&gt; 
  &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=johnbean393/Sidekick&amp;amp;type=Date&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>grishka/NearDrop</title>
      <link>https://github.com/grishka/NearDrop</link>
      <description>&lt;p&gt;An unofficial Google Nearby Share/Quick Share app for macOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;NearDrop&lt;/strong&gt; is a partial implementation of &lt;a href=&quot;https://blog.google/products/android/nearby-share/&quot;&gt;Google&#39;s Nearby Share&lt;/a&gt;/Quick Share for macOS.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/grishka/NearDrop/master/PROTOCOL.md&quot;&gt;Protocol documentation&lt;/a&gt; is available separately.&lt;/p&gt; 
&lt;p&gt;The app lives in your menu bar and saves files to your downloads folder. It&#39;s that simple, really.&lt;/p&gt; 
&lt;h2&gt;Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Wi-Fi LAN only&lt;/strong&gt;. Your Android device and your Mac need to be on the same network for this app to work. Google&#39;s implementation supports multiple mediums, including Wi-Fi Direct, Wi-Fi hotspot, Bluetooth, some kind of 5G peer-to-peer connection, and even a WebRTC-based protocol that goes over the internet through Google servers. Wi-Fi direct isn&#39;t supported on macOS (Apple has their own, incompatible, AWDL thing, used in AirDrop). Bluetooth needs further reverse engineering.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Visible to everyone on your network at all times&lt;/strong&gt; while the app is running. Limited visibility (contacts etc) requires talking to Google servers, and becoming temporarily visible requires listening for whatever triggers the &quot;device nearby is sharing&quot; notification.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Download the latest build from the releases section, unzip, move to your applications folder. When running for the first time, right-click the app and select &quot;Open&quot;, then confirm running an app from unidentified developer.&lt;/p&gt; 
&lt;p&gt;If you want the app to start on boot, &lt;a href=&quot;https://support.apple.com/guide/mac-help/open-items-automatically-when-you-log-in-mh15189/mac&quot;&gt;follow these steps to add NearDrop as a login item.&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Installation with Homebrew&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;brew install --no-quarantine grishka/grishka/neardrop
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Pull requests that change the readme will not be accepted.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h4&gt;The app would not open because &quot;Apple cannot check it for malicious software&quot;, you gotta fix your shit&lt;/h4&gt; 
&lt;p&gt;Right-click the app in Finder and select &quot;Open&quot;. Or, open System Settings -&amp;gt; Privacy and security, scroll down and allow the app to run.&lt;/p&gt; 
&lt;h4&gt;My Android device doesn&#39;t see my Mac&lt;/h4&gt; 
&lt;p&gt;Make sure both devices are on the same Wi-Fi network. Local network communication may not work on some public networks — for example, in coffee shops or hotels. If you&#39;re on your own network, check your router settings to make sure it&#39;s not blocking local devices from talking to each other.&lt;/p&gt; 
&lt;h4&gt;How do I send files?&lt;/h4&gt; 
&lt;p&gt;Right-click a file in Finder, select Share, then select NearDrop.&lt;/p&gt; 
&lt;h4&gt;How do I send links?&lt;/h4&gt; 
&lt;p&gt;From the menu bar: File -&amp;gt; Share -&amp;gt; NearDrop. Safari also has a share button on the toolbar.&lt;/p&gt; 
&lt;h4&gt;My Mac doesn&#39;t see my Android device&lt;/h4&gt; 
&lt;p&gt;Unfortunately, Android listens for specific BLE (Bluetooth Low Energy) broadcasts to automatically become visible, and macOS doesn&#39;t allow apps to send them.&lt;/p&gt; 
&lt;h5&gt;Samsung devices&lt;/h5&gt; 
&lt;p&gt;After the Quick Share update, &lt;a href=&quot;https://github.com/grishka/NearDrop/issues/152&quot;&gt;there&#39;s currently no known workaround for this problem&lt;/a&gt;. Subscribe to that issue to get notified if/when one becomes available.&lt;/p&gt; 
&lt;h5&gt;Non-Samsung devices&lt;/h5&gt; 
&lt;p&gt;As a workaround, you have to open the &quot;Google Files&quot; and tap &quot;Receive&quot; on the &quot;Nearby Share&quot; tab.&lt;/p&gt; 
&lt;p&gt;To make it more easily accessible and/or if you don&#39;t want to install Google Files, you can use an app like &lt;a href=&quot;https://forum.xda-developers.com/t/how-to-manually-create-a-homescreen-shortcut-to-a-known-unique-android-activity.4336833/&quot;&gt;one of these&lt;/a&gt; to create a shortcut to launch one of these activity intents:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Option 1: 
  &lt;ul&gt; 
   &lt;li&gt;Action: &lt;code&gt;com.google.android.gms.RECEIVE_NEARBY&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Mime type: &lt;code&gt;*/*&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Option 2: 
  &lt;ul&gt; 
   &lt;li&gt;Component name: &lt;code&gt;com.google.android.gms/.nearby.sharing.ReceiveSurfaceActivity&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Can the menu bar icon be removed?&lt;/h4&gt; 
&lt;p&gt;Yes. Drag the icon off the menu bar while holding cmd. To bring it back, launch the app a second time, while it&#39;s already running.&lt;/p&gt; 
&lt;h4&gt;I&#39;m sending something to my Mac, the Android device displays a PIN code, but nothing happens on the Mac&lt;/h4&gt; 
&lt;p&gt;Make sure you have &quot;do not disturb&quot; off. The notification may also sometimes (rarely) end up in the notification center without being shown as a popup first — I&#39;m not sure why this happens.&lt;/p&gt; 
&lt;h4&gt;Why is the app not notarized?&lt;/h4&gt; 
&lt;p&gt;Because I don&#39;t want to pay Apple $99 a year for the privilege of developing macOS apps and I oppose their idea of security. The slightly less scary security warning isn&#39;t worth $99/year IMO.&lt;/p&gt; 
&lt;h4&gt;Why is this not on the app store?&lt;/h4&gt; 
&lt;p&gt;Because I don&#39;t want to pay Apple $99 a year for the privilege of developing macOS apps. I also don&#39;t want to have to go through the review process.&lt;/p&gt; 
&lt;h4&gt;Why not the other way around, i.e. AirDrop on Android?&lt;/h4&gt; 
&lt;p&gt;While I am an Android developer, and I have looked into this, this is nigh-impossible. AirDrop uses &lt;a href=&quot;https://stackoverflow.com/questions/19587701/what-is-awdl-apple-wireless-direct-link-and-how-does-it-work&quot;&gt;AWDL&lt;/a&gt;, Apple&#39;s own proprietary take on peer-to-peer Wi-Fi. This works on top of 802.11 itself, the low-level Wi-Fi protocol, and thus can not be implemented without messing around with the Wi-Fi adapter drivers and raw packets and all that. It might be possible on Android, but it would at the very least require root and possibly a custom kernel. There is &lt;a href=&quot;https://owlink.org/code/&quot;&gt;an open-source implementation of AWDL and AirDrop for Linux&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>airbnb/lottie-ios</title>
      <link>https://github.com/airbnb/lottie-ios</link>
      <description>&lt;p&gt;An iOS library to natively render After Effects vector animations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lottie for iOS&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/lottie-ios.svg?style=flat&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage Compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&quot; alt=&quot;SwiftPM&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/lottie-ios.svg?style=flat&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;Platform&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Versions&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;View documentation, FAQ, help, examples, and more at &lt;a href=&quot;https://airbnb.io/lottie/&quot;&gt;airbnb.io/lottie&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Lottie is a cross-platform library for iOS, macOS, tvOS, visionOS, &lt;a href=&quot;https://github.com/airbnb/lottie-android&quot;&gt;Android&lt;/a&gt;, and &lt;a href=&quot;https://github.com/airbnb/lottie-web&quot;&gt;Web&lt;/a&gt; that natively renders vector-based animations and art in realtime with minimal code.&lt;/p&gt; 
&lt;p&gt;Lottie loads and renders animations and vectors exported in the bodymovin JSON format. Bodymovin JSON can be created and exported from After Effects with &lt;a href=&quot;https://github.com/bodymovin/bodymovin&quot;&gt;bodymovin&lt;/a&gt;, Sketch with &lt;a href=&quot;https://github.com/buba447/Lottie-Sketch-Export&quot;&gt;Lottie Sketch Export&lt;/a&gt;, and from &lt;a href=&quot;https://www.haikuanimator.com&quot;&gt;Haiku&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating them by hand. Since the animations are backed by JSON, they are extremely small in size but can be large in complexity! Animations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed. Lottie can play or loop just a portion of the animation as well, the possibilities are endless! Animations can even be &lt;em&gt;&lt;strong&gt;changed at runtime&lt;/strong&gt;&lt;/em&gt; in various ways! Change the color, position, or any keyframable value!&lt;/p&gt; 
&lt;p&gt;Here is just a small sampling of the power of Lottie&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples1.gif&quot; alt=&quot;Example1&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples2.gif&quot; alt=&quot;Example2&quot;&gt;&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Community%202_3.gif&quot;&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples3.gif&quot; alt=&quot;Example3&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples4.gif&quot; alt=&quot;Abcs&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installing Lottie&lt;/h2&gt; 
&lt;p&gt;Lottie supports &lt;a href=&quot;https://www.swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; (Both dynamic and static).&lt;/p&gt; 
&lt;h3&gt;Github Repo&lt;/h3&gt; 
&lt;p&gt;You can pull the &lt;a href=&quot;https://github.com/airbnb/lottie-ios/&quot;&gt;Lottie Github Repo&lt;/a&gt; and include the &lt;code&gt;Lottie.xcodeproj&lt;/code&gt; to build a dynamic or static library.&lt;/p&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;To install Lottie using &lt;a href=&quot;https://github.com/swiftlang/swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt; you can follow the &lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&quot;&gt;tutorial published by Apple&lt;/a&gt; using the URL for the Lottie repo with the current version:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;In Xcode, select “File” → “Add Packages...”&lt;/li&gt; 
 &lt;li&gt;Enter &lt;a href=&quot;https://github.com/airbnb/lottie-spm.git&quot;&gt;https://github.com/airbnb/lottie-spm.git&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;or you can add the following dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/airbnb/lottie-spm.git&quot;, from: &quot;4.5.0&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Swift Package Manager we recommend using the &lt;a href=&quot;https://github.com/airbnb/lottie-spm&quot;&gt;lottie-spm&lt;/a&gt; repo instead of the main lottie-ios repo. The main git repository for &lt;a href=&quot;https://github.com/airbnb/lottie-ios&quot;&gt;lottie-ios&lt;/a&gt; is somewhat large (300+ MB), and Swift Package Manager always downloads the full repository with all git history. The &lt;a href=&quot;https://github.com/airbnb/lottie-spm&quot;&gt;lottie-spm&lt;/a&gt; repo is much smaller (less than 500kb), so can be downloaded much more quickly.&lt;/p&gt; 
&lt;p&gt;Instead of downloading the full git history of Lottie and building it from source, the lottie-spm repo just contains a pointer to the precompiled XCFramework included in the &lt;a href=&quot;https://github.com/airbnb/lottie-ios/releases/latest&quot;&gt;latest lottie-ios release&lt;/a&gt; (typically ~8MB). If you prefer to include Lottie source directly your project, you can directly depend on the main lottie-ios repo by referencing &lt;code&gt;https://github.com/airbnb/lottie-ios.git&lt;/code&gt; instead.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;Add the pod to your Podfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;lottie-ios&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After installing the cocoapod into your project import Lottie with&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Lottie
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;Add Lottie to your Cartfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;airbnb/lottie-ios&quot; &quot;master&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In your application targets “General” tab under the “Linked Frameworks and Libraries” section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that &lt;code&gt;carthage update&lt;/code&gt; produced.&lt;/p&gt; 
&lt;h2&gt;Swift Version Support&lt;/h2&gt; 
&lt;p&gt;Lottie supports Swift / Xcode versions back to the minimum version that is permitted by Apple for submissions to the App Store. You can see the most up-to-date information for which Swift versions Lottie supports on &lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;Swift Package Index&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Versions&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;Lottie does not collect any data. We provide this notice to help you fill out &lt;a href=&quot;https://developer.apple.com/app-store/app-privacy-details/&quot;&gt;App Privacy Details&lt;/a&gt;. We additionally provide a &lt;a href=&quot;https://github.com/airbnb/lottie-ios/raw/master/Sources/PrivacyInfo.xcprivacy&quot;&gt;privacy manifest&lt;/a&gt; which can be included in your app.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;We distribute XCFramework bundles for each release on &lt;a href=&quot;https://github.com/airbnb/lottie-ios/releases/latest&quot;&gt;GitHub&lt;/a&gt;. In Lottie 4.4.0 and later, these XCFramework bundles include a &lt;a href=&quot;https://developer.apple.com/documentation/xcode/verifying-the-origin-of-your-xcframeworks&quot;&gt;code signature&lt;/a&gt;. These bundles are self-signed under the name &quot;Lottie iOS&quot; and have the following fingerprint:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;89 2F 1B 43 04 7B 50 53 8F 2F 46 EA D9 29 00 DD 3D 48 11 F358 21 78 C0 61 A5 FB 20 F1 11 CB 26
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In Xcode you can verify this by selecting &lt;code&gt;Lottie.xcframework&lt;/code&gt; and confirming that it shows the following information:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/code_signature.png&quot; alt=&quot;Code Signature in Xcode&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We always appreciate contributions from the community. To make changes to the project, you can clone the repo and open &lt;code&gt;Lottie.xcworkspace&lt;/code&gt;. This workspace includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the Lottie framework (for iOS, macOS, and tvOS)&lt;/li&gt; 
 &lt;li&gt;unit tests and snapshot tests (for iOS, must be run on an iPhone 8 simulator)&lt;/li&gt; 
 &lt;li&gt;an Example iOS app that lets you browse and test over 100 sample animations included in the repo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All pull requests with new features or bug fixes that affect how animations render should include snapshot test cases that validate the included changes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To add a new sample animation to the snapshot testing suite, you can add the &lt;code&gt;.json&lt;/code&gt; file to &lt;code&gt;Tests/Samples&lt;/code&gt;. Re-run the snapshot tests to generate the new snapshot image files.&lt;/li&gt; 
 &lt;li&gt;To update existing snapshots after making changes, you can set &lt;code&gt;isRecording = true&lt;/code&gt; in &lt;code&gt;SnapshotTests.swift&lt;/code&gt; &lt;code&gt;setUp()&lt;/code&gt; method and then re-run the snapshot tests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The project also includes several helpful commands defined in our &lt;a href=&quot;https://github.com/airbnb/lottie-ios/raw/master/Rakefile&quot;&gt;Rakefile&lt;/a&gt;. To use these, you need to install &lt;a href=&quot;https://bundler.io/&quot;&gt;Bundler&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo gem install bundle
$ bundle install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, all Swift code should be formatted according to the &lt;a href=&quot;https://github.com/airbnb/swift&quot;&gt;Airbnb Swift Style Guide&lt;/a&gt;. After making changes, you can reformat the code automatically using &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt; and &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; by running &lt;code&gt;bundle exec rake format:swift&lt;/code&gt;. Other helpful commands include:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bundle exec rake build:all # builds all targets for all platforms
$ bundle exec rake build&lt;span&gt;📦&lt;/span&gt;iOS # builds the Lottie package for iOS
$ bundle exec rake test:package # tests the Lottie package
$ bundle exec rake format:swift # reformat Swift code based on the Airbnb Swift Style Guide
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>mapbox/mapbox-maps-ios</title>
      <link>https://github.com/mapbox/mapbox-maps-ios</link>
      <description>&lt;p&gt;Interactive, thoroughly customizable maps for iOS powered by vector tiles and Metal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mapbox-maps-ios&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://cla-assistant.io/mapbox/mapbox-maps-ios&quot;&gt;&lt;img src=&quot;https://cla-assistant.io/readme/badge/mapbox/mapbox-maps-ios&quot; alt=&quot;CLA assistant&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Mapbox Maps SDK for iOS is a public library for displaying interactive, thoroughly customizable maps in native iOS. It takes map styles that conform to the &lt;a href=&quot;https://docs.mapbox.com/mapbox-gl-js/style-spec/&quot;&gt;Mapbox Style Specification&lt;/a&gt;, applies them to vector tiles that conform to the &lt;a href=&quot;https://github.com/mapbox/vector-tile-spec&quot;&gt;Mapbox Vector Tile Specification&lt;/a&gt;, and renders them using Metal.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;This README is intended for developers who are interested in contributing to the Mapbox Maps SDK for iOS. Please visit &lt;a href=&quot;https://docs.mapbox.com/ios/maps/guides/&quot;&gt;https://docs.mapbox.com/ios/maps/guides/&lt;/a&gt; for general information and instructions on using the Maps SDK in your iOS application.&lt;/p&gt; 
&lt;h2&gt;Examples App&lt;/h2&gt; 
&lt;p&gt;The Examples app shows how to use many of the features in the Maps SDK. See the &lt;a href=&quot;https://github.com/mapbox/mapbox-maps-ios/tree/main/Examples.xcodeproj&quot;&gt;Examples project&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;p&gt;If you are interested in contributing to the Maps SDK, please see the &lt;a href=&quot;https://github.com/mapbox/mapbox-maps-ios/tree/main/DEVELOPING.md&quot;&gt;DEVELOPING.md&lt;/a&gt; file for information on setting up, running and building the SDK.&lt;/p&gt; 
&lt;h2&gt;Reporting issues / Need help?&lt;/h2&gt; 
&lt;h4&gt;Report a bug &lt;span&gt;🪲&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;Please use our &lt;a href=&quot;https://github.com/mapbox/mapbox-maps-ios/issues/new?labels=bug%20%3Abeetle%3A&amp;amp;template=bug.md&quot;&gt;bug template&lt;/a&gt; to report any issues.&lt;/p&gt; 
&lt;h4&gt;Request a new feature or enhancement &lt;span&gt;🍏&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;Please use our &lt;a href=&quot;https://github.com/mapbox/mapbox-maps-ios/issues/new?labels=feature%20%3Agreen_apple%3A&amp;amp;template=feature.md&quot;&gt;feature template&lt;/a&gt; to request new features or enhancements.&lt;/p&gt; 
&lt;h4&gt;Other questions&lt;/h4&gt; 
&lt;p&gt;If you have any questions about how to use the SDK or if you need help with specific features, you can reach out to our support team &lt;a href=&quot;https://docs.mapbox.com/help/&quot;&gt;via our website&lt;/a&gt; or connect with our developer community by joining our &lt;a href=&quot;https://discord.gg/UshjQYyDFw&quot;&gt;Discord channel&lt;/a&gt;. We kindly ask you to avoid using the issue tracker in this repository for questions and instead use our support channels.&lt;/p&gt; 
&lt;h2&gt;Historical Note&lt;/h2&gt; 
&lt;p&gt;This repository is a continuation of the Mapbox Maps SDK for iOS available at &lt;a href=&quot;https://github.com/mapbox/mapbox-gl-native-ios&quot;&gt;mapbox/mapbox-gl-native-ios&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mozilla-mobile/firefox-ios</title>
      <link>https://github.com/mozilla-mobile/firefox-ios</link>
      <description>&lt;p&gt;Firefox for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Firefox for iOS and Focus iOS&lt;/h1&gt; 
&lt;p&gt;Download &lt;a href=&quot;https://apps.apple.com/app/firefox-web-browser/id989804926&quot;&gt;Firefox iOS&lt;/a&gt; and &lt;a href=&quot;https://itunes.apple.com/app/id1055677337&quot;&gt;Focus iOS&lt;/a&gt; on the App Store.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th style=&quot;border: none;&quot;&gt;&lt;strong&gt;Firefox iOS&lt;/strong&gt;&lt;/th&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Xcode-16.2-blue?logo=Xcode&amp;amp;logoColor=white&quot; alt=&quot;Firefox-iOS&quot;&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-5.6-red?logo=Swift&amp;amp;logoColor=white&quot; alt=&quot;Firefox-iOS&quot;&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/iOS-15.0+-green?logo=apple&amp;amp;logoColor=white&quot; alt=&quot;Firefox-iOS&quot;&gt;&lt;/td&gt; 
   &lt;th rowspan=&quot;2&quot; style=&quot;border: none;&quot;&gt; &lt;a href=&quot;https://codebeat.co/projects/github-com-mozilla-firefox-ios&quot;&gt; &lt;img src=&quot;https://codebeat.co/badges/67e58b6d-bc89-4f22-ba8f-7668a9c15c5a&quot; alt=&quot;&quot;&gt; &lt;/a&gt; &lt;/th&gt; 
   &lt;th rowspan=&quot;2&quot; style=&quot;border: none;&quot;&gt; &lt;a href=&quot;https://codecov.io/gh/mozilla-mobile/firefox-ios/branch/main&quot;&gt; &lt;img src=&quot;https://codecov.io/gh/mozilla-mobile/firefox-ios/branch/main/graph/badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt; &lt;/a&gt; &lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th style=&quot;border: none;&quot;&gt;&lt;strong&gt;Focus iOS&lt;/strong&gt;&lt;/th&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Xcode-16.2-blue?logo=Xcode&amp;amp;logoColor=white&quot; alt=&quot;Focus-iOS&quot;&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-5.6-red?logo=Swift&amp;amp;logoColor=white&quot; alt=&quot;Focus-iOS&quot;&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/iOS-15.0+-green?logo=apple&amp;amp;logoColor=white&quot; alt=&quot;Focus-iOS&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Building the code&lt;/h2&gt; 
&lt;p&gt;This is a mono repository containing both Firefox and Focus iOS projects. For their related build instructions, please follow the project readme.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/raw/main/firefox-ios/README.md&quot;&gt;Firefox for iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/raw/main/focus-ios/README.md&quot;&gt;Focus iOS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting involved&lt;/h2&gt; 
&lt;p&gt;We encourage you to participate in those open source projects. We love Pull Requests, Issue Reports, Feature Requests or any kind of positive contribution. Please read the &lt;a href=&quot;https://www.mozilla.org/en-US/about/governance/policies/participation/&quot;&gt;Mozilla Community Participation Guidelines&lt;/a&gt; and our &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/raw/main/CONTRIBUTING.md&quot;&gt;Contributing guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/issues/new/choose&quot;&gt;file a new issue&lt;/a&gt; or research &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/issues&quot;&gt;existing bugs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If more information is required or you have any questions then we suggest reaching out to us via:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Chat on Element channel &lt;a href=&quot;https://chat.mozilla.org/#/room/%23fx-ios:mozilla.org&quot;&gt;#fx-ios&lt;/a&gt; and &lt;a href=&quot;https://chat.mozilla.org/#/room/%23focus-ios:mozilla.org&quot;&gt;#focus-ios&lt;/a&gt; for general discussion, or write DMs to specific teammates for questions.&lt;/li&gt; 
 &lt;li&gt;Open a &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/discussions&quot;&gt;Github discussion&lt;/a&gt; which can be used for general questions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want to contribute on the codebase but don&#39;t know where to start? Here is a list of &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/labels/Contributor%20OK&quot;&gt;issues that are contributor friendly&lt;/a&gt;, but make sure to read the &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/raw/main/CONTRIBUTING.md&quot;&gt;Contributing guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at https://mozilla.org/MPL/2.0/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>pointfreeco/swift-composable-architecture</title>
      <link>https://github.com/pointfreeco/swift-composable-architecture</link>
      <description>&lt;p&gt;A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Composable Architecture&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/pointfreeco/swift-composable-architecture/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.pointfree.co/slack-invite&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&amp;amp;logo=slack&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, iPadOS, visionOS, tvOS, and watchOS).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#what-is-the-composable-architecture&quot;&gt;What is the Composable Architecture?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#learn-more&quot;&gt;Learn more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#basic-usage&quot;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is the Composable Architecture?&lt;/h2&gt; 
&lt;p&gt;This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt; &lt;br&gt; How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt; &lt;br&gt; How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt; &lt;br&gt; How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;br&gt; How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ergonomics&lt;/strong&gt; &lt;br&gt; How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was designed over the course of many episodes on &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and the Swift language, hosted by &lt;a href=&quot;https://twitter.com/mbrandonw&quot;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/stephencelis&quot;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can watch all of the episodes &lt;a href=&quot;https://www.pointfree.co/collections/composable-architecture&quot;&gt;here&lt;/a&gt;, as well as a dedicated, &lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt;multipart tour&lt;/a&gt; of the architecture from scratch.&lt;/p&gt; 
&lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt; &lt;img alt=&quot;video poster image&quot; src=&quot;https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg&quot; width=&quot;600&quot;&gt; &lt;/a&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;&lt;img src=&quot;https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png&quot; alt=&quot;Screen shots of example applications&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo comes with &lt;em&gt;lots&lt;/em&gt; of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/CaseStudies&quot;&gt;Case Studies&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Getting started&lt;/li&gt; 
   &lt;li&gt;Effects&lt;/li&gt; 
   &lt;li&gt;Navigation&lt;/li&gt; 
   &lt;li&gt;Higher-order reducers&lt;/li&gt; 
   &lt;li&gt;Reusable components&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager&quot;&gt;Location manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager&quot;&gt;Motion manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Search&quot;&gt;Search&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SpeechRecognition&quot;&gt;Speech Recognition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SyncUps&quot;&gt;SyncUps app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Todos&quot;&gt;Todos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/VoiceMemos&quot;&gt;Voice memos&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Looking for something more substantial? Check out the source code for &lt;a href=&quot;https://github.com/pointfreeco/isowords&quot;&gt;isowords&lt;/a&gt;, an iOS word search game built in SwiftUI and the Composable Architecture.&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For a step-by-step interactive tutorial, be sure to check out &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/meetcomposablearchitecture&quot;&gt;Meet the Composable Architecture&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To build a feature using the Composable Architecture you define some types and values that model your domain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A type that describes the data your feature needs to perform its logic and render its UI.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an &lt;code&gt;Effect&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.&lt;/p&gt; 
&lt;p&gt;As a basic example, consider a UI that shows a number along with &quot;+&quot; and &quot;−&quot; buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and displays it in the view.&lt;/p&gt; 
&lt;p&gt;To implement this feature we create a new type that will house the domain and behavior of the feature, and it will be annotated with the &lt;code&gt;@Reducer&lt;/code&gt; macro:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@Reducer
struct Feature {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In here we need to define a type for the feature&#39;s state, which consists of an integer for the current count, as well as an optional string that represents the fact being presented:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable {
    var count = 0
    var numberFact: String?
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] We&#39;ve applied the &lt;code&gt;@ObservableState&lt;/code&gt; macro to &lt;code&gt;State&lt;/code&gt; in order to take advantage of the observation tools in the library.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We also need to define a type for the feature&#39;s actions. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action that occurs when we receive a response from the fact API request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action {
    case decrementButtonTapped
    case incrementButtonTapped
    case numberFactButtonTapped
    case numberFactResponse(String)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we implement the &lt;code&gt;body&lt;/code&gt; property, which is responsible for composing the actual logic and behavior for the feature. In it we can use the &lt;code&gt;Reduce&lt;/code&gt; reducer to describe how to change the current state to the next state, and what effects need to be executed. Some actions don&#39;t need to execute effects, and they can return &lt;code&gt;.none&lt;/code&gt; to represent that:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action { /* ... */ }

  var body: some Reducer&amp;lt;State, Action&amp;gt; {
    Reduce { state, action in
      switch action {
      case .decrementButtonTapped:
        state.count -= 1
        return .none

      case .incrementButtonTapped:
        state.count += 1
        return .none

      case .numberFactButtonTapped:
        return .run { [count = state.count] send in
          let (data, _) = try await URLSession.shared.data(
            from: URL(string: &quot;http://numbersapi.com/\(count)/trivia&quot;)!
          )
          await send(
            .numberFactResponse(String(decoding: data, as: UTF8.self))
          )
        }

      case let .numberFactResponse(fact):
        state.numberFact = fact
        return .none
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then finally we define the view that displays the feature. It holds onto a &lt;code&gt;StoreOf&amp;lt;Feature&amp;gt;&lt;/code&gt; so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct FeatureView: View {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  var body: some View {
    Form {
      Section {
        Text(&quot;\(store.count)&quot;)
        Button(&quot;Decrement&quot;) { store.send(.decrementButtonTapped) }
        Button(&quot;Increment&quot;) { store.send(.incrementButtonTapped) }
      }

      Section {
        Button(&quot;Number fact&quot;) { store.send(.numberFactButtonTapped) }
      }
      
      if let fact = store.numberFact {
        Text(fact)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also straightforward to have a UIKit controller driven off of this store. You can observe state changes in the store in &lt;code&gt;viewDidLoad&lt;/code&gt;, and then populate the UI components with data from the store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand!&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class FeatureViewController: UIViewController {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  init(store: StoreOf&amp;lt;Feature&amp;gt;) {
    self.store = store
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder: NSCoder) {
    fatalError(&quot;init(coder:) has not been implemented&quot;)
  }

  override func viewDidLoad() {
    super.viewDidLoad()

    let countLabel = UILabel()
    let decrementButton = UIButton()
    let incrementButton = UIButton()
    let factLabel = UILabel()
    
    // Omitted: Add subviews and set up constraints...
    
    observe { [weak self] in
      guard let self 
      else { return }
      
      countLabel.text = &quot;\(self.store.text)&quot;
      factLabel.text = self.store.numberFact
    }
  }

  @objc private func incrementButtonTapped() {
    self.store.send(.incrementButtonTapped)
  }
  @objc private func decrementButtonTapped() {
    self.store.send(.decrementButtonTapped)
  }
  @objc private func factButtonTapped() {
    self.store.send(.numberFactButtonTapped)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Once we are ready to display this view, for example in the app&#39;s entry point, we can construct a store. This can be done by specifying the initial state to start the application in, as well as the reducer that will power the application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that is enough to get something on the screen to play around with. It&#39;s definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.&lt;/p&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on testing, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testing&quot;&gt;testing&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To test use a &lt;code&gt;TestStore&lt;/code&gt;, which can be created with the same information as the &lt;code&gt;Store&lt;/code&gt;, but it does extra work to allow you to assert how your feature evolves as actions are sent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature()
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. For example, we can simulate the user flow of tapping on the increment and decrement buttons:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Test that tapping on the increment/decrement buttons changes the count
await store.send(.incrementButtonTapped) {
  $0.count = 1
}
await store.send(.decrementButtonTapped) {
  $0.count = 0
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert on that. For example, if we simulate the user tapping on the fact button we expect to receive a fact response back with the fact, which then causes the &lt;code&gt;numberFact&lt;/code&gt; state to be populated:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = ???
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, how do we know what fact is going to be sent back to us?&lt;/p&gt; 
&lt;p&gt;Currently our reducer is using an effect that reaches out into the real world to hit an API server, and that means we have no way to control its behavior. We are at the whims of our internet connectivity and the availability of the API server in order to write this test.&lt;/p&gt; 
&lt;p&gt;It would be better for this dependency to be passed to the reducer so that we can use a live dependency when running the application on a device, but use a mocked dependency for tests. We can do this by adding a property to the &lt;code&gt;Feature&lt;/code&gt; reducer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  let numberFact: (Int) async throws -&amp;gt; String
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then we can use it in the &lt;code&gt;reduce&lt;/code&gt; implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;case .numberFactButtonTapped:
  return .run { [count = state.count] send in 
    let fact = try await self.numberFact(count)
    await send(.numberFactResponse(fact))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And in the entry point of the application we can provide a version of the dependency that actually interacts with the real world API server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature(
            numberFact: { number in
              let (data, _) = try await URLSession.shared.data(
                from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
              )
              return String(decoding: data, as: UTF8.self)
            }
          )
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But in tests we can use a mock dependency that immediately returns a deterministic, predictable fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature(numberFact: { &quot;\($0) is a good number Brent&quot; })
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work we can finish the test by simulating the user tapping on the fact button, and then receiving the response from the dependency to present the fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = &quot;0 is a good number Brent&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also improve the ergonomics of using the &lt;code&gt;numberFact&lt;/code&gt; dependency in our application. Over time the application may evolve into many features, and some of those features may also want access to &lt;code&gt;numberFact&lt;/code&gt;, and explicitly passing it through all layers can get annoying. There is a process you can follow to “register” dependencies with the library, making them instantly available to any layer in the application.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on dependency management, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;dependencies&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We can start by wrapping the number fact functionality in a new type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct NumberFactClient {
  var fetch: (Int) async throws -&amp;gt; String
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then registering that type with the dependency management system by conforming the client to the &lt;code&gt;DependencyKey&lt;/code&gt; protocol, which requires you to specify the live value to use when running the application in simulators or devices:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension NumberFactClient: DependencyKey {
  static let liveValue = Self(
    fetch: { number in
      let (data, _) = try await URLSession.shared
        .data(from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
      )
      return String(decoding: data, as: UTF8.self)
    }
  )
}

extension DependencyValues {
  var numberFact: NumberFactClient {
    get { self[NumberFactClient.self] }
    set { self[NumberFactClient.self] = newValue }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work done you can instantly start making use of the dependency in any feature by using the &lt;code&gt;@Dependency&lt;/code&gt; property wrapper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt; @Reducer
 struct Feature {
-  let numberFact: (Int) async throws -&amp;gt; String
+  @Dependency(\.numberFact) var numberFact
   
   …

-  try await self.numberFact(count)
+  try await self.numberFact.fetch(count)
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This code works exactly as it did before, but you no longer have to explicitly pass the dependency when constructing the feature&#39;s reducer. When running the app in previews, the simulator or on a device, the live dependency will be provided to the reducer, and in tests the test dependency will be provided.&lt;/p&gt; 
&lt;p&gt;This means the entry point to the application no longer needs to construct dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the test store can be constructed without specifying any dependencies, but you can still override any dependency you need to for the purpose of the test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let store = TestStore(initialState: Feature.State()) {
  Feature()
} withDependencies: {
  $0.numberFact.fetch = { &quot;\($0) is a good number Brent&quot; }
}

// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is the basics of building and testing a feature in the Composable Architecture. There are &lt;em&gt;a lot&lt;/em&gt; more things to be explored, such as composition, modularity, adaptability, and complex effects. The &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;Examples&lt;/a&gt; directory has a bunch of projects to explore to see more advanced usages.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The documentation for releases and &lt;code&gt;main&lt;/code&gt; are available here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/&quot;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.17.0/documentation/composablearchitecture/&quot;&gt;1.17.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.17&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt; Other versions &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.16.0/documentation/composablearchitecture/&quot;&gt;1.16.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.16&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.15.0/documentation/composablearchitecture/&quot;&gt;1.15.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.15&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.14.0/documentation/composablearchitecture/&quot;&gt;1.14.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.14&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.13.0/documentation/composablearchitecture/&quot;&gt;1.13.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.13&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.12.0/documentation/composablearchitecture/&quot;&gt;1.12.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.12&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.11.0/documentation/composablearchitecture/&quot;&gt;1.11.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.11&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.10.0/documentation/composablearchitecture/&quot;&gt;1.10.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.10&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.9.0/documentation/composablearchitecture/&quot;&gt;1.9.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.9&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.8.0/documentation/composablearchitecture/&quot;&gt;1.8.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.8&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.7.0/documentation/composablearchitecture/&quot;&gt;1.7.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.7&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.6.0/documentation/composablearchitecture/&quot;&gt;1.6.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.6&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.5.0/documentation/composablearchitecture/&quot;&gt;1.5.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.5&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.4.0/documentation/composablearchitecture/&quot;&gt;1.4.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.4&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.3.0/documentation/composablearchitecture/&quot;&gt;1.3.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.2.0/documentation/composablearchitecture/&quot;&gt;1.2.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.1.0/documentation/composablearchitecture/&quot;&gt;1.1.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.0.0/documentation/composablearchitecture/&quot;&gt;1.0.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.59.0/documentation/composablearchitecture/&quot;&gt;0.59.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.58.0/documentation/composablearchitecture/&quot;&gt;0.58.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.57.0/documentation/composablearchitecture/&quot;&gt;0.57.0&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;p&gt;There are a number of articles in the documentation that you may find helpful as you become more comfortable with the library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/gettingstarted&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/navigation&quot;&gt;Navigation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/sharingstate&quot;&gt;Sharing state&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance&quot;&gt;Performance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/swiftconcurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/bindings&quot;&gt;Bindings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;We have a &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/faq&quot;&gt;dedicated article&lt;/a&gt; for all of the most frequently asked questions and comments people have concerning the library.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow &lt;a href=&quot;http://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; enthusiasts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For long-form discussions, we recommend the &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/discussions&quot;&gt;discussions&lt;/a&gt; tab of this repo.&lt;/li&gt; 
 &lt;li&gt;For casual chat, we recommend the &lt;a href=&quot;http://pointfree.co/slack-invite&quot;&gt;Point-Free Community slack&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Package Dependencies...&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Enter &quot;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture&quot;&gt;https://github.com/pointfreeco/swift-composable-architecture&lt;/a&gt;&quot; into the package repository URL text field&lt;/li&gt; 
 &lt;li&gt;Depending on how your project is structured: 
  &lt;ul&gt; 
   &lt;li&gt;If you have a single application target that needs access to the library, then add &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; directly to your application.&lt;/li&gt; 
   &lt;li&gt;If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM targets, you must create a shared framework that depends on &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; and then depend on that framework in all of your targets. For an example of this, check out the &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt; demo application, which splits lots of features into modules and consumes the static library in this fashion using the &lt;strong&gt;tic-tac-toe&lt;/strong&gt; Swift package.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Companion libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture is built with extensibility in mind, and there are a number of community-supported libraries available to enhance your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Ryu0118/swift-composable-architecture-extras&quot;&gt;Composable Architecture Extras&lt;/a&gt;: A companion library to the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mentalflux/tca-composer&quot;&gt;TCAComposer&lt;/a&gt;: A macro framework for generating boiler-plate code in the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johnpatrickmorgan/TCACoordinators&quot;&gt;TCACoordinators&lt;/a&gt;: The coordinator pattern in the Composable Architecture.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a library, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to it!&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;The following translations of this README have been contributed by members of the community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47&quot;&gt;Arabic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc&quot;&gt;French&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/akashsoni01/b358ee0b3b747167964ef6946123c88d&quot;&gt;Hindi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343&quot;&gt;Indonesian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958&quot;&gt;Italian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/2d0712deb77f78b3379551ac7baea3e4&quot;&gt;Japanese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/5d8936d12e71028fcc4a7c5e078ca038&quot;&gt;Korean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/MarcelStarczyk/6b6153051f46912a665c32199f0d1d54&quot;&gt;Polish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SevioCorrea/2bbf337cd084a58c89f2f7f370626dc8&quot;&gt;Portuguese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SubvertDev/3317d0c3b35ed601be330d6fc0df5aba&quot;&gt;Russian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad&quot;&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/pitt500/f5e32fccb575ce112ffea2827c7bf942&quot;&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/gokhanamal/93001244ef0c1cec58abeb1afc0de37c&quot;&gt;Turkish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/barabashd/33b64676195ce41f4bb73c327ea512a8&quot;&gt;Ukrainian&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a translation, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to a &lt;a href=&quot;https://gist.github.com&quot;&gt;Gist&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Credits and thanks&lt;/h2&gt; 
&lt;p&gt;The following people gave feedback on the library at its early stages and helped make the library what it is today:&lt;/p&gt; 
&lt;p&gt;Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; subscribers 😁.&lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/liscio&quot;&gt;Chris Liscio&lt;/a&gt; who helped us work through many strange SwiftUI quirks and helped refine the final API.&lt;/p&gt; 
&lt;p&gt;And thanks to &lt;a href=&quot;https://github.com/freak4pc&quot;&gt;Shai Mishali&lt;/a&gt; and the &lt;a href=&quot;https://github.com/CombineCommunity/CombineExt/&quot;&gt;CombineCommunity&lt;/a&gt; project, from which we took their implementation of &lt;code&gt;Publishers.Create&lt;/code&gt;, which we use in &lt;code&gt;Effect&lt;/code&gt; to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.&lt;/p&gt; 
&lt;h2&gt;Other libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was built on a foundation of ideas started by other libraries, in particular &lt;a href=&quot;https://elm-lang.org&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/uber/RIBs&quot;&gt;RIBs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/Loop&quot;&gt;Loop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReSwift/ReSwift&quot;&gt;ReSwift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/square/workflow&quot;&gt;Workflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactorKit/ReactorKit&quot;&gt;ReactorKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/NoTests/RxFeedback.swift&quot;&gt;RxFeedback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/spotify/mobius.swift&quot;&gt;Mobius.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;And more&lt;/summary&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/FluxorOrg/Fluxor&quot;&gt;Fluxor&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/RPallas92/PromisedArchitectureKit&quot;&gt;PromisedArchitectureKit&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is released under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>supabase/supabase-swift</title>
      <link>https://github.com/supabase/supabase-swift</link>
      <description>&lt;p&gt;A Swift client for Supabase&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;supabase-swift&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/supabase/supabase-swift&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsupabase%2Fsupabase-swift%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/supabase/supabase-swift&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsupabase%2Fsupabase-swift%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/supabase/supabase-swift?branch=main&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/supabase/supabase-swift/badge.svg?branch=main&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Supabase client for Swift. Mirrors the design of &lt;a href=&quot;https://github.com/supabase/supabase-js/raw/master/README.md&quot;&gt;supabase-js&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation: &lt;a href=&quot;https://supabase.com/docs/reference/swift/introduction&quot;&gt;https://supabase.com/docs/reference/swift/introduction&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 13.0+ / macOS 10.15+ / tvOS 13+ / watchOS 6+ / visionOS 1+&lt;/li&gt; 
 &lt;li&gt;Xcode 15.x&lt;/li&gt; 
 &lt;li&gt;Swift 5.9+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Check the &lt;a href=&quot;https://raw.githubusercontent.com/supabase/supabase-swift/main/#support-policy&quot;&gt;Support Policy&lt;/a&gt; to learn when dropping Xcode, Swift, and platform versions will not be considered a &lt;strong&gt;breaking change&lt;/strong&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Install the library using the Swift Package Manager.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let package = Package(
    ...
    dependencies: [
        ...
        .package(
            url: &quot;https://github.com/supabase/supabase-swift.git&quot;,
            from: &quot;2.0.0&quot;
        ),
    ],
    targets: [
        .target(
            name: &quot;YourTargetName&quot;,
            dependencies: [
                .product(name: &quot;Supabase&quot;, package: &quot;supabase-swift&quot;) // Add as a dependency
            ]
        )
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re using Xcode, &lt;a href=&quot;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&quot;&gt;use this guide&lt;/a&gt; to add &lt;code&gt;supabase-swift&lt;/code&gt; to your project. Use &lt;code&gt;https://github.com/supabase-community/supabase-swift.git&lt;/code&gt; for the url when Xcode asks.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t want the full Supabase environment, you can also add individual packages, such as &lt;code&gt;Functions&lt;/code&gt;, &lt;code&gt;Auth&lt;/code&gt;, &lt;code&gt;Realtime&lt;/code&gt;, &lt;code&gt;Storage&lt;/code&gt;, or &lt;code&gt;PostgREST&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Then you&#39;re able to import the package and establish the connection with the database.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;/// Create a single supabase client for interacting with your database
let client = SupabaseClient(supabaseURL: URL(string: &quot;https://xyzcompany.supabase.co&quot;)!, supabaseKey: &quot;public-anon-key&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Initialize with custom options&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let client = SupabaseClient(
    supabaseURL: URL(string: &quot;https://xyzcompany.supabase.co&quot;)!, 
    supabaseKey: &quot;public-anon-key&quot;,
    options: SupabaseClientOptions(
        db: .init(
            schema: &quot;public&quot;
        ),
        auth: .init(
            storage: MyCustomLocalStorage(),
            flowType: .pkce
        ),
        global: .init(
            headers: [&quot;x-my-custom-header&quot;: &quot;my-app-name&quot;],
            session: URLSession.myCustomSession
        )
    )
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Support Policy&lt;/h2&gt; 
&lt;p&gt;This document outlines the scope of support for Xcode, Swift, and the various platforms (iOS, macOS, tvOS, watchOS, and visionOS) in Supabase.&lt;/p&gt; 
&lt;h3&gt;Xcode&lt;/h3&gt; 
&lt;p&gt;We only support Xcode versions that are currently eligible for submitting apps to the App Store. Once a specific version of Xcode is no longer supported, its removal from Supabase &lt;strong&gt;won&#39;t be treated as a breaking change&lt;/strong&gt; and will occur in a minor release.&lt;/p&gt; 
&lt;h3&gt;Swift&lt;/h3&gt; 
&lt;p&gt;The minimum supported Swift version corresponds to the minor version released with the oldest-supported Xcode version. When a Swift version reaches its end of support, it will be dropped from Supabase in a &lt;strong&gt;minor release&lt;/strong&gt;, and &lt;strong&gt;this won&#39;t be considered a breaking change&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Platforms&lt;/h3&gt; 
&lt;p&gt;We maintain support for the four latest major versions of each platform, including the current version.&lt;/p&gt; 
&lt;p&gt;When a platform version is no longer supported, Supabase will drop it in a &lt;strong&gt;minor release&lt;/strong&gt;, and &lt;strong&gt;this won&#39;t count as a breaking change&lt;/strong&gt;. For instance, iOS 14 will no longer be supported after the release of iOS 18, allowing its removal in a minor update.&lt;/p&gt; 
&lt;p&gt;For macOS, the named yearly releases are treated as major versions for this policy, regardless of their version numbers.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Android, Linux and Windows works but aren&#39;t supported, and may stop working on future versions of the library.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fork the repo on GitHub&lt;/li&gt; 
 &lt;li&gt;Clone the project to your own machine&lt;/li&gt; 
 &lt;li&gt;Commit changes to your own branch&lt;/li&gt; 
 &lt;li&gt;Push your work back up to your fork&lt;/li&gt; 
 &lt;li&gt;Submit a Pull request so that we can review your changes and merge&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;We are building the features of Firebase using enterprise-grade, open source products. We support existing communities wherever possible, and if the products don’t exist we build them and open source them ourselves. Thanks to these sponsors who are making the OSS ecosystem better for everyone.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/supabase&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10214025/90518111-e74bbb00-e198-11ea-8f88-c9e3c1aa4b5b.png&quot; alt=&quot;New Sponsor&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pointfreeco/swift-dependencies</title>
      <link>https://github.com/pointfreeco/swift-dependencies</link>
      <description>&lt;p&gt;A dependency management library inspired by SwiftUI&#39;s &quot;environment.&quot;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dependencies&lt;/h1&gt; 
&lt;p&gt;A dependency management library inspired by SwiftUI&#39;s &quot;environment.&quot;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-dependencies/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/pointfreeco/swift-dependencies/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://pointfree.co/slack-invite&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&amp;amp;logo=slack&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-dependencies%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-dependencies%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#learn-more&quot;&gt;Learn More&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#quick-start&quot;&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#alternatives&quot;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;This library was motivated and designed over the course of many episodes on &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and the Swift language, hosted by &lt;a href=&quot;https://twitter.com/mbrandonw&quot;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/stephencelis&quot;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; 
&lt;a href=&quot;https://www.pointfree.co&quot;&gt; &lt;img alt=&quot;video poster image&quot; src=&quot;https://d3rccdn33rt8ze.cloudfront.net/episodes/0209.jpeg&quot; width=&quot;600&quot;&gt; &lt;/a&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Dependencies are the types and functions in your application that need to interact with outside systems that you do not control. Classic examples of this are API clients that make network requests to servers, but also seemingly innocuous things such as &lt;code&gt;UUID&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; initializers, file access, user defaults, and even clocks and timers, can all be thought of as dependencies.&lt;/p&gt; 
&lt;p&gt;You can get really far in application development without ever thinking about dependency management (or, as some like to call it, &quot;dependency injection&quot;), but eventually uncontrolled dependencies can cause many problems in your code base and development cycle:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Uncontrolled dependencies make it &lt;strong&gt;difficult to write fast, deterministic tests&lt;/strong&gt; because you are susceptible to the vagaries of the outside world, such as file systems, network connectivity, internet speed, server uptime, and more.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Many dependencies &lt;strong&gt;do not work well in SwiftUI previews&lt;/strong&gt;, such as location managers and speech recognizers, and some &lt;strong&gt;do not work even in simulators&lt;/strong&gt;, such as motion managers, and more. This prevents you from being able to easily iterate on the design of features if you make use of those frameworks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Dependencies that interact with 3rd party, non-Apple libraries (such as Firebase, web socket libraries, network libraries, etc.) tend to be heavyweight and take a &lt;strong&gt;long time to compile&lt;/strong&gt;. This can slow down your development cycle.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For these reasons, and a lot more, it is highly encouraged for you to take control of your dependencies rather than letting them control you.&lt;/p&gt; 
&lt;p&gt;But, controlling a dependency is only the beginning. Once you have controlled your dependencies, you are faced with a whole set of new problems:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;How can you &lt;strong&gt;propagate dependencies&lt;/strong&gt; throughout your entire application in a way that is more ergonomic than explicitly passing them around everywhere, but safer than having a global dependency?&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How can you &lt;strong&gt;override dependencies&lt;/strong&gt; for just one portion of your application? This can be handy for overriding dependencies for tests and SwiftUI previews, as well as specific user flows such as onboarding experiences.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How can you be sure you &lt;strong&gt;overrode &lt;em&gt;all&lt;/em&gt; dependencies&lt;/strong&gt; a feature uses in tests? It would be incorrect for a test to mock out some dependencies but leave others as interacting with the outside world.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This library addresses all of the points above, and much, &lt;em&gt;much&lt;/em&gt; more.&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;The library allows you to register your own dependencies, but it also comes with many controllable dependencies out of the box (see &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/dependencyvalues#dependency-values&quot;&gt;&lt;code&gt;DependencyValues&lt;/code&gt;&lt;/a&gt; for a full list), and there is a good chance you can immediately make use of one. If you are using &lt;code&gt;Date()&lt;/code&gt;, &lt;code&gt;UUID()&lt;/code&gt;, &lt;code&gt;Task.sleep&lt;/code&gt;, or Combine schedulers directly in your feature&#39;s logic, you can already start to use this library.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Observable
final class FeatureModel {
  var items: [Item] = []

  @ObservationIgnored
  @Dependency(\.continuousClock) var clock  // Controllable way to sleep a task
  @ObservationIgnored
  @Dependency(\.date.now) var now           // Controllable way to ask for current date
  @ObservationIgnored
  @Dependency(\.mainQueue) var mainQueue    // Controllable scheduling on main queue
  @ObservationIgnored
  @Dependency(\.uuid) var uuid              // Controllable UUID creation

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once your dependencies are declared, rather than reaching out to the &lt;code&gt;Date()&lt;/code&gt;, &lt;code&gt;UUID()&lt;/code&gt;, etc., directly, you can use the dependency that is defined on your feature&#39;s model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Observable
final class FeatureModel {
  // ...

  func addButtonTapped() async throws {
    try await clock.sleep(for: .seconds(1))  // 👈 Don&#39;t use &#39;Task.sleep&#39;
    items.append(
      Item(
        id: uuid(),  // 👈 Don&#39;t use &#39;UUID()&#39;
        name: &quot;&quot;,
        createdAt: now  // 👈 Don&#39;t use &#39;Date()&#39;
      )
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is all it takes to start using controllable dependencies in your features. With that little bit of upfront work done you can start to take advantage of the library&#39;s powers.&lt;/p&gt; 
&lt;p&gt;For example, you can easily control these dependencies in tests. If you want to test the logic inside the &lt;code&gt;addButtonTapped&lt;/code&gt; method, you can use the &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/withdependencies(isolation:_:operation:)&quot;&gt;&lt;code&gt;withDependencies&lt;/code&gt;&lt;/a&gt; function to override any dependencies for the scope of one single test. It&#39;s as easy as 1-2-3:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func add() async throws {
  let model = withDependencies {
    // 1️⃣ Override any dependencies that your feature uses.
    $0.clock = .immediate
    $0.date.now = Date(timeIntervalSinceReferenceDate: 1234567890)
    $0.uuid = .incrementing
  } operation: {
    // 2️⃣ Construct the feature&#39;s model
    FeatureModel()
  }
  // 3️⃣ The model now executes in a controlled environment of dependencies,
  //    and so we can make assertions against its behavior.
  try await model.addButtonTapped()
  #expect(
    model.items == [
      Item(
        id: UUID(uuidString: &quot;00000000-0000-0000-0000-000000000000&quot;)!,
        name: &quot;&quot;,
        createdAt: Date(timeIntervalSinceReferenceDate: 1234567890)
      )
    ]
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here we controlled the &lt;code&gt;date&lt;/code&gt; dependency to always return the same date, and we controlled the &lt;code&gt;uuid&lt;/code&gt; dependency to return an auto-incrementing UUID every time it is invoked, and we even controlled the &lt;code&gt;clock&lt;/code&gt; dependency using an &lt;a href=&quot;https://pointfreeco.github.io/swift-clocks/main/documentation/clocks/immediateclock&quot;&gt;&lt;code&gt;ImmediateClock&lt;/code&gt;&lt;/a&gt; to squash all of time into a single instant. If we did not control these dependencies this test would be very difficult to write since there is no way to accurately predict what will be returned by &lt;code&gt;Date()&lt;/code&gt; and &lt;code&gt;UUID()&lt;/code&gt;, and we&#39;d have to wait for real world time to pass, making the test slow.&lt;/p&gt; 
&lt;p&gt;But, controllable dependencies aren&#39;t only useful for tests. They can also be used in Xcode previews. Suppose the feature above makes use of a clock to sleep for an amount of time before something happens in the view. If you don&#39;t want to literally wait for time to pass in order to see how the view changes, you can override the clock dependency to be an &quot;immediate&quot; clock using &lt;code&gt;prepareDependencies&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;#Preview {
  let _ = prepareDependencies {
    $0.continuousClock = .immediate
  }

  // All access of &#39;@Dependency(\.continuousClock)&#39; in this preview will 
  // use an immediate clock.
  FeatureView(model: FeatureModel())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will make it so that the preview uses an immediate clock when run, but when running in a simulator or on device it will still use a live &lt;code&gt;ContinuousClock&lt;/code&gt;. This makes it possible to override dependencies just for previews without affecting how your app will run in production.&lt;/p&gt; 
&lt;p&gt;That is the basics to getting started with using the library, but there is still a lot more you can do. You can learn more in depth about the library by exploring the &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies&quot;&gt;documentation&lt;/a&gt; and articles:&lt;/p&gt; 
&lt;h4&gt;Getting started&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/quickstart&quot;&gt;Quick start&lt;/a&gt; (Same as the information above)&lt;/strong&gt;: Learn the basics of getting started with the library before diving deep into all of its features.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/whataredependencies&quot;&gt;What are dependencies?&lt;/a&gt;&lt;/strong&gt;: Learn what dependencies are, how they complicate your code, and why you want to control them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Essentials&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/usingdependencies&quot;&gt;Using dependencies&lt;/a&gt;&lt;/strong&gt;: Learn how to use the dependencies that are registered with the library.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/registeringdependencies&quot;&gt;Registering dependencies&lt;/a&gt;&lt;/strong&gt;: Learn how to register your own dependencies with the library so that they immediately become available from any part of your code base.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/livepreviewtest&quot;&gt;Live, preview, and test dependencies&lt;/a&gt;&lt;/strong&gt;: Learn how to provide different implementations of your dependencies for use in the live application, as well as in Xcode previews, and even in tests.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/testing&quot;&gt;Testing&lt;/a&gt;&lt;/strong&gt;: One of the main reasons to control dependencies is to allow for easier testing. Learn some tips and tricks for writing better tests with the library.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advanced&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/designingdependencies&quot;&gt;Designing dependencies&lt;/a&gt;&lt;/strong&gt;: Learn techniques on designing your dependencies so that they are most flexible for injecting into features and overriding for tests.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/overridingdependencies&quot;&gt;Overriding dependencies&lt;/a&gt;&lt;/strong&gt;: Learn how dependencies can be changed at runtime so that certain parts of your application can use different dependencies.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/lifetimes&quot;&gt;Dependency lifetimes&lt;/a&gt;&lt;/strong&gt;: Learn about the lifetimes of dependencies, how to prolong the lifetime of a dependency, and how dependencies are inherited.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies/singleentrypointsystems&quot;&gt;Single entry point systems&lt;/a&gt;&lt;/strong&gt;: Learn about &quot;single entry point&quot; systems, and why they are best suited for this dependencies library, although it is possible to use the library with non-single entry point systems.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;We rebuilt Apple&#39;s &lt;a href=&quot;https://developer.apple.com/tutorials/app-dev-training/getting-started-with-scrumdinger&quot;&gt;Scrumdinger&lt;/a&gt; demo application using modern, best practices for SwiftUI development, including using this library to control dependencies on file system access, timers and speech recognition APIs. That demo can be found &lt;a href=&quot;https://github.com/pointfreeco/syncups&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The latest documentation for the Dependencies APIs is available &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-dependencies/main/documentation/dependencies&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can add Dependencies to an Xcode project by adding it to your project as a package.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-dependencies&quot;&gt;https://github.com/pointfreeco/swift-dependencies&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you want to use Dependencies in a &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;SwiftPM&lt;/a&gt; project, it&#39;s as simple as adding it to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
  .package(url: &quot;https://github.com/pointfreeco/swift-dependencies&quot;, from: &quot;1.0.0&quot;)
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then adding the product to any target that needs access to the library:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.product(name: &quot;Dependencies&quot;, package: &quot;swift-dependencies&quot;),
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you want to discuss this library or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow &lt;a href=&quot;http://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; enthusiasts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For long-form discussions, we recommend the &lt;a href=&quot;http://github.com/pointfreeco/swift-dependencies/discussions&quot;&gt;discussions&lt;/a&gt; tab of this repo.&lt;/li&gt; 
 &lt;li&gt;For casual chat, we recommend the &lt;a href=&quot;http://pointfree.co/slack-invite&quot;&gt;Point-Free Community Slack&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Extensions&lt;/h2&gt; 
&lt;p&gt;This library controls a number of dependencies out of the box, but is also open to extension. The following projects all build on top of Dependencies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tgrapperon/swift-dependencies-additions&quot;&gt;Dependencies Additions&lt;/a&gt;: A companion library that provides higher-level dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arasan01/swift-dependencies-extras&quot;&gt;Dependencies Protocol Extras&lt;/a&gt;: A library to make swift-dependencies even more useful when using protocols.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;p&gt;There are many other dependency injection libraries in the Swift community. Each has its own set of priorities and trade-offs that differ from Dependencies. Here are a few well-known examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hmlongco/Factory&quot;&gt;Factory&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uber/needle&quot;&gt;Needle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Swinject/Swinject&quot;&gt;Swinject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scribd/Weaver&quot;&gt;Weaver&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is released under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-dependencies/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ReactiveX/RxSwift</title>
      <link>https://github.com/ReactiveX/RxSwift</link>
      <description>&lt;p&gt;Reactive Programming in Swift&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/ReactiveX/RxSwift/raw/main/assets/RxSwift_Logo.png?raw=true&quot; width=&quot;35%&quot; alt=&quot;RxSwift Logo&quot;&gt; &lt;br&gt; &lt;a href=&quot;https://actions-badge.atrox.dev/ReactiveX/RxSwift/goto&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/ReactiveX/RxSwift/workflows/RxSwift/badge.svg?branch=main&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg?sanitize=true&quot; alt=&quot;Supported Platforms: iOS, macOS, tvOS, watchOS &amp;amp; Linux&quot;&gt; &lt;br&gt; &lt;a href=&quot;https://cocoapods.org/pods/RxSwift&quot; alt=&quot;RxSwift on CocoaPods&quot; title=&quot;RxSwift on CocoaPods&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/RxSwift.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot; alt=&quot;RxSwift on Carthage&quot; title=&quot;RxSwift on Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/swiftlang/swift-package-manager&quot; alt=&quot;RxSwift on Swift Package Manager&quot; title=&quot;RxSwift on Swift Package Manager&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Rx is a &lt;a href=&quot;https://youtu.be/looJcaeboBY&quot;&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface, which lets you broadcast and subscribe to values and other events from an &lt;code&gt;Observable&lt;/code&gt; stream.&lt;/p&gt; 
&lt;p&gt;RxSwift is the Swift-specific implementation of the &lt;a href=&quot;http://reactivex.io&quot;&gt;Reactive Extensions&lt;/a&gt; standard.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/ReactiveX/RxSwift/raw/main/assets/example.png?raw=true&quot; width=&quot;55%&quot; alt=&quot;RxSwift Observable Example of a price constantly changing and updating the app&#39;s UI&quot;&gt;&lt;/p&gt; 
&lt;p&gt;While this version aims to stay true to the original spirit and naming conventions of Rx, this project also aims to provide a true Swift-first API for Rx APIs.&lt;/p&gt; 
&lt;p&gt;Cross platform documentation can be found on &lt;a href=&quot;http://reactivex.io/&quot;&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Like other Rx implementations, RxSwift&#39;s intention is to enable easy composition of asynchronous operations and streams of data in the form of &lt;code&gt;Observable&lt;/code&gt; objects and a suite of methods to transform and compose these pieces of asynchronous work.&lt;/p&gt; 
&lt;p&gt;KVO observation, async operations, UI Events and other streams of data are all unified under &lt;a href=&quot;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#observables-aka-sequences&quot;&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt; 
&lt;h2&gt;I came here because I want to ...&lt;/h2&gt; 
&lt;h6&gt;... understand&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Why.md&quot;&gt;why use rx?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/GettingStarted.md&quot;&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Traits.md&quot;&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/UnitTests.md&quot;&gt;testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Tips.md&quot;&gt;tips and common errors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/GettingStarted.md#debugging&quot;&gt;debugging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/MathBehindRx.md&quot;&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/HotAndColdObservables.md&quot;&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;... install&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href=&quot;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/#installation&quot;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;... hack around&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;with the example app. &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/ExampleApp.md&quot;&gt;Running Example App&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;with operators in playgrounds. &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Playgrounds.md&quot;&gt;Playgrounds&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;... interact&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href=&quot;http://slack.rxswift.org&quot;&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Report a problem using the library. &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/.github/ISSUE_TEMPLATE.md&quot;&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Request a new feature. &lt;a href=&quot;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/NewFeatureRequestTemplate.md&quot;&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Help out &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/CONTRIBUTING.md&quot;&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;... compare&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/ComparisonWithOtherLibraries.md&quot;&gt;with Combine and ReactiveSwift&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;... understand the structure&lt;/h6&gt; 
&lt;p&gt;RxSwift is as compositional as the asynchronous work it drives. The core unit is RxSwift itself, while other dependencies can be added for UI Work, testing, and more.&lt;/p&gt; 
&lt;p&gt;It comprises five separate components depending on each other in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-none&quot;&gt;┌──────────────┐    ┌──────────────┐
│   RxCocoa    ├────▶   RxRelay    │
└───────┬──────┘    └──────┬───────┘
        │                  │
┌───────▼──────────────────▼───────┐
│             RxSwift              │
└───────▲──────────────────▲───────┘
        │                  │
┌───────┴──────┐    ┌──────┴───────┐
│    RxTest    │    │  RxBlocking  │
└──────────────┘    └──────────────┘
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href=&quot;https://reactivex.io&quot;&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Shared Sequences, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt;, &lt;code&gt;BehaviorRelay&lt;/code&gt; and &lt;code&gt;ReplayRelay&lt;/code&gt;, three &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Subjects.md#relays&quot;&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th width=&quot;30%&quot;&gt;Here&#39;s an example&lt;/th&gt; 
   &lt;th width=&quot;30%&quot;&gt;In Action&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt; 
   &lt;th rowspan=&quot;9&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;div class=&quot;highlight highlight-source-swift&quot;&gt;
     &lt;pre&gt;
let searchResults = searchBar.rx.text.orEmpty
    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)
    .distinctUntilChanged()
    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in
        if query.isEmpty {
            return .just([])
        }
        return searchGitHub(query)
            .catchAndReturn([])
    }
    .observe(on: MainScheduler.instance)&lt;/pre&gt;
    &lt;/div&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;... then bind the results to your tableview&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;30%&quot;&gt;
    &lt;div class=&quot;highlight highlight-source-swift&quot;&gt;
     &lt;pre&gt;
searchResults
    .bind(to: tableView.rx.items(cellIdentifier: &quot;Cell&quot;)) {
        (index, repository: Repository, cell) in
        cell.textLabel?.text = repository.name
        cell.detailTextLabel?.text = repository.url
    }
    .disposed(by: disposeBag)&lt;/pre&gt;
    &lt;/div&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;RxSwift doesn&#39;t contain any external dependencies.&lt;/p&gt; 
&lt;p&gt;These are currently the supported installation options:&lt;/p&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://guides.cocoapods.org/using/using-cocoapods.html&quot;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Podfile
use_frameworks!

target &#39;YOUR_TARGET_NAME&#39; do
    pod &#39;RxSwift&#39;, &#39;6.9.0&#39;
    pod &#39;RxCocoa&#39;, &#39;6.9.0&#39;
end

# RxTest and RxBlocking make the most sense in the context of unit/integration tests
target &#39;YOUR_TESTING_TARGET&#39; do
    pod &#39;RxBlocking&#39;, &#39;6.9.0&#39;
    pod &#39;RxTest&#39;, &#39;6.9.0&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pod install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;XCFrameworks&lt;/h3&gt; 
&lt;p&gt;Each release starting with RxSwift 6 includes &lt;code&gt;*.xcframework&lt;/code&gt; framework binaries.&lt;/p&gt; 
&lt;p&gt;Simply drag the needed framework binaries to your &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; section under your target&#39;s &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/xcframeworks.png&quot; alt=&quot;XCFrameworks instructions&quot; width=&quot;65%&quot;&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You may verify the identity of the binaries by comparing against the following fingerprint in Xcode 15+:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;BD 80 2E 79 4C 8A BD DA 4C 3F 5D 92 B3 E4 C4 FB FA E4 73 44 10 B9 AD 73 44 2E F1 CE B0 27 61 40&lt;/code&gt;&lt;/p&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/xcframeworks_signing.png&quot; alt=&quot;XCFrameworks Signature Fingerprint in Xcode 15+&quot; width=&quot;65%&quot;&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;ReactiveX/RxSwift&quot; &quot;6.9.0&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ carthage update
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Carthage as a Static Library&lt;/h4&gt; 
&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt; 
&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;carthage update RxSwift --platform iOS --no-build
sed -i -e &#39;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&#39; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj
carthage build RxSwift --platform iOS
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/swiftlang/swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is a critical cross-dependency bug affecting many projects including RxSwift in Swift Package Manager. We&#39;ve &lt;a href=&quot;https://bugs.swift.org/browse/SR-12303&quot;&gt;filed a bug (SR-12303)&lt;/a&gt; in early 2020 but have no answer yet. Your mileage may vary. A partial workaround can be found &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/issues/2127#issuecomment-717830502&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version:5.0

import PackageDescription

let package = Package(
  name: &quot;RxProject&quot;,
  dependencies: [
    .package(url: &quot;https://github.com/ReactiveX/RxSwift.git&quot;, .upToNextMajor(from: &quot;6.0.0&quot;))
  ],
  targets: [
    .target(name: &quot;RxProject&quot;, dependencies: [&quot;RxSwift&quot;, .product(name: &quot;RxCocoa&quot;, package: &quot;RxSwift&quot;)]),
  ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swift build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ TEST=1 swift test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manually using git submodules&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add RxSwift as a submodule&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt; 
 &lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt; targets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;References&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://reactivex.io/&quot;&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions&quot;&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift&quot;&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GdvLP0ZAhhc&quot;&gt;RxSwift: Debunking the myth of hard (YouTube)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://boxueio.com/series/rxswift-101&quot;&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese 🇨🇳)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/looJcaeboBY&quot;&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/-8Y1-lE6NSA&quot;&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf&quot;&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://rxmarbles.com/&quot;&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>SwiftyJSON/SwiftyJSON</title>
      <link>https://github.com/SwiftyJSON/SwiftyJSON</link>
      <description>&lt;p&gt;The better way to deal with JSON data in Swift.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftyJSON&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/cocoapods/v/SwiftyJSON.svg?sanitize=true&quot; alt=&quot;CocoaPods&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/platforms-iOS%208.0%20%7C%20macOS%2010.10%20%7C%20tvOS%209.0%20%7C%20watchOS%203.0-F28D00.svg?sanitize=true&quot; alt=&quot;Platform&quot;&gt; &lt;a href=&quot;https://houndci.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&quot; alt=&quot;Reviewed by Hound&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;SwiftyJSON makes it easy to deal with JSON data in Swift.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Build Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;*OS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://travis-ci.org/SwiftyJSON/SwiftyJSON&quot;&gt;&lt;img src=&quot;https://travis-ci.org/SwiftyJSON/SwiftyJSON.svg?branch=master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/IBM-Swift/SwiftyJSON&quot;&gt;Linux&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://travis-ci.org/IBM-Swift/SwiftyJSON&quot;&gt;&lt;img src=&quot;https://travis-ci.org/IBM-Swift/SwiftyJSON.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#why-is-the-typical-json-handling-in-swift-not-good&quot;&gt;Why is the typical JSON handling in Swift NOT good&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#integration&quot;&gt;Integration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#usage&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#initialization&quot;&gt;Initialization&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#subscript&quot;&gt;Subscript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#error&quot;&gt;Error&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#optional-getter&quot;&gt;Optional getter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#non-optional-getter&quot;&gt;Non-optional getter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#setter&quot;&gt;Setter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#raw-object&quot;&gt;Raw object&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#literal-convertibles&quot;&gt;Literal convertibles&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#merging&quot;&gt;Merging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#removing-elements&quot;&gt;Removing elements&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-alamofire&quot;&gt;Work with Alamofire&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-moya&quot;&gt;Work with Moya&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#swiftyjson-model-generator&quot;&gt;SwiftyJSON Model Generator&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Why is the typical JSON handling in Swift NOT good?&lt;/h2&gt; 
&lt;p&gt;Swift is very strict about types. But although explicit typing is good for saving us from mistakes, it becomes painful when dealing with JSON and other areas that are, by nature, implicit about types.&lt;/p&gt; 
&lt;p&gt;Take the Twitter API for example. Say we want to retrieve a user&#39;s &quot;name&quot; value of some tweet in Swift (according to &lt;a href=&quot;https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline&quot;&gt;Twitter&#39;s API&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;The code would look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if let statusesArray = try? JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],
    let user = statusesArray[0][&quot;user&quot;] as? [String: Any],
    let username = user[&quot;name&quot;] as? String {
    // Finally we got the username
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s not good.&lt;/p&gt; 
&lt;p&gt;Even if we use optional chaining, it would be messy:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if let JSONObject = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],
    let username = (JSONObject[0][&quot;user&quot;] as? [String: Any])?[&quot;name&quot;] as? String {
        // There&#39;s our username
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An unreadable mess--for something that should really be simple!&lt;/p&gt; 
&lt;p&gt;With SwiftyJSON all you have to do is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let json = try? JSON(data: dataFromNetworking)
if let userName = json[0][&quot;user&quot;][&quot;name&quot;].string {
  //Now you got your value
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And don&#39;t worry about the Optional Wrapping thing. It&#39;s done for you automatically.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let json = try? JSON(data: dataFromNetworking)
let result = json[999999][&quot;wrong_key&quot;][&quot;wrong_name&quot;]
if let userName = result.string {
    //Calm down, take it easy, the &quot;.string&quot; property still produces the correct Optional String type with safety
} else {
    //Print the error
    print(result.error)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 8.0+ | macOS 10.10+ | tvOS 9.0+ | watchOS 2.0+&lt;/li&gt; 
 &lt;li&gt;Xcode 8&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integration&lt;/h2&gt; 
&lt;h4&gt;CocoaPods (iOS 8+, OS X 10.9+)&lt;/h4&gt; 
&lt;p&gt;You can use &lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;platform :ios, &#39;8.0&#39;
use_frameworks!

target &#39;MyApp&#39; do
    pod &#39;SwiftyJSON&#39;, &#39;~&amp;gt; 4.0&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Carthage (iOS 8+, OS X 10.9+)&lt;/h4&gt; 
&lt;p&gt;You can use &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;SwiftyJSON/SwiftyJSON&quot; ~&amp;gt; 4.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use Carthage to build your dependencies, make sure you have added &lt;code&gt;SwiftyJSON.framework&lt;/code&gt; to the &quot;Linked Frameworks and Libraries&quot; section of your target, and have included them in your Carthage framework copying build phase.&lt;/p&gt; 
&lt;h4&gt;Swift Package Manager&lt;/h4&gt; 
&lt;p&gt;You can use &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;The Swift Package Manager&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding the proper description to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version:4.0
import PackageDescription

let package = Package(
    name: &quot;YOUR_PROJECT_NAME&quot;,
    dependencies: [
        .package(url: &quot;https://github.com/SwiftyJSON/SwiftyJSON.git&quot;, from: &quot;4.0.0&quot;),
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run &lt;code&gt;swift build&lt;/code&gt; whenever you get prepared.&lt;/p&gt; 
&lt;h4&gt;Manually (iOS 7+, OS X 10.9+)&lt;/h4&gt; 
&lt;p&gt;To use this library in your project manually you may:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;for Projects, just drag SwiftyJSON.swift to the project tree&lt;/li&gt; 
 &lt;li&gt;for Workspaces, include the whole SwiftyJSON.xcodeproj&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h4&gt;Initialization&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwiftyJSON
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let json = try? JSON(data: dataFromNetworking)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let json = JSON(jsonObject)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if let dataFromString = jsonString.data(using: .utf8, allowLossyConversion: false) {
    let json = JSON(data: dataFromString)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Subscript&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Getting a double from a JSON Array
let name = json[0].double
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Getting an array of string from a JSON Array
let arrayNames =  json[&quot;users&quot;].arrayValue.map {$0[&quot;name&quot;].stringValue}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Getting a string from a JSON Dictionary
let name = json[&quot;name&quot;].stringValue
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Getting a string using a path to the element
let path: [JSONSubscriptType] = [1,&quot;list&quot;,2,&quot;name&quot;]
let name = json[path].string
// Just the same
let name = json[1][&quot;list&quot;][2][&quot;name&quot;].string
// Alternatively
let name = json[1,&quot;list&quot;,2,&quot;name&quot;].string
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// With a hard way
let name = json[].string
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// With a custom way
let keys:[JSONSubscriptType] = [1,&quot;list&quot;,2,&quot;name&quot;]
let name = json[keys].string
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Loop&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// If json is .Dictionary
for (key,subJson):(String, JSON) in json {
   // Do something you want
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;The first element is always a String, even if the JSON is an Array&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// If json is .Array
// The `index` is 0..&amp;lt;json.count&#39;s string value
for (index,subJson):(String, JSON) in json {
    // Do something you want
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Error&lt;/h4&gt; 
&lt;h5&gt;SwiftyJSON 4.x&lt;/h5&gt; 
&lt;p&gt;SwiftyJSON 4.x introduces an enum type called &lt;code&gt;SwiftyJSONError&lt;/code&gt;, which includes &lt;code&gt;unsupportedType&lt;/code&gt;, &lt;code&gt;indexOutOfBounds&lt;/code&gt;, &lt;code&gt;elementTooDeep&lt;/code&gt;, &lt;code&gt;wrongType&lt;/code&gt;, &lt;code&gt;notExist&lt;/code&gt; and &lt;code&gt;invalidJSON&lt;/code&gt;, at the same time, &lt;code&gt;ErrorDomain&lt;/code&gt; are being replaced by &lt;code&gt;SwiftyJSONError.errorDomain&lt;/code&gt;. Note: Those old error types are deprecated in SwiftyJSON 4.x and will be removed in the future release.&lt;/p&gt; 
&lt;h5&gt;SwiftyJSON 3.x&lt;/h5&gt; 
&lt;p&gt;Use a subscript to get/set a value in an Array or Dictionary&lt;/p&gt; 
&lt;p&gt;If the JSON is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;an array, the app may crash with &quot;index out-of-bounds.&quot;&lt;/li&gt; 
 &lt;li&gt;a dictionary, it will be assigned to &lt;code&gt;nil&lt;/code&gt; without a reason.&lt;/li&gt; 
 &lt;li&gt;not an array or a dictionary, the app may crash with an &quot;unrecognised selector&quot; exception.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This will never happen in SwiftyJSON.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let json = JSON([&quot;name&quot;, &quot;age&quot;])
if let name = json[999].string {
    // Do something you want
} else {
    print(json[999].error!) // &quot;Array[999] is out of bounds&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let json = JSON([&quot;name&quot;:&quot;Jack&quot;, &quot;age&quot;: 25])
if let name = json[&quot;address&quot;].string {
    // Do something you want
} else {
    print(json[&quot;address&quot;].error!) // &quot;Dictionary[&quot;address&quot;] does not exist&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let json = JSON(12345)
if let age = json[0].string {
    // Do something you want
} else {
    print(json[0])       // &quot;Array[0] failure, It is not an array&quot;
    print(json[0].error!) // &quot;Array[0] failure, It is not an array&quot;
}

if let name = json[&quot;name&quot;].string {
    // Do something you want
} else {
    print(json[&quot;name&quot;])       // &quot;Dictionary[\&quot;name&quot;] failure, It is not an dictionary&quot;
    print(json[&quot;name&quot;].error!) // &quot;Dictionary[\&quot;name&quot;] failure, It is not an dictionary&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Optional getter&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// NSNumber
if let id = json[&quot;user&quot;][&quot;favourites_count&quot;].number {
   // Do something you want
} else {
   // Print the error
   print(json[&quot;user&quot;][&quot;favourites_count&quot;].error!)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// String
if let id = json[&quot;user&quot;][&quot;name&quot;].string {
   // Do something you want
} else {
   // Print the error
   print(json[&quot;user&quot;][&quot;name&quot;].error!)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Bool
if let id = json[&quot;user&quot;][&quot;is_translator&quot;].bool {
   // Do something you want
} else {
   // Print the error
   print(json[&quot;user&quot;][&quot;is_translator&quot;].error!)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Int
if let id = json[&quot;user&quot;][&quot;id&quot;].int {
   // Do something you want
} else {
   // Print the error
   print(json[&quot;user&quot;][&quot;id&quot;].error!)
}
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Non-optional getter&lt;/h4&gt; 
&lt;p&gt;Non-optional getter is named &lt;code&gt;xxxValue&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// If not a Number or nil, return 0
let id: Int = json[&quot;id&quot;].intValue
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// If not a String or nil, return &quot;&quot;
let name: String = json[&quot;name&quot;].stringValue
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// If not an Array or nil, return []
let list: Array&amp;lt;JSON&amp;gt; = json[&quot;list&quot;].arrayValue
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// If not a Dictionary or nil, return [:]
let user: Dictionary&amp;lt;String, JSON&amp;gt; = json[&quot;user&quot;].dictionaryValue
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Setter&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;json[&quot;name&quot;] = JSON(&quot;new-name&quot;)
json[0] = JSON(1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;json[&quot;id&quot;].int =  1234567890
json[&quot;coordinate&quot;].double =  8766.766
json[&quot;name&quot;].string =  &quot;Jack&quot;
json.arrayObject = [1,2,3,4]
json.dictionaryObject = [&quot;name&quot;:&quot;Jack&quot;, &quot;age&quot;:25]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Raw object&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rawObject: Any = json.object
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rawValue: Any = json.rawValue
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;//convert the JSON to raw NSData
do {
	let rawData = try json.rawData()
  //Do something you want
} catch {
	print(&quot;Error \(error)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;//convert the JSON to a raw String
if let rawString = json.rawString() {
  //Do something you want
} else {
	print(&quot;json.rawString is nil&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Existence&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// shows you whether value specified in JSON or not
if json[&quot;name&quot;].exists()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Literal convertibles&lt;/h4&gt; 
&lt;p&gt;For more info about literal convertibles: &lt;a href=&quot;http://nshipster.com/swift-literal-convertible/&quot;&gt;Swift Literal Convertibles&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// StringLiteralConvertible
let json: JSON = &quot;I&#39;m a json&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// IntegerLiteralConvertible
let json: JSON =  12345
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// BooleanLiteralConvertible
let json: JSON =  true
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// FloatLiteralConvertible
let json: JSON =  2.8765
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// DictionaryLiteralConvertible
let json: JSON =  [&quot;I&quot;:&quot;am&quot;, &quot;a&quot;:&quot;json&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// ArrayLiteralConvertible
let json: JSON =  [&quot;I&quot;, &quot;am&quot;, &quot;a&quot;, &quot;json&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// With subscript in array
var json: JSON =  [1,2,3]
json[0] = 100
json[1] = 200
json[2] = 300
json[999] = 300 // Don&#39;t worry, nothing will happen
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// With subscript in dictionary
var json: JSON =  [&quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 25]
json[&quot;name&quot;] = &quot;Mike&quot;
json[&quot;age&quot;] = &quot;25&quot; // It&#39;s OK to set String
json[&quot;address&quot;] = &quot;L.A.&quot; // Add the &quot;address&quot;: &quot;L.A.&quot; in json
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Array &amp;amp; Dictionary
var json: JSON =  [&quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 25, &quot;list&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, [&quot;what&quot;: &quot;this&quot;]]]
json[&quot;list&quot;][3][&quot;what&quot;] = &quot;that&quot;
json[&quot;list&quot;,3,&quot;what&quot;] = &quot;that&quot;
let path: [JSONSubscriptType] = [&quot;list&quot;,3,&quot;what&quot;]
json[path] = &quot;that&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// With other JSON objects
let user: JSON = [&quot;username&quot; : &quot;Steve&quot;, &quot;password&quot;: &quot;supersecurepassword&quot;]
let auth: JSON = [
  &quot;user&quot;: user.object, // use user.object instead of just user
  &quot;apikey&quot;: &quot;supersecretapitoken&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Merging&lt;/h4&gt; 
&lt;p&gt;It is possible to merge one JSON into another JSON. Merging a JSON into another JSON adds all non existing values to the original JSON which are only present in the &lt;code&gt;other&lt;/code&gt; JSON.&lt;/p&gt; 
&lt;p&gt;If both JSONs contain a value for the same key, &lt;em&gt;mostly&lt;/em&gt; this value gets overwritten in the original JSON, but there are two cases where it provides some special treatment:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.array&lt;/code&gt; the values form the array found in the &lt;code&gt;other&lt;/code&gt; JSON getting appended to the original JSON&#39;s array value.&lt;/li&gt; 
 &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.dictionary&lt;/code&gt; both JSON-values are getting merged the same way the encapsulating JSON is merged.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In a case where two fields in a JSON have different types, the value will get always overwritten.&lt;/p&gt; 
&lt;p&gt;There are two different fashions for merging: &lt;code&gt;merge&lt;/code&gt; modifies the original JSON, whereas &lt;code&gt;merged&lt;/code&gt; works non-destructively on a copy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let original: JSON = [
    &quot;first_name&quot;: &quot;John&quot;,
    &quot;age&quot;: 20,
    &quot;skills&quot;: [&quot;Coding&quot;, &quot;Reading&quot;],
    &quot;address&quot;: [
        &quot;street&quot;: &quot;Front St&quot;,
        &quot;zip&quot;: &quot;12345&quot;,
    ]
]

let update: JSON = [
    &quot;last_name&quot;: &quot;Doe&quot;,
    &quot;age&quot;: 21,
    &quot;skills&quot;: [&quot;Writing&quot;],
    &quot;address&quot;: [
        &quot;zip&quot;: &quot;12342&quot;,
        &quot;city&quot;: &quot;New York City&quot;
    ]
]

let updated = original.merge(with: update)
// [
//     &quot;first_name&quot;: &quot;John&quot;,
//     &quot;last_name&quot;: &quot;Doe&quot;,
//     &quot;age&quot;: 21,
//     &quot;skills&quot;: [&quot;Coding&quot;, &quot;Reading&quot;, &quot;Writing&quot;],
//     &quot;address&quot;: [
//         &quot;street&quot;: &quot;Front St&quot;,
//         &quot;zip&quot;: &quot;12342&quot;,
//         &quot;city&quot;: &quot;New York City&quot;
//     ]
// ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Removing elements&lt;/h4&gt; 
&lt;p&gt;If you are storing dictionaries, you can remove elements using &lt;code&gt;dictionaryObject.removeValue(forKey:)&lt;/code&gt;. This mutates the JSON object in place.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var object = JSON([
    &quot;one&quot;: [&quot;color&quot;: &quot;blue&quot;],
    &quot;two&quot;: [&quot;city&quot;: &quot;tokyo&quot;,
            &quot;country&quot;: &quot;japan&quot;,
            &quot;foods&quot;: [
                &quot;breakfast&quot;: &quot;tea&quot;,
                &quot;lunch&quot;: &quot;sushi&quot;
                ]
            ]
])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lets remove the &lt;code&gt;country&lt;/code&gt; key:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;object[&quot;two&quot;].dictionaryObject?.removeValue(forKey: &quot;country&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you &lt;code&gt;print(object)&lt;/code&gt;, you&#39;ll see that the &lt;code&gt;country&lt;/code&gt; key no longer exists.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;one&quot; : {
    &quot;color&quot; : &quot;blue&quot;
  },
  &quot;two&quot; : {
    &quot;city&quot; : &quot;tokyo&quot;,
    &quot;foods&quot; : {
      &quot;breakfast&quot; : &quot;tea&quot;,
      &quot;lunch&quot; : &quot;sushi&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This also works for nested dictionaries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;object[&quot;two&quot;][&quot;foods&quot;].dictionaryObject?.removeValue(forKey: &quot;breakfast&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;one&quot; : {
    &quot;color&quot; : &quot;blue&quot;
  },
  &quot;two&quot; : {
    &quot;city&quot; : &quot;tokyo&quot;,
    &quot;foods&quot; : {
      &quot;lunch&quot; : &quot;sushi&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;String representation&lt;/h2&gt; 
&lt;p&gt;There are two options available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;use the default Swift one&lt;/li&gt; 
 &lt;li&gt;use a custom one that will handle optionals well and represent &lt;code&gt;nil&lt;/code&gt; as &lt;code&gt;&quot;null&quot;&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dict = [&quot;1&quot;:2, &quot;2&quot;:&quot;two&quot;, &quot;3&quot;: nil] as [String: Any?]
let json = JSON(dict)
let representation = json.rawString(options: [.castNilToNSNull: true])
// representation is &quot;{\&quot;1\&quot;:2,\&quot;2\&quot;:\&quot;two\&quot;,\&quot;3\&quot;:null}&quot;, which represents {&quot;1&quot;:2,&quot;2&quot;:&quot;two&quot;,&quot;3&quot;:null}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Work with &lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;Alamofire&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;SwiftyJSON nicely wraps the result of the Alamofire JSON response handler:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Alamofire.request(url, method: .get).validate().responseJSON { response in
    switch response.result {
    case .success(let value):
        let json = JSON(value)
        print(&quot;JSON: \(json)&quot;)
    case .failure(let error):
        print(error)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We also provide an extension of Alamofire for serializing NSData to SwiftyJSON&#39;s JSON.&lt;/p&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/SwiftyJSON/Alamofire-SwiftyJSON&quot;&gt;Alamofire-SwiftyJSON&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Work with &lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;Moya&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;SwiftyJSON parse data to JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let provider = MoyaProvider&amp;lt;Backend&amp;gt;()
provider.request(.showProducts) { result in
    switch result {
    case let .success(moyaResponse):
        let data = moyaResponse.data
        let json = JSON(data: data) // convert network data to json
        print(json)
    case let .failure(error):
        print(&quot;error: \(error)&quot;)
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SwiftyJSON Model Generator&lt;/h2&gt; 
&lt;p&gt;Tools to generate SwiftyJSON Models&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Ahmed-Ali/JSONExport&quot;&gt;JSON Export&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>apple/swift-nio</title>
      <link>https://github.com/apple/swift-nio</link>
      <description>&lt;p&gt;Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/swift-server/sswg/raw/main/process/incubation.md#graduated-level&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/sswg-graduated-green.svg?sanitize=true&quot; alt=&quot;sswg:graduated|104x20&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;SwiftNIO&lt;/h1&gt; 
&lt;p&gt;SwiftNIO is a cross-platform asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp;amp; clients.&lt;/p&gt; 
&lt;p&gt;It&#39;s like &lt;a href=&quot;https://netty.io&quot;&gt;Netty&lt;/a&gt;, but written for Swift.&lt;/p&gt; 
&lt;h3&gt;Repository organization&lt;/h3&gt; 
&lt;p&gt;The SwiftNIO project is split across multiple repositories:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Repository&lt;/th&gt; 
   &lt;th&gt;NIO 2 (Swift 5.7+)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio&quot;&gt;https://github.com/apple/swift-nio&lt;/a&gt; &lt;br&gt; SwiftNIO core&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;from: &quot;2.0.0&quot;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-ssl&quot;&gt;https://github.com/apple/swift-nio-ssl&lt;/a&gt; &lt;br&gt; TLS (SSL) support&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;from: &quot;2.0.0&quot;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-http2&quot;&gt;https://github.com/apple/swift-nio-http2&lt;/a&gt;&lt;br&gt; HTTP/2 support&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;from: &quot;1.0.0&quot;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-extras&quot;&gt;https://github.com/apple/swift-nio-extras&lt;/a&gt; &lt;br&gt;useful additions around SwiftNIO&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;from: &quot;1.0.0&quot;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-transport-services&quot;&gt;https://github.com/apple/swift-nio-transport-services&lt;/a&gt; &lt;br&gt; first-class support for macOS, iOS, tvOS, and watchOS&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;from: &quot;1.0.0&quot;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-ssh&quot;&gt;https://github.com/apple/swift-nio-ssh&lt;/a&gt; &lt;br&gt; SSH support&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.upToNextMinor(from: &quot;0.2.0&quot;)&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;NIO 2.29.0 and older support Swift 5.0+, NIO 2.39.0 and older support Swift 5.2+.&lt;/p&gt; 
&lt;p&gt;Within this repository we have a number of products that provide different functionality. This package contains the following products:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;NIO&lt;/code&gt;. This is an umbrella module exporting &lt;code&gt;NIOCore&lt;/code&gt;, &lt;code&gt;NIOEmbedded&lt;/code&gt; and &lt;code&gt;NIOPosix&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOCore&lt;/code&gt;. This provides the core abstractions and types for using SwiftNIO (see &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-nio/main/#conceptual-overview&quot;&gt;&quot;Conceptual Overview&quot;&lt;/a&gt; for more details). Most NIO extension projects that provide things like new &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;s&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;s&lt;/a&gt; or new protocol implementations should only need to depend on &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOPosix&lt;/code&gt;. This provides the primary [&lt;code&gt;EventLoopGroup&lt;/code&gt;], &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;s&lt;/a&gt; for use on POSIX-based systems. This is our high performance core I/O layer. In general, this should only be imported by projects that plan to do some actual I/O, such as high-level protocol implementations or applications.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOEmbedded&lt;/code&gt;. This provides &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioembedded/embeddedchannel&quot;&gt;&lt;code&gt;EmbeddedChannel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioembedded/embeddedeventloop&quot;&gt;&lt;code&gt;EmbeddedEventLoop&lt;/code&gt;&lt;/a&gt;, implementations of the &lt;code&gt;NIOCore&lt;/code&gt; abstractions that provide fine-grained control over their execution. These are most often used for testing, but can also be used to drive protocol implementations in a way that is decoupled from networking altogether.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOConcurrencyHelpers&lt;/code&gt;. This provides a few low-level concurrency primitives that are used by NIO implementations, such as locks and atomics.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOFoundationCompat&lt;/code&gt;. This extends a number of NIO types for better interoperation with Foundation data types. If you are working with Foundation data types such as &lt;code&gt;Data&lt;/code&gt;, you should import this.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOTLS&lt;/code&gt;. This provides a few common abstraction types for working with multiple TLS implementations. Note that this doesn&#39;t provide TLS itself: please investigate &lt;a href=&quot;https://github.com/apple/swift-nio-ssl&quot;&gt;swift-nio-ssl&lt;/a&gt; and &lt;a href=&quot;https://github.com/apple/swift-nio-transport-services&quot;&gt;swift-nio-transport-services&lt;/a&gt; for concrete implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOHTTP1&lt;/code&gt;. This provides a low-level HTTP/1.1 protocol implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOWebSocket&lt;/code&gt;. This provides a low-level WebSocket protocol implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOTestUtils&lt;/code&gt;. This provides a number of helpers for testing projects that use SwiftNIO.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NIOFileSystem&lt;/code&gt;. This provides &lt;code&gt;async&lt;/code&gt; APIs for interacting with the file system.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Protocol Implementations&lt;/h3&gt; 
&lt;p&gt;Below you can find a list of a few protocol implementations that are done with SwiftNIO. This is a non-exhaustive list of protocols that are either part of the SwiftNIO project or are accepted into the &lt;a href=&quot;https://swift.org/server&quot;&gt;SSWG&lt;/a&gt;&#39;s incubation process. All of the libraries listed below do all of their I/O in a non-blocking fashion using SwiftNIO.&lt;/p&gt; 
&lt;h4&gt;Low-level protocol implementations&lt;/h4&gt; 
&lt;p&gt;Low-level protocol implementations are often a collection of &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s that implement a protocol but still require the user to have a good understanding of SwiftNIO. Often, low-level protocol implementations will then be wrapped in high-level libraries with a nicer, more user-friendly API.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Protocol&lt;/th&gt; 
   &lt;th&gt;Client&lt;br&gt;(Sends requests)&lt;/th&gt; 
   &lt;th&gt;Server&lt;br&gt;(Responds to requests)&lt;/th&gt; 
   &lt;th&gt;Repository&lt;/th&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Comment&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;HTTP/1&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio&quot;&gt;apple/swift-nio&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niohttp1&quot;&gt;&lt;code&gt;NIOHTTP1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;official NIO project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;HTTP/2&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-http2&quot;&gt;apple/swift-nio-http2&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio-http2/main/documentation/niohttp2&quot;&gt;&lt;code&gt;NIOHTTP2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;official NIO project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;WebSocket&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio&quot;&gt;apple/swift-nio&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niowebsocket&quot;&gt;&lt;code&gt;NIOWebSocket&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;official NIO project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;TLS&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-ssl&quot;&gt;apple/swift-nio-ssl&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio-ssl/main/documentation/niossl&quot;&gt;&lt;code&gt;NIOSSL&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;official NIO project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SSH&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/apple/swift-nio-ssh&quot;&gt;apple/swift-nio-ssh&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio-ssh/main/documentation/niossh&quot;&gt;&lt;code&gt;NIOSSH&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;official NIO project&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;High-level implementations&lt;/h4&gt; 
&lt;p&gt;High-level implementations are usually libraries that come with an API that doesn&#39;t expose SwiftNIO&#39;s &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; and can therefore be used with very little (or no) SwiftNIO-specific knowledge. The implementations listed below do still do all of their I/O in SwiftNIO and integrate really well with the SwiftNIO ecosystem.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Protocol&lt;/th&gt; 
   &lt;th&gt;Client&lt;br&gt;(Sends requests)&lt;/th&gt; 
   &lt;th&gt;Server&lt;br&gt;(Responds to requests)&lt;/th&gt; 
   &lt;th&gt;Repository&lt;/th&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Comment&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;HTTP&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;❌&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/swift-server/async-http-client&quot;&gt;swift-server/async-http-client&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;AsyncHTTPClient&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;SSWG community project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gRPC&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/grpc/grpc-swift&quot;&gt;grpc/grpc-swift&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;GRPC&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;also offers a low-level API; SSWG community project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;APNS&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;❌&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/swift-server-community/APNSwift&quot;&gt;swift-server-community/APNSwift&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;APNSwift&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;SSWG community project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PostgreSQL&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;❌&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/vapor/postgres-nio&quot;&gt;vapor/postgres-nio&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;PostgresNIO&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;SSWG community project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Redis&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;❌&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/swift-server/RediStack&quot;&gt;swift-server/RediStack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;RediStack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;SSWG community project&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Supported Versions&lt;/h3&gt; 
&lt;h3&gt;SwiftNIO 2&lt;/h3&gt; 
&lt;p&gt;This is the current version of SwiftNIO and will be supported for the foreseeable future.&lt;/p&gt; 
&lt;h3&gt;Swift Versions&lt;/h3&gt; 
&lt;p&gt;We commit to support the most recently released swift version (currently 5.10) and the last two minor releases before that unless this is impossible to do in one codebase. In addition checks are run against the latest beta release (if any) as well as the nightly swift builds and the intent is that these should pass.&lt;/p&gt; 
&lt;p&gt;The most recent versions of SwiftNIO support Swift 5.9 and newer. The minimum Swift version supported by SwiftNIO releases are detailed below:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;SwiftNIO&lt;/th&gt; 
   &lt;th&gt;Minimum Swift Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.0.0 ..&amp;lt; 2.30.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.30.0 ..&amp;lt; 2.40.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.40.0 ..&amp;lt; 2.43.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.43.0 ..&amp;lt; 2.51.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.5.2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.51.0 ..&amp;lt; 2.60.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.6&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.60.0 ..&amp;lt; 2.65.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.65.0 ..&amp;lt; 2.76.0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.8&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2.76.0 ...&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;5.9&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;SwiftNIO 1&lt;/h3&gt; 
&lt;p&gt;SwiftNIO 1 is considered end of life - it is strongly recommended that you move to a newer version. The Core NIO team does not actively work on this version. No new features will be added to this version but PRs which fix bugs or security vulnerabilities will be accepted until the end of May 2022.&lt;/p&gt; 
&lt;p&gt;If you have a SwiftNIO 1 application or library that you would like to migrate to SwiftNIO 2, please check out the &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-nio/main/docs/migration-guide-NIO1-to-NIO2.md&quot;&gt;migration guide&lt;/a&gt; we prepared for you.&lt;/p&gt; 
&lt;p&gt;The latest released SwiftNIO 1 version&amp;nbsp;supports Swift 4.0, 4.1, 4.2, and 5.0.&lt;/p&gt; 
&lt;h3&gt;Supported Platforms&lt;/h3&gt; 
&lt;p&gt;SwiftNIO aims to support all of the platforms where Swift is supported. Currently, it is developed and tested on macOS and Linux, and is known to support the following operating system versions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu 18.04+&lt;/li&gt; 
 &lt;li&gt;macOS 10.9+, iOS 7+; (macOS 10.14+, iOS 12+, tvOS 12+ or watchOS 6+ with &lt;a href=&quot;https://github.com/apple/swift-nio-transport-services&quot;&gt;swift-nio-transport-services&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compatibility&lt;/h3&gt; 
&lt;p&gt;SwiftNIO follows &lt;a href=&quot;https://semver.org/#semantic-versioning-200&quot;&gt;SemVer 2.0.0&lt;/a&gt; with a separate document declaring &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-nio/main/docs/public-api.md&quot;&gt;SwiftNIO&#39;s Public API&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;What this means for you is that you should depend on SwiftNIO with a version range that covers everything from the minimum SwiftNIO version you require up to the next major version. In SwiftPM that can be easily done specifying for example &lt;code&gt;from: &quot;2.0.0&quot;&lt;/code&gt; meaning that you support SwiftNIO in every version starting from 2.0.0 up to (excluding) 3.0.0. SemVer and SwiftNIO&#39;s Public API guarantees should result in a working program without having to worry about testing every single version for compatibility.&lt;/p&gt; 
&lt;h2&gt;Conceptual Overview&lt;/h2&gt; 
&lt;p&gt;SwiftNIO is fundamentally a low-level tool for building high-performance networking applications in Swift. It particularly targets those use-cases where using a &quot;thread-per-connection&quot; model of concurrency is inefficient or untenable. This is a common limitation when building servers that use a large number of relatively low-utilization connections, such as HTTP servers.&lt;/p&gt; 
&lt;p&gt;To achieve its goals, SwiftNIO extensively uses &quot;non-blocking I/O&quot;: hence the name! Non-blocking I/O differs from the more common blocking I/O model because the application does not wait for data to be sent to or received from the network: instead, SwiftNIO asks for the kernel to notify it when I/O operations can be performed without waiting.&lt;/p&gt; 
&lt;p&gt;SwiftNIO does not aim to provide high-level solutions like, for example, web frameworks do. Instead, SwiftNIO is focused on providing the low-level building blocks for these higher-level applications. When it comes to building a web application, most users will not want to use SwiftNIO directly: instead, they&#39;ll want to use one of the many great web frameworks available in the Swift ecosystem. Those web frameworks, however, may choose to use SwiftNIO under the covers to provide their networking support.&lt;/p&gt; 
&lt;p&gt;The following sections will describe the low-level tools that SwiftNIO provides, and provide a quick overview of how to work with them. If you feel comfortable with these concepts, then you can skip right ahead to the other sections of this README.&lt;/p&gt; 
&lt;h3&gt;Basic Architecture&lt;/h3&gt; 
&lt;p&gt;The basic building blocks of SwiftNIO are the following 8 types of objects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopgroup&quot;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Bootstrap&lt;/code&gt;, several related structures, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a struct, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&lt;/code&gt;&lt;/a&gt;, a generic class, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventlooppromise&quot;&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;, a generic struct, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All SwiftNIO applications are ultimately constructed of these various components.&lt;/p&gt; 
&lt;h4&gt;EventLoops and EventLoopGroups&lt;/h4&gt; 
&lt;p&gt;The basic I/O primitive of SwiftNIO is the event loop. The event loop is an object that waits for events (usually I/O related events, such as &quot;data received&quot;) to happen and then fires some kind of callback when they do. In almost all SwiftNIO applications there will be relatively few event loops: usually only one or two per CPU core the application wants to use. Generally speaking, event loops run for the entire lifetime of your application, spinning in an endless loop dispatching events.&lt;/p&gt; 
&lt;p&gt;Event loops are gathered together into event loop &lt;em&gt;groups&lt;/em&gt;. These groups provide a mechanism to distribute work around the event loops. For example, when listening for inbound connections the listening socket will be registered on one event loop. However, we don&#39;t want all connections that are accepted on that listening socket to be registered with the same event loop, as that would potentially overload one event loop while leaving the others empty. For that reason, the event loop group provides the ability to spread load across multiple event loops.&lt;/p&gt; 
&lt;p&gt;In SwiftNIO today there is one &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopgroup&quot;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; implementation, and two &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; implementations. For production applications there is the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioposix/multithreadedeventloopgroup&quot;&gt;&lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopgroup&quot;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; that creates a number of threads (using the POSIX &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX_Threads&quot;&gt;&lt;code&gt;pthreads&lt;/code&gt;&lt;/a&gt; library) and places one &lt;code&gt;SelectableEventLoop&lt;/code&gt; on each one. The &lt;code&gt;SelectableEventLoop&lt;/code&gt; is an event loop that uses a selector (either &lt;a href=&quot;https://en.wikipedia.org/wiki/Kqueue&quot;&gt;&lt;code&gt;kqueue&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Epoll&quot;&gt;&lt;code&gt;epoll&lt;/code&gt;&lt;/a&gt; depending on the target system) to manage I/O events from file descriptors and to dispatch work. These &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;s&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopgroup&quot;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;s&lt;/a&gt; are provided by the &lt;code&gt;NIOPosix&lt;/code&gt; module. Additionally, there is the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioembedded/embeddedeventloop&quot;&gt;&lt;code&gt;EmbeddedEventLoop&lt;/code&gt;&lt;/a&gt;, which is a dummy event loop that is used primarily for testing purposes, provided by the &lt;code&gt;NIOEmbedded&lt;/code&gt; module.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s have a number of important properties. Most vitally, they are the way all work gets done in SwiftNIO applications. In order to ensure thread-safety, any work that wants to be done on almost any of the other objects in SwiftNIO must be dispatched via an &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; objects own almost all the other objects in a SwiftNIO application, and understanding their execution model is critical for building high-performance SwiftNIO applications.&lt;/p&gt; 
&lt;h4&gt;Channels, Channel Handlers, Channel Pipelines, and Channel Contexts&lt;/h4&gt; 
&lt;p&gt;While &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s are critical to the way SwiftNIO works, most users will not interact with them substantially beyond asking them to create &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventlooppromise&quot;&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;s and to schedule work. The parts of a SwiftNIO application most users will spend the most time interacting with are &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s.&lt;/p&gt; 
&lt;p&gt;Almost every file descriptor that a user interacts with in a SwiftNIO program is associated with a single &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; owns this file descriptor, and is responsible for managing its lifetime. It is also responsible for processing inbound and outbound events on that file descriptor: whenever the event loop has an event that corresponds to a file descriptor, it will notify the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; that owns that file descriptor.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s by themselves, however, are not useful. After all, it is a rare application that doesn&#39;t want to do anything with the data it sends or receives on a socket! So the other important part of the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is a sequence of objects, called &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, that process events on a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s process these events one after another, in order, mutating and transforming events as they go. This can be thought of as a data processing pipeline; hence the name &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are either Inbound or Outbound handlers, or both. Inbound handlers process &quot;inbound&quot; events: events like reading data from a socket, reading socket close, or other kinds of events initiated by remote peers. Outbound handlers process &quot;outbound&quot; events, such as writes, connection attempts, and local socket closes.&lt;/p&gt; 
&lt;p&gt;Each handler processes the events in order. For example, read events are passed from the front of the pipeline to the back, one handler at a time, while write events are passed from the back of the pipeline to the front. Each handler may, at any time, generate either inbound or outbound events that will be sent to the next handler in whichever direction is appropriate. This allows handlers to split up reads, coalesce writes, delay connection attempts, and generally perform arbitrary transformations of events.&lt;/p&gt; 
&lt;p&gt;In general, &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are designed to be highly re-usable components. This means they tend to be designed to be as small as possible, performing one specific data transformation. This allows handlers to be composed together in novel and flexible ways, which helps with code reuse and encapsulation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are able to keep track of where they are in a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; by using a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandlercontext&quot;&gt;&lt;code&gt;ChannelHandlerContext&lt;/code&gt;&lt;/a&gt;. These objects contain references to the previous and next channel handler in the pipeline, ensuring that it is always possible for a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; to emit events while it remains in a pipeline.&lt;/p&gt; 
&lt;p&gt;SwiftNIO ships with many &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s built in that provide useful functionality, such as HTTP parsing. In addition, high-performance applications will want to provide as much of their logic as possible in &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, as it helps avoid problems with context switching.&lt;/p&gt; 
&lt;p&gt;Additionally, SwiftNIO ships with a few &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; implementations. In particular, it ships with &lt;code&gt;ServerSocketChannel&lt;/code&gt;, a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for sockets that accept inbound connections; &lt;code&gt;SocketChannel&lt;/code&gt;, a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for TCP connections; and &lt;code&gt;DatagramChannel&lt;/code&gt;, a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for UDP sockets. All of these are provided by the &lt;code&gt;NIOPosix&lt;/code&gt; module. It also provides &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioembedded/embeddedchannel&quot;&gt;&lt;code&gt;EmbeddedChannel&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; primarily used for testing, provided by the &lt;code&gt;NIOEmbedded&lt;/code&gt; module.&lt;/p&gt; 
&lt;h5&gt;A Note on Blocking&lt;/h5&gt; 
&lt;p&gt;One of the important notes about &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;s is that they are thread-safe. This is very important for writing SwiftNIO applications, as it allows you to write much simpler &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s in the knowledge that they will not require synchronization.&lt;/p&gt; 
&lt;p&gt;However, this is achieved by dispatching all code on the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; on the same thread as the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. This means that, as a general rule, &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s &lt;strong&gt;must not&lt;/strong&gt; call blocking code without dispatching it to a background thread. If a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelhandler&quot;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; blocks for any reason, all &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s attached to the parent &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; will be unable to progress until the blocking call completes.&lt;/p&gt; 
&lt;p&gt;This is a common concern while writing SwiftNIO applications. If it is useful to write code in a blocking style, it is highly recommended that you dispatch work to a different thread when you&#39;re done with it in your pipeline.&lt;/p&gt; 
&lt;h4&gt;Bootstrap&lt;/h4&gt; 
&lt;p&gt;While it is possible to configure and register &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s with &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloop&quot;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s directly, it is generally more useful to have a higher-level abstraction to handle this work.&lt;/p&gt; 
&lt;p&gt;For this reason, SwiftNIO ships a number of &lt;code&gt;Bootstrap&lt;/code&gt; objects whose purpose is to streamline the creation of channels. Some &lt;code&gt;Bootstrap&lt;/code&gt; objects also provide other functionality, such as support for Happy Eyeballs for making TCP connection attempts.&lt;/p&gt; 
&lt;p&gt;Currently SwiftNIO ships with three &lt;code&gt;Bootstrap&lt;/code&gt; objects in the &lt;code&gt;NIOPosix&lt;/code&gt; module: &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioposix/serverbootstrap&quot;&gt;&lt;code&gt;ServerBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping listening channels; &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioposix/clientbootstrap&quot;&gt;&lt;code&gt;ClientBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping client TCP channels; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nioposix/datagrambootstrap&quot;&gt;&lt;code&gt;DatagramBootstrap&lt;/code&gt;&lt;/a&gt; for bootstrapping UDP channels.&lt;/p&gt; 
&lt;h4&gt;ByteBuffer&lt;/h4&gt; 
&lt;p&gt;The majority of the work in a SwiftNIO application involves shuffling buffers of bytes around. At the very least, data is sent and received to and from the network in the form of buffers of bytes. For this reason it&#39;s very important to have a high-performance data structure that is optimized for the kind of work SwiftNIO applications perform.&lt;/p&gt; 
&lt;p&gt;For this reason, SwiftNIO provides &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a fast copy-on-write byte buffer that forms a key building block of most SwiftNIO applications. This type is provided by the &lt;code&gt;NIOCore&lt;/code&gt; module.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; provides a number of useful features, and in addition provides a number of hooks to use it in an &quot;unsafe&quot; mode. This turns off bounds checking for improved performance, at the cost of potentially opening your application up to memory correctness problems.&lt;/p&gt; 
&lt;p&gt;In general, it is highly recommended that you use the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; in its safe mode at all times.&lt;/p&gt; 
&lt;p&gt;For more details on the API of &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, please see our API documentation, linked below.&lt;/p&gt; 
&lt;h4&gt;Promises and Futures&lt;/h4&gt; 
&lt;p&gt;One major difference between writing concurrent code and writing synchronous code is that not all actions will complete immediately. For example, when you write data on a channel, it is possible that the event loop will not be able to immediately flush that write out to the network. For this reason, SwiftNIO provides &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventlooppromise&quot;&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to manage operations that complete &lt;em&gt;asynchronously&lt;/em&gt;. These types are provided by the &lt;code&gt;NIOCore&lt;/code&gt; module.&lt;/p&gt; 
&lt;p&gt;An &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is essentially a container for the return value of a function that will be populated &lt;em&gt;at some time in the future&lt;/em&gt;. Each &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; has a corresponding &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventlooppromise&quot;&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, which is the object that the result will be put into. When the promise is succeeded, the future will be fulfilled.&lt;/p&gt; 
&lt;p&gt;If you had to poll the future to detect when it completed that would be quite inefficient, so &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is designed to have managed callbacks. Essentially, you can chain callbacks off the future that will be executed when a result is available. The &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; will even carefully arrange the scheduling to ensure that these callbacks always execute on the event loop that initially created the promise, which helps ensure that you don&#39;t need too much synchronization around &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; callbacks.&lt;/p&gt; 
&lt;p&gt;Another important topic for consideration is the difference between how the promise passed to &lt;code&gt;close&lt;/code&gt; works as opposed to &lt;code&gt;closeFuture&lt;/code&gt; on a &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. For example, the promise passed into &lt;code&gt;close&lt;/code&gt; will succeed after the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is closed down but before the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is completely cleared out. This will allow you to take action on the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; before it is completely cleared out, if needed. If it is desired to wait for the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; to close down and the &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/channelpipeline&quot;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; to be cleared out without any further action, then the better option would be to wait for the &lt;code&gt;closeFuture&lt;/code&gt; to succeed.&lt;/p&gt; 
&lt;p&gt;There are several functions for applying callbacks to &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/niocore/eventloopfuture&quot;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, depending on how and when you want them to execute. Details of these functions is left to the API documentation.&lt;/p&gt; 
&lt;h3&gt;Design Philosophy&lt;/h3&gt; 
&lt;p&gt;SwiftNIO is designed to be a powerful tool for building networked applications and frameworks, but it is not intended to be the perfect solution for all levels of abstraction. SwiftNIO is tightly focused on providing the basic I/O primitives and protocol implementations at low levels of abstraction, leaving more expressive but slower abstractions to the wider community to build. The intention is that SwiftNIO will be a building block for server-side applications, not necessarily the framework those applications will use directly.&lt;/p&gt; 
&lt;p&gt;Applications that need extremely high performance from their networking stack may choose to use SwiftNIO directly in order to reduce the overhead of their abstractions. These applications should be able to maintain extremely high performance with relatively little maintenance cost. SwiftNIO also focuses on providing useful abstractions for this use-case, such that extremely high performance network servers can be built directly.&lt;/p&gt; 
&lt;p&gt;The core SwiftNIO repository will contain a few extremely important protocol implementations, such as HTTP, directly in tree. However, we believe that most protocol implementations should be decoupled from the release cycle of the underlying networking stack, as the release cadence is likely to be very different (either much faster or much slower). For this reason, we actively encourage the community to develop and maintain their protocol implementations out-of-tree. Indeed, some first-party SwiftNIO protocol implementations, including our TLS and HTTP/2 bindings, are developed out-of-tree!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-nio/main/documentation/nio&quot;&gt;API documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;p&gt;There are currently several example projects that demonstrate how to use SwiftNIO.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;chat client&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatClient&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatClient&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;chat server&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatServer&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatServer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;echo client&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoClient&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoClient&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;echo server&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoServer&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoServer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UDP echo client&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoClient&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoClient&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UDP echo server&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoServer&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoServer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP client&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Client&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP server&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Server&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;WebSocket client&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketClient&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketClient&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;WebSocket server&lt;/strong&gt; &lt;a href=&quot;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketServer&quot;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketServer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To build &amp;amp; run them, run following command, replace TARGET_NAME with the folder name under &lt;code&gt;./Sources&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;swift run TARGET_NAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, to run NIOHTTP1Server, run following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;swift run NIOHTTP1Server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;SwiftNIO primarily uses &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;SwiftPM&lt;/a&gt; as its build tool, so we recommend using that as well. If you want to depend on SwiftNIO in your own project, it&#39;s as simple as adding a &lt;code&gt;dependencies&lt;/code&gt; clause to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/apple/swift-nio.git&quot;, from: &quot;2.0.0&quot;)
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then adding the appropriate SwiftNIO module(s) to your target dependencies. The syntax for adding target dependencies differs slightly between Swift versions. For example, if you want to depend on the &lt;code&gt;NIOCore&lt;/code&gt;, &lt;code&gt;NIOPosix&lt;/code&gt; and &lt;code&gt;NIOHTTP1&lt;/code&gt; modules, specify the following dependencies:&lt;/p&gt; 
&lt;h4&gt;Swift 5.4 and newer (&lt;code&gt;swift-tools-version:5.4&lt;/code&gt;)&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;dependencies: [.product(name: &quot;NIOCore&quot;, package: &quot;swift-nio&quot;),
               .product(name: &quot;NIOPosix&quot;, package: &quot;swift-nio&quot;),
               .product(name: &quot;NIOHTTP1&quot;, package: &quot;swift-nio&quot;)]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using Xcode Package support&lt;/h3&gt; 
&lt;p&gt;If your project is set up as an Xcode project and you&#39;re using Xcode 11+, you can add SwiftNIO as a dependency to your Xcode project by clicking File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency. In the upcoming dialog, please enter &lt;code&gt;https://github.com/apple/swift-nio.git&lt;/code&gt; and click Next twice. Finally, select the targets you are planning to use (for example &lt;code&gt;NIOCore&lt;/code&gt;, &lt;code&gt;NIOHTTP1&lt;/code&gt;, and &lt;code&gt;NIOFoundationCompat&lt;/code&gt;) and click finish. Now will be able to &lt;code&gt;import NIOCore&lt;/code&gt; (as well as all the other targets you have selected) in your project.&lt;/p&gt; 
&lt;p&gt;To work on SwiftNIO itself, or to investigate some of the demonstration applications, you can clone the repository directly and use SwiftPM to help build it. For example, you can run the following commands to compile and run the example echo server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;swift build
swift test
swift run NIOEchoServer
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To verify that it is working, you can use another shell to attempt to connect to it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo &quot;Hello SwiftNIO&quot; | nc localhost 9999
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If all goes well, you&#39;ll see the message echoed back to you.&lt;/p&gt; 
&lt;p&gt;To work on SwiftNIO in Xcode, you can just open the &lt;code&gt;Package.swift&lt;/code&gt; file in Xcode and use Xcode&#39;s support for SwiftPM Packages.&lt;/p&gt; 
&lt;h3&gt;An alternative: using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Alternatively, you may want to develop or test with &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;First make sure you have &lt;a href=&quot;https://www.docker.com/community-edition&quot;&gt;Docker&lt;/a&gt; installed, next run the following commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml run test&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image with Swift runtime and other build and test dependencies, compile SwiftNIO and run the unit and integration tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up echo&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOEchoServer&lt;/code&gt; on &lt;code&gt;localhost:9999&lt;/code&gt;. Test it by &lt;code&gt;echo Hello SwiftNIO | nc localhost 9999&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up http&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOHTTP1Server&lt;/code&gt; on &lt;code&gt;localhost:8888&lt;/code&gt;. Test it by &lt;code&gt;curl http://localhost:8888&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml -f docker/docker-compose.2204.57.yaml run test&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image using Ubuntu 22.04 and Swift 5.7, compile SwiftNIO and run the unit and integration tests. Files exist for other Ubuntu and swift versions in the docker directory.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Developing SwiftNIO&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This section is only relevant if you would like to develop SwiftNIO yourself. You can ignore the information here if you just want to use SwiftNIO as a SwiftPM package.&lt;/p&gt; 
&lt;p&gt;For the most part, SwiftNIO development is as straightforward as any other SwiftPM project. With that said, we do have a few processes that are worth understanding before you contribute. For details, please see &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; in this repository.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;SwiftNIO&#39;s &lt;code&gt;main&lt;/code&gt; branch is the development branch for the next releases of SwiftNIO 2, it&#39;s Swift 5-only.&lt;/p&gt; 
&lt;p&gt;To be able to compile and run SwiftNIO and the integration tests, you need to have a few prerequisites installed on your system.&lt;/p&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode 11.4 or newer, Xcode 12 recommended.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift 5.7 or newer from &lt;a href=&quot;https://swift.org/download/#releases&quot;&gt;swift.org/download&lt;/a&gt;. We always recommend to use the latest released version.&lt;/li&gt; 
 &lt;li&gt;netcat (for integration tests only)&lt;/li&gt; 
 &lt;li&gt;lsof (for integration tests only)&lt;/li&gt; 
 &lt;li&gt;shasum (for integration tests only)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Ubuntu 18.04&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;# install swift tarball from https://swift.org/downloads
apt-get install -y git curl libatomic1 libxml2 netcat-openbsd lsof perl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28+&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;dnf install swift-lang /usr/bin/nc /usr/bin/lsof /usr/bin/shasum
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Benchmarks&lt;/h3&gt; 
&lt;p&gt;Benchmarks for &lt;code&gt;swift-nio&lt;/code&gt; are in a separate Swift Package in the &lt;code&gt;Benchmarks&lt;/code&gt; subfolder of this repository. They use the &lt;a href=&quot;https://github.com/ordo-one/package-benchmark&quot;&gt;&lt;code&gt;package-benchmark&lt;/code&gt;&lt;/a&gt; plugin. Benchmarks depends on the &lt;a href=&quot;https://jemalloc.net&quot;&gt;&lt;code&gt;jemalloc&lt;/code&gt;&lt;/a&gt; memory allocation library, which is used by &lt;code&gt;package-benchmark&lt;/code&gt; to capture memory allocation statistics. An installation guide can be found in the &lt;a href=&quot;https://swiftpackageindex.com/ordo-one/package-benchmark/documentation/benchmark/gettingstarted#Installing-Prerequisites-and-Platform-Support&quot;&gt;Getting Started article&lt;/a&gt; of &lt;code&gt;package-benchmark&lt;/code&gt;. Afterwards you can run the benchmarks from CLI by going to the &lt;code&gt;Benchmarks&lt;/code&gt; subfolder (e.g. &lt;code&gt;cd Benchmarks&lt;/code&gt;) and invoking:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;swift package benchmark
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information please refer to &lt;code&gt;swift package benchmark --help&lt;/code&gt; or the &lt;a href=&quot;https://swiftpackageindex.com/ordo-one/package-benchmark/documentation/benchmark&quot;&gt;documentation of &lt;code&gt;package-benchmark&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pointfreeco/swift-snapshot-testing</title>
      <link>https://github.com/pointfreeco/swift-snapshot-testing</link>
      <description>&lt;p&gt;📸 Delightful Swift snapshot testing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📸 SnapshotTesting&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://actions-badge.atrox.dev/pointfreeco/swift-snapshot-testing/goto&quot;&gt;&lt;img src=&quot;https://github.com/pointfreeco/swift-snapshot-testing/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://pointfree.co/slack-invite&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&amp;amp;logo=slack&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-snapshot-testing%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-snapshot-testing%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Delightful Swift snapshot testing.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Once &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/#installation&quot;&gt;installed&lt;/a&gt;, &lt;em&gt;no additional configuration is required&lt;/em&gt;. You can import the &lt;code&gt;SnapshotTesting&lt;/code&gt; module and call the &lt;code&gt;assertSnapshot&lt;/code&gt; function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SnapshotTesting
import XCTest

class MyViewControllerTests: XCTestCase {
  func testMyViewController() {
    let vc = MyViewController()

    assertSnapshot(of: vc, as: .image)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When an assertion first runs, a snapshot is automatically recorded to disk and the test will fail, printing out the file path of any newly-recorded reference.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;❌ failed - No reference was found on disk. Automatically recorded snapshot: …&lt;/p&gt; 
 &lt;p&gt;open &quot;…/MyAppTests/__Snapshots__/MyViewControllerTests/testMyViewController.png&quot;&lt;/p&gt; 
 &lt;p&gt;Re-run &quot;testMyViewController&quot; to test against the newly-recorded snapshot.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Repeat test runs will load this reference and compare it with the runtime value. If they don&#39;t match, the test will fail and describe the difference. Failures can be inspected from Xcode&#39;s Report Navigator or by inspecting the file URLs of the failure.&lt;/p&gt; 
&lt;p&gt;You can record a new reference by customizing snapshots inline with the assertion, or using the &lt;code&gt;withSnapshotTesting&lt;/code&gt; tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Record just this one snapshot
assertSnapshot(of: vc, as: .image, record: .all)

// Record all snapshots in a scope:
withSnapshotTesting(record: .all) {
  assertSnapshot(of: vc1, as: .image)
  assertSnapshot(of: vc2, as: .image)
  assertSnapshot(of: vc3, as: .image)
}

// Record all snapshots in an XCTestCase subclass:
class FeatureTests: XCTestCase {
  override func invokeTest() {
    withSnapshotTesting(record: .all) {
      super.invokeTest()
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Snapshot Anything&lt;/h2&gt; 
&lt;p&gt;While most snapshot testing libraries in the Swift community are limited to &lt;code&gt;UIImage&lt;/code&gt;s of &lt;code&gt;UIView&lt;/code&gt;s, SnapshotTesting can work with &lt;em&gt;any&lt;/em&gt; format of &lt;em&gt;any&lt;/em&gt; value on &lt;em&gt;any&lt;/em&gt; Swift platform!&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;assertSnapshot&lt;/code&gt; function accepts a value and any snapshot strategy that value supports. This means that a view or view controller can be tested against an image representation &lt;em&gt;and&lt;/em&gt; against a textual representation of its properties and subview hierarchy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;assertSnapshot(of: vc, as: .image)
assertSnapshot(of: vc, as: .recursiveDescription)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;View testing is highly configurable. You can override trait collections (for specific size classes and content size categories) and generate device-agnostic snapshots, all from a single simulator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;assertSnapshot(of: vc, as: .image(on: .iPhoneSe))
assertSnapshot(of: vc, as: .recursiveDescription(on: .iPhoneSe))

assertSnapshot(of: vc, as: .image(on: .iPhoneSe(.landscape)))
assertSnapshot(of: vc, as: .recursiveDescription(on: .iPhoneSe(.landscape)))

assertSnapshot(of: vc, as: .image(on: .iPhoneX))
assertSnapshot(of: vc, as: .recursiveDescription(on: .iPhoneX))

assertSnapshot(of: vc, as: .image(on: .iPadMini(.portrait)))
assertSnapshot(of: vc, as: .recursiveDescription(on: .iPadMini(.portrait)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Snapshots must be compared using the exact same simulator that originally took the reference to avoid discrepancies between images.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Better yet, SnapshotTesting isn&#39;t limited to views and view controllers! There are a number of available snapshot strategies to choose from.&lt;/p&gt; 
&lt;p&gt;For example, you can snapshot test URL requests (&lt;em&gt;e.g.&lt;/em&gt;, those that your API client prepares).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;assertSnapshot(of: urlRequest, as: .raw)
// POST http://localhost:8080/account
// Cookie: pf_session={&quot;userId&quot;:&quot;1&quot;}
//
// email=blob%40pointfree.co&amp;amp;name=Blob
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And you can snapshot test &lt;code&gt;Encodable&lt;/code&gt; values against their JSON &lt;em&gt;and&lt;/em&gt; property list representations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;assertSnapshot(of: user, as: .json)
// {
//   &quot;bio&quot; : &quot;Blobbed around the world.&quot;,
//   &quot;id&quot; : 1,
//   &quot;name&quot; : &quot;Blobby&quot;
// }

assertSnapshot(of: user, as: .plist)
// &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
// &amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot;
//  &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
// &amp;lt;plist version=&quot;1.0&quot;&amp;gt;
// &amp;lt;dict&amp;gt;
//   &amp;lt;key&amp;gt;bio&amp;lt;/key&amp;gt;
//   &amp;lt;string&amp;gt;Blobbed around the world.&amp;lt;/string&amp;gt;
//   &amp;lt;key&amp;gt;id&amp;lt;/key&amp;gt;
//   &amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;
//   &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;
//   &amp;lt;string&amp;gt;Blobby&amp;lt;/string&amp;gt;
// &amp;lt;/dict&amp;gt;
// &amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In fact, &lt;em&gt;any&lt;/em&gt; value can be snapshot-tested by default using its &lt;a href=&quot;https://developer.apple.com/documentation/swift/mirror&quot;&gt;mirror&lt;/a&gt;!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;assertSnapshot(of: user, as: .dump)
// ▿ User
//   - bio: &quot;Blobbed around the world.&quot;
//   - id: 1
//   - name: &quot;Blobby&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your data can be represented as an image, text, or data, you can write a snapshot test for it!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The latest documentation is available &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing/main/documentation/snapshottesting&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Xcode&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; By default, Xcode will try to add the SnapshotTesting package to your project&#39;s main application/framework target. Please ensure that SnapshotTesting is added to a &lt;em&gt;test&lt;/em&gt; target instead, as documented in the last step, below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, navigate through &lt;strong&gt;Swift Packages&lt;/strong&gt; and select &lt;strong&gt;Add Package Dependency…&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Enter package repository URL: &lt;code&gt;https://github.com/pointfreeco/swift-snapshot-testing&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Confirm the version and let Xcode resolve the package.&lt;/li&gt; 
 &lt;li&gt;On the final dialog, update SnapshotTesting&#39;s &lt;strong&gt;Add to Target&lt;/strong&gt; column to a test target that will contain snapshot tests (if you have more than one test target, you can later add SnapshotTesting to them by manually linking the library in its build phase).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;If you want to use SnapshotTesting in any other project that uses &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;SwiftPM&lt;/a&gt;, add the package as a dependency in &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
  .package(
    url: &quot;https://github.com/pointfreeco/swift-snapshot-testing&quot;,
    from: &quot;1.12.0&quot;
  ),
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, add &lt;code&gt;SnapshotTesting&lt;/code&gt; as a dependency of your test target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;targets: [
  .target(name: &quot;MyApp&quot;),
  .testTarget(
    name: &quot;MyAppTests&quot;,
    dependencies: [
      &quot;MyApp&quot;,
      .product(name: &quot;SnapshotTesting&quot;, package: &quot;swift-snapshot-testing&quot;),
    ]
  )
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing/main/documentation/snapshottesting/snapshotting&quot;&gt;&lt;strong&gt;Dozens of snapshot strategies&lt;/strong&gt;&lt;/a&gt;. Snapshot testing isn&#39;t just for &lt;code&gt;UIView&lt;/code&gt;s and &lt;code&gt;CALayer&lt;/code&gt;s. Write snapshots against &lt;em&gt;any&lt;/em&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing/main/documentation/snapshottesting/customstrategies&quot;&gt;&lt;strong&gt;Write your own snapshot strategies&lt;/strong&gt;&lt;/a&gt;. If you can convert it to an image, string, data, or your own diffable format, you can snapshot test it! Build your own snapshot strategies from scratch or transform existing ones.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No configuration required.&lt;/strong&gt; Don&#39;t fuss with scheme settings and environment variables. Snapshots are automatically saved alongside your tests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;More hands-off.&lt;/strong&gt; New snapshots are recorded whether &lt;code&gt;isRecording&lt;/code&gt; mode is &lt;code&gt;true&lt;/code&gt; or not.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Subclass-free.&lt;/strong&gt; Assert from any XCTest case or Quick spec.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Device-agnostic snapshots.&lt;/strong&gt; Render views and view controllers for specific devices and trait collections from a single simulator.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;First-class Xcode support.&lt;/strong&gt; Image differences are captured as XCTest attachments. Text differences are rendered in inline error messages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Supports any platform that supports Swift.&lt;/strong&gt; Write snapshot tests for iOS, Linux, macOS, and tvOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SceneKit, SpriteKit, and WebKit support.&lt;/strong&gt; Most snapshot testing libraries don&#39;t support these view subclasses.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;Codable&lt;/code&gt; support&lt;/strong&gt;. Snapshot encodable data structures into their JSON and property list representations.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom diff tool integration&lt;/strong&gt;. Configure failure messages to print diff commands for &lt;a href=&quot;https://kaleidoscope.app&quot;&gt;Kaleidoscope&lt;/a&gt; or your diff tool of choice. &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;SnapshotTesting.diffToolCommand = { &quot;ksdiff \($0) \($1)&quot; }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Plug-ins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/cashapp/AccessibilitySnapshot&quot;&gt;AccessibilitySnapshot&lt;/a&gt; adds easy regression testing for iOS accessibility.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Sherlouk/AccessibilitySnapshotColorBlindness&quot;&gt;AccessibilitySnapshotColorBlindness&lt;/a&gt; adds snapshot strategies for color blindness simulation on iOS views, view controllers and images.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/SebastianOsinski/GRDBSnapshotTesting&quot;&gt;GRDBSnapshotTesting&lt;/a&gt; adds snapshot strategy for testing SQLite database migrations made with &lt;a href=&quot;https://github.com/groue/GRDB.swift&quot;&gt;GRDB&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/tahirmt/Nimble-SnapshotTesting&quot;&gt;Nimble-SnapshotTesting&lt;/a&gt; adds &lt;a href=&quot;https://github.com/Quick/Nimble&quot;&gt;Nimble&lt;/a&gt; matchers for SnapshotTesting to be used by Swift Package Manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BarredEwe/Prefire&quot;&gt;Prefire&lt;/a&gt; generating Snapshot Tests via &lt;a href=&quot;https://github.com/apple/swift-package-manager/raw/main/Documentation/Plugins.md&quot;&gt;Swift Package Plugins&lt;/a&gt; using SwiftUI &lt;code&gt;Preview&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/doordash-oss/swiftui-preview-snapshots&quot;&gt;PreviewSnapshots&lt;/a&gt; share &lt;code&gt;View&lt;/code&gt; configurations between SwiftUI Previews and snapshot tests and generate several snapshots with a single test assertion.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-html&quot;&gt;swift-html&lt;/a&gt; is a Swift DSL for type-safe, extensible, and transformable HTML documents and includes an &lt;code&gt;HtmlSnapshotTesting&lt;/code&gt; module to snapshot test its HTML documents.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Killectro/swift-snapshot-testing-nimble&quot;&gt;swift-snapshot-testing-nimble&lt;/a&gt; adds &lt;a href=&quot;https://github.com/Quick/Nimble&quot;&gt;Nimble&lt;/a&gt; matchers for SnapshotTesting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Sherlouk/swift-snapshot-testing-stitch/&quot;&gt;swift-snapshot-testing-stitch&lt;/a&gt; adds the ability to stitch multiple UIView&#39;s or UIViewController&#39;s together in a single test.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/tahirmt/swift-snapshot-testing-dump&quot;&gt;SnapshotTestingDump&lt;/a&gt; Adds support to use &lt;a href=&quot;https://github.com/pointfreeco/swift-custom-dump/&quot;&gt;swift-custom-dump&lt;/a&gt; by using &lt;code&gt;customDump&lt;/code&gt; strategy for &lt;code&gt;Any&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/alexey1312/SnapshotTestingHEIC&quot;&gt;SnapshotTestingHEIC&lt;/a&gt; adds image support using the HEIC storage format which reduces file sizes in comparison to PNG.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gregersson/swift-snapshot-testing-vision&quot;&gt;SnapshotVision&lt;/a&gt; adds snapshot strategy for text recognition on views and images. Uses Apples Vision framework.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Have you written your own SnapshotTesting plug-in? &lt;a href=&quot;https://github.com/pointfreeco/swift-snapshot-testing/edit/master/README.md&quot;&gt;Add it here&lt;/a&gt; and submit a pull request!&lt;/p&gt; 
&lt;h2&gt;Related Tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/uber/ios-snapshot-test-case/&quot;&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt;&lt;/a&gt; helped introduce screen shot testing to a broad audience in the iOS community. Experience with it inspired the creation of this library.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://jestjs.io&quot;&gt;Jest&lt;/a&gt; brought generalized snapshot testing to the JavaScript community with a polished user experience. Several features of this library (diffing, automatically capturing new snapshots) were directly influenced.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;SnapshotTesting was designed with &lt;a href=&quot;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&quot;&gt;witness-oriented programming&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This concept (and more) are explored thoroughly in a series of episodes on &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and Swift hosted by &lt;a href=&quot;https://twitter.com/mbrandonw&quot;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/stephencelis&quot;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Witness-oriented programming and the design of this library was explored in the following &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; episodes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep33-protocol-witnesses-part-1&quot;&gt;Episode 33&lt;/a&gt;: Protocol Witnesses: Part 1&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-1&quot;&gt;Episode 34&lt;/a&gt;: Protocol Witnesses: Part 2&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1&quot;&gt;Episode 35&lt;/a&gt;: Advanced Protocol Witnesses: Part 1&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2&quot;&gt;Episode 36&lt;/a&gt;: Advanced Protocol Witnesses: Part 2&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1&quot;&gt;Episode 37&lt;/a&gt;: Protocol-Oriented Library Design: Part 1&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep38-protocol-oriented-library-design-part-2&quot;&gt;Episode 38&lt;/a&gt;: Protocol-Oriented Library Design: Part 2&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&quot;&gt;Episode 39&lt;/a&gt;: Witness-Oriented Library Design&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep40-async-functional-refactoring&quot;&gt;Episode 40&lt;/a&gt;: Async Functional Refactoring&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&quot;&gt;Episode 41&lt;/a&gt;: A Tour of Snapshot Testing 🆓&lt;/li&gt; 
&lt;/ul&gt; 
&lt;a href=&quot;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&quot;&gt; &lt;img alt=&quot;video poster image&quot; src=&quot;https://d3rccdn33rt8ze.cloudfront.net/episodes/0041.jpeg&quot; width=&quot;480&quot;&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is released under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>khanhduytran0/LiveContainer</title>
      <link>https://github.com/khanhduytran0/LiveContainer</link>
      <description>&lt;p&gt;Run iOS app without actually installing it!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LiveContainer&lt;/h1&gt; 
&lt;p&gt;Run iOS app without actually installing it!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Allows you to install unlimited apps (10 apps limit of free developer account do not apply here!), have multiple versions of an app installed and multiple data containers.&lt;/li&gt; 
 &lt;li&gt;When JIT is available, codesign is entirely bypassed, no need to sign your apps before installing. Otherwise, app will be signed with the same certificate used by LiveContainer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] It’s recommended to follow the following steps to set up JIT-Less mode for using LiveContainer without JIT. If you encounter any issues, please review #265 first before reporting them.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;Unfortunately, not all apps work in LiveContainer, so we have a &lt;a href=&quot;https://github.com/khanhduytran0/LiveContainer/labels/compatibility&quot;&gt;compatibility list&lt;/a&gt; to tell if there is apps that have issues. If they aren&#39;t on this list, then it&#39;s likely going run. However, if it doesn&#39;t work, please make an &lt;a href=&quot;https://github.com/khanhduytran0/LiveContainer/issues/new/choose&quot;&gt;issue&lt;/a&gt; about it.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Requires AltStore or SideStore&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Build from source or get prebuilt ipa in &lt;a href=&quot;https://github.com/khanhduytran0/LiveContainer/actions&quot;&gt;the Actions tab&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open LiveContainer, tap the plus icon in the upper right hand corner and select IPA files to install.&lt;/li&gt; 
 &lt;li&gt;Choose the app you want to open in the next launch.&lt;/li&gt; 
 &lt;li&gt;You can long-press the app to manage it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Without JIT&lt;/h3&gt; 
&lt;p&gt;Without JIT, guest apps need to be codesigned, which requires retrieving the certificate and password from SideStore or AltStore. This process involves applying a tweak to SideStore/AltStore, allowing it to expose the certificate to LiveContainer.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open Settings in LiveContainer, tap &quot;Patch SideStore/AltStore&quot;, and the app will switch to SideStore/AltStore to reinstall it with the tweak applied. If you use AltWidget, select &quot;Keep Extension.&quot;&lt;/li&gt; 
 &lt;li&gt;Wait for the installation to finish, then &lt;strong&gt;reopen SideStore/AltStore&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Return to LiveContainer and press &quot;Test JIT-Less Mode.&quot; If it says &quot;Test Passed,&quot; JIT-less mode is ready.&lt;/li&gt; 
 &lt;li&gt;Install your app via the &quot;Apps&quot; tab.&lt;/li&gt; 
 &lt;li&gt;Tap the run icon, it will attempt to restart LiveContainer with guest app loaded.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: If you update or reinstall SideStore/AltStore, you&#39;ll need to reapply the patch. Re-patch is not needed when you refresh your store.&lt;/p&gt; 
&lt;h3&gt;With JIT (requires SideStore)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tap the play icon, it will jump to SideStore and exit.&lt;/li&gt; 
 &lt;li&gt;In SideStore, hold down LiveContainer and tap &lt;code&gt;Enable JIT&lt;/code&gt;. If you have SideStore build supporting JIT URL scheme, it jumps back to LiveContainer with JIT enabled and the guest app is ready to use.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Add to Home Screen&lt;/h3&gt; 
&lt;p&gt;Long press the app and you will see 2 ways to add your app to home screen:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Launch URL&lt;/strong&gt;: Copy the provided URL, create a shortcut that opens the app, and add it to your home screen. You’ll need to create a separate shortcut for each app.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Create App Clip&lt;/strong&gt;: Install an App Clip MDM profile, which adds the app to your home screen. Note that launching the app includes an extra jump, and the App Clip will remain in the app switcher.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Multiple LiveContainers&lt;/h3&gt; 
&lt;p&gt;Using two LiveContainers allows you to run two different apps simultaneously, with &lt;em&gt;almost&lt;/em&gt; seamless data transfer between the LiveContainers.&lt;/p&gt; 
&lt;p&gt;To install a second LiveContainer, go to Settings and tap &quot;Install Another LiveContainer.&quot;&lt;/p&gt; 
&lt;p&gt;The first LiveContainer (blue icon) always launches by default. If an app is already running in the first container, you&#39;ll be prompted to either open it in the second LiveContainer (gray icon) or terminate the current app and relaunch it in the first. If the app is already running in the second container, it will switch automatically. To use an app in the second container, you must convert this app to a shared app. You can do that by opening the first LiveContainer (blue), long press on your app, open the settings of your app and then &quot;Convert to Shared App&quot;. After that, you can launch your app using LiveContainer2 (grey).&lt;/p&gt; 
&lt;h3&gt;Fix File Picker &amp;amp; Local Notification&lt;/h3&gt; 
&lt;p&gt;Some apps may experience issues with their file pickers or not be able to apply for notification permission in LiveContainer. To resolve this, enable &quot;Fix File Picker &amp;amp; Local Notification&quot; in the app-specific settings.&lt;/p&gt; 
&lt;h3&gt;&quot;Open In App&quot; Support&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tap the link icon in the top-right corner of the &quot;Apps&quot; tab and input the URL. LiveContainer will detect the appropriate app and ask if you want to launch it.&lt;/li&gt; 
 &lt;li&gt;What&#39;s more, you can share a web page to LiveContainer using &lt;a href=&quot;https://www.icloud.com/shortcuts/44ea82ce7ed8469ea24198c375db09a0&quot;&gt;this shortcut&lt;/a&gt;. Be sure to add this shortcut to &quot;Favorites&quot; in share sheet actions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;JIT Support&lt;/h3&gt; 
&lt;p&gt;To enable JIT for a guest app:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enter your SideJITServer/JITStreamer address and device UDID in LiveContainer settings.&lt;/li&gt; 
 &lt;li&gt;Enable &quot;Launch with JIT&quot; in its app-specific settings.&lt;/li&gt; 
 &lt;li&gt;LiveContainer will communicate with the server before launching the app to enable JIT.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installing external tweaks&lt;/h3&gt; 
&lt;p&gt;LiveContainer comes with its own TweakLoader, which automatically load CydiaSubstrate and tweaks. TweakLoader is injected to every app you install. You can override &lt;code&gt;TweakLoader.dylib&lt;/code&gt; symlink with your own implementation if you wish.&lt;/p&gt; 
&lt;p&gt;.dylib files in &lt;code&gt;Tweaks&lt;/code&gt; folder are global, they are loaded to all apps. You can create app-specific tweaks folder and switch between them instantly.&lt;/p&gt; 
&lt;p&gt;To install tweaks, you can use the built-in tweak manager in LiveContainer, which will automatically sign tweaks as you import. Otherwise, you can manually add them and then use the tweak manager to sign them.&lt;/p&gt; 
&lt;h3&gt;Hiding Apps&lt;/h3&gt; 
&lt;p&gt;LiveContainer offers three levels of app hiding:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Lock Apps&lt;/strong&gt;: In the app-specific settings, you can lock an app, requiring Face ID or a password to launch it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hide Locked Apps&lt;/strong&gt;: Once locked, you can hide the app. It will appear as a placeholder in the &quot;Hidden Apps&quot; section, and authentication is needed to view or launch it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Strict Hiding Mode&lt;/strong&gt;: For complete invisibility, enable &quot;Strict Hiding Mode&quot; in LiveContainer&#39;s settings after authentication. Hidden apps will no longer appear in the interface. To access them, triple-tap the &quot;x Apps in total&quot; text on the main screen and authenticate to unlock the apps when you relaunch LiveContainer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;export THEOS=/path/to/theos
git submodule update --init --recursive
make package
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Project structure&lt;/h2&gt; 
&lt;h3&gt;Main executable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Core of LiveContainer&lt;/li&gt; 
 &lt;li&gt;Contains the logic of setting up guest environment and loading guest app.&lt;/li&gt; 
 &lt;li&gt;If no app is selected, it loads LiveContainerSwiftUI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;LiveContainerSwiftUI&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;SwiftUI rewrite of LiveContainerUI (by @hugeBlack)&lt;/li&gt; 
 &lt;li&gt;Lanaguage file &lt;code&gt;Localizable.xcstrings&lt;/code&gt; is in here for multilingual support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;TweakLoader&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A simple tweak injector, which loads CydiaSubstrate and load tweaks.&lt;/li&gt; 
 &lt;li&gt;Injected to every app you install in LiveContainer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;AltStoreTweak&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The tweak that got injected into SideStore/AltStore to retrieve certificate from it everytime it launches.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ZSign&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The app signer shipped with LiveContainer.&lt;/li&gt; 
 &lt;li&gt;Originally made by &lt;a href=&quot;https://github.com/zhlynn/zsign&quot;&gt;zhlynn&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;LiveContainer uses &lt;a href=&quot;https://github.com/khcrysalis/Feather&quot;&gt;Feather&#39;s&lt;/a&gt; version of ZSign modified by khcrysalis.&lt;/li&gt; 
 &lt;li&gt;Changes are made to meet LiveContainer&#39;s need.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How does it work?&lt;/h2&gt; 
&lt;h3&gt;Patching guest executable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Patch &lt;code&gt;__PAGEZERO&lt;/code&gt; segment: 
  &lt;ul&gt; 
   &lt;li&gt;Change &lt;code&gt;vmaddr&lt;/code&gt; to &lt;code&gt;0xFFFFC000&lt;/code&gt; (&lt;code&gt;0x100000000 - 0x4000&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Change &lt;code&gt;vmsize&lt;/code&gt; to &lt;code&gt;0x4000&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Change &lt;code&gt;MH_EXECUTE&lt;/code&gt; to &lt;code&gt;MH_DYLIB&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Inject a load command to load &lt;code&gt;TweakLoader.dylib&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Patching &lt;code&gt;@executable_path&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Call &lt;code&gt;_NSGetExecutablePath&lt;/code&gt; with an invalid buffer pointer input -&amp;gt; SIGSEGV&lt;/li&gt; 
 &lt;li&gt;Do some &lt;a href=&quot;https://github.com/khanhduytran0/LiveContainer/raw/5ef1e6a/main.m#L74-L115&quot;&gt;magic stuff&lt;/a&gt; to overwrite the contents of executable_path.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Patching &lt;code&gt;NSBundle.mainBundle&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;This property is overwritten with the guest app&#39;s bundle.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bypassing Library Validation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;JIT is optional to bypass codesigning. In JIT-less mode, all executables are signed so this does not apply.&lt;/li&gt; 
 &lt;li&gt;Derived from &lt;a href=&quot;https://blog.xpnsec.com/restoring-dyld-memory-loading&quot;&gt;Restoring Dyld Memory Loading&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;dlopening the executable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Call &lt;code&gt;dlopen&lt;/code&gt; with the guest app&#39;s executable&lt;/li&gt; 
 &lt;li&gt;TweakLoader loads all tweaks in the selected folder&lt;/li&gt; 
 &lt;li&gt;Find the entry point&lt;/li&gt; 
 &lt;li&gt;Jump to the entry point&lt;/li&gt; 
 &lt;li&gt;The guest app&#39;s entry point calls &lt;code&gt;UIApplicationMain&lt;/code&gt; and start up like any other iOS apps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Multi-Account support &amp;amp; Keychain Semi-Separation&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/khanhduytran0/LiveContainer/main/entitlements.xml&quot;&gt;128 keychain access groups&lt;/a&gt; are created and LiveContainer allocates them randomly to each container of the same app. So you can create 128 container with different keychain access groups.&lt;/p&gt; 
&lt;h2&gt;Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Entitlements from the guest app are not applied to the host app. This isn&#39;t a big deal since sideloaded apps requires only basic entitlements.&lt;/li&gt; 
 &lt;li&gt;App Permissions are globally applied.&lt;/li&gt; 
 &lt;li&gt;Guest app containers are not sandboxed. This means one guest app can access other guest apps&#39; data.&lt;/li&gt; 
 &lt;li&gt;App extensions aren&#39;t supported. they cannot be registered because: LiveContainer is sandboxed, SpringBoard doesn&#39;t know what apps are installed in LiveContainer, and they take up App ID.&lt;/li&gt; 
 &lt;li&gt;Only one guest app can run at a time. This is much more like 3 apps limit where you have to disable an app to run another (switching between app in LiveContainer is instant).&lt;/li&gt; 
 &lt;li&gt;Remote push notification might not work. &lt;del&gt;If you have a paid developer account then you don&#39;t even have to use LiveContainer&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;Querying custom URL schemes might not work(?)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Livecontainer Nightly&lt;/h2&gt; 
&lt;p&gt;To download nightly versions of Livecontainer (beta versions), visit this repo which contains expiremental features that have a high chance of entering a stable release. (&lt;a href=&quot;https://github.com/hugeBlack/LiveContainer&quot;&gt;https://github.com/hugeBlack/LiveContainer&lt;/a&gt;)&lt;/p&gt; 
&lt;h2&gt;TODO&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use ChOma instead of custom MachO parser&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/khanhduytran0/LiveContainer/raw/main/LICENSE&quot;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.xpnsec.com/restoring-dyld-memory-loading&quot;&gt;xpn&#39;s blogpost: Restoring Dyld Memory Loading&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pinauten/PatchfinderUtils/raw/master/Sources/CFastFind/CFastFind.c&quot;&gt;LinusHenze&#39;s CFastFind&lt;/a&gt;: &lt;a href=&quot;https://github.com/pinauten/PatchfinderUtils/raw/master/LICENSE&quot;&gt;MIT license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/fishhook&quot;&gt;fishhook&lt;/a&gt;: &lt;a href=&quot;https://github.com/facebook/fishhook/raw/main/LICENSE&quot;&gt;BSD 3-Clause license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/saturngod/1224648&quot;&gt;MBRoundProgressView&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@haxi0 for icon&lt;/li&gt; 
 &lt;li&gt;@Vishram1123 for the initial shortcut implementation.&lt;/li&gt; 
 &lt;li&gt;@hugeBlack for SwiftUI contribution&lt;/li&gt; 
 &lt;li&gt;@Staubgeborener for automatic AltStore/SideStore source updater&lt;/li&gt; 
 &lt;li&gt;@fkunn1326 for improved app hiding&lt;/li&gt; 
 &lt;li&gt;@slds1 for dynamic color feature&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>hmlongco/Factory</title>
      <link>https://github.com/hmlongco/Factory</link>
      <description>&lt;p&gt;A new approach to Container-Based Dependency Injection for Swift and SwiftUI.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/hmlongco/Factory&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fhmlongco%2FFactory%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/hmlongco/Factory&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fhmlongco%2FFactory%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/hmlongco/Factory/raw/main/Logo.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;A new approach to Container-Based Dependency Injection for Swift and SwiftUI.&lt;/p&gt; 
&lt;h2&gt;Factory 2.4.4&lt;/h2&gt; 
&lt;p&gt;Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment. Factory is...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Adaptable&lt;/strong&gt;: Factory doesn&#39;t tie you down to a single dependency injection strategy or technique.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful&lt;/strong&gt;: Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performant&lt;/strong&gt;: Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Safe&lt;/strong&gt;: Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Concise&lt;/strong&gt;: Defining a registration usually takes just a single line of code. Same for resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Documented&lt;/strong&gt;: Factory has extensive DocC documentation and examples covering its classes, methods, and use cases.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: With all of that Factory is slim and trim, under 1,000 lines of executable code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tested&lt;/strong&gt;: Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free&lt;/strong&gt;: Factory is free and open source under the MIT License.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sound too good to be true? Let&#39;s take a look.&lt;/p&gt; 
&lt;h2&gt;A Simple Example&lt;/h2&gt; 
&lt;p&gt;Most container-based dependency injection systems require you to define in some way that a given service type is available for injection and many require some sort of factory or mechanism that will provide a new instance of the service when needed.&lt;/p&gt; 
&lt;p&gt;Factory is no exception. Here&#39;s a simple dependency registration that returns a service that conforms to &lt;code&gt;MyServiceType&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var myService: Factory&amp;lt;MyServiceType&amp;gt; { 
        Factory(self) { MyService() }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike Resolver which often requires defining a plethora of nested registration functions, or SwiftUI, where defining a new environment variable requires creating a new EnvironmentKey and adding additional getters and setters, here we simply add a new &lt;code&gt;Factory&lt;/code&gt; computed variable to the default container. When it&#39;s called our Factory is created, its closure is evaluated, and we get an instance of our dependency when we need it.&lt;/p&gt; 
&lt;p&gt;Injecting an instance of our service is equally straightforward. Here&#39;s just one of the many ways Factory can be used.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Pre iOS 17 with ObservableObject
class ContentViewModel: ObservableObject {
    @Injected(\.myService) private var myService
    ...
}

// Post iOS 17 with Observation
@Observable class ContentViewModel {
    @ObservationIgnored
    @Injected(\.myService) private var myService
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This particular view model uses one of Factory&#39;s &lt;code&gt;@Injected&lt;/code&gt; property wrappers to request the desired dependency. Similar to &lt;code&gt;@Environment&lt;/code&gt; in SwiftUI, we provide the property wrapper with a keyPath to a factory of the desired type and it resolves that type the moment &lt;code&gt;ContentViewModel&lt;/code&gt; is created.&lt;/p&gt; 
&lt;p&gt;And that&#39;s the core mechanism. In order to use the property wrapper you &lt;em&gt;must&lt;/em&gt; define a factory within the specified container. That factory &lt;em&gt;must&lt;/em&gt; return the desired type when asked. Fail to do either one and the code will simply not compile. As such, Factory is compile-time safe.&lt;/p&gt; 
&lt;p&gt;By the way, if you&#39;re concerned about building Factory&#39;s on the fly, don&#39;t be. Like SwiftUI Views, Factory structs and modifiers are lightweight and transitory value types. They&#39;re created inside computed variables &lt;strong&gt;only&lt;/strong&gt; when they&#39;re needed and then immediately discarded once their purpose has been served.&lt;/p&gt; 
&lt;p&gt;For more examples of Factory definitions that define scopes, use constructor injection, and do parameter passing, see the &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factory/registrations&quot;&gt;Registrations&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;Resolving Factories&lt;/h2&gt; 
&lt;p&gt;Earlier we demonstrated how to use the &lt;code&gt;Injected&lt;/code&gt; property wrapper. But it&#39;s also possible to bypass the property wrapper and talk to the factory yourself.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ContentViewModel: ObservableObject {
    private let myService = Container.shared.myService()
    private let eventLogger = Container.shared.eventLogger()
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Just call the desired factory as a function and you&#39;ll get an instance of its managed dependency. It&#39;s that simple.&lt;/p&gt; 
&lt;p&gt;If you&#39;re into container-based dependency injection, note that you can also pass an instance of a container to a view model and obtain an instance of your service directly from that container.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ContentViewModel: ObservableObject {
    let service: MyServiceType
    init(container: Container) {
        service = container.service()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if you want to use a Composition Root structure, just use the container to provide the required dependencies to a constructor.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var myRepository: Factory&amp;lt;MyRepositoryType&amp;gt; {
        Factory(self) { MyRepository(service: self.networkService()) }
    }
    var networkService: Factory&amp;lt;Networking&amp;gt; {
        Factory(self) { MyNetworkService() }
    }
}

@main
struct FactoryDemoApp: App {
    let viewModel = MyViewModel(repository: Container.shared.myRepository())
    var body: some Scene {
        WindowGroup {
            NavigationView {
                ContentView(viewModel: viewModel)
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Factory is flexible, and it doesn&#39;t tie you down to a specific dependency injection pattern or technique.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factory/resolutions&quot;&gt;Resolutions&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h2&gt;Mocking&lt;/h2&gt; 
&lt;p&gt;If we go back and look at our original view model code one might wonder why we&#39;ve gone to all of this trouble? Why not simply say &lt;code&gt;let myService = MyService()&lt;/code&gt; and be done with it?&lt;/p&gt; 
&lt;p&gt;Or keep the container idea, but write something similar to this…&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    static var myService: MyServiceType { MyService() }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Well, the primary benefit one gains from using a container-based dependency injection system is that we&#39;re able to change the behavior of the system as needed. Consider the following code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView: View {
    @StateObject var model = ContentViewModel()
    var body: some View {
        Text(model.text())
            .padding()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Our ContentView uses our view model, which is assigned to a StateObject. Great. But now we want to preview our code. How do we change the behavior of &lt;code&gt;ContentViewModel&lt;/code&gt; so that its &lt;code&gt;MyService&lt;/code&gt; dependency isn&#39;t making live API calls during development?&lt;/p&gt; 
&lt;p&gt;It&#39;s easy. Just replace &lt;code&gt;MyService&lt;/code&gt; with a mock that also conforms to &lt;code&gt;MyServiceType&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        let _ = Container.shared.myService.register { MockService2() }
        ContentView()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the line in our preview code where we’re gone back to our container and registered a new closure on our factory. This function overrides the default factory closure.&lt;/p&gt; 
&lt;p&gt;Now when our preview is displayed &lt;code&gt;ContentView&lt;/code&gt; creates a &lt;code&gt;ContentViewModel&lt;/code&gt; which in turn has a dependency on &lt;code&gt;myService&lt;/code&gt; using the &lt;code&gt;Injected&lt;/code&gt; property wrapper. And when the wrapper asks the factory for an instance of &lt;code&gt;MyServiceType&lt;/code&gt; it now gets a &lt;code&gt;MockService2&lt;/code&gt; instead of the &lt;code&gt;MyService&lt;/code&gt; type originally defined.&lt;/p&gt; 
&lt;p&gt;This is a powerful concept that lets us reach deep into a chain of dependencies and alter the behavior of a system as needed.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;The same concept can be used when writing unit tests. Consider the following.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;final class FactoryCoreTests: XCTestCase {

    override func setUp() {
        super.setUp()
        Container.shared.reset()
    }
    
    func testLoaded() throws {
        Container.shared.accountProvider.register { MockProvider(accounts: .sampleAccounts) }
        let model = Container.shared.someViewModel()
        model.load()
        XCTAssertTrue(model.isLoaded)
    }

    func testEmpty() throws {
        Container.shared.accountProvider.register { MockProvider(accounts: []) }
        let model = Container.shared.someViewModel()
        model.load()
        XCTAssertTrue(model.isEmpty)
    }

    func testErrors() throws {
        Container.shared.accountProvider.register { MockProvider(error: .notFoundError) }
        let model = Container.shared.someViewModel()
        model.load()
        XCTAssertTrue(model.errorMessage = &quot;Some Error&quot;)
    }
    
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Again, Factory makes it easy to reach into a chain of dependencies and make specific changes to the system as needed. This makes testing loading states, empty states, and error conditions simple.&lt;/p&gt; 
&lt;p&gt;Factory also works with Xcode 16&#39;s new Swift Testing framework.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Testing

@Suite(.serialized) struct AppTests {
  @Test(arguments: Parameters.allCases) func testA(parameter: Parameters) {
    // This function will be invoked serially, once per parameter, because the
    // containing suite has the .serialized trait.
    Container.shared.someService.register { MockService(parameter: parameter) }
    let service = Container.shared.someService()
    #expect(service.parameter == parameter)
  }


  @Test func testB() async throws {
    // This function will not run while testA(parameter:) is running. One test
    // must end before the other will start.
    Container.shared.someService.register { ErrorService() }
    let service = Container.shared.someService()
    #expect(service.error == &quot;Oops&quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But we&#39;re not done yet.&lt;/p&gt; 
&lt;p&gt;Factory has quite a few more tricks up its sleeve...&lt;/p&gt; 
&lt;h2&gt;Scope&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve used Resolver or some other dependency injection system before then you&#39;ve probably experienced the benefits and power of scopes.&lt;/p&gt; 
&lt;p&gt;And if not, the concept is easy to understand: Just how long should an instance of an object live?&lt;/p&gt; 
&lt;p&gt;You&#39;ve no doubt stuffed an instance of a class into a variable and created a singleton at some point in your career. This is an example of a scope. A single instance is created and then used and shared by all of the methods and functions in the app.&lt;/p&gt; 
&lt;p&gt;This can be done in Factory just by adding a scope modifier.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var networkService: Factory&amp;lt;NetworkProviding&amp;gt; { 
        self { NetworkProvider() }
            .singleton
    }
    var myService: Factory&amp;lt;MyServiceType&amp;gt; { 
        self { MyService() }
            .scope(.session)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now whenever someone requests an instance of &lt;code&gt;networkService&lt;/code&gt; they&#39;ll get the same instance of the object as everyone else.&lt;/p&gt; 
&lt;p&gt;Note that the client neither knows nor cares about the scope. Nor should it. The client is simply given what it needs when it needs it.&lt;/p&gt; 
&lt;p&gt;If no scope is specified the default scope is unique. A new instance of the service will be instantiated and returned every time one is requested from the factory.&lt;/p&gt; 
&lt;p&gt;Other common scopes are &lt;code&gt;cached&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt;. Cached items are persisted until the cache is reset, while shared items exist just as long as someone holds a strong reference to them. When the last reference goes away, the weakly held shared reference also goes away.&lt;/p&gt; 
&lt;p&gt;Factory has other scope types, plus the ability to add more of your own. See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factory/scopes&quot;&gt;Scopes&lt;/a&gt; for additional examples.&lt;/p&gt; 
&lt;p&gt;Scopes and scope management are powerful tools to have in your dependency injection arsenal.&lt;/p&gt; 
&lt;h2&gt;Simplified Syntax&lt;/h2&gt; 
&lt;p&gt;You may have noticed in the previous example that Factory also provides a bit of syntactical sugar that lets us make our definitions more concise. We simply ask the enclosing container to make a properly bound Factory for us using &lt;code&gt;self.callAsFunction { ... }&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var sugared: Factory&amp;lt;MyServiceType&amp;gt; { 
        self { MyService() }
    }
    var formal: Factory&amp;lt;MyServiceType&amp;gt; { 
        Factory(self) { MyService() }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Both definitions provide the same exact result. The sugared function is even inlined, so there&#39;s not even a performance difference between the two versions.&lt;/p&gt; 
&lt;h2&gt;Contexts&lt;/h2&gt; 
&lt;p&gt;One powerful new feature in Factory 2.1 is contexts. Let&#39;s say that for logistical reasons whenever your application runs in debug mode you &lt;em&gt;never&lt;/em&gt; want it to make calls to your application&#39;s analytics engine.&lt;/p&gt; 
&lt;p&gt;Easy. Just register an override for that particular context.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;container.analytics.onDebug { 
    StubAnalyticsEngine()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are other contexts for unit testing, for SwiftUI previews, and even when running UITests both in the simulator or when running an app on services like BrowserStack. See the documentation for more.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;p&gt;Factory can also help you debug your code. When running in DEBUG mode Factory allows you to trace the injection process and see every object instantiated or returned from a cache during a given resolution cycle.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0: Factory.Container.cycleDemo&amp;lt;CycleDemo&amp;gt; = N:105553131389696
1:     Factory.Container.aService&amp;lt;AServiceType&amp;gt; = N:105553119821680
2:         Factory.Container.implementsAB&amp;lt;AServiceType &amp;amp; BServiceType&amp;gt; = N:105553119821680
3:             Factory.Container.networkService&amp;lt;NetworkService&amp;gt; = N:105553119770688
1:     Factory.Container.bService&amp;lt;BServiceType&amp;gt; = N:105553119821680
2:         Factory.Container.implementsAB&amp;lt;AServiceType &amp;amp; BServiceType&amp;gt; = C:105553119821680
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can make it a lot easier to see the entire dependency tree for a given object or service.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factory/debugging&quot;&gt;Debugging&lt;/a&gt; for more on this and other features.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;A single README file barely scratches the surface. Fortunately, Factory is throughly documented.&lt;/p&gt; 
&lt;p&gt;Current DocC documentation can be found in the project as well as online on &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factory&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Factory supports CocoaPods and the Swift Package Manager.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod &quot;Factory&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or download the source files and add the Factory folder to your project.&lt;/p&gt; 
&lt;p&gt;Note that the current version of Factory (2.4.3) require Swift 5.10 minimum and that the minimum version of iOS currently supported with this release is iOS 13.&lt;/p&gt; 
&lt;h2&gt;Factory 2.0 Migration&lt;/h2&gt; 
&lt;p&gt;If you started with Factory 1.x a &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factory/migration&quot;&gt;migration document is available here&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Factory 2.0 adds true Factory containers for container-based dependency resolution&lt;/li&gt; 
 &lt;li&gt;Factory 2.0 adds container-based scopes&lt;/li&gt; 
 &lt;li&gt;Factory 2.0 adds decorators to containers and factories&lt;/li&gt; 
 &lt;li&gt;Factory 2.0 adds debug trace support&lt;/li&gt; 
 &lt;li&gt;Factory 2.0 adds keyPath-based property wrappers&lt;/li&gt; 
 &lt;li&gt;Factory 2.0 adds a new InjectedObject property wrapper for SwiftUI Views&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Factory 2.4 Migration&lt;/h2&gt; 
&lt;p&gt;Factory 2.4 works with Xcode 16 under Strict Concurrency guidelines.&lt;/p&gt; 
&lt;h2&gt;Discussion Forum&lt;/h2&gt; 
&lt;p&gt;Discussion and comments on Factory and Factory 2.0 can be found in &lt;a href=&quot;https://github.com/hmlongco/Factory/discussions&quot;&gt;Discussions&lt;/a&gt;. Go there if you have something to say or if you want to stay up to date.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Factory is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; 
&lt;h2&gt;Sponsor Factory!&lt;/h2&gt; 
&lt;p&gt;If you want to support my work on Factory and Resolver, consider a &lt;a href=&quot;https://github.com/sponsors/hmlongco&quot;&gt;GitHub Sponsorship&lt;/a&gt;! Many levels exist for increased support and even for mentorship and company training.&lt;/p&gt; 
&lt;p&gt;Or you can just buy me a cup of coffee!&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;Factory is designed, implemented, documented, and maintained by &lt;a href=&quot;https://www.linkedin.com/in/hmlong/&quot;&gt;Michael Long&lt;/a&gt;, a Lead iOS Software Engineer and a Top 1,000 Technology Writer on Medium.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;LinkedIn: &lt;a href=&quot;https://www.linkedin.com/in/hmlong/&quot;&gt;@hmlong&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Medium: &lt;a href=&quot;https://medium.com/@michaellong&quot;&gt;@michaellong&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;BlueSky: &lt;a href=&quot;https://bsky.app/profile/hmlongco.bsky.social&quot;&gt;@hmlongco&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Michael was also one of Google&#39;s &lt;a href=&quot;https://opensource.googleblog.com/2021/09/announcing-latest-open-source-peer-bonus-winners.html&quot;&gt;Open Source Peer Reward&lt;/a&gt; winners in 2021 for his work on Resolver.&lt;/p&gt; 
&lt;h2&gt;Additional Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factory&quot;&gt;Factory Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05&quot;&gt;Factory 1.0 and Functional Dependency Injection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://betterprogramming.pub/factory-multiple-module-registration-f9d19721a31d?sk=a03d78484d8c351762306ff00a8be67c&quot;&gt;Factory 1.0: Multiple Module Registration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hmlongco/Resolver&quot;&gt;Resolver: A Swift Dependency Injection System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of Control Design Pattern ~ Wikipedia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control Containers and the Dependency Injection pattern ~ Martin Fowler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cocoacasts.com/nuts-and-bolts-of-dependency-injection-in-swift/&quot;&gt;Nuts and Bolts of Dependency Injection in Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cocoacasts.com/dependency-injection-in-swift&quot;&gt;Dependency Injection in Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/taking-swift-dependency-injection-to-the-next-level-b71114c6a9c6&quot;&gt;Swift 5.1 Takes Dependency Injection to the Next Level&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hmlongco/Builder&quot;&gt;Builder: A Declarative UIKit Library (Uses Factory in Demo)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>github/CopilotForXcode</title>
      <link>https://github.com/github/CopilotForXcode</link>
      <description>&lt;p&gt;Xcode extension for GitHub Copilot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&quot;center&quot; height=&quot;70&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/AppIcon.png&quot;&gt; GitHub Copilot for Xcode&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; is an AI pair programmer tool that helps you write code faster and smarter. Copilot for Xcode is an Xcode extension that provides inline coding suggestions as you type and a chat assistant to answer your coding questions.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Chat provides suggestions to your specific coding tasks via chat. &lt;img alt=&quot;Chat of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/chat_dark.gif&quot; width=&quot;800&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Code Completion&lt;/h2&gt; 
&lt;p&gt;You can receive auto-complete type suggestions from GitHub Copilot either by starting to write the code you want to use, or by writing a natural language comment describing what you want the code to do. &lt;img alt=&quot;Code Completion of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/demo.gif&quot; width=&quot;800&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 12+&lt;/li&gt; 
 &lt;li&gt;Xcode 8+&lt;/li&gt; 
 &lt;li&gt;A GitHub Copilot subscription. To learn more, visit &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;https://github.com/features/copilot&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install via &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask github-copilot-for-xcode
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or download the &lt;code&gt;dmg&lt;/code&gt; from &lt;a href=&quot;https://github.com/github/CopilotForXcode/releases/latest/download/GitHubCopilotForXcode.dmg&quot;&gt;the latest release&lt;/a&gt;. Drag &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; into the &lt;code&gt;Applications&lt;/code&gt; folder:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of opened dmg&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/dmg-open.png&quot; width=&quot;512&quot;&gt; &lt;/p&gt; &lt;p&gt;Updates can be downloaded and installed by the app.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application (from the &lt;code&gt;Applications&lt;/code&gt; folder). Accept the security warning.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of MacOS download permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/macos-download-open-confirm.png&quot; width=&quot;350&quot;&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A background item will be added to enable Copilot to start when &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; is opened.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of background item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/background-item.png&quot; width=&quot;370&quot;&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Two permissions are required: &lt;code&gt;Accessibility&lt;/code&gt; and &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt;. For more on why these permissions are required see &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/TROUBLESHOOTING.md&quot;&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The first time the application is run the &lt;code&gt;Accessibility&lt;/code&gt; permission should be requested:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of accessibility permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/accessibility-permission-request.png&quot; width=&quot;529&quot;&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt; permission needs to be enabled manually. Click &lt;code&gt;Extension Permission&lt;/code&gt; from the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application settings to open the System Preferences to the &lt;code&gt;Extensions&lt;/code&gt; panel. Select &lt;code&gt;Xcode Source Editor&lt;/code&gt; and enable &lt;code&gt;GitHub Copilot&lt;/code&gt;:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of extension permission&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/extension-permission.png&quot; width=&quot;582&quot;&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After granting the extension permission, open Xcode. Verify that the &lt;code&gt;Github Copilot&lt;/code&gt; menu is available and enabled under the Xcode &lt;code&gt;Editor&lt;/code&gt; menu. &lt;br&gt;&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/xcode-menu.png&quot; width=&quot;648&quot;&gt; &lt;/p&gt; &lt;p&gt;Keyboard shortcuts can be set for all menu items in the &lt;code&gt;Key Bindings&lt;/code&gt; section of Xcode preferences.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To sign into GitHub Copilot, click the &lt;code&gt;Sign in&lt;/code&gt; button in the settings application. This will open a browser window and copy a code to the clipboard. Paste the code into the GitHub login page and authorize the application.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of sign-in popup&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/device-code.png&quot; width=&quot;372&quot;&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install updates, click &lt;code&gt;Check for Updates&lt;/code&gt; from the menu item or in the settings application.&lt;/p&gt; &lt;p&gt;After installing a new version, Xcode must be restarted to use the new version correctly.&lt;/p&gt; &lt;p&gt;New versions can also be installed from &lt;code&gt;dmg&lt;/code&gt; files downloaded from the releases page. When installing a new version via &lt;code&gt;dmg&lt;/code&gt;, the application must be run manually the first time to accept the downloaded from the internet warning.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To avoid confusion, we recommend disabling &lt;code&gt;Predictive code completion&lt;/code&gt; under &lt;code&gt;Xcode&lt;/code&gt; &amp;gt; &lt;code&gt;Preferences&lt;/code&gt; &amp;gt; &lt;code&gt;Text Editing&lt;/code&gt; &amp;gt; &lt;code&gt;Editing&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of welcome screen&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/welcome.png&quot; width=&quot;450&quot;&gt; &lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to use Chat&lt;/h2&gt; 
&lt;p&gt;Open Copilot Chat in GitHub Copilot.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via the Xcode menu &lt;code&gt;Xcode -&amp;gt; Editor -&amp;gt; GitHub Copilot -&amp;gt; Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/xcode-menu_dark.png&quot; width=&quot;648&quot;&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via GitHub Copilot app menu &lt;code&gt;Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/copilot-menu_dark.png&quot; width=&quot;244&quot;&gt; &lt;/p&gt; 
&lt;h2&gt;How to use Code Completion&lt;/h2&gt; 
&lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for the full terms.&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;We follow responsible practices in accordance with our &lt;a href=&quot;https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement&quot;&gt;Privacy Statement&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To get the latest security fixes, please use the latest version of the GitHub Copilot for Xcode.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;We’d love to get your help in making GitHub Copilot better! If you have feedback or encounter any problems, please reach out on our &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/copilot&quot;&gt;Feedback forum&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Thank you to @intitni for creating the original project that this is based on.&lt;/p&gt; 
&lt;p&gt;Attributions can be found under About when running the app or in &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Copilot%20for%20Xcode/Credits.rtf&quot;&gt;Credits.rtf&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apple/swift-collections</title>
      <link>https://github.com/apple/swift-collections</link>
      <description>&lt;p&gt;Commonly used data structures for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Collections&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Swift Collections&lt;/strong&gt; is an open-source package of data structure implementations for the Swift programming language.&lt;/p&gt; 
&lt;p&gt;Read more about the package, and the intent behind it, in the &lt;a href=&quot;https://swift.org/blog/swift-collections&quot;&gt;announcement on swift.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;p&gt;The package currently provides the following implementations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/bitcollections/bitset&quot;&gt;&lt;code&gt;BitSet&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/bitcollections/bitarray&quot;&gt;&lt;code&gt;BitArray&lt;/code&gt;&lt;/a&gt;, dynamic bit collections.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/dequemodule/deque&quot;&gt;&lt;code&gt;Deque&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a double-ended queue backed by a ring buffer. Deques are range-replaceable, mutable, random-access collections.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/heapmodule/heap&quot;&gt;&lt;code&gt;Heap&lt;/code&gt;&lt;/a&gt;, a min-max heap backed by an array, suitable for use as a priority queue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/orderedcollections/orderedset&quot;&gt;&lt;code&gt;OrderedSet&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a variant of the standard &lt;code&gt;Set&lt;/code&gt; where the order of items is well-defined and items can be arbitrarily reordered. Uses a &lt;code&gt;ContiguousArray&lt;/code&gt; as its backing store, augmented by a separate hash table of bit packed offsets into it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/orderedcollections/ordereddictionary&quot;&gt;&lt;code&gt;OrderedDictionary&amp;lt;Key, Value&amp;gt;&lt;/code&gt;&lt;/a&gt;, an ordered variant of the standard &lt;code&gt;Dictionary&lt;/code&gt;, providing similar benefits.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/hashtreecollections/treeset&quot;&gt;&lt;code&gt;TreeSet&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/1.1.0/documentation/hashtreecollections/treedictionary&quot;&gt;&lt;code&gt;TreeDictionary&lt;/code&gt;&lt;/a&gt;, persistent hashed collections implementing Compressed Hash-Array Mapped Prefix Trees (CHAMP). These work similar to the standard &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Dictionary&lt;/code&gt;, but they excel at use cases that mutate shared copies, offering dramatic memory savings and radical time improvements.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following additional data structures are currently under development but they aren&#39;t stable enough to preview yet.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-collections/pull/65&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt; and &lt;code&gt;SortedDictionary&lt;/code&gt;&lt;/a&gt;, sorted collections backed by in-memory persistent b-trees.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-collections/pull/80&quot;&gt;&lt;code&gt;SparseSet&lt;/code&gt;&lt;/a&gt;, a constant time set construct, trading off memory for speed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Swift Collections uses the same modularization approach as &lt;a href=&quot;https://github.com/apple/swift-numerics&quot;&gt;&lt;strong&gt;Swift Numerics&lt;/strong&gt;&lt;/a&gt;: it provides a standalone module for each thematic group of data structures it implements. For instance, if you only need a double-ended queue type, you can pull in only that by importing &lt;code&gt;DequeModule&lt;/code&gt;. &lt;code&gt;OrderedSet&lt;/code&gt; and &lt;code&gt;OrderedDictionary&lt;/code&gt; share much of the same underlying implementation, so they are provided by a single module, called &lt;code&gt;OrderedCollections&lt;/code&gt;. However, there is also a top-level &lt;code&gt;Collections&lt;/code&gt; module that gives you every collection type with a single import statement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Collections

var deque: Deque&amp;lt;String&amp;gt; = [&quot;Ted&quot;, &quot;Rebecca&quot;]
deque.prepend(&quot;Keeley&quot;)
deque.append(&quot;Nathan&quot;)
print(deque) // [&quot;Keeley&quot;, &quot;Ted&quot;, &quot;Rebecca&quot;, &quot;Nathan&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;p&gt;The Swift Collections package is source stable. The version numbers follow &lt;a href=&quot;https://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt; -- source breaking changes to public API can only land in a new major version.&lt;/p&gt; 
&lt;p&gt;The public API of version 1.1 of the &lt;code&gt;swift-collections&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Collections&lt;/code&gt;, &lt;code&gt;BitCollections&lt;/code&gt;, &lt;code&gt;DequeModule&lt;/code&gt;, &lt;code&gt;HeapModule&lt;/code&gt;, &lt;code&gt;OrderedCollections&lt;/code&gt; and &lt;code&gt;HashTreeCollections&lt;/code&gt; modules.&lt;/p&gt; 
&lt;p&gt;Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases. If you have a use case that requires using underscored APIs, please &lt;a href=&quot;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&quot;&gt;submit a Feature Request&lt;/a&gt; describing it! We&#39;d like the public interface to be as useful as possible -- although preferably without compromising safety or limiting future evolution.&lt;/p&gt; 
&lt;p&gt;By &quot;underscored declarations&quot; we mean declarations that have a leading underscore anywhere in their fully qualified name. For instance, here are some names that wouldn&#39;t be considered part of the public API, even if they were technically marked public:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;FooModule.Bar._someMember(value:)&lt;/code&gt; (underscored member)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FooModule._Bar.someMember&lt;/code&gt; (underscored type)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;_FooModule.Bar&lt;/code&gt; (underscored module)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FooModule.Bar.init(_value:)&lt;/code&gt; (underscored initializer)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that contents of the &lt;code&gt;Tests&lt;/code&gt;, &lt;code&gt;Utils&lt;/code&gt; and &lt;code&gt;Benchmarks&lt;/code&gt; subdirectories aren&#39;t public API. We don&#39;t make any source compatibility promises about them -- they may change at whim, and code may be removed in any new release. Do not rely on anything about them.&lt;/p&gt; 
&lt;p&gt;Future minor versions of the package may update these rules as needed.&lt;/p&gt; 
&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, new versions of this package require clients to upgrade to a more recent Swift toolchain release. (This allows the package to make use of new language/stdlib features, build on compiler bug fixes, and adopt new package manager functionality as soon as they are available.) Patch (i.e., bugfix) releases will not increase the required toolchain version, but any minor (i.e., new feature) release may do so.&lt;/p&gt; 
&lt;p&gt;The following table maps existing package releases to their minimum required Swift toolchain release:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package version&lt;/th&gt; 
   &lt;th&gt;Swift version&lt;/th&gt; 
   &lt;th&gt;Xcode release&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.0.x&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Swift 5.3.2&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Xcode 12.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.1.x&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Swift 5.7.2&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Xcode 14.2&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;(Note: the package has no minimum deployment target, so while it does require clients to use a recent Swift toolchain to build it, the code itself is able to run on any OS release that supports running Swift code.)&lt;/p&gt; 
&lt;h2&gt;Using &lt;strong&gt;Swift Collections&lt;/strong&gt; in your project&lt;/h2&gt; 
&lt;p&gt;To use this package in a SwiftPM project, you need to set it up as a package dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version:5.9
import PackageDescription

let package = Package(
  name: &quot;MyPackage&quot;,
  dependencies: [
    .package(
      url: &quot;https://github.com/apple/swift-collections.git&quot;, 
      .upToNextMinor(from: &quot;1.1.0&quot;) // or `.upToNextMajor
    )
  ],
  targets: [
    .target(
      name: &quot;MyTarget&quot;,
      dependencies: [
        .product(name: &quot;Collections&quot;, package: &quot;swift-collections&quot;)
      ]
    )
  ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing to Swift Collections&lt;/h2&gt; 
&lt;p&gt;We have a dedicated &lt;a href=&quot;https://forums.swift.org/c/related-projects/collections&quot;&gt;Swift Collections Forum&lt;/a&gt; where people can ask and answer questions on how to use or work on this package. It&#39;s also a great place to discuss its evolution.&lt;/p&gt; 
&lt;p&gt;If you find something that looks like a bug, please open a &lt;a href=&quot;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=BUG_REPORT.md&quot;&gt;Bug Report&lt;/a&gt;! Fill out as many details as you can.&lt;/p&gt; 
&lt;h3&gt;Branching Strategy&lt;/h3&gt; 
&lt;p&gt;We maintain separate branches for each minor version of the package:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package version&lt;/th&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.0.x&lt;/td&gt; 
   &lt;td&gt;release/1.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.1.x&lt;/td&gt; 
   &lt;td&gt;release/1.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.2.x&lt;/td&gt; 
   &lt;td&gt;main&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Changes must land on the branch corresponding to the earliest release that they will need to ship on. They are periodically propagated to subsequent branches, in the following direction:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;release/1.0&lt;/code&gt; → &lt;code&gt;release/1.1&lt;/code&gt; → &lt;code&gt;main&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For example, anything landing on &lt;code&gt;release/1.0&lt;/code&gt; will eventually appear on &lt;code&gt;release/1.1&lt;/code&gt; and then &lt;code&gt;main&lt;/code&gt; too; there is no need to file standalone PRs for each release line. (Change propagation currently requires manual work -- it is performed by project maintainers.)&lt;/p&gt; 
&lt;h3&gt;Working on the package&lt;/h3&gt; 
&lt;p&gt;We have some basic &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Internals/README.md&quot;&gt;documentation on package internals&lt;/a&gt; that will help you get started.&lt;/p&gt; 
&lt;p&gt;By submitting a pull request, you represent that you have the right to license your contribution to Apple and the community, and agree by submitting the patch that your contributions are licensed under the &lt;a href=&quot;https://swift.org/LICENSE.txt&quot;&gt;Swift License&lt;/a&gt;, a copy of which is &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-collections/main/LICENSE.txt&quot;&gt;provided in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Fixing a bug or making a small improvement&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure to start by checking out the appropriate branch for the minor release you want the fix to ship in. (See above.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-collections/compare&quot;&gt;Submit a PR&lt;/a&gt; with your change. If there is an &lt;a href=&quot;https://github.com/apple/swift-collections/issues&quot;&gt;existing issue&lt;/a&gt; for the bug you&#39;re fixing, please include a reference to it.&lt;/li&gt; 
 &lt;li&gt;Make sure to add tests covering whatever changes you are making.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Proposing a small enhancement&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Raise a &lt;a href=&quot;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&quot;&gt;Feature Request&lt;/a&gt;. Discuss why it would be important to implement it.&lt;/li&gt; 
 &lt;li&gt;Submit a PR with your implementation, participate in the review discussion.&lt;/li&gt; 
 &lt;li&gt;When there is a consensus that the feature is desirable, and the implementation works well, it is fully tested and documented, then it will be merged.&lt;/li&gt; 
 &lt;li&gt;Rejoice!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Proposing the addition of a new data structure&lt;/h4&gt; 
&lt;p&gt;We intend this package to collect generally useful data structures -- the ones that ought to be within easy reach of every Swift engineer&#39;s basic toolbox. The implementations we ship need to be of the highest technical quality, polished to the same shine as anything that gets included in the Swift Standard Library. (The only real differences are that this package isn&#39;t under the formal Swift Evolution process, and its code isn&#39;t ABI stable.)&lt;/p&gt; 
&lt;p&gt;Accordingly, adding a new data structure to this package is not an easy or quick process, and not all useful data structures are going to be a good fit.&lt;/p&gt; 
&lt;p&gt;If you have an idea for a data structure that might make a good addition to this package, please start a topic on the &lt;a href=&quot;https://forums.swift.org/c/related-projects/collections&quot;&gt;forum&lt;/a&gt;, explaining why you believe it would be important to implement it. This way we can figure out if it would be right for the package, discuss implementation strategies, and plan to allocate capacity to help.&lt;/p&gt; 
&lt;p&gt;Not all data structures will reach a high enough level of usefulness to ship in this package -- those that have a more limited audience might work better as a standalone package. Of course, reasonable people might disagree on the importance of including any particular data structure; but at the end of the day, the decision whether to take an implementation is up to the maintainers of this package.&lt;/p&gt; 
&lt;p&gt;If maintainers have agreed that your implementation would likely make a good addition, then it&#39;s time to start work on it. Submit a PR with your implementation as soon as you have something that&#39;s ready to show! We&#39;d love to get involved as early as you like. Historically, the best additions resulted from close work between the contributor and a package maintainer.&lt;/p&gt; 
&lt;p&gt;Participate in the review discussion, and adapt code accordingly. Sometimes we may need to go through several revisions over multiple months! This is fine -- it makes the end result that much better. When there is a consensus that the feature is ready, and the implementation is fully tested and documented, the PR will be merged by a maintainer. This is good time for a small celebration -- merging is a good indicator that the addition will ship at some point.&lt;/p&gt; 
&lt;p&gt;Historically, PRs adding a new data structure have typically been merged to a new feature branch rather than directly to a release branch or &lt;code&gt;main&lt;/code&gt;, and there was an extended amount of time between the initial merge and the tag that shipped the new feature. Nobody likes to wait, but getting a new data structure implementation from a state that was ready to merge to a state that&#39;s ready to ship is actually quite difficult work, and it takes maintainer time and effort that needs to be scheduled in advance. The closer an implementation is to the coding conventions and performance baseline of the Standard Library, the shorter this wait is likely to become, and the fewer changes there will be between merging and shipping.&lt;/p&gt; 
&lt;h3&gt;Code of Conduct&lt;/h3&gt; 
&lt;p&gt;Like all Swift.org projects, we would like the Swift Collections project to foster a diverse and friendly community. We expect contributors to adhere to the &lt;a href=&quot;https://swift.org/code-of-conduct/&quot;&gt;Swift.org Code of Conduct&lt;/a&gt;. A copy of this document is &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-collections/main/CODE_OF_CONDUCT.md&quot;&gt;available in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contact information&lt;/h3&gt; 
&lt;p&gt;The current code owner of this package is Karoy Lorentey (&lt;a href=&quot;https://github.com/lorentey&quot;&gt;@lorentey&lt;/a&gt;). You can contact him &lt;a href=&quot;https://forums.swift.org/u/lorentey/summary&quot;&gt;on the Swift forums&lt;/a&gt;, or by writing an email to klorentey at apple dot com. (Please keep it related to this project.)&lt;/p&gt; 
&lt;p&gt;In case of moderation issues, you can also directly contact a member of the &lt;a href=&quot;https://swift.org/community/#community-structure&quot;&gt;Swift Core Team&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>home-assistant/iOS</title>
      <link>https://github.com/home-assistant/iOS</link>
      <description>&lt;p&gt;📱 Home Assistant for Apple platforms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Home Assistant for Apple Platforms&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/ios/beta/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/TestFlight-Beta-blue.svg?sanitize=true&quot; alt=&quot;TestFlight Beta invite&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://itunes.apple.com/app/home-assistant-open-source-home-automation/id1099568401&quot;&gt;&lt;img src=&quot;https://img.shields.io/itunes/v/1099568401.svg?sanitize=true&quot; alt=&quot;Download on the App Store&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/home-assistant/iOS/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/home-assistant/iOS.svg?style=flat&quot; alt=&quot;GitHub issues&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/home-assistant/iOS/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202.0-green.svg?style=flat&quot; alt=&quot;License Apache 2.0&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Home Assistant uses Bundler, Homebrew and Cocoapods to manage build dependencies. You&#39;ll need Xcode 15.3 (or later) which you can download from the &lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;App Store&lt;/a&gt;. You can get the app running using the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/home-assistant/iOS.git
cd iOS

# you must do one of the following, but you do not need to do all of them:

## install cocoapods via homebrew, use that
brew install cocoapods
$(brew --prefix)/opt/ruby/bin/gem install cocoapods-acknowledgements
pod install --repo-update

## install ruby via homebrew, use that
brew install ruby@3.1
$(brew --prefix)/opt/ruby@3.1/bin/bundle install
$(brew --prefix)/opt/ruby@3.1/bin/bundle exec pod install --repo-update

## install ruby via rbenv, use that
brew install rbenv ruby-build
rbenv install
bundle install
bundle exec pod install --repo-update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once this completes, you can launch &lt;code&gt;HomeAssistant.xcworkspace&lt;/code&gt; and run the &lt;code&gt;App-Debug&lt;/code&gt; scheme onto your simulator or iOS device.&lt;/p&gt; 
&lt;h2&gt;Testing just the frontend&lt;/h2&gt; 
&lt;p&gt;To just test the &lt;a href=&quot;https://github.com/home-assistant/frontend&quot;&gt;frontend&lt;/a&gt;, you can use a simulator version built by our GitHub actions.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Xcode from the &lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;App Store&lt;/a&gt; making sure it&#39;s at least the version noted above. You do not need to install or run anything else.&lt;/li&gt; 
 &lt;li&gt;Launch the simulator at &lt;code&gt;/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app&lt;/code&gt; or in Xcode under the Xcode menu &amp;gt; Open Developer Tool.&lt;/li&gt; 
 &lt;li&gt;Open a simulator under File &amp;gt; Open Simulator. You can install older versions of iOS in Xcode&#39;s Components preferences.&lt;/li&gt; 
 &lt;li&gt;Download a simulator build from the &lt;a href=&quot;https://github.com/home-assistant/iOS/actions/workflows/ci.yml?query=branch%3Amaster&quot;&gt;the GitHub action&lt;/a&gt; under &quot;Artifacts.&quot;&lt;/li&gt; 
 &lt;li&gt;Drag the result &lt;code&gt;.app&lt;/code&gt; on drop it on top of the simulator.&lt;/li&gt; 
 &lt;li&gt;Locate the app on the home screen and click it to launch.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The simulator behaves different than you might expect:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
   &lt;th&gt;Effect&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click&lt;/td&gt; 
   &lt;td&gt;Tap&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click &amp;amp; drag&lt;/td&gt; 
   &lt;td&gt;Scroll&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hold ⌥&lt;/td&gt; 
   &lt;td&gt;Add a second touch point&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hold ⇧⌥&lt;/td&gt; 
   &lt;td&gt;Move both touch points&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;⌘←, ⌘→&lt;/td&gt; 
   &lt;td&gt;Rotate&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;⌘S&lt;/td&gt; 
   &lt;td&gt;Take screenshot&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;⌘R&lt;/td&gt; 
   &lt;td&gt;Record video&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;⌘K&lt;/td&gt; 
   &lt;td&gt;Toggle software keyboard&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You can now debug the WebView in this simulator build using Safari&#39;s Web Inspector:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure &quot;Show Develop menu in menu bar&quot; is enabled in Safari&#39;s Advanced preferences.&lt;/li&gt; 
 &lt;li&gt;Under the Develop menu, expand the &quot;Simulator&quot; menu for the simulator you&#39;ve opened.&lt;/li&gt; 
 &lt;li&gt;Choose the WebView you want to inspect. A new window will open.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Code Signing&lt;/h2&gt; 
&lt;p&gt;Although the app is set up to use Automatic provisioning for Debug builds, you&#39;ll need to customize a few of the options. This is because the app makes heavy use of entitlements that require code signing, even for simulator builds.&lt;/p&gt; 
&lt;p&gt;Edit the file &lt;code&gt;Configuration/HomeAssistant.overrides.xcconfig&lt;/code&gt; (which will not exist by default and is ignored by git) and add the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DEVELOPMENT_TEAM = YourTeamID
BUNDLE_ID_PREFIX = some.bundle.prefix
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Xcode should generate provisioning profiles in your Team ID and our configuration will disable features your team doesn&#39;t have like Critical Alerts. You can find your Team ID on Apple&#39;s &lt;a href=&quot;https://developer.apple.com/account&quot;&gt;developer portal&lt;/a&gt;; it looks something like &lt;code&gt;ABCDEFG123&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Code style&lt;/h2&gt; 
&lt;p&gt;Linters run as part of Pull Request checks. Additionally, some linting requirements can be autocorrected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# checks for linting problems, doesn&#39;t fix
bundle exec fastlane lint
# checks for linting problems and fixes them
bundle exec fastlane autocorrect
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the Xcode project, the autocorrectable linters will not modify your source code but will provide warnings. This project uses several linters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/realm/swiftlint&quot;&gt;SwiftLint&lt;/a&gt; (for things SwiftFormat doesn&#39;t automate)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubocop.org&quot;&gt;Rubocop&lt;/a&gt; (largely for Fastlane)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yamllint.readthedocs.io/en/stable/index.html&quot;&gt;YamlLint&lt;/a&gt; (largely for GitHub Actions)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Continuous Integration&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://github.com/home-assistant/iOS/actions&quot;&gt;Github Actions&lt;/a&gt; alongside &lt;a href=&quot;https://fastlane.tools/&quot;&gt;Fastlane&lt;/a&gt; to perform continuous integration both by unit testing and deploying to &lt;a href=&quot;https://appstoreconnect.apple.com&quot;&gt;App Store Connect&lt;/a&gt;. Mac Developer ID builds are available as an artifact on every build of master.&lt;/p&gt; 
&lt;h3&gt;Environment variables&lt;/h3&gt; 
&lt;p&gt;Fastlane scripts read from the environment or &lt;code&gt;.env&lt;/code&gt; file for configuration like team IDs. See &lt;a href=&quot;https://github.com/home-assistant/iOS/raw/master/.env.sample&quot;&gt;&lt;code&gt;.env.sample&lt;/code&gt;&lt;/a&gt; for available values.&lt;/p&gt; 
&lt;h3&gt;Deployment&lt;/h3&gt; 
&lt;p&gt;Although all the deployment is done through Github Actions, you can do it manually through &lt;a href=&quot;https://github.com/home-assistant/iOS/raw/master/fastlane/README.md&quot;&gt;Fastlane&lt;/a&gt;:&lt;/p&gt; 
&lt;h3&gt;Deployment to App Store Connect&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# creates the builds and uploads to the app store
# each save their artifacts to build/
bundle exec fastlane mac build
bundle exec fastlane ios build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/home-assistant/iOS/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;LICENSE&lt;/h2&gt; 
&lt;p&gt;Apache-2.0&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;The format and some content of this README.md comes from the &lt;a href=&quot;https://github.com/ivanbruel/SwipeIt&quot;&gt;SwipeIt&lt;/a&gt; project.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.openhomefoundation.org/&quot;&gt;&lt;img src=&quot;https://www.openhomefoundation.org/badges/home-assistant.png&quot; alt=&quot;Home Assistant - A project from the Open Home Foundation&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>exyte/PopupView</title>
      <link>https://github.com/exyte/PopupView</link>
      <description>&lt;p&gt;Toasts and popups library written with SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://exyte.com/&quot;&gt;
  &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/exyte/media/master/common/header-dark.png&quot;&gt;
   &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/common/header-light.png&quot;&gt;
  &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://exyte.com/&quot;&gt;
  &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/exyte/media/master/common/our-site-dark.png&quot; width=&quot;80&quot; height=&quot;16&quot;&gt;
   &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/common/our-site-light.png&quot; width=&quot;80&quot; height=&quot;16&quot;&gt;
  &lt;/picture&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://twitter.com/exyteHQ&quot;&gt;
  &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/exyte/media/master/common/twitter-dark.png&quot; width=&quot;74&quot; height=&quot;16&quot;&gt;
   &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/common/twitter-light.png&quot; width=&quot;74&quot; height=&quot;16&quot;&gt; 
  &lt;/picture&gt;&lt;/a&gt; &lt;a href=&quot;https://exyte.com/contacts&quot;&gt;
  &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/exyte/media/master/common/get-in-touch-dark.png&quot; width=&quot;128&quot; height=&quot;24&quot; align=&quot;right&quot;&gt;
   &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/common/get-in-touch-light.png&quot; width=&quot;128&quot; height=&quot;24&quot; align=&quot;right&quot;&gt;
  &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Floaters&lt;/th&gt; 
   &lt;th&gt;Toasts&lt;/th&gt; 
   &lt;th&gt;Popups&lt;/th&gt; 
   &lt;th&gt;Sheets&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/PopupView/1.gif&quot;&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/PopupView/2.gif&quot;&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/PopupView/3.gif&quot;&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/exyte/media/master/PopupView/4.gif&quot;&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;/p&gt;
&lt;h1 align=&quot;left&quot;&gt;Popup View&lt;/h1&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt;
&lt;h4&gt;Toasts, alerts and popups library written with SwiftUI&lt;/h4&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://exyte.com/blog/swiftui-tutorial-popupview-library&quot;&gt;Read Article »&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/exyte/popupView?label=Version&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;https://swiftpackageindex.com/exyte/PopupView&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fexyte%2FPopupView%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/exyte/PopupView&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fexyte%2FPopupView%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/exyte/PopupView&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SwiftPM-Compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;SPM Compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/ExytePopupView&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/cocoapods-Compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;Cocoapods Compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&quot; alt=&quot;Carthage Compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-black.svg?sanitize=true&quot; alt=&quot;License: MIT&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;What&#39;s new in version 4&lt;/h1&gt; 
&lt;p&gt;You can show multiple popups on top of anything, and they can also let the taps pass through to lower views. There are 3 ways to display a popup: as a simple overlay, using SwiftUI&#39;s fullscreenSheet, and using UIKit&#39;s UIWindow. There are pros and cons for all of these, here is a table.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Overlay&lt;/th&gt; 
   &lt;th&gt;Sheet&lt;/th&gt; 
   &lt;th&gt;Window&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr align=&quot;center&quot;&gt; 
   &lt;th&gt;Show on top of navbar&lt;/th&gt; 
   &lt;td&gt; ❌ &lt;/td&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr align=&quot;center&quot;&gt; 
   &lt;th&gt;Show on top of sheet&lt;/th&gt; 
   &lt;td&gt; ❌ &lt;/td&gt; 
   &lt;td&gt; ❌ &lt;/td&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr align=&quot;center&quot;&gt; 
   &lt;th&gt;Show multiple popups&lt;/th&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
   &lt;td&gt; ❌ &lt;/td&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr align=&quot;center&quot;&gt; 
   &lt;th&gt;Taps &quot;pass through&quot; the transparent bg&lt;/th&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
   &lt;td&gt; ❌ &lt;/td&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr align=&quot;center&quot;&gt; 
   &lt;th&gt;SwiftUI @State update mechanism works as expected&lt;/th&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
   &lt;td&gt; ✅ &lt;/td&gt; 
   &lt;td&gt; ❌ &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Basically UIWindow based popup is the best option for most situations, just remember - to get adequate UI updates, use ObservableObjects or @Bindings instead of @State. This won&#39;t work:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView1 : View {
    @State var showPopup = false
    @State var a = false

    var body: some View {
        Button(&quot;Button&quot;) {
            showPopup.toggle()
        }
        .popup(isPresented: $showPopup) {
            VStack {
                Button(&quot;Switch a&quot;) {
                    a.toggle()
                }
                a ? Text(&quot;on&quot;).foregroundStyle(.green) : Text(&quot;off&quot;).foregroundStyle(.red)
            }
        } customize: {
            $0
                .type(.floater())
                .closeOnTap(false)
                .position(.top)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will work:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView1 : View {
    @State var showPopup = false
    @State var a = false

    var body: some View {
        Button(&quot;Button&quot;) {
            showPopup.toggle()
        }
        .popup(isPresented: $showPopup) {
            PopupContent(a: $a)
        } customize: {
            $0
                .type(.floater())
                .closeOnTap(false)
                .position(.top)
        }
    }
}

struct PopupContent: View {
    @Binding var a: Bool

    var body: some View {
        VStack {
            Button(&quot;Switch a&quot;) {
                a.toggle()
            }
            a ? Text(&quot;on&quot;).foregroundStyle(.green) : Text(&quot;off&quot;).foregroundStyle(.red)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Update to version 4&lt;/h1&gt; 
&lt;p&gt;New &lt;code&gt;DisplayMode&lt;/code&gt; enum was introduced instead of &lt;code&gt;isOpaque&lt;/code&gt;. &lt;code&gt;isOpaque&lt;/code&gt; is now deprecated. Instead of:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $toasts.showingTopSecond) {
    ToastTopSecond()
} customize: {
    $0
        .type(.toast)
        .isOpaque(true) // &amp;lt;-- here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $floats.showingTopFirst) {
    FloatTopFirst()
} customize: {
    $0
        .type(.floater())
        .displayMode(.sheet) // &amp;lt;-- here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So, new &lt;code&gt;.displayMode(.sheet)&lt;/code&gt; corresponds to old &lt;code&gt;.isOpaque(true)&lt;/code&gt;, &lt;code&gt;.displayMode(.overlay)&lt;/code&gt; corresponds to &lt;code&gt;.isOpaque(false)&lt;/code&gt;. Default &lt;code&gt;DisplayMode&lt;/code&gt; is &lt;code&gt;.window&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;What&#39;s new in version 3&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;zoom in/out appear/disappear animations&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;disappearTo&lt;/code&gt; parameter to specify disappearing animation direction - can be different from &lt;code&gt;appearFrom&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Update to version 3&lt;/h1&gt; 
&lt;p&gt;To include new .zoom type, &lt;code&gt;AppearFrom&lt;/code&gt; enum cases were renamed. Instead of:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $floats.showingTopFirst) {
    FloatTopFirst()
} customize: {
    $0
        .type(.floater())
        .appearFrom(.top) // &amp;lt;-- here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $floats.showingTopFirst) {
    FloatTopFirst()
} customize: {
    $0
        .type(.floater())
        .appearFrom(.topSlide) // &amp;lt;-- here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Update to version 2&lt;/h1&gt; 
&lt;p&gt;Instead of:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $floats.showingTopFirst, type: .floater(), position: .top, animation: .spring(), closeOnTapOutside: true, backgroundColor: .black.opacity(0.5)) {
    FloatTopFirst()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $floats.showingTopFirst) {
    FloatTopFirst()
} customize: {
    $0
        .type(.floater())
        .position(.top)
        .animation(.spring())
        .closeOnTapOutside(true)
        .backgroundColor(.black.opacity(0.5))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using this API you can pass parameters in any order you like.&lt;/p&gt; 
&lt;h1&gt;Show over navbar&lt;/h1&gt; 
&lt;p&gt;To display your popup over all other views including navbars please use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $floats.showingTopFirst) {
    FloatTopFirst()
} customize: {
    $0.isOpaque(true)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will also mean that you won&#39;t be able to tap &quot;through&quot; the popup&#39;s background on any of the controls &quot;behind it&quot; (that&#39;s because this method actually uses transparent fullscreenSheet, which won&#39;t pass the touches to underlying view). Opaque popup uses screen size to calculate its position.&lt;/p&gt; 
&lt;p&gt;Unfortunately, if opaque is false (to allow &quot;through-touches&quot; if you need them), popup - even if forced to be fullscreen, will be displayed under the navbar (if you know how to pass over this restriction, please do let me know in the comments). Please keep in mind that in this case the popup calculates its position using the frame of the view you attach it to, to avoid being under the navbar. So you&#39;ll likely want to attach it to the root view of your app.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add a bool to control popup presentation state&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;.popup&lt;/code&gt; modifier to your view.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import PopupView

struct ContentView: View {

    @State var showingPopup = false

    var body: some View {
        YourView()
            .popup(isPresented: $showingPopup) {
                Text(&quot;The popup&quot;)
                    .frame(width: 200, height: 60)
                    .background(Color(red: 0.85, green: 0.8, blue: 0.95))
                    .cornerRadius(30.0)
            } customize: {
                $0.autohideIn(2)
            }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Required parameters&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;isPresented&lt;/code&gt; - binding to determine if the popup should be seen on screen or hidden&lt;br&gt; &lt;code&gt;view&lt;/code&gt; - view you want to display on your popup&lt;/p&gt; 
&lt;h4&gt;or&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;item&lt;/code&gt; - binding to item: if item&#39;s value is nil - popup is hidden, if non-nil - displayed. Be careful - library makes a copy of your item during dismiss animation!!&lt;br&gt; &lt;code&gt;view&lt;/code&gt; - view you want to display on your popup&lt;/p&gt; 
&lt;h3&gt;Available customizations - optional parameters&lt;/h3&gt; 
&lt;p&gt;use &lt;code&gt;customize&lt;/code&gt; closure in popup modifier:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;default&lt;/code&gt; - usual popup in the center of screen&lt;/li&gt; 
 &lt;li&gt;toast - fitted to screen i.e. without padding and ignoring safe area&lt;/li&gt; 
 &lt;li&gt;floater - has padding and can choose to use or ignore safe area&lt;/li&gt; 
 &lt;li&gt;scroll - adds a scroll to your content, if you scroll to top of this scroll - the gesture will continue into popup&#39;s drag dismiss.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;floater parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;verticalPadding&lt;/code&gt; - padding which will define padding from the relative vertical edge or will be added to safe area if &lt;code&gt;useSafeAreaInset&lt;/code&gt; is true&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;horizontalPadding&lt;/code&gt; - padding which will define padding from the relative horizontal edge or will be added to safe area if &lt;code&gt;useSafeAreaInset&lt;/code&gt; is true&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;useSafeAreaInset&lt;/code&gt; - whether to include safe area insets in floater padding&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;scroll parameters:&lt;br&gt; &lt;code&gt;headerView&lt;/code&gt; - a view on top which won&#39;t be a part of the scroll (if you need one)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; - topLeading, top, topTrailing, leading, center, trailing, bottomLeading, bottom, bottomTrailing &lt;code&gt;appearFrom&lt;/code&gt; - &lt;code&gt;topSlide, bottomSlide, leftSlide, rightSlide, centerScale&lt;/code&gt;: determines the direction of appearing animation. If left empty it copies &lt;code&gt;position&lt;/code&gt; parameter: so appears from .top edge, if &lt;code&gt;position&lt;/code&gt; is set to .top &lt;code&gt;disappearTo&lt;/code&gt; - same as &lt;code&gt;appearFrom&lt;/code&gt;, but for disappearing animation. If left empty it copies &lt;code&gt;appearFrom&lt;/code&gt;. &lt;code&gt;animation&lt;/code&gt; - custom animation for popup sliding onto screen&lt;br&gt; &lt;code&gt;autohideIn&lt;/code&gt; - time after which popup should disappear&lt;br&gt; &lt;code&gt;dragToDismiss&lt;/code&gt; - true by default: enable/disable drag to dismiss (upwards for .top popup types, downwards for .bottom and default type)&lt;br&gt; &lt;code&gt;closeOnTap&lt;/code&gt; - true by default: enable/disable closing on tap on popup&lt;br&gt; &lt;code&gt;closeOnTapOutside&lt;/code&gt; - false by default: enable/disable closing on tap on outside of popup&lt;br&gt; &lt;code&gt;backgroundColor&lt;/code&gt; - Color.clear by default: change background color of outside area&lt;br&gt; &lt;code&gt;backgroundView&lt;/code&gt; - custom background builder for outside area (if this one is set &lt;code&gt;backgroundColor&lt;/code&gt; is ignored)&lt;br&gt; &lt;code&gt;isOpaque&lt;/code&gt; - false by default: if true taps do not pass through popup&#39;s background and the popup is displayed on top of navbar. For more see section &quot;Show over navbar&quot;&lt;br&gt; &lt;code&gt;useKeyboardSafeArea&lt;/code&gt; - false by default: if true popup goes up for keyboardHeight when keyboard is displayed &lt;code&gt;dismissCallback&lt;/code&gt; - custom callback to call once the popup is dismissed&lt;/p&gt; 
&lt;h3&gt;Draggable card - sheet&lt;/h3&gt; 
&lt;p&gt;To implement a sheet (like in 4th gif) enable &lt;code&gt;dragToDismiss&lt;/code&gt; on bottom toast (see example project for implementation of the card itself)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.popup(isPresented: $show) {
    // your content 
} customize: {
    $0
        .type (.toast)
        .position(.bottom)
        .dragToDismiss(true)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;To try PopupView examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the repo &lt;code&gt;https://github.com/exyte/PopupView.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Open terminal and run &lt;code&gt;cd &amp;lt;PopupViewRepo&amp;gt;/Example/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; to install all dependencies&lt;/li&gt; 
 &lt;li&gt;Run open &lt;code&gt;PopupViewExample.xcworkspace/&lt;/code&gt; to open project in the Xcode&lt;/li&gt; 
 &lt;li&gt;Try it!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/exyte/PopupView.git&quot;)
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To install &lt;code&gt;PopupView&lt;/code&gt;, simply add the following line to your Podfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;ExytePopupView&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;http://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To integrate &lt;code&gt;PopupView&lt;/code&gt; into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ogdl&quot;&gt;github &quot;Exyte/PopupView&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 15.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+&lt;/li&gt; 
 &lt;li&gt;Xcode 12+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Our other open source SwiftUI libraries&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/exyte/AnchoredPopup&quot;&gt;AnchoredPopup&lt;/a&gt; - Anchored Popup grows &quot;out&quot; of a trigger view (similar to Hero animation)&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/Grid&quot;&gt;Grid&lt;/a&gt; - The most powerful Grid container&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/ScalingHeaderScrollView&quot;&gt;ScalingHeaderScrollView&lt;/a&gt; - A scroll view with a sticky header which shrinks as you scroll&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/AnimatedTabBar&quot;&gt;AnimatedTabBar&lt;/a&gt; - A tabbar with a number of preset animations&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/mediapicker&quot;&gt;MediaPicker&lt;/a&gt; - Customizable media picker&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/chat&quot;&gt;Chat&lt;/a&gt; - Chat UI framework with fully customizable message cells, input view, and a built-in media picker&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/OpenAI&quot;&gt;OpenAI&lt;/a&gt; Wrapper lib for &lt;a href=&quot;https://platform.openai.com/docs/api-reference/introduction&quot;&gt;OpenAI REST API&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/AnimatedGradient&quot;&gt;AnimatedGradient&lt;/a&gt; - Animated linear gradient&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/ConcentricOnboarding&quot;&gt;ConcentricOnboarding&lt;/a&gt; - Animated onboarding flow&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/FloatingButton&quot;&gt;FloatingButton&lt;/a&gt; - Floating button menu&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/ActivityIndicatorView&quot;&gt;ActivityIndicatorView&lt;/a&gt; - A number of animated loading indicators&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/ProgressIndicatorView&quot;&gt;ProgressIndicatorView&lt;/a&gt; - A number of animated progress indicators&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/FlagAndCountryCode&quot;&gt;FlagAndCountryCode&lt;/a&gt; - Phone codes and flags for every country&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/SVGView&quot;&gt;SVGView&lt;/a&gt; - SVG parser&lt;br&gt; &lt;a href=&quot;https://github.com/exyte/LiquidSwipe&quot;&gt;LiquidSwipe&lt;/a&gt; - Liquid navigation animation&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grpc/grpc-swift</title>
      <link>https://github.com/grpc/grpc-swift</link>
      <description>&lt;p&gt;The Swift language implementation of gRPC.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC Swift&lt;/h1&gt; 
&lt;p&gt;This repository contains a gRPC implementation for Swift. You can read more about gRPC on the &lt;a href=&quot;https://grpc.io&quot;&gt;gRPC project&#39;s website&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;📚 &lt;strong&gt;Documentation&lt;/strong&gt; and &lt;strong&gt;tutorials&lt;/strong&gt; are available on the &lt;a href=&quot;https://swiftpackageindex.com/grpc/grpc-swift/documentation&quot;&gt;Swift Package Index&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💻 &lt;strong&gt;Examples&lt;/strong&gt; are available in the &lt;a href=&quot;https://raw.githubusercontent.com/grpc/grpc-swift/main/Examples&quot;&gt;Examples&lt;/a&gt; directory&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Contributions&lt;/strong&gt; are welcome, please see &lt;a href=&quot;https://raw.githubusercontent.com/grpc/grpc-swift/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🪪 &lt;strong&gt;License&lt;/strong&gt; is Apache 2.0, repeated in &lt;a href=&quot;https://raw.githubusercontent.com/grpc/grpc-swift/main/License&quot;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Security&lt;/strong&gt; issues should be reported via the process in &lt;a href=&quot;https://raw.githubusercontent.com/grpc/grpc-swift/main/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔀 &lt;strong&gt;Related Repositories&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-swift-nio-transport&quot;&gt;&lt;code&gt;grpc-swift-nio-transport&lt;/code&gt;&lt;/a&gt; contains high-performance HTTP/2 client and server transport implementations for gRPC Swift built on top of SwiftNIO.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-swift-protobuf&quot;&gt;&lt;code&gt;grpc-swift-protobuf&lt;/code&gt;&lt;/a&gt; contains integrations with SwiftProtobuf for gRPC Swift.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-swift-extras&quot;&gt;&lt;code&gt;grpc-swift-extras&lt;/code&gt;&lt;/a&gt; contains optional extras for gRPC Swift.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;The following snippet contains a Swift Package manifest to use gRPC Swift v2.x with the SwiftNIO based transport and SwiftProtobuf serialization:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version: 6.0
import PackageDescription

let package = Package(
    name: &quot;Application&quot;,
    platforms: [.macOS(&quot;15.0&quot;)],
    dependencies: [
        .package(url: &quot;https://github.com/grpc/grpc-swift.git&quot;, from: &quot;2.0.0&quot;),
        .package(url: &quot;https://github.com/grpc/grpc-swift-nio-transport.git&quot;, from: &quot;1.0.0&quot;),
        .package(url: &quot;https://github.com/grpc/grpc-swift-protobuf.git&quot;, from: &quot;1.0.0&quot;),
    ],
    targets: [
        .executableTarget(
            name: &quot;Server&quot;,
            dependencies: [
                .product(name: &quot;GRPCCore&quot;, package: &quot;grpc-swift&quot;),
                .product(name: &quot;GRPCNIOTransportHTTP2&quot;, package: &quot;grpc-swift-nio-transport&quot;),
                .product(name: &quot;GRPCProtobuf&quot;, package: &quot;grpc-swift-protobuf&quot;),
            ]
        )
    ]
)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>stephencelis/SQLite.swift</title>
      <link>https://github.com/stephencelis/SQLite.swift</link>
      <description>&lt;p&gt;A type-safe, Swift-language layer over SQLite3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQLite.swift&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/stephencelis/SQLite.swift/build.yml?branch=master&quot; alt=&quot;Build Status&quot;&gt; &lt;a href=&quot;https://cocoapods.org/pods/SQLite.swift&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/SQLite.swift.svg?style=flat&quot; alt=&quot;CocoaPods Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/swift-5-orange.svg?style=flat&quot; alt=&quot;Swift5 compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/SQLite.swift&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/SQLite.swift.svg?style=flat&quot; alt=&quot;Platform&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/stephencelis/SQLite.swift&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/stephencelis/SQLite.swift.svg?sanitize=true&quot; alt=&quot;Join the chat at https://gitter.im/stephencelis/SQLite.swift&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A type-safe, &lt;a href=&quot;https://swift.org/&quot;&gt;Swift&lt;/a&gt;-language layer over &lt;a href=&quot;https://www.sqlite.org&quot;&gt;SQLite3&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/stephencelis/SQLite.swift&quot;&gt;SQLite.swift&lt;/a&gt; provides compile-time confidence in SQL statement syntax &lt;em&gt;and&lt;/em&gt; intent.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;A pure-Swift interface&lt;/li&gt; 
 &lt;li&gt;A type-safe, optional-aware SQL expression builder&lt;/li&gt; 
 &lt;li&gt;A flexible, chainable, lazy-executing query layer&lt;/li&gt; 
 &lt;li&gt;Automatically-typed data access&lt;/li&gt; 
 &lt;li&gt;A lightweight, uncomplicated query and parameter binding interface&lt;/li&gt; 
 &lt;li&gt;Developer-friendly error handling and debugging&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#full-text-search&quot;&gt;Full-text search&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&quot;&gt;Well-documented&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Extensively tested&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.zetetic.net/sqlcipher/&quot;&gt;SQLCipher&lt;/a&gt; support via CocoaPods&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#querying-the-schema&quot;&gt;Schema query/migration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Works on &lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Linux.md&quot;&gt;Linux&lt;/a&gt; (with some limitations)&lt;/li&gt; 
 &lt;li&gt;Active support at &lt;a href=&quot;https://stackoverflow.com/questions/tagged/sqlite.swift&quot;&gt;StackOverflow&lt;/a&gt;, and &lt;a href=&quot;https://gitter.im/stephencelis/SQLite.swift&quot;&gt;Gitter Chat Room&lt;/a&gt; (&lt;em&gt;experimental&lt;/em&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SQLite

// Wrap everything in a do...catch to handle errors
do {
    let db = try Connection(&quot;path/to/db.sqlite3&quot;)

    let users = Table(&quot;users&quot;)
    let id = Expression&amp;lt;Int64&amp;gt;(&quot;id&quot;)
    let name = Expression&amp;lt;String?&amp;gt;(&quot;name&quot;)
    let email = Expression&amp;lt;String&amp;gt;(&quot;email&quot;)

    try db.run(users.create { t in
        t.column(id, primaryKey: true)
        t.column(name)
        t.column(email, unique: true)
    })
    // CREATE TABLE &quot;users&quot; (
    //     &quot;id&quot; INTEGER PRIMARY KEY NOT NULL,
    //     &quot;name&quot; TEXT,
    //     &quot;email&quot; TEXT NOT NULL UNIQUE
    // )

    let insert = users.insert(name &amp;lt;- &quot;Alice&quot;, email &amp;lt;- &quot;alice@mac.com&quot;)
    let rowid = try db.run(insert)
    // INSERT INTO &quot;users&quot; (&quot;name&quot;, &quot;email&quot;) VALUES (&#39;Alice&#39;, &#39;alice@mac.com&#39;)

    for user in try db.prepare(users) {
        print(&quot;id: \(user[id]), name: \(user[name]), email: \(user[email])&quot;)
        // id: 1, name: Optional(&quot;Alice&quot;), email: alice@mac.com
    }
    // SELECT * FROM &quot;users&quot;

    let alice = users.filter(id == rowid)

    try db.run(alice.update(email &amp;lt;- email.replace(&quot;mac.com&quot;, with: &quot;me.com&quot;)))
    // UPDATE &quot;users&quot; SET &quot;email&quot; = replace(&quot;email&quot;, &#39;mac.com&#39;, &#39;me.com&#39;)
    // WHERE (&quot;id&quot; = 1)

    try db.run(alice.delete())
    // DELETE FROM &quot;users&quot; WHERE (&quot;id&quot; = 1)

    try db.scalar(users.count) // 0
    // SELECT count(*) FROM &quot;users&quot;
} catch {
    print (error)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SQLite.swift also works as a lightweight, Swift-friendly wrapper over the C API.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Wrap everything in a do...catch to handle errors
do {
    // ...

    let stmt = try db.prepare(&quot;INSERT INTO users (email) VALUES (?)&quot;)
    for email in [&quot;betty@icloud.com&quot;, &quot;cathy@icloud.com&quot;] {
        try stmt.run(email)
    }

    db.totalChanges    // 3
    db.changes         // 1
    db.lastInsertRowid // 3

    for row in try db.prepare(&quot;SELECT id, email FROM users&quot;) {
        print(&quot;id: \(row[0]), email: \(row[1])&quot;)
        // id: Optional(2), email: Optional(&quot;betty@icloud.com&quot;)
        // id: Optional(3), email: Optional(&quot;cathy@icloud.com&quot;)
    }

    try db.scalar(&quot;SELECT count(*) FROM users&quot;) // 2
} catch {
    print (error)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&quot;&gt;Read the documentation&lt;/a&gt; or explore more, interactively, from the Xcode project’s playground.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/playground@2x.png&quot; alt=&quot;SQLite.playground Screen Shot&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/stephencelis/SQLite.swift.git&quot;, from: &quot;0.15.3&quot;)
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Build your project:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ swift build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/stephencelis/SQLite.swift/tree/master/Tests/SPM&quot;&gt;Tests/SPM&lt;/a&gt; folder for a small demo project which uses SPM.&lt;/p&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a simple, decentralized dependency manager for Cocoa. To install SQLite.swift with Carthage:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure Carthage is &lt;a href=&quot;https://github.com/Carthage/Carthage#installing-carthage&quot;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Update your Cartfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;github &quot;stephencelis/SQLite.swift&quot; ~&amp;gt; 0.15.3
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; and &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&quot;&gt;add the appropriate framework&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. To install SQLite.swift with CocoaPods:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure CocoaPods is &lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html#getting-started&quot;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Using the default Ruby install will require you to use sudo when
# installing and updating gems.
[sudo] gem install cocoapods
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Update your Podfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;use_frameworks!

target &#39;YourAppTargetName&#39; do
    pod &#39;SQLite.swift&#39;, &#39;~&amp;gt; 0.14.0&#39;
end
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install --repo-update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;To install SQLite.swift as an Xcode sub-project:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Drag the &lt;strong&gt;SQLite.xcodeproj&lt;/strong&gt; file into your own project. (&lt;a href=&quot;https://git-scm.com/book/en/Git-Tools-Submodules&quot;&gt;Submodule&lt;/a&gt;, clone, or &lt;a href=&quot;https://github.com/stephencelis/SQLite.swift/archive/master.zip&quot;&gt;download&lt;/a&gt; the project first.)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/installation@2x.png&quot; alt=&quot;Installation Screen Shot&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In your target’s &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Some additional steps are required to install the application on an actual device:&lt;/p&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Embedded Binaries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Planning.md&quot;&gt;See the planning document&lt;/a&gt; for a roadmap and existing feature requests.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/CONTRIBUTING.md#contributing&quot;&gt;Read the contributing guidelines&lt;/a&gt;. The &lt;em&gt;TL;DR&lt;/em&gt; (but please; &lt;em&gt;R&lt;/em&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Need &lt;strong&gt;help&lt;/strong&gt; or have a &lt;strong&gt;general question&lt;/strong&gt;? &lt;a href=&quot;https://stackoverflow.com/questions/tagged/sqlite.swift&quot;&gt;Ask on Stack Overflow&lt;/a&gt; (tag &lt;code&gt;sqlite.swift&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;Found a &lt;strong&gt;bug&lt;/strong&gt; or have a &lt;strong&gt;feature request&lt;/strong&gt;? &lt;a href=&quot;https://github.com/stephencelis/SQLite.swift/issues/new&quot;&gt;Open an issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Want to &lt;strong&gt;contribute&lt;/strong&gt;? &lt;a href=&quot;https://github.com/stephencelis/SQLite.swift/fork&quot;&gt;Submit a pull request&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Original author&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;mailto:stephen@stephencelis.com&quot;&gt;Stephen Celis&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/stephencelis&quot;&gt;@stephencelis&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SQLite.swift is available under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/LICENSE.txt&quot;&gt;the LICENSE file&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Related&lt;/h2&gt; 
&lt;p&gt;These projects enhance or use SQLite.swift:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/garriguv/SQLiteMigrationManager.swift&quot;&gt;SQLiteMigrationManager.swift&lt;/a&gt; (inspired by &lt;a href=&quot;https://github.com/layerhq/FMDBMigrationManager&quot;&gt;FMDBMigrationManager&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;p&gt;Looking for something else? Try another Swift wrapper (or &lt;a href=&quot;https://github.com/ccgus/fmdb&quot;&gt;FMDB&lt;/a&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/groue/GRDB.swift&quot;&gt;GRDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FahimF/SQLiteDB&quot;&gt;SQLiteDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nerdyc/Squeal&quot;&gt;Squeal&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>onevcat/Kingfisher</title>
      <link>https://github.com/onevcat/Kingfisher</link>
      <description>&lt;p&gt;A lightweight, pure-Swift library for downloading and caching images from the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png&quot; alt=&quot;Kingfisher&quot; title=&quot;Kingfisher&quot; width=&quot;557&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild&quot;&gt;&lt;img src=&quot;https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-Doc-DE5C43.svg?style=flat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Kingfisher&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/onevcat/Kingfisher.svg?color=blue&amp;amp;include_prereleases=&amp;amp;sort=semver&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-black&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Kingfisher is a powerful, pure-Swift library for downloading and caching images from the web. It provides you a chance to use a pure-Swift way to work with remote images in your next app.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Asynchronous image downloading and caching.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Loading image from either &lt;code&gt;URLSession&lt;/code&gt;-based networking or local provided data.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Useful image processors and filters provided.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Multiple-layer hybrid cache for both memory and disk.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Fine control on cache behavior. Customizable expiration date and size limit.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Cancelable downloading and auto-reusing previous downloaded content to improve performance.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Independent components. Use the downloader, caching system, and image processors separately as you need.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Prefetching images and showing them from the cache to boost your app.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Extensions for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;NSImageView&lt;/code&gt;, &lt;code&gt;NSButton&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;NSTextAttachment&lt;/code&gt;, &lt;code&gt;WKInterfaceImage&lt;/code&gt;, &lt;code&gt;TVMonogramView&lt;/code&gt; and &lt;code&gt;CPListItem&lt;/code&gt; to directly set an image from a URL.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Built-in transition animation when setting images.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Customizable placeholder and indicator while loading images.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Extensible image processing and image format easily.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Low Data Mode support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; SwiftUI support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Swift 6 &amp;amp; Swift Concurrency (strict mode) prepared.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Load &amp;amp; cache for Live Photo.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Kingfisher 101&lt;/h3&gt; 
&lt;p&gt;The simplest use-case is setting an image to an image view with the &lt;code&gt;UIImageView&lt;/code&gt; extension:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Kingfisher

let url = URL(string: &quot;https://example.com/image.png&quot;)
imageView.kf.setImage(with: url)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Kingfisher will download the image from &lt;code&gt;url&lt;/code&gt;, send it to both memory cache and disk cache, and display it in &lt;code&gt;imageView&lt;/code&gt;. When you set it with the same URL later, the image will be retrieved from the cache and shown immediately.&lt;/p&gt; 
&lt;p&gt;It also works if you use SwiftUI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var body: some View {
    KFImage(URL(string: &quot;https://example.com/image.png&quot;)!)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;A More Advanced Example&lt;/h3&gt; 
&lt;p&gt;With the powerful options, you can do hard tasks with Kingfisher in a simple way. For example, the code below:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Downloads a high-resolution image.&lt;/li&gt; 
 &lt;li&gt;Downsamples it to match the image view size.&lt;/li&gt; 
 &lt;li&gt;Makes it round cornered with a given radius.&lt;/li&gt; 
 &lt;li&gt;Shows a system indicator and a placeholder image while downloading.&lt;/li&gt; 
 &lt;li&gt;When prepared, it animates the small thumbnail image with a &quot;fade in&quot; effect.&lt;/li&gt; 
 &lt;li&gt;The original large image is also cached to disk for later use, to get rid of downloading it again in a detail view.&lt;/li&gt; 
 &lt;li&gt;A console log is printed when the task finishes, either for success or failure.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let url = URL(string: &quot;https://example.com/high_resolution_image.png&quot;)
let processor = DownsamplingImageProcessor(size: imageView.bounds.size)
             |&amp;gt; RoundCornerImageProcessor(cornerRadius: 20)
imageView.kf.indicatorType = .activity
imageView.kf.setImage(
    with: url,
    placeholder: UIImage(named: &quot;placeholderImage&quot;),
    options: [
        .processor(processor),
        .scaleFactor(UIScreen.main.scale),
        .transition(.fade(1)),
        .cacheOriginalImage
    ])
{
    result in
    switch result {
    case .success(let value):
        print(&quot;Task done for: \(value.source.url?.absoluteString ?? &quot;&quot;)&quot;)
    case .failure(let error):
        print(&quot;Job failed: \(error.localizedDescription)&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is a common situation I can meet in my daily work. Think about how many lines you need to write without Kingfisher!&lt;/p&gt; 
&lt;h3&gt;Method Chaining&lt;/h3&gt; 
&lt;p&gt;If you are not a fan of the &lt;code&gt;kf&lt;/code&gt; extension, you can also prefer to use the &lt;code&gt;KF&lt;/code&gt; builder and chained the method invocations. The code below is doing the same thing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Use `kf` extension
imageView.kf.setImage(
    with: url,
    placeholder: placeholderImage,
    options: [
        .processor(processor),
        .loadDiskFileSynchronously,
        .cacheOriginalImage,
        .transition(.fade(0.25)),
        .lowDataMode(.network(lowResolutionURL))
    ],
    progressBlock: { receivedSize, totalSize in
        // Progress updated
    },
    completionHandler: { result in
        // Done
    }
)

// Use `KF` builder
KF.url(url)
  .placeholder(placeholderImage)
  .setProcessor(processor)
  .loadDiskFileSynchronously()
  .cacheMemoryOnly()
  .fade(duration: 0.25)
  .lowDataModeSource(.network(lowResolutionURL))
  .onProgress { receivedSize, totalSize in  }
  .onSuccess { result in  }
  .onFailure { error in }
  .set(to: imageView)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And even better, if later you want to switch to SwiftUI, just change the &lt;code&gt;KF&lt;/code&gt; above to &lt;code&gt;KFImage&lt;/code&gt;, and you&#39;ve done:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView: View {
    var body: some View {
        KFImage.url(url)
          .placeholder(placeholderImage)
          .setProcessor(processor)
          .loadDiskFileSynchronously()
          .cacheMemoryOnly()
          .fade(duration: 0.25)
          .lowDataModeSource(.network(lowResolutionURL))
          .onProgress { receivedSize, totalSize in  }
          .onSuccess { result in  }
          .onFailure { error in }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;h3&gt;Kingfisher 8.0&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(UIKit/AppKit) iOS 13.0+ / macOS 10.15+ / tvOS 13.0+ / watchOS 6.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;(SwiftUI) iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;Swift 5.9+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Kingfisher 7.0&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(UIKit/AppKit) iOS 12.0+ / macOS 10.14+ / tvOS 12.0+ / watchOS 5.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;(SwiftUI) iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;Swift 5.0+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Refer to one of the following tutorials to install and use the framework:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstarteduikit&quot;&gt;UIKit Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstartedswiftui&quot;&gt;SwiftUI Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatively, you can follow either of the methods below.&lt;/p&gt; 
&lt;h4&gt;Swift Package Manager&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;https://github.com/onevcat/Kingfisher.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Select &quot;Up to Next Major&quot; with &quot;8.0.0&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;CocoaPods&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;13.0&#39;
use_frameworks!

target &#39;MyApp&#39; do
  pod &#39;Kingfisher&#39;, &#39;~&amp;gt; 8.0&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Pre-built Framework&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the release page, download the latest version of Kingfisher from the assets section.&lt;/li&gt; 
 &lt;li&gt;Drag the &lt;code&gt;Kingfisher.xcframework&lt;/code&gt; into your project and add it to the target (usually the app target).&lt;/li&gt; 
 &lt;li&gt;Select your target, in the &quot;General&quot; Tab, find the &quot;Frameworks, Libraries, and Embedded Content&quot; section, set the &lt;code&gt;Embed Without Signing&lt;/code&gt; to Kingfisher.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Check the documentation and tutorials:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher&quot;&gt;Documentation Home&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/gettingstarted&quot;&gt;Getting Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstarteduikit&quot;&gt;UIKit Tutorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstartedswiftui&quot;&gt;SwiftUI Tutorial&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks&quot;&gt;Common Tasks - General&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_cache&quot;&gt;Common Tasks - Cache&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_downloader&quot;&gt;Common Tasks - Downloader&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_processor&quot;&gt;Common tasks - Processor&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Migrating&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/migration-to-8&quot;&gt;Kingfisher 8.0 Migration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&quot;&gt;Kingfisher 7.0 Migration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using an even earlier version, see the guides below to know the steps for migrating.&lt;/p&gt; 
&lt;h2&gt;Other&lt;/h2&gt; 
&lt;h3&gt;Future of Kingfisher&lt;/h3&gt; 
&lt;p&gt;I want to keep Kingfisher lightweight. This framework focuses on providing a simple solution for downloading and caching images. This doesn’t mean the framework can’t be improved. Kingfisher is far from perfect, so necessary and useful updates will be made to make it better.&lt;/p&gt; 
&lt;h3&gt;Developments and Tests&lt;/h3&gt; 
&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build with all tests green. :)&lt;/p&gt; 
&lt;h3&gt;About the logo&lt;/h3&gt; 
&lt;p&gt;The logo of Kingfisher is inspired by &lt;a href=&quot;http://en.wikipedia.org/wiki/Tangram&quot;&gt;Tangram (七巧板)&lt;/a&gt;, a dissection puzzle consisting of seven flat shapes from China. I believe she&#39;s a kingfisher bird instead of a swift, but someone insists that she is a pigeon. I guess I should give her a name. Hi, guys, do you have any suggestions?&lt;/p&gt; 
&lt;h3&gt;Contact&lt;/h3&gt; 
&lt;p&gt;Follow and contact me on &lt;a href=&quot;http://twitter.com/onevcat&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;http://weibo.com/onevcat&quot;&gt;Sina Weibo&lt;/a&gt;. If you find an issue, &lt;a href=&quot;https://github.com/onevcat/Kingfisher/issues/new&quot;&gt;open a ticket&lt;/a&gt;. Pull requests are warmly welcome as well.&lt;/p&gt; 
&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; 
&lt;p&gt;Open-source projects cannot live long without your help. If you find Kingfisher to be useful, please consider supporting this project by becoming a sponsor. Your user icon or company logo shows up &lt;a href=&quot;https://onevcat.com/tabs/about/&quot;&gt;on my blog&lt;/a&gt; with a link to your home page.&lt;/p&gt; 
&lt;p&gt;Become a sponsor through &lt;a href=&quot;https://github.com/sponsors/onevcat&quot;&gt;GitHub Sponsors&lt;/a&gt;. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Special thanks to:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://img.ly/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png&quot; alt=&quot;imgly&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.emergetools.com&quot;&gt;&lt;img src=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/1019875/254794187-d44f6f50-993f-42e3-b79c-960f69c4adc1.png&quot; alt=&quot;emergetools&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;Kingfisher is released under the MIT license. See LICENSE for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>getsentry/sentry-cocoa</title>
      <link>https://github.com/getsentry/sentry-cocoa</link>
      <description>&lt;p&gt;The official Sentry SDK for iOS, tvOS, macOS, watchOS.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://sentry.io/?utm_source=github&amp;amp;utm_medium=logo&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://sentry-brand.storage.googleapis.com/github-banners/github-sdk-cocoa.jpg&quot; alt=&quot;Sentry for Apple&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;Bad software is everywhere, and we&#39;re tired of it. Sentry is on a mission to help developers write better software faster, so we can get back to enjoying technology. If you want to join us &lt;a href=&quot;https://sentry.io/careers/&quot;&gt;&lt;kbd&gt;&lt;strong&gt;Check out our open positions&lt;/strong&gt;&lt;/kbd&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;Official Sentry SDK for iOS / tvOS / macOS / watchOS &lt;sup&gt;(1)&lt;/sup&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/getsentry/sentry-cocoa/actions/workflows/build.yml?query=branch%3Amain&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/getsentry/sentry-cocoa/build.yml?branch=main&quot; alt=&quot;Build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codebeat.co/projects/github-com-getsentry-sentry-cocoa-master&quot;&gt;&lt;img src=&quot;https://codebeat.co/badges/07f0bc91-9102-4fd8-99a6-30b25dc98037&quot; alt=&quot;codebeat badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/getsentry/sentry-cocoa&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/getsentry/sentry-cocoa/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Sentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Sentry.svg?sanitize=true&quot; alt=&quot;CocoaPods compadible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=flat&quot; alt=&quot;SwiftPM compatible&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/cocoapods/p/Sentry.svg?style=flat&quot; alt=&quot;platforms&quot;&gt; &lt;a href=&quot;https://swiftpackageindex.com/getsentry/sentry-cocoa&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fgetsentry%2Fsentry-cocoa%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Package Index&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/PXa5Apfe7K&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&quot; alt=&quot;Discord Chat&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This SDK is written in Objective-C but also provides a nice Swift interface.&lt;/p&gt; 
&lt;h1&gt;Releases&lt;/h1&gt; 
&lt;p&gt;This repo uses the following ways to release SDK updates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Pre-release&lt;/code&gt;: We create pre-releases (alpha, beta, RC,…) for larger and potentially more impactful changes, such as new features or major versions.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Latest&lt;/code&gt;: We continuously release major/minor/hotfix versions from the &lt;code&gt;main&lt;/code&gt; branch. These releases go through all our internal quality gates and are very safe to use and intended to be the default for most teams.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Stable&lt;/code&gt;: We promote releases from &lt;code&gt;Latest&lt;/code&gt; when they have been used in the field for some time and in scale, considering time since release, adoption, and other quality and stability metrics. These releases will be indicated on the &lt;a href=&quot;https://github.com/getsentry/sentry-cocoa/releases/&quot;&gt;releases page&lt;/a&gt; with the &lt;code&gt;Stable&lt;/code&gt; suffix.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Where is the master branch?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;We renamed the default branch from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Initialization&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Remember to call this as early in your application life cycle as possible&lt;/em&gt; Ideally in &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt; in &lt;code&gt;AppDelegate&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Sentry

// ....

SentrySDK.start { options in
    options.dsn = &quot;___PUBLIC_DSN___&quot;
    options.debug = true // Helpful to see what&#39;s going on
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@import Sentry;

// ....

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @&quot;___PUBLIC_DSN___&quot;;
    options.debug = @YES; // Helpful to see what&#39;s going on
}];

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information checkout the &lt;a href=&quot;https://docs.sentry.io/platforms/apple&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;sup&gt;(1)&lt;/sup&gt;limited symbolication support and no crash handling.&lt;/p&gt; 
&lt;h1&gt;Blog posts&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/08/23/mobile-vitals-four-metrics-every-mobile-developer-should-care-about/&quot;&gt;Mobile Vitals - Four Metrics Every Mobile Developer Should Care About&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/02/03/how-to-use-sentry-attachments-with-mobile-applications/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&quot;&gt;How to use Sentry Attachments with Mobile Applications&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/02/16/close-the-loop-with-user-feedback/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&quot;&gt;Close the Loop with User Feedback&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/03/30/a-sanity-listicle-for-mobile-developers/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&quot;&gt;A Sanity Listicle for Mobile Developers&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.sentry.io/platforms/apple/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-sentry.io-green.svg?sanitize=true&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/getsentry/sentry-cocoa/discussions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/getsentry/sentry-cocoa.svg?sanitize=true&quot; alt=&quot;Discussions&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/PXa5Apfe7K&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&quot; alt=&quot;Discord Chat&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/sentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/stack%20overflow-sentry-green.svg?sanitize=true&quot; alt=&quot;Stack Overflow&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/getsentry/.github/raw/master/CODE_OF_CONDUCT.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20of%20conduct-sentry-green.svg?sanitize=true&quot; alt=&quot;Code of Conduct&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=getsentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/getsentry?label=getsentry&amp;amp;style=social&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
