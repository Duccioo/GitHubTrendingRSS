<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub C++ Monthly Trending</title>
    <description>Monthly Trending of C++ in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:57:54 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>LadybirdBrowser/ladybird</title>
      <link>https://github.com/LadybirdBrowser/ladybird</link>
      <description>&lt;p&gt;Truly independent web browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ladybird&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://ladybird.org&quot;&gt;Ladybird&lt;/a&gt; is a truly independent web browser, using a novel engine based on web standards.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Ladybird is in a pre-alpha state, and only suitable for use by developers&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;We aim to build a complete, usable browser for the modern web.&lt;/p&gt; 
&lt;p&gt;Ladybird uses a multi-process architecture with a main UI process, several WebContent renderer processes, an ImageDecoder process, and a RequestServer process.&lt;/p&gt; 
&lt;p&gt;Image decoding and network connections are done out of process to be more robust against malicious content. Each tab has its own renderer process, which is sandboxed from the rest of the system.&lt;/p&gt; 
&lt;p&gt;At the moment, many core library support components are inherited from SerenityOS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;LibWeb: Web rendering engine&lt;/li&gt; 
 &lt;li&gt;LibJS: JavaScript engine&lt;/li&gt; 
 &lt;li&gt;LibWasm: WebAssembly implementation&lt;/li&gt; 
 &lt;li&gt;LibCrypto/LibTLS: Cryptography primitives and Transport Layer Security&lt;/li&gt; 
 &lt;li&gt;LibHTTP: HTTP/1.1 client&lt;/li&gt; 
 &lt;li&gt;LibGfx: 2D Graphics Library, Image Decoding and Rendering&lt;/li&gt; 
 &lt;li&gt;LibUnicode: Unicode and locale support&lt;/li&gt; 
 &lt;li&gt;LibMedia: Audio and video playback&lt;/li&gt; 
 &lt;li&gt;LibCore: Event loop, OS abstraction layer&lt;/li&gt; 
 &lt;li&gt;LibIPC: Inter-process communication&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How do I build and run this?&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/Documentation/BuildInstructionsLadybird.md&quot;&gt;build instructions&lt;/a&gt; for information on how to build Ladybird.&lt;/p&gt; 
&lt;p&gt;Ladybird runs on Linux, macOS, Windows (with WSL2), and many other *Nixes.&lt;/p&gt; 
&lt;h2&gt;How do I read the documentation?&lt;/h2&gt; 
&lt;p&gt;Code-related documentation can be found in the &lt;a href=&quot;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/Documentation/&quot;&gt;documentation&lt;/a&gt; folder.&lt;/p&gt; 
&lt;h2&gt;Get in touch and participate!&lt;/h2&gt; 
&lt;p&gt;Join &lt;a href=&quot;https://discord.gg/nvfjVJ4Svh&quot;&gt;our Discord server&lt;/a&gt; to participate in development discussion.&lt;/p&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/Documentation/GettingStartedContributing.md&quot;&gt;Getting started contributing&lt;/a&gt; if you plan to contribute to Ladybird for the first time.&lt;/p&gt; 
&lt;p&gt;Before opening an issue, please see the &lt;a href=&quot;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/CONTRIBUTING.md#issue-policy&quot;&gt;issue policy&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/ISSUES.md&quot;&gt;detailed issue-reporting guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The full contribution guidelines can be found in &lt;a href=&quot;https://raw.githubusercontent.com/LadybirdBrowser/ladybird/master/CONTRIBUTING.md&quot;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Ladybird is licensed under a 2-clause BSD license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>78/xiaozhi-esp32</title>
      <link>https://github.com/78/xiaozhi-esp32</link>
      <description>&lt;p&gt;Build your own AI friend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;小智 AI 聊天机器人 （XiaoZhi AI Chatbot）&lt;/h1&gt; 
&lt;p&gt;（中文 | &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/README_en.md&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/README_ja.md&quot;&gt;日本語&lt;/a&gt;）&lt;/p&gt; 
&lt;p&gt;这是虾哥的第一个硬件作品。&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://www.bilibili.com/video/BV11msTenEH3/&quot;&gt;ESP32+SenseVoice+Qwen72B打造你的AI聊天伴侣！【bilibili】&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://www.bilibili.com/video/BV1GQP6eNEFG/&quot;&gt;给小智装上 DeepSeek 的聪明大脑【bilibili】&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://www.bilibili.com/video/BV1XnmFYLEJN/&quot;&gt;手工打造你的 AI 女友，新手入门教程【bilibili】&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;项目目的&lt;/h2&gt; 
&lt;p&gt;本项目是一个开源项目，以 MIT 许可证发布，允许任何人免费使用，并可以用于商业用途。&lt;/p&gt; 
&lt;p&gt;我们希望通过这个项目，能够帮助更多人入门 AI 硬件开发，了解如何将当下飞速发展的大语言模型应用到实际的硬件设备中。无论你是对 AI 感兴趣的学生，还是想要探索新技术的开发者，都可以通过这个项目获得宝贵的学习经验。&lt;/p&gt; 
&lt;p&gt;欢迎所有人参与到项目的开发和改进中来。如果你有任何想法或建议，请随时提出 Issue 或加入群聊。&lt;/p&gt; 
&lt;p&gt;学习交流 QQ 群：376893254&lt;/p&gt; 
&lt;h2&gt;已实现功能&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Wi-Fi / ML307 Cat.1 4G&lt;/li&gt; 
 &lt;li&gt;BOOT 键唤醒和打断，支持点击和长按两种触发方式&lt;/li&gt; 
 &lt;li&gt;离线语音唤醒 &lt;a href=&quot;https://github.com/espressif/esp-sr&quot;&gt;ESP-SR&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;流式语音对话（WebSocket 或 UDP 协议）&lt;/li&gt; 
 &lt;li&gt;支持国语、粤语、英语、日语、韩语 5 种语言识别 &lt;a href=&quot;https://github.com/FunAudioLLM/SenseVoice&quot;&gt;SenseVoice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;声纹识别，识别是谁在喊 AI 的名字 &lt;a href=&quot;https://github.com/modelscope/3D-Speaker&quot;&gt;3D Speaker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;大模型 TTS（火山引擎 或 CosyVoice）&lt;/li&gt; 
 &lt;li&gt;大模型 LLM（Qwen, DeepSeek, Doubao）&lt;/li&gt; 
 &lt;li&gt;可配置的提示词和音色（自定义角色）&lt;/li&gt; 
 &lt;li&gt;短期记忆，每轮对话后自我总结&lt;/li&gt; 
 &lt;li&gt;OLED / LCD 显示屏，显示信号强弱或对话内容&lt;/li&gt; 
 &lt;li&gt;支持 LCD 显示图片表情&lt;/li&gt; 
 &lt;li&gt;支持多语言（中文、英文）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;硬件部分&lt;/h2&gt; 
&lt;h3&gt;面包板手工制作实践&lt;/h3&gt; 
&lt;p&gt;详见飞书文档教程：&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://ccnphfhqs21z.feishu.cn/wiki/F5krwD16viZoF0kKkvDcrZNYnhb?from=from_copylink&quot;&gt;《小智 AI 聊天机器人百科全书》&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;面包板效果图如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/wiring2.jpg&quot; alt=&quot;面包板效果图&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;已支持的开源硬件&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-shi-zhan-pai-esp32-s3-kai-fa-ban&quot; target=&quot;_blank&quot; title=&quot;立创·实战派 ESP32-S3 开发板&quot;&gt;立创·实战派 ESP32-S3 开发板&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-box&quot; target=&quot;_blank&quot; title=&quot;乐鑫 ESP32-S3-BOX3&quot;&gt;乐鑫 ESP32-S3-BOX3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.m5stack.com/zh_CN/core/CoreS3&quot; target=&quot;_blank&quot; title=&quot;M5Stack CoreS3&quot;&gt;M5Stack CoreS3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.m5stack.com/en/atom/Atomic%20Echo%20Base&quot; target=&quot;_blank&quot; title=&quot;AtomS3R + Echo Base&quot;&gt;AtomS3R + Echo Base&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.m5stack.com/en/core/ATOM%20Matrix&quot; target=&quot;_blank&quot; title=&quot;AtomMatrix + Echo Base&quot;&gt;AtomMatrix + Echo Base&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gf.bilibili.com/item/detail/1108782064&quot; target=&quot;_blank&quot; title=&quot;神奇按钮 2.4&quot;&gt;神奇按钮 2.4&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.waveshare.net/shop/ESP32-S3-Touch-AMOLED-1.8.htm&quot; target=&quot;_blank&quot; title=&quot;微雪电子 ESP32-S3-Touch-AMOLED-1.8&quot;&gt;微雪电子 ESP32-S3-Touch-AMOLED-1.8&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Xinyuan-LilyGO/T-Circle-S3&quot; target=&quot;_blank&quot; title=&quot;LILYGO T-Circle-S3&quot;&gt;LILYGO T-Circle-S3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://oshwhub.com/tenclass01/xmini_c3&quot; target=&quot;_blank&quot; title=&quot;虾哥 Mini C3&quot;&gt;虾哥 Mini C3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://oshwhub.com/movecall/moji-xiaozhi-ai-derivative-editi&quot; target=&quot;_blank&quot; title=&quot;Movecall Moji ESP32S3&quot;&gt;Moji 小智AI衍生版&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/WMnologo/xingzhi-ai&quot; target=&quot;_blank&quot; title=&quot;无名科技Nologo-星智-1.54&quot;&gt;无名科技Nologo-星智-1.54TFT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/WMnologo/xingzhi-ai&quot; target=&quot;_blank&quot; title=&quot;无名科技Nologo-星智-0.96&quot;&gt;无名科技Nologo-星智-0.96TFT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.seeedstudio.com/SenseCAP-Watcher-W1-A-p-5979.html&quot; target=&quot;_blank&quot; title=&quot;SenseCAP Watcher&quot;&gt;SenseCAP Watcher&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/lichuang-s3.jpg&quot; target=&quot;_blank&quot; title=&quot;立创·实战派 ESP32-S3 开发板&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/lichuang-s3.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/espbox3.jpg&quot; target=&quot;_blank&quot; title=&quot;乐鑫 ESP32-S3-BOX3&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/espbox3.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/m5cores3.jpg&quot; target=&quot;_blank&quot; title=&quot;M5Stack CoreS3&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/m5cores3.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/atoms3r.jpg&quot; target=&quot;_blank&quot; title=&quot;AtomS3R + Echo Base&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/atoms3r.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/magiclick.jpg&quot; target=&quot;_blank&quot; title=&quot;神奇按钮 2.4&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/magiclick.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/waveshare.jpg&quot; target=&quot;_blank&quot; title=&quot;微雪电子 ESP32-S3-Touch-AMOLED-1.8&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/waveshare.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/lilygo-t-circle-s3.jpg&quot; target=&quot;_blank&quot; title=&quot;LILYGO T-Circle-S3&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/lilygo-t-circle-s3.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/xmini-c3.jpg&quot; target=&quot;_blank&quot; title=&quot;虾哥 Mini C3&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/xmini-c3.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/movecall-moji-esp32s3.jpg&quot; target=&quot;_blank&quot; title=&quot;Movecall Moji 小智AI衍生版&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/movecall-moji-esp32s3.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_1.54.jpg&quot; target=&quot;_blank&quot; title=&quot;无名科技Nologo-星智-1.54&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_1.54.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_0.96.jpg&quot; target=&quot;_blank&quot; title=&quot;无名科技Nologo-星智-0.96&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/wmnologo_xingzhi_0.96.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/sensecap_watcher.jpg&quot; target=&quot;_blank&quot; title=&quot;SenseCAP Watcher&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/v1/sensecap_watcher.jpg&quot; width=&quot;240&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;固件部分&lt;/h2&gt; 
&lt;h3&gt;免开发环境烧录&lt;/h3&gt; 
&lt;p&gt;新手第一次操作建议先不要搭建开发环境，直接使用免开发环境烧录的固件。&lt;/p&gt; 
&lt;p&gt;固件默认接入 &lt;a href=&quot;https://xiaozhi.me&quot;&gt;xiaozhi.me&lt;/a&gt; 官方服务器，目前个人用户注册账号可以免费使用 Qwen 实时模型。&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://ccnphfhqs21z.feishu.cn/wiki/Zpz4wXBtdimBrLk25WdcXzxcnNS&quot;&gt;Flash烧录固件（无IDF开发环境）&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;开发环境&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cursor 或 VSCode&lt;/li&gt; 
 &lt;li&gt;安装 ESP-IDF 插件，选择 SDK 版本 5.3 或以上&lt;/li&gt; 
 &lt;li&gt;Linux 比 Windows 更好，编译速度快，也免去驱动问题的困扰&lt;/li&gt; 
 &lt;li&gt;使用 Google C++ 代码风格，提交代码时请确保符合规范&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;智能体配置&lt;/h2&gt; 
&lt;p&gt;如果你已经拥有一个小智 AI 聊天机器人设备，可以登录 &lt;a href=&quot;https://xiaozhi.me&quot;&gt;xiaozhi.me&lt;/a&gt; 控制台进行配置。&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://www.bilibili.com/video/BV1jUCUY2EKM/&quot;&gt;后台操作视频教程（旧版界面）&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;技术原理与私有化部署&lt;/h2&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/websocket.md&quot;&gt;一份详细的 WebSocket 通信协议文档&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;在个人电脑上部署服务器，可以参考另一位作者同样以 MIT 许可证开源的项目 &lt;a href=&quot;https://github.com/xinnan-tech/xiaozhi-esp32-server&quot;&gt;xiaozhi-esp32-server&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;a href=&quot;https://star-history.com/#78/xiaozhi-esp32&amp;amp;Date&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&amp;amp;theme=dark&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&quot;&gt; 
  &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>duckdb/duckdb</title>
      <link>https://github.com/duckdb/duckdb</link>
      <description>&lt;p&gt;DuckDB is an analytical in-process SQL database management system&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;logo/DuckDB_Logo-horizontal.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;logo/DuckDB_Logo-horizontal-dark-mode.svg&quot;&gt; 
  &lt;img alt=&quot;DuckDB logo&quot; src=&quot;https://raw.githubusercontent.com/duckdb/duckdb/main/logo/DuckDB_Logo-horizontal.svg?sanitize=true&quot; height=&quot;100&quot;&gt; 
 &lt;/picture&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/duckdb/duckdb/actions&quot;&gt;&lt;img src=&quot;https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main&quot; alt=&quot;Github Actions Badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/tcvwpjfnZx&quot;&gt;&lt;img src=&quot;https://shields.io/discord/909674491309850675&quot; alt=&quot;discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/duckdb/duckdb/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&amp;amp;display_name=tag&amp;amp;logo=duckdb&amp;amp;logoColor=white&quot; alt=&quot;Latest Release&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;DuckDB&lt;/h2&gt; 
&lt;p&gt;DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and &lt;a href=&quot;https://duckdb.org/docs/guides/sql_features/friendly_sql&quot;&gt;several extensions designed to make SQL easier to use&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;DuckDB is available as a &lt;a href=&quot;https://duckdb.org/docs/api/cli/overview&quot;&gt;standalone CLI application&lt;/a&gt; and has clients for &lt;a href=&quot;https://duckdb.org/docs/api/python/overview&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://duckdb.org/docs/api/r&quot;&gt;R&lt;/a&gt;, &lt;a href=&quot;https://duckdb.org/docs/api/java&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://duckdb.org/docs/api/wasm/overview&quot;&gt;Wasm&lt;/a&gt;, etc., with deep integrations with packages such as &lt;a href=&quot;https://duckdb.org/docs/guides/python/sql_on_pandas&quot;&gt;pandas&lt;/a&gt; and &lt;a href=&quot;https://duckdb.org/docs/api/r#duckplyr-dplyr-api&quot;&gt;dplyr&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For more information on using DuckDB, please refer to the &lt;a href=&quot;https://duckdb.org/docs/&quot;&gt;DuckDB documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;If you want to install DuckDB, please see &lt;a href=&quot;https://duckdb.org/docs/installation/&quot;&gt;our installation page&lt;/a&gt; for instructions.&lt;/p&gt; 
&lt;h2&gt;Data Import&lt;/h2&gt; 
&lt;p&gt;For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM &#39;myfile.csv&#39;;
SELECT * FROM &#39;myfile.parquet&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to our &lt;a href=&quot;https://duckdb.org/docs/data/overview&quot;&gt;Data Import&lt;/a&gt; section for more information.&lt;/p&gt; 
&lt;h2&gt;SQL Reference&lt;/h2&gt; 
&lt;p&gt;The documentation contains a &lt;a href=&quot;https://duckdb.org/docs/sql/introduction&quot;&gt;SQL introduction and reference&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;For development, DuckDB requires &lt;a href=&quot;https://cmake.org&quot;&gt;CMake&lt;/a&gt;, Python3 and a &lt;code&gt;C++11&lt;/code&gt; compliant compiler. Run &lt;code&gt;make&lt;/code&gt; in the root directory to compile the sources. For development, use &lt;code&gt;make debug&lt;/code&gt; to build a non-optimized debug version. You should run &lt;code&gt;make unit&lt;/code&gt; and &lt;code&gt;make allunit&lt;/code&gt; to verify that your version works properly after making changes. To test performance, you can run &lt;code&gt;BUILD_BENCHMARK=1 BUILD_TPCH=1 make&lt;/code&gt; and then perform several standard benchmarks from the root directory by executing &lt;code&gt;./build/release/benchmark/benchmark_runner&lt;/code&gt;. The details of benchmarks are in our &lt;a href=&quot;https://raw.githubusercontent.com/duckdb/duckdb/main/benchmark/README.md&quot;&gt;Benchmark Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please also refer to our &lt;a href=&quot;https://duckdb.org/dev/building&quot;&gt;Build Guide&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/duckdb/duckdb/main/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://duckdblabs.com/support/&quot;&gt;Support Options&lt;/a&gt; page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>barry-ran/QtScrcpy</title>
      <link>https://github.com/barry-ran/QtScrcpy</link>
      <description>&lt;p&gt;Android real-time display control software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;QtScrcpy&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/QtScrcpy&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/all/badge.svg?label=financial+contributors&quot; alt=&quot;Financial Contributors to Open Collective&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/barry-ran/QtScrcpy/workflows/Windows/badge.svg?sanitize=true&quot; alt=&quot;Windows&quot;&gt; &lt;img src=&quot;https://github.com/barry-ran/QtScrcpy/workflows/MacOS/badge.svg?sanitize=true&quot; alt=&quot;MacOS&quot;&gt; &lt;img src=&quot;https://github.com/barry-ran/QtScrcpy/workflows/Ubuntu/badge.svg?sanitize=true&quot; alt=&quot;Ubuntu&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache2.0-blue.svg?sanitize=true&quot; alt=&quot;license&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/barry-ran/QtScrcpy.svg?sanitize=true&quot; alt=&quot;release&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/stars/barry-ran/QtScrcpy.svg?sanitize=true&quot; alt=&quot;star&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/README_zh.md&quot;&gt;中文用户？点我查看中文介绍&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;QtScrcpy supports displaying and controlling Android devices via USB or over network. It does NOT require root privileges.&lt;/p&gt; 
&lt;p&gt;It supports three major platforms: GNU/Linux, Windows and macOS.&lt;/p&gt; 
&lt;p&gt;It focuses on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;lightness&lt;/strong&gt; (displays only the device screen)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;performance&lt;/strong&gt; (30~60 fps)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;quality&lt;/strong&gt; (1920×1080 or above)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;low latency&lt;/strong&gt; (&lt;a href=&quot;https://github.com/Genymobile/scrcpy/pull/646&quot;&gt;35~70ms&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;low startup time&lt;/strong&gt; (only about 1 second to display the first frame)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;non-intrusiveness&lt;/strong&gt; (nothing will be installed on the device)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/screenshot/win-en.png&quot; alt=&quot;win&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/screenshot/mac-en.png&quot; alt=&quot;mac&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/screenshot/linux-en.png&quot; alt=&quot;linux&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;The author has developed a more professional screen casting software called &lt;code&gt;QuickMirror&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;QuickMirror function&amp;amp;features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Equipment screen casting&amp;amp;control: batch screen casting, individual control, batch control&lt;/li&gt; 
 &lt;li&gt;Group management&lt;/li&gt; 
 &lt;li&gt;WiFi screen mirroring/OTG screen mirroring&lt;/li&gt; 
 &lt;li&gt;Adb shell shortcut command&lt;/li&gt; 
 &lt;li&gt;File transfer, apk installation&lt;/li&gt; 
 &lt;li&gt;Multiple screen mirroring: In OTG mirroring mode, with low resolution and smoothness settings, a single computer can manage 500+phones simultaneously&lt;/li&gt; 
 &lt;li&gt;Low latency: USB screen mirroring 1080p latency is within 30ms, which is lower than all screen mirroring software on the market in terms of latency at the same resolution and smoothness&lt;/li&gt; 
 &lt;li&gt;Low CPU usage: pure C++development, high-performance GPU video rendering&lt;/li&gt; 
 &lt;li&gt;High resolution: adjustable, maximum support for native resolution of Android terminals&lt;/li&gt; 
 &lt;li&gt;Perfect Chinese input: Supports Xianyu app, supports Samsung phones&lt;/li&gt; 
 &lt;li&gt;The free version can cast up to 10 screens, with unlimited functionality (except for automatic screen mirroring)&lt;/li&gt; 
 &lt;li&gt;QuickMirror tutorial: &lt;a href=&quot;https://lrbnfell4p.feishu.cn/docx/EMkvdfIvDowy3UxsXUCcpPV8nDh&quot;&gt;https://lrbnfell4p.feishu.cn/docx/EMkvdfIvDowy3UxsXUCcpPV8nDh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;QuickMirror Telegram communication group: &lt;a href=&quot;https://t.me/+Ylf_5V_rDCMyODQ1&quot;&gt;https://t.me/+Ylf_5V_rDCMyODQ1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Preview of QuickMirror Interface: &lt;img src=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/docs/image/quickmirror.png&quot; alt=&quot;quickmirror&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Mapping Keys&lt;/h2&gt; 
&lt;p&gt;You can write your script to map keyboard and mouse actions to touches and clicks of the mobile phone according to your needs. &lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/docs/KeyMapDes.md&quot;&gt;Here&lt;/a&gt; are the script writing rules.&lt;/p&gt; 
&lt;p&gt;Script for TikTok and some other games are provided by default. Once enabled, you can play the game with your keyboard and mouse. The default key mapping for PUBG Mobile is as follows:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/screenshot/game.png&quot; alt=&quot;game&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Instruction for adding new customized mapping files.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Write a customized script and put it in the &lt;code&gt;keymap&lt;/code&gt; directory&lt;/li&gt; 
 &lt;li&gt;Click &lt;code&gt;refresh script&lt;/code&gt; to show it&lt;/li&gt; 
 &lt;li&gt;Select your script&lt;/li&gt; 
 &lt;li&gt;Connect to your phone, start service and click &lt;code&gt;apply&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Press &lt;code&gt;~&lt;/code&gt; key (the SwitchKey in the key map script) to switch to custom mapping mode&lt;/li&gt; 
 &lt;li&gt;Press the ~ key again to switch back to normal mode&lt;/li&gt; 
 &lt;li&gt;(For games such as PUBG Mobile) If you want to move vehicles with the STEER_WHEEL keys, you need to set the move mode to &lt;code&gt;single rocker mode&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you don&#39;t know how to manually write mapping rules, you can also use the &lt;code&gt;QuickAssistant&lt;/code&gt; developed by the author QuickAssistant Features&amp;amp;Functions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Play Android mobile games smoothly through keyboard and mouse&lt;/li&gt; 
 &lt;li&gt;Interface based editing of key mapping script&lt;/li&gt; 
 &lt;li&gt;Support pausing the computer screen and using only keyboard and mouse operations&lt;/li&gt; 
 &lt;li&gt;Screenshot&amp;amp;Recording of Mobile Screen&lt;/li&gt; 
 &lt;li&gt;Simple batch control&lt;/li&gt; 
 &lt;li&gt;Android 11+supports playing mobile audio on computers (under development...)&lt;/li&gt; 
 &lt;li&gt;Mobile app installation free&lt;/li&gt; 
 &lt;li&gt;Fast and instant connection&lt;/li&gt; 
 &lt;li&gt;Low latency: USB screen mirroring 1080p latency is within 30ms, which is lower than all screen mirroring software on the market in terms of latency at the same resolution and smoothness&lt;/li&gt; 
 &lt;li&gt;Low CPU usage: pure C++development, high-performance GPU video rendering&lt;/li&gt; 
 &lt;li&gt;High resolution: adjustable, maximum support for native resolution of Android terminals&lt;/li&gt; 
 &lt;li&gt;Telegram Group：&lt;a href=&quot;https://t.me/+EnQNmb47C_liYmRl&quot;&gt;https://t.me/+EnQNmb47C_liYmRl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lrbnfell4p.feishu.cn/drive/folder/Hqckfxj5el1Wjpd9uezcX71lnBh&quot;&gt;QuickAssistant&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Group control&lt;/h2&gt; 
&lt;p&gt;You can control all your phones at the same time.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/docs/image/group-control.gif&quot; alt=&quot;group-control-demo&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://star-history.com/#barry-ran/QtScrcpy&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=barry-ran/QtScrcpy&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;QtScrcpy is based on &lt;a href=&quot;https://github.com/Genymobile&quot;&gt;Genymobile&lt;/a&gt;&#39;s &lt;a href=&quot;https://github.com/Genymobile/scrcpy&quot;&gt;scrcpy&lt;/a&gt; project. Thanks a lot!&lt;/p&gt; 
&lt;p&gt;The difference between QtScrcpy and the original scrcpy is as follows:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;key points&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;scrcpy&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;QtScrcpy&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ui&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;sdl&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;qt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;video encode&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;ffmpeg&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;ffmpeg&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;video render&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;sdl&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;opengl&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cross-platform&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;self implemented&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;provided by Qt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;language&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;C&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;C++&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;style&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;sync&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;async&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;keymap&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;no custom keymap&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;support custom keymap&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;build&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;meson+gradle&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;qmake or CMake&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;It&#39;s very easy to customize your GUI with Qt&lt;/li&gt; 
 &lt;li&gt;Asynchronous programming of Qt-based signal slot mechanism improves performance&lt;/li&gt; 
 &lt;li&gt;Easy to learn&lt;/li&gt; 
 &lt;li&gt;Add support for multi-touch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn&lt;/h2&gt; 
&lt;p&gt;If you are interested in it and want to learn how it works but do not know how to get started, you can choose to purchase my recorded video lessons. It details the development architecture and the development process of the entire software and helps you develop QtScrcpy from scratch.&lt;/p&gt; 
&lt;p&gt;Course introduction：&lt;a href=&quot;https://blog.csdn.net/rankun1/article/details/87970523&quot;&gt;https://blog.csdn.net/rankun1/article/details/87970523&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can join Telegram Group for QtScrcpy and exchange ideas with like-minded friends.：&lt;/p&gt; 
&lt;p&gt;Telegram Group：&lt;a href=&quot;https://t.me/+EnQNmb47C_liYmRl&quot;&gt;https://t.me/+EnQNmb47C_liYmRl&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Android API &amp;gt;= 21 (Android 5.0).&lt;/p&gt; 
&lt;p&gt;Make sure you have enabled &lt;a href=&quot;https://developer.android.com/studio/command-line/adb.html#Enabling&quot;&gt;ADB debugging&lt;/a&gt; on your device(s).&lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;On Windows, for simplicity, prebuilt archives with all the dependencies (including ADB) are available at Releases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/barry-ran/QtScrcpy/releases&quot;&gt;&lt;code&gt;QtScrcpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;or you can &lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/#Build&quot;&gt;build it yourself&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Mac OS&lt;/h3&gt; 
&lt;p&gt;On Mac OS, for simplicity, prebuilt archives with all the dependencies (including ADB) are available at Releases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/barry-ran/QtScrcpy/releases&quot;&gt;&lt;code&gt;QtScrcpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;or you can &lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/#Build&quot;&gt;build it yourself&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;For Arch Linux Users, you can use AUR to install: &lt;code&gt;yay -Syu qtscrcpy&lt;/code&gt; (may be outdated; maintainer: &lt;a href=&quot;https://aur.archlinux.org/account/yochananmarqos&quot;&gt;yochananmarqos&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;For users in other distros, you can use the prebuilt archives from Releases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/barry-ran/QtScrcpy/releases&quot;&gt;&lt;code&gt;QtScrcpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;or you can get it at &lt;a href=&quot;https://github.com/barry-ran/QtScrcpy/actions/workflows/ubuntu.yml&quot;&gt;GitHub Actions&lt;/a&gt;, in branch &lt;code&gt;dev&lt;/code&gt; and download the latest artifact.&lt;/p&gt; 
&lt;p&gt;or you can &lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/#Build&quot;&gt;build it yourself&lt;/a&gt; (not recommended, get it in Actions if you can)&lt;/p&gt; 
&lt;h2&gt;Run&lt;/h2&gt; 
&lt;p&gt;Connect to your Android device on your computer, then run the program and click &lt;code&gt;USB connect&lt;/code&gt; or &lt;code&gt;WiFi connect&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Wireless connection steps (ensure that the mobile phone and PC are on the same LAN):&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Enable USB debugging in developer options on the Android device&lt;/li&gt; 
 &lt;li&gt;Connect the Android device to the computer via USB&lt;/li&gt; 
 &lt;li&gt;Click update device, and you will see that the device number is updated&lt;/li&gt; 
 &lt;li&gt;Click get device IP&lt;/li&gt; 
 &lt;li&gt;Click start adbd&lt;/li&gt; 
 &lt;li&gt;Click wireless connect&lt;/li&gt; 
 &lt;li&gt;Click update device again, and another device with an IP address will be found. Select this device.&lt;/li&gt; 
 &lt;li&gt;Click start service&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note: it is not necessary to keep your Android device connected via USB after you start adbd.&lt;/p&gt; 
&lt;h2&gt;Interface button introduction：&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Start config: function parameter settings before starting the service&lt;/p&gt; &lt;p&gt;You can set the bit rate, resolution, recording format, and video save path of the locally recorded video.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Background record: the Android device screen is not displayed after starting the service. It is recorded in the background.&lt;/li&gt; 
   &lt;li&gt;Always on top: the video window for Android devices will be kept on the top&lt;/li&gt; 
   &lt;li&gt;Close screen: automatically turn off the Android device screen to save power after starting the service&lt;/li&gt; 
   &lt;li&gt;Reverse connection: service startup mode. You can uncheck it if you experience connection failure with a message &lt;code&gt;more than one device&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Refresh devices: Refresh the currently connected device&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Start service: connect to the Android device&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Stop service: disconnect from the Android device&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Stop all services: disconnect all connected Android devices&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Get device IP: Get the IP address of the Android device and update it to the &quot;Wireless&quot; area for the ease of wireless connection setting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Start adbd: Start the adbd service of the Android device. You must start it before the wireless connection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wireless connect: Connect to Android devices wirelessly&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wireless disconnect: Disconnect wirelessly connected Android devices&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;adb command: execute customized ADB commands (blocking commands are not supported now, such as a shell)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The main function&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Display Android device screens in real-time&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Real-time mouse and keyboard control of Android devices&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Screen recording&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Screenshot to png&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wireless connection&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Supports multiple device connections&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Full-screen display&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Display on the top&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install apk: drag and drop apk to the video window to install&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Transfer files: Drag files to the video window to send files to Android devices&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Background recording: record only, no display interface&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Copy-paste&lt;/p&gt; &lt;p&gt;It is possible to synchronize clipboards between the computer and the device, in both directions:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;Ctrl + c&lt;/code&gt; copies the device clipboard to the computer clipboard;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Ctrl + Shift + v&lt;/code&gt; copies the computer clipboard to the device clipboard;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Ctrl + v&lt;/code&gt; &lt;em&gt;pastes&lt;/em&gt; the computer clipboard as a sequence of text events (non-ASCII characters does not yet work).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Group control&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Sync device speaker sound to the computer (based on &lt;a href=&quot;https://github.com/rom1v/sndcpy&quot;&gt;sndcpy&lt;/a&gt;, Android 10+ only)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Shortcuts&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Shortcut (Windows)&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Shortcut (macOS)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Switch fullscreen mode&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;f&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;f&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Resize window to 1:1 (pixel-perfect)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Resize window to remove black borders&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt; | &lt;em&gt;Double-click¹&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt; | &lt;em&gt;Double-click¹&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click on &lt;code&gt;HOME&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;h&lt;/code&gt; | &lt;em&gt;Middle-click&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;h&lt;/code&gt; | &lt;em&gt;Middle-click&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click on &lt;code&gt;BACK&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt; | &lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt; | &lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click on &lt;code&gt;APP_SWITCH&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;s&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;s&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click on &lt;code&gt;MENU&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;m&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;m&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click on &lt;code&gt;VOLUME_UP&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;↑&lt;/code&gt; &lt;em&gt;(up)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;↑&lt;/code&gt; &lt;em&gt;(up)&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click on &lt;code&gt;VOLUME_DOWN&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;↓&lt;/code&gt; &lt;em&gt;(down)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;↓&lt;/code&gt; &lt;em&gt;(down)&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Click on &lt;code&gt;POWER&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Power on&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Turn device screen off (keep mirroring)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;o&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;o&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Expand notification panel&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Collapse notification panel&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Copy to clipboard³&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Cut to clipboard³&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Synchronize clipboards and paste³&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Inject computer clipboard text&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;¹Double-click on black borders to remove them.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;²Right-click turns the screen on if it was off, presses BACK otherwise.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;³Only on Android &amp;gt;= 7.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;TODO&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/docs/TODO.md&quot;&gt;TODO&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/docs/FAQ.md&quot;&gt;FAQ&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;DEVELOP&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/docs/DEVELOP.md&quot;&gt;DEVELOP&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Everyone is welcome to maintain this project and contribute your own code, but please follow these requirements:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Please open PRs to the dev branch instead of the master branch&lt;/li&gt; 
 &lt;li&gt;Please rebase the original project before opening PRs&lt;/li&gt; 
 &lt;li&gt;Please submit PRs on the principle of &quot;small amounts, many times&quot; (one PR for a change is recommended)&lt;/li&gt; 
 &lt;li&gt;Please keep the code style consistent with the existing style.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Why develop QtScrcpy?&lt;/h2&gt; 
&lt;p&gt;There are several reasons listed below according to importance (high to low).&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;In the process of learning Qt, I need a real project to try.&lt;/li&gt; 
 &lt;li&gt;I have some background skills in audio and video and I am interested in them.&lt;/li&gt; 
 &lt;li&gt;I have some Android development skills. But I have used it for a long time. I want to consolidate it.&lt;/li&gt; 
 &lt;li&gt;I found scrcpy and decided to re-make it with the new technology stack (C++ + Qt + Opengl + FFmpeg).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;All the dependencies are provided and it is easy to compile.&lt;/p&gt; 
&lt;h3&gt;QtScrcpy&lt;/h3&gt; 
&lt;h4&gt;Non-Arch Linux Users&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Set up the Qt development environment with the official Qt installer or third-party tools such as &lt;a href=&quot;https://github.com/miurahr/aqtinstall&quot;&gt;aqt&lt;/a&gt; on the target platform. Qt version bigger than 5.12 is required. (use MSVC 2019 on Windows)&lt;/li&gt; 
 &lt;li&gt;Clone the project with &lt;code&gt;git clone --recurse-submodules git@github.com:barry-ran/QtScrcpy.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For Windows, open CMakeLists.txt with QtCreator and compile Release&lt;/li&gt; 
 &lt;li&gt;For Linux, directly run &lt;code&gt;./ci/linux/build_for_linux.sh &quot;Release&quot;&lt;/code&gt; Note: compiled artifacts are located at &lt;code&gt;output/x64/Release&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Arch Linux Users&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install packages: &lt;code&gt;base-devel cmake qt5-base qt5-multimedia qt5-x11extras&lt;/code&gt; (&lt;code&gt;qtcreator&lt;/code&gt; is recommended)&lt;/li&gt; 
 &lt;li&gt;Clone the project with &lt;code&gt;git clone --recurse-submodules git@github.com:barry-ran/QtScrcpy.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;./ci/linux/build_for_linux.sh &quot;Release&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Scrcpy-Server&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Set up Android development environment on the target platform&lt;/li&gt; 
 &lt;li&gt;Open server project in project root with Android Studio&lt;/li&gt; 
 &lt;li&gt;The first time you open it, if you do not have the corresponding version of Gradle, you will be prompted to find Gradle, whether to upgrade Gradle or create it. Select Cancel. After cancelling, you will be prompted to select the location of existing Gradle. Cancel it too and it will download automatically.&lt;/li&gt; 
 &lt;li&gt;After compiling the apk, rename it to scrcpy-server and replace QtScrcpy/QtScrcpyCore/src/third_party/scrcpy-server.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Licence&lt;/h2&gt; 
&lt;p&gt;Since it is based on scrcpy, it uses the same license as scrcpy&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Copyright (C) 2025 Rankun

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About the author&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/rankun1&quot;&gt;Barry CSDN&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An ordinary programmer, working mainly in C++ for desktop client development, graduated from Shandong for more than a year of steel simulation education software, and later moved to Shanghai to work in security, online education-related fields, familiar with audio and video. I have an understanding of audio and video fields such as voice calls, live education, video conferencing and other related solutions. I also have experience in Android, Linux servers and other kinds of development.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;h3&gt;Code Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&quot;https://raw.githubusercontent.com/barry-ran/QtScrcpy/dev/CONTRIBUTING.md&quot;&gt;Contribute&lt;/a&gt;]. &lt;a href=&quot;https://github.com/barry-ran/QtScrcpy/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/contributors.svg?width=890&amp;amp;button=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Financial Contributors&lt;/h3&gt; 
&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&quot;https://opencollective.com/QtScrcpy/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;h4&gt;Individuals&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/QtScrcpy&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/individuals.svg?width=890&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Organizations&lt;/h4&gt; 
&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/QtScrcpy/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/0/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/1/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/2/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/3/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/4/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/5/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/6/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/7/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/8/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/QtScrcpy/organization/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/QtScrcpy/organization/9/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>godotengine/godot</title>
      <link>https://github.com/godotengine/godot</link>
      <description>&lt;p&gt;Godot Engine – Multi-platform 2D and 3D game engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Godot Engine&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://godotengine.org&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/godotengine/godot/master/logo_outlined.svg?sanitize=true&quot; width=&quot;400&quot; alt=&quot;Godot Engine logo&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;2D and 3D cross-platform game engine&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://godotengine.org&quot;&gt;Godot Engine&lt;/a&gt; is a feature-packed, cross-platform game engine to create 2D and 3D games from a unified interface.&lt;/strong&gt; It provides a comprehensive set of &lt;a href=&quot;https://godotengine.org/features&quot;&gt;common tools&lt;/a&gt;, so that users can focus on making games without having to reinvent the wheel. Games can be exported with one click to a number of platforms, including the major desktop platforms (Linux, macOS, Windows), mobile platforms (Android, iOS), as well as Web-based platforms and &lt;a href=&quot;https://docs.godotengine.org/en/latest/tutorials/platform/consoles.html&quot;&gt;consoles&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Free, open source and community-driven&lt;/h2&gt; 
&lt;p&gt;Godot is completely free and open source under the very permissive &lt;a href=&quot;https://godotengine.org/license&quot;&gt;MIT license&lt;/a&gt;. No strings attached, no royalties, nothing. The users&#39; games are theirs, down to the last line of engine code. Godot&#39;s development is fully independent and community-driven, empowering users to help shape their engine to match their expectations. It is supported by the &lt;a href=&quot;https://godot.foundation/&quot;&gt;Godot Foundation&lt;/a&gt; not-for-profit.&lt;/p&gt; 
&lt;p&gt;Before being open sourced in &lt;a href=&quot;https://github.com/godotengine/godot/commit/0b806ee0fc9097fa7bda7ac0109191c9c5e0a1ac&quot;&gt;February 2014&lt;/a&gt;, Godot had been developed by &lt;a href=&quot;https://github.com/reduz&quot;&gt;Juan Linietsky&lt;/a&gt; and &lt;a href=&quot;https://github.com/punto-&quot;&gt;Ariel Manzur&lt;/a&gt; (both still maintaining the project) for several years as an in-house engine, used to publish several work-for-hire titles.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/godotengine/godot-design/master/screenshots/editor_tps_demo_1920x1080.jpg&quot; alt=&quot;Screenshot of a 3D scene in the Godot Engine editor&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Getting the engine&lt;/h2&gt; 
&lt;h3&gt;Binary downloads&lt;/h3&gt; 
&lt;p&gt;Official binaries for the Godot editor and the export templates can be found &lt;a href=&quot;https://godotengine.org/download&quot;&gt;on the Godot website&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Compiling from source&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.godotengine.org/en/latest/contributing/development/compiling&quot;&gt;See the official docs&lt;/a&gt; for compilation instructions for every supported platform.&lt;/p&gt; 
&lt;h2&gt;Community and contributing&lt;/h2&gt; 
&lt;p&gt;Godot is not only an engine but an ever-growing community of users and engine developers. The main community channels are listed &lt;a href=&quot;https://godotengine.org/community&quot;&gt;on the homepage&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The best way to get in touch with the core engine developers is to join the &lt;a href=&quot;https://chat.godotengine.org&quot;&gt;Godot Contributors Chat&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To get started contributing to the project, see the &lt;a href=&quot;https://raw.githubusercontent.com/godotengine/godot/master/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt;. This document also includes guidelines for reporting bugs.&lt;/p&gt; 
&lt;h2&gt;Documentation and demos&lt;/h2&gt; 
&lt;p&gt;The official documentation is hosted on &lt;a href=&quot;https://docs.godotengine.org&quot;&gt;Read the Docs&lt;/a&gt;. It is maintained by the Godot community in its own &lt;a href=&quot;https://github.com/godotengine/godot-docs&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://docs.godotengine.org/en/latest/classes/&quot;&gt;class reference&lt;/a&gt; is also accessible from the Godot editor.&lt;/p&gt; 
&lt;p&gt;We also maintain official demos in their own &lt;a href=&quot;https://github.com/godotengine/godot-demo-projects&quot;&gt;GitHub repository&lt;/a&gt; as well as a list of &lt;a href=&quot;https://github.com/godotengine/awesome-godot&quot;&gt;awesome Godot community resources&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are also a number of other &lt;a href=&quot;https://docs.godotengine.org/en/latest/community/tutorials.html&quot;&gt;learning resources&lt;/a&gt; provided by the community, such as text and video tutorials, demos, etc. Consult the &lt;a href=&quot;https://godotengine.org/community&quot;&gt;community channels&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.codetriage.com/godotengine/godot&quot;&gt;&lt;img src=&quot;https://www.codetriage.com/godotengine/godot/badges/users.svg?sanitize=true&quot; alt=&quot;Code Triagers Badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hosted.weblate.org/engage/godot-engine/?utm_source=widget&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widgets/godot-engine/-/godot/svg-badge.svg?sanitize=true&quot; alt=&quot;Translate on Weblate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.tickgit.com/browse?repo=github.com/godotengine/godot&quot;&gt;&lt;img src=&quot;https://badgen.net/https/api.tickgit.com/badgen/github.com/godotengine/godot&quot; alt=&quot;TODOs&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Light-City/CPlusPlusThings</title>
      <link>https://github.com/Light-City/CPlusPlusThings</link>
      <description>&lt;p&gt;C++那些事&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#c-%E9%82%A3%E4%BA%9B%E4%BA%8B&quot;&gt;C++ 那些事&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E9%87%8D%E7%A3%85%E9%A1%B9%E7%9B%AE&quot;&gt;重磅项目&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C&quot;&gt;项目运行&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E6%96%B9%E5%BC%8F1-vscode--bazel&quot;&gt;方式1: vscode + bazel&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E6%96%B9%E5%BC%8F2-docker&quot;&gt;方式2: docker&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E6%96%B9%E5%BC%8F3-g&quot;&gt;方式3: g++&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E6%9C%AC%E9%A1%B9%E7%9B%AE&quot;&gt;视频学习本项目&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E9%A3%9E%E4%B9%A6%E7%9F%A5%E8%AF%86%E5%BA%93&quot;&gt;飞书知识库&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6&quot;&gt;基础进阶&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97&quot;&gt;实战系列&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#10-%E6%97%A5%E7%8B%82%E7%BB%83&quot;&gt;10 日狂练&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E9%87%8D%E7%82%B9%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0&quot;&gt;重点实战练习&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#c20-%E6%96%B0%E7%89%B9%E6%80%A7&quot;&gt;C++2.0 新特性&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E6%A6%82%E5%86%B5&quot;&gt;概况&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#c11-%E6%96%B0%E7%89%B9%E6%80%A7&quot;&gt;C++11 新特性&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#c141720&quot;&gt;C++14/17/20&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&quot;&gt;设计模式&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#stl-%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90&quot;&gt;STL 源码剖析&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B&quot;&gt;并发编程&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#c-concurrency-in-action&quot;&gt;C++ Concurrency in Action&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E8%BF%9B%E7%A8%8B&quot;&gt;多线程与多进程&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#threading-in-c&quot;&gt;Threading In C++&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#c-%E6%83%AF%E7%94%A8%E6%B3%95&quot;&gt;C++ 惯用法&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84-c-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%83%AF%E7%94%A8%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88&quot;&gt;你最喜欢的 c++ 编程风格惯用法是什么?&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B&quot;&gt;学习课程&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E7%8E%B0%E4%BB%A3-c-%E5%AE%9E%E6%88%98-30-%E8%AE%B2&quot;&gt;极客时间《现代 C++ 实战 30 讲》&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%B7%A5%E5%85%B7%E7%AF%87&quot;&gt;工具篇&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%AE%B9%E5%99%A8%E5%BF%AB%E6%8D%B7%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7&quot;&gt;容器快捷输出工具&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%83%8F-python-%E4%B8%80%E6%A0%B7%E7%AE%80%E5%8D%95%E8%BE%93%E5%87%BAjupyter-notebook&quot;&gt;像 Python 一样简单输出（Jupyter Notebook）&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E8%A7%82%E5%AF%9F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E5%8F%98%E5%8C%96&quot;&gt;观察编译过程变化&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#c-%E7%9A%84-debug-%E5%B7%A5%E5%85%B7-dbg-macro&quot;&gt;C++ 的 Debug 工具 dbg-macro&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E5%9C%A8-linux-%E4%B8%8A%E7%9A%84-debug-%E5%B7%A5%E5%85%B7-rr---%E6%8B%A5%E6%9C%89%E5%9B%9E%E5%88%B0%E8%BF%87%E5%8E%BB%E7%9A%84%E8%83%BD%E5%8A%9B&quot;&gt;在 Linux 上的 Debug 工具 rr - 拥有回到过去的能力&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86&quot;&gt;拓展部分&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98&quot;&gt;一些问题&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/#%E8%B4%A1%E7%8C%AE%E8%80%85&quot;&gt;贡献者&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;C++ 那些事&lt;/h1&gt; 
&lt;p&gt;感谢各位对《C++ 那些事》的支持，现将内容也同步至B站，以视频的方式展示，可以打开网站直接阅读~欢迎大家 star、转发、PR。&lt;/p&gt; 
&lt;p&gt;在线个人博客：&lt;a href=&quot;https://light-city.github.io/&quot;&gt;光城的实验室&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;在线学习网站：&lt;a href=&quot;https://light-city.github.io/stories_things/&quot;&gt;C++那些事&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;中文名：&lt;strong&gt;C++ 那些事&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;英文名：&lt;strong&gt;Stories About C Plus Plus&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这是一个适合初学者从&lt;u&gt;&lt;strong&gt;入门到进阶&lt;/strong&gt;&lt;/u&gt;的仓库，解决了&lt;u&gt;&lt;strong&gt;面试者与学习者&lt;/strong&gt;&lt;/u&gt;想要&lt;u&gt;&lt;strong&gt;深入 C++&lt;/strong&gt;&lt;/u&gt; 及如何&lt;u&gt;&lt;strong&gt;入坑 C++&lt;/strong&gt;&lt;/u&gt; 的问题。除此之外，本仓库拓展了更加深入的源码分析，多线程并发等的知识，是一个比较全面的 C++ 学习从入门到进阶提升的仓库。&lt;/p&gt; 
&lt;h3&gt;重磅项目&lt;/h3&gt; 
&lt;p&gt;推出一系列重磅项目，带大家实战学习C++，配合本开源项目学习，成长飞快!&lt;/p&gt; 
&lt;p&gt;直通点：&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/proj/README.md&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;关于作者&lt;/h3&gt; 
&lt;p&gt;公众号已开放两大入口，分别是专辑与菜单，可以直接在微信公众号上阅读《C++ 那些事》内容，配上该仓库的代码，将会非常的爽，建议大家关注一波。&lt;/p&gt; 
&lt;p&gt;个人公众号：guangcity&lt;/p&gt; 
&lt;p&gt;或者扫下面的二维码，欢迎大家反馈及 C++ 交流，本人在微信创建了 C++ 那些事交流群，优质的 C++ 资源交流区，期待大家关注上面公众号，点击公众号右下角-&amp;gt;联系我，拉你入群。&lt;/p&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;关注我&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;如果觉得不错，关注我吧~&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot; style=&quot;height=200 width=&quot; 200&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/img/cpp.jpg&quot; height=&quot;200&quot; width=&quot;200&quot;&gt;&lt;br&gt; 星球 &lt;/th&gt; 
   &lt;th align=&quot;center&quot; style=&quot;height=200 width=&quot; 200&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/img/wechat.jpg&quot; height=&quot;200&quot; width=&quot;200&quot;&gt;&lt;br&gt; 微信公众号 &lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;项目运行&lt;/h3&gt; 
&lt;h4&gt;方式1: vscode + bazel&lt;/h4&gt; 
&lt;h4&gt;方式2: docker&lt;/h4&gt; 
&lt;p&gt;新推出免开发环境，docker环境，大家可以pull下面镜像：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker pull xingfranics/cplusplusthings:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;方式3: g++&lt;/h4&gt; 
&lt;h3&gt;视频学习本项目&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Rv4y1H7LB/?vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第一期：Step By Step上手编译本项目&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1oz4y1a7Pu/?vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第二期：免开发环境docker&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1o8411U7vy/?vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第三期：手把手共读HashTable，彻底搞懂C++ STL&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1du4y1w7Mg/?spm_id_from=333.788&amp;amp;vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第四期：手把手共读STL之enable_shared_from_this&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1DH4y1g7gS/?vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第五期：手把手共读STL之线程，从C++11 thread到C++20 jthread&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV13b421b7Am/?spm_id_from=333.999.0.0&amp;amp;vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第六期：手把手共读STL之共读condition_variable、condition_variable_any&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1xm42157pq/?spm_id_from=333.999.0.0&amp;amp;vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第七期：手把手共读STL之Mutex&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Ls421g7iq/?spm_id_from=333.788&amp;amp;vd_source=bb6532dcd5b1d6b26125da900adb618e&quot;&gt;第八期：手把手共读STL之RAII Lock&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;飞书知识库&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://hmpy6adnp5.feishu.cn/docx/OitBdRB4KozIhTxQt7Ec7iFDnkc&quot;&gt;互联网大厂面试实录&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hmpy6adnp5.feishu.cn/docx/B1aCdVTUgoyJGYxtWV7cdvgRnxv&quot;&gt;拿下offer之必备面经&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;基础进阶&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/const&quot;&gt;&lt;code&gt;const&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/static&quot;&gt;&lt;code&gt;static&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/this&quot;&gt;&lt;code&gt;this&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/inline&quot;&gt;&lt;code&gt;inline&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/sizeof&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/func_pointer&quot;&gt;函数指针那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/abstract&quot;&gt;纯虚函数和抽象类那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/vptr_vtable&quot;&gt;&lt;code&gt;vptr_vtable&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/virtual&quot;&gt;&lt;code&gt;virtual&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/volatile&quot;&gt;&lt;code&gt;volatile&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/assert&quot;&gt;&lt;code&gt;assert&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/bit&quot;&gt;位域那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/extern&quot;&gt;&lt;code&gt;extern&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/struct_class&quot;&gt;&lt;code&gt;struct&lt;/code&gt; 与 &lt;code&gt;class&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/union&quot;&gt;&lt;code&gt;union&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/c_poly&quot;&gt;&lt;code&gt;c&lt;/code&gt; 实现 &lt;code&gt;c++&lt;/code&gt; 多态那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/explicit&quot;&gt;&lt;code&gt;explicit&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/friend&quot;&gt;&lt;code&gt;friend&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/using&quot;&gt;&lt;code&gt;using&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/maohao&quot;&gt;&lt;code&gt;::&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/enum&quot;&gt;&lt;code&gt;enum&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/decltype&quot;&gt;&lt;code&gt;decltype&lt;/code&gt; 那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/pointer_refer&quot;&gt;引用与指针那些事&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/basic_content/macro&quot;&gt;宏那些事&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;实战系列&lt;/h3&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice&quot;&gt;10 日狂练&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day1&quot;&gt;day1-基本语法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day2&quot;&gt;day2-递归、结构体、枚举、静态变量等&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day3&quot;&gt;day3-函数1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day4&quot;&gt;day4-函数2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day5&quot;&gt;day5-继承多态&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day6&quot;&gt;day6-虚函数与抽象类&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day7&quot;&gt;day7-运算符重载&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day8&quot;&gt;day8-模版与STL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day9&quot;&gt;day9-异常&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/10_day_practice/day10&quot;&gt;day10-文件与流&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/&quot;&gt;重点实战练习&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/bracket_overloading.cpp&quot;&gt;中括号重载.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/clock.cpp&quot;&gt;时钟++运算符重载.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/operator_cast.cpp&quot;&gt;运算符重载之强制转换.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/operator_circle.cpp&quot;&gt;重载圆括号的时钟.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/func_temp.cpp&quot;&gt;函数模板.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/array.cpp&quot;&gt;动态数组.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/map_insert_look.cpp&quot;&gt;字典插入与查找.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/try.cpp&quot;&gt;异常捕获.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/stack.cpp&quot;&gt;类模板之栈.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/array_template.cpp&quot;&gt;类模板特化之数组.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/override.cpp&quot;&gt;继承与封装.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/read_file.cpp&quot;&gt;读写文件综合题.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/io_operator_overload.cpp&quot;&gt;输入输出运算符重载.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/io_operator.cpp&quot;&gt;输入输出重载.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/practical_exercises/key_exercises/output.cpp&quot;&gt;输出格式.cpp&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0&quot;&gt;C++2.0 新特性&lt;/a&gt;&lt;/h3&gt; 
&lt;h4&gt;概况&lt;/h4&gt; 
&lt;p&gt;C++2.0 是一个简称，意为「现代 C++」，包括 C++11/14/17/20。&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11&quot;&gt;C++11 新特性&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/variadic&quot;&gt;Variadic Templates&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spaces in Template Expressions&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;vector&amp;lt;list&amp;lt;int&amp;gt; &amp;gt; //ok in each C++ version
vector&amp;lt;list&amp;lt;int&amp;gt;&amp;gt; // before c++ 11 error error: ‘&amp;gt;&amp;gt;’ should be ‘&amp;gt; &amp;gt;’ within a nested template argument list,c++11后可以正常通过
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/nullptr.cpp&quot;&gt;nullptr and nullptr_t&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/auto.cpp&quot;&gt;Automatic Type Deduction with auto&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/uniform_initialization.cpp&quot;&gt;Uniform Initialization &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/initializer.cpp&quot;&gt;initializer_list&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/explicit.cpp&quot;&gt;explicit for ctors taking more than one argument&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/auto.cpp&quot;&gt;range-based for statement&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;for(decl:col) {
    statement
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/default_delete.cpp&quot;&gt;=default,=delete&lt;/a&gt;&lt;/p&gt; &lt;p&gt;如果你自行定义了一个 &lt;code&gt;ctor&lt;/code&gt;, 那么编译器就不会给你一个 &lt;code&gt;default ctor&lt;/code&gt; 如果强制加上 &lt;code&gt;=default&lt;/code&gt;, 就可以重新获得并使用 &lt;code&gt;default ctor&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Alias(化名) Template (template typedef)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/alias.cpp&quot;&gt;alias.cpp&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/template_template.cpp&quot;&gt;template_template.cpp&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/template_template.cpp&quot;&gt;template template parameter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/type_alias.cpp&quot;&gt;type alias&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/noexcept.cpp&quot;&gt;noexcept&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/override.cpp&quot;&gt;override&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/final.cpp&quot;&gt;final&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/decltype.cpp&quot;&gt;decltype&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/lambda.cpp&quot;&gt;lambda&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/rvalue.cpp&quot;&gt;Rvalue reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/move.cpp&quot;&gt;move aware class&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;容器-结构与分类&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;(1) 序列式容器包括：&lt;code&gt;array&lt;/code&gt;(C++2.0 新引入),&lt;code&gt;vector&lt;/code&gt;,&lt;code&gt;deque&lt;/code&gt;,&lt;code&gt;list&lt;/code&gt;,&lt;code&gt;forward_list&lt;/code&gt;(C++2.0 新引入)&lt;/li&gt; 
   &lt;li&gt;(2) 关联式容器包括：&lt;code&gt;set/multiset&lt;/code&gt;,&lt;code&gt;map/multimap&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;(3) 无序容器(C++2.0 新引入,更换原先 &lt;code&gt;hash_xxx&lt;/code&gt; 为 &lt;code&gt;unordered_xxx&lt;/code&gt;)包括：&lt;code&gt;unordered_map/unordered_multimap,unordered_set/unordered_multiset&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/hash.cpp&quot;&gt;Hash Function&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/cpp2.0/cpp11/tuple.cpp&quot;&gt;tuple&lt;/a&gt;&lt;/p&gt; &lt;p&gt;学习资料：&lt;a href=&quot;https://www.bilibili.com/video/av51863195?from=search&amp;amp;seid=3610634846288253061&quot;&gt;https://www.bilibili.com/video/av51863195?from=search&amp;amp;seid=3610634846288253061&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;C++14/17/20&lt;/h4&gt; 
&lt;p&gt;待更新...&lt;/p&gt; 
&lt;h3&gt;设计模式&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/design_pattern/singleton&quot;&gt;单例模式&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/design_pattern/producer_consumer&quot;&gt;生产消费者模式&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl&quot;&gt;STL 源码剖析&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;STL 源码剖析：gcc 4.9.1&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/array.md&quot;&gt;array&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/deque.md&quot;&gt;deque&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/queue_stack.md&quot;&gt;queue and stack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/list.md&quot;&gt;list&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/vector.md&quot;&gt;vector&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/typename.md&quot;&gt;typename&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/traits.md&quot;&gt;traits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/iterator.md&quot;&gt;iterator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96.md&quot;&gt;谈谈 STL 设计之 EBO 优化&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/rb_tree.md&quot;&gt;rb_tree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/set_multiset.md&quot;&gt;set and multiset&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/map_multimap.md&quot;&gt;map and multimap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/hashtable.md&quot;&gt;hashtable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/myhashtable.md&quot;&gt;myhashtable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/src_analysis/stl/unordered_map.md&quot;&gt;unordered_map&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency&quot;&gt;并发编程&lt;/a&gt;&lt;/h3&gt; 
&lt;h4&gt;C++ Concurrency in Action&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/concurrency_v1/chapter1&quot;&gt;第一章&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/concurrency_v1/chapter2&quot;&gt;第二章&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;学习资料：&lt;a href=&quot;https://downdemo.gitbook.io/cpp-concurrency-in-action-2ed/&quot;&gt;https://downdemo.gitbook.io/cpp-concurrency-in-action-2ed/&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;多线程与多进程&lt;/h4&gt; 
&lt;h5&gt;Threading In C++&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/1.thread&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/2.create_type&quot;&gt;创建线程的五种类型&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/3.join_detach&quot;&gt;Join 与 Detachs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/concurrency/Threading_In_CPlusPlus/4.mutex&quot;&gt;mutex in C++ Threading&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;学习自：&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eZ8yKZo-PGw&amp;amp;list=PLk6CEY9XxSIAeK-EAh3hB4fgNvYkYmghp&amp;amp;index=4&quot;&gt;https://www.youtube.com/watch?v=eZ8yKZo-PGw&amp;amp;list=PLk6CEY9XxSIAeK-EAh3hB4fgNvYkYmghp&amp;amp;index=4&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms&quot;&gt;C++ 惯用法&lt;/a&gt;&lt;/h3&gt; 
&lt;h5&gt;你最喜欢的 c++ 编程风格惯用法是什么?&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/1_classInitializers&quot;&gt;1.类初始化列表&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/2_enumclass_namespace&quot;&gt;2.枚举类替换命名空间&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/3_RAII&quot;&gt;3.RAII (资源获取即初始化)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/4_copy-swap&quot;&gt;4.copy and swap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/codingStyleIdioms/5_pImpl&quot;&gt;5.pImpl (指针指向具体实现)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;学习课程&lt;/h3&gt; 
&lt;h4&gt;&lt;a href=&quot;https://time.geekbang.org/channel/home&quot;&gt;极客时间《现代 C++ 实战 30 讲》&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/RAII&quot;&gt;堆、栈、RAII：C++ 里该如何管理资源？&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_++_30/RAII/heap.cpp&quot;&gt;堆&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/RAII/stack.cpp&quot;&gt;栈&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/RAII/RAII.cpp&quot;&gt;RAII&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/smart_ptr&quot;&gt;自己动手，实现 C++ 的智能指针&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/smart_ptr/auto_scope.cpp&quot;&gt;auto_ptr、scope_ptr&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/smart_ptr/unique_ptr.cpp&quot;&gt;unique_ptr&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/smart_ptr/shared_ptr.cpp&quot;&gt;shared_ptr&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/reference&quot;&gt;右值和移动究竟解决了什么问题？&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/reference/reference.cpp&quot;&gt;左值与右值&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/reference/lifetime.cpp&quot;&gt;延长声明周期&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/reference/collapses.cpp&quot;&gt;引用折叠&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/reference/forward.cpp&quot;&gt;完美转发&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/reference/don&#39;treturnReference.cpp&quot;&gt;不要返回本地变量的引用&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/container1&quot;&gt;容器 1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/container2&quot;&gt;容器 2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/exception&quot;&gt;异常&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/literalAssert&quot;&gt;字面量、静态断言和成员函数说明符&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/returnObj&quot;&gt;是不是应该返回对象？&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/compilerpoly&quot;&gt;编译期多态：泛型编程和模板入门&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/compilercompute&quot;&gt;译期能做些什么？一个完整的计算世界&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/SFINAE&quot;&gt;SFINAE：不是错误的替换失败是怎么回事?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/constexpr&quot;&gt;constexpr：一个常态的世界&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/functionLambda&quot;&gt;函数对象和 lambda：进入函数式编程&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/learn_class/modern_cpp_30/memorymodel_atomic&quot;&gt;内存模型和 atomic：理解并发的复杂性&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;工具篇&lt;/h3&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/output&quot;&gt;容器快捷输出工具&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;对吴老师的代码进行了修改，&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/output/output_container.h&quot;&gt;点击此处直通代码&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;输入：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;map&amp;lt;int, int&amp;gt; mp{
            {1, 1},
            {2, 4},
            {3, 9}};
    cout &amp;lt;&amp;lt; mp &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出结果显示：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;{ 1 =&amp;gt; 1, 2 =&amp;gt; 4, 3 =&amp;gt; 9 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;像 Python 一样简单输出（Jupyter Notebook）&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/%E5%83%8FPython%E4%B8%80%E6%A0%B7%E7%8E%A9CC++.md&quot;&gt;像 Python 一样玩 C/C++&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;观察编译过程变化&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cppinsights.io/&quot;&gt;https://cppinsights.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;C++ 的 Debug 工具 dbg-macro&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/C++%E7%9A%84Debug%E5%B7%A5%E5%85%B7dbg-macro.md&quot;&gt;C++ 的 Debug 工具 dbg-macro&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;在 Linux 上的 Debug 工具 rr - 拥有回到过去的能力&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/tool/%E7%94%A8rr%E6%9D%A5%E8%BF%9B%E8%A1%8Cdebug.md&quot;&gt;用 rr 来进行 debug&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;拓展部分&lt;/h3&gt; 
&lt;h4&gt;一些问题&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Light-City/CPlusPlusThings/master/extension/some_problem/string_int.md&quot;&gt;C++ 中如何将 string 类型转换为 int 类型？&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;贡献者&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;贡献人&lt;/th&gt; 
   &lt;th&gt;地址&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;光城&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Light-City&quot;&gt;https://github.com/Light-City&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ChungZH&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ChungZH&quot;&gt;https://github.com/ChungZH&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xliu79&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/xliu79&quot;&gt;https://github.com/xliu79&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>infiniflow/infinity</title>
      <link>https://github.com/infiniflow/infinity</link>
      <description>&lt;p&gt;The AI-native database built for LLM applications, providing incredibly fast hybrid search of dense vector, sparse vector, tensor (multi-vector), and full-text&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img width=&quot;187&quot; src=&quot;https://github.com/infiniflow/infinity/assets/7248/015e1f02-1f7f-4b09-a0c2-9d261cd4858b&quot; alt=&quot;Infinity logo&quot;&gt; 
&lt;/div&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;The AI-native database built for LLM applications, providing incredibly fast hybrid search of dense embedding, sparse embedding, tensor and full-text&lt;/b&gt; &lt;/p&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://infiniflow.org/docs/dev/category/get-started&quot;&gt;Document&lt;/a&gt; | &lt;a href=&quot;https://infiniflow.org/docs/dev/benchmark&quot;&gt;Benchmark&lt;/a&gt; | &lt;a href=&quot;https://twitter.com/infiniflowai&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://discord.gg/jEfRUwEYEV&quot;&gt;Discord&lt;/a&gt; &lt;/h4&gt; 
&lt;p&gt;Infinity is a cutting-edge AI-native database that provides a wide range of search capabilities for rich data types such as dense vector, sparse vector, tensor, full-text, and structured data. It provides robust support for various LLM applications, including search, recommenders, question-answering, conversational AI, copilot, content generation, and many more &lt;strong&gt;RAG&lt;/strong&gt; (Retrieval-augmented Generation) applications.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/infiniflow/infinity/main/#-key-features&quot;&gt;Key Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/infiniflow/infinity/main/#-get-started&quot;&gt;Get Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/infiniflow/infinity/main/#-document&quot;&gt;Document&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/infiniflow/infinity/main/#-roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/infiniflow/infinity/main/#-community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Performance&lt;/h2&gt; 
&lt;div class=&quot;column&quot; align=&quot;middle&quot;&gt; 
 &lt;img src=&quot;https://github.com/user-attachments/assets/c4c98e23-62ac-4d1a-82e5-614bca96fe0a&quot; alt=&quot;Infinity performance comparison&quot;&gt; 
&lt;/div&gt; 
&lt;h2&gt;🌟 Key Features&lt;/h2&gt; 
&lt;p&gt;Infinity comes with high performance, flexibility, ease-of-use, and many features designed to address the challenges facing the next-generation AI applications:&lt;/p&gt; 
&lt;h3&gt;🚀 Incredibly fast&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Achieves 0.1 milliseconds query latency and 15K+ QPS on million-scale vector datasets.&lt;/li&gt; 
 &lt;li&gt;Achieves 1 millisecond latency and 12K+ QPS in full-text search on 33M documents.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://infiniflow.org/docs/dev/benchmark&quot;&gt;Benchmark report&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;🔮 Powerful search&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports a hybrid search of dense embedding, sparse embedding, tensor, and full text, in addition to filtering.&lt;/li&gt; 
 &lt;li&gt;Supports several types of rerankers including RRF, weighted sum and &lt;strong&gt;ColBERT&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🍔 Rich data types&lt;/h3&gt; 
&lt;p&gt;Supports a wide range of data types including strings, numerics, vectors, and more.&lt;/p&gt; 
&lt;h3&gt;🎁 Ease-of-use&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Intuitive Python API. See the &lt;a href=&quot;https://infiniflow.org/docs/dev/pysdk_api_reference&quot;&gt;Python API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A single-binary architecture with no dependencies, making deployment a breeze.&lt;/li&gt; 
 &lt;li&gt;Embedded in Python as a module and friendly to AI developers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎮 Get Started&lt;/h2&gt; 
&lt;p&gt;Infinity supports two working modes, embedded mode and client-server mode. Infinity&#39;s embedded mode enables you to quickly embed Infinity into your Python applications, without the need to connect to a separate backend server. The following shows how to operate in embedded mode:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install infinity-embedded-sdk==0.6.0.dev3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use Infinity to conduct a dense vector search:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import infinity_embedded

# Connect to infinity
infinity_object = infinity_embedded.connect(&quot;/absolute/path/to/save/to&quot;)
# Retrieve a database object named default_db
db_object = infinity_object.get_database(&quot;default_db&quot;)
# Create a table with an integer column, a varchar column, and a dense vector column
table_object = db_object.create_table(&quot;my_table&quot;, {&quot;num&quot;: {&quot;type&quot;: &quot;integer&quot;}, &quot;body&quot;: {&quot;type&quot;: &quot;varchar&quot;}, &quot;vec&quot;: {&quot;type&quot;: &quot;vector, 4, float&quot;}})
# Insert two rows into the table
table_object.insert([{&quot;num&quot;: 1, &quot;body&quot;: &quot;unnecessary and harmful&quot;, &quot;vec&quot;: [1.0, 1.2, 0.8, 0.9]}])
table_object.insert([{&quot;num&quot;: 2, &quot;body&quot;: &quot;Office for Harmful Blooms&quot;, &quot;vec&quot;: [4.0, 4.2, 4.3, 4.5]}])
# Conduct a dense vector search
res = table_object.output([&quot;*&quot;])
                  .match_dense(&quot;vec&quot;, [3.0, 2.8, 2.7, 3.1], &quot;float&quot;, &quot;ip&quot;, 2)
                  .to_pl()
print(res)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡 For more information about Infinity&#39;s Python API, see the &lt;a href=&quot;https://infiniflow.org/docs/dev/pysdk_api_reference&quot;&gt;Python API Reference&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;🔧 Deploy Infinity in client-server mode&lt;/h4&gt; 
&lt;p&gt;If you wish to deploy Infinity with the server and client as separate processes, see the &lt;a href=&quot;https://infiniflow.org/docs/dev/deploy_infinity_server&quot;&gt;Deploy infinity server&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h4&gt;🔧 Build from Source&lt;/h4&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://infiniflow.org/docs/dev/build_from_source&quot;&gt;Build from Source&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;📚 Document&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://infiniflow.org/docs/dev/&quot;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://infiniflow.org/docs/dev/pysdk_api_reference&quot;&gt;Python API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://infiniflow.org/docs/dev/http_api_reference&quot;&gt;HTTP API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://infiniflow.org/docs/dev/category/references&quot;&gt;References&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://infiniflow.org/docs/dev/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📜 Roadmap&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/infiniflow/infinity/issues/2393&quot;&gt;Infinity Roadmap 2025&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🙌 Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/jEfRUwEYEV&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/infiniflowai&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/infiniflow/infinity/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>praydog/REFramework</title>
      <link>https://github.com/praydog/REFramework</link>
      <description>&lt;p&gt;Scripting platform, modding framework and VR support for all RE Engine games&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;REFramework &lt;a href=&quot;https://github.com/praydog/REFramework-nightly/releases&quot;&gt;&lt;img src=&quot;https://github.com/praydog/reframework/actions/workflows/dev-release.yml/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;A mod framework, scripting platform, and modding tool for RE Engine games. Inspired by and uses code from &lt;a href=&quot;https://github.com/cursey/kanan-new&quot;&gt;Kanan&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The last stable build can be downloaded from the &lt;a href=&quot;https://github.com/praydog/REFramework/releases&quot;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;For newer builds, check out the &lt;a href=&quot;https://github.com/praydog/REFramework-nightly/releases&quot;&gt;Nightly Developer Builds&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Non-VR&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Extract only the &lt;code&gt;dinput8.dll&lt;/code&gt; from the zip file into your game folder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;VR&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install SteamVR (unless you&#39;re using OpenXR on a supported headset)&lt;/li&gt; 
 &lt;li&gt;Extract the whole zip file into your corresponding game folder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/praydog/REFramework/wiki/VR-Troubleshooting&quot;&gt;VR Troubleshooting/FAQ&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Proton/Linux&lt;/h3&gt; 
&lt;p&gt;Add the launch option &lt;code&gt;WINEDLLOVERRIDES=&quot;dinput8.dll=n,b&quot; %command%&lt;/code&gt; to your game through Steam&#39;s properties after extraction.&lt;/p&gt; 
&lt;p&gt;Example game folder: G:\SteamLibrary\steamapps\common\RESIDENT EVIL 2 BIOHAZARD RE2&lt;/p&gt; 
&lt;p&gt;Supports both DirectX 11 and DirectX 12.&lt;/p&gt; 
&lt;h2&gt;Included Mods&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lua Scripting API &amp;amp; Plugin System (All games, check out the &lt;a href=&quot;https://cursey.github.io/reframework-book/&quot;&gt;Wiki&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;VR 
  &lt;ul&gt; 
   &lt;li&gt;Generic 6DOF VR support for all games&lt;/li&gt; 
   &lt;li&gt;Motion controls for RE2/RE3/RE7/RE8&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;First Person (RE2, RE3)&lt;/li&gt; 
 &lt;li&gt;Manual Flashlight (RE2, RE3, RE8)&lt;/li&gt; 
 &lt;li&gt;Free Camera (All games)&lt;/li&gt; 
 &lt;li&gt;Scene Timescale (All games)&lt;/li&gt; 
 &lt;li&gt;FOV Slider (All games)&lt;/li&gt; 
 &lt;li&gt;Vignette Disabler (All games)&lt;/li&gt; 
 &lt;li&gt;Ultrawide/Aspect Ratio fixes (All games)&lt;/li&gt; 
 &lt;li&gt;GUI Hider/Disabler (All games)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Included Fixes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;RE8 Startup Crash&lt;/li&gt; 
 &lt;li&gt;RE8 Stutters (killing enemies, taking damage, etc...)&lt;/li&gt; 
 &lt;li&gt;MHRise/RE8 crashes related to third party DLLs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Included Tools (Developer Mode)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Game Objects Display&lt;/li&gt; 
 &lt;li&gt;Object Explorer&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Games&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Resident Evil 2&lt;/li&gt; 
 &lt;li&gt;Resident Evil 3&lt;/li&gt; 
 &lt;li&gt;Resident Evil 4&lt;/li&gt; 
 &lt;li&gt;Resident Evil 7&lt;/li&gt; 
 &lt;li&gt;Resident Evil Village&lt;/li&gt; 
 &lt;li&gt;Devil May Cry 5&lt;/li&gt; 
 &lt;li&gt;Street Fighter 6&lt;/li&gt; 
 &lt;li&gt;Monster Hunter Rise&lt;/li&gt; 
 &lt;li&gt;Monster Hunter Wilds&lt;/li&gt; 
 &lt;li&gt;Dragon&#39;s Dogma 2&lt;/li&gt; 
 &lt;li&gt;Ghosts &#39;n Goblins Resurrection (Using RE8 build)&lt;/li&gt; 
 &lt;li&gt;Apollo Justice: Ace Attorney Trilogy (Using DD2 build)&lt;/li&gt; 
 &lt;li&gt;Kunitsu-Gami: Path of the Goddess (Using DD2 build)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SkacikPL&quot;&gt;SkacikPL&lt;/a&gt; for originally creating the Manual Flashlight mod.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cursey/&quot;&gt;cursey&lt;/a&gt; for helping develop the VR component and the scripting system.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/youwereeatenbyalid/&quot;&gt;The Hitchhiker&lt;/a&gt; and &lt;a href=&quot;https://github.com/alphazolam&quot;&gt;alphaZomega&lt;/a&gt; for the great help stress testing, creating scripts for the scripting system, and helpful suggestions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ValveSoftware/source-sdk-2013</title>
      <link>https://github.com/ValveSoftware/source-sdk-2013</link>
      <description>&lt;p&gt;The 2013 edition of the Source SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Source SDK 2013&lt;/h1&gt; 
&lt;p&gt;Source code for Source SDK 2013.&lt;/p&gt; 
&lt;p&gt;Contains the game code for Half-Life 2, HL2: DM and TF2.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Now including Team Fortress 2! ✨&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Build instructions&lt;/h2&gt; 
&lt;p&gt;Clone the repository using the following command:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;git clone https://github.com/ValveSoftware/source-sdk-2013&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Source SDK 2013 Multiplayer installed via Steam&lt;/li&gt; 
 &lt;li&gt;Visual Studio 2022 with the following workload and components: 
  &lt;ul&gt; 
   &lt;li&gt;Desktop development with C++: 
    &lt;ul&gt; 
     &lt;li&gt;MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)&lt;/li&gt; 
     &lt;li&gt;Windows 11 SDK (10.0.22621.0) or Windows 10 SDK (10.0.19041.1)&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Python 3.13 or later&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Inside the cloned directory, navigate to &lt;code&gt;src&lt;/code&gt;, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bat&quot;&gt;createallprojects.bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will generate the Visual Studio project &lt;code&gt;everything.sln&lt;/code&gt; which will be used to build your mod.&lt;/p&gt; 
&lt;p&gt;Then, on the menu bar, go to &lt;code&gt;Build &amp;gt; Build Solution&lt;/code&gt;, and wait for everything to build.&lt;/p&gt; 
&lt;p&gt;You can then select the &lt;code&gt;Client (Mod Name)&lt;/code&gt; project you wish to run, right click and select &lt;code&gt;Set as Startup Project&lt;/code&gt; and hit the big green &lt;code&gt;&amp;gt; Local Windows Debugger&lt;/code&gt; button on the tool bar in order to launch your mod.&lt;/p&gt; 
&lt;p&gt;The default launch options should be already filled in for the &lt;code&gt;Release&lt;/code&gt; configuration.&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Source SDK 2013 Multiplayer installed via Steam&lt;/li&gt; 
 &lt;li&gt;podman&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Inside the cloned directory, navigate to &lt;code&gt;src&lt;/code&gt;, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./buildallprojects
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will build all the projects related to the SDK and your mods automatically against the Steam Runtime.&lt;/p&gt; 
&lt;p&gt;You can then, in the root of the cloned directory, you can navigate to &lt;code&gt;game&lt;/code&gt; and run your mod by launching the build launcher for your mod project, eg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./mod_tf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Mods that are distributed on Steam MUST be built against the Steam Runtime, which the above steps will automatically do for you.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Distributing your Mod&lt;/h2&gt; 
&lt;p&gt;There is guidance on distributing your mod both on and off Steam available at the following link:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://partner.steamgames.com/doc/sdk/uploading/distributing_source_engine&quot;&gt;https://partner.steamgames.com/doc/sdk/uploading/distributing_source_engine&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Additional Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.valvesoftware.com/wiki/Source_SDK_2013&quot;&gt;Valve Developer Wiki&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The SDK is licensed to users on a non-commercial basis under the &lt;a href=&quot;https://raw.githubusercontent.com/ValveSoftware/source-sdk-2013/master/LICENSE&quot;&gt;SOURCE 1 SDK LICENSE&lt;/a&gt;, which is contained in the &lt;a href=&quot;https://raw.githubusercontent.com/ValveSoftware/source-sdk-2013/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file in the root of the repository.&lt;/p&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://raw.githubusercontent.com/ValveSoftware/source-sdk-2013/master/#markdown-header-distributing-your-mod&quot;&gt;Distributing your Mod&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tensorflow/tensorflow</title>
      <link>https://github.com/tensorflow/tensorflow</link>
      <description>&lt;p&gt;An Open Source Machine Learning Framework for Everyone&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://www.tensorflow.org/images/tf_logo_horizontal.png&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/py/tensorflow&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/tensorflow.svg?sanitize=true&quot; alt=&quot;Python&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://badge.fury.io/py/tensorflow&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/tensorflow.svg?sanitize=true&quot; alt=&quot;PyPI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://doi.org/10.5281/zenodo.4724125&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.4724125.svg?sanitize=true&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/1486&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/1486/badge&quot; alt=&quot;CII Best Practices&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://securityscorecards.dev/viewer/?uri=github.com/tensorflow/tensorflow&quot;&gt;&lt;img src=&quot;https://api.securityscorecards.dev/projects/github.com/tensorflow/tensorflow/badge&quot; alt=&quot;OpenSSF Scorecard&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:tensorflow&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/tensorflow.svg?sanitize=true&quot; alt=&quot;Fuzzing Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:tensorflow-py&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/tensorflow-py.svg?sanitize=true&quot; alt=&quot;Fuzzing Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ossrank.com/p/44&quot;&gt;&lt;img src=&quot;https://shields.io/endpoint?url=https://ossrank.com/shield/44&quot; alt=&quot;OSSRank&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/tensorflow/tensorflow/master/CODE_OF_CONDUCT.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg?sanitize=true&quot; alt=&quot;Contributor Covenant&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://tensorflow.github.io/build#TF%20Official%20Continuous&quot;&gt;&lt;img src=&quot;https://tensorflow.github.io/build/TF%20Official%20Continuous.svg?sanitize=true&quot; alt=&quot;TF Official Continuous&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://tensorflow.github.io/build#TF%20Official%20Nightly&quot;&gt;&lt;img src=&quot;https://tensorflow.github.io/build/TF%20Official%20Nightly.svg?sanitize=true&quot; alt=&quot;TF Official Nightly&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;&lt;code&gt;Documentation&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.tensorflow.org/api_docs/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/api-reference-blue.svg?sanitize=true&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt; is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of &lt;a href=&quot;https://www.tensorflow.org/resources/tools&quot;&gt;tools&lt;/a&gt;, &lt;a href=&quot;https://www.tensorflow.org/resources/libraries-extensions&quot;&gt;libraries&lt;/a&gt;, and &lt;a href=&quot;https://www.tensorflow.org/community&quot;&gt;community&lt;/a&gt; resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML-powered applications.&lt;/p&gt; 
&lt;p&gt;TensorFlow was originally developed by researchers and engineers working within the Machine Intelligence team at Google Brain to conduct research in machine learning and neural networks. However, the framework is versatile enough to be used in other areas as well.&lt;/p&gt; 
&lt;p&gt;TensorFlow provides stable &lt;a href=&quot;https://www.tensorflow.org/api_docs/python&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://www.tensorflow.org/api_docs/cc&quot;&gt;C++&lt;/a&gt; APIs, as well as a non-guaranteed backward compatible API for &lt;a href=&quot;https://www.tensorflow.org/api_docs&quot;&gt;other languages&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Keep up-to-date with release announcements and security updates by subscribing to &lt;a href=&quot;https://groups.google.com/a/tensorflow.org/forum/#!forum/announce&quot;&gt;announce@tensorflow.org&lt;/a&gt;. See all the &lt;a href=&quot;https://www.tensorflow.org/community/forums&quot;&gt;mailing lists&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://www.tensorflow.org/install&quot;&gt;TensorFlow install guide&lt;/a&gt; for the &lt;a href=&quot;https://www.tensorflow.org/install/pip&quot;&gt;pip package&lt;/a&gt;, to &lt;a href=&quot;https://www.tensorflow.org/install/gpu&quot;&gt;enable GPU support&lt;/a&gt;, use a &lt;a href=&quot;https://www.tensorflow.org/install/docker&quot;&gt;Docker container&lt;/a&gt;, and &lt;a href=&quot;https://www.tensorflow.org/install/source&quot;&gt;build from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install the current release, which includes support for &lt;a href=&quot;https://www.tensorflow.org/install/gpu&quot;&gt;CUDA-enabled GPU cards&lt;/a&gt; &lt;em&gt;(Ubuntu and Windows)&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pip install tensorflow
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Other devices (DirectX and MacOS-metal) are supported using &lt;a href=&quot;https://www.tensorflow.org/install/gpu_plugins#available_devices&quot;&gt;Device plugins&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A smaller CPU-only package is also available:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pip install tensorflow-cpu
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To update TensorFlow to the latest version, add &lt;code&gt;--upgrade&lt;/code&gt; flag to the above commands.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Nightly binaries are available for testing using the &lt;a href=&quot;https://pypi.python.org/pypi/tf-nightly&quot;&gt;tf-nightly&lt;/a&gt; and &lt;a href=&quot;https://pypi.python.org/pypi/tf-nightly-cpu&quot;&gt;tf-nightly-cpu&lt;/a&gt; packages on PyPi.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;em&gt;Try your first TensorFlow program&lt;/em&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ python
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import tensorflow as tf
&amp;gt;&amp;gt;&amp;gt; tf.add(1, 2).numpy()
3
&amp;gt;&amp;gt;&amp;gt; hello = tf.constant(&#39;Hello, TensorFlow!&#39;)
&amp;gt;&amp;gt;&amp;gt; hello.numpy()
b&#39;Hello, TensorFlow!&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more examples, see the &lt;a href=&quot;https://www.tensorflow.org/tutorials/&quot;&gt;TensorFlow tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution guidelines&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;If you want to contribute to TensorFlow, be sure to review the &lt;a href=&quot;https://raw.githubusercontent.com/tensorflow/tensorflow/master/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt;. This project adheres to TensorFlow&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/tensorflow/tensorflow/master/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;. By participating, you are expected to uphold this code.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;We use &lt;a href=&quot;https://github.com/tensorflow/tensorflow/issues&quot;&gt;GitHub issues&lt;/a&gt; for tracking requests and bugs, please see &lt;a href=&quot;https://discuss.tensorflow.org/&quot;&gt;TensorFlow Forum&lt;/a&gt; for general questions and discussion, and please direct specific questions to &lt;a href=&quot;https://stackoverflow.com/questions/tagged/tensorflow&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The TensorFlow project strives to abide by generally accepted best practices in open-source software development.&lt;/p&gt; 
&lt;h2&gt;Patching guidelines&lt;/h2&gt; 
&lt;p&gt;Follow these steps to patch a specific version of TensorFlow, for example, to apply fixes to bugs or security vulnerabilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the TensorFlow repo and switch to the corresponding branch for your desired TensorFlow version, for example, branch &lt;code&gt;r2.8&lt;/code&gt; for version 2.8.&lt;/li&gt; 
 &lt;li&gt;Apply (that is, cherry-pick) the desired changes and resolve any code conflicts.&lt;/li&gt; 
 &lt;li&gt;Run TensorFlow tests and ensure they pass.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/install/source&quot;&gt;Build&lt;/a&gt; the TensorFlow pip package from source.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Continuous build status&lt;/h2&gt; 
&lt;p&gt;You can find more community-supported platforms and configurations in the &lt;a href=&quot;https://github.com/tensorflow/build#community-supported-tensorflow-builds&quot;&gt;TensorFlow SIG Build community builds table&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Official Builds&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Build Type&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
   &lt;th&gt;Artifacts&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Linux CPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/ubuntu-cc.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/ubuntu-cc.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pypi.org/project/tf-nightly/&quot;&gt;PyPI&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Linux GPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/ubuntu-gpu-py3.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/ubuntu-gpu-py3.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pypi.org/project/tf-nightly-gpu/&quot;&gt;PyPI&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Linux XLA&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/ubuntu-xla.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/ubuntu-xla.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;TBA&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/macos-py2-cc.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/macos-py2-cc.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pypi.org/project/tf-nightly/&quot;&gt;PyPI&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Windows CPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/windows-cpu.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/windows-cpu.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pypi.org/project/tf-nightly/&quot;&gt;PyPI&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Windows GPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/windows-gpu.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/windows-gpu.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pypi.org/project/tf-nightly-gpu/&quot;&gt;PyPI&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/android.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/android.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://bintray.com/google/tensorflow/tensorflow/_latestVersion&quot;&gt;Download&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Raspberry Pi 0 and 1&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/rpi01-py3.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/rpi01-py3.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-nightly/tensorflow-1.10.0-cp34-none-linux_armv6l.whl&quot;&gt;Py3&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Raspberry Pi 2 and 3&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/rpi23-py3.html&quot;&gt;&lt;img src=&quot;https://storage.googleapis.com/tensorflow-kokoro-build-badges/rpi23-py3.svg?sanitize=true&quot; alt=&quot;Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/tensorflow-nightly/tensorflow-1.10.0-cp34-none-linux_armv7l.whl&quot;&gt;Py3&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Libtensorflow MacOS CPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Status Temporarily Unavailable&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/libtensorflow-nightly/prod/tensorflow/release/macos/latest/macos_cpu_libtensorflow_binaries.tar.gz&quot;&gt;Nightly Binary&lt;/a&gt; &lt;a href=&quot;https://storage.googleapis.com/tensorflow/&quot;&gt;Official GCS&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Libtensorflow Linux CPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Status Temporarily Unavailable&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/libtensorflow-nightly/prod/tensorflow/release/ubuntu_16/latest/cpu/ubuntu_cpu_libtensorflow_binaries.tar.gz&quot;&gt;Nightly Binary&lt;/a&gt; &lt;a href=&quot;https://storage.googleapis.com/tensorflow/&quot;&gt;Official GCS&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Libtensorflow Linux GPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Status Temporarily Unavailable&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/libtensorflow-nightly/prod/tensorflow/release/ubuntu_16/latest/gpu/ubuntu_gpu_libtensorflow_binaries.tar.gz&quot;&gt;Nightly Binary&lt;/a&gt; &lt;a href=&quot;https://storage.googleapis.com/tensorflow/&quot;&gt;Official GCS&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Libtensorflow Windows CPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Status Temporarily Unavailable&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/libtensorflow-nightly/prod/tensorflow/release/windows/latest/cpu/windows_cpu_libtensorflow_binaries.tar.gz&quot;&gt;Nightly Binary&lt;/a&gt; &lt;a href=&quot;https://storage.googleapis.com/tensorflow/&quot;&gt;Official GCS&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Libtensorflow Windows GPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Status Temporarily Unavailable&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://storage.googleapis.com/libtensorflow-nightly/prod/tensorflow/release/windows/latest/gpu/windows_gpu_libtensorflow_binaries.tar.gz&quot;&gt;Nightly Binary&lt;/a&gt; &lt;a href=&quot;https://storage.googleapis.com/tensorflow/&quot;&gt;Official GCS&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org&quot;&gt;TensorFlow.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/tutorials/&quot;&gt;TensorFlow Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/official&quot;&gt;TensorFlow Official Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/examples&quot;&gt;TensorFlow Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codelabs.developers.google.com/?cat=TensorFlow&quot;&gt;TensorFlow Codelabs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.tensorflow.org&quot;&gt;TensorFlow Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/resources/learn-ml&quot;&gt;Learn ML with TensorFlow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/tensorflow&quot;&gt;TensorFlow Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC0rqucBdTuFTjJiefW5t-IQ&quot;&gt;TensorFlow YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/model_optimization/guide/roadmap&quot;&gt;TensorFlow model optimization roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/about/bib&quot;&gt;TensorFlow White Papers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/tensorboard&quot;&gt;TensorBoard Visualization Toolkit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cs.opensource.google/tensorflow/tensorflow&quot;&gt;TensorFlow Code Search&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Learn more about the &lt;a href=&quot;https://www.tensorflow.org/community&quot;&gt;TensorFlow community&lt;/a&gt; and how to &lt;a href=&quot;https://www.tensorflow.org/community/contribute&quot;&gt;contribute&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Courses&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/search?query=TensorFlow&quot;&gt;Coursera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.udacity.com/courses/all?search=TensorFlow&quot;&gt;Udacity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.edx.org/search?q=TensorFlow&quot;&gt;Edx&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tensorflow/tensorflow/master/LICENSE&quot;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IntelRealSense/librealsense</title>
      <link>https://github.com/IntelRealSense/librealsense</link>
      <description>&lt;p&gt;Intel® RealSense™ SDK&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc/img/realsense.png&quot; width=&quot;70%&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/IntelRealSense/librealsense.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/IntelRealSense/librealsense?sort=semver&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/compare/master...development&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commits-since/IntelRealSense/librealsense/master/development?label=commits%20since&quot; alt=&quot;Commits&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/IntelRealSense/librealsense.svg?sanitize=true&quot; alt=&quot;Issues&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/actions/workflows/buildsCI.yaml&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/IntelRealSense/actions/workflows/buildsCI.yaml/badge.svg?branch=development&quot; alt=&quot;GitHub CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/network/members&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/forks/IntelRealSense/librealsense.svg?sanitize=true&quot; alt=&quot;Forks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Intel® RealSense™ SDK 2.0&lt;/strong&gt; is a cross-platform library for Intel® RealSense™ depth cameras.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;📌&lt;/span&gt; For other Intel® RealSense™ devices (F200, R200, LR200 and ZR300), please refer to the &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/tree/v1.12.1&quot;&gt;latest legacy release&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The SDK allows depth and color streaming, and provides intrinsic and extrinsic calibration information. The library also offers synthetic streams (pointcloud, depth aligned to color and vise-versa), and a built-in support for &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc/record-and-playback.md&quot;&gt;record and playback&lt;/a&gt; of streaming sessions.&lt;/p&gt; 
&lt;p&gt;Developer kits containing the necessary hardware to use this library are available for purchase at &lt;a href=&quot;https://store.intelrealsense.com/products.html&quot;&gt;store.intelrealsense.com&lt;/a&gt;. Information about the Intel® RealSense™ technology at &lt;a href=&quot;https://www.intelrealsense.com/&quot;&gt;www.intelrealsense.com&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;📂&lt;/span&gt; Don&#39;t have access to a RealSense camera? Check-out &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc/sample-data.md&quot;&gt;sample data&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Update on Recent Changes to the RealSense Product Line&lt;/h2&gt; 
&lt;p&gt;Intel has EOLed the LiDAR, Facial Authentication, and Tracking product lines. These products have been discontinued and will no longer be available for new orders.&lt;/p&gt; 
&lt;p&gt;Intel WILL continue to sell and support stereo products including the following: D410, D415, D430, , D401 ,D450 modules and D415, D435, D435i, D435f, D405, D455, D457 depth cameras. We will also continue the work to support and develop our LibRealSense open source SDK.&lt;/p&gt; 
&lt;p&gt;In the future, Intel and the RealSense team will focus our new development on advancing innovative technologies that better support our core businesses and IDM 2.0 strategy.&lt;/p&gt; 
&lt;h2&gt;Building librealsense - Using vcpkg&lt;/h2&gt; 
&lt;p&gt;You can download and install librealsense using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh
./vcpkg integrate install
./vcpkg install realsense2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The librealsense port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h2&gt;Download and Install&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; - The latest releases including the Intel RealSense SDK, Viewer and Depth Quality tools are available at: &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/releases&quot;&gt;&lt;strong&gt;latest releases&lt;/strong&gt;&lt;/a&gt;. Please check the &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/wiki/Release-Notes&quot;&gt;&lt;strong&gt;release notes&lt;/strong&gt;&lt;/a&gt; for the supported platforms, new features and capabilities, known issues, how to upgrade the Firmware and more.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt; - You can also install or build from source the SDK (on &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc/distribution_linux.md&quot;&gt;Linux&lt;/a&gt; \ &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc/distribution_windows.md&quot;&gt;Windows&lt;/a&gt; \ &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc/installation_osx.md&quot;&gt;Mac OS&lt;/a&gt; \ &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc/android.md&quot;&gt;Android&lt;/a&gt; \ &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/scripts/Docker/readme.md&quot;&gt;Docker&lt;/a&gt;), connect your D400 depth camera and you are ready to start writing your first application.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Support &amp;amp; Issues&lt;/strong&gt;: If you need product support (e.g. ask a question about / are having problems with the device), please check the &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/wiki/Troubleshooting-Q%26A&quot;&gt;FAQ &amp;amp; Troubleshooting&lt;/a&gt; section. If not covered there, please search our &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aclosed&quot;&gt;Closed GitHub Issues&lt;/a&gt; page, &lt;a href=&quot;https://communities.intel.com/community/tech/realsense&quot;&gt;Community&lt;/a&gt; and &lt;a href=&quot;https://www.intel.com/content/www/us/en/support/emerging-technologies/intel-realsense-technology.html&quot;&gt;Support&lt;/a&gt; sites. If you still cannot find an answer to your question, please &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/issues/new&quot;&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;What’s included in the SDK:&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;What&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Download link&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/tools/realsense-viewer&quot;&gt;Intel® RealSense™ Viewer&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;With this application, you can quickly access your Intel® RealSense™ Depth Camera to view the depth stream, visualize point clouds, record and playback streams, configure your camera settings, modify advanced controls, enable depth visualization and post processing and much more.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/IntelRealSense/librealsense/releases&quot;&gt;&lt;strong&gt;Intel.RealSense.Viewer.exe&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/tools/depth-quality&quot;&gt;Depth Quality Tool&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;This application allows you to test the camera’s depth quality, including: standard deviation from plane fit, normalized RMS – the subpixel accuracy, distance accuracy and fill rate. You should be able to easily get and interpret several of the depth quality metrics and record and save the data for offline analysis.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/IntelRealSense/librealsense/releases&quot;&gt;&lt;strong&gt;Depth.Quality.Tool.exe&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/tools/&quot;&gt;Debug Tools&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Device enumeration, FW logger, etc as can be seen at the tools directory&lt;/td&gt; 
   &lt;td&gt;Included in &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/releases&quot;&gt;&lt;strong&gt;Intel.RealSense.SDK.exe&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/examples&quot;&gt;Code Samples&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;These simple examples demonstrate how to easily use the SDK to include code snippets that access the camera into your applications. Check some of the &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/examples&quot;&gt;&lt;strong&gt;C++ examples&lt;/strong&gt;&lt;/a&gt; including capture, pointcloud and more and basic &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/examples/C&quot;&gt;&lt;strong&gt;C examples&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Included in &lt;a href=&quot;https://github.com/IntelRealSense/librealsense/releases&quot;&gt;&lt;strong&gt;Intel.RealSense.SDK.exe&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/IntelRealSense/librealsense/tree/development/wrappers&quot;&gt;Wrappers&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/python&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/csharp&quot;&gt;C#/.NET&lt;/a&gt; API, as well as integration with the following 3rd-party technologies: &lt;a href=&quot;https://github.com/IntelRealSense/realsense-ros/tree/ros1-legacy&quot;&gt;ROS1&lt;/a&gt;, &lt;a href=&quot;https://github.com/IntelRealSense/realsense-ros/tree/ros2-development&quot;&gt;ROS2&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/labview&quot;&gt;LabVIEW&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/opencv&quot;&gt;OpenCV&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/pcl&quot;&gt;PCL&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/unity&quot;&gt;Unity&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/matlab&quot;&gt;Matlab&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/openni2&quot;&gt;OpenNI&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/wrappers/unrealengine4&quot;&gt;UnrealEngine4&lt;/a&gt; and more to come.&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Ready to Hack!&lt;/h2&gt; 
&lt;p&gt;Our library offers a high level API for using Intel RealSense depth cameras (in addition to lower level ones). The following snippet shows how to start streaming frames and extracting the depth value of a pixel:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// Create a Pipeline - this serves as a top-level API for streaming and processing frames
rs2::pipeline p;

// Configure and start the pipeline
p.start();

while (true)
{
    // Block program until frames arrive
    rs2::frameset frames = p.wait_for_frames();

    // Try to get a frame of a depth image
    rs2::depth_frame depth = frames.get_depth_frame();

    // Get the depth frame&#39;s dimensions
    float width = depth.get_width();
    float height = depth.get_height();

    // Query the distance from the camera to the object in the center of the image
    float dist_to_center = depth.get_distance(width / 2, height / 2);

    // Print the distance
    std::cout &amp;lt;&amp;lt; &quot;The camera is facing an object &quot; &amp;lt;&amp;lt; dist_to_center &amp;lt;&amp;lt; &quot; meters away \r&quot;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on the library, please follow our &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/examples&quot;&gt;examples&lt;/a&gt;, and read the &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/doc&quot;&gt;documentation&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;In order to contribute to Intel RealSense SDK, please follow our &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/IntelRealSense/librealsense/master/LICENSE&quot;&gt;Apache License, Version 2.0&lt;/a&gt;. Copyright 2018 Intel Corporation&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pybind/pybind11</title>
      <link>https://github.com/pybind/pybind11</link>
      <description>&lt;p&gt;Seamless operability between C++11 and Python&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: &lt;a href=&quot;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&quot;&gt;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&lt;/a&gt; :alt: pybind11 logo&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;pybind11 (v3) — Seamless interoperability between C++ and Python&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;|Latest Documentation Status| |Stable Documentation Status| |Gitter chat| |GitHub Discussions| |CI| |Build status|&lt;/p&gt; 
&lt;p&gt;|Repology| |PyPI package| |Conda-forge| |Python Versions|&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Setuptools example &amp;lt;https://github.com/pybind/python_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Scikit-build example &amp;lt;https://github.com/pybind/scikit_build_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;CMake example &amp;lt;https://github.com/pybind/cmake_example&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;.. start&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;pybind11&lt;/strong&gt; is a lightweight header-only library that exposes C++ types in Python and vice versa, mainly to create Python bindings of existing C++ code. Its goals and syntax are similar to the excellent &lt;code&gt;Boost.Python &amp;lt;http://www.boost.org/doc/libs/1_58_0/libs/python/doc/&amp;gt;&lt;/code&gt;_ library by David Abrahams: to minimize boilerplate code in traditional extension modules by inferring type information using compile-time introspection.&lt;/p&gt; 
&lt;p&gt;The main issue with Boost.Python—and the reason for creating such a similar project—is Boost. Boost is an enormously large and complex suite of utility libraries that works with almost every C++ compiler in existence. This compatibility has its cost: arcane template tricks and workarounds are necessary to support the oldest and buggiest of compiler specimens. Now that C++11-compatible compilers are widely available, this heavy machinery has become an excessively large and unnecessary dependency.&lt;/p&gt; 
&lt;p&gt;Think of this library as a tiny self-contained version of Boost.Python with everything stripped away that isn&#39;t relevant for binding generation. Without comments, the core header files only require ~4K lines of code and depend on Python (3.8+, or PyPy) and the C++ standard library. This compact implementation was possible thanks to some C++11 language features (specifically: tuples, lambda functions and variadic templates). Since its creation, this library has grown beyond Boost.Python in many ways, leading to dramatically simpler binding code in many common situations.&lt;/p&gt; 
&lt;p&gt;Tutorial and reference documentation is provided at &lt;code&gt;pybind11.readthedocs.io &amp;lt;https://pybind11.readthedocs.io/en/latest&amp;gt;&lt;/code&gt;&lt;em&gt;. A PDF version of the manual is available &lt;code&gt;here &amp;lt;https://pybind11.readthedocs.io/_/downloads/en/latest/pdf/&amp;gt;&lt;/code&gt;&lt;/em&gt;. And the source code is always available at &lt;code&gt;github.com/pybind/pybind11 &amp;lt;https://github.com/pybind/pybind11&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;h2&gt;Core features&lt;/h2&gt; 
&lt;p&gt;pybind11 can map the following core C++ features to Python:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Functions accepting and returning custom data structures per value, reference, or pointer&lt;/li&gt; 
 &lt;li&gt;Instance methods and static methods&lt;/li&gt; 
 &lt;li&gt;Overloaded functions&lt;/li&gt; 
 &lt;li&gt;Instance attributes and static attributes&lt;/li&gt; 
 &lt;li&gt;Arbitrary exception types&lt;/li&gt; 
 &lt;li&gt;Enumerations&lt;/li&gt; 
 &lt;li&gt;Callbacks&lt;/li&gt; 
 &lt;li&gt;Iterators and ranges&lt;/li&gt; 
 &lt;li&gt;Custom operators&lt;/li&gt; 
 &lt;li&gt;Single and multiple inheritance&lt;/li&gt; 
 &lt;li&gt;STL data structures&lt;/li&gt; 
 &lt;li&gt;Smart pointers with reference counting like &lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Internal references with correct reference counting&lt;/li&gt; 
 &lt;li&gt;C++ classes with virtual (and pure virtual) methods can be extended in Python&lt;/li&gt; 
 &lt;li&gt;Integrated NumPy support (NumPy 2 requires pybind11 2.12+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Goodies&lt;/h2&gt; 
&lt;p&gt;In addition to the core functionality, pybind11 provides some extra goodies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Python 3.8+, and PyPy3 7.3 are supported with an implementation-agnostic interface (pybind11 2.9 was the last version to support Python 2 and 3.5).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It is possible to bind C++11 lambda functions with captured variables. The lambda capture data is stored inside the resulting Python function object.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;pybind11 uses C++11 move constructors and move assignment operators whenever possible to efficiently transfer custom data types.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It&#39;s easy to expose the internal storage of custom data types through Pythons&#39; buffer protocols. This is handy e.g.&amp;nbsp;for fast conversion between C++ matrix classes like Eigen and NumPy without expensive copy operations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;pybind11 can automatically vectorize functions so that they are transparently applied to all entries of one or more NumPy array arguments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Python&#39;s slice-based access and assignment operations can be supported with just a few lines of code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Everything is contained in just a few header files; there is no need to link against any additional libraries.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Binaries are generally smaller by a factor of at least 2 compared to equivalent bindings generated by Boost.Python. A recent pybind11 conversion of PyRosetta, an enormous Boost.Python binding project, &lt;code&gt;reported &amp;lt;https://graylab.jhu.edu/Sergey/2016.RosettaCon/PyRosetta-4.pdf&amp;gt;&lt;/code&gt;_ a binary size reduction of &lt;strong&gt;5.4x&lt;/strong&gt; and compile time reduction by &lt;strong&gt;5.8x&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Function signatures are precomputed at compile time (using &lt;code&gt;constexpr&lt;/code&gt;), leading to smaller binaries.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With little extra effort, C++ types can be pickled and unpickled similar to regular Python objects.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported compilers&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clang/LLVM 3.3 or newer (for Apple Xcode&#39;s clang, this is 5.0.0 or newer)&lt;/li&gt; 
 &lt;li&gt;GCC 4.8 or newer&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio 2017 or newer&lt;/li&gt; 
 &lt;li&gt;Intel classic C++ compiler 18 or newer (ICC 20.2 tested in CI)&lt;/li&gt; 
 &lt;li&gt;Cygwin/GCC (previously tested on 2.5.1)&lt;/li&gt; 
 &lt;li&gt;NVCC (CUDA 11.0 tested in CI)&lt;/li&gt; 
 &lt;li&gt;NVIDIA PGI (20.9 tested in CI)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;This project was created by &lt;code&gt;Wenzel Jakob &amp;lt;http://rgl.epfl.ch/people/wjakob&amp;gt;&lt;/code&gt;_. Significant features and/or improvements to the code were contributed by Jonas Adler, Lori A. Burns, Sylvain Corlay, Eric Cousineau, Aaron Gokaslan, Ralf Grosse-Kunstleve, Trent Houliston, Axel Huebl, @hulucc, Yannick Jadoul, Sergey Lyskov, Johan Mabille, Tomasz Miąsko, Dean Moldovan, Ben Pritchard, Jason Rhinelander, Boris Schäling, Pim Schellart, Henry Schreiner, Ivan Smirnov, Dustin Spicuzza, Boris Staletic, Ethan Steinberg, Patrick Stewart, Ivor Wanders, and Xiaofei Wang.&lt;/p&gt; 
&lt;p&gt;We thank Google for a generous financial contribution to the continuous integration infrastructure used by this project.&lt;/p&gt; 
&lt;p&gt;Contributing&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
See the `contributing
guide &amp;lt;https://github.com/pybind/pybind11/blob/master/.github/CONTRIBUTING.md&amp;gt;`_
for information on building and contributing to pybind11.

License
~~~~~~~

pybind11 is provided under a BSD-style license that can be found in the
`LICENSE &amp;lt;https://github.com/pybind/pybind11/blob/master/LICENSE&amp;gt;`_
file. By using, distributing, or contributing to this project, you agree
to the terms and conditions of this license.

.. |Latest Documentation Status| image:: https://readthedocs.org/projects/pybind11/badge?version=latest
   :target: http://pybind11.readthedocs.org/en/latest
.. |Stable Documentation Status| image:: https://img.shields.io/badge/docs-stable-blue.svg
   :target: http://pybind11.readthedocs.org/en/stable
.. |Gitter chat| image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg
   :target: https://gitter.im/pybind/Lobby
.. |CI| image:: https://github.com/pybind/pybind11/workflows/CI/badge.svg
   :target: https://github.com/pybind/pybind11/actions
.. |Build status| image:: https://ci.appveyor.com/api/projects/status/riaj54pn4h08xy40?svg=true
   :target: https://ci.appveyor.com/project/wjakob/pybind11
.. |PyPI package| image:: https://img.shields.io/pypi/v/pybind11.svg
   :target: https://pypi.org/project/pybind11/
.. |Conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pybind11.svg
   :target: https://github.com/conda-forge/pybind11-feedstock
.. |Repology| image:: https://repology.org/badge/latest-versions/python:pybind11.svg
   :target: https://repology.org/project/python:pybind11/versions
.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pybind11.svg
   :target: https://pypi.org/project/pybind11/
.. |GitHub Discussions| image:: https://img.shields.io/static/v1?label=Discussions&amp;amp;message=Ask&amp;amp;color=blue&amp;amp;logo=github
   :target: https://github.com/pybind/pybind11/discussions
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>bulletphysics/bullet3</title>
      <link>https://github.com/bulletphysics/bullet3</link>
      <description>&lt;p&gt;Bullet Physics SDK: real-time collision detection and multi-physics simulation for VR, games, visual effects, robotics, machine learning etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/bulletphysics/bullet3&quot;&gt;&lt;img src=&quot;https://api.travis-ci.org/bulletphysics/bullet3.png?branch=master&quot; alt=&quot;Travis Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/erwincoumans/bullet3&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/6sly9uxajr6xsstq&quot; alt=&quot;Appveyor Build status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Bullet Physics SDK&lt;/h1&gt; 
&lt;p&gt;This is the official C++ source code repository of the Bullet Physics SDK: real-time collision detection and multi-physics simulation for VR, games, visual effects, robotics, machine learning etc.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://pybullet.org/wordpress/wp-content/uploads/2019/03/cropped-pybullet.png&quot; alt=&quot;PyBullet&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Issues&lt;/h2&gt; 
&lt;p&gt;The Issue tracker was flooded with support questions and is closed until it is cleaned up. Use the &lt;a href=&quot;http://pybullet.org&quot;&gt;PyBullet forums&lt;/a&gt; to discuss with others.&lt;/p&gt; 
&lt;h2&gt;PyBullet&lt;/h2&gt; 
&lt;p&gt;It is highly recommended to use PyBullet Python bindings for improved support for robotics, reinforcement learning and VR. Use pip install pybullet and checkout the &lt;a href=&quot;https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit#heading=h.2ye70wns7io3&quot;&gt;PyBullet Quickstart Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Installation is simple:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip3 install pybullet --upgrade --user
python3 -m pybullet_envs.examples.enjoy_TF_AntBulletEnv_v0_2017may
python3 -m pybullet_envs.examples.enjoy_TF_HumanoidFlagrunHarderBulletEnv_v1_2017jul
python3 -m pybullet_envs.deep_mimic.testrl --arg_file run_humanoid3d_backflip_args.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use PyBullet in your research, please cite it like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@MISC{coumans2021,
author =   {Erwin Coumans and Yunfei Bai},
title =    {PyBullet, a Python module for physics simulation for games, robotics and machine learning},
howpublished = {\url{http://pybullet.org}},
year = {2016--2021}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements for Bullet Physics C++&lt;/h2&gt; 
&lt;p&gt;A C++ compiler for C++ 2003. The library is tested on Windows, Linux, Mac OSX, iOS, Android, but should likely work on any platform with C++ compiler. Some optional demos require OpenGL 2 or OpenGL 3, there are some non-graphical demos and unit tests too.&lt;/p&gt; 
&lt;h2&gt;Contributors and Coding Style information&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1u9vyzPtrVoVhYqQOGNWUgjRbfwfCdIts_NzmvgiJ144/edit&quot;&gt;https://docs.google.com/document/d/1u9vyzPtrVoVhYqQOGNWUgjRbfwfCdIts_NzmvgiJ144/edit&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements for experimental OpenCL GPGPU support&lt;/h2&gt; 
&lt;p&gt;The entire collision detection and rigid body dynamics can be executed on the GPU.&lt;/p&gt; 
&lt;p&gt;A high-end desktop GPU, such as an AMD Radeon 7970 or NVIDIA GTX 680 or better. We succesfully tested the software under Windows, Linux and Mac OSX. The software currently doesn&#39;t work on OpenCL CPU devices. It might run on a laptop GPU but performance will not likely be very good. Note that often an OpenCL drivers fails to compile a kernel. Some unit tests exist to track down the issue, but more work is required to cover all OpenCL kernels.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;All source code files are licensed under the permissive zlib license (&lt;a href=&quot;http://opensource.org/licenses/Zlib&quot;&gt;http://opensource.org/licenses/Zlib&lt;/a&gt;) unless marked differently in a particular folder/file.&lt;/p&gt; 
&lt;h2&gt;Build instructions for Bullet using vcpkg&lt;/h2&gt; 
&lt;p&gt;You can download and install Bullet using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg/&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh
./vcpkg integrate install
./vcpkg install bullet3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Bullet port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h2&gt;Build instructions for Bullet using premake. You can also use cmake instead.&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Click on build_visual_studio_vr_pybullet_double.bat and open build3/vs2010/0_Bullet3Solution.sln When asked, convert the projects to a newer version of Visual Studio. If you installed Python in the C:\ root directory, the batch file should find it automatically. Otherwise, edit this batch file to choose where Python include/lib directories are located.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Windows Virtual Reality sandbox for HTC Vive and Oculus Rift&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Build and run the App_SharedMemoryPhysics_VR project, preferably in Release/optimized build. You can connect from Python pybullet to the sandbox using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import pybullet as p
p.connect(p.SHARED_MEMORY) #or (p.TCP, &quot;localhost&quot;, 6667) or (p.UDP, &quot;192.168.86.10&quot;,1234)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Linux and Mac OSX gnu make&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Make sure gcc and cmake is installed (&lt;code&gt;sudo apt-get install build-essential&lt;/code&gt; and &lt;code&gt;sudo apt-get install cmake&lt;/code&gt; for Linux, &lt;code&gt;brew install cmake&lt;/code&gt; for Mac, or &lt;a href=&quot;https://cmake.org&quot;&gt;https://cmake.org&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;In a terminal type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build_cmake_pybullet_double.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This script will invoke cmake and build in the build_cmake directory. You can find pybullet in Bullet/examples/pybullet. The BulletExampleBrowser binary will be in Bullet/examples/ExampleBrowser.&lt;/p&gt; 
&lt;p&gt;You can also build Bullet using premake. There are premake executables in the build3 folder. Depending on your system (Linux 32bit, 64bit or Mac OSX) use one of the following lines Using premake:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd build3
./premake4_linux --double gmake
./premake4_linux64 --double gmake
./premake4_osx --double --enable_pybullet gmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd gmake
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that on Linux, you need to use cmake to build pybullet, since the compiler has issues of mixing shared and static libraries.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Mac OSX Xcode&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Click on build3/xcode4.command or in a terminal window execute&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./premake_osx xcode4
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The App_ExampleBrowser executables will be located in the bin folder. You can just run it though a terminal/command prompt, or by clicking it.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[--start_demo_name=&quot;Demo Name&quot;]     Start with a selected demo  
[--mp4=moviename.mp4]               Create a mp4 movie of the window, requires ffmpeg installed
[--mouse_move_multiplier=0.400000]  Set the mouse move sensitivity
[--mouse_wheel_multiplier=0.01]     Set the mouse wheel sensitivity
[--background_color_red= 0.9]       Set the red component for background color. Same for green and blue
[--fixed_timestep= 0.0]             Use either a real-time delta time (0.0) or a fixed step size (0.016666)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use mouse picking to grab objects. When holding the ALT or CONTROL key, you have Maya style camera mouse controls. Press F1 to create a series of screenshots. Hit ESCAPE to exit the demo app.&lt;/p&gt; 
&lt;p&gt;Check out the docs folder and the Bullet physics forums for further information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ssloy/tinyrenderer</title>
      <link>https://github.com/ssloy/tinyrenderer</link>
      <description>&lt;p&gt;A brief computer graphics / rendering course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tiny Renderer or how OpenGL works: software rendering in 500 lines of code&lt;/h1&gt; 
&lt;h1&gt;Check &lt;a href=&quot;https://github.com/ssloy/tinyrenderer/wiki&quot;&gt;the wiki&lt;/a&gt; for the detailed lessons.&lt;/h1&gt; 
&lt;h2&gt;compilation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/ssloy/tinyrenderer.git &amp;amp;&amp;amp;
cd tinyrenderer &amp;amp;&amp;amp;
cmake -Bbuild &amp;amp;&amp;amp;
cmake --build build -j &amp;amp;&amp;amp;
build/tinyrenderer obj/diablo3_pose/diablo3_pose.obj obj/floor.obj
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The rendered image is saved to &lt;code&gt;framebuffer.tga&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can open the project in Gitpod, a free online dev environment for GitHub: &lt;a href=&quot;https://gitpod.io/#https://github.com/ssloy/tinyrenderer&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;On open, the editor will compile &amp;amp; run the program as well as open the resulting image in the editor&#39;s preview. Just change the code in the editor and rerun the script (use the terminal&#39;s history) to see updated images.&lt;/p&gt; 
&lt;h2&gt;The main idea&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;My source code is irrelevant. Read the wiki and implement your own renderer. Only when you suffer through all the tiny details, you will learn what is going on.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In &lt;a href=&quot;https://github.com/ssloy/tinyrenderer/wiki&quot;&gt;this series of articles&lt;/a&gt;, I want to show how OpenGL works by writing its clone (a much simplified one). Surprisingly enough, I often meet people who cannot overcome the initial hurdle of learning OpenGL / DirectX. Thus, I have prepared a short series of lectures, after which my students show quite good renderers.&lt;/p&gt; 
&lt;p&gt;So, the task is formulated as follows: using no third-party libraries (especially graphic ones), get something like this picture:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/africanhead.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Warning: this is a training material that will loosely repeat the structure of the OpenGL library. It will be a software renderer. &lt;strong&gt;I do not want to show how to write applications for OpenGL. I want to show how OpenGL works.&lt;/strong&gt; I am deeply convinced that it is impossible to write efficient applications using 3D libraries without understanding this.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;I will try to make the final code about 500 lines. My students need 10 to 20 programming hours to begin making such renderers. At the input, we get a test file with a polygonal wire + pictures with textures. At the output, we’ll get a rendered model-no graphical interface, and the program simply generates an image.&lt;/p&gt; 
&lt;p&gt;Since the goal is to minimize external dependencies, I give my students just one class that allows working with &lt;a href=&quot;http://en.wikipedia.org/wiki/Truevision_TGA&quot;&gt;TGA&lt;/a&gt; files. It’s one of the simplest formats that supports images in RGB/RGBA/black and white formats. So, as a starting point, we’ll obtain a simple way to work with pictures. You should note that the only functionality available at the very beginning (in addition to loading and saving images) is the ability to set one pixel&#39;s color.&lt;/p&gt; 
&lt;p&gt;There are no functions for drawing line segments and triangles. We’ll have to do all of this by hand. I provide my source code that I write in parallel with students. But I would not recommend using it, as this doesn’t make sense. The entire code is available on GitHub, and &lt;a href=&quot;https://github.com/ssloy/tinyrenderer/tree/909fe20934ba5334144d2c748805690a1fa4c89f&quot;&gt;here&lt;/a&gt; you will find the source code I give to my students.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &quot;tgaimage.h&quot;
const TGAColor white = TGAColor(255, 255, 255, 255);
const TGAColor red   = TGAColor(255, 0,   0,   255);
int main(int argc, char** argv) {
        TGAImage image(100, 100, TGAImage::RGB);
        image.set(52, 41, red);
        image.write_tga_file(&quot;output.tga&quot;);`
        return 0;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;output.tga should look something like this:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/reddot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Teaser: few examples made with the renderer&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/demon.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/diablo-glow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/boggie.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/00-home/diablo-ssao.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SoftFever/OrcaSlicer</title>
      <link>https://github.com/SoftFever/OrcaSlicer</link>
      <description>&lt;p&gt;G-code generator for 3D printers (Bambu, Prusa, Voron, VzBot, RatRig, Creality, etc.)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;p &quot;font-size:200px;&quot;&gt;&lt;img align=&quot;left&quot; src=&quot;https://github.com/SoftFever/OrcaSlicer/raw/main/resources/images/OrcaSlicer.ico&quot; width=&quot;100&quot;&gt; Orca Slicer&lt;/p&gt; &lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_all.yml&quot;&gt;&lt;img src=&quot;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_all.yml/badge.svg?branch=main&quot; alt=&quot;Build all&quot;&gt;&lt;/a&gt; &lt;br&gt;Orca Slicer is an open source slicer for FDM printers.&lt;/p&gt; 
&lt;p&gt;Join our Discord community here:&lt;br&gt; &lt;a href=&quot;https://discord.gg/P4VE9UY9gJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?message=Discord&amp;amp;logo=discord&amp;amp;label=&amp;amp;color=7289DA&amp;amp;logoColor=white&amp;amp;labelColor=&amp;amp;style=for-the-badge&quot; height=&quot;35&quot; alt=&quot;discord logo&quot;&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;🚨🚨🚨Important Security Alert🚨🚨🚨&lt;/h3&gt; 
&lt;p&gt;The only official platforms for OrcaSlicer are &lt;strong&gt;our GitHub project page&lt;/strong&gt;, &lt;a href=&quot;https://www.orcaslicer.com/&quot;&gt;&lt;strong&gt;orcaslicer.com&lt;/strong&gt;&lt;/a&gt;, and the &lt;a href=&quot;https://discord.gg/P4VE9UY9gJ&quot;&gt;&lt;strong&gt;official Discord channel&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please be aware that &quot;&lt;strong&gt;orcaslicer.net&lt;/strong&gt;&quot;, &quot;&lt;strong&gt;orcaslicer.co&lt;/strong&gt;&quot; or &quot;&lt;strong&gt;orca-slicer.com&lt;/strong&gt;&quot; are NOT an official website for OrcaSlicer and may be potentially malicious. These sites appear to use AI-generated content, lacking genuine context and seems to exist solely to profit from advertisements. Worse, it may redirect download links to harmful sources. For your safety, avoid downloading OrcaSlicer from this site as the links may be compromised.&lt;/p&gt; 
&lt;p&gt;If you see the above sites in your searches, report them as spam or unsafe to the search engine. This small action will assist everyone.&lt;/p&gt; 
&lt;p&gt;We deeply value our OrcaSlicer community and appreciate all the social groups that support us. However, it is crucial to address the risk posed by any group that falsely claims to be official or misleads its members. If you encounter such a group or are part of one, please assist by encouraging the group owner to add a clear disclaimer or by alerting its members.&lt;/p&gt; 
&lt;p&gt;Thank you for your vigilance and support in keeping our community safe!&lt;/p&gt; 
&lt;h1&gt;Main features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Auto-calibration for all printers&lt;/li&gt; 
 &lt;li&gt;Sandwich (inner-outer-inner) mode - An improved version of the &lt;code&gt;External Perimeters First&lt;/code&gt; mode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/wiki/Precise-wall&quot;&gt;Precise wall&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Polyholes conversion support: &lt;a href=&quot;https://github.com/supermerill/SuperSlicer/wiki/Polyholes&quot;&gt;SuperSlicer Wiki: Polyholes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Klipper support&lt;/li&gt; 
 &lt;li&gt;More granular controls&lt;/li&gt; 
 &lt;li&gt;Additional features can be found in the &lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/releases/&quot;&gt;change notes&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Wiki&lt;/h1&gt; 
&lt;p&gt;The wiki below aims to provide a detailed explanation of the slicer settings, including how to maximize their use and how to calibrate and set up your printer.&lt;/p&gt; 
&lt;p&gt;Please note that the wiki is a work in progress. We appreciate your patience as we continue to develop and improve it!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/wiki&quot;&gt;Access the wiki here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Download&lt;/h1&gt; 
&lt;h3&gt;Stable Release&lt;/h3&gt; 
&lt;p&gt;📥 &lt;strong&gt;&lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/releases/latest&quot;&gt;Download the Latest Stable Release&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; Visit our GitHub Releases page for the latest stable version of Orca Slicer, recommended for most users.&lt;/p&gt; 
&lt;h3&gt;Nightly Builds&lt;/h3&gt; 
&lt;p&gt;🌙 &lt;strong&gt;&lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/releases/tag/nightly-builds&quot;&gt;Download the Latest Nightly Build&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; Explore the latest developments in Orca Slicer with our nightly builds. Feedback on these versions is highly appreciated.&lt;/p&gt; 
&lt;h1&gt;How to install&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the installer for your preferred version from the &lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/releases&quot;&gt;releases page&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;em&gt;For convenience there is also a portable build available.&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;If you have troubles to run the build, you might need to install following runtimes:&lt;/em&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/releases/download/v1.0.10-sf2/MicrosoftEdgeWebView2RuntimeInstallerX64.exe&quot;&gt;MicrosoftEdgeWebView2RuntimeInstallerX64&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://aka.ms/webview2&quot;&gt;Details of this runtime&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://go.microsoft.com/fwlink/p/?LinkId=2124703&quot;&gt;Alternative Download Link Hosted by Microsoft&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/SoftFever/OrcaSlicer/releases/download/v1.0.10-sf2/vcredist2019_x64.exe&quot;&gt;vcredist2019_x64&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://aka.ms/vs/17/release/vc_redist.x64.exe&quot;&gt;Alternative Download Link Hosted by Microsoft&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;This file may already be available on your computer if you&#39;ve installed visual studio. Check the following location: &lt;code&gt;%VCINSTALLDIR%Redist\MSVC\v142&lt;/code&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the DMG for your computer: &lt;code&gt;arm64&lt;/code&gt; version for Apple Silicon and &lt;code&gt;x86_64&lt;/code&gt; for Intel CPU.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drag OrcaSlicer.app to Application folder.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;If you want to run a build from a PR, you also need to follow the instructions below:&lt;/em&gt;&lt;/p&gt; 
  &lt;details quarantine&gt;
    - Option 1 (You only need to do this once. After that the app can be opened normally.): - Step 1: Hold _cmd_ and right click the app, from the context menu choose **Open**. - Step 2: A warning window will pop up, click _Open_ 
   &lt;ul&gt; 
    &lt;li&gt;Option 2:&lt;br&gt; Execute this command in terminal: &lt;code&gt;xattr -dr com.apple.quarantine /Applications/OrcaSlicer.app&lt;/code&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;    softfever@mac:~$ xattr -dr com.apple.quarantine /Applications/OrcaSlicer.app
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt;Option 3: 
     &lt;ul&gt; 
      &lt;li&gt;Step 1: open the app, a warning window will pop up&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SoftFever/OrcaSlicer/main/SoftFever_doc/mac_cant_open.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt; 
      &lt;li&gt;Step 2: in &lt;code&gt;System Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt;, click &lt;code&gt;Open Anyway&lt;/code&gt;:&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SoftFever/OrcaSlicer/main/SoftFever_doc/mac_security_setting.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Linux (Ubuntu)&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If you run into trouble executing it, try this command in the terminal:&lt;br&gt; &lt;code&gt;chmod +x /path_to_appimage/OrcaSlicer_Linux.AppImage&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;How to compile&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Windows 64-bit&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Tools needed: Visual Studio 2019, Cmake, git, git-lfs, Strawberry Perl. 
    &lt;ul&gt; 
     &lt;li&gt;You will require cmake version 3.14 or later, which is available &lt;a href=&quot;https://cmake.org/download/&quot;&gt;on their website&lt;/a&gt;.&lt;/li&gt; 
     &lt;li&gt;Strawberry Perl is &lt;a href=&quot;https://github.com/StrawberryPerl/Perl-Dist-Strawberry/releases/&quot;&gt;available on their GitHub repository&lt;/a&gt;.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Run &lt;code&gt;build_release.bat&lt;/code&gt; in &lt;code&gt;x64 Native Tools Command Prompt for VS 2019&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Note: Don&#39;t forget to run &lt;code&gt;git lfs pull&lt;/code&gt; after cloning the repository to download tools on Windows&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Mac 64-bit&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Tools needed: Xcode, Cmake, git, gettext, libtool, automake, autoconf, texinfo 
    &lt;ul&gt; 
     &lt;li&gt;You can install most of them by running &lt;code&gt;brew install cmake gettext libtool automake autoconf texinfo&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;run &lt;code&gt;build_release_macos.sh&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;To build and debug in Xcode: 
    &lt;ul&gt; 
     &lt;li&gt;run &lt;code&gt;Xcode.app&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;open &lt;code&gt;build_`arch`/OrcaSlicer.Xcodeproj&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;menu bar: Product =&amp;gt; Scheme =&amp;gt; OrcaSlicer&lt;/li&gt; 
     &lt;li&gt;menu bar: Product =&amp;gt; Scheme =&amp;gt; Edit Scheme... 
      &lt;ul&gt; 
       &lt;li&gt;Run =&amp;gt; Info tab =&amp;gt; Build Configuration: &lt;code&gt;RelWithDebInfo&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;Run =&amp;gt; Options tab =&amp;gt; Document Versions: uncheck &lt;code&gt;Allow debugging when browsing versions&lt;/code&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;menu bar: Product =&amp;gt; Run&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Linux (All Distros)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Docker 
    &lt;ul&gt; 
     &lt;li&gt;Dependencies: Docker &lt;a href=&quot;https://www.docker.com/get-started/&quot;&gt;Installation Instructions&lt;/a&gt;, git&lt;/li&gt; 
     &lt;li&gt;clone this repository &lt;code&gt;git clone https://github.com/SoftFever/OrcaSlicer&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;run &lt;code&gt;cd OrcaSlicer&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;run &lt;code&gt;./DockerBuild.sh&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;To run OrcaSlicer: 
      &lt;ul&gt; 
       &lt;li&gt;run &lt;code&gt;./DockerRun.sh&lt;/code&gt; 
        &lt;ul&gt; 
         &lt;li&gt;For most common errors, open &lt;code&gt;DockerRun.sh&lt;/code&gt; and read the comments.&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Ubuntu 
    &lt;ul&gt; 
     &lt;li&gt;Dependencies &lt;strong&gt;Will be auto installed with the shell script&lt;/strong&gt;: &lt;code&gt;libmspack-dev libgstreamerd-3-dev libsecret-1-dev libwebkit2gtk-4.0-dev libosmesa6-dev libssl-dev libcurl4-openssl-dev eglexternalplatform-dev libudev-dev libdbus-1-dev extra-cmake-modules libgtk2.0-dev libglew-dev libudev-dev libdbus-1-dev cmake git texinfo&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;run &#39;sudo ./BuildLinux.sh -u&#39;&lt;/li&gt; 
     &lt;li&gt;run &#39;./BuildLinux.sh -dsir&#39;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Note:&lt;/h1&gt; 
&lt;p&gt;If you&#39;re running Klipper, it&#39;s recommended to add the following configuration to your &lt;code&gt;printer.cfg&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Supports&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Orca Slicer&lt;/strong&gt; is an open-source project and I&#39;m deeply grateful to all my sponsors and backers.&lt;br&gt; Their generous support enables me to purchase filaments and other essential 3D printing materials for the project.&lt;br&gt; Thank you! :)&lt;/p&gt; 
&lt;h3&gt;Sponsors:&lt;/h3&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://qidi3d.com/&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SoftFever/OrcaSlicer/main/SoftFever_doc%5Csponsor_logos%5CQIDI.png&quot; alt=&quot;QIDI&quot; width=&quot;96&quot; height=&quot;&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href=&quot;https://bigtree-tech.com/&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SoftFever/OrcaSlicer/main/SoftFever_doc%5Csponsor_logos%5CBigTreeTech.png&quot; alt=&quot;BIGTREE TECH&quot; width=&quot;96&quot; height=&quot;&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Backers:&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Ko-fi supporters&lt;/strong&gt;: &lt;a href=&quot;https://github.com/user-attachments/files/16147016/Supporters_638561417699952499.csv&quot;&gt;Backers list&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support me&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/SoftFever&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&amp;amp;color=%23fe8e86&quot; width=&quot;130&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://ko-fi.com/G2G5IP3CP&quot;&gt;&lt;img src=&quot;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&quot; width=&quot;200&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://paypal.me/softfever3d&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&quot; alt=&quot;PayPal&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Some background&lt;/h2&gt; 
&lt;p&gt;OrcaSlicer is originally forked from Bambu Studio, it was previously known as BambuStudio-SoftFever.&lt;/p&gt; 
&lt;p&gt;Bambu Studio is forked from &lt;a href=&quot;https://github.com/prusa3d/PrusaSlicer&quot;&gt;PrusaSlicer&lt;/a&gt; by Prusa Research, which is from &lt;a href=&quot;https://github.com/Slic3r/Slic3r&quot;&gt;Slic3r&lt;/a&gt; by Alessandro Ranellucci and the RepRap community. Orca Slicer incorporates a lot of features from SuperSlicer by @supermerill Orca Slicer&#39;s logo is designed by community member Justin Levine(@freejstnalxndr)&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Orca Slicer is licensed under the GNU Affero General Public License, version 3. Orca Slicer is based on Bambu Studio by BambuLab.&lt;/p&gt; 
&lt;p&gt;Bambu Studio is licensed under the GNU Affero General Public License, version 3. Bambu Studio is based on PrusaSlicer by PrusaResearch.&lt;/p&gt; 
&lt;p&gt;PrusaSlicer is licensed under the GNU Affero General Public License, version 3. PrusaSlicer is owned by Prusa Research. PrusaSlicer is originally based on Slic3r by Alessandro Ranellucci.&lt;/p&gt; 
&lt;p&gt;Slic3r is licensed under the GNU Affero General Public License, version 3. Slic3r was created by Alessandro Ranellucci with the help of many other contributors.&lt;/p&gt; 
&lt;p&gt;The GNU Affero General Public License, version 3 ensures that if you use any part of this software in any way (even behind a web server), your software must be released under the same license.&lt;/p&gt; 
&lt;p&gt;Orca Slicer includes a pressure advance calibration pattern test adapted from Andrew Ellis&#39; generator, which is licensed under GNU General Public License, version 3. Ellis&#39; generator is itself adapted from a generator developed by Sineos for Marlin, which is licensed under GNU General Public License, version 3.&lt;/p&gt; 
&lt;p&gt;The Bambu networking plugin is based on non-free libraries from BambuLab. It is optional to the Orca Slicer and provides extended functionalities for Bambulab printer users.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA/nccl</title>
      <link>https://github.com/NVIDIA/nccl</link>
      <description>&lt;p&gt;Optimized primitives for collective multi-GPU communication&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NCCL&lt;/h1&gt; 
&lt;p&gt;Optimized primitives for inter-GPU communication.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;NCCL (pronounced &quot;Nickel&quot;) is a stand-alone library of standard communication routines for GPUs, implementing all-reduce, all-gather, reduce, broadcast, reduce-scatter, as well as any send/receive based communication pattern. It has been optimized to achieve high bandwidth on platforms using PCIe, NVLink, NVswitch, as well as networking using InfiniBand Verbs or TCP/IP sockets. NCCL supports an arbitrary number of GPUs installed in a single node or across multiple nodes, and can be used in either single- or multi-process (e.g., MPI) applications.&lt;/p&gt; 
&lt;p&gt;For more information on NCCL usage, please refer to the &lt;a href=&quot;https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/index.html&quot;&gt;NCCL documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;Note: the official and tested builds of NCCL can be downloaded from: &lt;a href=&quot;https://developer.nvidia.com/nccl&quot;&gt;https://developer.nvidia.com/nccl&lt;/a&gt;. You can skip the following build steps if you choose to use the official builds.&lt;/p&gt; 
&lt;p&gt;To build the library :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cd nccl
$ make -j src.build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If CUDA is not installed in the default /usr/local/cuda path, you can define the CUDA path with :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ make src.build CUDA_HOME=&amp;lt;path to cuda install&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NCCL will be compiled and installed in &lt;code&gt;build/&lt;/code&gt; unless &lt;code&gt;BUILDDIR&lt;/code&gt; is set.&lt;/p&gt; 
&lt;p&gt;By default, NCCL is compiled for all supported architectures. To accelerate the compilation and reduce the binary size, consider redefining &lt;code&gt;NVCC_GENCODE&lt;/code&gt; (defined in &lt;code&gt;makefiles/common.mk&lt;/code&gt;) to only include the architecture of the target platform :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ make -j src.build NVCC_GENCODE=&quot;-gencode=arch=compute_70,code=sm_70&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;To install NCCL on the system, create a package then install it as root.&lt;/p&gt; 
&lt;p&gt;Debian/Ubuntu :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ # Install tools to create debian packages
$ sudo apt install build-essential devscripts debhelper fakeroot
$ # Build NCCL deb package
$ make pkg.debian.build
$ ls build/pkg/deb/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;RedHat/CentOS :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ # Install tools to create rpm packages
$ sudo yum install rpm-build rpmdevtools
$ # Build NCCL rpm package
$ make pkg.redhat.build
$ ls build/pkg/rpm/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;OS-agnostic tarball :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ make pkg.txz.build
$ ls build/pkg/txz/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Tests for NCCL are maintained separately at &lt;a href=&quot;https://github.com/nvidia/nccl-tests&quot;&gt;https://github.com/nvidia/nccl-tests&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ git clone https://github.com/NVIDIA/nccl-tests.git
$ cd nccl-tests
$ make
$ ./build/all_reduce_perf -b 8 -e 256M -f 2 -g &amp;lt;ngpus&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;All source code and accompanying documentation is copyright (c) 2015-2020, NVIDIA CORPORATION. All rights reserved.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>electron/electron</title>
      <link>https://github.com/electron/electron</link>
      <description>&lt;p&gt;Build cross-platform desktop apps with JavaScript, HTML, and CSS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://electronjs.org&quot;&gt;&lt;img src=&quot;https://electronjs.org/images/electron-logo.svg?sanitize=true&quot; alt=&quot;Electron Logo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/electron/electron/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/electron/electron/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;GitHub Actions Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/electronjs&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/745037351163527189?color=%237289DA&amp;amp;label=chat&amp;amp;logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Electron Discord Invite&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;📝&lt;/span&gt; Available Translations: 🇨🇳 🇧🇷 🇪🇸 🇯🇵 🇷🇺 🇫🇷 🇺🇸 🇩🇪. View these docs in other languages on our &lt;a href=&quot;https://crowdin.com/project/electron&quot;&gt;Crowdin&lt;/a&gt; project.&lt;/p&gt; 
&lt;p&gt;The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. It is based on &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and &lt;a href=&quot;https://www.chromium.org&quot;&gt;Chromium&lt;/a&gt; and is used by the &lt;a href=&quot;https://github.com/Microsoft/vscode/&quot;&gt;Visual Studio Code&lt;/a&gt; and many other &lt;a href=&quot;https://electronjs.org/apps&quot;&gt;apps&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Follow &lt;a href=&quot;https://twitter.com/electronjs&quot;&gt;@electronjs&lt;/a&gt; on Twitter for important announcements.&lt;/p&gt; 
&lt;p&gt;This project adheres to the Contributor Covenant &lt;a href=&quot;https://github.com/electron/electron/tree/main/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&quot;mailto:coc@electronjs.org&quot;&gt;coc@electronjs.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To install prebuilt Electron binaries, use &lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt;. The preferred method is to install Electron as a development dependency in your app:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install electron --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more installation options and troubleshooting tips, see &lt;a href=&quot;https://raw.githubusercontent.com/electron/electron/main/docs/tutorial/installation.md&quot;&gt;installation&lt;/a&gt;. For info on how to manage Electron versions in your apps, see &lt;a href=&quot;https://raw.githubusercontent.com/electron/electron/main/docs/tutorial/electron-versioning.md&quot;&gt;Electron versioning&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;Each Electron release provides binaries for macOS, Windows, and Linux.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS (Big Sur and up): Electron provides 64-bit Intel and Apple Silicon / ARM binaries for macOS.&lt;/li&gt; 
 &lt;li&gt;Windows (Windows 10 and up): Electron provides &lt;code&gt;ia32&lt;/code&gt; (&lt;code&gt;x86&lt;/code&gt;), &lt;code&gt;x64&lt;/code&gt; (&lt;code&gt;amd64&lt;/code&gt;), and &lt;code&gt;arm64&lt;/code&gt; binaries for Windows. Windows on ARM support was added in Electron 5.0.8. Support for Windows 7, 8 and 8.1 was &lt;a href=&quot;https://www.electronjs.org/blog/windows-7-to-8-1-deprecation-notice&quot;&gt;removed in Electron 23, in line with Chromium&#39;s Windows deprecation policy&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Linux: The prebuilt binaries of Electron are built on Ubuntu 20.04. They have also been verified to work on: 
  &lt;ul&gt; 
   &lt;li&gt;Ubuntu 18.04 and newer&lt;/li&gt; 
   &lt;li&gt;Fedora 32 and newer&lt;/li&gt; 
   &lt;li&gt;Debian 10 and newer&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick start &amp;amp; Electron Fiddle&lt;/h2&gt; 
&lt;p&gt;Use &lt;a href=&quot;https://github.com/electron/fiddle&quot;&gt;&lt;code&gt;Electron Fiddle&lt;/code&gt;&lt;/a&gt; to build, run, and package small Electron experiments, to see code examples for all of Electron&#39;s APIs, and to try out different versions of Electron. It&#39;s designed to make the start of your journey with Electron easier.&lt;/p&gt; 
&lt;p&gt;Alternatively, clone and run the &lt;a href=&quot;https://github.com/electron/electron-quick-start&quot;&gt;electron/electron-quick-start&lt;/a&gt; repository to see a minimal Electron app in action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/electron/electron-quick-start
cd electron-quick-start
npm install
npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Resources for learning Electron&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://electronjs.org/docs&quot;&gt;electronjs.org/docs&lt;/a&gt; - All of Electron&#39;s documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/electron/fiddle&quot;&gt;electron/fiddle&lt;/a&gt; - A tool to build, run, and package small Electron experiments&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/electron/electron-quick-start&quot;&gt;electron/electron-quick-start&lt;/a&gt; - A very basic starter Electron app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://electronjs.org/community#boilerplates&quot;&gt;electronjs.org/community#boilerplates&lt;/a&gt; - Sample starter apps created by the community&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Programmatic usage&lt;/h2&gt; 
&lt;p&gt;Most people use Electron from the command line, but if you require &lt;code&gt;electron&lt;/code&gt; inside your &lt;strong&gt;Node app&lt;/strong&gt; (not your Electron app) it will return the file path to the binary. Use this to spawn Electron from Node scripts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const electron = require(&#39;electron&#39;)
const proc = require(&#39;node:child_process&#39;)

// will print something similar to /Users/maf/.../Electron
console.log(electron)

// spawn Electron
const child = proc.spawn(electron)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mirrors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://npmmirror.com/mirrors/electron/&quot;&gt;China&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://www.electronjs.org/docs/latest/tutorial/installation#mirror&quot;&gt;Advanced Installation Instructions&lt;/a&gt; to learn how to use a custom mirror.&lt;/p&gt; 
&lt;h2&gt;Documentation translations&lt;/h2&gt; 
&lt;p&gt;We crowdsource translations for our documentation via &lt;a href=&quot;https://crowdin.com/project/electron&quot;&gt;Crowdin&lt;/a&gt;. We currently accept translations for Chinese (Simplified), French, German, Japanese, Portuguese, Russian, and Spanish.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are interested in reporting/fixing issues and contributing directly to the code base, please see &lt;a href=&quot;https://raw.githubusercontent.com/electron/electron/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on what we&#39;re looking for and how to get started.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Info on reporting bugs, getting help, finding third-party tools and sample apps, and more can be found on the &lt;a href=&quot;https://www.electronjs.org/community&quot;&gt;Community page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/electron/electron/raw/main/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;When using Electron logos, make sure to follow &lt;a href=&quot;https://trademark-policy.openjsf.org/&quot;&gt;OpenJS Foundation Trademark Policy&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fmtlib/fmt</title>
      <link>https://github.com/fmtlib/fmt</link>
      <description>&lt;p&gt;A modern formatting library&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/576385/156254208-f5b743a9-88cf-439d-b0c0-923d53e8d551.png&quot; alt=&quot;{fmt}&quot; width=&quot;25%&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux&quot;&gt;&lt;img src=&quot;https://github.com/fmtlib/fmt/workflows/linux/badge.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos&quot;&gt;&lt;img src=&quot;https://github.com/fmtlib/fmt/workflows/macos/badge.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows&quot;&gt;&lt;img src=&quot;https://github.com/fmtlib/fmt/workflows/windows/badge.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20%0ASummary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg?sanitize=true&quot; alt=&quot;fmt is continuously fuzzed at oss-fuzz&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/tagged/fmt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/stackoverflow-fmt-blue.svg?sanitize=true&quot; alt=&quot;Ask questions at StackOverflow with the tag fmt&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://securityscorecards.dev/viewer/?uri=github.com/fmtlib/fmt&quot;&gt;&lt;img src=&quot;https://api.securityscorecards.dev/projects/github.com/fmtlib/fmt/badge&quot; alt=&quot;image&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;{fmt}&lt;/strong&gt; is an open-source formatting library providing a fast and safe alternative to C stdio and C++ iostreams.&lt;/p&gt; 
&lt;p&gt;If you like this project, please consider donating to one of the funds that help victims of the war in Ukraine: &lt;a href=&quot;https://www.stopputin.net/&quot;&gt;https://www.stopputin.net/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://fmt.dev&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hackingcpp.com/cpp/libs/fmt.html&quot;&gt;Cheat Sheets&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Q&amp;amp;A: ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/fmt&quot;&gt;StackOverflow with the tag fmt&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Try {fmt} in &lt;a href=&quot;https://godbolt.org/z/8Mx1EW73v&quot;&gt;Compiler Explorer&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple &lt;a href=&quot;https://fmt.dev/latest/api/&quot;&gt;format API&lt;/a&gt; with positional arguments for localization&lt;/li&gt; 
 &lt;li&gt;Implementation of &lt;a href=&quot;https://en.cppreference.com/w/cpp/utility/format&quot;&gt;C++20 std::format&lt;/a&gt; and &lt;a href=&quot;https://en.cppreference.com/w/cpp/io/print&quot;&gt;C++23 std::print&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fmt.dev/latest/syntax/&quot;&gt;Format string syntax&lt;/a&gt; similar to Python&#39;s &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fast IEEE 754 floating-point formatter with correct rounding, shortness and round-trip guarantees using the &lt;a href=&quot;https://github.com/jk-jeon/dragonbox&quot;&gt;Dragonbox&lt;/a&gt; algorithm&lt;/li&gt; 
 &lt;li&gt;Portable Unicode support&lt;/li&gt; 
 &lt;li&gt;Safe &lt;a href=&quot;https://fmt.dev/latest/api/#printf-formatting&quot;&gt;printf implementation&lt;/a&gt; including the POSIX extension for positional arguments&lt;/li&gt; 
 &lt;li&gt;Extensibility: &lt;a href=&quot;https://fmt.dev/latest/api/#formatting-user-defined-types&quot;&gt;support for user-defined types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;High performance: faster than common standard library implementations of &lt;code&gt;(s)printf&lt;/code&gt;, iostreams, &lt;code&gt;to_string&lt;/code&gt; and &lt;code&gt;to_chars&lt;/code&gt;, see &lt;a href=&quot;https://raw.githubusercontent.com/fmtlib/fmt/master/#speed-tests&quot;&gt;Speed tests&lt;/a&gt; and &lt;a href=&quot;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&quot;&gt;Converting a hundred million integers to strings per second&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Small code size both in terms of source code with the minimum configuration consisting of just three files, &lt;code&gt;core.h&lt;/code&gt;, &lt;code&gt;format.h&lt;/code&gt; and &lt;code&gt;format-inl.h&lt;/code&gt;, and compiled code; see &lt;a href=&quot;https://raw.githubusercontent.com/fmtlib/fmt/master/#compile-time-and-code-bloat&quot;&gt;Compile time and code bloat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Reliability: the library has an extensive set of &lt;a href=&quot;https://github.com/fmtlib/fmt/tree/master/test&quot;&gt;tests&lt;/a&gt; and is &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20Summary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&quot;&gt;continuously fuzzed&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Safety: the library is fully type-safe, errors in format strings can be reported at compile time, automatic memory management prevents buffer overflow errors&lt;/li&gt; 
 &lt;li&gt;Ease of use: small self-contained code base, no external dependencies, permissive MIT &lt;a href=&quot;https://github.com/fmtlib/fmt/raw/master/LICENSE&quot;&gt;license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fmt.dev/latest/#portability&quot;&gt;Portability&lt;/a&gt; with consistent output across platforms and support for older compilers&lt;/li&gt; 
 &lt;li&gt;Clean warning-free codebase even on high warning levels such as &lt;code&gt;-Wall -Wextra -pedantic&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Locale independence by default&lt;/li&gt; 
 &lt;li&gt;Optional header-only configuration enabled with the &lt;code&gt;FMT_HEADER_ONLY&lt;/code&gt; macro&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://fmt.dev&quot;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h1&gt;Examples&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Print to stdout&lt;/strong&gt; (&lt;a href=&quot;https://godbolt.org/z/Tevcjh&quot;&gt;run&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;fmt/core.h&amp;gt;

int main() {
  fmt::print(&quot;Hello, world!\n&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Format a string&lt;/strong&gt; (&lt;a href=&quot;https://godbolt.org/z/oK8h33&quot;&gt;run&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::string s = fmt::format(&quot;The answer is {}.&quot;, 42);
// s == &quot;The answer is 42.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Format a string using positional arguments&lt;/strong&gt; (&lt;a href=&quot;https://godbolt.org/z/Yn7Txe&quot;&gt;run&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::string s = fmt::format(&quot;I&#39;d rather be {1} than {0}.&quot;, &quot;right&quot;, &quot;happy&quot;);
// s == &quot;I&#39;d rather be happy than right.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Print dates and times&lt;/strong&gt; (&lt;a href=&quot;https://godbolt.org/z/c31ExdY3W&quot;&gt;run&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;fmt/chrono.h&amp;gt;

int main() {
  auto now = std::chrono::system_clock::now();
  fmt::print(&quot;Date and time: {}\n&quot;, now);
  fmt::print(&quot;Time: {:%H:%M}\n&quot;, now);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Date and time: 2023-12-26 19:10:31.557195597
Time: 19:10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Print a container&lt;/strong&gt; (&lt;a href=&quot;https://godbolt.org/z/MxM1YqjE7&quot;&gt;run&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;vector&amp;gt;
#include &amp;lt;fmt/ranges.h&amp;gt;

int main() {
  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
  fmt::print(&quot;{}\n&quot;, v);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Check a format string at compile time&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::string s = fmt::format(&quot;{:d}&quot;, &quot;I am not a number&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This gives a compile-time error in C++20 because &lt;code&gt;d&lt;/code&gt; is an invalid format specifier for a string.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Write a file from a single thread&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;fmt/os.h&amp;gt;

int main() {
  auto out = fmt::output_file(&quot;guide.txt&quot;);
  out.print(&quot;Don&#39;t {}&quot;, &quot;Panic&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be &lt;a href=&quot;http://www.zverovich.net/2020/08/04/optimal-file-buffer-size.html&quot;&gt;5 to 9 times faster than fprintf&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Print with colors and text styles&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;fmt/color.h&amp;gt;

int main() {
  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,
             &quot;Hello, {}!\n&quot;, &quot;world&quot;);
  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |
             fmt::emphasis::underline, &quot;Olá, {}!\n&quot;, &quot;Mundo&quot;);
  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,
             &quot;你好{}！\n&quot;, &quot;世界&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output on a modern terminal with Unicode support:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/fmtlib/fmt/assets/%0A576385/2a93c904-d6fa-4aa6-b453-2618e1c327d7&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Benchmarks&lt;/h1&gt; 
&lt;h2&gt;Speed tests&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Library&lt;/th&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Run Time, s&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;libc&lt;/td&gt; 
   &lt;td&gt;printf&lt;/td&gt; 
   &lt;td&gt;0.91&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;libc++&lt;/td&gt; 
   &lt;td&gt;std::ostream&lt;/td&gt; 
   &lt;td&gt;2.49&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;{fmt} 9.1&lt;/td&gt; 
   &lt;td&gt;fmt::print&lt;/td&gt; 
   &lt;td&gt;0.74&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Boost Format 1.80&lt;/td&gt; 
   &lt;td&gt;boost::format&lt;/td&gt; 
   &lt;td&gt;6.26&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Folly Format&lt;/td&gt; 
   &lt;td&gt;folly::format&lt;/td&gt; 
   &lt;td&gt;1.87&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;{fmt} is the fastest of the benchmarked methods, ~20% faster than &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The above results were generated by building &lt;code&gt;tinyformat_test.cpp&lt;/code&gt; on macOS 12.6.1 with &lt;code&gt;clang++ -O3 -DNDEBUG -DSPEED_TEST -DHAVE_FORMAT&lt;/code&gt;, and taking the best of three runs. In the test, the format string &lt;code&gt;&quot;%0.10f:%04d:%+g:%s:%p:%c:%%\n&quot;&lt;/code&gt; or equivalent is filled 2,000,000 times with output sent to &lt;code&gt;/dev/null&lt;/code&gt;; for further details refer to the &lt;a href=&quot;https://github.com/fmtlib/format-benchmark/raw/master/src/tinyformat-test.cc&quot;&gt;source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;{fmt} is up to 20-30x faster than &lt;code&gt;std::ostringstream&lt;/code&gt; and &lt;code&gt;sprintf&lt;/code&gt; on IEEE754 &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; formatting (&lt;a href=&quot;https://github.com/fmtlib/dtoa-benchmark&quot;&gt;dtoa-benchmark&lt;/a&gt;) and faster than &lt;a href=&quot;https://github.com/google/double-conversion&quot;&gt;double-conversion&lt;/a&gt; and &lt;a href=&quot;https://github.com/ulfjack/ryu&quot;&gt;ryu&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://fmt.dev/unknown_mac64_clang12.0.html&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png&quot; alt=&quot;image&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Compile time and code bloat&lt;/h2&gt; 
&lt;p&gt;The script &lt;a href=&quot;https://github.com/fmtlib/format-benchmark/raw/master/bloat-test.py&quot;&gt;bloat-test.py&lt;/a&gt; from &lt;a href=&quot;https://github.com/fmtlib/format-benchmark&quot;&gt;format-benchmark&lt;/a&gt; tests compile time and code bloat for nontrivial projects. It generates 100 translation units and uses &lt;code&gt;printf()&lt;/code&gt; or its alternative five times in each to simulate a medium-sized project. The resulting executable size and compile time (Apple clang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown in the following tables.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Optimized build (-O3)&lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Compile Time, s&lt;/th&gt; 
   &lt;th&gt;Executable size, KiB&lt;/th&gt; 
   &lt;th&gt;Stripped size, KiB&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;printf&lt;/td&gt; 
   &lt;td&gt;1.6&lt;/td&gt; 
   &lt;td&gt;54&lt;/td&gt; 
   &lt;td&gt;50&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;IOStreams&lt;/td&gt; 
   &lt;td&gt;25.9&lt;/td&gt; 
   &lt;td&gt;98&lt;/td&gt; 
   &lt;td&gt;84&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;fmt 83652df&lt;/td&gt; 
   &lt;td&gt;4.8&lt;/td&gt; 
   &lt;td&gt;54&lt;/td&gt; 
   &lt;td&gt;50&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tinyformat&lt;/td&gt; 
   &lt;td&gt;29.1&lt;/td&gt; 
   &lt;td&gt;161&lt;/td&gt; 
   &lt;td&gt;136&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Boost Format&lt;/td&gt; 
   &lt;td&gt;55.0&lt;/td&gt; 
   &lt;td&gt;530&lt;/td&gt; 
   &lt;td&gt;317&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;{fmt} is fast to compile and is comparable to &lt;code&gt;printf&lt;/code&gt; in terms of per-call binary size (within a rounding error on this system).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Non-optimized build&lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Compile Time, s&lt;/th&gt; 
   &lt;th&gt;Executable size, KiB&lt;/th&gt; 
   &lt;th&gt;Stripped size, KiB&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;printf&lt;/td&gt; 
   &lt;td&gt;1.4&lt;/td&gt; 
   &lt;td&gt;54&lt;/td&gt; 
   &lt;td&gt;50&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;IOStreams&lt;/td&gt; 
   &lt;td&gt;23.4&lt;/td&gt; 
   &lt;td&gt;92&lt;/td&gt; 
   &lt;td&gt;68&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;{fmt} 83652df&lt;/td&gt; 
   &lt;td&gt;4.4&lt;/td&gt; 
   &lt;td&gt;89&lt;/td&gt; 
   &lt;td&gt;85&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tinyformat&lt;/td&gt; 
   &lt;td&gt;24.5&lt;/td&gt; 
   &lt;td&gt;204&lt;/td&gt; 
   &lt;td&gt;161&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Boost Format&lt;/td&gt; 
   &lt;td&gt;36.4&lt;/td&gt; 
   &lt;td&gt;831&lt;/td&gt; 
   &lt;td&gt;462&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;code&gt;libc&lt;/code&gt;, &lt;code&gt;lib(std)c++&lt;/code&gt;, and &lt;code&gt;libfmt&lt;/code&gt; are all linked as shared libraries to compare formatting function overhead only. Boost Format is a header-only library so it doesn&#39;t provide any linkage options.&lt;/p&gt; 
&lt;h2&gt;Running the tests&lt;/h2&gt; 
&lt;p&gt;Please refer to &lt;a href=&quot;https://fmt.dev/latest/get-started/#building-from-source&quot;&gt;Building the library&lt;/a&gt; for instructions on how to build the library and run the unit tests.&lt;/p&gt; 
&lt;p&gt;Benchmarks reside in a separate repository, &lt;a href=&quot;https://github.com/fmtlib/format-benchmark&quot;&gt;format-benchmarks&lt;/a&gt;, so to run the benchmarks you first need to clone this repository and generate Makefiles with CMake:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/fmtlib/format-benchmark.git
$ cd format-benchmark
$ cmake .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can run the speed test:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ make speed-test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or the bloat test:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ make bloat-test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Migrating code&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://clang.llvm.org/extra/clang-tidy/&quot;&gt;clang-tidy&lt;/a&gt; v18 provides the &lt;a href=&quot;https://clang.llvm.org/extra/clang-tidy/checks/modernize/use-std-print.html&quot;&gt;modernize-use-std-print&lt;/a&gt; check that is capable of converting occurrences of &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;fprintf&lt;/code&gt; to &lt;code&gt;fmt::print&lt;/code&gt; if configured to do so. (By default it converts to &lt;code&gt;std::print&lt;/code&gt;.)&lt;/p&gt; 
&lt;h1&gt;Notable projects using this library&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play0ad.com/&quot;&gt;0 A.D.&lt;/a&gt;: a free, open-source, cross-platform real-time strategy game&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ampl/mp&quot;&gt;AMPL/MP&lt;/a&gt;: an open-source library for mathematical programming&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/foundationdb&quot;&gt;Apple&#39;s FoundationDB&lt;/a&gt;: an open-source, distributed, transactional key-value store&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aseprite/aseprite&quot;&gt;Aseprite&lt;/a&gt;: animated sprite editor &amp;amp; pixel art tool&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aviobook.aero/en&quot;&gt;AvioBook&lt;/a&gt;: a comprehensive aircraft operations suite&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://battle.net/&quot;&gt;Blizzard Battle.net&lt;/a&gt;: an online gaming platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://celestia.space/&quot;&gt;Celestia&lt;/a&gt;: real-time 3D visualization of space&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ceph.com/&quot;&gt;Ceph&lt;/a&gt;: a scalable distributed storage system&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ccache.dev/&quot;&gt;ccache&lt;/a&gt;: a compiler cache&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ClickHouse/ClickHouse&quot;&gt;ClickHouse&lt;/a&gt;: an analytical database management system&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.contextvision.com/&quot;&gt;ContextVision&lt;/a&gt;: medical imaging software&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/contour-terminal/contour/&quot;&gt;Contour&lt;/a&gt;: a modern terminal emulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cuauv.org/&quot;&gt;CUAUV&lt;/a&gt;: Cornell University&#39;s autonomous underwater vehicle&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://drake.mit.edu/&quot;&gt;Drake&lt;/a&gt;: a planning, control, and analysis toolbox for nonlinear dynamical systems (MIT)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/envoyproxy/envoy&quot;&gt;Envoy&lt;/a&gt;: C++ L7 proxy and communication bus (Lyft)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fivem.net/&quot;&gt;FiveM&lt;/a&gt;: a modification framework for GTA V&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MengRao/fmtlog&quot;&gt;fmtlog&lt;/a&gt;: a performant fmtlib-style logging library with latency in nanoseconds&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/folly&quot;&gt;Folly&lt;/a&gt;: Facebook open-source library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gemrb.org/&quot;&gt;GemRB&lt;/a&gt;: a portable open-source implementation of Bioware&#39;s Infinity Engine&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://store.steampowered.com/app/1247360/Grand_Mountain_Adventure/&quot;&gt;Grand Mountain Adventure&lt;/a&gt;: a beautiful open-world ski &amp;amp; snowboarding game&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pvpgn/pvpgn-server&quot;&gt;HarpyWar/pvpgn&lt;/a&gt;: Player vs Player Gaming Network with tweaks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kbengine/kbengine&quot;&gt;KBEngine&lt;/a&gt;: an open-source MMOG server engine&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://keypirinha.com/&quot;&gt;Keypirinha&lt;/a&gt;: a semantic launcher for Windows&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://kodi.tv/&quot;&gt;Kodi&lt;/a&gt; (formerly xbmc): home theater software&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://kth.cash/&quot;&gt;Knuth&lt;/a&gt;: high-performance Bitcoin full-node&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/contour-terminal/libunicode/&quot;&gt;libunicode&lt;/a&gt;: a modern C++17 Unicode library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;: relational database management system&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/verona&quot;&gt;Microsoft Verona&lt;/a&gt;: research programming language for concurrent ownership&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;: distributed document database&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/duckie/mongo_smasher&quot;&gt;MongoDB Smasher&lt;/a&gt;: a small tool to generate randomized datasets&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openspaceproject.com/&quot;&gt;OpenSpace&lt;/a&gt;: an open-source astrovisualization framework&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.polserver.com/&quot;&gt;PenUltima Online (POL)&lt;/a&gt;: an MMO server, compatible with most Ultima Online clients&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pytorch/pytorch&quot;&gt;PyTorch&lt;/a&gt;: an open-source machine learning library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.quasardb.net/&quot;&gt;quasardb&lt;/a&gt;: a distributed, high-performance, associative database&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/odygrd/quill&quot;&gt;Quill&lt;/a&gt;: asynchronous low-latency logging library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ravijanjam/qkw&quot;&gt;QKW&lt;/a&gt;: generalizing aliasing to simplify navigation, and execute complex multi-line terminal command sequences&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HunanTV/redis-cerberus&quot;&gt;redis-cerberus&lt;/a&gt;: a Redis cluster proxy&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://vectorized.io/redpanda&quot;&gt;redpanda&lt;/a&gt;: a 10x faster Kafka® replacement for mission-critical systems written in C++&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://rpclib.net/&quot;&gt;rpclib&lt;/a&gt;: a modern C++ msgpack-RPC server and client library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.salesforce.com/analytics-cloud/overview/&quot;&gt;Salesforce Analytics Cloud&lt;/a&gt;: business intelligence software&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.scylladb.com/&quot;&gt;Scylla&lt;/a&gt;: a Cassandra-compatible NoSQL data store that can handle 1 million transactions per second on a single server&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.seastar-project.org/&quot;&gt;Seastar&lt;/a&gt;: an advanced, open-source C++ framework for high-performance server applications on modern hardware&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gabime/spdlog&quot;&gt;spdlog&lt;/a&gt;: super fast C++ logging library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.stellar.org/&quot;&gt;Stellar&lt;/a&gt;: financial platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.touchsurgery.com/&quot;&gt;Touch Surgery&lt;/a&gt;: surgery simulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TrinityCore/TrinityCore&quot;&gt;TrinityCore&lt;/a&gt;: open-source MMORPG framework&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://userver.tech/&quot;&gt;🐙 userver framework&lt;/a&gt;: open-source asynchronous framework with a rich set of abstractions and database drivers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/terminal&quot;&gt;Windows Terminal&lt;/a&gt;: the new Windows terminal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/search?q=fmtlib&amp;amp;type=Code&quot;&gt;More...&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you are aware of other projects using this library, please let me know by &lt;a href=&quot;mailto:victor.zverovich@gmail.com&quot;&gt;email&lt;/a&gt; or by submitting an &lt;a href=&quot;https://github.com/fmtlib/fmt/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Motivation&lt;/h1&gt; 
&lt;p&gt;So why yet another formatting library?&lt;/p&gt; 
&lt;p&gt;There are plenty of methods for doing this task, from standard ones like the printf family of function and iostreams to Boost Format and FastFormat libraries. The reason for creating a new library is that every existing solution that I found either had serious issues or didn&#39;t provide all the features I needed.&lt;/p&gt; 
&lt;h2&gt;printf&lt;/h2&gt; 
&lt;p&gt;The good thing about &lt;code&gt;printf&lt;/code&gt; is that it is pretty fast and readily available being a part of the C standard library. The main drawback is that it doesn&#39;t support user-defined types. &lt;code&gt;printf&lt;/code&gt; also has safety issues although they are somewhat mitigated with &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html&quot;&gt;__attribute__ ((format (printf, ...))&lt;/a&gt; in GCC. There is a POSIX extension that adds positional arguments required for &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;i18n&lt;/a&gt; to &lt;code&gt;printf&lt;/code&gt; but it is not a part of C99 and may not be available on some platforms.&lt;/p&gt; 
&lt;h2&gt;iostreams&lt;/h2&gt; 
&lt;p&gt;The main issue with iostreams is best illustrated with an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::cout &amp;lt;&amp;lt; std::setprecision(2) &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; 1.23456 &amp;lt;&amp;lt; &quot;\n&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which is a lot of typing compared to printf:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;printf(&quot;%.2f\n&quot;, 1.23456);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Matthew Wilson, the author of FastFormat, called this &quot;chevron hell&quot;. iostreams don&#39;t support positional arguments by design.&lt;/p&gt; 
&lt;p&gt;The good part is that iostreams support user-defined types and are safe although error handling is awkward.&lt;/p&gt; 
&lt;h2&gt;Boost Format&lt;/h2&gt; 
&lt;p&gt;This is a very powerful library that supports both &lt;code&gt;printf&lt;/code&gt;-like format strings and positional arguments. Its main drawback is performance. According to various benchmarks, it is much slower than other methods considered here. Boost Format also has excessive build times and severe code bloat issues (see &lt;a href=&quot;https://raw.githubusercontent.com/fmtlib/fmt/master/#benchmarks&quot;&gt;Benchmarks&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;FastFormat&lt;/h2&gt; 
&lt;p&gt;This is an interesting library that is fast, safe and has positional arguments. However, it has significant limitations, citing its author:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Three features that have no hope of being accommodated within the current design are:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Leading zeros (or any other non-space padding)&lt;/li&gt; 
  &lt;li&gt;Octal/hexadecimal encoding&lt;/li&gt; 
  &lt;li&gt;Runtime width/alignment specification&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;It is also quite big and has a heavy dependency, on STLSoft, which might be too restrictive for use in some projects.&lt;/p&gt; 
&lt;h2&gt;Boost Spirit.Karma&lt;/h2&gt; 
&lt;p&gt;This is not a formatting library but I decided to include it here for completeness. As iostreams, it suffers from the problem of mixing verbatim text with arguments. The library is pretty fast, but slower on integer formatting than &lt;code&gt;fmt::format_to&lt;/code&gt; with format string compilation on Karma&#39;s own benchmark, see &lt;a href=&quot;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&quot;&gt;Converting a hundred million integers to strings per second&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;{fmt} is distributed under the MIT &lt;a href=&quot;https://github.com/fmtlib/fmt/raw/master/LICENSE&quot;&gt;license&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Documentation License&lt;/h1&gt; 
&lt;p&gt;The &lt;a href=&quot;https://fmt.dev/latest/syntax/&quot;&gt;Format String Syntax&lt;/a&gt; section in the documentation is based on the one from Python &lt;a href=&quot;https://docs.python.org/3/library/string.html#module-string&quot;&gt;string module documentation&lt;/a&gt;. For this reason, the documentation is distributed under the Python Software Foundation license available in &lt;a href=&quot;https://raw.github.com/fmtlib/fmt/master/doc/python-license.txt&quot;&gt;doc/python-license.txt&lt;/a&gt;. It only applies if you distribute the documentation of {fmt}.&lt;/p&gt; 
&lt;h1&gt;Maintainers&lt;/h1&gt; 
&lt;p&gt;The {fmt} library is maintained by Victor Zverovich (&lt;a href=&quot;https://github.com/vitaut&quot;&gt;vitaut&lt;/a&gt;) with contributions from many other people. See &lt;a href=&quot;https://github.com/fmtlib/fmt/graphs/contributors&quot;&gt;Contributors&lt;/a&gt; and &lt;a href=&quot;https://github.com/fmtlib/fmt/releases&quot;&gt;Releases&lt;/a&gt; for some of the names. Let us know if your contribution is not listed or mentioned incorrectly and we&#39;ll make it right.&lt;/p&gt; 
&lt;h1&gt;Security Policy&lt;/h1&gt; 
&lt;p&gt;To report a security issue, please disclose it at &lt;a href=&quot;https://github.com/fmtlib/fmt/security/advisories/new&quot;&gt;security advisory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project is maintained by a team of volunteers on a reasonable-effort basis. As such, please give us at least &lt;em&gt;90&lt;/em&gt; days to work on a fix before public exposure.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>unitreerobotics/unitree_ros</title>
      <link>https://github.com/unitreerobotics/unitree_ros</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Here are the ROS simulation packages for Unitree robots, You can load robots and joint controllers in Gazebo, so you can perform low-level control (control the torque, position and angular velocity) of the robot joints. Please be aware that the Gazebo simulation cannot do high-level control, namely walking. Aside from these simulation functions, you can also control your real robots in ROS with the &lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros_to_real&quot;&gt;unitree_ros_to_real&lt;/a&gt; packages. For real robots, you can do high-level and low-level control using our ROS packages.&lt;/p&gt; 
&lt;h2&gt;Packages:&lt;/h2&gt; 
&lt;p&gt;Robot description:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/a1_description&quot;&gt;&lt;code&gt;a1_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/aliengo_description&quot;&gt;&lt;code&gt;aliengo_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/aliengoZ1_description&quot;&gt;&lt;code&gt;aliengoZ1_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/b1_description&quot;&gt;&lt;code&gt;b1_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/b2_description&quot;&gt;&lt;code&gt;b2_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/b2w_description&quot;&gt;&lt;code&gt;b2w_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/g1_description&quot;&gt;&lt;code&gt;g1_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/go1_description&quot;&gt;&lt;code&gt;go1_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/go2_description&quot;&gt;&lt;code&gt;go2_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/go2w_description&quot;&gt;&lt;code&gt;go2w_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/h1_2_description&quot;&gt;&lt;code&gt;h1_2_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/h1_description&quot;&gt;&lt;code&gt;h1_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/laikago_description&quot;&gt;&lt;code&gt;laikago_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/tree/master/robots/z1_description&quot;&gt;&lt;code&gt;z1_description&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Robot and joints controller:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;unitree_controller&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;z1_controller&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Simulation related:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;unitree_gazebo&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unitree_legged_control&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Dependencies&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.ros.org/&quot;&gt;ROS&lt;/a&gt; Melodic or ROS Kinetic (has not been tested)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://gazebosim.org/&quot;&gt;Gazebo8&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros_to_real&quot;&gt;unitree_legged_msgs&lt;/a&gt;: &lt;code&gt;unitree_legged_msgs&lt;/code&gt; is a package under &lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros_to_real&quot;&gt;unitree_ros_to_real&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Build&lt;/h1&gt; 
&lt;!-- If you would like to fully compile the `unitree_ros`, please run the following command to install relative packages. --&gt; 
&lt;p&gt;For ROS Melodic:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-get install ros-melodic-controller-interface  ros-melodic-gazebo-ros-control ros-melodic-joint-state-controller ros-melodic-effort-controllers ros-melodic-joint-trajectory-controller
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For ROS Kinetic:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-get install ros-kinetic-controller-manager ros-kinetic-ros-control ros-kinetic-ros-controllers ros-kinetic-joint-state-controller ros-kinetic-effort-controllers ros-kinetic-velocity-controllers ros-kinetic-position-controllers ros-kinetic-robot-controllers ros-kinetic-robot-state-publisher ros-kinetic-gazebo8-ros ros-kinetic-gazebo8-ros-control ros-kinetic-gazebo8-ros-pkgs ros-kinetic-gazebo8-ros-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And open the file &lt;code&gt;unitree_gazebo/worlds/stairs.world&lt;/code&gt;. At the end of the file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;include&amp;gt;
    &amp;lt;uri&amp;gt;model:///home/unitree/catkin_ws/src/unitree_ros/unitree_gazebo/worlds/building_editor_models/stairs&amp;lt;/uri&amp;gt;
&amp;lt;/include&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please change the path of &lt;code&gt;building_editor_models/stairs&lt;/code&gt; to the real path on your PC.&lt;/p&gt; 
&lt;p&gt;Then you can use catkin_make to build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd ~/catkin_ws
catkin_make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you face a dependency problem, you can just run &lt;code&gt;catkin_make&lt;/code&gt; again.&lt;/p&gt; 
&lt;h1&gt;Detail of Packages&lt;/h1&gt; 
&lt;h2&gt;unitree_legged_control:&lt;/h2&gt; 
&lt;p&gt;It contains the joints controllers for Gazebo simulation, which allows users to control joints with position, velocity and torque. Refer to &quot;&lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/raw/master/unitree_controller/src/servo.cpp&quot;&gt;unitree_ros/unitree_controller/src/servo.cpp&lt;/a&gt;&quot; for joint control examples in different modes.&lt;/p&gt; 
&lt;h2&gt;The description of robots:&lt;/h2&gt; 
&lt;p&gt;Namely the description of Go1, A1, Aliengo and Laikago. Each package includes mesh, urdf and xacro files of robot. Take Laikago for example, you can check the model in Rviz by:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;roslaunch laikago_description laikago_rviz.launch
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;unitree_gazebo &amp;amp; unitree_controller:&lt;/h2&gt; 
&lt;p&gt;You can launch the Gazebo simulation with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;roslaunch unitree_gazebo normal.launch rname:=a1 wname:=stairs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where the &lt;code&gt;rname&lt;/code&gt; means robot name, which can be &lt;code&gt;laikago&lt;/code&gt;, &lt;code&gt;aliengo&lt;/code&gt;, &lt;code&gt;a1&lt;/code&gt; or &lt;code&gt;go1&lt;/code&gt;. The &lt;code&gt;wname&lt;/code&gt; means world name, which can be &lt;code&gt;earth&lt;/code&gt;, &lt;code&gt;space&lt;/code&gt; or &lt;code&gt;stairs&lt;/code&gt;. And the default value of &lt;code&gt;rname&lt;/code&gt; is &lt;code&gt;laikago&lt;/code&gt;, while the default value of &lt;code&gt;wname&lt;/code&gt; is &lt;code&gt;earth&lt;/code&gt;. In Gazebo, the robot should be lying on the ground with joints not activated.&lt;/p&gt; 
&lt;h3&gt;1. Stand controller&lt;/h3&gt; 
&lt;p&gt;After launching the gazebo simulation, you can start to control the robot:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rosrun unitree_controller unitree_servo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And you can add external disturbances, like a push or a kick:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rosrun unitree_controller unitree_external_force
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Position and pose publisher&lt;/h3&gt; 
&lt;p&gt;Here we demonstrated how to control the position and pose of robot without a controller, which should be useful in SLAM or visual development.&lt;/p&gt; 
&lt;p&gt;Then run the position and pose publisher in another terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rosrun unitree_controller unitree_move_kinetic
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The robot will turn around the origin, which is the movement under the world coordinate frame. And inside of the source file &lt;a href=&quot;https://github.com/unitreerobotics/unitree_ros/raw/master/unitree_controller/src/move_publisher.cpp&quot;&gt;move_publisher.cpp&lt;/a&gt;, we also provide the method to move using the robot coordinate frame. You can change the value of &lt;code&gt;def_frame&lt;/code&gt; to &lt;code&gt;coord::ROBOT&lt;/code&gt; and run the catkin_make again, then the &lt;code&gt;unitree_move_publisher&lt;/code&gt; will move robot under its own coordinate frame.&lt;/p&gt; 
&lt;h2&gt;z1_controller&lt;/h2&gt; 
&lt;p&gt;You can launch the z1 Gazebo simulation with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;roslaunch unitree_gazebo z1.launch
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After launching the gazebo simulation, you can start to control the z1 robot by z1_sdk.&lt;br&gt; see &lt;a href=&quot;https://dev-z1.unitree.com&quot;&gt;z1_documentation&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>opencv/opencv</title>
      <link>https://github.com/opencv/opencv</link>
      <description>&lt;p&gt;Open Source Computer Vision Library&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;OpenCV: Open Source Computer Vision Library&lt;/h2&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Homepage: &lt;a href=&quot;https://opencv.org&quot;&gt;https://opencv.org&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Courses: &lt;a href=&quot;https://opencv.org/courses&quot;&gt;https://opencv.org/courses&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Docs: &lt;a href=&quot;https://docs.opencv.org/4.x/&quot;&gt;https://docs.opencv.org/4.x/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Q&amp;amp;A forum: &lt;a href=&quot;https://forum.opencv.org&quot;&gt;https://forum.opencv.org&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;previous forum (read only): &lt;a href=&quot;http://answers.opencv.org&quot;&gt;http://answers.opencv.org&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Issue tracking: &lt;a href=&quot;https://github.com/opencv/opencv/issues&quot;&gt;https://github.com/opencv/opencv/issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Additional OpenCV functionality: &lt;a href=&quot;https://github.com/opencv/opencv_contrib&quot;&gt;https://github.com/opencv/opencv_contrib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Donate to OpenCV: &lt;a href=&quot;https://opencv.org/support/&quot;&gt;https://opencv.org/support/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Please read the &lt;a href=&quot;https://github.com/opencv/opencv/wiki/How_to_contribute&quot;&gt;contribution guidelines&lt;/a&gt; before starting work on a pull request.&lt;/p&gt; 
&lt;h4&gt;Summary of the guidelines:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;One pull request per issue;&lt;/li&gt; 
 &lt;li&gt;Choose the right base branch;&lt;/li&gt; 
 &lt;li&gt;Include tests and documentation;&lt;/li&gt; 
 &lt;li&gt;Clean up &quot;oops&quot; commits before submitting;&lt;/li&gt; 
 &lt;li&gt;Follow the &lt;a href=&quot;https://github.com/opencv/opencv/wiki/Coding_Style_Guide&quot;&gt;coding style guide&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Additional Resources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://form.jotform.com/233105358823151&quot;&gt;Submit your OpenCV-based project&lt;/a&gt; for inclusion in Community Friday on opencv.org&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://youtube.com/@opencvofficial&quot;&gt;Subscribe to the OpenCV YouTube Channel&lt;/a&gt; featuring OpenCV Live, an hour-long streaming show&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://linkedin.com/company/opencv/&quot;&gt;Follow OpenCV on LinkedIn&lt;/a&gt; for daily posts showing the state-of-the-art in computer vision &amp;amp; AI&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://form.jotform.com/232745316792159&quot;&gt;Apply to be an OpenCV Volunteer&lt;/a&gt; to help organize events and online campaigns as well as amplify them&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://mastodon.social/@opencv&quot;&gt;Follow OpenCV on Mastodon&lt;/a&gt; in the Fediverse&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/opencvlive&quot;&gt;Follow OpenCV on Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://opencv.ai&quot;&gt;OpenCV.ai&lt;/a&gt;: Computer Vision and AI development services from the OpenCV team.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA/cutlass</title>
      <link>https://github.com/NVIDIA/cutlass</link>
      <description>&lt;p&gt;CUDA Templates for Linear Algebra Subroutines&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/gemm-hierarchy-with-epilogue-no-labels.png&quot; alt=&quot;ALT&quot; title=&quot;Complete CUDA GEMM decomposition&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;CUTLASS 3.8.0&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;CUTLASS 3.8.0 - January 2025&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;CUTLASS is a collection of CUDA C++ template abstractions for implementing high-performance matrix-matrix multiplication (GEMM) and related computations at all levels and scales within CUDA. It incorporates strategies for hierarchical decomposition and data movement similar to those used to implement cuBLAS and cuDNN. CUTLASS decomposes these &quot;moving parts&quot; into reusable, modular software components abstracted by C++ template classes. Primitives for different levels of a conceptual parallelization hierarchy can be specialized and tuned via custom tiling sizes, data types, and other algorithmic policy. The resulting flexibility simplifies their use as building blocks within custom kernels and applications.&lt;/p&gt; 
&lt;p&gt;To support a wide variety of applications, CUTLASS provides extensive support for mixed-precision computations, providing specialized data-movement and multiply-accumulate abstractions for FP64, FP32, TF32, FP16, BF16, &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/27_ampere_3xtf32_fast_accurate_tensorop_gemm&quot;&gt;FP32 emulation via tensor core instruction&lt;/a&gt;, 8b floating point types (e5m2 and e4m3), block scaled data types (NVIDIA NVFP4 and OCP standard MXFP4, MXFP6, MXFP8), narrow integer types (4 and 8b signed and unsigned integers), and binary 1b data types (where architectures allow for the native support of such data types). CUTLASS demonstrates optimal matrix multiply operations targeting the programmable, high-throughput &lt;em&gt;Tensor Cores&lt;/em&gt; implemented by NVIDIA&#39;s Volta, Turing, Ampere, Ada, Hopper, and Blackwell architectures.&lt;/p&gt; 
&lt;p&gt;In addition to GEMMs, CUTLASS implements high-performance convolution via the implicit GEMM algorithm. Implicit GEMM is the formulation of a convolution operation as a GEMM thereby taking advantage of CUTLASS&#39;s modular GEMM pipeline. This allows CUTLASS to build convolutions by reusing highly-optimized GEMM components.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&quot;&gt;Quick Start Guide&lt;/a&gt; to get started quickly.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&quot;&gt;functionality docs&lt;/a&gt; for a more comprehensive list of kernel level features, data types, instructions, and minimum supported by CUTLASS on each GPU architecture.&lt;/p&gt; 
&lt;h1&gt;What&#39;s New in CUTLASS 3.8&lt;/h1&gt; 
&lt;p&gt;CUTLASS 3.8 is the first release that supports the NVIDIA Blackwell SM100 architecture. For a background on Blackwell&#39;s new features, please consult the PTX documentation for CUDA 12.8.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for new CuTe building blocks specifically for Blackwell SM100 architecture: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/mma_traits_sm100.hpp&quot;&gt;5th generation Blackwell Tensor Core instructions (TCGen05)&lt;/a&gt; via CuTe MMA atoms.&lt;/li&gt; 
   &lt;li&gt;Extensions to &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100_tma.hpp&quot;&gt;Tensor Memory Accelerator&lt;/a&gt; via CuTe Copy atoms.&lt;/li&gt; 
   &lt;li&gt;Exposure of Blackwell&#39;s new tensor memory (note: distinct from TMA) as &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/pointer.hpp&quot;&gt;&lt;code&gt;tmem&lt;/code&gt;&lt;/a&gt; across CuTe as a first class data locale.&lt;/li&gt; 
   &lt;li&gt;Exposure of &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100.hpp&quot;&gt;&lt;code&gt;tmem-&amp;gt;rmem&lt;/code&gt;, &lt;code&gt;rmem-&amp;gt;tmem&lt;/code&gt; and &lt;code&gt;smem-&amp;gt;tmem data movement instructions&lt;/code&gt;&lt;/a&gt; as copy atoms in CuTe.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100.hpp&quot;&gt;&lt;code&gt;make_tmem_copy()&lt;/code&gt;&lt;/a&gt; utility method to ease creation of tiled copies for tmem copy atoms.&lt;/li&gt; 
   &lt;li&gt;Support for &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cute/atom/copy_traits_sm100.hpp&quot;&gt;new variants of LDSM on Blackwell&lt;/a&gt; via CuTe Copy atoms.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Support for new CUTLASS building blocks specifically for Blackwell SM100 architecture: 
  &lt;ul&gt; 
   &lt;li&gt;Various narrow precision &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/exmy_base.h&quot;&gt;FP4, FP6, and FP8&lt;/a&gt; formats as well as their &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/float_subbyte.h&quot;&gt;block-scaled variants NVFP4, MXFP4, MXFP6, and MXFP8&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/pipeline/sm100_pipeline.hpp&quot;&gt;Pipelines that implement Blackwell specific synchronization&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/cluster_launch.hpp&quot;&gt;Cluster launch control API supporting preferred and fallback cluster shapes&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Data types including NVFP4, MXFP4, MXFP6, and MXFP8 and all their supported element and scale factor types.&lt;/li&gt; 
   &lt;li&gt;Tile schedulers using &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/blackwell_cluster_launch_control.md&quot;&gt;Blackwell&#39;s Cluster Launch Control (CLC) feature&lt;/a&gt; to implement dynamic persistence scheduling for &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/kernel/sm100_tile_scheduler.hpp&quot;&gt;GEMMs&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/kernel/sm100_tile_scheduler_stream_k.hpp&quot;&gt;stream-K&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Extensions to testbeds and reference check code for unit tests and CUTLASS profiler.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Full support for Blackwell SM100 kernels in CUTLASS 3.x API: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/kernel/sm100_gemm_tma_warpspecialized.hpp&quot;&gt;Blackwell specific kernel layers&lt;/a&gt; that 
    &lt;ul&gt; 
     &lt;li&gt;Implement a new warp-specialization recipe tuned specifically for Blackwell SM100 architecture.&lt;/li&gt; 
     &lt;li&gt;Leverage all the new features such as CLC based tile scheduling, preferred cluster, and TMEM based double buffering of accumulators.&lt;/li&gt; 
     &lt;li&gt;Support stream-K load balancing for all kernel types everywhere via composable scheduler support.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Blackwell collective mainloops that target the TCGen05 MMA instructions (both SS and TS) for 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_mma_warpspecialized.hpp&quot;&gt;Non-block scaled data types without support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_mma_array_warpspecialized.hpp&quot;&gt;Non-block scaled data types with support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_blockscaled_mma_warpspecialized.hpp&quot;&gt;Block scaled data types without support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/collective/sm100_blockscaled_mma_array_warpspecialized.hpp&quot;&gt;Block scaled data types with support for pointer array and grouped GEMM with TMA&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Blackwell &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/conv/collective/sm100_implicit_gemm_umma_warpspecialized.hpp&quot;&gt;collective mainloop for convolution kernels&lt;/a&gt; supporting non-block scaled data types for fprop, dgrad, and wgrad.&lt;/li&gt; 
   &lt;li&gt;New &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/gemm/dispatch_policy.hpp&quot;&gt;GEMM&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/conv/dispatch_policy.hpp&quot;&gt;convolution&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/epilogue/dispatch_policy.hpp&quot;&gt;epilogue&lt;/a&gt; dispatch policies for collectives, kernel layers, and builders.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/include/cutlass/epilogue/collective/sm100_epilogue_tma_warpspecialized.hpp&quot;&gt;Blackwell epilogue that supports loading accumulators from &lt;code&gt;tmem&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;&quot;&gt;full set of EVT fusions&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CUTLASS library and profiler integration for block scaled data types for kernel emission, profiling, and verification. 
  &lt;ul&gt; 
   &lt;li&gt;Support for preferred and fallback cluster shapes via profiler command line arguments parsing to set dynamic cluster shapes.&lt;/li&gt; 
   &lt;li&gt;Support for dynamic datatypes by parsing profiler via profiler command line arguments parsing to set dynamic datatype setting in TCGen05 MMA instruction descriptors.&lt;/li&gt; 
   &lt;li&gt;Support for mixed input GEMM kernels on Hopper in the profiler.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;New CUTLASS profiler flag &lt;code&gt;use-cuda-graphs&lt;/code&gt; to reduce overheads when benchmarking launch-bound kernels.&lt;/li&gt; 
 &lt;li&gt;A new 3.x version of grouped GEMM to the CUTLASS library and generates kernels for Hopper and Blackwell. Now grouped GEMM support is enabled in the CUTLASS profiler (&lt;code&gt;./cutlass_profiler --operation=GroupedGemm --help&lt;/code&gt; for details).&lt;/li&gt; 
 &lt;li&gt;Set of examples that demonstrate the usage of the 3.x API for targeting Blackwell SM100 architecture: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/70_blackwell_gemm/&quot;&gt;Basic FP16 and FP8 GEMMs with minimal changes from Hopper examples&lt;/a&gt;, demonstrating ease of migration for off the shelf kernels using the 3.x collective builder API.&lt;/li&gt; 
   &lt;li&gt;GEMM with &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/71_blackwell_gemm_with_collective_builder/71_blackwell_gemm_with_collective_builder.cu&quot;&gt;opt-in collective builder schedules showcasing available recipes&lt;/a&gt; for Blackwell.&lt;/li&gt; 
   &lt;li&gt;Block scaled data type GEMMs targeting Blackwell&#39;s native block scaled Tensor Cores: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/72_blackwell_narrow_precision_gemm/72a_blackwell_nvfp4_bf16_gemm.cu&quot;&gt;NVFP4 inputs with BF16 output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/72_blackwell_narrow_precision_gemm/72b_blackwell_nvfp4_nvfp4_gemm.cu&quot;&gt;NVFP4 inputs with NVFP4 output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/72_blackwell_narrow_precision_gemm/72c_blackwell_mixed_mxfp8_bf16_gemm.cu&quot;&gt;Mixed MXFP8 and MXFP6 inputs with BF16 output&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;GEMM example demonstrating &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/73_blackwell_gemm_preferred_cluster/blackwell_gemm_preferred_cluster.cu&quot;&gt;Blackwell&#39;s new preferred cluster support via dynamic cluster shapes&lt;/a&gt; for increased occupancy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/74_blackwell_gemm_streamk/blackwell_gemm_streamk.cu&quot;&gt;GEMM with CLC based StreamK scheduler for load balancing&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Grouped GEMM for &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/75_blackwell_grouped_gemm/75_blackwell_grouped_gemm.cu&quot;&gt;vanilla FP8 data inputs&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/75_blackwell_grouped_gemm/75_blackwell_grouped_gemm_block_scaled.cu&quot;&gt;NVFP4 block scaled inputs&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Convolution kernels for &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/76_blackwell_conv/76_blackwell_conv_fprop.cu&quot;&gt;fprop&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/76_blackwell_conv/76_blackwell_conv_dgrad.cu&quot;&gt;dgrad&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/76_blackwell_conv/76_blackwell_conv_wgrad.cu&quot;&gt;wgrad&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/77_blackwell_fmha/77_blackwell_fmha.cu&quot;&gt;Fused multi-head attention fprop kernel&lt;/a&gt; supporting fp16/bf16/fp8 data types across head dims of 32,64, and 128.&lt;/li&gt; 
   &lt;li&gt;A new BF16x9 GEMM &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/78_blackwell_emulated_bf16x9_gemm/78_blackwell_emulated_bf16x9_gemm.cu&quot;&gt;kernel&lt;/a&gt; that emulates FP32 GEMM (SGEMM) using BF16 operations.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Set of examples that demonstrate the usage of the 3.x API for targeting Hopper architecture: 
  &lt;ul&gt; 
   &lt;li&gt;A set of new &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/69_hopper_mixed_dtype_grouped_gemm/&quot;&gt;Hopper grouped GEMM kernels&lt;/a&gt; that support mixed A and B datatypes.&lt;/li&gt; 
   &lt;li&gt;A new &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples/67_hopper_fp8_warp_specialized_gemm_with_blockwise_scaling/67_hopper_fp8_warp_specialized_gemm_with_groupwise_scaling.cu&quot;&gt;Hopper FP8 GEMM with groupwise scaling&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Documentation updates: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md#instantiating-a-blackwell-gemm-kernel&quot;&gt;Quickstart - instantiating a Blackwell block-scaled GEMM&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Detailed &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/blackwell_functionality.md&quot;&gt;Blackwell block-scaled GEMM functionality documentation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;A new &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&quot;&gt;functionality documentation&lt;/a&gt; specifically for 3.x API comprehensively documenting all supported kernel types, data types, kernel features, minimum CUDA tookit support etc for 3.x supported architectures.&lt;/li&gt; 
   &lt;li&gt;Updates to &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/README.md#compatibility&quot;&gt;compatibility&lt;/a&gt; section regarding supported compilers, operating systems, CUDA Toolkits, Hardware Architectures, and &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/README.md#Target-Architecture&quot;&gt;Target Architecture&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: CUTLASS 3.x builds are known to be down on Windows platforms for all CUDA toolkits. CUTLASS team is working on a fix.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; for details of all past releases and updates.&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Performance&lt;/h1&gt; 
&lt;p&gt;CUTLASS primitives are very efficient. When used to construct device-wide GEMM kernels, they exhibit nearly optimal utilization of peak theoretical throughput. The figure below shows CUTLASS 3.8&#39;s performance as a % of theoretical peak utilization on various input and output data types when run on NVIDIA Blackwell SM100 architecture GPU.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/cutlass-3.8-blackwell-gemm-peak-performance.svg?sanitize=true&quot;&gt;&lt;/p&gt; 
&lt;p&gt;The two figures below show the continual CUTLASS performance improvements on an &lt;a href=&quot;https://www.nvidia.com/en-us/data-center/h100/&quot;&gt;NVIDIA H100&lt;/a&gt; (NVIDIA Hopper architecture) since CUTLASS 3.1. CUTLASS 3.5.1 was compiled with the &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;CUDA 12.5u1 Toolkit&lt;/a&gt;. Tensor Core operations are implemented using CUDA&#39;s &lt;a href=&quot;https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-instructions-mma&quot;&gt;mma&lt;/a&gt; and &lt;a href=&quot;https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#asynchronous-warpgroup-level-matrix-instructions&quot;&gt;wgmma&lt;/a&gt; instructions.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/cutlass-3.5.1-gemm-peak-performance.png&quot;&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/images/cutlass-3.5.1-gemm-peak-performance-fp8.png&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;CuTe&lt;/h1&gt; 
&lt;p&gt;CUTLASS 3.0 introduced a new core library, CuTe, to describe and manipulate tensors of threads and data. CuTe is a collection of C++ CUDA template abstractions for defining and operating on hierarchically multidimensional layouts of threads and data. CuTe provides &lt;code&gt;Layout&lt;/code&gt; and &lt;code&gt;Tensor&lt;/code&gt; objects that compactly package the type, shape, memory space, and layout of data, while performing the complicated indexing for the user. This lets programmers focus on the logical descriptions of their algorithms while CuTe does the mechanical bookkeeping for them. With these tools, we can quickly design, implement, and modify all dense linear algebra operations.&lt;/p&gt; 
&lt;p&gt;The core abstractions of CuTe are hierarchically multidimensional layouts which can be composed with data arrays to represent tensors. The representation of layouts is powerful enough to represent nearly everything we need to implement efficient dense linear algebra. Layouts can also be combined and manipulated via functional composition, on which we build a large set of common operations such as tiling and partitioning.&lt;/p&gt; 
&lt;p&gt;CUTLASS 3.0 and beyond adopts CuTe throughout the GEMM hierarchy in its templates. This greatly simplifies the design and improves code composability and readability. More documentation specific to CuTe can be found in its &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/cute/00_quickstart.md&quot;&gt;dedicated documentation directory&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Compatibility&lt;/h1&gt; 
&lt;p&gt;Minimum requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Architecture: Volta (compute capability 7.0)&lt;/li&gt; 
 &lt;li&gt;Compiler: Must support at least C++17&lt;/li&gt; 
 &lt;li&gt;CUDA Toolkit version: 11.4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CUTLASS requires a C++17 host compiler and performs best when built with the &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;&lt;strong&gt;CUDA 12.8 Toolkit&lt;/strong&gt;&lt;/a&gt;. It is also compatible with CUDA 11.4, CUDA 11.5, CUDA 11.6, CUDA 11.7, CUDA 11.8, and all other CUDA 12.x versions.&lt;/p&gt; 
&lt;h2&gt;Operating Systems&lt;/h2&gt; 
&lt;p&gt;We have tested the following environments.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;Operating System&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;Compiler&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu 18.04&lt;/td&gt; 
   &lt;td&gt;GCC 7.5.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu 20.04&lt;/td&gt; 
   &lt;td&gt;GCC 10.3.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu 22.04&lt;/td&gt; 
   &lt;td&gt;GCC 11.2.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Note: GCC 8.5.0 has known regressions regarding fold expressions and overloaded operators. Using GCC 7.5.0 or (preferred) GCC &amp;gt;= 9 is recommended.&lt;/p&gt; 
&lt;p&gt;Note: CUTLASS 3.x builds are known to be down on Windows platforms for all CUDA toolkits. CUTLASS team is working on a fix.&lt;/p&gt; 
&lt;h2&gt;Hardware&lt;/h2&gt; 
&lt;p&gt;CUTLASS runs successfully on the following NVIDIA GPUs, and it is expected to be efficient on Volta, Turing, Ampere, Ada, and Hopper architecture based NVIDIA GPUs.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;GPU&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;CUDA Compute Capability&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;Minimum CUDA Toolkit Required by CUTLASS-3&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA V100 Tensor Core GPU&lt;/td&gt; 
   &lt;td&gt;7.0&lt;/td&gt; 
   &lt;td&gt;11.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA TitanV&lt;/td&gt; 
   &lt;td&gt;7.0&lt;/td&gt; 
   &lt;td&gt;11.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA GeForce RTX 20x0 series&lt;/td&gt; 
   &lt;td&gt;7.5&lt;/td&gt; 
   &lt;td&gt;11.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA T4&lt;/td&gt; 
   &lt;td&gt;7.5&lt;/td&gt; 
   &lt;td&gt;11.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA A100 Tensor Core GPU&lt;/td&gt; 
   &lt;td&gt;8.0&lt;/td&gt; 
   &lt;td&gt;11.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA A10&lt;/td&gt; 
   &lt;td&gt;8.6&lt;/td&gt; 
   &lt;td&gt;11.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA GeForce RTX 30x0 series&lt;/td&gt; 
   &lt;td&gt;8.6&lt;/td&gt; 
   &lt;td&gt;11.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA GeForce RTX 40x0 series&lt;/td&gt; 
   &lt;td&gt;8.9&lt;/td&gt; 
   &lt;td&gt;11.8&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA L40&lt;/td&gt; 
   &lt;td&gt;8.9&lt;/td&gt; 
   &lt;td&gt;11.8&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA H100 Tensor Core GPU&lt;/td&gt; 
   &lt;td&gt;9.0&lt;/td&gt; 
   &lt;td&gt;11.8&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA H200 Tensor Core GPU&lt;/td&gt; 
   &lt;td&gt;9.0&lt;/td&gt; 
   &lt;td&gt;11.8&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NVIDIA B200 Tensor Core GPU&lt;/td&gt; 
   &lt;td&gt;10.0&lt;/td&gt; 
   &lt;td&gt;12.8&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Target Architecture&lt;/h2&gt; 
&lt;p&gt;In general, PTX code generated for one target architecture can be run on future architectures (i.e., it is forward compatible). However, CUDA 12.0 introduced the concept of &quot;architecture-accelerated features&quot; whose PTX does not have forward compatibility guarantees. Several Hopper and Blackwell PTX instructions fall under this category of architecture-accelerated features, and thus require a &lt;code&gt;sm_90a&lt;/code&gt; or &lt;code&gt;sm100a&lt;/code&gt; target architecture (note the &quot;a&quot; appended). For more details on this and other architecture-accelerated instructions, please refer to the &lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#feature-availability&quot;&gt;CUDA Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The target architecture information is passed on to CUTLASS via the cmake flag &lt;code&gt;CUTLASS_NVCC_ARCHS&lt;/code&gt;. In order to maximize performance on Hopper GH100, users are required to build CUTLASS with &lt;code&gt;90a&lt;/code&gt; as the target architecture. If a user accidentally builds a kernel which uses SM90a features (e.g. Hopper Tensor Core Instructions), using the SM90 target (note the lack of &quot;a&quot;), with either CUDA Toolkit 12 or 11.8, the kernel is expected to fail with a runtime error.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake .. -DCUTLASS_NVCC_ARCHS=&quot;90a&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake .. -DCUTLASS_NVCC_ARCHS=&quot;100a&quot; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: The NVIDIA Blackwell SM100 architecture used in the datacenter products has a different compute capability than the one underpinning NVIDIA Blackwell GeForce RTX 50 series GPUs. As a result, kernels compiled for Blackwell SM100 architecture with arch conditional features (using &lt;code&gt;sm100a&lt;/code&gt;) are not compatible with RTX 50 series GPUs.&lt;/p&gt; 
&lt;p&gt;Please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&quot;&gt;functionality documentation&lt;/a&gt; for details on which kernels require which target architectures.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;CUTLASS is described in the following documents and the accompanying &lt;a href=&quot;https://nvidia.github.io/cutlass&quot;&gt;Doxygen documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&quot;&gt;Quick Start Guide&lt;/a&gt; - basics of building and running CUTLASS&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/functionality.md&quot;&gt;Functionality&lt;/a&gt; - summarizes functionality available in CUTLASS&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/efficient_gemm.md&quot;&gt;Efficient GEMM in CUDA&lt;/a&gt; - describes how GEMM kernels may be implemented efficiently in CUDA&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/cutlass_3x_design.md&quot;&gt;CUTLASS 3.x Design&lt;/a&gt; - describes the CUTLASS 3.x design, its benefits, and how CuTe enables us to write much more composable components&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/gemm_api_3x.md&quot;&gt;GEMM API 3.x&lt;/a&gt; - describes the CUTLASS 3.x GEMM model and C++ template concepts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/gemm_api.md&quot;&gt;GEMM API 2.x&lt;/a&gt; - describes the CUTLASS 2.x GEMM model and C++ template concepts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/implicit_gemm_convolution.md&quot;&gt;Implicit GEMM Convolution&lt;/a&gt; - describes 2-D and 3-D convolution in CUTLASS&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/code_organization.md&quot;&gt;Code Organization&lt;/a&gt; - describes the organization and contents of the CUTLASS project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/terminology.md&quot;&gt;Terminology&lt;/a&gt; - describes terms used in the code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/programming_guidelines.md&quot;&gt;Programming Guidelines&lt;/a&gt; - guidelines for writing efficient modern CUDA C++&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/fundamental_types.md&quot;&gt;Fundamental types&lt;/a&gt; - describes basic C++ classes used in CUTLASS to represent numeric quantities and arrays&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/layout.md&quot;&gt;Layouts&lt;/a&gt; - describes layouts of matrices and tensors in memory&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/tile_iterator_concept.md&quot;&gt;Tile Iterators&lt;/a&gt; - describes C++ concepts for iterating over tiles of matrices in memory&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/profiler.md&quot;&gt;CUTLASS Profiler&lt;/a&gt; - command-line driven profiling application&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/utilities.md&quot;&gt;CUTLASS Utilities&lt;/a&gt; - additional templates used to facilitate rapid development&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/dependent_kernel_launch.md&quot;&gt;Dependent kernel launch&lt;/a&gt; - describes a new feature in Hopper which allows overlapping dependent kernels in the same stream, and how it is used in CUTLASS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;p&gt;We have also described the structure of an efficient GEMM in our talk at the &lt;a href=&quot;http://on-demand.gputechconf.com/gtc/2018/presentation/s8854-cutlass-software-primitives-for-dense-linear-algebra-at-all-levels-and-scales-within-cuda.pdf&quot;&gt;GPU Technology Conference 2018&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/on-demand/session/gtcsiliconvalley2018-s8854/&quot;&gt;CUTLASS: Software Primitives for Dense Linear Algebra at All Levels and Scales within CUDA&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/on-demand/session/gtcsj20-s21745/&quot;&gt;Developing CUDA Kernels to Push Tensor Cores to the Absolute Limit on NVIDIA A100&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/on-demand/session/gtcspring21-s31883/&quot;&gt;Accelerating Convolution with Tensor Cores in CUTLASS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/on-demand/session/gtcspring22-s41996/&quot;&gt;Accelerating Backward Data Gradient by Increasing Tensor Core Utilization in CUTLASS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/on-demand/session/gtcfall22-a41131/&quot;&gt;CUTLASS: Python API, Enhancements, and NVIDIA Hopper&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Building CUTLASS&lt;/h1&gt; 
&lt;p&gt;CUTLASS is a header-only template library and does not need to be built to be used by other projects. Client applications should target CUTLASS&#39;s &lt;code&gt;include/&lt;/code&gt; directory in their include paths.&lt;/p&gt; 
&lt;p&gt;CUTLASS unit tests, examples, and utilities can be build with CMake. The minimum version of CMake is given in the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&quot;&gt;Quickstart guide&lt;/a&gt;. Make sure the &lt;code&gt;CUDACXX&lt;/code&gt; environment variable points to NVCC in the CUDA Toolkit installed on your system.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ export CUDACXX=${CUDA_INSTALL_PATH}/bin/nvcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a build directory within the CUTLASS project, then run CMake. By default CUTLASS will build kernels for CUDA architecture versions 5.0, 6.0, 6.1, 7.0, 7.5, 8.0, 8.6, 8.9, and 9.0. To reduce compile time you can specify the architectures to build CUTLASS for by changing the CMake configuration setting &lt;code&gt;CUTLASS_NVCC_ARCHS&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mkdir build &amp;amp;&amp;amp; cd build

$ cmake .. -DCUTLASS_NVCC_ARCHS=80               # compiles for NVIDIA&#39;s Ampere Architecture
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From the &lt;code&gt;build/&lt;/code&gt; directory, compile and run the CUTLASS unit tests by building the target &lt;code&gt;test_unit&lt;/code&gt; with make.&lt;/p&gt; 
&lt;p&gt;The unit tests are organized as several binaries mirroring the top-level namespaces of CUTLASS, and they may be executed in parallel via make&#39;s &lt;code&gt;-j&lt;/code&gt; command line argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ make test_unit -j
...
...
...
[----------] Global test environment tear-down
[==========] 946 tests from 57 test cases ran. (10812 ms total)
[  PASSED  ] 946 tests.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All tests should pass on supported platforms, though the exact number of tests may vary over time.&lt;/p&gt; 
&lt;h1&gt;Project Structure&lt;/h1&gt; 
&lt;p&gt;CUTLASS is arranged as a header-only library along with Utilities, Tools, Examples, and unit tests. &lt;a href=&quot;https://nvidia.github.io/cutlass&quot;&gt;Doxygen documentation&lt;/a&gt; provides a complete list of files, classes, and template concepts defined in the CUTLASS project.&lt;/p&gt; 
&lt;p&gt;A detailed explanation of the source code organization may be found in the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/code_organization.md&quot;&gt;CUTLASS documentation&lt;/a&gt;, but several main components are summarized below.&lt;/p&gt; 
&lt;h2&gt;CUTLASS Template Library&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;include/                     # client applications should target this directory in their build&#39;s include paths

  cutlass/                   # CUDA Templates for Linear Algebra Subroutines and Solvers - headers only

    arch/                    # direct exposure of architecture features (including instruction-level GEMMs)

    conv/                    # code specialized for convolution

    epilogue/                # code specialized for the epilogue of gemm/convolution

    gemm/                    # code specialized for general matrix product computations

    layout/                  # layout definitions for matrices, tensors, and other mathematical objects in memory

    platform/                # CUDA-capable Standard Library components

    reduction/               # bandwidth-limited reduction kernels that do not fit the &quot;gemm&quot; model

    thread/                  # simt code that can be performed within a CUDA thread
    
    transform/               # code specialized for layout, type, and domain transformations

    *                        # core vocabulary types, containers, and basic numeric operations

  cute/                      # CuTe Layout, layout algebra, MMA/Copy atoms, tiled MMA/Copy

    algorithm/               # Definitions of core operations such as copy, gemm, and operations on cute::tuples

    arch/                    # Bare bones PTX wrapper structs for copy and math instructions

    atom/                    # Meta-information either link to or built from arch/ operators

      mma_atom.hpp           # cute::Mma_Atom and cute::TiledMma

      copy_atom.hpp          # cute::Copy_Atom and cute::TiledCopy

      *sm*.hpp               # Arch specific meta-information for copy and math operations

    *                        # Core library types such as Shape, Stride, Layout, Tensor, and associated operations

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CUTLASS SDK Examples&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/examples&quot;&gt;CUTLASS SDK examples&lt;/a&gt; apply CUTLASS templates to implement basic computations.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;tools/
  library/                   # CUTLASS Instance Library - contains instantiations of all supported CUTLASS templates
    include/
      cutlass/
        library/

  profiler/                  # CUTLASS Profiler         - command-line utility for executing operations in the
                             #                            CUTLASS Library
  
  util/                      # CUTLASS Utilities        - contains numerous helper classes for
    include/                 #                            manging tensors in device memory, reference
      cutlass/               #                            implementations for GEMM, random initialization
        util/                #                            of tensors, and I/O.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;test/unit/&lt;/code&gt; directory consist of unit tests implemented with Google Test that demonstrate basic usage of Core API components and complete tests of the CUTLASS GEMM computations.&lt;/p&gt; 
&lt;p&gt;Instructions for building and running the Unit tests are described in the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md&quot;&gt;Quickstart guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Performance Profiling&lt;/h1&gt; 
&lt;p&gt;The &lt;code&gt;tools/profiler/&lt;/code&gt; directory contains a command-line utility for launching each of the GEMM kernels. It can be built as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ make cutlass_profiler -j16
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building all GEMM and Convolution kernels (&lt;em&gt;long&lt;/em&gt; build times)&lt;/h2&gt; 
&lt;p&gt;By default, only one tile size is instantiated for each data type, math instruction, and layout. To instantiate all, set the following environment variable when running CMake from an empty &lt;code&gt;build/&lt;/code&gt; directory. Beware, this results in &lt;em&gt;tens of thousands&lt;/em&gt; of kernels and long build times. This would also result in a large binary size and on some platforms linker to fail on building the library. Therefore, it&#39;s highly recommended to generate only a subset of kernels as demonstrated in the sub-section below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=90a -DCUTLASS_LIBRARY_KERNELS=all
...
$ make cutlass_profiler -j16
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building a subset of GEMM and Convolution kernels (&lt;em&gt;reduced&lt;/em&gt; build times)&lt;/h2&gt; 
&lt;p&gt;To compile strictly one kernel or a small set of kernels, a comma-delimited list of kernel names with wildcard characters may be used to reduce the set of kernels. The following examples show building exactly one or a subset of kernels for NVIDIA Ampere and Turing architecture:&lt;/p&gt; 
&lt;h3&gt;Building a subset Tensor Core GEMM kernels&lt;/h3&gt; 
&lt;p&gt;To compile a subset of Tensor Core GEMM kernels with FP32 accumulation and FP16 input targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_tensorop_s*gemm_f16_*_nt_align8
...
$ make cutlass_profiler -j16
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example command line for profiling a subset of Tensor Core GEMM kernels is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./tools/profiler/cutlass_profiler --kernels=cutlass_tensorop_s*gemm_f16_*_nt_align8 --m=3456 --n=4096 --k=4096

...
=============================
  Problem ID: 1

        Provider: CUTLASS
   OperationKind: gemm
       Operation: cutlass_tensorop_s1688gemm_f16_256x128_32x2_nt_align8

          Status: Success
    Verification: ON
     Disposition: Passed

reference_device: Passed
          cuBLAS: Passed

       Arguments: --gemm_kind=universal --m=3456 --n=4096 --k=4096 --A=f16:column --B=f16:row --C=f32:column --alpha=1  \
                  --beta=0 --split_k_slices=1 --batch_count=1 --op_class=tensorop --accum=f32 --cta_m=256 --cta_n=128  \
                  --cta_k=32 --stages=2 --warps_m=4 --warps_n=2 --warps_k=1 --inst_m=16 --inst_n=8 --inst_k=8 --min_cc=75  \
                  --max_cc=1024

           Bytes: 118489088  bytes
           FLOPs: 115992428544  flops

         Runtime: 1.55948  ms
          Memory: 70.7616 GiB/s

            Math: 74378.8 GFLOP/s



=============================
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building one CUDA Core GEMM kernel&lt;/h3&gt; 
&lt;p&gt;To compile one SGEMM kernel targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_simt_sgemm_128x128_8x2_nn_align1
...
$ make cutlass_profiler -j16
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example command line for profiling single SGEMM CUDA kernel is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./tools/profiler/cutlass_profiler --kernels=sgemm --m=3456 --n=4096 --k=4096

=============================
  Problem ID: 1

        Provider: CUTLASS
   OperationKind: gemm
       Operation: cutlass_simt_sgemm_128x128_8x2_nn_align1

          Status: Success
    Verification: ON
     Disposition: Passed

          cuBLAS: Passed

       Arguments: --m=3456 --n=4096 --k=4096 --A=f32:column --B=f32:column --C=f32:column --alpha=1 --beta=0 --split_k_slices=1  \
                  --batch_count=1 --op_class=simt --accum=f32 --cta_m=128 --cta_n=128 --cta_k=8 --stages=2 --warps_m=4  \
                  --warps_n=2 --warps_k=1 --inst_m=1 --inst_n=1 --inst_k=1 --min_cc=50 --max_cc=1024

           Bytes: 180355072  bytes
           FLOPs: 115992428544  flops

         Runtime: 6.73655  ms
          Memory: 24.934 GiB/s

            Math: 17218.4 GFLOP/s

=============================
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building a subset of Tensor Core Convolution kernels&lt;/h3&gt; 
&lt;p&gt;To compile a subset of Tensor core convolution kernels implementing forward propagation (fprop) with FP32 accumulation and FP16 input targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_tensorop_s*fprop_optimized_f16
...
$ make cutlass_profiler -j16
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example command line for profiling a subset of Tensor Core convolution kernels is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./tools/profiler/cutlass_profiler --kernels=cutlass_tensorop_s*fprop_optimized_f16 --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3

...
=============================
  Problem ID: 1

        Provider: CUTLASS
   OperationKind: conv2d
       Operation: cutlass_tensorop_s16816fprop_optimized_f16_128x128_32x5_nhwc

          Status: Success
    Verification: ON
     Disposition: Passed

reference_device: Passed

       Arguments: --conv_kind=fprop --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3 --p=224 --q=224 --pad_h=1 --pad_w=1  \
                  --stride_h=1 --stride_w=1 --dilation_h=1 --dilation_w=1 --Activation=f16:nhwc --Filter=f16:nhwc --Output=f32:nhwc  \
                  --conv_mode=cross --iterator_algorithm=optimized --alpha=1 --beta=0 --split_k_mode=serial --split_k_slices=1  \
                  --eq_gemm_provider=none --op_class=tensorop --accum=f32 --cta_m=128 --cta_n=128 --cta_k=32 --stages=5  \
                  --warps_m=2 --warps_n=2 --warps_k=1 --inst_m=16 --inst_n=8 --inst_k=16 --min_cc=80 --max_cc=1024

           Bytes: 1130659840  bytes
           FLOPs: 118482796544  flops

         Runtime: 0.711496  ms
          Memory: 1479.99 GiB/s

            Math: 166526 GFLOP/s

=============================
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building one Convolution CUDA kernel&lt;/h3&gt; 
&lt;p&gt;To compile and run one CUDA Core convolution kernel implementing forward propagation (fprop) with F32 accumulation and FP32 input targeting NVIDIA Ampere and Turing architecture, use the below cmake command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cmake .. -DCUTLASS_NVCC_ARCHS=&#39;75;80&#39; -DCUTLASS_LIBRARY_KERNELS=cutlass_simt_sfprop_optimized_128x128_8x2_nhwc
...
$ make cutlass_profiler -j16
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example command line for profiling one CUDA Core convolution kernel:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./tools/profiler/cutlass_profiler --kernels=cutlass_simt_sfprop_optimized_128x128_8x2_nhwc --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3


=============================
  Problem ID: 1

        Provider: CUTLASS
   OperationKind: conv2d
       Operation: cutlass_simt_sfprop_optimized_128x128_8x2_nhwc

          Status: Success
    Verification: ON
     Disposition: Passed

reference_device: Passed

       Arguments: --conv_kind=fprop --n=8 --h=224 --w=224 --c=128 --k=128 --r=3 --s=3 --p=224 --q=224 --pad_h=1 --pad_w=1  \
                  --stride_h=1 --stride_w=1 --dilation_h=1 --dilation_w=1 --Activation=f32:nhwc --Filter=f32:nhwc --Output=f32:nhwc  \
                  --conv_mode=cross --iterator_algorithm=optimized --alpha=1 --beta=0 --split_k_mode=serial --split_k_slices=1  \
                  --eq_gemm_provider=none --op_class=simt --accum=f32 --cta_m=128 --cta_n=128 --cta_k=8 --stages=2 --warps_m=4  \
                  --warps_n=2 --warps_k=1 --inst_m=1 --inst_n=1 --inst_k=1 --min_cc=50 --max_cc=1024

           Bytes: 2055798784  bytes
           FLOPs: 118482796544  flops

         Runtime: 7.34266  ms
          Memory: 260.752 GiB/s

            Math: 16136.2 GFLOP/s


=============================

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More Details on Compiling CUTLASS Kernels and CUTLASS Profiler&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please follow the links for more CMake examples on selectively compiling CUTLASS kernels: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md#gemm-cmake-examples&quot;&gt;GEMM CMake Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/quickstart.md#convolution-cmake-examples&quot;&gt;Implicit GEMM convolution CMake Examples&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/media/docs/profiler.md&quot;&gt;Further details about the CUTLASS Profiler are described here.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;CUTLASS is released by NVIDIA Corporation as Open Source software under the &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/LICENSE.txt&quot;&gt;3-clause &quot;New&quot; BSD license&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;The official list of CUTLASS developers and contributors is available here: &lt;a href=&quot;https://raw.githubusercontent.com/NVIDIA/cutlass/main/CONTRIBUTORS.md&quot;&gt;CONTRIBUTORS&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Copyright&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 2017 - 2025 NVIDIA CORPORATION &amp;amp; AFFILIATES. All rights reserved. SPDX-License-Identifier: BSD-3-Clause&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

  3. Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>MariaDB/server</title>
      <link>https://github.com/MariaDB/server</link>
      <description>&lt;p&gt;MariaDB server is a community developed fork of MySQL server. Started by core members of the original MySQL team, MariaDB actively works with outside developers to deliver the most featureful, stable, and sanely licensed open SQL server in the industry.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Code status:&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ci.appveyor.com/project/rasmushoj/server&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/4u6pexmtpuf8jq66?svg=true&quot; alt=&quot;Appveyor CI status&quot;&gt;&lt;/a&gt; ci.appveyor.com&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;MariaDB: The innovative open source database&lt;/h2&gt; 
&lt;p&gt;MariaDB was designed as a drop-in replacement of MySQL(R) with more features, new storage engines, fewer bugs, and better performance.&lt;/p&gt; 
&lt;p&gt;MariaDB is brought to you by the MariaDB Foundation and the MariaDB Corporation. Please read the CREDITS file for details about the MariaDB Foundation, and who is developing MariaDB.&lt;/p&gt; 
&lt;p&gt;MariaDB is developed by many of the original developers of MySQL who now work for the MariaDB Corporation, the MariaDB Foundation and by many people in the community.&lt;/p&gt; 
&lt;p&gt;MySQL, which is the base of MariaDB, is a product and trademark of Oracle Corporation, Inc. For a list of developers and other contributors, see the Credits appendix. You can also run &#39;SHOW authors&#39; to get a list of active contributors.&lt;/p&gt; 
&lt;p&gt;A description of the MariaDB project and a manual can be found at:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://mariadb.org&quot;&gt;https://mariadb.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/&quot;&gt;https://mariadb.com/kb/en/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/mariadb-vs-mysql-features/&quot;&gt;https://mariadb.com/kb/en/mariadb-vs-mysql-features/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/mariadb-versus-mysql-compatibility/&quot;&gt;https://mariadb.com/kb/en/mariadb-versus-mysql-compatibility/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/new-and-old-releases/&quot;&gt;https://mariadb.com/kb/en/new-and-old-releases/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Getting the code, building it and testing it&lt;/h1&gt; 
&lt;p&gt;Refer to the following guide: &lt;a href=&quot;https://mariadb.org/get-involved/getting-started-for-developers/get-code-build-test/&quot;&gt;https://mariadb.org/get-involved/getting-started-for-developers/get-code-build-test/&lt;/a&gt; which outlines how to build the source code correctly and run the MariaDB testing framework, as well as which branch to target for your contributions.&lt;/p&gt; 
&lt;h1&gt;Help&lt;/h1&gt; 
&lt;p&gt;More help is available from the Maria Discuss mailing list &lt;a href=&quot;https://lists.mariadb.org/postorius/lists/discuss.lists.mariadb.org/&quot;&gt;https://lists.mariadb.org/postorius/lists/discuss.lists.mariadb.org/&lt;/a&gt; and MariaDB&#39;s Zulip instance, &lt;a href=&quot;https://mariadb.zulipchat.com/&quot;&gt;https://mariadb.zulipchat.com/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Licensing&lt;/h1&gt; 
&lt;hr&gt; 
&lt;p&gt;MariaDB is specifically available only under version 2 of the GNU General Public License (GPLv2). (I.e. Without the &quot;any later version&quot; clause.) This is inherited from MySQL. Please see the README file in the MySQL distribution for more information.&lt;/p&gt; 
&lt;p&gt;License information can be found in the COPYING file. Third party license information can be found in the THIRDPARTY file.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;Bug Reports&lt;/h1&gt; 
&lt;p&gt;Bug and/or error reports regarding MariaDB should be submitted at: &lt;a href=&quot;https://jira.mariadb.org&quot;&gt;https://jira.mariadb.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For reporting security vulnerabilities, see our &lt;a href=&quot;https://mariadb.org/about/security-policy/&quot;&gt;security-policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The code for MariaDB, including all revision history, can be found at: &lt;a href=&quot;https://github.com/MariaDB/server&quot;&gt;https://github.com/MariaDB/server&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microsoft/onnxruntime</title>
      <link>https://github.com/microsoft/onnxruntime</link>
      <description>&lt;p&gt;ONNX Runtime: cross-platform, high performance ML inferencing and training accelerator&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;50%&quot; src=&quot;https://raw.githubusercontent.com/microsoft/onnxruntime/main/docs/images/ONNX_Runtime_logo_dark.png&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ONNX Runtime is a cross-platform inference and training machine-learning accelerator&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ONNX Runtime inference&lt;/strong&gt; can enable faster customer experiences and lower costs, supporting models from deep learning frameworks such as PyTorch and TensorFlow/Keras as well as classical machine learning libraries such as scikit-learn, LightGBM, XGBoost, etc. ONNX Runtime is compatible with different hardware, drivers, and operating systems, and provides optimal performance by leveraging hardware accelerators where applicable alongside graph optimizations and transforms. &lt;a href=&quot;https://www.onnxruntime.ai/docs/#onnx-runtime-for-inferencing&quot;&gt;Learn more →&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ONNX Runtime training&lt;/strong&gt; can accelerate the model training time on multi-node NVIDIA GPUs for transformer models with a one-line addition for existing PyTorch training scripts. &lt;a href=&quot;https://www.onnxruntime.ai/docs/#onnx-runtime-for-training&quot;&gt;Learn more →&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Get Started &amp;amp; Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;General Information&lt;/strong&gt;: &lt;a href=&quot;https://onnxruntime.ai&quot;&gt;onnxruntime.ai&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Usage documentation and tutorials&lt;/strong&gt;: &lt;a href=&quot;https://onnxruntime.ai/docs&quot;&gt;onnxruntime.ai/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;YouTube video tutorials&lt;/strong&gt;: &lt;a href=&quot;https://www.youtube.com/@ONNXRuntime&quot;&gt;youtube.com/@ONNXRuntime&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://onnxruntime.ai/roadmap&quot;&gt;&lt;strong&gt;Upcoming Release Roadmap&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Companion sample repositories&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ONNX Runtime Inferencing: &lt;a href=&quot;https://github.com/microsoft/onnxruntime-inference-examples&quot;&gt;microsoft/onnxruntime-inference-examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;ONNX Runtime Training: &lt;a href=&quot;https://github.com/microsoft/onnxruntime-training-examples&quot;&gt;microsoft/onnxruntime-training-examples&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Builtin Pipeline Status&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;System&lt;/th&gt; 
   &lt;th&gt;Inference&lt;/th&gt; 
   &lt;th&gt;Training&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=9&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Windows%20CPU%20CI%20Pipeline?label=Windows+CPU&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=218&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Windows%20GPU%20CUDA%20CI%20Pipeline?label=Windows+GPU+CUDA&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=47&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Windows%20GPU%20TensorRT%20CI%20Pipeline?label=Windows+GPU+TensorRT&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=228&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Windows%20GPU%20WebGPU%20CI%20Pipeline?label=Windows+GPU+WebGPU&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=11&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20CPU%20CI%20Pipeline?label=Linux+CPU&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=64&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20CPU%20Minimal%20Build%20E2E%20CI%20Pipeline?label=Linux+CPU+Minimal+Build&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=12&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20GPU%20CI%20Pipeline?label=Linux+GPU&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=45&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20GPU%20TensorRT%20CI%20Pipeline?label=Linux+GPU+TensorRT&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=55&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Linux%20OpenVINO%20CI%20Pipeline?label=Linux+OpenVINO&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=86&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/orttraining-linux-ci-pipeline?label=Linux+CPU+Training&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=84&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/orttraining-linux-gpu-ci-pipeline?label=Linux+GPU+Training&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mac&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=13&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/MacOS%20CI%20Pipeline?label=MacOS+CPU&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=53&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/Android%20CI%20Pipeline?label=Android&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=134&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/iOS%20CI%20Pipeline?label=iOS&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=161&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/ONNX%20Runtime%20Web%20CI%20Pipeline?label=Web&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Other&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_build/latest?definitionId=187&amp;amp;repoName=microsoft%2Fonnxruntime&quot;&gt;&lt;img src=&quot;https://dev.azure.com/onnxruntime/onnxruntime/_apis/build/status/onnxruntime-binary-size-checks-ci-pipeline?repoName=microsoft%2Fonnxruntime&amp;amp;label=Binary+Size+Check&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;This project is tested with &lt;a href=&quot;https://www.browserstack.com/home&quot;&gt;BrowserStack&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Third-party Pipeline Status&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;System&lt;/th&gt; 
   &lt;th&gt;Inference&lt;/th&gt; 
   &lt;th&gt;Training&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Ascend/onnxruntime/actions/workflows/build-and-test.yaml&quot;&gt;&lt;img src=&quot;https://github.com/Ascend/onnxruntime/actions/workflows/build-and-test.yaml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;The current release and past releases can be found here: &lt;a href=&quot;https://github.com/microsoft/onnxruntime/releases&quot;&gt;https://github.com/microsoft/onnxruntime/releases&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For details on the upcoming release, including release dates, announcements, features, and guidance on submitting feature requests, please visit the release roadmap: &lt;a href=&quot;https://onnxruntime.ai/roadmap&quot;&gt;https://onnxruntime.ai/roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Data/Telemetry&lt;/h2&gt; 
&lt;p&gt;Windows distributions of this project may collect usage data and send it to Microsoft to help improve our products and services. See the &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/onnxruntime/main/docs/Privacy.md&quot;&gt;privacy statement&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Contributions and Feedback&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! Please see the &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/onnxruntime/main/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For feature requests or bug reports, please file a &lt;a href=&quot;https://github.com/Microsoft/onnxruntime/issues&quot;&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For general discussion or questions, please use &lt;a href=&quot;https://github.com/microsoft/onnxruntime/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;This project has adopted the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/&quot;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/faq/&quot;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&quot;mailto:opencode@microsoft.com&quot;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/onnxruntime/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClickHouse/ClickHouse</title>
      <link>https://github.com/ClickHouse/ClickHouse</link>
      <description>&lt;p&gt;ClickHouse® is a real-time analytics database management system&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://clickhouse.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/website?up_message=AVAILABLE&amp;amp;down_message=DOWN&amp;amp;url=https%3A%2F%2Fclickhouse.com&amp;amp;style=for-the-badge&quot; alt=&quot;Website&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202.0-blueviolet?style=for-the-badge&quot; alt=&quot;Apache 2.0 License&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;picture align=&quot;center&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/ClickHouse/clickhouse-docs/assets/9611008/4ef9c104-2d3f-4646-b186-507358d2fe28&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/ClickHouse/clickhouse-docs/assets/9611008/b001dc7b-5a45-4dcd-9275-e03beb7f9177&quot;&gt; 
  &lt;img alt=&quot;The ClickHouse company logo.&quot; src=&quot;https://github.com/ClickHouse/clickhouse-docs/assets/9611008/b001dc7b-5a45-4dcd-9275-e03beb7f9177&quot;&gt; 
 &lt;/picture&gt; 
 &lt;h4&gt;ClickHouse® is an open-source column-oriented database management system that allows generating analytical data reports in real-time.&lt;/h4&gt; 
&lt;/div&gt; 
&lt;h2&gt;How To Install (Linux, macOS, FreeBSD)&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;curl https://clickhouse.com/ | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Useful Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/&quot;&gt;Official website&lt;/a&gt; has a quick high-level overview of ClickHouse on the main page.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.cloud&quot;&gt;ClickHouse Cloud&lt;/a&gt; ClickHouse as a service, built by the creators and maintainers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/docs/getting_started/tutorial/&quot;&gt;Tutorial&lt;/a&gt; shows how to set up and query a small ClickHouse cluster.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/docs/&quot;&gt;Documentation&lt;/a&gt; provides more in-depth information.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/c/ClickHouseDB&quot;&gt;YouTube channel&lt;/a&gt; has a lot of content about ClickHouse in video format.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/slack&quot;&gt;Slack&lt;/a&gt; and &lt;a href=&quot;https://telegram.me/clickhouse_en&quot;&gt;Telegram&lt;/a&gt; allow chatting with ClickHouse users in real-time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/blog/&quot;&gt;Blog&lt;/a&gt; contains various ClickHouse-related articles, as well as announcements and reports about events.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bsky.app/profile/clickhouse.com&quot;&gt;Bluesky&lt;/a&gt; and &lt;a href=&quot;https://x.com/ClickHouseDB&quot;&gt;X&lt;/a&gt; for short news.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.dev/ClickHouse/ClickHouse&quot;&gt;Code Browser (github.dev)&lt;/a&gt; with syntax highlighting, powered by github.dev.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/company/contact&quot;&gt;Contacts&lt;/a&gt; can help to get your questions answered if there are any.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Monthly Release &amp;amp; Community Call&lt;/h2&gt; 
&lt;p&gt;Every month we get together with the community (users, contributors, customers, those interested in learning more about ClickHouse) to discuss what is coming in the latest release. If you are interested in sharing what you&#39;ve built on ClickHouse, let us know.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/company/events/v25-2-community-release-call&quot;&gt;v25.2 Community Call&lt;/a&gt; - Feb 27&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Upcoming Events&lt;/h2&gt; 
&lt;p&gt;Keep an eye out for upcoming meetups and events around the world. Somewhere else you want us to be? Please feel free to reach out to tyler &lt;code&gt;&amp;lt;at&amp;gt;&lt;/code&gt; clickhouse &lt;code&gt;&amp;lt;dot&amp;gt;&lt;/code&gt; com. You can also peruse &lt;a href=&quot;https://clickhouse.com/company/news-events&quot;&gt;ClickHouse Events&lt;/a&gt; for a list of all upcoming trainings, meetups, speaking engagements, etc.&lt;/p&gt; 
&lt;p&gt;Upcoming meetups&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-tokyo-user-group/events/306392262&quot;&gt;Tokyo Meetup&lt;/a&gt; - March 12, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-silicon-valley-meetup-group/events/306445660&quot;&gt;Los Gatos Meetup&lt;/a&gt; - March 12, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-silicon-valley-meetup-group/events/306046697&quot;&gt;San Francisco Meetup&lt;/a&gt; - March 19, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-delhi-user-group/events/306253492/&quot;&gt;Delhi Meetup&lt;/a&gt; - March 22, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-hungary-user-group/events/306435234/&quot;&gt;Budapest Meetup&lt;/a&gt; - March 25, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-boston-user-group/events/305882607&quot;&gt;Boston Meetup&lt;/a&gt; - March 25, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-brasil-user-group/events/306385974/&quot;&gt;Sao Paulo Meetup&lt;/a&gt; - March 25, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-meetup-israel/events/306434754/&quot;&gt;Tel Aviv Meetup&lt;/a&gt; - March 26, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-new-york-user-group/events/305916369&quot;&gt;New York Meetup&lt;/a&gt; - March 26, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-dc-user-group/events/306439995&quot;&gt;Washington DC Meetup&lt;/a&gt; - March 27, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-australia-user-group/events/306549810/&quot;&gt;Sydney Meetup&lt;/a&gt; - April 1, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/open-source-real-time-data-warehouse-real-time-analytics/events/306414327/&quot;&gt;Oslo Meetup&lt;/a&gt; - April 8, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-malaysia-meetup-group/events/306697678/&quot;&gt;Kuala Lumper Meetup with CNCF&lt;/a&gt; - April 16 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-london-user-group/events/306047172/&quot;&gt;London Meetup&lt;/a&gt; - May 14, 2025&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Recent meetups&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-seattle-user-group/events/305916325&quot;&gt;Seattle Meetup&lt;/a&gt; - March 5, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-france-user-group/events/305792997&quot;&gt;Paris Meetup&lt;/a&gt; - March 4, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.huodongxing.com/event/3794544969111?td=3894807410019&quot;&gt;Shanghai Meetup&lt;/a&gt; - March 1, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-singapore-meetup-group/events/305917892/&quot;&gt;Singapore Meetup&lt;/a&gt; - Feb 25, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-los-angeles-user-group/events/305952193&quot;&gt;Los Angeles Meetup (with DevOpsDays)&lt;/a&gt; - Feb 20, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-wellington-user-group/events/305666164/&quot;&gt;Wellington Meetup&lt;/a&gt; - Feb 20, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-auckland-meetup-group/events/305666103/&quot;&gt;Auckland Meetup&lt;/a&gt; - Feb 19, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-dubai-meetup-group/events/303096989/&quot;&gt;Dubai Meetup&lt;/a&gt; - Feb 10, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-bangalore-user-group/events/305497951/&quot;&gt;Bangalore Meetup&lt;/a&gt; - Feb 8, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-london-user-group/events/305146729/&quot;&gt;London Meetup&lt;/a&gt; - Feb 5, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clickhouse.com/company/events/202502-emea-brussels-fosdem-dinner&quot;&gt;FOSDEM Dinner&lt;/a&gt; - Feb 1, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-mumbai-user-group/events/305497320/&quot;&gt;Mumbai Meetup&lt;/a&gt; - Feb 1, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-croatia-user-group/events/305455877/&quot;&gt;Zagreb Meetup&lt;/a&gt; - Jan 30, 2025&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/clickhouse-tokyo-user-group/events/305126993/&quot;&gt;Tokyo Meetup&lt;/a&gt; - Jan 23, 2025&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Recent Recordings&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Recent Meetup Videos&lt;/strong&gt;: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL0Z2YDlm0b3iNDUzpY1S3L_iV4nARda_U&quot;&gt;Meetup Playlist&lt;/a&gt; Whenever possible recordings of the ClickHouse Community Meetups are edited and presented as individual talks. Current featuring &quot;Modern SQL in 2023&quot;, &quot;Fast, Concurrent, and Consistent Asynchronous INSERTS in ClickHouse&quot;, and &quot;Full-Text Indices: Design and Experiments&quot;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Recording available&lt;/strong&gt;: &lt;a href=&quot;https://www.youtube.com/watch?v=AeLmp2jc51k&quot;&gt;&lt;strong&gt;v24.8 LTS Release Call&lt;/strong&gt;&lt;/a&gt; All the features of 24.8 LTS, one convenient video! Watch it now!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Interested in joining ClickHouse and making it your full-time job?&lt;/h2&gt; 
&lt;p&gt;We are a globally diverse and distributed team, united behind a common goal of creating industry-leading, real-time analytics. Here, you will have an opportunity to solve some of the most cutting-edge technical challenges and have direct ownership of your work and vision. If you are a contributor by nature, a thinker and a doer - we’ll definitely click!&lt;/p&gt; 
&lt;p&gt;Check out our &lt;strong&gt;current openings&lt;/strong&gt; here: &lt;a href=&quot;https://clickhouse.com/company/careers&quot;&gt;https://clickhouse.com/company/careers&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Can&#39;t find what you are looking for, but want to let us know you are interested in joining ClickHouse? Email &lt;a href=&quot;mailto:careers@clickhouse.com&quot;&gt;careers@clickhouse.com&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
