<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub C Monthly Trending</title>
    <description>Monthly Trending of C in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:57:40 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>espressif/esp-sr</title>
      <link>https://github.com/espressif/esp-sr</link>
      <description>&lt;p&gt;Speech recognition&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP-SR Speech Recognition Framework&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/index.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-sr/master/docs/_static/sr_doc_latest.svg?sanitize=true&quot; alt=&quot;Documentation Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://components.espressif.com/components/espressif/esp-sr&quot;&gt;&lt;img src=&quot;https://components.espressif.com/components/espressif/esp-sr/badge.svg?sanitize=true&quot; alt=&quot;Component Registry&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Espressif &lt;a href=&quot;https://github.com/espressif/esp-sr&quot;&gt;ESP-SR&lt;/a&gt; helps users build AI speech solutions based on ESP32-S3 or ESP32-P4 chips.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;ESP-SR framework includes the following modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/audio_front_end/README.html&quot;&gt;Audio Front-end AFE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/wake_word_engine/README.html&quot;&gt;Wake Word Engine WakeNet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/vadnet/README.html&quot;&gt;VAD VADNet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/speech_command_recognition/README.html&quot;&gt;Speech Command Word Recognition MultiNet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/speech_synthesis/readme.html&quot;&gt;Speech Synthesis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These algorithms are provided in the form of a component, so they can be integrated into your projects with minimum effort.&lt;/p&gt; 
&lt;p&gt;ESP32-S3/ESP32-P4 are recommended, which support AI instructions and larger, high-speed octal SPI PSRAM. The new algorithms will no longer support ESP32 chips.&lt;/p&gt; 
&lt;h2&gt;News&lt;/h2&gt; 
&lt;p&gt;[14/2/2025]: We release &lt;strong&gt;ESP-SR V2.0&lt;/strong&gt;. &lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/audio_front_end/migration_guide.html&quot;&gt;Migration from ESP-SR V1.* to ESP-SR V2.*&lt;/a&gt;&lt;br&gt; [13/2/2025]: We release &lt;strong&gt;VADNet&lt;/strong&gt;, a voice activaty detection model. You can use it to replace the WebRTC VAD and improve the performance.&lt;/p&gt; 
&lt;h2&gt;Wake Word Engine&lt;/h2&gt; 
&lt;p&gt;Espressif wake word engine &lt;strong&gt;WakeNet&lt;/strong&gt; is specially designed to provide a high performance and low memory footprint wake word detection algorithm for users, which enables devices always listen to wake words, such as “Alexa”, “Hi,lexin” and “Hi,ESP”.&lt;/p&gt; 
&lt;p&gt;Espressif offers two ways to customize the wake word, please refer to the following document to choose the one that meets your needs:&lt;br&gt; &lt;a href=&quot;https://docs.espressif.com/projects/esp-sr/en/latest/esp32s3/wake_word_engine/ESP_Wake_Words_Customization.html&quot;&gt;Espressif Speech Wake Words Customization Process&lt;/a&gt; or &lt;a href=&quot;https://github.com/espressif/esp-sr/issues/88&quot;&gt;Training Wake Words by TTS sample&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The following wake words are supported in esp-sr:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;wake words&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP32&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP32-S3/ESP32-P4&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,乐鑫&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn5_hilexin, wn5_hilexinX3&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hilexin&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;你好小智&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn5_nihaoxiaozhi,wn5_nihaoxiaozhiX3&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_nihaoxiaozhi_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小爱同学&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaoaitongxue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,ESP&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hiesp&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,M Five&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_himfive&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Alexa&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_alexa&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Jarvis&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_jarvis_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Computer&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_computer_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hey,Willow&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_heywillow_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Sophia&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_sophia_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Mycroft&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_mycroft_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hey,Printer&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_heyprinter_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,Joy&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hijoy_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hey,Wand&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_heywanda_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Astrolabe&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_astrolabe_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,Jason&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hijason_tts2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,Wall E/Hi,瓦力&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hiwalle_tts2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;你好小鑫&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_nihaoxiaoxin_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小美同学&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaomeitongxue_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,小星&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hixiaoxing_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小龙小龙&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaolongxiaolong_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;喵喵同学&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_miaomiaotongxue_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,喵喵&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_himiaomiao_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,Lily/Hi,莉莉&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hilili_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,Telly/Hi,泰力&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_hitelly_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小滨小滨/小冰小冰&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaobinxiaobin_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Hi,小巫&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_haixiaowu_tts&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小鸭小鸭&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaoyaxiaoya_tts2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;璃奈板&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_linaiban_tts2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小酥肉&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaosurou_tts2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小宇同学&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaoyutongxue_tts2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;小明同学&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;wn9_xiaomingtongxue_tts2&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; &lt;code&gt;_tts&lt;/code&gt; suffix means this WakeNet model is trained by TTS samples. &lt;code&gt;_tts2&lt;/code&gt; suffix means this WakeNet model is trained by TTS Pipeline V2.&lt;/p&gt; 
&lt;h2&gt;Speech Command Recognition&lt;/h2&gt; 
&lt;p&gt;Espressif&#39;s speech command recognition model &lt;strong&gt;MultiNet&lt;/strong&gt; is specially designed to provide a flexible off-line speech command recognition model. With this model, you can easily add your own speech commands, eliminating the need to train model again.&lt;/p&gt; 
&lt;p&gt;Currently, Espressif &lt;strong&gt;MultiNet&lt;/strong&gt; supports up to 300 Chinese or English speech commands, such as “打开空调” (Turn on the air conditioner) and “打开卧室灯” (Turn on the bedroom light).&lt;/p&gt; 
&lt;p&gt;The following MultiNet models are supported in esp-sr:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;language&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP32&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP32-S3&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP32-P4&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Chinese&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;mn2_cn&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;mn5q8_cn, mn6_cn, mn7_cn&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;mn7_cn&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;English&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;mn5q8_en, mn6_en, mn7_en&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;mn7_en&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Audio Front End&lt;/h2&gt; 
&lt;p&gt;Espressif Audio Front-End &lt;strong&gt;AFE&lt;/strong&gt; integrates AEC (Acoustic Echo Cancellation), VAD (Voice Activity Detection), BSS (Blind Source Separation) and NS (Noise Suppression).&lt;/p&gt; 
&lt;p&gt;Our two-mic Audio Front-End (AFE) have been qualified as a “Software Audio Front-End Solution” for &lt;a href=&quot;https://developer.amazon.com/en-US/alexa/solution-providers/dev-kits#software-audio-front-end-dev-kits&quot;&gt;Amazon Alexa Built-in devices&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;In order to achieve optimal performance:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please refer to software design &lt;a href=&quot;https://github.com/espressif/esp-skainet&quot;&gt;esp-skainet&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>redis/redis</title>
      <link>https://github.com/redis/redis</link>
      <description>&lt;p&gt;Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs, Bitmaps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://codecov.io/github/redis/redis&quot;&gt;&lt;img src=&quot;https://codecov.io/github/redis/redis/graph/badge.svg?token=6bVHb5fRuz&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. You can find more detailed documentation at &lt;a href=&quot;https://redis.io&quot;&gt;redis.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What is Redis?&lt;/h2&gt; 
&lt;p&gt;Redis is often referred to as a &lt;em&gt;data structures&lt;/em&gt; server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a &lt;em&gt;server-client&lt;/em&gt; model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way.&lt;/p&gt; 
&lt;p&gt;Data structures implemented into Redis have a few special properties:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Redis cares to store them on disk, even if they are always served and modified into the server memory. This means that Redis is fast, but that it is also non-volatile.&lt;/li&gt; 
 &lt;li&gt;The implementation of data structures emphasizes memory efficiency, so data structures inside Redis will likely use less memory compared to the same data structure modelled using a high-level programming language.&lt;/li&gt; 
 &lt;li&gt;Redis offers a number of features that are natural to find in a database, like replication, tunable levels of durability, clustering, and high availability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Another good example is to think of Redis as a more complex version of memcached, where the operations are not just SETs and GETs, but operations that work with complex data types like Lists, Sets, ordered data structures, and so forth.&lt;/p&gt; 
&lt;p&gt;If you want to know more, this is a list of selected starting points:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Introduction to Redis data types. &lt;a href=&quot;https://redis.io/docs/latest/develop/data-types/&quot;&gt;https://redis.io/docs/latest/develop/data-types/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The full list of Redis commands. &lt;a href=&quot;https://redis.io/commands&quot;&gt;https://redis.io/commands&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;There is much more inside the official Redis documentation. &lt;a href=&quot;https://redis.io/documentation&quot;&gt;https://redis.io/documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Redis Community Edition?&lt;/h2&gt; 
&lt;p&gt;Redis OSS was renamed Redis Community Edition (CE) with the v7.4 release.&lt;/p&gt; 
&lt;p&gt;Redis Ltd. also offers &lt;a href=&quot;https://redis.io/enterprise/&quot;&gt;Redis Software&lt;/a&gt;, a self-managed software with additional compliance, reliability, and resiliency for enterprise scaling, and &lt;a href=&quot;https://redis.io/cloud/&quot;&gt;Redis Cloud&lt;/a&gt;, a fully managed service integrated with Google Cloud, Azure, and AWS for production-ready apps.&lt;/p&gt; 
&lt;p&gt;Read more about the differences between Redis Community Edition and Redis &lt;a href=&quot;https://redis.io/comparisons/oss-vs-enterprise/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building Redis&lt;/h2&gt; 
&lt;p&gt;Redis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; 
&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and Redis is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; 
&lt;p&gt;It is as simple as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu) and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To append a suffix to Redis program names, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&quot;-alt&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can build a 32 bit Redis binary using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make 32bit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After building Redis, it is a good idea to test it using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If TLS is built, running the tests with TLS enabled (you will need &lt;code&gt;tcl-tls&lt;/code&gt; installed):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ./utils/gen-test-certs.sh
% ./runtest --tls
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; 
&lt;p&gt;Redis has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; 
&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make distclean
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will clean: jemalloc, lua, hiredis, linenoise and other dependencies.&lt;/p&gt; 
&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; 
&lt;p&gt;If after building Redis with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the Redis distribution.&lt;/p&gt; 
&lt;p&gt;In case of build errors when trying to build a 32 bit binary of Redis, try the following steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; 
 &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&quot;-m32 -march=native&quot; LDFLAGS=&quot;-m32&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Allocator&lt;/h2&gt; 
&lt;p&gt;Selecting a non-default memory allocator when building Redis is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. Redis is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; 
&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make MALLOC=libc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Monotonic clock&lt;/h2&gt; 
&lt;p&gt;By default, Redis will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&quot;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&quot;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make CFLAGS=&quot;-DUSE_PROCESSOR_CLOCK&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Verbose build&lt;/h2&gt; 
&lt;p&gt;Redis will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make V=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Running Redis&lt;/h2&gt; 
&lt;p&gt;To run Redis with the default configuration, just type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./redis-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to provide your redis.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./redis-server /path/to/redis.conf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to alter the Redis configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ./redis-server --port 9999 --replicaof 127.0.0.1 6379
% ./redis-server /etc/redis/6379.conf --loglevel debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All the options in redis.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; 
&lt;h2&gt;Running Redis with TLS&lt;/h2&gt; 
&lt;p&gt;Please consult the &lt;a href=&quot;https://raw.githubusercontent.com/redis/redis/unstable/TLS.md&quot;&gt;TLS.md&lt;/a&gt; file for more information on how to use Redis with TLS.&lt;/p&gt; 
&lt;h2&gt;Playing with Redis&lt;/h2&gt; 
&lt;p&gt;You can use redis-cli to play with Redis. Start a redis-server instance, then in another terminal try the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./redis-cli
redis&amp;gt; ping
PONG
redis&amp;gt; set foo bar
OK
redis&amp;gt; get foo
&quot;bar&quot;
redis&amp;gt; incr mycounter
(integer) 1
redis&amp;gt; incr mycounter
(integer) 2
redis&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find the list of all the available commands at &lt;a href=&quot;https://redis.io/commands&quot;&gt;https://redis.io/commands&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing Redis&lt;/h2&gt; 
&lt;p&gt;In order to install Redis binaries into /usr/local/bin, just use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Redis, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd utils
% ./install_server.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; 
&lt;p&gt;The script will ask you a few questions and will setup everything you need to run Redis properly as a background daemon that will start again on system reboots.&lt;/p&gt; 
&lt;p&gt;You&#39;ll be able to stop and start Redis using the script named &lt;code&gt;/etc/init.d/redis_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/redis_6379&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Code contributions&lt;/h2&gt; 
&lt;p&gt;By contributing code to the Redis project in any form, including sending a pull request via GitHub, a code fragment or patch via private email or public discussion groups, you agree to release your code under the terms of the &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/CONTRIBUTING.md&quot;&gt;Redis Software Grant and Contributor License Agreement&lt;/a&gt;. Redis software contains contributions to the original Redis core project, which are owned by their contributors and licensed under the 3BSD license. Any copy of that license in this repository applies only to those contributions. Redis releases all Redis Community Edition versions from 7.4.x and thereafter under the RSALv2/SSPL dual-license as described in the &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; file included in the Redis Community Edition source distribution.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; file in this source distribution for more information. For security bugs and vulnerabilities, please see &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Redis Trademarks&lt;/h2&gt; 
&lt;p&gt;The purpose of a trademark is to identify the goods and services of a person or company without causing confusion. As the registered owner of its name and logo, Redis accepts certain limited uses of its trademarks but it has requirements that must be followed as described in its Trademark Guidelines available at: &lt;a href=&quot;https://redis.com/legal/trademark-guidelines/&quot;&gt;https://redis.com/legal/trademark-guidelines/&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Redis internals&lt;/h1&gt; 
&lt;p&gt;If you are reading this README you are likely in front of a GitHub page or you just untarred the Redis distribution tar ball. In both the cases you are basically one step away from the source code, so here we explain the Redis source code layout, what is in each file as a general idea, the most important functions and structures inside the Redis server and so forth. We keep all the discussion at a high level without digging into the details since this document would be huge otherwise and our code base changes continuously, but a general idea should be a good starting point to understand more. Moreover most of the code is heavily commented and easy to follow.&lt;/p&gt; 
&lt;h2&gt;Source code layout&lt;/h2&gt; 
&lt;p&gt;The Redis root directory just contains this README, the Makefile which calls the real Makefile inside the &lt;code&gt;src&lt;/code&gt; directory and an example configuration for Redis and Redis Sentinel. You can find a few shell scripts that are used in order to execute the Redis, Redis Cluster and Redis Sentinel unit tests, which are implemented inside the &lt;code&gt;tests&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;Inside the root are the following important directories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;src&lt;/code&gt;: contains the Redis implementation, written in C.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: contains the unit tests, implemented in Tcl.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;deps&lt;/code&gt;: contains libraries Redis uses. Everything needed to compile Redis is inside this directory; your system just needs to provide &lt;code&gt;libc&lt;/code&gt;, a POSIX compatible interface and a C compiler. Notably &lt;code&gt;deps&lt;/code&gt; contains a copy of &lt;code&gt;jemalloc&lt;/code&gt;, which is the default allocator of Redis under Linux. Note that under &lt;code&gt;deps&lt;/code&gt; there are also things which started with the Redis project, but for which the main repository is not &lt;code&gt;redis/redis&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a few more directories but they are not very important for our goals here. We&#39;ll focus mostly on &lt;code&gt;src&lt;/code&gt;, where the Redis implementation is contained, exploring what there is inside each file. The order in which files are exposed is the logical one to follow in order to disclose different layers of complexity incrementally.&lt;/p&gt; 
&lt;p&gt;Note: lately Redis was refactored quite a bit. Function names and file names have been changed, so you may find that this documentation reflects the &lt;code&gt;unstable&lt;/code&gt; branch more closely. For instance, in Redis 3.0 the &lt;code&gt;server.c&lt;/code&gt; and &lt;code&gt;server.h&lt;/code&gt; files were named &lt;code&gt;redis.c&lt;/code&gt; and &lt;code&gt;redis.h&lt;/code&gt;. However the overall structure is the same. Keep in mind that all the new developments and pull requests should be performed against the &lt;code&gt;unstable&lt;/code&gt; branch.&lt;/p&gt; 
&lt;h2&gt;server.h&lt;/h2&gt; 
&lt;p&gt;The simplest way to understand how a program works is to understand the data structures it uses. So we&#39;ll start from the main header file of Redis, which is &lt;code&gt;server.h&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All the server configuration and in general all the shared state is defined in a global structure called &lt;code&gt;server&lt;/code&gt;, of type &lt;code&gt;struct redisServer&lt;/code&gt;. A few important fields in this structure are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;server.db&lt;/code&gt; is an array of Redis databases, where data is stored.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server.commands&lt;/code&gt; is the command table.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server.clients&lt;/code&gt; is a linked list of clients connected to the server.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server.master&lt;/code&gt; is a special client, the master, if the instance is a replica.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are tons of other fields. Most fields are commented directly inside the structure definition.&lt;/p&gt; 
&lt;p&gt;Another important Redis data structure is the one defining a client. In the past it was called &lt;code&gt;redisClient&lt;/code&gt;, now just &lt;code&gt;client&lt;/code&gt;. The structure has many fields, here we&#39;ll just show the main ones:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct client {
    int fd;
    sds querybuf;
    int argc;
    robj **argv;
    redisDb *db;
    int flags;
    list *reply;
    // ... many other fields ...
    char buf[PROTO_REPLY_CHUNK_BYTES];
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The client structure defines a &lt;em&gt;connected client&lt;/em&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;fd&lt;/code&gt; field is the client socket file descriptor.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; are populated with the command the client is executing, so that functions implementing a given Redis command can read the arguments.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;querybuf&lt;/code&gt; accumulates the requests from the client, which are parsed by the Redis server according to the Redis protocol and executed by calling the implementations of the commands the client is executing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;reply&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; are dynamic and static buffers that accumulate the replies the server sends to the client. These buffers are incrementally written to the socket as soon as the file descriptor is writable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As you can see in the client structure above, arguments in a command are described as &lt;code&gt;robj&lt;/code&gt; structures. The following is the full &lt;code&gt;robj&lt;/code&gt; structure, which defines a &lt;em&gt;Redis object&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct redisObject {
    unsigned type:4;
    unsigned encoding:4;
    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or
                            * LFU data (least significant 8 bits frequency
                            * and most significant 16 bits access time). */
    int refcount;
    void *ptr;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Basically this structure can represent all the basic Redis data types like strings, lists, sets, sorted sets and so forth. The interesting thing is that it has a &lt;code&gt;type&lt;/code&gt; field, so that it is possible to know what type a given object has, and a &lt;code&gt;refcount&lt;/code&gt;, so that the same object can be referenced in multiple places without allocating it multiple times. Finally the &lt;code&gt;ptr&lt;/code&gt; field points to the actual representation of the object, which might vary even for the same type, depending on the &lt;code&gt;encoding&lt;/code&gt; used.&lt;/p&gt; 
&lt;p&gt;Redis objects are used extensively in the Redis internals, however in order to avoid the overhead of indirect accesses, recently in many places we just use plain dynamic strings not wrapped inside a Redis object.&lt;/p&gt; 
&lt;h2&gt;server.c&lt;/h2&gt; 
&lt;p&gt;This is the entry point of the Redis server, where the &lt;code&gt;main()&lt;/code&gt; function is defined. The following are the most important steps in order to startup the Redis server.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;initServerConfig()&lt;/code&gt; sets up the default values of the &lt;code&gt;server&lt;/code&gt; structure.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;initServer()&lt;/code&gt; allocates the data structures needed to operate, setup the listening socket, and so forth.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;aeMain()&lt;/code&gt; starts the event loop which listens for new connections.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are two special functions called periodically by the event loop:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;serverCron()&lt;/code&gt; is called periodically (according to &lt;code&gt;server.hz&lt;/code&gt; frequency), and performs tasks that must be performed from time to time, like checking for timed out clients.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;beforeSleep()&lt;/code&gt; is called every time the event loop fired, Redis served a few requests, and is returning back into the event loop.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Inside server.c you can find code that handles other vital things of the Redis server:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;call()&lt;/code&gt; is used in order to call a given command in the context of a given client.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;activeExpireCycle()&lt;/code&gt; handles eviction of keys with a time to live set via the &lt;code&gt;EXPIRE&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;performEvictions()&lt;/code&gt; is called when a new write command should be performed but Redis is out of memory according to the &lt;code&gt;maxmemory&lt;/code&gt; directive.&lt;/li&gt; 
 &lt;li&gt;The global variable &lt;code&gt;redisCommandTable&lt;/code&gt; defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of each command.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;commands.c&lt;/h2&gt; 
&lt;p&gt;This file is auto generated by utils/generate-command-code.py, the content is based on the JSON files in the src/commands folder. These are meant to be the single source of truth about the Redis commands, and all the metadata about them. These JSON files are not meant to be used by anyone directly, instead that metadata can be obtained via the &lt;code&gt;COMMAND&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;networking.c&lt;/h2&gt; 
&lt;p&gt;This file defines all the I/O functions with clients, masters and replicas (which in Redis are just special clients):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;createClient()&lt;/code&gt; allocates and initializes a new client.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;addReply*()&lt;/code&gt; family of functions are used by command implementations in order to append data to the client structure, that will be transmitted to the client as a reply for a given command executed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;writeToClient()&lt;/code&gt; transmits the data pending in the output buffers to the client and is called by the &lt;em&gt;writable event handler&lt;/em&gt; &lt;code&gt;sendReplyToClient()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;readQueryFromClient()&lt;/code&gt; is the &lt;em&gt;readable event handler&lt;/em&gt; and accumulates data read from the client into the query buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;processInputBuffer()&lt;/code&gt; is the entry point in order to parse the client query buffer according to the Redis protocol. Once commands are ready to be processed, it calls &lt;code&gt;processCommand()&lt;/code&gt; which is defined inside &lt;code&gt;server.c&lt;/code&gt; in order to actually execute the command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;freeClient()&lt;/code&gt; deallocates, disconnects and removes a client.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;aof.c and rdb.c&lt;/h2&gt; 
&lt;p&gt;As you can guess from the names, these files implement the RDB and AOF persistence for Redis. Redis uses a persistence model based on the &lt;code&gt;fork()&lt;/code&gt; system call in order to create a process with the same (shared) memory content of the main Redis process. This secondary process dumps the content of the memory on disk. This is used by &lt;code&gt;rdb.c&lt;/code&gt; to create the snapshots on disk and by &lt;code&gt;aof.c&lt;/code&gt; in order to perform the AOF rewrite when the append only file gets too big.&lt;/p&gt; 
&lt;p&gt;The implementation inside &lt;code&gt;aof.c&lt;/code&gt; has additional functions in order to implement an API that allows commands to append new commands into the AOF file as clients execute them.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;call()&lt;/code&gt; function defined inside &lt;code&gt;server.c&lt;/code&gt; is responsible for calling the functions that in turn will write the commands into the AOF.&lt;/p&gt; 
&lt;h2&gt;db.c&lt;/h2&gt; 
&lt;p&gt;Certain Redis commands operate on specific data types; others are general. Examples of generic commands are &lt;code&gt;DEL&lt;/code&gt; and &lt;code&gt;EXPIRE&lt;/code&gt;. They operate on keys and not on their values specifically. All those generic commands are defined inside &lt;code&gt;db.c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Moreover &lt;code&gt;db.c&lt;/code&gt; implements an API in order to perform certain operations on the Redis dataset without directly accessing the internal data structures.&lt;/p&gt; 
&lt;p&gt;The most important functions inside &lt;code&gt;db.c&lt;/code&gt; which are used in many command implementations are the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lookupKeyRead()&lt;/code&gt; and &lt;code&gt;lookupKeyWrite()&lt;/code&gt; are used in order to get a pointer to the value associated to a given key, or &lt;code&gt;NULL&lt;/code&gt; if the key does not exist.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dbAdd()&lt;/code&gt; and its higher level counterpart &lt;code&gt;setKey()&lt;/code&gt; create a new key in a Redis database.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dbDelete()&lt;/code&gt; removes a key and its associated value.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;emptyData()&lt;/code&gt; removes an entire single database or all the databases defined.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The rest of the file implements the generic commands exposed to the client.&lt;/p&gt; 
&lt;h2&gt;object.c&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;robj&lt;/code&gt; structure defining Redis objects was already described. Inside &lt;code&gt;object.c&lt;/code&gt; there are all the functions that operate with Redis objects at a basic level, like functions to allocate new objects, handle the reference counting and so forth. Notable functions inside this file:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;incrRefCount()&lt;/code&gt; and &lt;code&gt;decrRefCount()&lt;/code&gt; are used in order to increment or decrement an object reference count. When it drops to 0 the object is finally freed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;createObject()&lt;/code&gt; allocates a new object. There are also specialized functions to allocate string objects having a specific content, like &lt;code&gt;createStringObjectFromLongLong()&lt;/code&gt; and similar functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This file also implements the &lt;code&gt;OBJECT&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;replication.c&lt;/h2&gt; 
&lt;p&gt;This is one of the most complex files inside Redis, it is recommended to approach it only after getting a bit familiar with the rest of the code base. In this file there is the implementation of both the master and replica role of Redis.&lt;/p&gt; 
&lt;p&gt;One of the most important functions inside this file is &lt;code&gt;replicationFeedSlaves()&lt;/code&gt; that writes commands to the clients representing replica instances connected to our master, so that the replicas can get the writes performed by the clients: this way their data set will remain synchronized with the one in the master.&lt;/p&gt; 
&lt;p&gt;This file also implements both the &lt;code&gt;SYNC&lt;/code&gt; and &lt;code&gt;PSYNC&lt;/code&gt; commands that are used in order to perform the first synchronization between masters and replicas, or to continue the replication after a disconnection.&lt;/p&gt; 
&lt;h2&gt;Script&lt;/h2&gt; 
&lt;p&gt;The script unit is composed of 3 units:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;script.c&lt;/code&gt; - integration of scripts with Redis (commands execution, set replication/resp, ...)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;script_lua.c&lt;/code&gt; - responsible to execute Lua code, uses &lt;code&gt;script.c&lt;/code&gt; to interact with Redis from within the Lua code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;function_lua.c&lt;/code&gt; - contains the Lua engine implementation, uses &lt;code&gt;script_lua.c&lt;/code&gt; to execute the Lua code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;functions.c&lt;/code&gt; - contains Redis Functions implementation (&lt;code&gt;FUNCTION&lt;/code&gt; command), uses &lt;code&gt;functions_lua.c&lt;/code&gt; if the function it wants to invoke needs the Lua engine.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;eval.c&lt;/code&gt; - contains the &lt;code&gt;eval&lt;/code&gt; implementation using &lt;code&gt;script_lua.c&lt;/code&gt; to invoke the Lua code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other C files&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;t_hash.c&lt;/code&gt;, &lt;code&gt;t_list.c&lt;/code&gt;, &lt;code&gt;t_set.c&lt;/code&gt;, &lt;code&gt;t_string.c&lt;/code&gt;, &lt;code&gt;t_zset.c&lt;/code&gt; and &lt;code&gt;t_stream.c&lt;/code&gt; contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client command implementations for these data types.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ae.c&lt;/code&gt; implements the Redis event loop, it&#39;s a self contained library which is simple to read and understand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sds.c&lt;/code&gt; is the Redis string library, check &lt;a href=&quot;https://github.com/antirez/sds&quot;&gt;https://github.com/antirez/sds&lt;/a&gt; for more information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;anet.c&lt;/code&gt; is a library to use POSIX networking in a simpler way compared to the raw interface exposed by the kernel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dict.c&lt;/code&gt; is an implementation of a non-blocking hash table which rehashes incrementally.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cluster.c&lt;/code&gt; implements the Redis Cluster. Probably a good read only after being very familiar with the rest of the Redis code base. If you want to read &lt;code&gt;cluster.c&lt;/code&gt; make sure to read the &lt;a href=&quot;https://redis.io/docs/latest/operate/oss_and_stack/reference/cluster-spec/&quot;&gt;Redis Cluster specification&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Anatomy of a Redis command&lt;/h2&gt; 
&lt;p&gt;All the Redis commands are defined in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;void foobarCommand(client *c) {
    printf(&quot;%s&quot;,c-&amp;gt;argv[1]-&amp;gt;ptr); /* Do something with the argument. */
    addReply(c,shared.ok); /* Reply something to the client. */
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command function is referenced by a JSON file, together with its metadata, see &lt;code&gt;commands.c&lt;/code&gt; described above for details. The command flags are documented in the comment above the &lt;code&gt;struct redisCommand&lt;/code&gt; in &lt;code&gt;server.h&lt;/code&gt;. For other details, please refer to the &lt;code&gt;COMMAND&lt;/code&gt; command. &lt;a href=&quot;https://redis.io/commands/command/&quot;&gt;https://redis.io/commands/command/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;After the command operates in some way, it returns a reply to the client, usually using &lt;code&gt;addReply()&lt;/code&gt; or a similar function defined inside &lt;code&gt;networking.c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;There are tons of command implementations inside the Redis source code that can serve as examples of actual commands implementations (e.g. pingCommand). Writing a few toy commands can be a good exercise to get familiar with the code base.&lt;/p&gt; 
&lt;p&gt;There are also many other files not described here, but it is useless to cover everything. We just want to help you with the first steps. Eventually you&#39;ll find your way inside the Redis code base :-)&lt;/p&gt; 
&lt;p&gt;Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>coturn/coturn</title>
      <link>https://github.com/coturn/coturn</link>
      <description>&lt;p&gt;coturn TURN server project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/coturn/coturn/actions/workflows/docker.yml&quot;&gt;&lt;img src=&quot;https://github.com/coturn/coturn/actions/workflows/docker.yml/badge.svg?sanitize=true&quot; alt=&quot;Docker CI&quot; title=&quot;Docker CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/coturn/coturn&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/coturn/coturn?label=Docker%20Hub%20pulls&quot; alt=&quot;Docker Hub&quot; title=&quot;Docker Hub pulls&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/coturn/coturn&quot;&gt;Docker Hub&lt;/a&gt; | &lt;a href=&quot;https://github.com/orgs/coturn/packages/container/package/coturn&quot;&gt;GitHub Container Registry&lt;/a&gt; | &lt;a href=&quot;https://quay.io/repository/coturn/coturn&quot;&gt;Quay.io&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Coturn TURN server&lt;/h1&gt; 
&lt;p&gt;coturn is a free open source implementation of TURN and STUN Server. The TURN Server is a VoIP media traffic NAT traversal server and gateway.&lt;/p&gt; 
&lt;h2&gt;Installing / Getting started&lt;/h2&gt; 
&lt;p&gt;Linux distros may have a version of coturn which you can install by&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;apt install coturn
turnserver --log-file stdout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or run coturn using docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run -d -p 3478:3478 -p 3478:3478/udp -p 5349:5349 -p 5349:5349/udp -p 49152-65535:49152-65535/udp coturn/coturn
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more details about using docker container &lt;a href=&quot;https://github.com/coturn/coturn/raw/master/docker/coturn/README.md&quot;&gt;Docker Readme&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;coturn requires following dependencies to be installed first&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;libevent2&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;openssl (to support TLS and DTLS, authorized STUN and TURN)&lt;/li&gt; 
 &lt;li&gt;libmicrohttp and &lt;a href=&quot;https://github.com/digitalocean/prometheus-client-c&quot;&gt;prometheus-client-c&lt;/a&gt; (prometheus interface)&lt;/li&gt; 
 &lt;li&gt;MariaDB/MySQL (user database)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/redis/hiredis&quot;&gt;Hiredis&lt;/a&gt; (user database, monitoring)&lt;/li&gt; 
 &lt;li&gt;SQLite (user database)&lt;/li&gt; 
 &lt;li&gt;PostgreSQL (user database)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone git@github.com:coturn/coturn.git
cd coturn
./configure
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;STUN specs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3489&quot;&gt;RFC 3489&lt;/a&gt; - &quot;classic&quot; STUN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5389&quot;&gt;RFC 5389&lt;/a&gt; - base &quot;new&quot; STUN specs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5769&quot;&gt;RFC 5769&lt;/a&gt; - test vectors for STUN protocol testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5780&quot;&gt;RFC 5780&lt;/a&gt; - NAT behavior discovery support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7443&quot;&gt;RFC 7443&lt;/a&gt; - ALPN support for STUN &amp;amp; TURN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7635&quot;&gt;RFC 7635&lt;/a&gt; - oAuth third-party TURN/STUN authorization&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;TURN specs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt; - base TURN specs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt; - TCP relaying TURN extension&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6156&quot;&gt;RFC 6156&lt;/a&gt; - IPv6 extension for TURN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7443&quot;&gt;RFC 7443&lt;/a&gt; - ALPN support for STUN &amp;amp; TURN&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7635&quot;&gt;RFC 7635&lt;/a&gt; - oAuth third-party TURN/STUN authorization&lt;/li&gt; 
 &lt;li&gt;DTLS support (&lt;a href=&quot;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&quot;&gt;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Mobile ICE (MICE) support (&lt;a href=&quot;http://tools.ietf.org/html/draft-wing-tram-turn-mobility-02&quot;&gt;http://tools.ietf.org/html/draft-wing-tram-turn-mobility-02&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TURN REST API (&lt;a href=&quot;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&quot;&gt;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Origin field in TURN (Multi-tenant TURN Server) (&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tram-stun-origin-06&quot;&gt;https://tools.ietf.org/html/draft-ietf-tram-stun-origin-06&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TURN Bandwidth draft specs (&lt;a href=&quot;http://tools.ietf.org/html/draft-thomson-tram-turn-bandwidth-01&quot;&gt;http://tools.ietf.org/html/draft-thomson-tram-turn-bandwidth-01&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TURN-bis (with dual allocation) draft specs (&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tram-turnbis-04&quot;&gt;http://tools.ietf.org/html/draft-ietf-tram-turnbis-04&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ICE and related specs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5245&quot;&gt;RFC 5245&lt;/a&gt; - ICE&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5768&quot;&gt;RFC 5768&lt;/a&gt; – ICE–SIP&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6336&quot;&gt;RFC 6336&lt;/a&gt; – ICE–IANA Registry&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6544&quot;&gt;RFC 6544&lt;/a&gt; – ICE–TCP&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5928&quot;&gt;RFC 5928&lt;/a&gt; - TURN Resolution Mechanism&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The implementation fully supports the following client-to-TURN-server protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;UDP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TCP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TLS (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc&quot;&gt;RFC 5766&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt;): including TLS1.3; ECDHE is supported.&lt;/li&gt; 
 &lt;li&gt;DTLS1.0 and DTLS1.2 (&lt;a href=&quot;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&quot;&gt;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;SCTP (experimental implementation).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Relay protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;UDP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5766&quot;&gt;RFC 5766&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;TCP (per &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6062&quot;&gt;RFC 6062&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;User databases (for user repository, with passwords or keys, if authentication is required):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;SQLite&lt;/li&gt; 
 &lt;li&gt;MariaDB/MySQL&lt;/li&gt; 
 &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;li&gt;Redis&lt;/li&gt; 
 &lt;li&gt;MongoDB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Management interfaces:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;telnet cli&lt;/li&gt; 
 &lt;li&gt;HTTPS interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Monitoring:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Redis can be used for status and statistics storage and notification&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://prometheus.io/&quot;&gt;prometheus&lt;/a&gt; interface (unavailable on apt package)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Message integrity digest algorithms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HMAC-SHA1, with MD5-hashed keys (as required by STUN and TURN standards)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;TURN authentication mechanisms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&#39;classic&#39; long-term credentials mechanism;&lt;/li&gt; 
 &lt;li&gt;TURN REST API (a modification of the long-term mechanism, for time-limited secret-based authentication, for WebRTC applications: &lt;a href=&quot;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&quot;&gt;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&lt;/a&gt;);&lt;/li&gt; 
 &lt;li&gt;experimental third-party oAuth-based client authorization option;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Performance and Load Balancing:&lt;/p&gt; 
&lt;p&gt;When used as a part of an ICE solution, for VoIP connectivity, this TURN server can handle thousands simultaneous calls per CPU (when TURN protocol is used) or tens of thousands calls when only STUN protocol is used. For virtually unlimited scalability a load balancing scheme can be used. The load balancing can be implemented with the following tools (either one or a combination of them):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;DNS SRV based load balancing;&lt;/li&gt; 
 &lt;li&gt;built-in 300 ALTERNATE-SERVER mechanism (requires 300 response support by the TURN client);&lt;/li&gt; 
 &lt;li&gt;network load-balancer server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Traffic bandwidth limitation and congestion avoidance algorithms implemented.&lt;/p&gt; 
&lt;p&gt;Target platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux (Debian, Ubuntu, Mint, CentOS, Fedora, Redhat, Amazon Linux, Arch Linux, OpenSUSE)&lt;/li&gt; 
 &lt;li&gt;BSD (FreeBSD, NetBSD, OpenBSD, DragonFlyBSD)&lt;/li&gt; 
 &lt;li&gt;Solaris 11&lt;/li&gt; 
 &lt;li&gt;Mac OS X&lt;/li&gt; 
 &lt;li&gt;Cygwin (for non-production R&amp;amp;D purposes)&lt;/li&gt; 
 &lt;li&gt;Windows (native with, e.g., MSVC toolchain)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This project can be successfully used on other &lt;code&gt;*NIX&lt;/code&gt; platforms, too, but that is not officially supported.&lt;/p&gt; 
&lt;p&gt;The implementation is supposed to be simple, easy to install and configure. The project focuses on performance, scalability and simplicity. The aim is to provide an enterprise-grade TURN solution.&lt;/p&gt; 
&lt;p&gt;To achieve high performance and scalability, the TURN server is implemented with the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;High-performance industrial-strength Network IO engine libevent2 is used&lt;/li&gt; 
 &lt;li&gt;Configurable multi-threading model implemented to allow full usage of available CPU resources (if OS allows multi-threading)&lt;/li&gt; 
 &lt;li&gt;Multiple listening and relay addresses can be configured&lt;/li&gt; 
 &lt;li&gt;Efficient memory model used&lt;/li&gt; 
 &lt;li&gt;The TURN project code can be used in a custom proprietary networking environment. In the TURN server code, an abstract networking API is used. Only couple files in the project have to be re-written to plug-in the TURN server into a proprietary environment. With this project, only implementation for standard UNIX Networking/IO API is provided, but the user can implement any other environment. The TURN server code was originally developed for a high-performance proprietary corporate environment, then adopted for UNIX Networking API&lt;/li&gt; 
 &lt;li&gt;The TURN server works as a user space process, without imposing any special requirements on the system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Project homepage: &lt;a href=&quot;https://coturn.github.io/&quot;&gt;https://coturn.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Repository: &lt;a href=&quot;https://github.com/coturn/coturn/&quot;&gt;https://github.com/coturn/coturn/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Issue tracker: &lt;a href=&quot;https://github.com/coturn/coturn/issues&quot;&gt;https://github.com/coturn/coturn/issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google group: &lt;a href=&quot;https://groups.google.com/forum/#!forum/turn-server-project-rfc5766-turn-server&quot;&gt;https://groups.google.com/forum/#!forum/turn-server-project-rfc5766-turn-server&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>google/security-research</title>
      <link>https://github.com/google/security-research</link>
      <description>&lt;p&gt;This project hosts security advisories and their accompanying proof-of-concepts related to research conducted at Google which impact non-Google owned code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Security Research&lt;/h1&gt; 
&lt;p&gt;This project hosts security advisories and their accompanying proof-of-concepts related to research conducted at Google which impact non-Google owned code.&lt;/p&gt; 
&lt;p&gt;We believe that vulnerability disclosure is a two-way street. Vendors, as well as researchers, must act responsibly. This is why Google adheres to a 90-day disclosure deadline. We notify vendors of vulnerabilities immediately, with details shared in public with the defensive community after 90 days, or sooner if the vendor releases a fix.&lt;/p&gt; 
&lt;p&gt;You can read up on our full policy at: &lt;a href=&quot;https://www.google.com/about/appsecurity/&quot;&gt;https://www.google.com/about/appsecurity/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Advisories&lt;/h2&gt; 
&lt;p&gt;The disclosure of vulnerabilities are all in the form of security advisories, which can be browsed in the &lt;a href=&quot;https://github.com/google/security-research/security/advisories?state=published&quot;&gt;Security Advisories&lt;/a&gt; page.&lt;/p&gt; 
&lt;h1&gt;License &amp;amp; Patents&lt;/h1&gt; 
&lt;p&gt;The advisories and patches posted here are free and open source.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/google/security-research/raw/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;The easiest way to contribute to our security research projects is to correct the patches when you see mistakes.&lt;/p&gt; 
&lt;p&gt;Please read up our &lt;a href=&quot;https://github.com/google/security-research/raw/master/CONTRIBUTING.md&quot;&gt;Contribution&lt;/a&gt; policy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mit-pdos/xv6-public</title>
      <link>https://github.com/mit-pdos/xv6-public</link>
      <description>&lt;p&gt;xv6 OS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;NOTE: we have stopped maintaining the x86 version of xv6, and switched our efforts to the RISC-V version (&lt;a href=&quot;https://github.com/mit-pdos/xv6-riscv.git&quot;&gt;https://github.com/mit-pdos/xv6-riscv.git&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;xv6 is a re-implementation of Dennis Ritchie&#39;s and Ken Thompson&#39;s Unix Version 6 (v6). xv6 loosely follows the structure and style of v6, but is implemented for a modern x86-based multiprocessor using ANSI C.&lt;/p&gt; 
&lt;p&gt;ACKNOWLEDGMENTS&lt;/p&gt; 
&lt;p&gt;xv6 is inspired by John Lions&#39;s Commentary on UNIX 6th Edition (Peer to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14, 2000)). See also &lt;a href=&quot;https://pdos.csail.mit.edu/6.828/&quot;&gt;https://pdos.csail.mit.edu/6.828/&lt;/a&gt;, which provides pointers to on-line resources for v6.&lt;/p&gt; 
&lt;p&gt;xv6 borrows code from the following sources: JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others) Plan 9 (entryother.S, mp.h, mp.c, lapic.c) FreeBSD (ioapic.c) NetBSD (console.c)&lt;/p&gt; 
&lt;p&gt;The following people have made contributions: Russ Cox (context switching, locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin Clements.&lt;/p&gt; 
&lt;p&gt;We are also grateful for the bug reports and patches contributed by Silas Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,Shivam Handa, Bryan Henry, Jim Huang, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Eddie Kohler, Austin Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider, Greg Price, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Cam Tenny, tyfkda, Rafael Ubal, Warren Toomey, Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang Wei.&lt;/p&gt; 
&lt;p&gt;The code in the files that constitute xv6 is Copyright 2006-2018 Frans Kaashoek, Robert Morris, and Russ Cox.&lt;/p&gt; 
&lt;p&gt;ERROR REPORTS&lt;/p&gt; 
&lt;p&gt;We don&#39;t process error reports (see note on top of this file).&lt;/p&gt; 
&lt;p&gt;BUILDING AND RUNNING XV6&lt;/p&gt; 
&lt;p&gt;To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run &quot;make&quot;. On non-x86 or non-ELF machines (like OS X, even on x86), you will need to install a cross-compiler gcc suite capable of producing x86 ELF binaries (see &lt;a href=&quot;https://pdos.csail.mit.edu/6.828/&quot;&gt;https://pdos.csail.mit.edu/6.828/&lt;/a&gt;). Then run &quot;make TOOLPREFIX=i386-jos-elf-&quot;. Now install the QEMU PC simulator and run &quot;make qemu&quot;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>opa334/Dopamine</title>
      <link>https://github.com/opa334/Dopamine</link>
      <description>&lt;p&gt;Dopamine is a semi-untethered jailbreak for iOS 15 and 16&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://github.com/opa334/Dopamine/assets/52459150/ed04dd3e-d879-456d-9aa3-d4ed44819c7e&quot; width=&quot;64&quot;&gt; 
&lt;h1&gt;Dopamine&lt;/h1&gt; 
&lt;p&gt;A rootless semi-untethered jailbreak for iOS 15.0 - 16.5.1 (arm64e) and iOS 15.0 - 16.6.1 (arm64). More details will follow here soon.&lt;/p&gt; 
&lt;p&gt;Please note that all issues related to version support will be deleted without response.&lt;/p&gt; 
&lt;p&gt;Official website / download: &lt;a href=&quot;https://ellekit.space/dopamine/&quot;&gt;https://ellekit.space/dopamine/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openssl/openssl</title>
      <link>https://github.com/openssl/openssl</link>
      <description>&lt;p&gt;TLS/SSL and crypto library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the OpenSSL Project&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.openssl.org&quot; title=&quot;OpenSSL Homepage&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/openssl/openssl/master/doc/images/openssl.svg?sanitize=true&quot; alt=&quot;openssl logo&quot; title=&quot;OpenSSL Logo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/openssl/openssl/actions?query=workflow%3A%22GitHub+CI%22&quot; title=&quot;GitHub Actions CI&quot;&gt;&lt;img src=&quot;https://github.com/openssl/openssl/workflows/GitHub%20CI/badge.svg?sanitize=true&quot; alt=&quot;github actions ci badge&quot; title=&quot;GitHub Actions CI Status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/os-zoo.yml/badge.svg?sanitize=true&quot; alt=&quot;Nightly OS Zoo ci badge&quot;&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/provider-compatibility.yml/badge.svg?sanitize=true&quot; alt=&quot;Provider Compatibility&quot;&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/run_quic_interop.yml/badge.svg?sanitize=true&quot; alt=&quot;Quic Interop&quot;&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/run-checker-daily.yml/badge.svg?sanitize=true&quot; alt=&quot;Daily checks&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenSSL is a robust, commercial-grade, full-featured Open Source Toolkit for the TLS (formerly SSL), DTLS and QUIC (currently client side only) protocols.&lt;/p&gt; 
&lt;p&gt;The protocol implementations are based on a full-strength general purpose cryptographic library, which can also be used stand-alone. Also included is a cryptographic module validated to conform with FIPS standards.&lt;/p&gt; 
&lt;p&gt;OpenSSL is descended from the SSLeay library developed by Eric A. Young and Tim J. Hudson.&lt;/p&gt; 
&lt;p&gt;The official Home Page of the OpenSSL Project is &lt;a href=&quot;https://www.openssl.org&quot; title=&quot;OpenSSL Homepage&quot;&gt;www.openssl.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#download&quot;&gt;Download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#build-and-install&quot;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#legalities&quot;&gt;Legalities&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;The OpenSSL toolkit includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libssl&lt;/strong&gt; an implementation of all TLS protocol versions up to TLSv1.3 (&lt;a href=&quot;https://tools.ietf.org/html/rfc8446&quot;&gt;RFC 8446&lt;/a&gt;), DTLS protocol versions up to DTLSv1.2 (&lt;a href=&quot;https://tools.ietf.org/html/rfc6347&quot;&gt;RFC 6347&lt;/a&gt;) and the QUIC (currently client side only) version 1 protocol (&lt;a href=&quot;https://tools.ietf.org/html/rfc9000&quot;&gt;RFC 9000&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libcrypto&lt;/strong&gt; a full-strength general purpose cryptographic library. It constitutes the basis of the TLS implementation, but can also be used independently.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; the OpenSSL command line tool, a swiss army knife for cryptographic tasks, testing and analyzing. It can be used for&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;creation of key parameters&lt;/li&gt; 
   &lt;li&gt;creation of X.509 certificates, CSRs and CRLs&lt;/li&gt; 
   &lt;li&gt;calculation of message digests&lt;/li&gt; 
   &lt;li&gt;encryption and decryption&lt;/li&gt; 
   &lt;li&gt;SSL/TLS/DTLS and client and server tests&lt;/li&gt; 
   &lt;li&gt;QUIC client tests&lt;/li&gt; 
   &lt;li&gt;handling of S/MIME signed or encrypted mail&lt;/li&gt; 
   &lt;li&gt;and more...&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Download&lt;/h1&gt; 
&lt;h2&gt;For Production Use&lt;/h2&gt; 
&lt;p&gt;Source code tarballs of the official releases can be downloaded from &lt;a href=&quot;https://openssl-library.org/source/&quot;&gt;openssl-library.org/source/&lt;/a&gt;. The OpenSSL project does not distribute the toolkit in binary form.&lt;/p&gt; 
&lt;p&gt;However, for a large variety of operating systems precompiled versions of the OpenSSL toolkit are available. In particular, on Linux and other Unix operating systems, it is normally recommended to link against the precompiled shared libraries provided by the distributor or vendor.&lt;/p&gt; 
&lt;p&gt;We also maintain a list of third parties that produce OpenSSL binaries for various Operating Systems (including Windows) on the &lt;a href=&quot;https://wiki.openssl.org/index.php/Binaries&quot; title=&quot;List of third party OpenSSL binaries&quot;&gt;Binaries&lt;/a&gt; page on our wiki.&lt;/p&gt; 
&lt;h2&gt;For Testing and Development&lt;/h2&gt; 
&lt;p&gt;Although testing and development could in theory also be done using the source tarballs, having a local copy of the git repository with the entire project history gives you much more insight into the code base.&lt;/p&gt; 
&lt;p&gt;The main OpenSSL Git repository is private. There is a public GitHub mirror of it at &lt;a href=&quot;https://github.com/openssl/openssl&quot; title=&quot;OpenSSL GitHub Mirror&quot;&gt;github.com/openssl/openssl&lt;/a&gt;, which is updated automatically from the former on every commit.&lt;/p&gt; 
&lt;p&gt;A local copy of the Git repository can be obtained by cloning it from the GitHub mirror using&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/openssl/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you intend to contribute to OpenSSL, either to fix bugs or contribute new features, you need to fork the GitHub mirror and clone your public fork instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/yourname/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is necessary because all development of OpenSSL nowadays is done via GitHub pull requests. For more details, see &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&quot;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Build and Install&lt;/h1&gt; 
&lt;p&gt;After obtaining the Source, have a look at the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/INSTALL.md&quot;&gt;INSTALL&lt;/a&gt; file for detailed instructions about building and installing OpenSSL. For some platforms, the installation instructions are amended by a platform specific document.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-UNIX.md&quot;&gt;Notes for UNIX-like platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-ANDROID.md&quot;&gt;Notes for Android platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-WINDOWS.md&quot;&gt;Notes for Windows platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-DJGPP.md&quot;&gt;Notes for the DOS platform with DJGPP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VMS.md&quot;&gt;Notes for the OpenVMS platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-PERL.md&quot;&gt;Notes on Perl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VALGRIND.md&quot;&gt;Notes on Valgrind&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Specific notes on upgrading to OpenSSL 3.x from previous versions can be found in the &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man7/ossl-guide-migration.html&quot; title=&quot;OpenSSL Migration Guide&quot;&gt;ossl-guide-migration(7ossl)&lt;/a&gt; manual page.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;h2&gt;README Files&lt;/h2&gt; 
&lt;p&gt;There are some README.md files in the top level of the source distribution containing additional information on specific topics.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-QUIC.md&quot;&gt;Information about the OpenSSL QUIC protocol implementation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-PROVIDERS.md&quot;&gt;Information about the OpenSSL Provider architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-FIPS.md&quot;&gt;Information about using the OpenSSL FIPS validated module&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-ENGINES.md&quot;&gt;Information about the legacy OpenSSL Engine architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The OpenSSL Guide&lt;/h2&gt; 
&lt;p&gt;There are some tutorial and introductory pages on some important OpenSSL topics within the &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man7/ossl-guide-introduction.html&quot; title=&quot;An introduction to OpenSSL&quot;&gt;OpenSSL Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual Pages&lt;/h2&gt; 
&lt;p&gt;The manual pages for the master branch and all current stable releases are available online.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/manmaster&quot;&gt;OpenSSL master&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/man3.0&quot;&gt;OpenSSL 3.0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/man3.1&quot;&gt;OpenSSL 3.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/man3.2&quot;&gt;OpenSSL 3.2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demos&lt;/h2&gt; 
&lt;p&gt;There are numerous source code demos for using various OpenSSL capabilities in the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/demos&quot;&gt;demos subfolder&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Wiki&lt;/h2&gt; 
&lt;p&gt;There is a Wiki at &lt;a href=&quot;https://wiki.openssl.org&quot; title=&quot;OpenSSL Wiki&quot;&gt;wiki.openssl.org&lt;/a&gt; which is currently not very active. It contains a lot of useful information, not all of which is up-to-date.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;OpenSSL is licensed under the Apache License 2.0, which means that you are free to get and use it for commercial and non-commercial purposes as long as you fulfill its conditions.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Support&lt;/h1&gt; 
&lt;p&gt;There are various ways to get in touch. The correct channel depends on your requirement. See the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;If you are interested and willing to contribute to the OpenSSL project, please take a look at the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Legalities&lt;/h1&gt; 
&lt;p&gt;A number of nations restrict the use or export of cryptography. If you are potentially subject to such restrictions, you should seek legal advice before attempting to develop or distribute cryptographic code.&lt;/p&gt; 
&lt;h1&gt;Copyright&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 1998-2025 The OpenSSL Project Authors&lt;/p&gt; 
&lt;p&gt;Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson&lt;/p&gt; 
&lt;p&gt;All rights reserved.&lt;/p&gt; 
&lt;!-- Links  --&gt; 
&lt;!-- Logos and Badges --&gt;</description>
    </item>
    
    <item>
      <title>bellard/quickjs</title>
      <link>https://github.com/bellard/quickjs</link>
      <description>&lt;p&gt;Public repository of the QuickJS Javascript Engine.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The main documentation is in doc/quickjs.pdf or doc/quickjs.html.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>i486/VxKex</title>
      <link>https://github.com/i486/VxKex</link>
      <description>&lt;p&gt;Windows 7 API Extensions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;VxKex is a set of API extensions for Windows 7 that allow some Windows 8, 8.1 and 10-exclusive applications to run on Windows 7.&lt;/p&gt; 
&lt;p&gt;To download and install, see the &lt;a href=&quot;https://github.com/i486/VxKex/releases&quot;&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After installation, usage is easy: just right click on a program (.exe or .msi), open the Properties dialog, and select the VxKex tab. Then, check the check box which says &quot;Enable VxKex for this program&quot;, and try to run the program.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/i486/VxKex/main/example-screenshot.png&quot; alt=&quot;VxKex configuration GUI&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Some programs require additional configuration. There&#39;s a file called &lt;strong&gt;&quot;Application Compatibility List.docx&quot;&lt;/strong&gt; inside the VxKex installation folder (which is C:\Program Files\VxKex by default) which details these steps, but for the most part, all configuration is self-explanatory.&lt;/p&gt; 
&lt;p&gt;If you are a developer, source code is provided as a 7z file on the releases page.&lt;/p&gt; 
&lt;h1&gt;FAQ&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Q: Does it work for games???&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; At the moment, VxKex is not intended for games, so you will probably have limited success. I hope to address this shortcoming in a future release.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: What applications are supported?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; The list of compatible applications includes, but is not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bespoke Synth&lt;/li&gt; 
 &lt;li&gt;Blender&lt;/li&gt; 
 &lt;li&gt;Blockbench&lt;/li&gt; 
 &lt;li&gt;Calibre&lt;/li&gt; 
 &lt;li&gt;Chromium (including Ungoogled Chromium)&lt;/li&gt; 
 &lt;li&gt;Citra&lt;/li&gt; 
 &lt;li&gt;Commander Wars&lt;/li&gt; 
 &lt;li&gt;Cygwin&lt;/li&gt; 
 &lt;li&gt;Dasel&lt;/li&gt; 
 &lt;li&gt;Discord Canary&lt;/li&gt; 
 &lt;li&gt;ElectronMail&lt;/li&gt; 
 &lt;li&gt;Firefox&lt;/li&gt; 
 &lt;li&gt;GIMP (2.99.18)&lt;/li&gt; 
 &lt;li&gt;GitHub Desktop&lt;/li&gt; 
 &lt;li&gt;HandBrake&lt;/li&gt; 
 &lt;li&gt;Kodi&lt;/li&gt; 
 &lt;li&gt;Life is Strange: True Colors 4.25&lt;/li&gt; 
 &lt;li&gt;MKVToolNix&lt;/li&gt; 
 &lt;li&gt;MongoDB&lt;/li&gt; 
 &lt;li&gt;MPC-Qt&lt;/li&gt; 
 &lt;li&gt;MPV&lt;/li&gt; 
 &lt;li&gt;MPV.NET&lt;/li&gt; 
 &lt;li&gt;Opera&lt;/li&gt; 
 &lt;li&gt;osu!lazer&lt;/li&gt; 
 &lt;li&gt;Python&lt;/li&gt; 
 &lt;li&gt;qBittorrent&lt;/li&gt; 
 &lt;li&gt;QMMP&lt;/li&gt; 
 &lt;li&gt;Qt Creator&lt;/li&gt; 
 &lt;li&gt;Rufus&lt;/li&gt; 
 &lt;li&gt;Steel Bank Common Lisp&lt;/li&gt; 
 &lt;li&gt;Spotify&lt;/li&gt; 
 &lt;li&gt;Steinberg SpectraLayers&lt;/li&gt; 
 &lt;li&gt;TeamTalk&lt;/li&gt; 
 &lt;li&gt;VSCode and VSCodium&lt;/li&gt; 
 &lt;li&gt;WinDbg (classic from Windows 11 SDK, and preview)&lt;/li&gt; 
 &lt;li&gt;Yuzu (gameplay was not tested)&lt;/li&gt; 
 &lt;li&gt;Zig&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;strong&gt;Application Compatibility List.docx&lt;/strong&gt; file, which is installed together with VxKex, for more information.&lt;/p&gt; 
&lt;p&gt;The majority of Qt6 applications will work, and many Electron applications will work as well.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Does VxKex modify system files? Will it make my system unstable?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; VxKex does not modify any system files. Its effect on the whole system is extremely minimal. No background services are used, no global hooks are installed, and the shell extensions and DLLs that are loaded have minimal impact and can be disabled if needed. You can rest assured that your Windows 7 will remain as stable as it always is.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Do I need to have specific updates installed?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; VxKex is only designed to work with Service Pack 1 installed. Users of Windows 7 RTM can try to use it, but I don&#39;t know if it will install or work. Many programs require KB2533623 and KB2670838 in order to run. It is a good idea to install those two updates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: If I have ESUs (Extended Security Updates) installed, can I use VxKex?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes. There is no problem with ESUs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Do console applications work with VxKex?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes. After you have enabled VxKex for a program you can use it through the command prompt as normal.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Can I use this with Windows 8 or 8.1?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; VxKex is designed for use only with Windows 7. If you use Windows 8 or 8.1, it&#39;s unlikely that VxKex will do anything useful, but you&#39;re free to install it anyway and see what happens.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How does VxKex work?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; VxKex works by loading a DLL into each program where VxKex is enabled. This is accomplished through using the IFEO (Image File Execution Options) registry key.&lt;/p&gt; 
&lt;p&gt;Specifically, the &quot;VerifierDlls&quot; value is set to point to a VxKex DLL. This DLL then loads into the process.&lt;/p&gt; 
&lt;p&gt;API extension is accomplished by editing the program&#39;s DLL import table so that instead of importing from Windows 8/8.1/10 DLLs, it imports to VxKex DLLs instead. These VxKex DLLs contain implementations of Windows API functions which were introduced in newer versions of Windows.&lt;/p&gt; 
&lt;h1&gt;Donations&lt;/h1&gt; 
&lt;p&gt;If you would like to support development, consider making a donation.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://paypal.me/vxiiduu&quot;&gt;https://paypal.me/vxiiduu&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>riscv-collab/riscv-gnu-toolchain</title>
      <link>https://github.com/riscv-collab/riscv-gnu-toolchain</link>
      <description>&lt;p&gt;GNU toolchain for RISC-V, including GCC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RISC-V GNU Compiler Toolchain&lt;/h1&gt; 
&lt;p&gt;This is the RISC-V C and C++ cross-compiler. It supports two build modes: a generic ELF/Newlib toolchain and a more sophisticated Linux-ELF/glibc toolchain.&lt;/p&gt; 
&lt;h3&gt;Getting the sources&lt;/h3&gt; 
&lt;p&gt;This repository uses submodules, but submodules will fetch automatically on demand, so &lt;code&gt;--recursive&lt;/code&gt; or &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; is not needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/riscv/riscv-gnu-toolchain
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Warning: git clone takes around 6.65 GB of disk and download size&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;Several standard packages are needed to build the toolchain.&lt;/p&gt; 
&lt;p&gt;On Ubuntu, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install autoconf automake autotools-dev curl python3 python3-pip python3-tomli libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev ninja-build git cmake libglib2.0-dev libslirp-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora/CentOS/RHEL OS, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install autoconf automake python3 libmpc-devel mpfr-devel gmp-devel gawk  bison flex texinfo patchutils gcc gcc-c++ zlib-devel expat-devel libslirp-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Arch Linux, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -Syu curl python3 libmpc mpfr gmp base-devel texinfo gperf patchutils bc zlib expat libslirp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also available for Arch users on the AUR: &lt;a href=&quot;https://aur.archlinux.org/packages/riscv-gnu-toolchain-bin&quot;&gt;https://aur.archlinux.org/packages/riscv-gnu-toolchain-bin&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;On macOS, you can use &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt; to install the dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install python3 gawk gnu-sed make gmp mpfr libmpc isl zlib expat texinfo flock libslirp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When executing the instructions in this README, please use &lt;code&gt;gmake&lt;/code&gt; instead of &lt;code&gt;make&lt;/code&gt; to use the newly installed version of make. To build the glibc (Linux) on macOS, you will need to build within a case-sensitive file system. The simplest approach is to create and mount a new disk image with a case sensitive format. Make sure that the mount point does not contain spaces. This is not necessary to build newlib or gcc itself on macOS.&lt;/p&gt; 
&lt;p&gt;This process will start by downloading about 200 MiB of upstream sources, then will patch, build, and install the toolchain. If a local cache of the upstream sources exists in $(DISTDIR), it will be used; the default location is /var/cache/distfiles. Your computer will need about 8 GiB of disk space to complete the process.&lt;/p&gt; 
&lt;h3&gt;Installation (Newlib)&lt;/h3&gt; 
&lt;p&gt;To build the Newlib cross-compiler, pick an install path (that is writeable). If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;. Then, simply run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should now be able to use riscv64-unknown-elf-gcc and its cousins.&lt;/p&gt; 
&lt;p&gt;Note: If you&#39;re planning to use an external library that replaces part of newlib (for example &lt;code&gt;libgloss-htif&lt;/code&gt;), &lt;a href=&quot;https://raw.githubusercontent.com/riscv-collab/riscv-gnu-toolchain/master/#ensuring-code-model-consistency&quot;&gt;read the FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation (Linux)&lt;/h3&gt; 
&lt;p&gt;To build the Linux cross-compiler, pick an install path (that is writeable). If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;. Then, simply run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv
make linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The build defaults to targeting RV64GC (64-bit) with glibc, even on a 32-bit build environment. To build the 32-bit RV32GC toolchain, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --with-arch=rv32gc --with-abi=ilp32d
make linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you prefer musl libc over glibc, configure just like above and opt for &lt;code&gt;make musl&lt;/code&gt; instead of &lt;code&gt;make linux&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Supported architectures are rv32i or rv64i plus standard extensions (a)tomics, (m)ultiplication and division, (f)loat, (d)ouble, or (g)eneral for MAFD.&lt;/p&gt; 
&lt;p&gt;Supported ABIs are ilp32 (32-bit soft-float), ilp32d (32-bit hard-float), ilp32f (32-bit with single-precision in registers and double in memory, niche use only), lp64 lp64f lp64d (same but with 64-bit long and pointers).&lt;/p&gt; 
&lt;h3&gt;Installation (Newlib/Linux multilib)&lt;/h3&gt; 
&lt;p&gt;To build either cross-compiler with support for both 32-bit and 64-bit, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --enable-multilib
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then either &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;make linux&lt;/code&gt; or &lt;code&gt;make musl&lt;/code&gt; for the Newlib, Linux glibc-based or Linux musl libc-based cross-compiler, respectively.&lt;/p&gt; 
&lt;p&gt;The multilib compiler will have the prefix riscv64-unknown-elf- or riscv64-unknown-linux-gnu- but will be able to target both 32-bit and 64-bit systems. It will support the most common &lt;code&gt;-march&lt;/code&gt;/&lt;code&gt;-mabi&lt;/code&gt; options, which can be seen by using the &lt;code&gt;--print-multi-lib&lt;/code&gt; flag on either cross-compiler.&lt;/p&gt; 
&lt;p&gt;Linux toolchain has an additional option &lt;code&gt;--enable-default-pie&lt;/code&gt; to control the default PIE enablement for GCC, which is disable by default.&lt;/p&gt; 
&lt;p&gt;To customize the enabled languages, use option &lt;code&gt;--with-languages=&lt;/code&gt;. For example, if you want to enable &lt;code&gt;c,c++,fortran&lt;/code&gt;, use &lt;code&gt;./configure --with-languages=c,c++,fortran&lt;/code&gt;. This option only takes effect for the GNU toolchain.&lt;/p&gt; 
&lt;h3&gt;Troubleshooting Build Problems&lt;/h3&gt; 
&lt;p&gt;Builds work best if installing into an empty directory. If you build a hard-float toolchain and then try to build a soft-float toolchain with the same --prefix directory, then the build scripts may get confused and exit with a linker error complaining that hard float code can&#39;t be linked with soft float code. Removing the existing toolchain first, or using a different prefix for the second build, avoids the problem. It is OK to build one newlib and one linux toolchain with the same prefix. But you should avoid building two newlib or two linux toolchains with the same prefix.&lt;/p&gt; 
&lt;p&gt;If building a linux toolchain on a MacOS system, or on a Windows system using the Linux subsystem or cygwin, you must ensure that the filesystem is case-sensitive. A build on a case-insensitive filesystem will fail when building glibc because *.os and *.oS files will clobber each other during the build eventually resulting in confusing link errors.&lt;/p&gt; 
&lt;p&gt;CentOS (and RHEL) provide old GNU tools versions that may be too old to build a RISC-V toolchain. There is an alternate toolset provided that includes current versions of the GNU tools. This is the devtoolset provided as part of the Software Collection service. For more info, see the &lt;a href=&quot;https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/&quot;&gt;devtoolset-7&lt;/a&gt; URL. There are various versions of the devtoolset that are available, so you can also try other versions of it, but we have at least one report that devtoolset-7 works.&lt;/p&gt; 
&lt;h3&gt;Advanced Options&lt;/h3&gt; 
&lt;p&gt;There are a number of additional options that may be passed to configure. See &#39;./configure --help&#39; for more details.&lt;/p&gt; 
&lt;p&gt;Also you can define extra flags to pass to specific projects: &lt;code&gt;BINUTILS_NATIVE_FLAGS_EXTRA, BINUTILS_TARGET_FLAGS_EXTRA, GCC_EXTRA_CONFIGURE_FLAGS, GDB_NATIVE_FLAGS_EXTRA, GDB_TARGET_FLAGS_EXTRA, GLIBC_TARGET_FLAGS_EXTRA, NEWLIB_TARGET_FLAGS_EXTRA&lt;/code&gt;. Example: &lt;code&gt;GCC_EXTRA_CONFIGURE_FLAGS=--with-gmp=/opt/gmp make linux&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Set default ISA spec version&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;--with-isa-spec=&lt;/code&gt; can specify the default version of the RISC-V Unprivileged (formerly User-Level) ISA specification.&lt;/p&gt; 
&lt;p&gt;Possible options are: &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;20190608&lt;/code&gt; and &lt;code&gt;20191213&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The default version is &lt;code&gt;20191213&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;More details about this option you can refer this post &lt;a href=&quot;https://groups.google.com/a/groups.riscv.org/g/sw-dev/c/aE1ZeHHCYf4&quot;&gt;RISC-V GNU toolchain bumping default ISA spec to 20191213&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Build with customized multi-lib configure.&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;--with-multilib-generator=&lt;/code&gt; can specify what multilibs to build. The argument is a semicolon separated list of values, possibly consisting of a single value. Currently only supported for riscv*-&lt;em&gt;-elf&lt;/em&gt;. The accepted values and meanings are given below.&lt;/p&gt; 
&lt;p&gt;Every config is constructed with four components: architecture string, ABI, reuse rule with architecture string and reuse rule with sub-extension.&lt;/p&gt; 
&lt;p&gt;Re-use part support expansion operator (*) to simplify the combination of different sub-extensions, example 4 demonstrate how it uses and works.&lt;/p&gt; 
&lt;p&gt;Example 1: Add multi-lib support for rv32i with ilp32.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv32i-ilp32--&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example 2: Add multi-lib support for rv32i with ilp32 and rv32imafd with ilp32.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv32i-ilp32--;rv32imafd-ilp32--&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example 3: Add multi-lib support for rv32i with ilp32; rv32im with ilp32 and rv32ic with ilp32 will reuse this multi-lib set.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv32i-ilp32-rv32im-c&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example 4: Add multi-lib support for rv64ima with lp64; rv64imaf with lp64, rv64imac with lp64 and rv64imafc with lp64 will reuse this multi-lib set.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv64ima-lp64--f*c&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Enabling QEMU System Targets&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;--enable-qemu-system&lt;/code&gt; configuration flag allows you to include QEMU system emulation targets in addition to the default user-mode emulation.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enabled targets&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;riscv64-linux-user&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv32-linux-user&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv64-softmmu&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv32-softmmu&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Default targets&lt;/strong&gt; (without this flag):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;riscv64-linux-user&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv32-linux-user&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use this option if you need full system emulation for RISC-V. Example configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./configure --enable-qemu-system --prefix=/opt/riscv
make build-sim SIM=qemu
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This flag is particularly useful for developers testing and emulating full RISC-V systems rather than just user-space applications.&lt;/p&gt; 
&lt;h3&gt;Test Suite&lt;/h3&gt; 
&lt;p&gt;The Dejagnu test suite has been ported to RISC-V. This can be run with a simulator for the elf and linux toolchains. The simulator can be selected by the SIM variable in the Makefile, e.g. SIM=qemu, SIM=gdb, or SIM=spike (experimental).In addition, the simulator can also be selected with the configure time option &lt;code&gt;--with-sim=&lt;/code&gt;.However, the testsuite allowlist is only maintained for qemu.Other simulators might get extra failures.&lt;/p&gt; 
&lt;h4&gt;Additional Prerequisite&lt;/h4&gt; 
&lt;p&gt;A helper script to setup testing environment requires &lt;a href=&quot;https://github.com/eliben/pyelftools&quot;&gt;pyelftools&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On newer versions of Ubuntu, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python3-pyelftools
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On newer versions of Fedora and CentOS/RHEL OS (9 or later), executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install python3-pyelftools
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Arch Linux, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -Syyu python-pyelftools python-sphinx python-sphinx_rtd_theme ninja
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your distribution/OS does not have pyelftools package, you can install it using PIP.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Assuming that PIP is installed
$ pip3 install --user pyelftools
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Testing GCC&lt;/h4&gt; 
&lt;p&gt;To test GCC, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=$RISCV --disable-linux --with-arch=rv64ima # or --with-arch=rv32ima
make newlib
make report-newlib SIM=gdb # Run with gdb simulator

./configure --prefix=$RISCV
make linux
make report-linux SIM=qemu # Run with qemu

./configure --prefix=$RISCV --with-sim=spike
make linux
make report               # Run with spike
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;spike only support rv64* bare-metal/elf toolchain.&lt;/li&gt; 
 &lt;li&gt;gdb simulator only support bare-metal/elf toolchain.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Selecting the tests to run in GCC&#39;s regression test suite&lt;/h4&gt; 
&lt;p&gt;By default GCC will execute all tests of its regression test suite. While running them in parallel (e.g. &lt;code&gt;make -j$(nproc) report&lt;/code&gt;) will significantly speed up the execution time on multi-processor systems, the required time for executing all tests is usually too high for typical development cycles. Therefore GCC allows to select the tests that are being executed using the environment variable &lt;code&gt;RUNTESTFLAGS&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To restrict a test run to only RISC-V specific tests the following command can be used:&lt;/p&gt; 
&lt;p&gt;RUNTESTFLAGS=&quot;riscv.exp&quot; make report&lt;/p&gt; 
&lt;p&gt;To restrict a test run to only RISC-V specific tests with match the pattern &quot;zb*.c&quot; and &quot;sm*.c&quot; the following command can be used:&lt;/p&gt; 
&lt;p&gt;RUNTESTFLAGS=&quot;riscv.exp=zb*.c\ sm*.c&quot; make report&lt;/p&gt; 
&lt;h4&gt;Testing GCC, Binutils, and glibc of a Linux toolchain&lt;/h4&gt; 
&lt;p&gt;The default Makefile target to run toolchain tests is &lt;code&gt;report&lt;/code&gt;. This will run all tests of the GCC regression test suite. Alternatively, the following command can be used to do the same:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check-gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following command can be used to run the Binutils tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check-binutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command below can be used to run the glibc tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check-glibc-linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Adding more arch/abi combination for testing without introducing multilib&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; can be used when you want to test more combination of arch/ABI, for example: built a linux toolchain with multilib with &lt;code&gt;rv64gc/lp64d&lt;/code&gt; and &lt;code&gt;rv64imac/lp64&lt;/code&gt;, but you want to test more configuration like &lt;code&gt;rv64gcv/lp64d&lt;/code&gt; or &lt;code&gt;rv64gcv_zba/lp64d&lt;/code&gt;, then you can use --with-extra-multilib-test to specify that via &lt;code&gt;--with-extra-multilib-test=&quot;rv64gcv-lp64d;rv64gcv_zba-lp64d&quot;&lt;/code&gt;, then the testing will run for &lt;code&gt;rv64gc/lp64d&lt;/code&gt;, &lt;code&gt;rv64imac/lp64&lt;/code&gt;, &lt;code&gt;rv64gcv/lp64d&lt;/code&gt; and &lt;code&gt;rv64gcv_zba/lp64d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; support bare-metal and linux toolchain and support even multilib is disable, but the user must ensure extra multilib test configuration can be work with existing lib/multilib, e.g. rv32gcv/ilp32 test can&#39;t work if multilib didn&#39;t have any rv32 multilib.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; also support more complicated format to fit the requirements of end-users. First of all, the argument is a list of test configurations. Each test configuration are separated by &lt;code&gt;;&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;rv64gcv-lp64d;rv64_zvl256b_zvfh-lp64d&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For each test configuration, it has two parts, aka required arch-abi part and optional build flags. We leverage &lt;code&gt;:&lt;/code&gt; to separate them with some restrictions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;arch-abi should be required and there must be only one at the begining of the test configuration.&lt;/li&gt; 
 &lt;li&gt;build flags is a array-like flags after the arch-abi, there will be two ways to arrange them, aka AND, OR operation.&lt;/li&gt; 
 &lt;li&gt;If you would like the flags in build flags array acts on arch-abi &lt;strong&gt;simultaneously&lt;/strong&gt;, you can use &lt;code&gt;:&lt;/code&gt; to separate them. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic:--param=riscv-autovec-preference=fixed-vlmax
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will be consider as one target board same as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic/--param=riscv-autovec-preference=fixed-vlmax
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you would like the flags in build flags array acts on arch-abi &lt;strong&gt;respectively&lt;/strong&gt;, you can use &#39;,&#39; to separate them. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic,--param=riscv-autovec-preference=fixed-vlmax
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will be consider as two target boards same as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-preference=fixed-vlmax
riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;However, you can also leverage AND(&lt;code&gt;:&lt;/code&gt;), OR(&lt;code&gt;,&lt;/code&gt;) operator together but the OR(&lt;code&gt;,&lt;/code&gt;) will always have the higher priority. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic:--param=riscv-autovec-preference=fixed-vlmax,--param=riscv-autovec-lmul=m2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will be consider as tow target boars same as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic/--param=riscv-autovec-preference=fixed-vlmax
riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=m2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LLVM / clang&lt;/h3&gt; 
&lt;p&gt;LLVM can be used in combination with the RISC-V GNU Compiler Toolchain to build RISC-V applications. To build LLVM with C and C++ support the configure flag &lt;code&gt;--enable-llvm&lt;/code&gt; can be used.&lt;/p&gt; 
&lt;p&gt;E.g. to build LLVM on top of a RV64 Linux toolchain the following commands can be used:&lt;/p&gt; 
&lt;p&gt;./configure --prefix=$RISCV --enable-llvm --enable-linux make&lt;/p&gt; 
&lt;p&gt;Note, that a combination of &lt;code&gt;--enable-llvm&lt;/code&gt; and multilib configuration flags is not supported.&lt;/p&gt; 
&lt;p&gt;Below are examples how to build a rv64gc Linux/newlib toolchain with LLVM support, how to use it to build a C and a C++ application using clang, and how to execute the generated binaries using QEMU.&lt;/p&gt; 
&lt;p&gt;Build Linux toolchain and run examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Build rv64gc toolchain with LLVM
./configure --prefix=$RISCV --enable-llvm --enable-linux --with-arch=rv64gc --with-abi=lp64d
make -j$(nproc) all build-sim SIM=qemu
# Build C application with clang
$RISCV/bin/clang -march=rv64imafdc -o hello_world hello_world.c
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world
# Build C++ application with clang
$RISCV/bin/clang++ -march=rv64imafdc -stdlib=libc++ -o hello_world_cpp hello_world_cpp.cxx
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world_cpp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build newlib toolchain and run examples (don&#39;t work with &lt;code&gt;--with-multilib-generator=&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Build rv64gc bare-metal toolchain with LLVM
./configure --prefix=$RISCV --enable-llvm --disable-linux --with-arch=rv64gc --with-abi=lp64d
make -j$(nproc) all build-sim SIM=qemu
# Build C application with clang
$RISCV/bin/clang -march=rv64imafdc -o hello_world hello_world.c
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world
# Build C++ application with clang using static link
$RISCV/bin/clang++ -march=rv64imafdc -static -o hello_world_cpp hello_world_cpp.cxx
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world_cpp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development&lt;/h3&gt; 
&lt;p&gt;This section is only for developer or advanced user, or you want to build toolchain with your own source tree.&lt;/p&gt; 
&lt;h4&gt;Update Source Tree&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; contain stable but not latest source for each submodule, in case you want to using latest develoment tree, you can use following command to upgrade all submodule.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git submodule update --remote
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can upgrade specific submodule only.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git submodule update --remote &amp;lt;component&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, upgrade gcc only, you can using following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git submodule update --remote gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;How to Check Which Branch are Used for Specific submodule&lt;/h4&gt; 
&lt;p&gt;The branch info has recorded in &lt;code&gt;.gitmodules&lt;/code&gt; file, which can set or update via &lt;code&gt;git submodule add -b&lt;/code&gt; or &lt;code&gt;git submodule set-branch&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;However the only way to check which branch are using is to check &lt;code&gt;.gitmodules&lt;/code&gt; file, here is the example for &lt;code&gt;gcc&lt;/code&gt;, it&#39;s using releases/gcc-12 branch, so it will has a section named &lt;code&gt;gcc&lt;/code&gt; and has a field &lt;code&gt;branch&lt;/code&gt; is &lt;code&gt;releases/gcc-12&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[submodule &quot;gcc&quot;]
        path = gcc
        url = ../gcc.git
        branch = releases/gcc-12
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Use Source Tree Other Than &lt;code&gt;riscv-gnu-toolchain&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; also supports using out-of-tree source to build the toolchain. There are several configure options for specifying the source tree of each submodule/component.&lt;/p&gt; 
&lt;p&gt;For example, if you have GCC sources in &lt;code&gt;$HOME/gcc&lt;/code&gt;, use &lt;code&gt;--with-gcc-src&lt;/code&gt; to build the toolchain using those sources:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure ... --with-gcc-src=$HOME/gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here is the list of configure options for specifying alternative sources for the various submodules/components:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--with-binutils-src
--with-dejagnu-src
--with-gcc-src
--with-gdb-src
--with-glibc-src
--with-linux-headers-src
--with-llvm-src
--with-musl-src
--with-newlib-src
--with-pk-src
--with-qemu-src
--with-spike-src
--with-uclibc-src
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Build host GCC to check for compiler warnings&lt;/h4&gt; 
&lt;p&gt;GCC contributions have to meet several requirements to qualify for upstream inclusion. Warning free compilation with a compiler build from the same sources is among them. The flag &lt;code&gt;--enable-host-gcc&lt;/code&gt; does exaclty that:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Initially a host GCC will be built&lt;/li&gt; 
 &lt;li&gt;This host GCC is then used to build the cross compiler&lt;/li&gt; 
 &lt;li&gt;The cross compiler will be built with &lt;code&gt;-Werror&lt;/code&gt; to identify code issues&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;h4&gt;Ensuring Code Model Consistency&lt;/h4&gt; 
&lt;p&gt;If parts of newlib are going to be replaced with an external library (such as with &lt;a href=&quot;https://github.com/ucb-bar/libgloss-htif&quot;&gt;libgloss-htif&lt;/a&gt; for Berkeley Host-Target Interface), you should take care to ensure that both newlib and the external library are built using the same code model. For more information about RISC-V code models, &lt;a href=&quot;https://www.sifive.com/blog/all-aboard-part-4-risc-v-code-models&quot;&gt;read this SiFive blog article&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Errors that indicate a code model mismatch include &quot;relocation overflow&quot; or &quot;relocation truncated&quot; errors from the linker being unable to successfully relocate symbols in the executable.&lt;/p&gt; 
&lt;p&gt;By default, &lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; builds newlib with &lt;code&gt;-mcmodel=medlow&lt;/code&gt;. You can use the alternative &lt;code&gt;medany&lt;/code&gt; code model (as used in libgloss-htif) by passing &lt;code&gt;--with-cmodel=medany&lt;/code&gt; to the configure script.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>valkey-io/valkey</title>
      <link>https://github.com/valkey-io/valkey</link>
      <description>&lt;p&gt;A flexible distributed key-value datastore that is optimized for caching and other realtime workloads.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://codecov.io/gh/valkey-io/valkey&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/valkey-io/valkey/graph/badge.svg?token=KYYSJAYC5F&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project was forked from the open source Redis project right before the transition to their new source available licenses.&lt;/p&gt; 
&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. More details can be found under &lt;a href=&quot;https://valkey.io/&quot;&gt;valkey.io&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;What is Valkey?&lt;/h1&gt; 
&lt;p&gt;Valkey is a high-performance data structure server that primarily serves key/value workloads. It supports a wide range of native structures and an extensible plugin system for adding new data structures and access patterns.&lt;/p&gt; 
&lt;h1&gt;Building Valkey using &lt;code&gt;Makefile&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;Valkey can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; 
&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and Valkey is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; 
&lt;p&gt;It is as simple as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu).&lt;/p&gt; 
&lt;p&gt;To build TLS support as Valkey built-in:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build TLS as Valkey module:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=module
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that sentinel mode does not support TLS module.&lt;/p&gt; 
&lt;p&gt;To build with experimental RDMA support you&#39;ll need RDMA development libraries (e.g. librdmacm-dev and libibverbs-dev on Debian/Ubuntu).&lt;/p&gt; 
&lt;p&gt;To build RDMA support as Valkey built-in:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make BUILD_RDMA=yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build RDMA as Valkey module:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make BUILD_RDMA=module
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To append a suffix to Valkey program names, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&quot;-alt&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can build a 32 bit Valkey binary using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make 32bit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After building Valkey, it is a good idea to test it using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above runs the main integration tests. Additional tests are started using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make test-unit     # Unit tests
% make test-modules  # Tests of the module API
% make test-sentinel # Valkey Sentinel integration tests
% make test-cluster  # Valkey Cluster integration tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More about running the integration tests can be found in &lt;a href=&quot;https://raw.githubusercontent.com/valkey-io/valkey/unstable/tests/README.md&quot;&gt;tests/README.md&lt;/a&gt; and for unit tests, see &lt;a href=&quot;https://raw.githubusercontent.com/valkey-io/valkey/unstable/src/unit/README.md&quot;&gt;src/unit/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; 
&lt;p&gt;Valkey has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; 
&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make distclean
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will clean: jemalloc, lua, hiredis, linenoise and other dependencies.&lt;/p&gt; 
&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; 
&lt;p&gt;If after building Valkey with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the Valkey distribution.&lt;/p&gt; 
&lt;p&gt;In case of build errors when trying to build a 32 bit binary of Valkey, try the following steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; 
 &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&quot;-m32 -march=native&quot; LDFLAGS=&quot;-m32&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Allocator&lt;/h2&gt; 
&lt;p&gt;Selecting a non-default memory allocator when building Valkey is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. Valkey is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; 
&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make MALLOC=libc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Monotonic clock&lt;/h2&gt; 
&lt;p&gt;By default, Valkey will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&quot;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&quot;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make CFLAGS=&quot;-DUSE_PROCESSOR_CLOCK&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Verbose build&lt;/h2&gt; 
&lt;p&gt;Valkey will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make V=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Running Valkey&lt;/h1&gt; 
&lt;p&gt;To run Valkey with the default configuration, just type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./valkey-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to provide your valkey.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./valkey-server /path/to/valkey.conf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to alter the Valkey configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ./valkey-server --port 9999 --replicaof 127.0.0.1 6379
% ./valkey-server /etc/valkey/6379.conf --loglevel debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All the options in valkey.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; 
&lt;h1&gt;Running Valkey with TLS:&lt;/h1&gt; 
&lt;h2&gt;Running manually&lt;/h2&gt; 
&lt;p&gt;To manually run a Valkey server with TLS mode (assuming &lt;code&gt;./gen-test-certs.sh&lt;/code&gt; was invoked so sample certificates/keys are available):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;TLS built-in mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./src/valkey-server --tls-port 6379 --port 0 \
    --tls-cert-file ./tests/tls/valkey.crt \
    --tls-key-file ./tests/tls/valkey.key \
    --tls-ca-cert-file ./tests/tls/ca.crt
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;TLS module mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./src/valkey-server --tls-port 6379 --port 0 \
    --tls-cert-file ./tests/tls/valkey.crt \
    --tls-key-file ./tests/tls/valkey.key \
    --tls-ca-cert-file ./tests/tls/ca.crt \
    --loadmodule src/valkey-tls.so
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that you can disable TCP by specifying &lt;code&gt;--port 0&lt;/code&gt; explicitly. It&#39;s also possible to have both TCP and TLS available at the same time, but you&#39;ll have to assign different ports.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;valkey-cli&lt;/code&gt; to connect to the Valkey server:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./src/valkey-cli --tls \
    --cert ./tests/tls/valkey.crt \
    --key ./tests/tls/valkey.key \
    --cacert ./tests/tls/ca.crt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Specifying &lt;code&gt;--tls-replication yes&lt;/code&gt; makes a replica connect to the primary.&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;--tls-cluster yes&lt;/code&gt; makes Valkey Cluster use TLS across nodes.&lt;/p&gt; 
&lt;h1&gt;Running Valkey with RDMA:&lt;/h1&gt; 
&lt;p&gt;Note that Valkey Over RDMA is an experimental feature. It may be changed or removed in any minor or major version. Currently, it is only supported on Linux.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;RDMA built-in mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./src/valkey-server --protected-mode no \
     --rdma-bind 192.168.122.100 --rdma-port 6379
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;RDMA module mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./src/valkey-server --protected-mode no \
     --loadmodule src/valkey-rdma.so --rdma-bind 192.168.122.100 --rdma-port 6379
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It&#39;s possible to change bind address/port of RDMA by runtime command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;192.168.122.100:6379&amp;gt; CONFIG SET rdma-port 6380
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s also possible to have both RDMA and TCP available, and there is no conflict of TCP(6379) and RDMA(6379), Ex:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ./src/valkey-server --protected-mode no \
     --loadmodule src/valkey-rdma.so --rdma-bind 192.168.122.100 --rdma-port 6379 \
     --port 6379
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the network card (192.168.122.100 of this example) should support RDMA. To test a server supports RDMA or not:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% rdma res show (a new version iproute2 package)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ibv_devices
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Playing with Valkey&lt;/h1&gt; 
&lt;p&gt;You can use valkey-cli to play with Valkey. Start a valkey-server instance, then in another terminal try the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./valkey-cli
valkey&amp;gt; ping
PONG
valkey&amp;gt; set foo bar
OK
valkey&amp;gt; get foo
&quot;bar&quot;
valkey&amp;gt; incr mycounter
(integer) 1
valkey&amp;gt; incr mycounter
(integer) 2
valkey&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Installing Valkey&lt;/h1&gt; 
&lt;p&gt;In order to install Valkey binaries into /usr/local/bin, just use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: For compatibility with Redis, we create symlinks from the Redis names (&lt;code&gt;redis-server&lt;/code&gt;, &lt;code&gt;redis-cli&lt;/code&gt;, etc.) to the Valkey binaries installed by &lt;code&gt;make install&lt;/code&gt;. The symlinks are created in same directory as the Valkey binaries. The symlinks are removed when using &lt;code&gt;make uninstall&lt;/code&gt;. The creation of the symlinks can be skipped by setting the makefile variable &lt;code&gt;USE_REDIS_SYMLINKS=no&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Valkey, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd utils
% ./install_server.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; 
&lt;p&gt;The script will ask you a few questions and will setup everything you need to run Valkey properly as a background daemon that will start again on system reboots.&lt;/p&gt; 
&lt;p&gt;You&#39;ll be able to stop and start Valkey using the script named &lt;code&gt;/etc/init.d/valkey_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/valkey_6379&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Building using &lt;code&gt;CMake&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;In addition to the traditional &lt;code&gt;Makefile&lt;/code&gt; build, Valkey supports an alternative, &lt;strong&gt;experimental&lt;/strong&gt;, build system using &lt;code&gt;CMake&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To build and install &lt;code&gt;Valkey&lt;/code&gt;, in &lt;code&gt;Release&lt;/code&gt; mode (an optimized build), type this into your terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir build-release
cd $_
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/valkey
sudo make install
# Valkey is now installed under /opt/valkey
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Other options supported by Valkey&#39;s &lt;code&gt;CMake&lt;/code&gt; build system:&lt;/p&gt; 
&lt;h2&gt;Special build flags&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_TLS=&amp;lt;yes|no&amp;gt;&lt;/code&gt; enable TLS build for Valkey. Default: &lt;code&gt;no&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_RDMA=&amp;lt;no|module&amp;gt;&lt;/code&gt; enable RDMA module build (only module mode supported). Default: &lt;code&gt;no&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_MALLOC=&amp;lt;libc|jemalloc|tcmalloc|tcmalloc_minimal&amp;gt;&lt;/code&gt; choose the allocator to use. Default on Linux: &lt;code&gt;jemalloc&lt;/code&gt;, for other OS: &lt;code&gt;libc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_SANITIZER=&amp;lt;address|thread|undefined&amp;gt;&lt;/code&gt; build with address sanitizer enabled. Default: disabled (no sanitizer)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_UNIT_TESTS=[yes|no]&lt;/code&gt; when set, the build will produce the executable &lt;code&gt;valkey-unit-tests&lt;/code&gt;. Default: &lt;code&gt;no&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_TEST_MODULES=[yes|no]&lt;/code&gt; when set, the build will include the modules located under the &lt;code&gt;tests/modules&lt;/code&gt; folder. Default: &lt;code&gt;no&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_EXAMPLE_MODULES=[yes|no]&lt;/code&gt; when set, the build will include the example modules located under the &lt;code&gt;src/modules&lt;/code&gt; folder. Default: &lt;code&gt;no&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Common flags&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-DCMAKE_BUILD_TYPE=&amp;lt;Debug|Release...&amp;gt;&lt;/code&gt; define the build type, see CMake manual for more details&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=/installation/path&lt;/code&gt; override this value to define a custom install prefix. Default: &lt;code&gt;/usr/local&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-G&quot;&amp;lt;Generator Name&amp;gt;&quot;&lt;/code&gt; generate build files for &quot;Generator Name&quot;. By default, CMake will generate &lt;code&gt;Makefile&lt;/code&gt;s.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Verbose build&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;CMake&lt;/code&gt; generates a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make VERBOSE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;During the &lt;code&gt;CMake&lt;/code&gt; stage, &lt;code&gt;CMake&lt;/code&gt; caches variables in a local file named &lt;code&gt;CMakeCache.txt&lt;/code&gt;. All variables generated by Valkey are removed from the cache once consumed (this is done by calling to &lt;code&gt;unset(VAR-NAME CACHE)&lt;/code&gt;). However, some variables, like the compiler path, are kept in cache. To start a fresh build either remove the cache file &lt;code&gt;CMakeCache.txt&lt;/code&gt; from the build folder, or delete the build folder completely.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;It is important to re-run &lt;code&gt;CMake&lt;/code&gt; when adding new source files.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Integration with IDE&lt;/h2&gt; 
&lt;p&gt;During the &lt;code&gt;CMake&lt;/code&gt; stage of the build, &lt;code&gt;CMake&lt;/code&gt; generates a JSON file named &lt;code&gt;compile_commands.json&lt;/code&gt; and places it under the build folder. This file is used by many IDEs and text editors for providing code completion (via &lt;code&gt;clangd&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;A small caveat is that these tools will look for &lt;code&gt;compile_commands.json&lt;/code&gt; under the Valkey&#39;s top folder. A common workaround is to create a symbolic link to it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /path/to/valkey/
# We assume here that your build folder is `build-release`
ln -sf $(pwd)/build-release/compile_commands.json $(pwd)/compile_commands.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Restart your IDE and voila&lt;/p&gt; 
&lt;h1&gt;Code contributions&lt;/h1&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/valkey-io/valkey/raw/unstable/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;. For security bugs and vulnerabilities, please see &lt;a href=&quot;https://github.com/valkey-io/valkey/raw/unstable/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Valkey is an open community project under LF Projects&lt;/h1&gt; 
&lt;p&gt;Valkey a Series of LF Projects, LLC 2810 N Church St, PMB 57274 Wilmington, Delaware 19802-4447&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lvgl/lvgl</title>
      <link>https://github.com/lvgl/lvgl</link>
      <description>&lt;p&gt;Embedded graphics library to create beautiful UIs for any MCU, MPU and display type.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/lvgl&quot; target=&quot;_blank&quot;&gt;&lt;img align=&quot;left&quot; src=&quot;https://lvgl.io/github-assets/sponsor.png&quot; height=&quot;32px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt; &lt;b&gt;English&lt;/b&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/lvgl/lvgl/master/docs/README_zh.md&quot;&gt;中文&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/lvgl/lvgl/master/docs/README_pt_BR.md&quot;&gt;Português do Brasil&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/lvgl/lvgl/master/docs/README_jp.md&quot;&gt;日本語&lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &amp;nbsp; &lt;img src=&quot;https://lvgl.io/github-assets/logo-colored.png&quot; width=&quot;300px&quot;&gt; &lt;/p&gt; 
&lt;p&gt;&amp;nbsp; &lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;Light and Versatile Graphics Library&lt;/h1&gt; &amp;nbsp; 
&lt;br&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://lvgl.io/github-assets/smartwatch-demo.gif&quot;&gt; &amp;nbsp; &amp;nbsp; 
 &lt;img border=&quot;1px&quot; src=&quot;https://lvgl.io/github-assets/widgets-demo.gif&quot;&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://lvgl.io&quot; title=&quot;Homepage of LVGL&quot;&gt;Website &lt;/a&gt; | &lt;a href=&quot;https://docs.lvgl.io/&quot; title=&quot;Detailed documentation with 100+ examples&quot;&gt;Docs&lt;/a&gt; | &lt;a href=&quot;https://forum.lvgl.io&quot; title=&quot;Get help and help others&quot;&gt;Forum&lt;/a&gt; | &lt;a href=&quot;https://lvgl.io/demos&quot; title=&quot;Demos running in your browser&quot;&gt;Demos&lt;/a&gt; | &lt;a href=&quot;https://lvgl.io/services&quot; title=&quot;Graphics design, UI implementation and consulting&quot;&gt;Services&lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;&lt;span&gt;📒&lt;/span&gt; Overview&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Mature and Well-known&lt;/strong&gt;&lt;br&gt; LVGL is the most popular free and open source embedded graphics library to create beautiful UIs for any MCU, MPU and display type. It&#39;s supported by industry leading vendors and projects like &amp;nbsp;Arm, STM32, NXP, Espressif, Nuvoton, Arduino, RT-Thread, Zephyr, NuttX, Adafruit and many more.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Feature Rich&lt;/strong&gt;&lt;br&gt; It has all the features to create modern and beautiful GUIs: 30+ built-in widgets, a powerful style system, web inspired layout managers, and a typography system supporting many languages. To integrate LVGL into your platform, all you need is at least 32kB RAM and 128 kB Flash, a C compiler, a frame buffer, and at least an 1/10 screen sized buffer for rendering.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;br&gt; Our team is ready to help you with graphics design, UI implementation and consulting services. Contact us if you need some support during the development of your next GUI project.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Free and Portable&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A fully portable C (C++ compatible) library with no external dependencies.&lt;/li&gt; 
 &lt;li&gt;Can be compiled to any MCU or MPU, with any (RT)OS.&lt;/li&gt; 
 &lt;li&gt;Supports monochrome, ePaper, OLED or TFT displays, or even monitors. &lt;a href=&quot;https://docs.lvgl.io/master/details/main-components/display.html&quot;&gt;Displays&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Distributed under the MIT license, so you can easily use it in commercial projects too.&lt;/li&gt; 
 &lt;li&gt;Needs only 32kB RAM and 128 kB Flash, a frame buffer, and at least an 1/10 screen sized buffer for rendering.&lt;/li&gt; 
 &lt;li&gt;OS, External memory and GPU are supported but not required.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Widgets, Styles, Layouts and more&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;30+ built-in &lt;a href=&quot;https://docs.lvgl.io/master/details/widgets/index.html&quot;&gt;Widgets&lt;/a&gt;: &amp;nbsp;Button, Label, Slider, Chart, Keyboard, Meter, Arc, Table and many more.&lt;/li&gt; 
 &lt;li&gt;Flexible &lt;a href=&quot;https://docs.lvgl.io/master/details/base-widget/styles/style.html&quot;&gt;Style system&lt;/a&gt; with &amp;nbsp;~100 style properties to customize any part of the widgets in any state.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/base-widget/layouts/flex.html&quot;&gt;Flexbox&lt;/a&gt; and &lt;a href=&quot;https://docs.lvgl.io/master/details/base-widget/layouts/grid.html&quot;&gt;Grid&lt;/a&gt;-like layouts engines to automatically size and position the widgets in a responsive way.&lt;/li&gt; 
 &lt;li&gt;Texts are rendered with UTF-8 encoding supporting CJK, Thai, Hindi, Arabic, Persian writing systems.&lt;/li&gt; 
 &lt;li&gt;Word wrapping, kerning, text scrolling, sub-pixel rendering, Pinyin-IME Chinese input, Emojis in texts.&lt;/li&gt; 
 &lt;li&gt;Rendering engine supporting animations, anti-aliasing, opacity, smooth scrolling, shadows, image transformation, etc &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Supports Mouse, Touchpad, Keypad, Keyboard, External buttons, Encoder &lt;a href=&quot;https://docs.lvgl.io/master/details/main-components/indev.html&quot;&gt;Input devices&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/main-components/display.html#how-many-displays-can-lvgl-use&quot;&gt;Multiple display&lt;/a&gt; support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Binding and Build Support&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.lvgl.io/2019-02-20/micropython-bindings&quot;&gt;MicroPython Binding&lt;/a&gt; exposes LVGL API&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.lvgl.io/2022-08-24/pikascript-and-lvgl&quot;&gt;PikaScript Binding&lt;/a&gt; python on MCU lighter and easier.&lt;/li&gt; 
 &lt;li&gt;No custom build system is used. You can build LVGL as you build the other files of your project.&lt;/li&gt; 
 &lt;li&gt;Support for Make and &lt;a href=&quot;https://docs.lvgl.io/master/details/integration/building/cmake.html&quot;&gt;CMake&lt;/a&gt; is included out of the box.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/ide/pc-simulator.html&quot;&gt;Develop on PC&lt;/a&gt; and use the same UI code on embedded hardware.&lt;/li&gt; 
 &lt;li&gt;Convert the C UI code to HTML file with our &lt;a href=&quot;https://github.com/lvgl/lv_web_emscripten&quot;&gt;Emscripten port&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Docs, Tools, and Services&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Detailed &lt;a href=&quot;https://docs.lvgl.io/&quot;&gt;Documentation&lt;/a&gt; with &lt;a href=&quot;https://docs.lvgl.io/master/examples.html&quot;&gt;100+ simple examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lvgl.io/services&quot;&gt;Services&lt;/a&gt; such as User interface design, Implementation and Consulting to make UI development simpler and faster.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;❤️&lt;/span&gt; Sponsor&lt;/h2&gt; 
&lt;p&gt;If LVGL saved you a lot of time and money or you just had fun using it, consider &lt;a href=&quot;https://github.com/sponsors/lvgl&quot;&gt;Supporting its Development&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How do we spend the donations?&lt;/strong&gt;&lt;br&gt; Our goal is to provide financial compensation for people who do the most for LVGL. It means not only the maintainers but anyone who implements a great feature should get a payment from the accumulated money. We use the donations to cover our operational costs like servers and related services.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How to donate?&lt;/strong&gt;&lt;br&gt; We use &lt;a href=&quot;https://github.com/sponsors/lvgl&quot;&gt;GitHub Sponsors&lt;/a&gt; where you can easily send one time or recurring donations. You can also see all of our expenses in a transparent way.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How to get paid for your contribution?&lt;/strong&gt;&lt;br&gt; If someone implements or fixes an issue labeled as &lt;a href=&quot;https://github.com/lvgl/lvgl/labels/Sponsored&quot;&gt;Sponsored&lt;/a&gt; he or she will get a payment for that work. We estimate the required time, complexity and importance of the issue and set a price accordingly. To jump in just comment on a &lt;a href=&quot;https://github.com/lvgl/lvgl/labels/Sponsored&quot;&gt;Sponsored&lt;/a&gt; issue saying &quot;Hi, I&#39;d like to deal with it. This is how I&#39;m planning to fix/implement it...&quot;. A work is considered ready when it&#39;s approved and merged by a maintainer. After that you can submit and expense at &lt;a href=&quot;https://opencollective.com/lvgl&quot;&gt;opencollective.com&lt;/a&gt; and you will receive the payment in a few days.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Organizations supporting LVGL&lt;/strong&gt;&lt;br&gt; &lt;a href=&quot;https://opencollective.com/lvgl&quot;&gt;&lt;img src=&quot;https://opencollective.com/lvgl/organizations.svg?width=600&quot; alt=&quot;Sponsors of LVGL&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Individuals supporting LVGL&lt;/strong&gt;&lt;br&gt; &lt;a href=&quot;https://opencollective.com/lvgl&quot;&gt;&lt;img src=&quot;https://opencollective.com/lvgl/individuals.svg?width=600&quot; alt=&quot;Backers of LVGL&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📦&lt;/span&gt; Packages&lt;/h2&gt; 
&lt;p&gt;LVGL is available as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/framework/arduino.html&quot;&gt;Arduino library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://registry.platformio.org/libraries/lvgl/lvgl&quot;&gt;PlatformIO package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/os/zephyr.html&quot;&gt;Zephyr library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://components.espressif.com/components/lvgl/lvgl&quot;&gt;ESP-IDF(ESP32) component&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nxp.com/design/software/embedded-software/lvgl-open-source-graphics-library:LITTLEVGL-OPEN-SOURCE-GRAPHICS-LIBRARY&quot;&gt;NXP MCUXpresso component&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/os/nuttx.html&quot;&gt;NuttX library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/os/rt-thread.html&quot;&gt;RT-Thread RTOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CMSIS-Pack&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doc.riot-os.org/group__pkg__lvgl.html#details&quot;&gt;RIOT OS package&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🤖&lt;/span&gt; Examples&lt;/h2&gt; 
&lt;p&gt;See some examples of creating widgets, using layouts and applying styles. You will find C and MicroPython code, and links to try out or edit the examples in an online MicroPython editor.&lt;/p&gt; 
&lt;p&gt;For more examples check out the &lt;a href=&quot;https://github.com/lvgl/lvgl/tree/master/examples&quot;&gt;Examples&lt;/a&gt; folder.&lt;/p&gt; 
&lt;h3&gt;Hello world label&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_1.png&quot; alt=&quot;Simple Hello world label example in LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/*Change the active screen&#39;s background color*/
lv_obj_set_style_bg_color(lv_screen_active(), lv_color_hex(0x003a57), LV_PART_MAIN);

/*Create a white label, set its text and align it to the center*/
lv_obj_t * label = lv_label_create(lv_screen_active());
lv_label_set_text(label, &quot;Hello world&quot;);
lv_obj_set_style_text_color(label, lv_color_hex(0xffffff), LV_PART_MAIN);
lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_direct=4ab7c40c35b0dc349aa2f0c3b00938d7d8e8ac9f&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Change the active screen&#39;s background color
scr = lv.screen_active()
scr.set_style_bg_color(lv.color_hex(0x003a57), lv.PART.MAIN)

# Create a white label, set its text and align it to the center
label = lv.label(lv.screen_active())
label.set_text(&quot;Hello world&quot;)
label.set_style_text_color(lv.color_hex(0xffffff), lv.PART.MAIN)
label.align(lv.ALIGN.CENTER, 0, 0)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;Button with Click Event&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_2.gif&quot; alt=&quot;LVGL button with label example&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;lv_obj_t * button = lv_button_create(lv_screen_active()); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /*Add a button to the current screen*/
lv_obj_center(button); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;         /*Set its position*/
lv_obj_set_size(button, 100, 50); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;/*Set its size*/
lv_obj_add_event_cb(button, button_event_cb, LV_EVENT_CLICKED, NULL); /*Assign a callback to the button*/

lv_obj_t * label = lv_label_create(button); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;/*Add a label to the button*/
lv_label_set_text(label, &quot;Button&quot;); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /*Set the labels text*/
lv_obj_center(label); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /*Align the label to the center*/
...

void button_event_cb(lv_event_t * e)
{
&amp;nbsp; printf(&quot;Clicked\n&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=926bde43ec7af0146c486de470c53f11f167491e&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def button_event_cb(e):
&amp;nbsp; print(&quot;Clicked&quot;)

# Create a Button and a Label
button = lv.button(lv.screen_active())
button.center()
button.set_size(100, 50)
button.add_event_cb(button_event_cb, lv.EVENT.CLICKED, None)

label = lv.label(button)
label.set_text(&quot;Button&quot;)
label.center()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;Checkboxes with Layout&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_3.gif&quot; alt=&quot;Checkboxes with layout in LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;
lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_COLUMN);
lv_obj_set_flex_align(lv_screen_active(), LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER);

lv_obj_t * cb;
cb = lv_checkbox_create(lv_screen_active());
lv_checkbox_set_text(cb, &quot;Apple&quot;);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);

cb = lv_checkbox_create(lv_screen_active());
lv_checkbox_set_text(cb, &quot;Banana&quot;);
lv_obj_add_state(cb, LV_STATE_CHECKED);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);

cb = lv_checkbox_create(lv_screen_active());
lv_checkbox_set_text(cb, &quot;Lemon&quot;);
lv_obj_add_state(cb, LV_STATE_DISABLED);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);

cb = lv_checkbox_create(lv_screen_active());
lv_obj_add_state(cb, LV_STATE_CHECKED | LV_STATE_DISABLED);
lv_checkbox_set_text(cb, &quot;Melon\nand a new line&quot;);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=311d37e5f70daf1cb0d2cad24c7f72751b5f1792&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def event_handler(e):
    code = e.get_code()
    obj = e.get_target_obj()
    if code == lv.EVENT.VALUE_CHANGED:
        txt = obj.get_text()
        if obj.get_state() &amp;amp; lv.STATE.CHECKED:
            state = &quot;Checked&quot;
        else:
            state = &quot;Unchecked&quot;
        print(txt + &quot;:&quot; + state)


lv.screen_active().set_flex_flow(lv.FLEX_FLOW.COLUMN)
lv.screen_active().set_flex_align(lv.FLEX_ALIGN.CENTER, lv.FLEX_ALIGN.START, lv.FLEX_ALIGN.CENTER)

cb = lv.checkbox(lv.screen_active())
cb.set_text(&quot;Apple&quot;)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)

cb = lv.checkbox(lv.screen_active())
cb.set_text(&quot;Banana&quot;)
cb.add_state(lv.STATE.CHECKED)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)

cb = lv.checkbox(lv.screen_active())
cb.set_text(&quot;Lemon&quot;)
cb.add_state(lv.STATE.DISABLED)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)

cb = lv.checkbox(lv.screen_active())
cb.add_state(lv.STATE.CHECKED | lv.STATE.DISABLED)
cb.set_text(&quot;Melon&quot;)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;Styling a Slider&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_4.gif&quot; alt=&quot;Styling a slider with LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;lv_obj_t * slider = lv_slider_create(lv_screen_active());
lv_slider_set_value(slider, 70, LV_ANIM_OFF);
lv_obj_set_size(slider, 300, 20);
lv_obj_center(slider);

/*Add local styles to MAIN part (background rectangle)*/
lv_obj_set_style_bg_color(slider, lv_color_hex(0x0F1215), LV_PART_MAIN);
lv_obj_set_style_bg_opa(slider, 255, LV_PART_MAIN);
lv_obj_set_style_border_color(slider, lv_color_hex(0x333943), LV_PART_MAIN);
lv_obj_set_style_border_width(slider, 5, LV_PART_MAIN);
lv_obj_set_style_pad_all(slider, 5, LV_PART_MAIN);

/*Create a reusable style sheet for the INDICATOR part*/
static lv_style_t style_indicator;
lv_style_init(&amp;amp;style_indicator);
lv_style_set_bg_color(&amp;amp;style_indicator, lv_color_hex(0x37B9F5));
lv_style_set_bg_grad_color(&amp;amp;style_indicator, lv_color_hex(0x1464F0));
lv_style_set_bg_grad_dir(&amp;amp;style_indicator, LV_GRAD_DIR_HOR);
lv_style_set_shadow_color(&amp;amp;style_indicator, lv_color_hex(0x37B9F5));
lv_style_set_shadow_width(&amp;amp;style_indicator, 15);
lv_style_set_shadow_spread(&amp;amp;style_indicator, 5);
4
/*Add the style sheet to the slider&#39;s INDICATOR part*/
lv_obj_add_style(slider, &amp;amp;style_indicator, LV_PART_INDICATOR);

/*Add the same style to the KNOB part too and locally overwrite some properties*/
lv_obj_add_style(slider, &amp;amp;style_indicator, LV_PART_KNOB);

lv_obj_set_style_outline_color(slider, lv_color_hex(0x0096FF), LV_PART_KNOB);
lv_obj_set_style_outline_width(slider, 3, LV_PART_KNOB);
lv_obj_set_style_outline_pad(slider, -5, LV_PART_KNOB);
lv_obj_set_style_shadow_spread(slider, 2, LV_PART_KNOB);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=c431c7b4dfd2cc0dd9c392b74365d5af6ea986f0&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create a slider and add the style
slider = lv.slider(lv.screen_active())
slider.set_value(70, lv.ANIM.OFF)
slider.set_size(300, 20)
slider.center()

# Add local styles to MAIN part (background rectangle)
slider.set_style_bg_color(lv.color_hex(0x0F1215), lv.PART.MAIN)
slider.set_style_bg_opa(255, lv.PART.MAIN)
slider.set_style_border_color(lv.color_hex(0x333943), lv.PART.MAIN)
slider.set_style_border_width(5, lv.PART.MAIN)
slider.set_style_pad_all(5, lv.PART.MAIN)

# Create a reusable style sheet for the INDICATOR part
style_indicator = lv.style_t()
style_indicator.init()
style_indicator.set_bg_color(lv.color_hex(0x37B9F5))
style_indicator.set_bg_grad_color(lv.color_hex(0x1464F0))
style_indicator.set_bg_grad_dir(lv.GRAD_DIR.HOR)
style_indicator.set_shadow_color(lv.color_hex(0x37B9F5))
style_indicator.set_shadow_width(15)
style_indicator.set_shadow_spread(5)

# Add the style sheet to the slider&#39;s INDICATOR part
slider.add_style(style_indicator, lv.PART.INDICATOR)
slider.add_style(style_indicator, lv.PART.KNOB)

# Add the same style to the KNOB part too and locally overwrite some properties
slider.set_style_outline_color(lv.color_hex(0x0096FF), lv.PART.KNOB)
slider.set_style_outline_width(3, lv.PART.KNOB)
slider.set_style_outline_pad(-5, lv.PART.KNOB)
slider.set_style_shadow_spread(2, lv.PART.KNOB)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;English, Hebrew (mixed LTR-RTL) and Chinese texts&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_5.png&quot; alt=&quot;English, Hebrew and Chinese texts with LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;lv_obj_t * ltr_label = lv_label_create(lv_screen_active());
lv_label_set_text(ltr_label, &quot;In modern terminology, a microcontroller is similar to a system on a chip (SoC).&quot;);
lv_obj_set_style_text_font(ltr_label, &amp;amp;lv_font_montserrat_16, 0);
lv_obj_set_width(ltr_label, 310);
lv_obj_align(ltr_label, LV_ALIGN_TOP_LEFT, 5, 5);

lv_obj_t * rtl_label = lv_label_create(lv_screen_active());
lv_label_set_text(rtl_label,&quot;מעבד, או בשמו המלא יחידת עיבוד מרכזית (באנגלית: CPU - Central Processing Unit).&quot;);
lv_obj_set_style_base_dir(rtl_label, LV_BASE_DIR_RTL, 0);
lv_obj_set_style_text_font(rtl_label, &amp;amp;lv_font_dejavu_16_persian_hebrew, 0);
lv_obj_set_width(rtl_label, 310);
lv_obj_align(rtl_label, LV_ALIGN_LEFT_MID, 5, 0);

lv_obj_t * cz_label = lv_label_create(lv_screen_active());
lv_label_set_text(cz_label,
                  &quot;嵌入式系统（Embedded System），\n是一种嵌入机械或电气系统内部、具有专一功能和实时计算性能的计算机系统。&quot;);
lv_obj_set_style_text_font(cz_label, &amp;amp;lv_font_simsun_16_cjk, 0);
lv_obj_set_width(cz_label, 310);
lv_obj_align(cz_label, LV_ALIGN_BOTTOM_LEFT, 5, -5);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=18bb38200a64e10ead1aa17a65c977fc18131842&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;ltr_label = lv.label(lv.screen_active())
ltr_label.set_text(&quot;In modern terminology, a microcontroller is similar to a system on a chip (SoC).&quot;)
ltr_label.set_style_text_font(lv.font_montserrat_16, 0);

ltr_label.set_width(310)
ltr_label.align(lv.ALIGN.TOP_LEFT, 5, 5)

rtl_label = lv.label(lv.screen_active())
rtl_label.set_text(&quot;מעבד, או בשמו המלא יחידת עיבוד מרכזית (באנגלית: CPU - Central Processing Unit).&quot;)
rtl_label.set_style_base_dir(lv.BASE_DIR.RTL, 0)
rtl_label.set_style_text_font(lv.font_dejavu_16_persian_hebrew, 0)
rtl_label.set_width(310)
rtl_label.align(lv.ALIGN.LEFT_MID, 5, 0)

font_simsun_16_cjk = lv.font_load(&quot;S:../../assets/font/lv_font_simsun_16_cjk.fnt&quot;)

cz_label = lv.label(lv.screen_active())
cz_label.set_style_text_font(font_simsun_16_cjk, 0)
cz_label.set_text(&quot;嵌入式系统（Embedded System），\n是一种嵌入机械或电气系统内部、具有专一功能和实时计算性能的计算机系统。&quot;)
cz_label.set_width(310)
cz_label.align(lv.ALIGN.BOTTOM_LEFT, 5, -5)

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;▶&lt;/span&gt; Get started&lt;/h2&gt; 
&lt;p&gt;This list will guide you to get started with LVGL step-by-step.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Get Familiar with LVGL&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check the &lt;a href=&quot;https://lvgl.io/demos&quot;&gt;Online demos&lt;/a&gt; to see LVGL in action (3 minutes).&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://docs.lvgl.io/master/intro/index.html&quot;&gt;Introduction&lt;/a&gt; page of the documentation (5 minutes).&lt;/li&gt; 
 &lt;li&gt;Get familiar with the basics on the &lt;a href=&quot;https://docs.lvgl.io/master/intro/basics.html&quot;&gt;Quick overview&lt;/a&gt; page (15 minutes).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Start to Use LVGL&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Set up a &lt;a href=&quot;https://docs.lvgl.io/master/details/integration/ide/pc-simulator.html#simulator&quot;&gt;Simulator&lt;/a&gt; (10 minutes).&lt;/li&gt; 
 &lt;li&gt;Try out some &lt;a href=&quot;https://github.com/lvgl/lvgl/tree/master/examples&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Port LVGL to a board. See the &lt;a href=&quot;https://docs.lvgl.io/master/intro/add-lvgl-to-your-project/index.html&quot;&gt;Porting&lt;/a&gt; guide or check out the ready-to-use &lt;a href=&quot;https://github.com/lvgl?q=lv_port_&quot;&gt;Projects&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Become a Pro&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;7&quot;&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://docs.lvgl.io/master/details/main-components/index.html&quot;&gt;Main-Components&lt;/a&gt; page to get a better understanding of the library (2-3 hours)&lt;/li&gt; 
 &lt;li&gt;Check the documentation of the &lt;a href=&quot;https://docs.lvgl.io/master/details/widgets/index.html&quot;&gt;Widgets&lt;/a&gt; to see their features and usage&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Get Help and Help Others&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;9&quot;&gt; 
 &lt;li&gt;If you have questions go to the &lt;a href=&quot;http://forum.lvgl.io/&quot;&gt;Forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://docs.lvgl.io/master/CONTRIBUTING.html&quot;&gt;Contributing&lt;/a&gt; guide to see how you can help to improve LVGL (15 minutes)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;span&gt;🤝&lt;/span&gt; Services&lt;/h2&gt; 
&lt;p&gt;LVGL LLC was established to provide a solid background for LVGL library and to offer several type of services to help you in UI development. With 15+ years of experience in the user interface and graphics industry we can help you the bring your UI to the next level.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Graphics design&lt;/strong&gt; Our in-house graphics designers are experts in creating beautiful modern designs which fit to your product and the resources of your hardware.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UI implementation&lt;/strong&gt; We can also implement your UI based on the design you or we have created. You can be sure that we will make the most out of your hardware and LVGL. If a feature or widget is missing from LVGL, don&#39;t worry, we will implement it for you.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Consulting and Support&lt;/strong&gt; We can support you with consulting as well to avoid pricey and time consuming mistakes during the UI development.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Board certification&lt;/strong&gt; For companies who are offering development boards, or production ready kits we do board certification which shows how board can run LVGL.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://lvgl.io/demos&quot;&gt;Demos&lt;/a&gt; as reference. For more information take look at the &lt;a href=&quot;https://lvgl.io/services&quot;&gt;Services page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://lvgl.io/#contact&quot;&gt;Contact us&lt;/a&gt; and tell how we can help.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🌟&lt;/span&gt; Contributing&lt;/h2&gt; 
&lt;p&gt;LVGL is an open project and contribution is very welcome. There are many ways to contribute from simply speaking about your project, through writing examples, improving the documentation, fixing bugs or even hosting your own project under the LVGL organization.&lt;/p&gt; 
&lt;p&gt;For a detailed description of contribution opportunities visit the &lt;a href=&quot;https://docs.lvgl.io/master/CONTRIBUTING.html&quot;&gt;Contributing&lt;/a&gt; section of the documentation.&lt;/p&gt; 
&lt;p&gt;More than 300 people already left their fingerprint in LVGL. Be one them! See you here! &lt;span&gt;🙂&lt;/span&gt;&lt;/p&gt; 
&lt;a href=&quot;https://github.com/lvgl/lvgl/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=lvgl/lvgl&amp;amp;max=48&quot;&gt; &lt;/a&gt; 
&lt;p&gt;... and many other.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ImageMagick/ImageMagick</title>
      <link>https://github.com/ImageMagick/ImageMagick</link>
      <description>&lt;p&gt;ImageMagick is a powerful, open-source software suite for creating, editing, converting, and manipulating images in over 200 formats. Ideal for web developers, graphic designers, and researchers, it offers versatile tools for image processing, including batch processing, format conversion, and complex image transformations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ImageMagick&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ImageMagick/ImageMagick/actions&quot;&gt;&lt;img src=&quot;https://github.com/ImageMagick/ImageMagick/workflows/main/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://issues.oss-fuzz.com/issues?q=%22project%20ImageMagick%22&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/imagemagick.svg?sanitize=true&quot; alt=&quot;Fuzzing Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/ImageMagick&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%24-donate-ff00ff.svg?sanitize=true&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img align=&quot;center&quot; src=&quot;https://imagemagick.org/image/wizard.png&quot; alt=&quot;ImageMagick logo&quot; width=&quot;265&quot; height=&quot;353&quot;&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://imagemagick.org/&quot;&gt;ImageMagick®&lt;/a&gt; is a free and &lt;a href=&quot;https://imagemagick.org/script/license.php&quot;&gt;open-source&lt;/a&gt; software suite, used for editing and manipulating digital images. It can be used to create, edit, compose, or convert bitmap images, and supports a wide range of file &lt;a href=&quot;https://imagemagick.org/script/formats.php&quot;&gt;formats&lt;/a&gt;, including JPEG, PNG, GIF, TIFF, and PDF.&lt;/p&gt; 
&lt;h2&gt;What is ImageMagick?&lt;/h2&gt; 
&lt;p&gt;ImageMagick is widely used in industries such as web development, graphic design, and video editing, as well as in scientific research, medical imaging, and astronomy. Its versatile and customizable nature, along with its robust image processing capabilities, make it a popular choice for a wide range of image-related tasks.&lt;/p&gt; 
&lt;p&gt;ImageMagick includes a command-line interface for executing complex image processing tasks, as well as APIs for integrating its features into software applications. It is written in C and can be used on a variety of operating systems, including Linux, Windows, and macOS.&lt;/p&gt; 
&lt;p&gt;The main website for ImageMagick can be found at &lt;a href=&quot;https://imagemagick.org/&quot;&gt;https://imagemagick.org&lt;/a&gt;. The source code for this software can be accessed through a &lt;a href=&quot;https://github.com/ImageMagick/ImageMagick&quot;&gt;repository&lt;/a&gt;. In addition, we maintain a legacy version of ImageMagick &lt;a href=&quot;https://legacy.imagemagick.org/&quot;&gt;version 6&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Creating a security policy that fits your specific local environment before making use of ImageMagick is highly advised. You can find guidance on setting up this &lt;a href=&quot;https://imagemagick.org/script/security-policy.php&quot;&gt;policy&lt;/a&gt;. Also, it&#39;s important to verify your policy using the &lt;a href=&quot;https://imagemagick.org/script/security-policy.php&quot;&gt;validation tool&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features and Capabilities&lt;/h2&gt; 
&lt;p&gt;One of the key features of ImageMagick is its support for scripting and automation. This allows users to create complex image manipulation pipelines that can be run automatically, without the need for manual intervention. This can be especially useful for tasks that require the processing of large numbers of images, or for tasks that need to be performed on a regular basis.&lt;/p&gt; 
&lt;p&gt;In addition to its core image manipulation capabilities, ImageMagick also includes a number of other features, such as support for animation, color management, and image rendering. These features make it a versatile tool for a wide range of image-related tasks, including graphic design, scientific visualization, and digital art.&lt;/p&gt; 
&lt;p&gt;Overall, ImageMagick is a powerful and versatile software suite for displaying, converting, and editing image files. Its support for scripting and automation, along with its other features, make it a valuable tool for a wide range of image-related tasks.&lt;/p&gt; 
&lt;p&gt;Here are just a few &lt;a href=&quot;https://imagemagick.org/script/examples.php&quot;&gt;examples&lt;/a&gt; of what ImageMagick can do:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/command-line-options.php#bilateral-blur&quot;&gt;Animation&lt;/a&gt;: non-linear, edge-preserving, and noise-reducing smoothing filter.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/command-line-options.php#bilateral-blur&quot;&gt;Bilateral Blur&lt;/a&gt;: non-linear, edge-preserving, and noise-reducing smoothing filter.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/color-management.php&quot;&gt;Color management&lt;/a&gt;: accurate color management with color profiles or in lieu of-- built-in gamma compression or expansion as demanded by the colorspace.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/color-management.php&quot;&gt;Color thresholding&lt;/a&gt; force all pixels in the color range to white otherwise black.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/command-line-processing.php&quot;&gt;Command-line processing&lt;/a&gt; utilize ImageMagick from the command-line.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_text_layout&quot;&gt;Complex text layout&lt;/a&gt; bidirectional text support and shaping.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/composite.php&quot;&gt;Composite&lt;/a&gt;: overlap one image over another.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/connected-components.php&quot;&gt;Connected component labeling&lt;/a&gt;: uniquely label connected regions in an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/convex-hull.php&quot;&gt;Convex hull&lt;/a&gt; smallest area convex polygon containing the image foreground objects. In addition, the minimum bounding box and unrotate angle are also generated.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/crop/&quot;&gt;Decorate&lt;/a&gt;: add a border or frame to an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/transform/#vision&quot;&gt;Delineate image features&lt;/a&gt;: Canny edge detection, mean-shift, Hough lines.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/fourier/&quot;&gt;Discrete Fourier transform&lt;/a&gt;: implements the forward and inverse &lt;a href=&quot;http://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;DFT&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/distribute-pixel-cache.php&quot;&gt;Distributed pixel cache&lt;/a&gt;: offload intermediate pixel storage to one or more remote servers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/draw/&quot;&gt;Draw&lt;/a&gt;: add shapes or text to an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/cipher.php&quot;&gt;Encipher or decipher an image&lt;/a&gt;: convert ordinary images into unintelligible gibberish and back again.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/convert.php&quot;&gt;Format conversion&lt;/a&gt;: convert an image from one &lt;a href=&quot;https://imagemagick.org/script/formats.php&quot;&gt;format&lt;/a&gt; to another (e.g. PNG to JPEG).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/distorts/&quot;&gt;Generalized pixel distortion&lt;/a&gt;: correct for, or induce image distortions including perspective.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/architecture.php#distributed&quot;&gt;Heterogeneous distributed processing&lt;/a&gt;: certain algorithms are OpenCL-enabled to take advantage of speed-ups offered by executing in concert across heterogeneous platforms consisting of CPUs, GPUs, and other processors.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/high-dynamic-range.php&quot;&gt;High dynamic-range images&lt;/a&gt;: accurately represent the wide range of intensity levels found in real scenes ranging from the brightest direct sunlight to the deepest darkest shadows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/clahe.php&quot;&gt;Histogram equalization&lt;/a&gt; use adaptive histogram equalization to improve contrast in images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/magick-cache.php&quot;&gt;Image cache&lt;/a&gt;: secure methods and tools to cache images, image sequences, video, audio or metadata in a local folder.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/fx.php&quot;&gt;Image calculator&lt;/a&gt;: apply a mathematical expression to an image or image channels.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/gradient.php&quot;&gt;Image gradients&lt;/a&gt;: create a gradual blend of one color whose shape is horizontal, vertical, circular, or elliptical.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/identify.php&quot;&gt;Image identification&lt;/a&gt;: describe the format and attributes of an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/download.php#iOS&quot;&gt;ImageMagick on the iPhone&lt;/a&gt;: convert, edit, or compose images on your iPhone.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/architecture.php#tera-pixel&quot;&gt;Large image support&lt;/a&gt;: read, process, or write mega-, giga-, or tera-pixel image sizes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/montage.php&quot;&gt;Montage&lt;/a&gt;: juxtapose image thumbnails on an image canvas.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/morphology/&quot;&gt;Morphology of shapes&lt;/a&gt;: extract features, describe shapes and recognize patterns in images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/motion-picture.php&quot;&gt;Motion picture support&lt;/a&gt;: read and write the common image formats used in digital film work.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/multispectral-imagery.php&quot;&gt;Multispectral imagery&lt;/a&gt;: support multispectral imagery up to 64 bands.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/transform/#vision&quot;&gt;Noise and color reduction&lt;/a&gt; Kuwahara Filter, mean-shift.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.fmwconcepts.com/misc_tests/perceptual_hash_test_results_510/index.html&quot;&gt;Perceptual hash&lt;/a&gt;: maps visually identical images to the same or similar hash-- useful in image retrieval, authentication, indexing, or copy detection as well as digital watermarking.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/blur/&quot;&gt;Special effects&lt;/a&gt;: blur, sharpen, threshold, or tint an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/text/&quot;&gt;Text &amp;amp; comments&lt;/a&gt;: insert descriptive or artistic text in an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/architecture.php#threads&quot;&gt;Threads of execution support&lt;/a&gt;: ImageMagick is thread safe and most internal algorithms are OpenMP-enabled to take advantage of speed-ups offered by multicore processor chips.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/resize/&quot;&gt;Transform&lt;/a&gt;: resize, rotate, deskew, crop, flip or trim an image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/Usage/masking/&quot;&gt;Transparency&lt;/a&gt;: render portions of an image invisible.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imagemagick.org/script/architecture.php#virtual-pixels&quot;&gt;Virtual pixel support&lt;/a&gt;: convenient access to pixels outside the image region.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://imagemagick.org/Usage/&quot;&gt;Examples of ImageMagick Usage&lt;/a&gt;, demonstrates how to use the software from the &lt;a href=&quot;https://imagemagick.org/script/command-line-processing.php&quot;&gt;command line&lt;/a&gt; to achieve various effects. There are also several scripts available on the website called &lt;a href=&quot;http://www.fmwconcepts.com/imagemagick/&quot;&gt;Fred&#39;s ImageMagick Scripts&lt;/a&gt;, which can be used to apply geometric transforms, blur and sharpen images, remove noise, and perform other operations. Additionally, there is a tool called &lt;a href=&quot;https://github.com/dlemstra/Magick.NET&quot;&gt;Magick.NET&lt;/a&gt; that allows users to access the functionality of ImageMagick without having to install the software on their own systems. Finally, the website also includes a &lt;a href=&quot;http://im.snibgo.com/&quot;&gt;Cookbook&lt;/a&gt; with tips and examples for using ImageMagick on Windows systems.&lt;/p&gt; 
&lt;h2&gt;News&lt;/h2&gt; 
&lt;p&gt;Creating a security policy that fits your specific local environment before making use of ImageMagick is highly advised. You can find guidance on setting up this &lt;a href=&quot;https://imagemagick.org/script/security-policy.php&quot;&gt;policy&lt;/a&gt;. Also, it&#39;s important to verify your policy using the &lt;a href=&quot;https://imagemagick-secevaluator.doyensec.com/&quot;&gt;validation tool&lt;/a&gt;. As of ImageMagick version 7.1.1-16, you can choose and customize one of these &lt;a href=&quot;https://imagemagick.org/script/security-policy.php&quot;&gt;security policies&lt;/a&gt;: Open, Limited, Secure, and Websafe.&lt;/p&gt; 
&lt;p&gt;By default, ImageMagick supports up to 32 channels. As of ImageMagick version 7.1.1-16, you can enable up to 64 channels by adding the &lt;strong&gt;--enable-64bit-channel-masks&lt;/strong&gt; option to the Linux configure build script. For Windows this will be enabled automatically.&lt;/p&gt; 
&lt;p&gt;Want more performance from ImageMagick? Try these options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;add more memory to your system, see the &lt;a href=&quot;https://imagemagick.org/script/architecture.php#cache&quot;&gt;pixel cache&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;add more cores to your system, see &lt;a href=&quot;https://imagemagick.org/script/architecture.php#threads&quot;&gt;threads of execution support&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;reduce lock contention with the &lt;a href=&quot;http://goog-perftools.sourceforge.net/doc/tcmalloc.html&quot;&gt;tcmalloc&lt;/a&gt; memory allocation library;&lt;/li&gt; 
 &lt;li&gt;push large images to a solid-state drive, see &lt;a href=&quot;https://imagemagick.org/script/architecture.php#tera-pixel&quot;&gt;large image support&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If these options are prohibitive, you can reduce the quality of the image results. The default build is Q16 HDRI. If you disable &lt;a href=&quot;https://imagemagick.org/script/high-dynamic-range.php&quot;&gt;HDRI&lt;/a&gt;, you use half the memory and instead of predominantly floating point operations, you use the typically more efficient integer operations. The tradeoff is reduced precision and you cannot process out of range pixel values (e.g. negative). If you build the Q8 non-HDRI version of ImageMagick, you again reduce the memory requirements in half-- and once again there is a tradeoff, even less precision and no out of range pixel values. For a Q8 non-HDRI build of ImageMagick, use these configure script options: &lt;strong&gt;--with-quantum-depth=8 --disable-hdri&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git/git</title>
      <link>https://github.com/git/git</link>
      <description>&lt;p&gt;Git Source Code Mirror - This is a publish-only repository but pull requests can be turned into patches to the mailing list via GitGitGadget (https://gitgitgadget.github.io/). Please follow Documentation/SubmittingPatches procedure for any of your improvements.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/git/git/actions?query=branch%3Amaster+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/git/git/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Git - fast, scalable, distributed revision control system&lt;/h1&gt; 
&lt;p&gt;Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.&lt;/p&gt; 
&lt;p&gt;Git is an Open Source project covered by the GNU General Public License version 2 (some parts of it are under different licenses, compatible with the GPLv2). It was originally written by Linus Torvalds with help of a group of hackers around the net.&lt;/p&gt; 
&lt;p&gt;Please read the file &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/INSTALL&quot;&gt;INSTALL&lt;/a&gt; for installation instructions.&lt;/p&gt; 
&lt;p&gt;Many Git online resources are accessible from &lt;a href=&quot;https://git-scm.com/&quot;&gt;https://git-scm.com/&lt;/a&gt; including full documentation and Git related tools.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/Documentation/gittutorial.adoc&quot;&gt;Documentation/gittutorial.adoc&lt;/a&gt; to get started, then see &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/Documentation/giteveryday.adoc&quot;&gt;Documentation/giteveryday.adoc&lt;/a&gt; for a useful minimum set of commands, and &lt;code&gt;Documentation/git-&amp;lt;commandname&amp;gt;.adoc&lt;/code&gt; for documentation of each command. If git has been correctly installed, then the tutorial can also be read with &lt;code&gt;man gittutorial&lt;/code&gt; or &lt;code&gt;git help tutorial&lt;/code&gt;, and the documentation of each command with &lt;code&gt;man git-&amp;lt;commandname&amp;gt;&lt;/code&gt; or &lt;code&gt;git help &amp;lt;commandname&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;CVS users may also want to read &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/Documentation/gitcvs-migration.adoc&quot;&gt;Documentation/gitcvs-migration.adoc&lt;/a&gt; (&lt;code&gt;man gitcvs-migration&lt;/code&gt; or &lt;code&gt;git help cvs-migration&lt;/code&gt; if git is installed).&lt;/p&gt; 
&lt;p&gt;The user discussion and development of Git take place on the Git mailing list -- everyone is welcome to post bug reports, feature requests, comments and patches to &lt;a href=&quot;mailto:git@vger.kernel.org&quot;&gt;git@vger.kernel.org&lt;/a&gt; (read &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/Documentation/SubmittingPatches&quot;&gt;Documentation/SubmittingPatches&lt;/a&gt; for instructions on patch submission and &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/Documentation/CodingGuidelines&quot;&gt;Documentation/CodingGuidelines&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Those wishing to help with error message, usage and informational message string translations (localization l10) should see &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/po/README.md&quot;&gt;po/README.md&lt;/a&gt; (a &lt;code&gt;po&lt;/code&gt; file is a Portable Object file that holds the translations).&lt;/p&gt; 
&lt;p&gt;To subscribe to the list, send an email to &lt;a href=&quot;mailto:git+subscribe@vger.kernel.org&quot;&gt;git+subscribe@vger.kernel.org&lt;/a&gt; (see &lt;a href=&quot;https://subspace.kernel.org/subscribing.html&quot;&gt;https://subspace.kernel.org/subscribing.html&lt;/a&gt; for details). The mailing list archives are available at &lt;a href=&quot;https://lore.kernel.org/git/&quot;&gt;https://lore.kernel.org/git/&lt;/a&gt;, &lt;a href=&quot;https://marc.info/?l=git&quot;&gt;https://marc.info/?l=git&lt;/a&gt; and other archival sites.&lt;/p&gt; 
&lt;p&gt;Issues which are security relevant should be disclosed privately to the Git Security mailing list &lt;a href=&quot;mailto:git-security@googlegroups.com&quot;&gt;git-security@googlegroups.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The maintainer frequently sends the &quot;What&#39;s cooking&quot; reports that list the current status of various development topics to the mailing list. The discussion following them give a good reference for project status, development direction and remaining tasks.&lt;/p&gt; 
&lt;p&gt;The name &quot;git&quot; was given by Linus Torvalds when he wrote the very first version. He described the tool as &quot;the stupid content tracker&quot; and the name as (depending on your mood):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;random three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of &quot;get&quot; may or may not be relevant.&lt;/li&gt; 
 &lt;li&gt;stupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.&lt;/li&gt; 
 &lt;li&gt;&quot;global information tracker&quot;: you&#39;re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.&lt;/li&gt; 
 &lt;li&gt;&quot;goddamn idiotic truckload of sh*t&quot;: when it breaks&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pgvector/pgvector</title>
      <link>https://github.com/pgvector/pgvector</link>
      <description>&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgvector&lt;/h1&gt; 
&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt; 
&lt;p&gt;Store your vectors with the rest of your data. Supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;exact and approximate nearest neighbor search&lt;/li&gt; 
 &lt;li&gt;single-precision, half-precision, binary, and sparse vectors&lt;/li&gt; 
 &lt;li&gt;L2 distance, inner product, cosine distance, L1 distance, Hamming distance, and Jaccard distance&lt;/li&gt; 
 &lt;li&gt;any &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#languages&quot;&gt;language&lt;/a&gt; with a Postgres client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Plus &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt; compliance, point-in-time recovery, JOINs, and all of the other &lt;a href=&quot;https://www.postgresql.org/about/&quot;&gt;great features&lt;/a&gt; of Postgres&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector/actions&quot;&gt;&lt;img src=&quot;https://github.com/pgvector/pgvector/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Linux and Mac&lt;/h3&gt; 
&lt;p&gt;Compile and install the extension (supports Postgres 13+)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /tmp
git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
make
make install # may need sudo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation-notes---linux-and-mac&quot;&gt;installation notes&lt;/a&gt; if you run into issues&lt;/p&gt; 
&lt;p&gt;You can also install it with &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#docker&quot;&gt;Docker&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#homebrew&quot;&gt;Homebrew&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#pgxn&quot;&gt;PGXN&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#apt&quot;&gt;APT&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#yum&quot;&gt;Yum&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#pkg&quot;&gt;pkg&lt;/a&gt;, or &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#conda-forge&quot;&gt;conda-forge&lt;/a&gt;, and it comes preinstalled with &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#postgresapp&quot;&gt;Postgres.app&lt;/a&gt; and many &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#hosted-postgres&quot;&gt;hosted providers&lt;/a&gt;. There are also instructions for &lt;a href=&quot;https://github.com/pgvector/setup-pgvector&quot;&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Ensure &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#download-and-install-the-tools&quot;&gt;C++ support in Visual Studio&lt;/a&gt; is installed, and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;call &quot;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: The exact path will vary depending on your Visual Studio version and edition&lt;/p&gt; 
&lt;p&gt;Then use &lt;code&gt;nmake&lt;/code&gt; to build:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;set &quot;PGROOT=C:\Program Files\PostgreSQL\16&quot;
cd %TEMP%
git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
nmake /F Makefile.win
nmake /F Makefile.win install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation-notes---windows&quot;&gt;installation notes&lt;/a&gt; if you run into issues&lt;/p&gt; 
&lt;p&gt;You can also install it with &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#docker&quot;&gt;Docker&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#conda-forge&quot;&gt;conda-forge&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Enable the extension (do this once in each database where you want to use it)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsql&quot;&gt;CREATE EXTENSION vector;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a vector column with 3 dimensions&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Insert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also supports inner product (&lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt;), cosine distance (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;), and L1 distance (&lt;code&gt;&amp;lt;+&amp;gt;&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;Note: &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product since Postgres only supports &lt;code&gt;ASC&lt;/code&gt; order index scans on operators&lt;/p&gt; 
&lt;h2&gt;Storing&lt;/h2&gt; 
&lt;p&gt;Create a new table with a vector column&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add a vector column to an existing table&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER TABLE items ADD COLUMN embedding vector(3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also supports &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#half-precision-vectors&quot;&gt;half-precision&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#binary-vectors&quot;&gt;binary&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#sparse-vectors&quot;&gt;sparse&lt;/a&gt; vectors&lt;/p&gt; 
&lt;p&gt;Insert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or load vectors in bulk using &lt;code&gt;COPY&lt;/code&gt; (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/loading/example.py&quot;&gt;example&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;COPY items (embedding) FROM STDIN WITH (FORMAT BINARY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Upsert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (id, embedding) VALUES (1, &#39;[1,2,3]&#39;), (2, &#39;[4,5,6]&#39;)
    ON CONFLICT (id) DO UPDATE SET embedding = EXCLUDED.embedding;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Update vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE items SET embedding = &#39;[1,2,3]&#39; WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Delete vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;DELETE FROM items WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Querying&lt;/h2&gt; 
&lt;p&gt;Get the nearest neighbors to a vector&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Supported distance functions are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; - L2 distance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; - (negative) inner product&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; - cosine distance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;+&amp;gt;&lt;/code&gt; - L1 distance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt; - Hamming distance (binary vectors)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;%&amp;gt;&lt;/code&gt; - Jaccard distance (binary vectors)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get the nearest neighbors to a row&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items WHERE id != 1 ORDER BY embedding &amp;lt;-&amp;gt; (SELECT embedding FROM items WHERE id = 1) LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get rows within a certain distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items WHERE embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; &amp;lt; 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Combine with &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; to use an index&lt;/p&gt; 
&lt;h4&gt;Distances&lt;/h4&gt; 
&lt;p&gt;Get the distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; AS distance FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For inner product, multiply by -1 (since &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsql&quot;&gt;SELECT (embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39;) * -1 AS inner_product FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For cosine similarity, use 1 - cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT 1 - (embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39;) AS cosine_similarity FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Aggregates&lt;/h4&gt; 
&lt;p&gt;Average vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT AVG(embedding) FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Average groups of vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT category_id, AVG(embedding) FROM items GROUP BY category_id;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Indexing&lt;/h2&gt; 
&lt;p&gt;By default, pgvector performs exact nearest neighbor search, which provides perfect recall.&lt;/p&gt; 
&lt;p&gt;You can add an index to use approximate nearest neighbor search, which trades some recall for speed. Unlike typical indexes, you will see different results for queries after adding an approximate index.&lt;/p&gt; 
&lt;p&gt;Supported index types are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#hnsw&quot;&gt;HNSW&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#ivfflat&quot;&gt;IVFFlat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;HNSW&lt;/h2&gt; 
&lt;p&gt;An HNSW index creates a multilayer graph. It has better query performance than IVFFlat (in terms of speed-recall tradeoff), but has slower build times and uses more memory. Also, an index can be created without any data in the table since there isn’t a training step like IVFFlat.&lt;/p&gt; 
&lt;p&gt;Add an index for each distance function you want to use.&lt;/p&gt; 
&lt;p&gt;L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Use &lt;code&gt;halfvec_l2_ops&lt;/code&gt; for &lt;code&gt;halfvec&lt;/code&gt; and &lt;code&gt;sparsevec_l2_ops&lt;/code&gt; for &lt;code&gt;sparsevec&lt;/code&gt; (and similar with the other distance functions)&lt;/p&gt; 
&lt;p&gt;Inner product&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_ip_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_cosine_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;L1 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l1_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding bit_hamming_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Jaccard distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding bit_jaccard_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Supported types are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; - up to 2,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;halfvec&lt;/code&gt; - up to 4,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bit&lt;/code&gt; - up to 64,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sparsevec&lt;/code&gt; - up to 1,000 non-zero elements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Index Options&lt;/h3&gt; 
&lt;p&gt;Specify HNSW parameters&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;m&lt;/code&gt; - the max number of connections per layer (16 by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ef_construction&lt;/code&gt; - the size of the dynamic candidate list for constructing the graph (64 by default)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WITH (m = 16, ef_construction = 64);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A higher value of &lt;code&gt;ef_construction&lt;/code&gt; provides better recall at the cost of index build time / insert speed.&lt;/p&gt; 
&lt;h3&gt;Query Options&lt;/h3&gt; 
&lt;p&gt;Specify the size of the dynamic candidate list for search (40 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.ef_search = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A higher value provides better recall at the cost of speed.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;SET LOCAL&lt;/code&gt; inside a transaction to set it for a single query&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL hnsw.ef_search = 100;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Index Build Time&lt;/h3&gt; 
&lt;p&gt;Indexes build significantly faster when the graph fits into &lt;code&gt;maintenance_work_mem&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET maintenance_work_mem = &#39;8GB&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A notice is shown when the graph no longer fits&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;NOTICE:  hnsw graph no longer fits into maintenance_work_mem after 100000 tuples
DETAIL:  Building will take significantly more time.
HINT:  Increase maintenance_work_mem to speed up builds.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Do not set &lt;code&gt;maintenance_work_mem&lt;/code&gt; so high that it exhausts the memory on the server&lt;/p&gt; 
&lt;p&gt;Like other index types, it’s faster to create an index after loading your initial data&lt;/p&gt; 
&lt;p&gt;You can also speed up index creation by increasing the number of parallel workers (2 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET max_parallel_maintenance_workers = 7; -- plus leader
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a large number of workers, you may also need to increase &lt;code&gt;max_parallel_workers&lt;/code&gt; (8 by default)&lt;/p&gt; 
&lt;h3&gt;Indexing Progress&lt;/h3&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://www.postgresql.org/docs/current/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING&quot;&gt;indexing progress&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT phase, round(100.0 * blocks_done / nullif(blocks_total, 0), 1) AS &quot;%&quot; FROM pg_stat_progress_create_index;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The phases for HNSW are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;initializing&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;loading tuples&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;IVFFlat&lt;/h2&gt; 
&lt;p&gt;An IVFFlat index divides vectors into lists, and then searches a subset of those lists that are closest to the query vector. It has faster build times and uses less memory than HNSW, but has lower query performance (in terms of speed-recall tradeoff).&lt;/p&gt; 
&lt;p&gt;Three keys to achieving good recall are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create the index &lt;em&gt;after&lt;/em&gt; the table has some data&lt;/li&gt; 
 &lt;li&gt;Choose an appropriate number of lists - a good place to start is &lt;code&gt;rows / 1000&lt;/code&gt; for up to 1M rows and &lt;code&gt;sqrt(rows)&lt;/code&gt; for over 1M rows&lt;/li&gt; 
 &lt;li&gt;When querying, specify an appropriate number of &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#query-options&quot;&gt;probes&lt;/a&gt; (higher is better for recall, lower is better for speed) - a good place to start is &lt;code&gt;sqrt(lists)&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Add an index for each distance function you want to use.&lt;/p&gt; 
&lt;p&gt;L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Use &lt;code&gt;halfvec_l2_ops&lt;/code&gt; for &lt;code&gt;halfvec&lt;/code&gt; (and similar with the other distance functions)&lt;/p&gt; 
&lt;p&gt;Inner product&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_ip_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding bit_hamming_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Supported types are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; - up to 2,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;halfvec&lt;/code&gt; - up to 4,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bit&lt;/code&gt; - up to 64,000 dimensions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Query Options&lt;/h3&gt; 
&lt;p&gt;Specify the number of probes (1 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET ivfflat.probes = 10;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A higher value provides better recall at the cost of speed, and it can be set to the number of lists for exact nearest neighbor search (at which point the planner won’t use the index)&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;SET LOCAL&lt;/code&gt; inside a transaction to set it for a single query&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL ivfflat.probes = 10;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Index Build Time&lt;/h3&gt; 
&lt;p&gt;Speed up index creation on large tables by increasing the number of parallel workers (2 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET max_parallel_maintenance_workers = 7; -- plus leader
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a large number of workers, you may also need to increase &lt;code&gt;max_parallel_workers&lt;/code&gt; (8 by default)&lt;/p&gt; 
&lt;h3&gt;Indexing Progress&lt;/h3&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://www.postgresql.org/docs/current/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING&quot;&gt;indexing progress&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT phase, round(100.0 * tuples_done / nullif(tuples_total, 0), 1) AS &quot;%&quot; FROM pg_stat_progress_create_index;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The phases for IVFFlat are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;initializing&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;performing k-means&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;assigning tuples&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;loading tuples&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note: &lt;code&gt;%&lt;/code&gt; is only populated during the &lt;code&gt;loading tuples&lt;/code&gt; phase&lt;/p&gt; 
&lt;h2&gt;Filtering&lt;/h2&gt; 
&lt;p&gt;There are a few ways to index nearest neighbor queries with a &lt;code&gt;WHERE&lt;/code&gt; clause.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items WHERE category_id = 123 ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A good place to start is creating an index on the filter column. This can provide fast, exact nearest neighbor search in many cases. Postgres has a number of &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-types.html&quot;&gt;index types&lt;/a&gt; for this: B-tree (default), hash, GiST, SP-GiST, GIN, and BRIN.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items (category_id);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For multiple columns, consider a &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-multicolumn.html&quot;&gt;multicolumn index&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items (location_id, category_id);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Exact indexes work well for conditions that match a low percentage of rows. Otherwise, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#indexing&quot;&gt;approximate indexes&lt;/a&gt; can work better.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With approximate indexes, filtering is applied &lt;em&gt;after&lt;/em&gt; the index is scanned. If a condition matches 10% of rows, with HNSW and the default &lt;code&gt;hnsw.ef_search&lt;/code&gt; of 40, only 4 rows will match on average. For more rows, increase &lt;code&gt;hnsw.ef_search&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.ef_search = 200;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Starting with 0.8.0, you can enable &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#iterative-index-scans&quot;&gt;iterative index scans&lt;/a&gt;, which will automatically scan more of the index when needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.iterative_scan = strict_order;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If filtering by only a few distinct values, consider &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-partial.html&quot;&gt;partial indexing&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WHERE (category_id = 123);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If filtering by many different values, consider &lt;a href=&quot;https://www.postgresql.org/docs/current/ddl-partitioning.html&quot;&gt;partitioning&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (embedding vector(3), category_id int) PARTITION BY LIST(category_id);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Iterative Index Scans&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Added in 0.8.0&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;With approximate indexes, queries with filtering can return less results since filtering is applied &lt;em&gt;after&lt;/em&gt; the index is scanned. Starting with 0.8.0, you can enable iterative index scans, which will automatically scan more of the index until enough results are found (or it reaches &lt;code&gt;hnsw.max_scan_tuples&lt;/code&gt; or &lt;code&gt;ivfflat.max_probes&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Iterative scans can use strict or relaxed ordering.&lt;/p&gt; 
&lt;p&gt;Strict ensures results are in the exact order by distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.iterative_scan = strict_order;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Relaxed allows results to be slightly out of order by distance, but provides better recall&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.iterative_scan = relaxed_order;
# or
SET ivfflat.iterative_scan = relaxed_order;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With relaxed ordering, you can use a &lt;a href=&quot;https://www.postgresql.org/docs/current/queries-with.html#QUERIES-WITH-CTE-MATERIALIZATION&quot;&gt;materialized CTE&lt;/a&gt; to get strict ordering&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;WITH relaxed_results AS MATERIALIZED (
    SELECT id, embedding &amp;lt;-&amp;gt; &#39;[1,2,3]&#39; AS distance FROM items WHERE category_id = 123 ORDER BY distance LIMIT 5
) SELECT * FROM relaxed_results ORDER BY distance;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For queries that filter by distance, use a materialized CTE and place the distance filter outside of it for best performance (due to the &lt;a href=&quot;https://www.postgresql.org/message-id/flat/CAOdR5yGUoMQ6j7M5hNUXrySzaqZVGf_Ne%2B8fwZMRKTFxU1nbJg%40mail.gmail.com&quot;&gt;current behavior&lt;/a&gt; of the Postgres executor)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;WITH nearest_results AS MATERIALIZED (
    SELECT id, embedding &amp;lt;-&amp;gt; &#39;[1,2,3]&#39; AS distance FROM items ORDER BY distance LIMIT 5
) SELECT * FROM nearest_results WHERE distance &amp;lt; 5 ORDER BY distance;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Place any other filters inside the CTE&lt;/p&gt; 
&lt;h3&gt;Iterative Scan Options&lt;/h3&gt; 
&lt;p&gt;Since scanning a large portion of an approximate index is expensive, there are options to control when a scan ends.&lt;/p&gt; 
&lt;h4&gt;HNSW&lt;/h4&gt; 
&lt;p&gt;Specify the max number of tuples to visit (20,000 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.max_scan_tuples = 20000;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: This is approximate and does not affect the initial scan&lt;/p&gt; 
&lt;p&gt;Specify the max amount of memory to use, as a multiple of &lt;code&gt;work_mem&lt;/code&gt; (1 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.scan_mem_multiplier = 2;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Try increasing this if increasing &lt;code&gt;hnsw.max_scan_tuples&lt;/code&gt; does not improve recall&lt;/p&gt; 
&lt;h4&gt;IVFFlat&lt;/h4&gt; 
&lt;p&gt;Specify the max number of probes&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET ivfflat.max_probes = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: If this is lower than &lt;code&gt;ivfflat.probes&lt;/code&gt;, &lt;code&gt;ivfflat.probes&lt;/code&gt; will be used&lt;/p&gt; 
&lt;h2&gt;Half-Precision Vectors&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;halfvec&lt;/code&gt; type to store half-precision vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding halfvec(3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Half-Precision Indexing&lt;/h2&gt; 
&lt;p&gt;Index vectors at half precision for smaller indexes&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((embedding::halfvec(3)) halfvec_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding::halfvec(3) &amp;lt;-&amp;gt; &#39;[1,2,3]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Binary Vectors&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;bit&lt;/code&gt; type to store binary vectors (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/imagehash/example.py&quot;&gt;example&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding bit(3));
INSERT INTO items (embedding) VALUES (&#39;000&#39;), (&#39;111&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;~&amp;gt; &#39;101&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also supports Jaccard distance (&lt;code&gt;&amp;lt;%&amp;gt;&lt;/code&gt;)&lt;/p&gt; 
&lt;h2&gt;Binary Quantization&lt;/h2&gt; 
&lt;p&gt;Use expression indexing for binary quantization&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((binary_quantize(embedding)::bit(3)) bit_hamming_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) &amp;lt;~&amp;gt; binary_quantize(&#39;[1,-2,3]&#39;) LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Re-rank by the original vectors for better recall&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM (
    SELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) &amp;lt;~&amp;gt; binary_quantize(&#39;[1,-2,3]&#39;) LIMIT 20
) ORDER BY embedding &amp;lt;=&amp;gt; &#39;[1,-2,3]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sparse Vectors&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;sparsevec&lt;/code&gt; type to store sparse vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding sparsevec(5));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Insert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (embedding) VALUES (&#39;{1:1,3:2,5:3}/5&#39;), (&#39;{1:4,3:5,5:6}/5&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The format is &lt;code&gt;{index1:value1,index2:value2}/dimensions&lt;/code&gt; and indices start at 1 like SQL arrays&lt;/p&gt; 
&lt;p&gt;Get the nearest neighbors by L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;{1:3,3:1,5:2}/5&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Hybrid Search&lt;/h2&gt; 
&lt;p&gt;Use together with Postgres &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-intro.html&quot;&gt;full-text search&lt;/a&gt; for hybrid search.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT id, content FROM items, plainto_tsquery(&#39;hello search&#39;) query
    WHERE textsearch @@ query ORDER BY ts_rank_cd(textsearch, query) DESC LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use &lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/hybrid_search/rrf.py&quot;&gt;Reciprocal Rank Fusion&lt;/a&gt; or a &lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/hybrid_search/cross_encoder.py&quot;&gt;cross-encoder&lt;/a&gt; to combine results.&lt;/p&gt; 
&lt;h2&gt;Indexing Subvectors&lt;/h2&gt; 
&lt;p&gt;Use expression indexing to index subvectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((subvector(embedding, 1, 3)::vector(3)) vector_cosine_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) &amp;lt;=&amp;gt; subvector(&#39;[1,2,3,4,5]&#39;::vector, 1, 3) LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Re-rank by the full vectors for better recall&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM (
    SELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) &amp;lt;=&amp;gt; subvector(&#39;[1,2,3,4,5]&#39;::vector, 1, 3) LIMIT 20
) ORDER BY embedding &amp;lt;=&amp;gt; &#39;[1,2,3,4,5]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;h3&gt;Tuning&lt;/h3&gt; 
&lt;p&gt;Use a tool like &lt;a href=&quot;https://pgtune.leopard.in.ua/&quot;&gt;PgTune&lt;/a&gt; to set initial values for Postgres server parameters. For instance, &lt;code&gt;shared_buffers&lt;/code&gt; should typically be 25% of the server’s memory. You can find the config file with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SHOW config_file;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And check individual settings with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SHOW shared_buffers;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be sure to restart Postgres for changes to take effect.&lt;/p&gt; 
&lt;h3&gt;Loading&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;COPY&lt;/code&gt; for bulk loading data (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/loading/example.py&quot;&gt;example&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;COPY items (embedding) FROM STDIN WITH (FORMAT BINARY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add any indexes &lt;em&gt;after&lt;/em&gt; loading the initial data for best performance.&lt;/p&gt; 
&lt;h3&gt;Indexing&lt;/h3&gt; 
&lt;p&gt;See index build time for &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#index-build-time&quot;&gt;HNSW&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#index-build-time-1&quot;&gt;IVFFlat&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In production environments, create indexes concurrently to avoid blocking writes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX CONCURRENTLY ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Querying&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; to debug performance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;EXPLAIN ANALYZE SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Exact Search&lt;/h4&gt; 
&lt;p&gt;To speed up queries without an index, increase &lt;code&gt;max_parallel_workers_per_gather&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET max_parallel_workers_per_gather = 4;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If vectors are normalized to length 1 (like &lt;a href=&quot;https://platform.openai.com/docs/guides/embeddings/which-distance-function-should-i-use&quot;&gt;OpenAI embeddings&lt;/a&gt;), use inner product for best performance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Approximate Search&lt;/h4&gt; 
&lt;p&gt;To speed up queries with an IVFFlat index, increase the number of inverted lists (at the expense of recall).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 1000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vacuuming&lt;/h3&gt; 
&lt;p&gt;Vacuuming can take a while for HNSW indexes. Speed it up by reindexing first.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;REINDEX INDEX CONCURRENTLY index_name;
VACUUM table_name;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Monitoring&lt;/h2&gt; 
&lt;p&gt;Monitor performance with &lt;a href=&quot;https://www.postgresql.org/docs/current/pgstatstatements.html&quot;&gt;pg_stat_statements&lt;/a&gt; (be sure to add it to &lt;code&gt;shared_preload_libraries&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE EXTENSION pg_stat_statements;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the most time-consuming queries with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT query, calls, ROUND((total_plan_time + total_exec_time) / calls) AS avg_time_ms,
    ROUND((total_plan_time + total_exec_time) / 60000) AS total_time_min
    FROM pg_stat_statements ORDER BY total_plan_time + total_exec_time DESC LIMIT 20;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;total_plan_time + total_exec_time&lt;/code&gt; with &lt;code&gt;total_time&lt;/code&gt; for Postgres &amp;lt; 13&lt;/p&gt; 
&lt;p&gt;Monitor recall by comparing results from approximate search with exact search.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL enable_indexscan = off; -- use exact search
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Scaling&lt;/h2&gt; 
&lt;p&gt;Scale pgvector the same way you scale Postgres.&lt;/p&gt; 
&lt;p&gt;Scale vertically by increasing memory, CPU, and storage on a single instance. Use existing tools to &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#tuning&quot;&gt;tune parameters&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#monitoring&quot;&gt;monitor performance&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Scale horizontally with &lt;a href=&quot;https://www.postgresql.org/docs/current/hot-standby.html&quot;&gt;replicas&lt;/a&gt;, or use &lt;a href=&quot;https://github.com/citusdata/citus&quot;&gt;Citus&lt;/a&gt; or another approach for sharding (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/citus/example.py&quot;&gt;example&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;Languages&lt;/h2&gt; 
&lt;p&gt;Use pgvector from any language with a Postgres client. You can even generate and store vectors in one language and query them in another.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Libraries / Examples&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-c&quot;&gt;pgvector-c&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C++&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-cpp&quot;&gt;pgvector-cpp&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C#, F#, Visual Basic&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-dotnet&quot;&gt;pgvector-dotnet&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Crystal&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-crystal&quot;&gt;pgvector-crystal&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;D&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-d&quot;&gt;pgvector-d&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dart&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-dart&quot;&gt;pgvector-dart&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Elixir&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-elixir&quot;&gt;pgvector-elixir&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Erlang&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-erlang&quot;&gt;pgvector-erlang&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fortran&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-fortran&quot;&gt;pgvector-fortran&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gleam&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-gleam&quot;&gt;pgvector-gleam&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-go&quot;&gt;pgvector-go&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Haskell&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-haskell&quot;&gt;pgvector-haskell&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Java, Kotlin, Groovy, Scala&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-java&quot;&gt;pgvector-java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;JavaScript, TypeScript&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-node&quot;&gt;pgvector-node&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Julia&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-julia&quot;&gt;pgvector-julia&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Lisp&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-lisp&quot;&gt;pgvector-lisp&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Lua&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-lua&quot;&gt;pgvector-lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Nim&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-nim&quot;&gt;pgvector-nim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OCaml&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-ocaml&quot;&gt;pgvector-ocaml&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Perl&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-perl&quot;&gt;pgvector-perl&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PHP&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-php&quot;&gt;pgvector-php&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Python&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-python&quot;&gt;pgvector-python&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;R&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-r&quot;&gt;pgvector-r&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Raku&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-raku&quot;&gt;pgvector-raku&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ruby&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-ruby&quot;&gt;pgvector-ruby&lt;/a&gt;, &lt;a href=&quot;https://github.com/ankane/neighbor&quot;&gt;Neighbor&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-rust&quot;&gt;pgvector-rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Swift&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-swift&quot;&gt;pgvector-swift&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zig&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-zig&quot;&gt;pgvector-zig&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h4&gt;How many vectors can be stored in a single table?&lt;/h4&gt; 
&lt;p&gt;A non-partitioned table has a limit of 32 TB by default in Postgres. A partitioned table can have thousands of partitions of that size.&lt;/p&gt; 
&lt;h4&gt;Is replication supported?&lt;/h4&gt; 
&lt;p&gt;Yes, pgvector uses the write-ahead log (WAL), which allows for replication and point-in-time recovery.&lt;/p&gt; 
&lt;h4&gt;What if I want to index vectors with more than 2,000 dimensions?&lt;/h4&gt; 
&lt;p&gt;You can use &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#half-precision-indexing&quot;&gt;half-precision indexing&lt;/a&gt; to index up to 4,000 dimensions or &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#binary-quantization&quot;&gt;binary quantization&lt;/a&gt; to index up to 64,000 dimensions. Another option is &lt;a href=&quot;https://en.wikipedia.org/wiki/Dimensionality_reduction&quot;&gt;dimensionality reduction&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Can I store vectors with different dimensions in the same column?&lt;/h4&gt; 
&lt;p&gt;You can use &lt;code&gt;vector&lt;/code&gt; as the type (instead of &lt;code&gt;vector(3)&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE embeddings (model_id bigint, item_id bigint, embedding vector, PRIMARY KEY (model_id, item_id));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, you can only create indexes on rows with the same number of dimensions (using &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-expressional.html&quot;&gt;expression&lt;/a&gt; and &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-partial.html&quot;&gt;partial&lt;/a&gt; indexing):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON embeddings USING hnsw ((embedding::vector(3)) vector_l2_ops) WHERE (model_id = 123);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM embeddings WHERE model_id = 123 ORDER BY embedding::vector(3) &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Can I store vectors with more precision?&lt;/h4&gt; 
&lt;p&gt;You can use the &lt;code&gt;double precision[]&lt;/code&gt; or &lt;code&gt;numeric[]&lt;/code&gt; type to store vectors with more precision.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding double precision[]);

-- use {} instead of [] for Postgres arrays
INSERT INTO items (embedding) VALUES (&#39;{1,2,3}&#39;), (&#39;{4,5,6}&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally, add a &lt;a href=&quot;https://www.postgresql.org/docs/current/ddl-constraints.html&quot;&gt;check constraint&lt;/a&gt; to ensure data can be converted to the &lt;code&gt;vector&lt;/code&gt; type and has the expected dimensions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER TABLE items ADD CHECK (vector_dims(embedding::vector) = 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-expressional.html&quot;&gt;expression indexing&lt;/a&gt; to index (at a lower precision):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((embedding::vector(3)) vector_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding::vector(3) &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Do indexes need to fit into memory?&lt;/h4&gt; 
&lt;p&gt;No, but like other index types, you’ll likely see better performance if they do. You can get the size of an index with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT pg_size_pretty(pg_relation_size(&#39;index_name&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;h4&gt;Why isn’t a query using an index?&lt;/h4&gt; 
&lt;p&gt;The query needs to have an &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt;, and the &lt;code&gt;ORDER BY&lt;/code&gt; must be the result of a distance operator (not an expression) in ascending order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;-- index
ORDER BY embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;

-- no index
ORDER BY 1 - (embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39;) DESC LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can encourage the planner to use an index for a query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL enable_seqscan = off;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, if the table is small, a table scan may be faster.&lt;/p&gt; 
&lt;h4&gt;Why isn’t a query using a parallel table scan?&lt;/h4&gt; 
&lt;p&gt;The planner doesn’t consider &lt;a href=&quot;https://www.postgresql.org/docs/current/storage-toast.html&quot;&gt;out-of-line storage&lt;/a&gt; in cost estimates, which can make a serial scan look cheaper. You can reduce the cost of a parallel scan for a query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL min_parallel_table_scan_size = 1;
SET LOCAL parallel_setup_cost = 1;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or choose to store vectors inline:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER TABLE items ALTER COLUMN embedding SET STORAGE PLAIN;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Why are there less results for a query after adding an HNSW index?&lt;/h4&gt; 
&lt;p&gt;Results are limited by the size of the dynamic candidate list (&lt;code&gt;hnsw.ef_search&lt;/code&gt;), which is 40 by default. There may be even less results due to dead tuples or filtering conditions in the query. Enabling &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#iterative-index-scans&quot;&gt;iterative index scans&lt;/a&gt; can help address this.&lt;/p&gt; 
&lt;p&gt;Also, note that &lt;code&gt;NULL&lt;/code&gt; vectors are not indexed (as well as zero vectors for cosine distance).&lt;/p&gt; 
&lt;h4&gt;Why are there less results for a query after adding an IVFFlat index?&lt;/h4&gt; 
&lt;p&gt;The index was likely created with too little data for the number of lists. Drop the index until the table has more data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;DROP INDEX index_name;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Results can also be limited by the number of probes (&lt;code&gt;ivfflat.probes&lt;/code&gt;). Enabling &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#iterative-index-scans&quot;&gt;iterative index scans&lt;/a&gt; can address this.&lt;/p&gt; 
&lt;p&gt;Also, note that &lt;code&gt;NULL&lt;/code&gt; vectors are not indexed (as well as zero vectors for cosine distance).&lt;/p&gt; 
&lt;h2&gt;Reference&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#vector-type&quot;&gt;Vector&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#halfvec-type&quot;&gt;Halfvec&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#bit-type&quot;&gt;Bit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#sparsevec-type&quot;&gt;Sparsevec&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vector Type&lt;/h3&gt; 
&lt;p&gt;Each vector takes &lt;code&gt;4 * dimensions + 8&lt;/code&gt; bytes of storage. Each element is a single-precision floating-point number (like the &lt;code&gt;real&lt;/code&gt; type in Postgres), and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Vectors can have up to 16,000 dimensions.&lt;/p&gt; 
&lt;h3&gt;Vector Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;element-wise addition&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;element-wise subtraction&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;*&lt;/td&gt; 
   &lt;td&gt;element-wise multiplication&lt;/td&gt; 
   &lt;td&gt;0.5.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;||&lt;/td&gt; 
   &lt;td&gt;concatenate&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; 
   &lt;td&gt;negative inner product&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Vector Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;binary_quantize(vector) → bit&lt;/td&gt; 
   &lt;td&gt;binary quantize&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cosine_distance(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;inner_product(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;inner product&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l1_distance(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.5.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_distance(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_normalize(vector) → vector&lt;/td&gt; 
   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;subvector(vector, integer, integer) → vector&lt;/td&gt; 
   &lt;td&gt;subvector&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vector_dims(vector) → integer&lt;/td&gt; 
   &lt;td&gt;number of dimensions&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vector_norm(vector) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean norm&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Vector Aggregate Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;avg(vector) → vector&lt;/td&gt; 
   &lt;td&gt;average&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sum(vector) → vector&lt;/td&gt; 
   &lt;td&gt;sum&lt;/td&gt; 
   &lt;td&gt;0.5.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Halfvec Type&lt;/h3&gt; 
&lt;p&gt;Each half vector takes &lt;code&gt;2 * dimensions + 8&lt;/code&gt; bytes of storage. Each element is a half-precision floating-point number, and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Half vectors can have up to 16,000 dimensions.&lt;/p&gt; 
&lt;h3&gt;Halfvec Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;element-wise addition&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;element-wise subtraction&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;*&lt;/td&gt; 
   &lt;td&gt;element-wise multiplication&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;||&lt;/td&gt; 
   &lt;td&gt;concatenate&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; 
   &lt;td&gt;negative inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Halfvec Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;binary_quantize(halfvec) → bit&lt;/td&gt; 
   &lt;td&gt;binary quantize&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cosine_distance(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;inner_product(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l1_distance(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_distance(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_norm(halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_normalize(halfvec) → halfvec&lt;/td&gt; 
   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;subvector(halfvec, integer, integer) → halfvec&lt;/td&gt; 
   &lt;td&gt;subvector&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vector_dims(halfvec) → integer&lt;/td&gt; 
   &lt;td&gt;number of dimensions&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Halfvec Aggregate Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;avg(halfvec) → halfvec&lt;/td&gt; 
   &lt;td&gt;average&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sum(halfvec) → halfvec&lt;/td&gt; 
   &lt;td&gt;sum&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Bit Type&lt;/h3&gt; 
&lt;p&gt;Each bit vector takes &lt;code&gt;dimensions / 8 + 8&lt;/code&gt; bytes of storage. See the &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-bit.html&quot;&gt;Postgres docs&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;h3&gt;Bit Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;~&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Hamming distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;%&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Jaccard distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Bit Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;hamming_distance(bit, bit) → double precision&lt;/td&gt; 
   &lt;td&gt;Hamming distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;jaccard_distance(bit, bit) → double precision&lt;/td&gt; 
   &lt;td&gt;Jaccard distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Sparsevec Type&lt;/h3&gt; 
&lt;p&gt;Each sparse vector takes &lt;code&gt;8 * non-zero elements + 16&lt;/code&gt; bytes of storage. Each element is a single-precision floating-point number, and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Sparse vectors can have up to 16,000 non-zero elements.&lt;/p&gt; 
&lt;h3&gt;Sparsevec Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; 
   &lt;td&gt;negative inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Sparsevec Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cosine_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;inner_product(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l1_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_norm(sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_normalize(sparsevec) → sparsevec&lt;/td&gt; 
   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installation Notes - Linux and Mac&lt;/h2&gt; 
&lt;h3&gt;Postgres Location&lt;/h3&gt; 
&lt;p&gt;If your machine has multiple Postgres installations, specify the path to &lt;a href=&quot;https://www.postgresql.org/docs/current/app-pgconfig.html&quot;&gt;pg_config&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export PG_CONFIG=/Library/PostgreSQL/17/bin/pg_config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then re-run the installation instructions (run &lt;code&gt;make clean&lt;/code&gt; before &lt;code&gt;make&lt;/code&gt; if needed). If &lt;code&gt;sudo&lt;/code&gt; is needed for &lt;code&gt;make install&lt;/code&gt;, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo --preserve-env=PG_CONFIG make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A few common paths on Mac are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;EDB installer - &lt;code&gt;/Library/PostgreSQL/17/bin/pg_config&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Homebrew (arm64) - &lt;code&gt;/opt/homebrew/opt/postgresql@17/bin/pg_config&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Homebrew (x86-64) - &lt;code&gt;/usr/local/opt/postgresql@17/bin/pg_config&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;Missing Header&lt;/h3&gt; 
&lt;p&gt;If compilation fails with &lt;code&gt;fatal error: postgres.h: No such file or directory&lt;/code&gt;, make sure Postgres development files are installed on the server.&lt;/p&gt; 
&lt;p&gt;For Ubuntu and Debian, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install postgresql-server-dev-17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;Missing SDK&lt;/h3&gt; 
&lt;p&gt;If compilation fails and the output includes &lt;code&gt;warning: no such sysroot directory&lt;/code&gt; on Mac, your Postgres installation points to a path that no longer exists.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pg_config --cppflags
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Reinstall Postgres to fix this.&lt;/p&gt; 
&lt;h3&gt;Portability&lt;/h3&gt; 
&lt;p&gt;By default, pgvector compiles with &lt;code&gt;-march=native&lt;/code&gt; on some platforms for best performance. However, this can lead to &lt;code&gt;Illegal instruction&lt;/code&gt; errors if trying to run the compiled extension on a different machine.&lt;/p&gt; 
&lt;p&gt;To compile for portability, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make OPTFLAGS=&quot;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation Notes - Windows&lt;/h2&gt; 
&lt;h3&gt;Missing Header&lt;/h3&gt; 
&lt;p&gt;If compilation fails with &lt;code&gt;Cannot open include file: &#39;postgres.h&#39;: No such file or directory&lt;/code&gt;, make sure &lt;code&gt;PGROOT&lt;/code&gt; is correct.&lt;/p&gt; 
&lt;h3&gt;Missing Symbol&lt;/h3&gt; 
&lt;p&gt;If linking fails with &lt;code&gt;unresolved external symbol float_to_shortest_decimal_bufn&lt;/code&gt; with Postgres 17.0-17.2, upgrade to Postgres 17.3+.&lt;/p&gt; 
&lt;h3&gt;Permissions&lt;/h3&gt; 
&lt;p&gt;If installation fails with &lt;code&gt;Access is denied&lt;/code&gt;, re-run the installation instructions as an administrator.&lt;/p&gt; 
&lt;h2&gt;Additional Installation Methods&lt;/h2&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;Get the &lt;a href=&quot;https://hub.docker.com/r/pgvector/pgvector&quot;&gt;Docker image&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker pull pgvector/pgvector:pg17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This adds pgvector to the &lt;a href=&quot;https://hub.docker.com/_/postgres&quot;&gt;Postgres image&lt;/a&gt; (replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version, and run it the same way).&lt;/p&gt; 
&lt;p&gt;You can also build the image manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
docker build --pull --build-arg PG_MAJOR=17 -t myuser/pgvector .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you increase &lt;code&gt;maintenance_work_mem&lt;/code&gt;, make sure &lt;code&gt;--shm-size&lt;/code&gt; is at least that size to avoid an error with parallel HNSW index builds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --shm-size=1g ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;With Homebrew Postgres, you can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: This only adds it to the &lt;code&gt;postgresql@17&lt;/code&gt; and &lt;code&gt;postgresql@14&lt;/code&gt; formulas&lt;/p&gt; 
&lt;h3&gt;PGXN&lt;/h3&gt; 
&lt;p&gt;Install from the &lt;a href=&quot;https://pgxn.org/dist/vector&quot;&gt;PostgreSQL Extension Network&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pgxn install vector
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;APT&lt;/h3&gt; 
&lt;p&gt;Debian and Ubuntu packages are available from the &lt;a href=&quot;https://wiki.postgresql.org/wiki/Apt&quot;&gt;PostgreSQL APT Repository&lt;/a&gt;. Follow the &lt;a href=&quot;https://wiki.postgresql.org/wiki/Apt#Quickstart&quot;&gt;setup instructions&lt;/a&gt; and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install postgresql-17-pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;Yum&lt;/h3&gt; 
&lt;p&gt;RPM packages are available from the &lt;a href=&quot;https://yum.postgresql.org/&quot;&gt;PostgreSQL Yum Repository&lt;/a&gt;. Follow the &lt;a href=&quot;https://www.postgresql.org/download/linux/redhat/&quot;&gt;setup instructions&lt;/a&gt; for your distribution and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo yum install pgvector_17
# or
sudo dnf install pgvector_17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;pkg&lt;/h3&gt; 
&lt;p&gt;Install the FreeBSD package with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pkg install postgresql16-pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or the port with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/ports/databases/pgvector
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;conda-forge&lt;/h3&gt; 
&lt;p&gt;With Conda Postgres, install from &lt;a href=&quot;https://anaconda.org/conda-forge/pgvector&quot;&gt;conda-forge&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;conda install -c conda-forge pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method is &lt;a href=&quot;https://github.com/conda-forge/pgvector-feedstock&quot;&gt;community-maintained&lt;/a&gt; by &lt;a href=&quot;https://github.com/mmcauliffe&quot;&gt;@mmcauliffe&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Postgres.app&lt;/h3&gt; 
&lt;p&gt;Download the &lt;a href=&quot;https://postgresapp.com/downloads.html&quot;&gt;latest release&lt;/a&gt; with Postgres 15+.&lt;/p&gt; 
&lt;h2&gt;Hosted Postgres&lt;/h2&gt; 
&lt;p&gt;pgvector is available on &lt;a href=&quot;https://github.com/pgvector/pgvector/issues/54&quot;&gt;these providers&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Upgrading&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation&quot;&gt;Install&lt;/a&gt; the latest version (use the same method as the original installation). Then in each database you want to upgrade, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER EXTENSION vector UPDATE;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check the version in the current database with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT extversion FROM pg_extension WHERE extname = &#39;vector&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/3318464.3386131&quot;&gt;PASE: PostgreSQL Ultra-High-Dimensional Approximate Nearest Neighbor Search Extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebookresearch/faiss&quot;&gt;Faiss: A Library for Efficient Similarity Search and Clustering of Dense Vectors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cdn.aaai.org/ICML/2003/ICML03-022.pdf&quot;&gt;Using the Triangle Inequality to Accelerate k-means&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf&quot;&gt;k-means++: The Advantage of Careful Seeding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.cs.utexas.edu/users/inderjit/public_papers/concept_mlj.pdf&quot;&gt;Concept Decompositions for Large Sparse Text Data using Clustering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://arxiv.org/ftp/arxiv/papers/1603/1603.09320.pdf&quot;&gt;Efficient and Robust Approximate Nearest Neighbor Search using Hierarchical Navigable Small World Graphs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;History&lt;/h2&gt; 
&lt;p&gt;View the &lt;a href=&quot;https://github.com/pgvector/pgvector/raw/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Everyone is encouraged to help improve this project. Here are a few ways you can help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector/issues&quot;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fix bugs and &lt;a href=&quot;https://github.com/pgvector/pgvector/pulls&quot;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; 
 &lt;li&gt;Suggest or add new features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To get started with development:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/pgvector/pgvector.git
cd pgvector
make
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run all tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make installcheck        # regression tests
make prove_installcheck  # TAP tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run single tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make installcheck REGRESS=functions                            # regression test
make prove_installcheck PROVE_TESTS=test/t/001_ivfflat_wal.pl  # TAP test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable assertions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DUSE_ASSERT_CHECKING&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable benchmarking:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DIVFFLAT_BENCH&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To show memory usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DHNSW_MEMORY -DIVFFLAT_MEMORY&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get k-means metrics:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DIVFFLAT_KMEANS_DEBUG&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Resources for contributors&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/extend-pgxs.html&quot;&gt;Extension Building Infrastructure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/indexam.html&quot;&gt;Index Access Method Interface Definition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/generic-wal.html&quot;&gt;Generic WAL Records&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>hashcat/hashcat</title>
      <link>https://github.com/hashcat/hashcat</link>
      <description>&lt;p&gt;World&#39;s fastest and most advanced password recovery utility&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;em&gt;hashcat&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;hashcat&lt;/strong&gt; is the world&#39;s fastest and most advanced password recovery utility, supporting five unique modes of attack for over 300 highly-optimized hashing algorithms. hashcat currently supports CPUs, GPUs, and other hardware accelerators on Linux, Windows, and macOS, and has facilities to help enable distributed password cracking.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;hashcat&lt;/strong&gt; is licensed under the MIT license. Refer to &lt;a href=&quot;https://raw.githubusercontent.com/hashcat/hashcat/master/docs/license.txt&quot;&gt;docs/license.txt&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Download the &lt;a href=&quot;https://hashcat.net/hashcat/&quot;&gt;latest release&lt;/a&gt; and unpack it in the desired location. Please remember to use &lt;code&gt;7z x&lt;/code&gt; when unpacking the archive from the command line to ensure full file paths remain intact.&lt;/p&gt; 
&lt;h3&gt;Usage/Help&lt;/h3&gt; 
&lt;p&gt;Please refer to the &lt;a href=&quot;https://hashcat.net/wiki/&quot;&gt;Hashcat Wiki&lt;/a&gt; and the output of &lt;code&gt;--help&lt;/code&gt; for usage information and general help. A list of frequently asked questions may also be found &lt;a href=&quot;https://hashcat.net/wiki/doku.php?id=frequently_asked_questions&quot;&gt;here&lt;/a&gt;. The &lt;a href=&quot;https://hashcat.net/forum/&quot;&gt;Hashcat Forum&lt;/a&gt; also contains a plethora of information. If you still think you need help by a real human come to &lt;a href=&quot;https://discord.gg/HFS523HGBT&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;Refer to &lt;a href=&quot;https://raw.githubusercontent.com/hashcat/hashcat/master/BUILD.md&quot;&gt;BUILD.md&lt;/a&gt; for instructions on how to build &lt;strong&gt;hashcat&lt;/strong&gt; from source.&lt;/p&gt; 
&lt;p&gt;Tests:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Travis&lt;/th&gt; 
   &lt;th&gt;Coverity&lt;/th&gt; 
   &lt;th&gt;GitHub Actions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://travis-ci.org/hashcat/hashcat&quot;&gt;&lt;img src=&quot;https://travis-ci.org/hashcat/hashcat.svg?branch=master&quot; alt=&quot;Hashcat Travis Build status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://scan.coverity.com/projects/hashcat&quot;&gt;&lt;img src=&quot;https://scan.coverity.com/projects/11753/badge.svg?sanitize=true&quot; alt=&quot;Coverity Scan Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/hashcat/hashcat/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/hashcat/hashcat/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Hashcat GitHub Actions Build status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Contributions are welcome and encouraged, provided your code is of sufficient quality. Before submitting a pull request, please ensure your code adheres to the following requirements:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Licensed under MIT license, or dedicated to the public domain (BSD, GPL, etc. code is incompatible)&lt;/li&gt; 
 &lt;li&gt;Adheres to gnu99 standard&lt;/li&gt; 
 &lt;li&gt;Compiles cleanly with no warnings when compiled with &lt;code&gt;-W -Wall -std=gnu99&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Indent_style#Allman_style&quot;&gt;Allman-style&lt;/a&gt; code blocks &amp;amp; indentation&lt;/li&gt; 
 &lt;li&gt;Uses 2-spaces as the indentation or a tab if it&#39;s required (for example: Makefiles)&lt;/li&gt; 
 &lt;li&gt;Uses lower-case function and variable names&lt;/li&gt; 
 &lt;li&gt;Avoids the use of &lt;code&gt;!&lt;/code&gt; and uses positive conditionals wherever possible (e.g., &lt;code&gt;if (foo == 0)&lt;/code&gt; instead of &lt;code&gt;if (!foo)&lt;/code&gt;, and &lt;code&gt;if (foo)&lt;/code&gt; instead of &lt;code&gt;if (foo != 0)&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Use code like array[index + 0] if you also need to do array[index + 1], to keep it aligned&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can use GNU Indent to help assist you with the style requirements:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;indent -st -bad -bap -sc -bl -bli0 -ncdw -nce -cli0 -cbi0 -pcs -cs -npsl -bs -nbc -bls -blf -lp -i2 -ts2 -nut -l1024 -nbbo -fca -lc1024 -fc1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Your pull request should fully describe the functionality you are adding/removing or the problem you are solving. Regardless of whether your patch modifies one line or one thousand lines, you must describe what has prompted and/or motivated the change.&lt;/p&gt; 
&lt;p&gt;Solve only one problem in each pull request. If you&#39;re fixing a bug and adding a new feature, you need to make two separate pull requests. If you&#39;re fixing three bugs, you need to make three separate pull requests. If you&#39;re adding four new features, you need to make four separate pull requests. So on, and so forth.&lt;/p&gt; 
&lt;p&gt;If your patch fixes a bug, please be sure there is an &lt;a href=&quot;https://github.com/hashcat/hashcat/issues&quot;&gt;issue&lt;/a&gt; open for the bug before submitting a pull request. If your patch aims to improve performance or optimize an algorithm, be sure to quantify your optimizations and document the trade-offs, and back up your claims with benchmarks and metrics.&lt;/p&gt; 
&lt;p&gt;In order to maintain the quality and integrity of the &lt;strong&gt;hashcat&lt;/strong&gt; source tree, all pull requests must be reviewed and signed off by at least two &lt;a href=&quot;https://github.com/orgs/hashcat/people&quot;&gt;board members&lt;/a&gt; before being merged. The &lt;a href=&quot;https://github.com/jsteube&quot;&gt;project lead&lt;/a&gt; has the ultimate authority in deciding whether to accept or reject a pull request. Do not be discouraged if your pull request is rejected!&lt;/p&gt; 
&lt;h3&gt;Happy Cracking!&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>espressif/esp-adf</title>
      <link>https://github.com/espressif/esp-adf</link>
      <description>&lt;p&gt;Espressif Audio Development Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espressif Audio Development Framework&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/doc_latest.svg?sanitize=true&quot; alt=&quot;Documentation Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Espressif Systems Audio Development Framework (ESP-ADF) is the official audio development framework for the &lt;a href=&quot;https://espressif.com/en/products/hardware/esp32/overview&quot;&gt;ESP32&lt;/a&gt;, &lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32-s2&quot;&gt;ESP32-S2&lt;/a&gt;, &lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32-c3&quot;&gt;ESP32-C3&lt;/a&gt;, &lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32-c6&quot;&gt;ESP32-C6&lt;/a&gt;, &lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32-s3&quot;&gt;ESP32-S3&lt;/a&gt;, and &lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32-p4&quot;&gt;ESP32-P4&lt;/a&gt; SoCs.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;ESP-ADF supports development of audio applications for the Espressif Systems SoCs in the most comprehensive way. With ESP-ADF, you can easily add features, develop audio and video applications from simple to complex:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Music player or recorder supports audio formats such as MP3, AAC, FLAC, WAV, OGG, OPUS, AMR, TS, EQ, Downmixer, Sonic, ALC, G.711 and etc.&lt;/li&gt; 
 &lt;li&gt;Play music from sources: HTTP, HLS (HTTP Live Streaming), SPIFFS, SDCARD, A2DP-Source, A2DP-Sink, HFP and etc.&lt;/li&gt; 
 &lt;li&gt;Integrate media protocols, such as: DLNA, VoIP, RMTP, ESP-RTC (SIP, RTSP, and RTCP), etc.&lt;/li&gt; 
 &lt;li&gt;Video call, video recording and video live streaming&lt;/li&gt; 
 &lt;li&gt;Internet Radio&lt;/li&gt; 
 &lt;li&gt;Voice recognition and integration with online services such as Alexa, DuerOS and etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As a general, the ESP-ADF features will be supported as shown below:&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/adf_block_diagram.png&quot; alt=&quot;ADF Block Diagram&quot; align=&quot;center&quot;&gt;
&lt;/div&gt; 
&lt;h2&gt;Developing with the ESP-ADF&lt;/h2&gt; 
&lt;h3&gt;IDF Version&lt;/h3&gt; 
&lt;p&gt;The following table shows the ESP-IDF versions supported by ESP-ADF at the current time. The label &lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt; means supported, and the label &lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/no-icon.png&quot; alt=&quot;alt text&quot;&gt; means not supported.&lt;/p&gt; 
&lt;p&gt;The ESP-IDF master branch is marked as not supported because the major feature changes it has introduced may cause conflicts with ESP-ADF. Yet, the ADF examples not affected by those feature changes can still run correctly on the IDF master branch.&lt;/p&gt; 
&lt;p&gt;End of Life IDF branches are removed. See &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html#support-periods&quot;&gt;IDF Supported Periods&lt;/a&gt; for details.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP-IDF &lt;br&gt; &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.0/esp32/versions.html&quot;&gt;Release/v5.0&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP-IDF &lt;br&gt; &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/versions.html&quot;&gt;Release/v5.1&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP-IDF &lt;br&gt; &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/versions.html&quot;&gt;Release/v5.2&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP-IDF &lt;br&gt; &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.3/esp32/versions.html&quot;&gt;Release/v5.3&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;ESP-IDF &lt;br&gt; &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/versions.html&quot;&gt;Master&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP-ADF &lt;br&gt; Master&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/no-icon.png&quot; alt=&quot;alt text&quot; title=&quot;not supported&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP-ADF &lt;br&gt; Release/v2.7&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/no-icon.png&quot; alt=&quot;alt text&quot; title=&quot;not supported&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP-ADF &lt;br&gt; Release/v2.6&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot; title=&quot;supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/no-icon.png&quot; alt=&quot;alt text&quot; title=&quot;not supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/no-icon.png&quot; alt=&quot;alt text&quot; title=&quot;not supported&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/no-icon.png&quot; alt=&quot;alt text&quot; title=&quot;not supported&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Quick Start&lt;/h3&gt; 
&lt;p&gt;You need one of ESP-IDF versions described in &lt;a href=&quot;https://github.com/espressif/esp-adf/releases&quot;&gt;ESP-ADF Releases&lt;/a&gt;, one of audio boards below and headphones.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If this is your first exposure to ESP-IDF, proceed to &lt;strong&gt;Getting Started&lt;/strong&gt; documentation specific for &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html&quot;&gt;ESP32&lt;/a&gt;, &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/get-started/index.html&quot;&gt;ESP32-S2&lt;/a&gt;, &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/index.html&quot;&gt;ESP32-S3&lt;/a&gt; or &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32p4/index.html&quot;&gt;ESP32-P4&lt;/a&gt; SoCs.&lt;/p&gt; 
&lt;p&gt;Click on one of the audio boards shown below to set up and use the ESP-ADF &lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/get-started/index.html&quot;&gt;getting-started&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h3&gt;Hardware&lt;/h3&gt; 
&lt;p&gt;Espressif Systems has released a number of boards for ESP-ADF to develop audio applications. Click the links below to learn more information on each board.&lt;/p&gt; 
&lt;p&gt;It is recommended to use the ESP-ADF master branch, as it has the latest bugfixes and the new features.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-lyrat-mini.html&quot;&gt;ESP32-LyraT-Mini&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/user-guide-esp32-s3-korvo-2.html&quot;&gt;ESP32-S3-Korvo-2&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/user-guide-esp32-c3-lyra.html&quot;&gt;ESP32-C3-Lyra&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/espressif/esp-box/tree/master&quot;&gt;ESP32-S3-Box Series&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-dev-kits/en/latest/esp32p4/esp32-p4-function-ev-board/index.html&quot;&gt;ESP32-P4-Function-EV-Board&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-lyrat-mini.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-lyrat-mini-v1.2.png&quot; width=&quot;110&quot; alt=&quot;ESP32-LyraT-Mini Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/get-started/user-guide-esp32-s3-korvo-2.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-s3-korvo-2-v3.0-overview.png&quot; width=&quot;120&quot; alt=&quot;ESP32-S3-Korvo-2 Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/user-guide-esp32-c3-lyra.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-c3-lyra-v2.0-small.png&quot; width=&quot;120&quot; alt=&quot;ESP32-C3-Lyra Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/espressif/esp-box/tree/master&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32_s3_box_3.jpg&quot; width=&quot;100&quot; alt=&quot;ESP32-S3-Box Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-dev-kits/en/latest/esp32p4/esp32-p4-function-ev-board/index.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-p4-function-ev-board.jpg&quot; width=&quot;100&quot; alt=&quot;&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP-ADF Master&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt; &lt;sup&gt; &lt;strong&gt;1&lt;/strong&gt; &lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP-ADF Release/v2.7&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt; &lt;sup&gt; &lt;strong&gt;1&lt;/strong&gt; &lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP-ADF Release/v2.6&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/yes-checkm.png&quot; alt=&quot;alt text&quot;&gt; &lt;sup&gt; &lt;strong&gt;1&lt;/strong&gt; &lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/no-icon.png&quot; alt=&quot;alt text&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; For the development board of &lt;a href=&quot;https://github.com/espressif/esp-box&quot;&gt;esp-box series&lt;/a&gt;, only &lt;a href=&quot;https://github.com/espressif/esp-box/raw/master/docs/hardware_overview/esp32_s3_box/hardware_overview_for_box.md&quot;&gt;esp32-s3-box&lt;/a&gt; and &lt;a href=&quot;https://github.com/espressif/esp-box/raw/master/docs/hardware_overview/esp32_s3_box_lite/hardware_overview_for_lite.md&quot;&gt;esp32-s3-box-lite&lt;/a&gt; are supported in &lt;em&gt;ESP-ADF&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;The following boards have reached their &lt;strong&gt;end of life&lt;/strong&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-lyrat.html&quot;&gt;ESP32-LyraT&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-lyratd-msc.html&quot;&gt;ESP32-LyraTD-MSC&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-korvo-du1906.html&quot;&gt;ESP32-Korvo-DU1906&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/hw-reference/esp32s2/user-guide-esp32-s2-kaluga-1-kit.html&quot;&gt;ESP32-S2-Kaluga-1 Kit&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-lyrat.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-lyrat-v4.2-side.jpg&quot; width=&quot;120&quot; alt=&quot;ESP32-LyraT Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-lyratd-msc.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-lyratd-msc-v2.2.jpg&quot; width=&quot;120&quot; alt=&quot;ESP32-LyraTD-MSC Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-korvo-du1906.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-korvo-du1906-v1.1.png&quot; width=&quot;110&quot; alt=&quot;ESP32-Korvo-DU1906 Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/hw-reference/esp32s2/user-guide-esp32-s2-kaluga-1-kit.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs/_static/esp32-s2-kaluga-1-kit.png&quot; width=&quot;100&quot; alt=&quot;ESP32-LyraT-Mini Development Board&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;p&gt;Check folder &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/examples&quot;&gt;examples&lt;/a&gt; that contains sample applications to demonstrate API features of the ESP-ADF.&lt;/p&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/en/latest/index.html&quot;&gt;Documentation&lt;/a&gt; for the latest version of &lt;a href=&quot;https://docs.espressif.com/projects/esp-adf/&quot;&gt;https://docs.espressif.com/projects/esp-adf/&lt;/a&gt;. This documentation is built from the &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-adf/master/docs&quot;&gt;docs directory&lt;/a&gt; of this repository.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://esp32.com/&quot;&gt;esp32.com forum&lt;/a&gt; is a place to ask questions and find community resources. On the forum there is a &lt;a href=&quot;https://esp32.com/viewforum.php?f=20&quot;&gt;section dedicated to ESP-ADF&lt;/a&gt; users.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-adf/issues&quot;&gt;Check the Issues section on github&lt;/a&gt; if you find a bug or have a feature request. Please check existing Issues before opening a new one.&lt;/li&gt; 
 &lt;li&gt;If you&#39;re interested in contributing to ESP-ADF, please check the &lt;a href=&quot;https://esp-idf.readthedocs.io/en/latest/contribute/index.html&quot;&gt;Contributions Guide&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>BasedHardware/omi</title>
      <link>https://github.com/BasedHardware/omi</link>
      <description>&lt;p&gt;AI wearables. Put it on, speak, transcribe, automatically&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;&lt;strong&gt;omi&lt;/strong&gt;&lt;/h1&gt; 
 &lt;p&gt;Meet Omi, the world’s leading open-source AI wearable that captures conversations, gives summaires, action items and does actions for you. Simply connect Omi to your mobile device and enjoy automatic, high-quality transcriptions of meetings, chats, and voice memos wherever you are.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/834d3fdb-31b5-4f22-ae35-da3d2b9a8f59&quot; alt=&quot;Omi&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/7a658366-9e02-4057-bde5-a510e1f0217a&quot; alt=&quot;CleanShot 2025-02-08 at 18 22 23&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://discord.gg/omi&quot;&gt;&lt;img src=&quot;https://dcbadge.vercel.app/api/server/ZutWMTJnwA?style=flat&quot; alt=&quot;Discord Follow&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&quot; alt=&quot;License: MIT&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/BasedHardware/Omi&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/BasedHardware/Omi&quot; alt=&quot;GitHub Repo stars&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h3&gt; &lt;p&gt;&lt;a href=&quot;https://omi.me/&quot;&gt;Homepage&lt;/a&gt; | &lt;a href=&quot;https://docs.omi.me/&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://www.omi.me/cart/50230946562340:1&quot;&gt;Buy Consumer device&lt;/a&gt; | &lt;a href=&quot;https://www.omi.me/products/omi-dev-kit-2&quot;&gt;Buy Developer Kit&lt;/a&gt;&lt;/p&gt; &lt;/h3&gt; 
 &lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.friend.ios&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/7/78/Google_Play_Store_badge_EN.svg?sanitize=true&quot; alt=&quot;Get it on Google Play&quot; height=&quot;50px&quot; width=&quot;180px&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://apps.apple.com/us/app/friend-ai-wearable/id6502156163&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/3c/Download_on_the_App_Store_Badge.svg?sanitize=true&quot; alt=&quot;Download on the App Store&quot; height=&quot;50px&quot; width=&quot;180px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;In this repo:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BasedHardware/omi/tree/main/omi&quot;&gt;omi device&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BasedHardware/omi/tree/main/app&quot;&gt;mobile app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BasedHardware/omi/tree/main/personas-open-source&quot;&gt;ai personas (web)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.omi.me/&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.omi.me/docs/developer/AppSetup&quot;&gt;omi mobile App setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.omi.me/docs/assembly/Buying_Guide/&quot;&gt;Buying Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.omi.me/docs/assembly/Build_the_device/&quot;&gt;Build the device&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.omi.me/docs/get_started/Flash_device/&quot;&gt;Install firmware&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.omi.me/docs/developer/apps/Introduction&quot;&gt;Create your own app in 1 minute&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out our &lt;a href=&quot;https://docs.omi.me/docs/developer/Contribution/&quot;&gt;contributions guide&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Earn from contributing! Check the &lt;a href=&quot;https://omi.me/bounties&quot;&gt;paid bounties 🤑&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/BasedHardware/Omi/issues&quot;&gt;current issues&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join the &lt;a href=&quot;https://discord.gg/omi&quot;&gt;Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Build your own &lt;a href=&quot;https://docs.omi.me/docs/developer/apps/Introduction&quot;&gt;Plugins/Integrations&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;Omi is available under &lt;a href=&quot;https://github.com/BasedHardware/omi/raw/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zephyrproject-rtos/zephyr</title>
      <link>https://github.com/zephyrproject-rtos/zephyr</link>
      <description>&lt;p&gt;Primary Git Repository for the Zephyr Project. Zephyr is a new generation, scalable, optimized, secure RTOS for multiple hardware architectures.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; 
&lt;a href=&quot;https://www.zephyrproject.org&quot;&gt; &lt;p align=&quot;center&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;doc/_static/images/logo-readme-dark.svg&quot;&gt; 
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;doc/_static/images/logo-readme-light.svg&quot;&gt; 
   &lt;img src=&quot;https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/main/doc/_static/images/logo-readme-light.svg?sanitize=true&quot;&gt; 
  &lt;/picture&gt; &lt;/p&gt; &lt;/a&gt; 
&lt;p&gt;&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/74&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/74/badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://scorecard.dev/viewer/?uri=github.com/zephyrproject-rtos/zephyr&quot;&gt;&lt;img src=&quot;https://api.securityscorecards.dev/projects/github.com/zephyrproject-rtos/zephyr/badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml?query=branch%3Amain&quot;&gt;&lt;img src=&quot;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml/badge.svg?event=push&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Zephyr Project is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind.&lt;/p&gt; 
&lt;p&gt;The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways.&lt;/p&gt; 
&lt;p&gt;The Zephyr kernel supports multiple architectures, including ARM (Cortex-A, Cortex-R, Cortex-M), Intel x86, ARC, Nios II, Tensilica Xtensa, and RISC-V, SPARC, MIPS, and a large number of &lt;code&gt;supported boards&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;.. below included in doc/introduction/introduction.rst&lt;/p&gt; 
&lt;p&gt;Getting Started&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Welcome to Zephyr! See the &lt;code&gt;Introduction to Zephyr&lt;/code&gt;_ for a high-level overview, and the documentation&#39;s &lt;code&gt;Getting Started Guide&lt;/code&gt;_ to start developing.&lt;/p&gt; 
&lt;p&gt;.. start_include_here&lt;/p&gt; 
&lt;p&gt;Community Support&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Community support is provided via mailing lists and Discord; see the Resources below for details.&lt;/p&gt; 
&lt;p&gt;.. _project-resources:&lt;/p&gt; 
&lt;p&gt;Resources&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Here&#39;s a quick summary of resources to help you find your way around:&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;| 📖 &lt;code&gt;Zephyr Documentation&lt;/code&gt;_ | 🚀 &lt;code&gt;Getting Started Guide&lt;/code&gt;_ | 🙋🏽 &lt;code&gt;Tips when asking for help&lt;/code&gt;_ | 💻 &lt;code&gt;Code samples&lt;/code&gt;_&lt;/p&gt; 
&lt;h2&gt;Code and Development&lt;/h2&gt; 
&lt;p&gt;| 🌐 &lt;code&gt;Source Code Repository&lt;/code&gt;_ | 📦 &lt;code&gt;Releases&lt;/code&gt;_ | 🤝 &lt;code&gt;Contribution Guide&lt;/code&gt;_&lt;/p&gt; 
&lt;h2&gt;Community and Support&lt;/h2&gt; 
&lt;p&gt;| 💬 &lt;code&gt;Discord Server&lt;/code&gt;_ for real-time community discussions | 📧 &lt;code&gt;User mailing list (users@lists.zephyrproject.org)&lt;/code&gt;_ | 📧 &lt;code&gt;Developer mailing list (devel@lists.zephyrproject.org)&lt;/code&gt;_ | 📬 &lt;code&gt;Other project mailing lists&lt;/code&gt;_ | 📚 &lt;code&gt;Project Wiki&lt;/code&gt;_&lt;/p&gt; 
&lt;h2&gt;Issue Tracking and Security&lt;/h2&gt; 
&lt;p&gt;| 🐛 &lt;code&gt;GitHub Issues&lt;/code&gt;_ | 🔒 &lt;code&gt;Security documentation&lt;/code&gt;_ | 🛡️ &lt;code&gt;Security Advisories Repository&lt;/code&gt;_ | ⚠️ Report security vulnerabilities at &lt;a href=&quot;mailto:vulnerabilities@zephyrproject.org&quot;&gt;vulnerabilities@zephyrproject.org&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Additional Resources&lt;/h2&gt; 
&lt;p&gt;| 🌐 &lt;code&gt;Zephyr Project Website&lt;/code&gt;_ | 📺 &lt;code&gt;Zephyr Tech Talks&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;.. _Zephyr Project Website: &lt;a href=&quot;https://www.zephyrproject.org&quot;&gt;https://www.zephyrproject.org&lt;/a&gt; .. _Discord Server: &lt;a href=&quot;https://chat.zephyrproject.org&quot;&gt;https://chat.zephyrproject.org&lt;/a&gt; .. _supported boards: &lt;a href=&quot;https://docs.zephyrproject.org/latest/boards/index.html&quot;&gt;https://docs.zephyrproject.org/latest/boards/index.html&lt;/a&gt; .. _Zephyr Documentation: &lt;a href=&quot;https://docs.zephyrproject.org&quot;&gt;https://docs.zephyrproject.org&lt;/a&gt; .. _Introduction to Zephyr: &lt;a href=&quot;https://docs.zephyrproject.org/latest/introduction/index.html&quot;&gt;https://docs.zephyrproject.org/latest/introduction/index.html&lt;/a&gt; .. _Getting Started Guide: &lt;a href=&quot;https://docs.zephyrproject.org/latest/develop/getting_started/index.html&quot;&gt;https://docs.zephyrproject.org/latest/develop/getting_started/index.html&lt;/a&gt; .. _Contribution Guide: &lt;a href=&quot;https://docs.zephyrproject.org/latest/contribute/index.html&quot;&gt;https://docs.zephyrproject.org/latest/contribute/index.html&lt;/a&gt; .. _Source Code Repository: &lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr&quot;&gt;https://github.com/zephyrproject-rtos/zephyr&lt;/a&gt; .. _GitHub Issues: &lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/issues&quot;&gt;https://github.com/zephyrproject-rtos/zephyr/issues&lt;/a&gt; .. _Releases: &lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases&quot;&gt;https://github.com/zephyrproject-rtos/zephyr/releases&lt;/a&gt; .. _Project Wiki: &lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/wiki&quot;&gt;https://github.com/zephyrproject-rtos/zephyr/wiki&lt;/a&gt; .. _User mailing list (&lt;a href=&quot;mailto:users@lists.zephyrproject.org&quot;&gt;users@lists.zephyrproject.org&lt;/a&gt;): &lt;a href=&quot;https://lists.zephyrproject.org/g/users&quot;&gt;https://lists.zephyrproject.org/g/users&lt;/a&gt; .. _Developer mailing list (&lt;a href=&quot;mailto:devel@lists.zephyrproject.org&quot;&gt;devel@lists.zephyrproject.org&lt;/a&gt;): &lt;a href=&quot;https://lists.zephyrproject.org/g/devel&quot;&gt;https://lists.zephyrproject.org/g/devel&lt;/a&gt; .. _Other project mailing lists: &lt;a href=&quot;https://lists.zephyrproject.org/g/main/subgroups&quot;&gt;https://lists.zephyrproject.org/g/main/subgroups&lt;/a&gt; .. _Code samples: &lt;a href=&quot;https://docs.zephyrproject.org/latest/samples/index.html&quot;&gt;https://docs.zephyrproject.org/latest/samples/index.html&lt;/a&gt; .. _Security documentation: &lt;a href=&quot;https://docs.zephyrproject.org/latest/security/index.html&quot;&gt;https://docs.zephyrproject.org/latest/security/index.html&lt;/a&gt; .. _Security Advisories Repository: &lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/security&quot;&gt;https://github.com/zephyrproject-rtos/zephyr/security&lt;/a&gt; .. _Tips when asking for help: &lt;a href=&quot;https://docs.zephyrproject.org/latest/develop/getting_started/index.html#asking-for-help&quot;&gt;https://docs.zephyrproject.org/latest/develop/getting_started/index.html#asking-for-help&lt;/a&gt; .. _Zephyr Tech Talks: &lt;a href=&quot;https://www.zephyrproject.org/tech-talks&quot;&gt;https://www.zephyrproject.org/tech-talks&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asg017/sqlite-vec</title>
      <link>https://github.com/asg017/sqlite-vec</link>
      <description>&lt;p&gt;A vector search SQLite extension that runs anywhere!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;sqlite-vec&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/Ve7WeCJFXk&quot;&gt;&lt;img src=&quot;https://dcbadge.vercel.app/api/server/VCtQ8cGhUs&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely small, &quot;fast enough&quot; vector search SQLite extension that runs anywhere! A successor to &lt;a href=&quot;https://github.com/asg017/sqlite-vss&quot;&gt;&lt;code&gt;sqlite-vss&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- deno-fmt-ignore-start --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] &lt;em&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; is a pre-v1, so expect breaking changes!&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- deno-fmt-ignore-end --&gt; 
&lt;ul&gt; 
 &lt;li&gt;Store and query float, int8, and binary vectors in &lt;code&gt;vec0&lt;/code&gt; virtual tables&lt;/li&gt; 
 &lt;li&gt;Written in pure C, no dependencies, runs anywhere SQLite runs (Linux/MacOS/Windows, in the browser with WASM, Raspberry Pis, etc.)&lt;/li&gt; 
 &lt;li&gt;Store non-vector data in metadata, auxiliary, or partition key columns&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://hacks.mozilla.org/2024/06/sponsoring-sqlite-vec-to-enable-more-powerful-local-ai-applications/&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./.github/logos/mozilla.dark.svg&quot;&gt; 
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./.github/logos/mozilla.svg&quot;&gt; 
   &lt;img alt=&quot;Mozilla Builders logo&quot; width=&quot;400&quot;&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;i&gt; &lt;code&gt;sqlite-vec&lt;/code&gt; is a &lt;a href=&quot;https://hacks.mozilla.org/2024/06/sponsoring-sqlite-vec-to-enable-more-powerful-local-ai-applications/&quot;&gt;Mozilla Builders project&lt;/a&gt;, with additional sponsorship from &lt;a href=&quot;https://fly.io/&quot;&gt;&lt;img width=&quot;14px&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/flyio.small.ico&quot;&gt; Fly.io &lt;/a&gt;, &lt;a href=&quot;https://tur.so/sqlite-vec&quot;&gt;&lt;img width=&quot;14px&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/turso.small.ico&quot;&gt; Turso&lt;/a&gt;, &lt;a href=&quot;https://sqlitecloud.io/&quot;&gt;&lt;img width=&quot;14px&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/sqlitecloud.small.svg?sanitize=true&quot;&gt; SQLite Cloud&lt;/a&gt;, and &lt;a href=&quot;https://shinkai.com/&quot;&gt;&lt;img width=&quot;14px&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/shinkai.small.svg?sanitize=true&quot;&gt; Shinkai&lt;/a&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/#sponsors&quot;&gt;the Sponsors section&lt;/a&gt; for more details. &lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/installation.html&quot;&gt;Installing &lt;code&gt;sqlite-vec&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Install&lt;/th&gt; 
   &lt;th&gt;More Info&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Python&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pip install sqlite-vec&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/python.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pypi.org/project/sqlite-vec/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/sqlite-vec.svg?color=blue&amp;amp;logo=python&amp;amp;logoColor=white&quot; alt=&quot;PyPI&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Node.js&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;npm install sqlite-vec&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/js.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Node.js&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.npmjs.com/package/sqlite-vec&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/sqlite-vec.svg?color=green&amp;amp;logo=nodedotjs&amp;amp;logoColor=white&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ruby&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gem install sqlite-vec&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/ruby.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Ruby&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://img.shields.io/gem/v/sqlite-vec?color=red&amp;amp;logo=rubygems&amp;amp;logoColor=white&quot; alt=&quot;Gem&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;go get -u github.com/asg017/sqlite-vec/bindings/go&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/go.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Go&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pkg.go.dev/github.com/asg017/asg017/sqlite-vec-go-bindings/cgo&quot;&gt;&lt;img src=&quot;https://pkg.go.dev/badge/github.com/asg017/sqlite-vec-go-bindings/cgo.svg?sanitize=true&quot; alt=&quot;Go Reference&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cargo add sqlite-vec&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/rust.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Rust&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://crates.io/crates/sqlite-vec&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/sqlite-vec?logo=rust&quot; alt=&quot;Crates.io&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Datasette&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;datasette install datasette-sqlite-vec&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/datasette.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Datasette&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datasette.io/plugins/datasette-sqlite-vec&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/datasette-sqlite-vec.svg?color=B6B6D9&amp;amp;label=Datasette+plugin&amp;amp;logoColor=white&amp;amp;logo=python&quot; alt=&quot;Datasette&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;rqlite&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rqlited -extensions-path=sqlite-vec.tar.gz&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/rqlite.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with rqlite&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://rqlite.io/docs/guides/extensions/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/rqlite-sqlite_extensions-blue&quot; alt=&quot;rqlite&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sqlite-utils&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sqlite-utils install sqlite-utils-sqlite-vec&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexgarcia.xyz/sqlite-vec/sqlite-utils.html&quot;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with sqlite-utils&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datasette.io/plugins/datasette-sqlite-vec&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/sqlite-utils-sqlite-vec.svg?color=B6B6D9&amp;amp;label=sqlite-utils+plugin&amp;amp;logoColor=white&amp;amp;logo=python&quot; alt=&quot;sqlite-utils&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Github Release&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/asg017/sqlite-vec?color=lightgrey&amp;amp;include_prereleases&amp;amp;label=Github+release&amp;amp;logo=github&quot; alt=&quot;GitHub tag (latest SemVer pre-release)&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Sample usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;.load ./vec0

create virtual table vec_examples using vec0(
  sample_embedding float[8]
);

-- vectors can be provided as JSON or in a compact binary format
insert into vec_examples(rowid, sample_embedding)
  values
    (1, &#39;[-0.200, 0.250, 0.341, -0.211, 0.645, 0.935, -0.316, -0.924]&#39;),
    (2, &#39;[0.443, -0.501, 0.355, -0.771, 0.707, -0.708, -0.185, 0.362]&#39;),
    (3, &#39;[0.716, -0.927, 0.134, 0.052, -0.669, 0.793, -0.634, -0.162]&#39;),
    (4, &#39;[-0.710, 0.330, 0.656, 0.041, -0.990, 0.726, 0.385, -0.958]&#39;);


-- KNN style query
select
  rowid,
  distance
from vec_examples
where sample_embedding match &#39;[0.890, 0.544, 0.825, 0.961, 0.358, 0.0196, 0.521, 0.175]&#39;
order by distance
limit 2;
/*
┌───────┬──────────────────┐
│ rowid │     distance     │
├───────┼──────────────────┤
│ 2     │ 2.38687372207642 │
│ 1     │ 2.38978505134583 │
└───────┴──────────────────┘
*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Development of &lt;code&gt;sqlite-vec&lt;/code&gt; is supported by multiple generous sponsors! Mozilla is the main sponsor through the new Builders project.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://hacks.mozilla.org/2024/06/sponsoring-sqlite-vec-to-enable-more-powerful-local-ai-applications/&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./.github/logos/mozilla.dark.svg&quot;&gt; 
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./.github/logos/mozilla.svg&quot;&gt; 
   &lt;img alt=&quot;Mozilla Builders logo&quot; width=&quot;400&quot;&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; is also sponsored by the following companies:&lt;/p&gt; 
&lt;a href=&quot;https://fly.io/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./.github/logos/flyio.dark.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./.github/logos/flyio.svg&quot;&gt; 
  &lt;img alt=&quot;Fly.io logo&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/flyio.svg?sanitize=true&quot; width=&quot;48%&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;a href=&quot;https://tur.so/sqlite-vec&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./.github/logos/turso.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./.github/logos/turso.svg&quot;&gt; 
  &lt;img alt=&quot;Turso logo&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/turso.svg?sanitize=true&quot; width=&quot;48%&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;a href=&quot;https://sqlitecloud.io/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./.github/logos/sqlitecloud.dark.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./.github/logos/sqlitecloud.svg&quot;&gt; 
  &lt;img alt=&quot;SQLite Cloud logo&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/flyio.svg?sanitize=true&quot; width=&quot;48%&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;a href=&quot;https://shinkai.com&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./.github/logos/shinkai.dark.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./.github/logos/shinkai.svg&quot;&gt; 
  &lt;img alt=&quot;Shinkai logo&quot; src=&quot;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/shinkai.svg?sanitize=true&quot; width=&quot;48%&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;As well as multiple individual supporters on &lt;a href=&quot;https://github.com/sponsors/asg017/&quot;&gt;Github sponsors&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;If your company interested in sponsoring &lt;code&gt;sqlite-vec&lt;/code&gt; development, send me an email to get more info: &lt;a href=&quot;https://alexgarcia.xyz&quot;&gt;https://alexgarcia.xyz&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;See Also&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asg017/sqlite-ecosystem&quot;&gt;&lt;strong&gt;&lt;code&gt;sqlite-ecosystem&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, Maybe more 3rd party SQLite extensions I&#39;ve developed&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asg017/sqlite-rembed&quot;&gt;&lt;strong&gt;&lt;code&gt;sqlite-rembed&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, Generate text embeddings from remote APIs like OpenAI/Nomic/Ollama, meant for testing and SQL scripts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asg017/sqlite-lembed&quot;&gt;&lt;strong&gt;&lt;code&gt;sqlite-lembed&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, Generate text embeddings locally from embedding models in the &lt;code&gt;.gguf&lt;/code&gt; format&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
