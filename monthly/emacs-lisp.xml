<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Emacs Lisp Monthly Trending</title>
    <description>Monthly Trending of Emacs Lisp in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 02:01:19 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>syl20bnr/spacemacs</title>
      <link>https://github.com/syl20bnr/spacemacs</link>
      <description>&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&quot;top&quot; id=&quot;fork-destination-box&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Made with Spacemacs&quot; height=&quot;20&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/gplv3.png&quot; alt=&quot;GPLv3 Software&quot; align=&quot;right&quot; height=&quot;20&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.twitter.com/spacemacs&quot;&gt;&lt;img src=&quot;https://i.imgur.com/tXSoThF.png&quot; alt=&quot;Twitter&quot; align=&quot;right&quot; height=&quot;20&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- logo and links --&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&quot; alt=&quot;Spacemacs&quot;&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#core-pillars&quot;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&quot;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#screenshots&quot;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION.html&quot;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#achievements&quot;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;!-- badges --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/p4MddFu6Ag&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&quot;&gt;&lt;img src=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&quot; alt=&quot;elisp state&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&quot; alt=&quot;Merchandise&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&quot; alt=&quot;Recommend it&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you &lt;em&gt;don&#39;t&lt;/em&gt; have an existing Emacs setup and want to run Spacemacs as your configuration, and if you have all &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&quot;&gt;prerequisites&lt;/a&gt; installed, you can install Spacemacs with one line:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;HOME&lt;/code&gt; is not set in environment or in registry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $env:APPDATA/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you do have an existing Emacs configuration, look at the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&quot;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on &lt;em&gt;ergonomics&lt;/em&gt;, &lt;em&gt;mnemonics&lt;/em&gt; and &lt;em&gt;consistency&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; 
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; 
&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&quot; alt=&quot;spacemacs_python&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;SPC&lt;/kbd&gt; or &lt;kbd&gt;Alt-m&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organized in configuration layers following a set of &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions &lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/FAQ.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting Help&lt;/h1&gt; 
&lt;p&gt;If you need help, ask your questions in the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; 
&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&quot;https://irc.gitter.im/&quot;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; 
&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jack of Some&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&quot;&gt;Spacemacs tutorial videos&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;GDQuest&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&quot;&gt;Game Design oriented tutorials &lt;/a&gt; to Spacemacs.&lt;/li&gt; 
 &lt;li&gt;Practicalli&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=jMJ58Gcc1RI&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&quot;&gt;Clojure tutorials based on Spacemacs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Eivind Fonn&#39;s classic &lt;a href=&quot;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&quot;&gt;Spacemacs ABC&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;A package manager if the OS doesn&#39;t have one already.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs is an extension of a popular text editor called &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;. So you&#39;ll need Emacs installed first.&lt;/p&gt; &lt;p&gt;Spacemacs requires Emacs 28.2 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;git&lt;/a&gt; is required to download and update Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Tar, in particular &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt;, is required to install and update Emacs packages used by Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; The default font used by Spacemacs is &lt;a href=&quot;https://adobe-fonts.github.io/source-code-pro/&quot;&gt;Source Code Pro&lt;/a&gt;. You may customize your own font settings and choose another font. If you want to use this default font, it must be installed.&lt;/p&gt; &lt;p&gt;Spacemacs also uses fallback fonts to ensure certain Unicode symbols it uses symbols appear correctly. The fonts used are determined by the OS:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Linux: &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;Nanum Gothic&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;macOS: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/arial-unicode-ms&quot;&gt;Arial Unicode MS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Windows: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/ms-gothic&quot;&gt;MS Gothic&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/lucida-sans-unicode&quot;&gt;Lucida Sans Unicode&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If the mode-line doesn&#39;t look similar to the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&quot;&gt;picture at the top of this page&lt;/a&gt;, make sure you have the correct fallback font installed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Various commands in Spacemacs needs one of the following line searching program:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep (rg)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;The silver searcher (ag)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/monochromegane/the_platinum_searcher&quot;&gt;The platinum searcher (pt)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beyondgrep/ack3&quot;&gt;ack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU Grep&lt;/a&gt; or &lt;a href=&quot;https://man.openbsd.org/grep&quot;&gt;BSD Grep&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Grep is very slow but it&#39;s widely available on most systems and is used as an fallback option.&lt;/p&gt; &lt;p&gt;We strongly recommend &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; over other line searching programs, for its blazing fast speed. The following subsections helps you to install it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Most Linux distribution ships a package manager already and if this is the case you are all set for this step.&lt;/p&gt; &lt;p&gt;If it doesn&#39;t, you may need to build the softwares mentioned below from their sources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In most distributions, Emacs is installed via an &lt;code&gt;emacs&lt;/code&gt; package from the package manager.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; DO not install &lt;a href=&quot;https://www.xemacs.org&quot;&gt;XEmacs&lt;/a&gt; because it&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs with various &lt;a href=&quot;https://www.emacswiki.org/emacs/EmacsAndXEmacs&quot;&gt;subtle differences&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Some Linux distributions support only Emacs versions older than 28.2. In this case you should &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&quot;&gt;build it from source&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Git is already installed on your system. Otherwise, you should be able to install &lt;code&gt;git&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Tar is already installed on your system. Otherwise, you should be able to install &lt;code&gt;tar&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If Nerd Fonts and Nanum Gothic are available from your distribution&#39;s package manager, you should install it there.&lt;/p&gt; &lt;p&gt;Otherwise, the generic way to install it is:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Download the latest pre-built &lt;code&gt;TTF&lt;/code&gt; font from &lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro/releases/latest&quot;&gt;https://github.com/adobe-fonts/source-code-pro/releases/latest&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;https://fonts.google.com/specimen/Nanum+Gothic&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Extract the archive and move the font files to &lt;code&gt;~/.fonts&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Refresh font cache with:&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;fc-cache -fv
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If your distribution is listed &lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation=&quot;&gt;here&lt;/a&gt;, follow the instructions. Otherwise, you can download its pre-built binary or build it from source.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The most popular package manager on macOS is &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;, to install it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Several options exist for installing Emacs on macOS:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus&quot;&gt;Emacs Plus&lt;/a&gt; features &lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus#features-explained&quot;&gt;additional functionalities&lt;/a&gt; over base Emacs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap d12frosted/emacs-plus

# install latest stable release, with Spacemacs icon and native compilation
brew install emacs-plus --with-spacemacs-icon --with-native-comp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will require the latest version of Xcode Command Line tools, which can be downloaded from the &lt;a href=&quot;https://developer.apple.com/download/all/&quot;&gt;Apple Developer Portal&lt;/a&gt; or by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;softwareupdate --all --install --force
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/railwaycat/homebrew-emacsmacport&quot;&gt;Emacs Mac Port&lt;/a&gt; adds native GUI support to Emacs 28. And the full list of features is available &lt;a href=&quot;https://bitbucket.org/mituharu/emacs-mac/src/master/README-mac&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap railwaycat/emacsmacport
brew install emacs-mac
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://emacsformacosx.com/&quot;&gt;Emacs for Mac OS X&lt;/a&gt; is the binary build of GNU Emacs, &lt;em&gt;without&lt;/em&gt; any extra feature.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;macOS ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but there are reports of weird issues so we require &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install gnu-tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; To install Source Code Pro Font:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap homebrew/cask-fonts
brew install --cask font-source-code-pro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Arial Unicode MS is shipped with macOS v10.5 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; via &lt;code&gt;Homebrew&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;We recommend using wsl2 with wslg support especially with a pgtk build of emacs and wayland. For the installation please refer to the linux installation section. When running emacs within your wsl2 environment emacs will be handled like any other windows application.&lt;/p&gt; 
&lt;p&gt;If this is not possible you can fallback to a native windows installation, however note that this will create a lot of subtle bugs especially with tls which we will most likely not be able to help with.&lt;/p&gt; 
&lt;p&gt;If you need to follow that path we recommend to at least use a package manager like &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; to install the needed packages.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You can install &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; via PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
irm get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Emacs can be installed in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add extras
scoop install emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows 10 build 17063 and later ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but it&#39;s required to install &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead to avoid possible issues. Alternatively, if you are running an earlier version of Windows, Tar isn&#39;t installed. In either case, you can install GNU Tar via:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install Source Code Pro Font in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add KnotUntied_scoop-fonts https://github.com/KnotUntied/scoop-fonts
scoop install sourcecodepro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MS Gothic and Lucida Sans Unicode are shipped with Windows 2003 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;h2&gt;Default Install&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The default installation downloads Spacemacs to the &lt;code&gt;.emacs.d&lt;/code&gt; directory in your &lt;code&gt;HOME&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;But in the case of Windows, &lt;code&gt;HOME&lt;/code&gt; is not set out-of-box. We recommend you to set it as an environment variable, with the same value as environment variable &lt;code&gt;HOMEPATH&lt;/code&gt;, which usually looks like &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Since Spacemacs will now be downloaded at &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;, if it already exists it&#39;ll be overridden.&lt;/p&gt; &lt;p&gt;Also, if you have either &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; or &lt;code&gt;$HOME/.emacs&lt;/code&gt;, they will appear before Spacemacs in Emacs&#39;s initialization steps. Thus they must be renamed in order for Spacemacs to load correctly.&lt;/p&gt; &lt;p&gt;To backup/rename the aforementioned files/directory, in shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[ -d $HOME/.emacs.d ] &amp;amp;&amp;amp; mv $HOME/.emacs.d $HOME/.emacs.d.bak
[ -f $HOME/.emacs.el ] &amp;amp;&amp;amp; mv $HOME/.emacs.el .emacs.el.bak
[ -f $HOME/.emacs ] &amp;amp;&amp;amp; mv $HOME/.emacs $HOME/.emacs.bak
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;if( Test-Path -Path $HOME/.emacs.d )
{
    Rename-Item $HOME/.emacs.d $HOME/.emacs.d.bak
}
if( Test-Path -Path $HOME/.emacs.el )
{
    Rename-Item $HOME/.emacs.el $HOME/.emacs.el.bak
}
if( Test-Path -Path $HOME/.emacs )
{
    Rename-Item $HOME/.emacs $HOME/.emacs.bak
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now clone this repository with Git. The following work for both shell and PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you have a limited internet connection or limited speed:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch Emacs and Spacemacs will be loaded.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Alternative Install Location&lt;/h2&gt; 
&lt;p&gt;To install Spacemacs in a different location, we first need to introduce how Spacemacs is loaded:&lt;/p&gt; 
&lt;p&gt;When Emacs is started, it looks for the init file &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;in a deterministic way&lt;/a&gt;. The &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-install&quot;&gt;default installation&lt;/a&gt; exploits it by occupying &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt; and let Emacs use it as its init file.&lt;/p&gt; 
&lt;p&gt;In other word, in default installation, Emacs find and load &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt;, which is then responsible to load other files in &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to install Spacemacs to a different location, you need to make sure it&#39;s loaded by Emacs in one of its &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;init file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, if you&#39;ve cloned Spacemacs to &lt;code&gt;$HOME/Spacemacs&lt;/code&gt;, and if you use &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; as Emacs init file, then the following lines in &lt;code&gt;$HOME/.emacs.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; load Spacemacs&#39;s initialization file, &quot;~&quot; is equivalent to &quot;$HOME&quot;
(load-file &quot;~/Spacemacs/init.el&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;First Launch and Configuration&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;After cloning Spacemacs, the first time when you launch Emacs, Spacemacs will automatically install the essential packages it requires. This step is the bootstrap.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once the bootstrap packages are installed, Spacemacs checks whether you have an customization file &lt;code&gt;$HOME/.spacemacs&lt;/code&gt;, known as &lt;code&gt;dotspacemacs&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If it already exists, Spacemacs loads it as the configuration.&lt;/li&gt; 
   &lt;li&gt;Otherwise, you need to answer a few questions and Spacemacs will generate the &lt;code&gt;dotspacemacs&lt;/code&gt; file for you.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If you are new to Emacs and/or Spacemacs, it&#39;s fine to just accept the default choices. They can be changed in the &lt;code&gt;dotspacemacs&lt;/code&gt; file later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs will download and install remaining packages it will require, according to your &lt;code&gt;dotspacemacs&lt;/code&gt;. When the all the packages have been installed, restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dotspacemacs&lt;/code&gt; is the configuration file for Spacemacs, it&#39;s self explanatory and is written in Emacs Lisp. Read &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In case you want to store your &lt;code&gt;dotspacemacs&lt;/code&gt; at another location, say under &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First set the environment variable &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Move &lt;code&gt;$HOME/.spacemacs&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d/init.el&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In other word, set &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to the parent directory of your &lt;code&gt;dotspacemacs&lt;/code&gt;, and move &lt;code&gt;dotspacemacs&lt;/code&gt; to the said directory.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Spacemacs logo&lt;/h2&gt; 
&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&quot;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&quot;&gt;this .desktop file&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, by default &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For macOS users, you need to &lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;download the .icns version of the logo&lt;/a&gt; and simply &lt;a href=&quot;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&quot;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS, securely installing Emacs packages may fail. If this happens to you please update your OS and Emacs. If you are behind a company proxy please trust the company firewall cert. We do not longer support disabling https due to security reasons.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows)&lt;/em&gt; If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;From Properties select the Tab “Security”,&lt;/li&gt; 
   &lt;li&gt;Select the button “Advanced”,&lt;/li&gt; 
   &lt;li&gt;Select the Tab “Owner”&lt;/li&gt; 
   &lt;li&gt;Change the owner to your account name&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows&lt;/em&gt;) The period (dot) before a file or folder name means that it&#39;s a hidden file or folder. To show hidden files and folders:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Press the Windows key&lt;/li&gt; 
   &lt;li&gt;Type &lt;code&gt;File explorer options&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; 
   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Update&lt;/h1&gt; 
&lt;p&gt;Spacemacs relies solely on a rolling update scheme based on the latest changes available. To update Spacemacs, simply pull the latest changes from the &lt;code&gt;develop&lt;/code&gt; branch:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git pull --rebase
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;After updating Spacemacs, you should also check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button, or use the convenient keybinding &lt;kbd&gt;SPC f e U&lt;/kbd&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Upgrading from the deprecated &lt;code&gt;master&lt;/code&gt; branch&lt;/h2&gt; 
&lt;p&gt;If you are still on the old &lt;code&gt;master&lt;/code&gt; branch (i.e., if &lt;code&gt;git branch --show-current&lt;/code&gt; shows &lt;code&gt;master&lt;/code&gt; instead of &lt;code&gt;develop&lt;/code&gt;), you need to &lt;a href=&quot;https://practical.li/spacemacs/reference/switch-to-develop/&quot;&gt;upgrade to &lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; first.&lt;/p&gt; 
&lt;h1&gt;Quotes&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/ashnur&quot;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis
on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/deuill&quot;&gt;deuill&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Contributions&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; 
&lt;p&gt;Before contributing, be sure to consult the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Communities&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs.stackexchange.com/questions/tagged/spacemacs&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/spacemacs&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; 
&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/intellimacs&quot;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/spaceclipse&quot;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SpaceVim/SpaceVim&quot;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/VSpaceCode/VSpaceCode&quot;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the initialization and core files&lt;/li&gt; 
 &lt;li&gt;all the layer files&lt;/li&gt; 
 &lt;li&gt;the documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&quot;https://github.com/nashamri&quot;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; 
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; 
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&quot;https://salt.bountysource.com/teams/spacemacs&quot;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&quot;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you used Spacemacs in a project, and you want to show that fact, you can use the Spacemacs badge: &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Built with Spacemacs&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;https://spacemacs.org&quot;&amp;gt;&amp;lt;img alt=&quot;Built with Spacemacs&quot; src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-org&quot;&gt;[[https://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>melpa/melpa</title>
      <link>https://github.com/melpa/melpa</link>
      <description>&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/melpa/melpa/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/melpa/melpa/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&quot;https://github.com/dimitri/el-get/&quot;&gt;&lt;code&gt;el-get&lt;/code&gt;&lt;/a&gt;, or even &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; 
&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; 
&lt;p&gt;To browse available packages, check out the &lt;a href=&quot;https://melpa.org/&quot;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&quot;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&quot;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&quot;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, i.e., Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(require &#39;package)
(add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;) t)
;; Comment/uncomment this line to enable MELPA Stable if desired.
;; See `package-archive-priorities` and `package-pinned-packages`.
;; Most users will not need or want to do this.
;; (add-to-list &#39;package-archives
;;              &#39;(&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) t)
(package-initialize)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; 
&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; 
&lt;h3&gt;MELPA Stable&lt;/h3&gt; 
&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&quot;https://stable.melpa.org/&quot;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; 
&lt;p&gt;Some notes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&quot;https://github.com/milkypostman/package-filter/&quot;&gt;&lt;code&gt;package-filter&lt;/code&gt;&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &quot;updated&quot; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&quot;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Recipe Format&lt;/h2&gt; 
&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(&amp;lt;package-name&amp;gt;
 :fetcher [git|github|gitlab|codeberg|sourcehut|hg]
 [:url &quot;&amp;lt;repo url&amp;gt;&quot;]
 [:repo &quot;user-name/repo-name&quot;]
 [:commit &quot;commit&quot;]
 [:branch &quot;branch&quot;]
 [:version-regexp &quot;&amp;lt;regexp&amp;gt;&quot;]
 [:files (&quot;&amp;lt;file1&amp;gt;&quot; ...)]
 [:old-names (&amp;lt;old-name&amp;gt; ...)])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository the package is being maintained in.&lt;/p&gt; &lt;p&gt;Melpa supports the Git and Mercurial version control systems and provides generic fetcher types for them: &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;hg&lt;/code&gt;. When you use one of these fetchers, you must specify the &lt;code&gt;:url&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;Melpa also provides dedicated fetchers for certain Git forges (aka &quot;Git repository hosting platforms&quot;), which should always be preferred over the generic &lt;code&gt;git&lt;/code&gt; fetcher. When using a dedicated fetcher, you must specify &lt;code&gt;:repo&lt;/code&gt;, not &lt;code&gt;:url&lt;/code&gt;. Currently these Git forge fetchers exist: &lt;a href=&quot;https://github.com/&quot;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://gitlab.com/&quot;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://codeberg.org/&quot;&gt;&lt;code&gt;codeberg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://git.sr.ht/&quot;&gt;&lt;code&gt;sourcehut&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There are no dedicated fetchers for Mercurial. When a forge supports both Git and Mercurial, then the respective fetcher can only be used for Git repositories. For Mercurial repositories always use the &lt;code&gt;hg&lt;/code&gt; fetcher.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. It is required for the generic &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;hg&lt;/code&gt; fetchers and is invalid for forge-specific fetchers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the repository used by forge-specific fetchers and is of the form &lt;code&gt;user-name/repo-name&lt;/code&gt;. It is required for forge-specific fetchers and is invalid for the generic fetchers.&lt;/p&gt; &lt;p&gt;Note that user names in Sourcehut URLs are prefixed with &lt;code&gt;~&lt;/code&gt;, that has to be omitted in the value of this property.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the Git repository to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &quot;origin/&quot;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the Git repository to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &quot;origin/&quot; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &quot;OTP-18.1.5&quot;, we might add &lt;code&gt;:version-regexp &quot;[^0-9]*\\(.*\\)&quot;&lt;/code&gt; to strip the &quot;OTP-&quot; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the Emacs Lisp libraries and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;&#39;(&quot;*.el&quot; &quot;lisp/*.el&quot;
  &quot;dir&quot; &quot;*.info&quot; &quot;*.texi&quot; &quot;*.texinfo&quot;
  &quot;doc/dir&quot; &quot;doc/*.info&quot; &quot;doc/*.texi&quot; &quot;doc/*.texinfo&quot;
  &quot;docs/dir&quot; &quot;docs/*.info&quot; &quot;docs/*.texi&quot; &quot;docs/*.texinfo&quot;
  (:exclude
   &quot;.dir-locals.el&quot; &quot;lisp/.dir-locals.el&quot;
   &quot;test.el&quot; &quot;tests.el&quot; &quot;*-test.el&quot; &quot;*-tests.el&quot;
   &quot;lisp/test.el&quot; &quot;lisp/tests.el&quot; &quot;lisp/*-test.el&quot; &quot;lisp/*-tests.el&quot;))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that you should place Emacs Lisp libraries in the root of the repository or in the &lt;code&gt;lisp/&lt;/code&gt; directory. Test files should be placed in the &lt;code&gt;test/&lt;/code&gt; directory and they should not provide a feature. Likewise &lt;code&gt;NAME-pkg.el&lt;/code&gt; isn&#39;t a library, so you might want to place it in the root directory, even when libraries reside in &lt;code&gt;lisp/&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Please do not track any third-party libraries and test utilities in your repository. If you absolutely must do it, then place these files in a directory dedicated to that purpose, alongside a file named &lt;code&gt;.nosearch&lt;/code&gt;. The latter prevents various tools from adding the containing directory to the &lt;code&gt;load-path&lt;/code&gt; or from otherwise getting confused.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded to make a list of paths that will be copied into the root of the new package. This means a file like &lt;code&gt;lisp/foo.el&lt;/code&gt; would become &lt;code&gt;foo.el&lt;/code&gt; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(TARGET-DIR SOURCE-PATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To exclude certain paths, use &lt;code&gt;(:exclude SOURCE-PATH ...)&lt;/code&gt;. There should only be one element that begins with &lt;code&gt;:exclude&lt;/code&gt; and it should be the last element, though that is not enforced at this time.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, use the special element &lt;code&gt;:defaults&lt;/code&gt; as the first element of the &lt;code&gt;:files&lt;/code&gt; list. This causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &quot;snippets&quot;)&lt;/code&gt; would cause the &lt;code&gt;snippets&lt;/code&gt; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Elements of &lt;code&gt;:files&lt;/code&gt; are (no longer) processed in order because we feed these globs to &lt;code&gt;git log&lt;/code&gt; or &lt;code&gt;hg log&lt;/code&gt; to determine the last commit that touched a relevant file. These commands unfortunately process all exclude globs after all include globs. Therefore it is not possible to override the &lt;code&gt;:exclude&lt;/code&gt; element that appears in &lt;code&gt;:defaults&lt;/code&gt; in a later element of &lt;code&gt;:files&lt;/code&gt;. This means that a package whose name ends with &lt;code&gt;-test&lt;/code&gt; cannot use &lt;code&gt;:defaults&lt;/code&gt;. Likewise if the name of a &lt;em&gt;library&lt;/em&gt; (as opposed to a file implementing tests) ends with &lt;code&gt;-test.el&lt;/code&gt;, then &lt;code&gt;:defaults&lt;/code&gt; cannot be used.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Once the appropriate commit has been determined &lt;code&gt;file-expand-wildcards&lt;/code&gt; is used to determine the files matched by each glob. Unfortunately (unlike in a shell) a glob that begins with &lt;code&gt;*&lt;/code&gt; may also match filenames that begin with &lt;code&gt;.&lt;/code&gt;, so you might have to add exclude globs to prevent those from being included. &lt;code&gt;:defaults&lt;/code&gt; takes care to exclude &lt;code&gt;.dir-locals.el&lt;/code&gt;; if you don&#39;t use &lt;code&gt;:defaults&lt;/code&gt;, then you might have to exclude that explicitly.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;smex&lt;/code&gt; is a repository that contains two files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:fetcher&lt;/code&gt; and &lt;code&gt;:repo&lt;/code&gt; specified,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(smex :fetcher github :repo &quot;nonsequitur/smex&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; 
&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; 
&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(helm-mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;helm-mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(persp-mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;persp-mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; 
&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; 
&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(flymake-perlcritic
 :fetcher github
 :repo &quot;illusori/emacs-flymake-perlcritic&quot;
 :files (&quot;*.el&quot; (&quot;bin&quot; &quot;bin/flymake_perlcritic&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which will result in a package structure of,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYYMMDD
|-- bin
|   `-- flymake_perlcritic
|-- flymake-perlcritic-pkg.el
`-- flymake-perlcritic.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory.&lt;/p&gt; 
&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(pony-mode
 :fetcher github
 :repo &quot;davidmiller/pony-mode&quot;
 :files (&quot;src/*.el&quot; &quot;snippets&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which generates the package,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD
|-- pony-mode-pkg.el
|-- pony-mode.el
|-- pony-tpl.el
`-- snippets
    |-- html-mode
    |   |-- bl
    |   |-- ex
    |   |-- for
    |   |-- if
    |   |-- loa
    |   |-- sup
    |   |-- testc
    |   `-- {{
    `-- python-mode
        |-- auth-view
        |-- bn
        |-- model
        |-- modelform
        |-- render-to
        |-- testc
        `-- view
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build Scripts&lt;/h2&gt; 
&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; — build all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; — build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; — build all JSON files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; — construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; — construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; — clean everything.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; — build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; — remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; — remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; — remove all JSON files.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&quot;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&quot;https://github.com/melpa/package-build/&quot;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Functions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; — build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; — interactive Emacs Lisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository.&lt;/p&gt; &lt;p&gt;A file named &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, which contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information about the package is automatically generated. The information is extracted from the summary line and headers of &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;. For historic reasons, if some of these values cannot be extracted from that file, then Melpa also extracts information from &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; if such a file is tracked in the upstream repository (but this fallback will be removed eventually).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Variables&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; — Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; — Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; — Directory containing MELPA compatible recipes. See &lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&quot;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; 
&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; 
&lt;h2&gt;Mirrors&lt;/h2&gt; 
&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mirrorservice.org/sites/melpa.org/packages/&quot;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mirrorservice.org/sites/melpa.org/packages/&quot;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&quot;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&quot;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;rsync&lt;/code&gt; to get started with your own mirror:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rsync -avz --delete rsync://melpa.org/packages/ snapshots/
rsync -avz --delete rsync://melpa.org/packages-stable/ releases/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>editorconfig/editorconfig-emacs</title>
      <link>https://github.com/editorconfig/editorconfig-emacs</link>
      <description>&lt;p&gt;EditorConfig plugin for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/editorconfig/editorconfig-emacs/actions/workflows/build.yaml/badge.svg?branch=master&quot; alt=&quot;build&quot;&gt; &lt;a href=&quot;http://melpa.org/#/editorconfig&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/editorconfig-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/editorconfig&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/editorconfig-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://elpa.nongnu.org/nongnu/editorconfig.html&quot;&gt;&lt;img src=&quot;http://elpa.nongnu.org/nongnu/editorconfig.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;EditorConfig Emacs Plugin&lt;/h1&gt; 
&lt;p&gt;This is an &lt;a href=&quot;https://editorconfig.org&quot;&gt;EditorConfig&lt;/a&gt; plugin for &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;package.el&lt;/h3&gt; 
&lt;p&gt;This package is available from &lt;a href=&quot;https://melpa.org/#/editorconfig&quot;&gt;MELPA&lt;/a&gt;, &lt;a href=&quot;https://stable.melpa.org/#/editorconfig&quot;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&quot;http://elpa.nongnu.org/nongnu/editorconfig.html&quot;&gt;NonGNU ELPA&lt;/a&gt;. Install from these repositories and enable global minor-mode &lt;code&gt;editorconfig-mode&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(editorconfig-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Normally, enabling &lt;code&gt;editorconfig-mode&lt;/code&gt; should be enough for this plugin to work: all other configurations are optional. This mode sets up hooks so that EditorConfig properties will be loaded and applied to the new buffers automatically when visiting files.&lt;/p&gt; 
&lt;h3&gt;use-package&lt;/h3&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://www.emacswiki.org/emacs/UsePackage&quot;&gt;&lt;strong&gt;use-package&lt;/strong&gt;&lt;/a&gt;, add the following to your &lt;code&gt;init.el&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual installation&lt;/h3&gt; 
&lt;p&gt;Copy all &lt;code&gt;.el&lt;/code&gt; files in this repository to &lt;code&gt;~/.emacs.d/lisp&lt;/code&gt; and add the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-to-list &#39;load-path &quot;~/.emacs.d/lisp&quot;)
(require &#39;editorconfig)
(editorconfig-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Supported properties&lt;/h2&gt; 
&lt;p&gt;Current Emacs plugin coverage for EditorConfig&#39;s &lt;a href=&quot;https://editorconfig.org/#supported-properties&quot;&gt;properties&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tab_width&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;insert_final_newline&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;max_line_length&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;&lt;code&gt;file_type_ext&lt;/code&gt; (Experimental)&lt;/del&gt; (See below)&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;&lt;code&gt;file_type_emacs&lt;/code&gt; (Experimental)&lt;/del&gt; (See below)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;root&lt;/code&gt; (only used by EditorConfig core)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Not yet covered properties marked with &lt;del&gt;over-strike&lt;/del&gt; – pull requests implementing missing features warmly welcomed! Typically, you will want to tie these to native functionality, or the configuration of existing packages handling the feature.&lt;/p&gt; 
&lt;p&gt;As several packages have their own handling of, say, indentation, we might not yet cover some mode you use, but we try to add the ones that show up on our radar.&lt;/p&gt; 
&lt;h3&gt;&lt;del&gt;File Type (file_type_ext, file_type_emacs)&lt;/del&gt;&lt;/h3&gt; 
&lt;p&gt;File-type feature is currently disabled, because this package is now undergoing big internal refactoring. For those who want this functionality, please consider using &lt;a href=&quot;https://github.com/10sr/editorconfig-custom-majormode-el&quot;&gt;editorconfig-custom-majormode&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Customize&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;editorconfig-emacs&lt;/code&gt; provides some customize variables.&lt;/p&gt; 
&lt;p&gt;Here are some of these variables: for the full list of available variables, type &lt;kbd&gt;M-x customize-group [RET] editorconfig [RET]&lt;/kbd&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;editorconfig-trim-whitespaces-mode&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Buffer local minor-mode to use to trim trailing whitespaces.&lt;/p&gt; 
&lt;p&gt;If set, editorconfig will enable/disable this mode in accord with &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; property in &lt;code&gt;.editorconfig&lt;/code&gt;. Otherwise, use Emacs built-in &lt;code&gt;delete-trailing-whitespace&lt;/code&gt; function.&lt;/p&gt; 
&lt;p&gt;One possible value is &lt;a href=&quot;https://github.com/lewang/ws-butler&quot;&gt;&lt;code&gt;ws-butler-mode&lt;/code&gt;&lt;/a&gt;, with which only lines touched get trimmed. To use it, add following to your init.el:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq editorconfig-trim-whitespaces-mode
      &#39;ws-butler-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;editorconfig-after-apply-functions&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;(Formerly &lt;code&gt;editorconfig-custom-hooks&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;A list of functions which will be called after loading common EditorConfig settings, when you can set some custom variables.&lt;/p&gt; 
&lt;p&gt;For example, &lt;code&gt;web-mode&lt;/code&gt; has several variables for indentation offset size and EditorConfig sets them at once by &lt;code&gt;indent_size&lt;/code&gt;. You can stop indenting only blocks of &lt;code&gt;web-mode&lt;/code&gt; by adding following to your init.el:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-hook &#39;editorconfig-after-apply-functions
  (lambda (props) (setq web-mode-block-padding 0)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Enabling &lt;code&gt;editorconfig-mode&lt;/code&gt; should be enough for normal cases.&lt;/p&gt; 
&lt;p&gt;When EditorConfig properties are not effective for unknown reason, we recommend first trying &lt;code&gt;M-x editorconfig-display-current-properties&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This command will open a new buffer and display the EditorConfig properties loaded for current buffer. You can check if EditorConfig properties were not read for buffers at all, or they were loaded but did not take effect for some other reasons.&lt;/p&gt; 
&lt;h3&gt;Indentation for new major-modes&lt;/h3&gt; 
&lt;p&gt;Because most Emacs major-modes have their own indentation settings, this plugin requires explicit support for each major-mode for &lt;code&gt;indent_size&lt;/code&gt; property.&lt;/p&gt; 
&lt;p&gt;By default this plugin ships with settings for many major-modes, but, sorry to say, it cannot be perfect. Especially it is difficult to support brand-new major-modes. Please feel free to submit issue or pull-request for such major-mode!&lt;/p&gt; 
&lt;p&gt;Supported major-modes and their indentation configs are defined in the variable &lt;code&gt;editorconfig-indentation-alist&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Not work at all for FOO-mode!&lt;/h3&gt; 
&lt;p&gt;Most cases properties are loaded just after visiting files when &lt;code&gt;editorconfig-mode&lt;/code&gt; is enabled. But it is known that there are major-modes that this mechanism does not work for and require explicit call of &lt;code&gt;editorconfig-apply&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Typically it will occur when the major-mode is not defined using &lt;code&gt;define-derived-mode&lt;/code&gt; (&lt;code&gt;rpm-spec-mode&lt;/code&gt; is an example for this). Please feel free to submit issues if you find such modes!&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;editorconfig-format-buffer&lt;/code&gt; does not work well with lsp-mode&lt;/h3&gt; 
&lt;p&gt;By default, &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; configures indent-region-function so that Emacs uses language servers&#39; &lt;code&gt;textDocument/rangeFormatting&lt;/code&gt; request to format text in buffers. So EditorConfig settings are ignored unless language servers themselves support loading configs from &lt;code&gt;.editorconfig&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To avoid this behavior ad-hocly, set &lt;code&gt;lsp-enable-indentation&lt;/code&gt; to nil.&lt;/p&gt; 
&lt;h2&gt;Submitting Bugs and Feature Requests&lt;/h2&gt; 
&lt;p&gt;Bugs, feature requests, and other issues should be submitted to the issue tracker: &lt;a href=&quot;https://github.com/editorconfig/editorconfig-emacs/issues&quot;&gt;https://github.com/editorconfig/editorconfig-emacs/issues&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Development&lt;/h3&gt; 
&lt;p&gt;To run the test locally, you will need the following tools:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmake.org&quot;&gt;CMake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacs-eask/cli&quot;&gt;Eask&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are on &lt;code&gt;Linux&lt;/code&gt; or &lt;code&gt;macOS&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ make check-unix
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On &lt;code&gt;Windows&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ make check-dos
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To start a new Emacs process with current &lt;code&gt;*.el&lt;/code&gt; and without loading user init file, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ make sandbox
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;EditorConfig Emacs Plugin is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&quot;https://www.gnu.org/licenses/&quot;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>copilot-emacs/copilot.el</title>
      <link>https://github.com/copilot-emacs/copilot.el</link>
      <description>&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://jcs-emacs.github.io/jcs-elpa/#/copilot&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/copilot.svg?sanitize=true&quot; alt=&quot;JCS-ELPA&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Copilot.el&lt;/h1&gt; 
&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/demo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This plugin is unofficial, however it makes use of the official &lt;a href=&quot;https://www.npmjs.com/package/@github/copilot-language-server&quot;&gt;@github/copilot-language-server&lt;/a&gt; provided by Microsoft.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; to use this plugin.&lt;/p&gt; 
&lt;p&gt;Current maintainer(s): &lt;a href=&quot;https://github.com/emil-vdw&quot;&gt;@emil-vdw&lt;/a&gt;, &lt;a href=&quot;https://github.com/jcs090218&quot;&gt;@jcs090218&lt;/a&gt;, &lt;a href=&quot;https://github.com/rakotomandimby&quot;&gt;@rakotomandimby&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Retired maintainer: &lt;a href=&quot;https://github.com/zerolfx&quot;&gt;@zerolfx&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ol start=&quot;0&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Ensure your Emacs version is at least 27, the dependency package &lt;code&gt;editorconfig&lt;/code&gt; (&lt;a href=&quot;https://melpa.org/#/editorconfig&quot;&gt;melpa&lt;/a&gt;) and &lt;code&gt;jsonrpc&lt;/code&gt; (&lt;a href=&quot;https://elpa.gnu.org/packages/jsonrpc.html&quot;&gt;elpa&lt;/a&gt;, &amp;gt;= 1.0.14) are both installed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install the copilot server by &lt;code&gt;M-x copilot-install-server&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt; (&lt;code&gt;NotAuthorized&lt;/code&gt; means you don&#39;t have a valid subscription).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Configurations&lt;/h2&gt; 
&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; 
&lt;details&gt; 
 &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(package! copilot
  :recipe (:host github :repo &quot;copilot-emacs/copilot.el&quot; :files (&quot;*.el&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              (&quot;&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion)
              (&quot;TAB&quot; . &#39;copilot-accept-completion)
              (&quot;C-TAB&quot; . &#39;copilot-accept-completion-by-word)
              (&quot;C-&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion-by-word)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; 
 &lt;p&gt;If pressing tab to complete sometimes doesn&#39;t work you might want to bind completion to another key or try:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(after! (evil copilot)
  ;; Define the custom function that either accepts the completion or does the default behavior
  (defun my/copilot-tab-or-default ()
    (interactive)
    (if (and (bound-and-true-p copilot-mode)
             ;; Add any other conditions to check for active copilot suggestions if necessary
             )
        (copilot-accept-completion)
      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.

  ;; Bind the custom function to &amp;lt;tab&amp;gt; in Evil&#39;s insert state
  (evil-define-key &#39;insert &#39;global (kbd &quot;&amp;lt;tab&amp;gt;&quot;) &#39;my/copilot-tab-or-default))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you would love to configure indentation here, this is an example config that may work for you:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              (&quot;&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion)
              (&quot;TAB&quot; . &#39;copilot-accept-completion)
              (&quot;C-TAB&quot; . &#39;copilot-accept-completion-by-word)
              (&quot;C-&amp;lt;tab&amp;gt;&quot; . &#39;copilot-accept-completion-by-word)
              (&quot;C-n&quot; . &#39;copilot-next-completion)
              (&quot;C-p&quot; . &#39;copilot-previous-completion))

  :config
  (add-to-list &#39;copilot-indentation-alist &#39;(prog-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(org-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(text-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(closure-mode 2))
  (add-to-list &#39;copilot-indentation-alist &#39;(emacs-lisp-mode 2)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; 
&lt;details&gt; 
 &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; ===================
;; dotspacemacs/layers
;; ===================

;; add or uncomment the auto-completion layer
dotspacemacs-configuration-layers
&#39;(
  ...
  auto-completion
  ...
 )

;; add copilot.el to additional packages
dotspacemacs-additional-packages
 &#39;((copilot :location (recipe
                       :fetcher github
                       :repo &quot;copilot-emacs/copilot.el&quot;
                       :files (&quot;*.el&quot;))))

;; ========================
;; dotspacemacs/user-config
;; ========================

;; accept completion from copilot and fallback to company

(with-eval-after-load &#39;company
  ;; disable inline previews
  (delq &#39;company-preview-if-just-one-frontend company-frontends))

(with-eval-after-load &#39;copilot
  (define-key copilot-completion-map (kbd &quot;&amp;lt;tab&amp;gt;&quot;) &#39;copilot-accept-completion)
  (define-key copilot-completion-map (kbd &quot;TAB&quot;) &#39;copilot-accept-completion)
  (define-key copilot-completion-map (kbd &quot;C-TAB&quot;) &#39;copilot-accept-completion-by-word)
  (define-key copilot-completion-map (kbd &quot;C-&amp;lt;tab&amp;gt;&quot;) &#39;copilot-accept-completion-by-word))

(add-hook &#39;prog-mode-hook &#39;copilot-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;General Configurations&lt;/h3&gt; 
&lt;details&gt; 
 &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; 
 &lt;h5&gt;Option 1: Load via use-package (recommended)&lt;/h5&gt; 
 &lt;h6&gt;Emacs 27-29:&lt;/h6&gt; 
 &lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package copilot
  :straight (:host github :repo &quot;copilot-emacs/copilot.el&quot; :files (&quot;*.el&quot;))
  :ensure t)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;code&gt;quelpa&lt;/code&gt; + &lt;code&gt;quelpa-use-package&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo &quot;copilot-emacs/copilot.el&quot;
                   :branch &quot;main&quot;
                   :files (&quot;*.el&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h6&gt;On Emacs version 30+:&lt;/h6&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package copilot
  :vc (:url &quot;https://github.com/copilot-emacs/copilot.el&quot;
            :rev :newest
            :branch &quot;main&quot;))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Use &lt;code&gt;:map&lt;/code&gt;, &lt;code&gt;:hook&lt;/code&gt;, and &lt;code&gt;:config&lt;/code&gt; to customize &lt;code&gt;copilot.el&lt;/code&gt; via &lt;code&gt;use-package&lt;/code&gt;.&lt;/p&gt; 
 &lt;h5&gt;Option 3: Load manually&lt;/h5&gt; 
 &lt;p&gt;Please make sure you have these dependencies installed (available in ELPA/MELPA):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;f&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;After installing those, clone this repository then insert the below snippet into your config file.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;load-path &quot;/path/to/copilot.el&quot;)
(require &#39;copilot)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;2. Configure completion&lt;/h4&gt; 
 &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; 
 &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; 
 &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; 
 &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; 
 &lt;p&gt;Use tab to accept completions (you may also want to bind &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; to some key):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(define-key copilot-completion-map (kbd &quot;&amp;lt;tab&amp;gt;&quot;) &#39;copilot-accept-completion)
(define-key copilot-completion-map (kbd &quot;TAB&quot;) &#39;copilot-accept-completion)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Programming language detection&lt;/h3&gt; 
&lt;p&gt;Copilot.el detects the programming language of a buffer based on the major-mode name, stripping the &lt;code&gt;-mode&lt;/code&gt; part. Resulting languageId should match table &lt;a href=&quot;https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers&quot;&gt;here&lt;/a&gt;. You can add unusual major-mode mappings to &lt;code&gt;copilot-major-mode-alist&lt;/code&gt;. Without the proper language set suggestions may be of poorer quality.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;copilot-major-mode-alist &#39;(&quot;enh-ruby&quot; . &quot;ruby&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;h4&gt;copilot-diagnose&lt;/h4&gt; 
&lt;p&gt;Check the current status of the plugin. Also you can check logs in the &lt;code&gt;*copilot events*&lt;/code&gt; buffer and stderr output in the &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/p&gt; 
&lt;h4&gt;copilot-login&lt;/h4&gt; 
&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; 
&lt;h4&gt;copilot-mode&lt;/h4&gt; 
&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; 
&lt;h4&gt;copilot-complete&lt;/h4&gt; 
&lt;p&gt;Try to complete at the current point.&lt;/p&gt; 
&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; 
&lt;p&gt;Accept the current completion.&lt;/p&gt; 
&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; 
&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; 
&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; 
&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; 
&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; 
&lt;p&gt;Cycle through the completion list.&lt;/p&gt; 
&lt;h4&gt;copilot-logout&lt;/h4&gt; 
&lt;p&gt;Log out from GitHub.&lt;/p&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h4&gt;copilot-version&lt;/h4&gt; 
&lt;p&gt;The version of the &lt;a href=&quot;https://www.npmjs.com/package/@github/copilot-language-server&quot;&gt;@github/copilot-language-server&lt;/a&gt; to use. If set to &lt;code&gt;nil&lt;/code&gt;, the latest version will be installed.&lt;/p&gt; 
&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; 
&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; 
&lt;h4&gt;copilot-enable-predicates / copilot-disable-predicates&lt;/h4&gt; 
&lt;p&gt;A list of predicate functions with no argument to enable/disable triggering Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;copilot-enable-display-predicates / copilot-disable-display-predicates&lt;/h4&gt; 
&lt;p&gt;A list of predicate functions with no argument to enable/disable showing Copilot&#39;s completions in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;copilot-clear-overlay-ignore-commands&lt;/h4&gt; 
&lt;p&gt;A list of commands that won&#39;t cause the overlay to be cleared.&lt;/p&gt; 
&lt;h4&gt;copilot-network-proxy&lt;/h4&gt; 
&lt;p&gt;Format: &lt;code&gt;&#39;(:host &quot;127.0.0.1&quot; :port 7890 :username: &quot;user&quot; :password: &quot;password&quot;)&lt;/code&gt;, where &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:password&lt;/code&gt; are optional.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq copilot-network-proxy &#39;(:host &quot;127.0.0.1&quot; :port 7890))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Known Issues&lt;/h2&gt; 
&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-overlay.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; 
&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-box.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; 
&lt;h3&gt;Cursor Jump to End of Line When Typing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are using &lt;code&gt;whitespace-mode&lt;/code&gt;, make sure to remove &lt;code&gt;newline-mark&lt;/code&gt; from &lt;code&gt;whitespace-style&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reporting Bugs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure you have restarted your Emacs (and rebuild the plugin if necessary) after updating the plugin.&lt;/li&gt; 
 &lt;li&gt;Please enable event logging by customize &lt;code&gt;copilot-log-max&lt;/code&gt; (to e.g. 1000), then paste related logs in the &lt;code&gt;*copilot events*&lt;/code&gt; and &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/li&gt; 
 &lt;li&gt;If an exception is thrown, please also paste the stack trace (use &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; to enable stack trace).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Cycle through suggestions&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;These projects helped me a lot:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TommyX12/company-tabnine/&quot;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cryptobadger/flight-attendant.el&quot;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@github/copilot-language-server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Do you want chat with Github Copilot?&lt;/h2&gt; 
&lt;p&gt;Just like copilot plugin for intellij or vscode?&lt;/p&gt; 
&lt;p&gt;Please take a look at &lt;a href=&quot;https://github.com/chep/copilot-chat.el&quot;&gt;copilot-chat.el&lt;/a&gt;&lt;/p&gt; 
&lt;!-- Links --&gt;</description>
    </item>
    
    <item>
      <title>doomemacs/doomemacs</title>
      <link>https://github.com/doomemacs/doomemacs</link>
      <description>&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Doom Emacs&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; • &lt;a href=&quot;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&quot;&gt;Screenshots&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&quot; alt=&quot;Made with Doom Emacs&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Supports-Emacs_27.1%E2%80%9330.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&quot; alt=&quot;Supports Emacs 27.1–30.1&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/last-commit/doomemacs/doomemacs?style=flat-square&quot; alt=&quot;Latest commit&quot;&gt;&lt;/p&gt; 
 &lt;!-- ![Build status: master](https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square) --&gt; 
 &lt;p&gt;&lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&quot; alt=&quot;Discord Server&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discourse.doomemacs.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&quot; alt=&quot;Discourse server&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&quot; alt=&quot;Doom Emacs Screenshot&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&quot;&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;a href=&quot;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&quot; align=&quot;right&quot;&gt; &lt;/a&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Doom is a configuration framework for &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; 
&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; 
 &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; 
 &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; 
 &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; 
 &lt;li&gt;A declarative &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&quot;https://github.com/radian-software/straight.el&quot;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; 
 &lt;li&gt;Optional vim emulation powered by &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&quot;https://github.com/easymotion/vim-easymotion&quot;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&quot;https://github.com/tpope/vim-unimpaired&quot;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&quot;&gt;more&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; 
 &lt;li&gt;A Spacemacs-esque &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&quot;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; 
 &lt;li&gt;A rule-based &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&quot;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; 
 &lt;li&gt;Per-file indentation style detection and &lt;a href=&quot;http://editorconfig.org/&quot;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; 
 &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;ivy&lt;/a&gt; or &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; 
 &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; 
 &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git 2.23+&lt;/li&gt; 
 &lt;li&gt;Emacs 27.1–30.1 (&lt;strong&gt;Recommended: 30.1 + &lt;a href=&quot;https://www.emacswiki.org/emacs/GccEmacs&quot;&gt;native-comp&lt;/a&gt;&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; 
 &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Unstable and pre-release builds of Emacs -- which end in &lt;code&gt;.50&lt;/code&gt;, &lt;code&gt;.60&lt;/code&gt;, or &lt;code&gt;.9X&lt;/code&gt; (e.g. &lt;code&gt;28.1.91&lt;/code&gt;) -- &lt;strong&gt;are not officially supported&lt;/strong&gt;. There &lt;em&gt;is&lt;/em&gt; some effort to support Emacs HEAD, however. &lt;a href=&quot;https://discourse.doomemacs.org/t/3241&quot;&gt;Follow this Discourse post&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Doom is comprised of &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&quot;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; 
&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.config/emacs/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Roadmap&lt;/h1&gt; 
&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discourse.doomemacs.org/t/development-roadmap/42&quot;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/5&quot;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/7&quot;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Our documentation&lt;/a&gt; covers many use cases. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&quot;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&quot;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&quot;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&quot;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&quot;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; 
   &lt;li&gt;Your issue may be documented in the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: 
  &lt;ul&gt; 
   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; or &lt;a href=&quot;https://discourse.doomemacs.org/tag/faq&quot;&gt;Discourse FAQs&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; 
 &lt;li&gt;Search &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues&quot;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contribute&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bbatsov/emacs-lisp-style-guide&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&quot; alt=&quot;Elisp styleguide&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&quot; alt=&quot;Donate on liberapay&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/henriklissner/10&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&quot; alt=&quot;Donate on paypal&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&quot;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; 
 &lt;li&gt;Don&#39;t hesitate to &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues/new/choose&quot;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;liberapay&lt;/a&gt; or &lt;a href=&quot;https://paypal.me/henriklissner/10&quot;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>emacs-mirror/emacs</title>
      <link>https://github.com/emacs-mirror/emacs</link>
      <description>&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2025 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; 
&lt;p&gt;This directory tree holds version 31.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; 
&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; 
&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; 
&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; 
&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; 
&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&quot;mailto:bug-gnu-emacs@gnu.org&quot;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; 
&lt;p&gt;See the &quot;Bugs&quot; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&quot;https://savannah.gnu.org/mail/?group=emacs&quot;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&quot;https://lists.gnu.org/&quot;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; 
&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; 
&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; 
&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; 
&lt;p&gt;There are several subdirectories:&lt;/p&gt; 
&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script. &#39;java&#39; holds the Java code for the Emacs port to Android. &#39;cross&#39; holds Makefiles and an additional copy of gnulib used to build Emacs for Android devices. &#39;exec&#39; holds the source code to several helper executables used to run user-installed programs on Android.&lt;/p&gt; 
&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; 
&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; 
&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; 
&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&quot;https://www.gnu.org/licenses/&quot;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dimitri/el-get</title>
      <link>https://github.com/dimitri/el-get</link>
      <description>&lt;p&gt;Manage the external elisp bits and pieces upon which you depend!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dimitri/el-get/actions&quot;&gt;&lt;img src=&quot;https://github.com/dimitri/el-get/actions/workflows/test.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/dimitri/el-get/master/logo/el-get.png&quot; alt=&quot;Color El-Get logo&quot;&gt; El-Get allows you to install and manage &lt;code&gt;elisp&lt;/code&gt; code for Emacs. It supports lots of different types of sources and is able to &lt;em&gt;install&lt;/em&gt; them, &lt;em&gt;update&lt;/em&gt; them and &lt;em&gt;remove&lt;/em&gt; them, but more importantly it will &lt;em&gt;init&lt;/em&gt; them for you. That means it will &lt;code&gt;require&lt;/code&gt; the &lt;em&gt;features&lt;/em&gt; you need, &lt;code&gt;load&lt;/code&gt; the necessary files, set the &lt;em&gt;Info&lt;/em&gt; paths so that &lt;code&gt;C-h i&lt;/code&gt; shows the new documentation you now depend on, and finally call your own initialisation code for you to setup the extension. Or call it a package.&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/dimitri/el-get?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/dimitri/el-get.svg?sanitize=true&quot; alt=&quot;Join the chat at https://gitter.im/dimitri/el-get&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;There are many methods to keep track of your emacs setup. You can manage it all in a private git repository, you can set up &lt;code&gt;git submodules&lt;/code&gt; or directly import external repositories. You can manually retrieve the various packages you wish to track and ensure they are installed on any machine you apply your configuration to.&lt;/p&gt; 
&lt;p&gt;All of these systems require some degree of manual maintenance, especially if you have packages from various types of locations: &lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;, &lt;a href=&quot;http://emacswiki.org&quot;&gt;emacswiki&lt;/a&gt;, &lt;a href=&quot;http://elpa.gnu.org/&quot;&gt;GNU ELPA&lt;/a&gt; or &lt;a href=&quot;http://marmalade-repo.org/&quot;&gt;Marmalade&lt;/a&gt;, privately hosted pages, &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt;, &lt;a href=&quot;http://bazaar.canonical.com/en/&quot;&gt;bzr&lt;/a&gt;, &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt;, the list goes on.&lt;/p&gt; 
&lt;p&gt;El-Get is designed to simplify this process and allow access to all the various methods of obtaining packages from a single interface. Every package has a recipe that allows you to locate the original source, and that can be updated if the package is moved.&lt;/p&gt; 
&lt;p&gt;Whether you are using one machine or many, El-Get provides you with a simple interface to your list of installed packages, and the tools to keep them up to date.&lt;/p&gt; 
&lt;h1&gt;El-Get, ELPA and package.el&lt;/h1&gt; 
&lt;p&gt;Emacs 24 ships with &lt;code&gt;package.el&lt;/code&gt; which allows for easy installation of Emacs Lisp extensions for Emacs, and supports several servers where to find a list of packaged extension.&lt;/p&gt; 
&lt;p&gt;Rather than ask authors or contributors to clean-up and package existing software, the El-Get approach is to take bits and pieces as they exist today and still empower Emacs users in a way that those random electrons are easy to use.&lt;/p&gt; 
&lt;p&gt;That&#39;s why El-Get supports &lt;code&gt;package.el&lt;/code&gt; as one of its &lt;em&gt;methods&lt;/em&gt; to fetch Emacs Lisp Extensions.&lt;/p&gt; 
&lt;p&gt;Technical differences also include the ability for El-Get to run OS commands (such as &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;ginstall-info&lt;/code&gt;) so as to better cope with the diversity found in the wild, allowing for automatic inclusion of &lt;em&gt;Info&lt;/em&gt; pages for packages providing some.&lt;/p&gt; 
&lt;p&gt;You can use &lt;code&gt;el-get-elpa-build-local-recipes&lt;/code&gt; to install extensions provided by ELPA.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;El-Get is easy to install. The only requirements to do so successfully are Emacs (24.3 and above), &lt;code&gt;git&lt;/code&gt; and a connection to the internet that allows you to &lt;code&gt;git clone&lt;/code&gt; repositories.&lt;/p&gt; 
&lt;p&gt;If you do not already have &lt;code&gt;git&lt;/code&gt; on your system, you can install it through your package manager if you are using Linux or by downloading it from the &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git Homepage&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation Dependencies&lt;/h2&gt; 
&lt;p&gt;Installing El-Get depends on a working &lt;code&gt;install-info&lt;/code&gt; command, please make sure you have one in your &lt;code&gt;PATH&lt;/code&gt;. In &lt;code&gt;debian&lt;/code&gt;, it&#39;s available in the &lt;a href=&quot;http://packages.debian.org/squeeze/install-info&quot;&gt;install-info debian package&lt;/a&gt;. The &lt;a href=&quot;http://developer.apple.com/library/mac/#DOCUMENTATION/Darwin/Reference/ManPages/man1/install-info.1.html&quot;&gt;MacOSX install-info&lt;/a&gt; version works fine with El-Get.&lt;/p&gt; 
&lt;p&gt;When using the &lt;em&gt;windows&lt;/em&gt; operating system, take into account that the way Emacs calls external programs is not the same for &lt;em&gt;native builds&lt;/em&gt; and &lt;em&gt;cygwin&lt;/em&gt;, so make sure you don&#39;t mix and match them at least for &lt;code&gt;install-info&lt;/code&gt; (e.g. &lt;em&gt;cygwin&lt;/em&gt; version of &lt;code&gt;install-info&lt;/code&gt; will error out when called by el-get from a &lt;code&gt;windows-nt&lt;/code&gt; Emacs, see &lt;code&gt;system-type&lt;/code&gt;). When using a &lt;em&gt;native build&lt;/em&gt; of Emacs for windows, consider using the &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages.html&quot;&gt;GNU Win 32&lt;/a&gt; distribution of &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/texinfo.htm&quot;&gt;TexInfo for windows&lt;/a&gt;, which contains the proper &lt;code&gt;install-info&lt;/code&gt; version when you&#39;re not using the &lt;em&gt;cygwin&lt;/em&gt; Emacs binary.&lt;/p&gt; 
&lt;h2&gt;The Lazy Installer&lt;/h2&gt; 
&lt;p&gt;To install El-Get you can use the &lt;em&gt;lazy-installer&lt;/em&gt;. This will not load it on startup or otherwise affect future usage of Emacs. If you wish to ensure that El-Get will be available in future Emacs session please use the code provided in &lt;strong&gt;Basic Setup&lt;/strong&gt;. Using the code below will require an internet connection even if El-Get is already installed, that&#39;s why it&#39;s advised to use it for first time installation, not for embedding into your &lt;code&gt;.emacs&lt;/code&gt; (or your &lt;code&gt;user-init-file&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;;; So the idea is that you copy/paste this code into your *scratch* buffer,
;; hit C-j, and you have a working el-get.
(url-retrieve
 &quot;https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el&quot;
 (lambda (s)
   (goto-char (point-max))
   (eval-print-last-sexp)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NOTE: if you are using Windows see &lt;a href=&quot;https://github.com/dimitri/el-get/wiki/Installation-on-Windows&quot;&gt;Installation on Windows&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Evaluating this code after copying it into your &lt;code&gt;*scratch*&lt;/code&gt; buffer by typing &lt;code&gt;C-j&lt;/code&gt; or &lt;code&gt;M-x eval-print-last-exp&lt;/code&gt; will retrieve the El-Get installation script. This script will then use &lt;code&gt;git&lt;/code&gt; to clone El-Get and install it to the default location (&lt;code&gt;~/.emacs.d/el-get/el-get&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;Replicating a package set on another Emacs installation&lt;/h2&gt; 
&lt;p&gt;In the Emacs whose setup you wish to replicate, type &lt;code&gt;M-x ielm&lt;/code&gt; for an Emacs Lisp prompt, and enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;`(setq my-packages
              &#39;,(mapcar #&#39;el-get-as-symbol
                        (el-get-list-package-names-with-status &quot;installed&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Copy the result into the new Emacs, in which you should already have installed El-Get, and evaluate it, followed by &lt;code&gt;(el-get &#39;sync my-packages)&lt;/code&gt;&lt;/p&gt; 
&lt;h1&gt;Setup&lt;/h1&gt; 
&lt;h2&gt;Basic Setup&lt;/h2&gt; 
&lt;p&gt;If you wish to ensure that El-Get is available when you load Emacs you can place the following elisp code in your init file. It will detect if &lt;code&gt;el-get&lt;/code&gt; is already installed and install it if necessary.&lt;/p&gt; 
&lt;p&gt;The addition of &lt;code&gt;(el-get &#39;sync)&lt;/code&gt; in the code blocks below ensures that any currently &lt;em&gt;installed&lt;/em&gt; packages will be initialized and any &lt;em&gt;required&lt;/em&gt; packages will be installed.&lt;/p&gt; 
&lt;p&gt;Calling the &lt;code&gt;el-get&lt;/code&gt; function is covered in details in the full &lt;em&gt;Info&lt;/em&gt; manual.&lt;/p&gt; 
&lt;p&gt;Here is the basic setup to add to your &lt;code&gt;user-init-file&lt;/code&gt; (&lt;code&gt;.emacs&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-to-list &#39;load-path (expand-file-name &quot;el-get/el-get&quot; user-emacs-directory))

(unless (require &#39;el-get nil &#39;noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       &quot;https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el&quot;)
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list &#39;el-get-recipe-path &quot;~/.emacs.d/el-get-user/recipes&quot;)
(el-get &#39;sync)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alternative Basic Setup with Installation via MELPA&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;load-path (expand-file-name &quot;el-get/el-get&quot; user-emacs-directory))

(unless (require &#39;el-get nil &#39;noerror)
  (require &#39;package)
  (add-to-list &#39;package-archives
               &#39;(&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;))
  (package-refresh-contents)
  (package-initialize)
  (package-install &#39;el-get)
  (require &#39;el-get))

(add-to-list &#39;el-get-recipe-path &quot;~/.emacs.d/el-get-user/recipes&quot;)
(el-get &#39;sync)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Package Setup&lt;/h2&gt; 
&lt;p&gt;The easiest way to setup a given package is to add its initialization code to a file named &lt;code&gt;init-&amp;lt;package&amp;gt;.el&lt;/code&gt; with &lt;code&gt;&amp;lt;package&amp;gt;&lt;/code&gt; replaced with the package name. This file needs to be placed in the directory &lt;code&gt;el-get-user-package-directory&lt;/code&gt; (defaults to &lt;code&gt;nil&lt;/code&gt;, you have to set a value for it, like for example &lt;code&gt;~/.emacs.d/el-get-init-files/&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;El-Get will then load that file at package initialization time. See the full &lt;em&gt;Info&lt;/em&gt; documentation for more details and possibilities.&lt;/p&gt; 
&lt;p&gt;Many &lt;code&gt;init-&lt;/code&gt; packages are already available in El-Get.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;El-Get requires very little interaction with your init file when managing packages. &lt;strong&gt;Basic Usage&lt;/strong&gt; explains how to manage your packages without ever having to touch your init file again (meaning, &lt;em&gt;once El-Get is installed&lt;/em&gt;). &lt;strong&gt;Advanced Usage with Local Recipes&lt;/strong&gt; explains how to write your init file with explicitly specifying packages to install (when sharing the same setup between several machines for example).&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;h3&gt;Adding and removing packages&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-install&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for a package name, with completion, then install it. It will only propose packages that are not already &lt;code&gt;installed&lt;/code&gt;. Any package that you have a recipe for is a candidate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-remove&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for an &lt;code&gt;installed&lt;/code&gt; package name, with completion, then remove it. Depending on the &lt;code&gt;type&lt;/code&gt; of the package, this often means simply deleting the directory where the source package lies. Sometime we have to use external tools instead (e.g. &lt;code&gt;apt-get&lt;/code&gt;). No effort is made to unload the features.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-reinstall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is just a shortcut for &lt;code&gt;el-get-remove&lt;/code&gt; followed by &lt;code&gt;el-get-install&lt;/code&gt; of the same package. It is primarily useful when a package has changed types, so the normal &lt;code&gt;el-get-update&lt;/code&gt; process will not work correctly.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Keeping up to date&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-self-update&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Update only one package, &lt;code&gt;el-get&lt;/code&gt; itself.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-update&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for an installed package name, with completion, then update it. This will run the &lt;code&gt;build&lt;/code&gt; commands and &lt;code&gt;init&lt;/code&gt; the package again.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-update-all&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will update all packages that have the &lt;code&gt;installed&lt;/code&gt; status in your status file. Before the update you will be prompted for confirmation that you wish to proceed.&lt;/p&gt; &lt;p&gt;Beware that using this function can lead to hours of settings review: more often than not updating a package requires some adjustments to your setup. Updating all of them at once will require reviewing almost all your setup.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-reload&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Reload the given package files. Happens automatically at update time too.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Viewing available recipes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-list-packages&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Opens a buffer listing all known packages (those for which you have a recipe). The listing includes the package name, its status (one of &lt;em&gt;available&lt;/em&gt;, &lt;em&gt;installed&lt;/em&gt;, &lt;em&gt;removed&lt;/em&gt; or &lt;em&gt;required&lt;/em&gt;) and the package description. The description is a free form text and has not been provided for all recipes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-describe&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Prompt for a package name, with completion, then open an &lt;code&gt;*Help*&lt;/code&gt; window with details about the selected package. Those include current status, website, description, installation method, full recipe, and buttons to easily install, update or remove the package.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-find-recipe-file&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for the name of a package, with completion, then &lt;code&gt;find-file&lt;/code&gt; its &lt;code&gt;recipe&lt;/code&gt; file. If the recipe does not exist, it will create a new recipe file with the appropriate name.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Advanced Usage with Local Recipes&lt;/h2&gt; 
&lt;p&gt;Placing &lt;code&gt;el-get-bundle&lt;/code&gt; macro calls instead of &lt;code&gt;(el-get &#39;sync)&lt;/code&gt; in your init file to explicitly specify which packages should be installed. The macro accepts either a simple package name from defined recipes, a package name with a local recipe definition, a package with initialization code, or everything together.&lt;/p&gt; 
&lt;p&gt;Note that if you leave in the &lt;code&gt;(el-get &#39;sync)&lt;/code&gt; call (which you need to, unless you&#39;ve also made sure to explicitly call &lt;code&gt;el-get-bundle&lt;/code&gt; for all dependency packages), it &lt;em&gt;must&lt;/em&gt; go after any recipe defining &lt;code&gt;el-get-bundle&lt;/code&gt; calls, otherwise el-get won&#39;t know the recipe when it tries to initialize the package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;;; Basic setup

(add-to-list &#39;load-path (expand-file-name &quot;el-get/el-get&quot; user-emacs-directory))

(unless (require &#39;el-get nil &#39;noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       &quot;https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el&quot;)
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list &#39;el-get-recipe-path &quot;~/.emacs.d/el-get-user/recipes&quot;)

;; Simple package names
(el-get-bundle yasnippet)
(el-get-bundle color-moccur)

;; Locally defined recipe
(el-get-bundle yaicomplete
  :url &quot;https://github.com/tarao/elisp.git&quot;
  :features yaicomplete)

;; With initialization code
(el-get-bundle zenburn-theme
  :url &quot;https://raw.githubusercontent.com/bbatsov/zenburn-emacs/master/zenburn-theme.el&quot;
  (load-theme &#39;zenburn t))

;; End of recipes, call `el-get&#39; to make sure all packages (including
;; dependencies) are setup.
(el-get &#39;sync)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a package with a local recipe definition has a recipe file, the definition overrides that in the recipe file.&lt;/p&gt; 
&lt;p&gt;There is some syntactic sugar to specify a package name and a recipe source together.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(el-get-bundle tarao/tab-group-el)
;; equivalent to
;; (el-get-bundle tab-group-el :type github :pkgname &quot;tarao/tab-group-el&quot;)

(el-get-bundle gist:4468816:pit
;; equivalent to
;; (el-get-bundle pit :type git :url &quot;http://gist.github.com/4468816.git&quot;)

(el-get-bundle elpa:undo-tree)
;; equivalent to
;; (el-get-bundle undo-tree :type elpa)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please refer to the &lt;em&gt;Info&lt;/em&gt; documentation provided with El-Get for the complete syntax of &lt;code&gt;el-get-bundle&lt;/code&gt; and recipe definitions.&lt;/p&gt; 
&lt;h1&gt;Troubleshooting&lt;/h1&gt; 
&lt;p&gt;In some &lt;a href=&quot;https://github.com/dimitri/el-get/issues/2747&quot;&gt;hard to understand cases&lt;/a&gt; installed packages may fail to produce correct autoloads. In this case a package will be present at your file system but Emacs will not &quot;see&quot; it.&lt;/p&gt; 
&lt;p&gt;If you have this problem you can try reinstalling a package or add explicit &lt;code&gt;(require &#39;package-name)&lt;/code&gt; to your Emacs config.&lt;/p&gt; 
&lt;h1&gt;Conclusion&lt;/h1&gt; 
&lt;p&gt;Enjoy El-get, enjoy Emacs, have fun with Emacs Lisp, and simplify your Emacs Setup &lt;strong&gt;today&lt;/strong&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs-evil/evil</title>
      <link>https://github.com/emacs-evil/evil</link>
      <description>&lt;p&gt;The extensible vi layer for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png&quot; alt=&quot;An extensible vi layer for Emacs&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/emacs-evil/evil/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/emacs-evil/evil/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/evil&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/evil-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/evil&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/evil-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://elpa.nongnu.org/nongnu/evil.html&quot;&gt;&lt;img src=&quot;http://elpa.nongnu.org/nongnu/evil.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://evil.readthedocs.io/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/evil/badge/?version=latest&quot; alt=&quot;Documentation Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License: GPL v3&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Evil is an &lt;strong&gt;e&lt;/strong&gt;xtensible &lt;strong&gt;vi&lt;/strong&gt; &lt;strong&gt;l&lt;/strong&gt;ayer for &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;. It emulates the main features of &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;, and provides facilities for writing custom extensions. Also see our page on &lt;a href=&quot;http://emacswiki.org/emacs/Evil&quot;&gt;EmacsWiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el&quot;&gt;official documentation&lt;/a&gt; for installation instructions. We recommend using &lt;em&gt;package.el&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;As a quickstart, you can add the following code to your Emacs init file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Set up package.el to work with MELPA
(require &#39;package)
(add-to-list &#39;package-archives
             &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;))
(package-initialize)
(package-refresh-contents)

;; Download Evil
(unless (package-installed-p &#39;evil)
  (package-install &#39;evil))

;; Enable Evil
(require &#39;evil)
(evil-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Evil requires Emacs 24.1 or later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Evil requires any of the following for &lt;code&gt;C-r&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;undo-redo&lt;/code&gt; from Emacs 28&lt;/li&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://gitlab.com/tsc25/undo-tree&quot;&gt;undo-tree&lt;/a&gt; package (available via GNU ELPA)&lt;/li&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://codeberg.org/ideasman42/emacs-undo-fu&quot;&gt;undo-fu&lt;/a&gt; package (available via MELPA and NonGNU ELPA)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For the motions &lt;code&gt;g;&lt;/code&gt; &lt;code&gt;g,&lt;/code&gt; and for the last-change-register &lt;code&gt;.&lt;/code&gt;, Evil requires the &lt;a href=&quot;https://github.com/emacs-evil/goto-chg&quot;&gt;goto-chg.el&lt;/a&gt; package (available via MELPA and NonGNU ELPA), which provides the functions &lt;code&gt;goto-last-change&lt;/code&gt; and &lt;code&gt;goto-last-change-reverse&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Emacs 24.1 and 24.2 Evil also requires &lt;a href=&quot;https://elpa.gnu.org/packages/cl-lib.html&quot;&gt;cl-lib&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;The latest version of the documentation is readable online &lt;a href=&quot;https://evil.readthedocs.io/en/latest/index.html&quot;&gt;here&lt;/a&gt;. It is also available as &lt;a href=&quot;https://evil.readthedocs.io/_/downloads/en/stable/pdf/&quot;&gt;PDF&lt;/a&gt; and as &lt;a href=&quot;https://evil.readthedocs.io/_/downloads/en/stable/epub/&quot;&gt;EPUB&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Mailing list&lt;/h1&gt; 
&lt;p&gt;Evil is discussed at the &lt;a href=&quot;http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list&quot;&gt;gmane.emacs.vim-emulation&lt;/a&gt; mailing list.&lt;/p&gt; 
&lt;h1&gt;IRC&lt;/h1&gt; 
&lt;p&gt;Visit us on &lt;code&gt;irc.libera.chat #evil-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Contribution&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/emacs-evil/evil/raw/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines for issues and pull requests.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chep/copilot-chat.el</title>
      <link>https://github.com/chep/copilot-chat.el</link>
      <description>&lt;p&gt;Chat with Github copilot in Emacs !&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Copilot Chat for Emacs #+AUTHOR: Cédric Chépied&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Description This plugin allows you to chat with GitHub copilot.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[[file:chat.gif]]&lt;/p&gt; 
&lt;p&gt;Feel free to contribute, report issues or discuss new features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;News ** V2 v2.0.1 is here.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In v2, only one buffer is used for chat, thanks to polymode.&lt;/p&gt; 
&lt;p&gt;** Multiple instances You can try the =76-multiple-instances= branch. It&#39;s a work in progress. Copilot-chat instances are linked to a parent directory. Each instance has a dedicated history, context, model, buffer list… For the moment, I&#39;m developping it with curl backend and org frontend. The other configuration may not work. This is a huge code transformation so please be patient and report bugs or wanted features/behavior in the dedicated issue.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;Copilot-chat-display&lt;/del&gt; will try to guess current instance with current buffer file location. If it fails, instance will be asked to the user. With prefix argument, guessing is bypassed.&lt;/p&gt; 
&lt;p&gt;** Help wanted Bug reports and new ideas are very welcome.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tips&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Many of you won&#39;t read this readme. And many of those who start to read won&#39;t read more than a few lines. So I&#39;ll write some tips here, at the beginning.&lt;/p&gt; 
&lt;p&gt;** Yank When using the org frontend, you can yank code blocks provided by Copilot just as you would use the kill ring. Here&#39;s a simple configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (use-package copilot-chat … :bind (:map global-map (&quot;C-c C-y&quot; . copilot-chat-yank) (&quot;C-c M-y&quot; . copilot-chat-yank-pop) (&quot;C-c C-M-y&quot; . (lambda () (interactive) (copilot-chat-yank-pop -1)))) …) #+end_src&lt;/p&gt; 
&lt;p&gt;** Find input section In copilot-chat buffer, you can use (or bind to a key) the interactive &lt;del&gt;copilot-chat-goto-input&lt;/del&gt; function to place point at the beginning of the prompt area.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation ** Melpa Copilot-chat is available on melpa&amp;nbsp;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_example M-x package-install RET copilot-chat RET #+end_example&lt;/p&gt; 
&lt;p&gt;With =use-package= : #+begin_src emacs-lisp (use-package copilot-chat)&lt;/p&gt; 
&lt;p&gt;#+end_src&lt;/p&gt; 
&lt;p&gt;** Straight #+begin_src emacs-lisp (use-package copilot-chat :straight (:host github :repo &quot;chep/copilot-chat.el&quot; :files (&quot;*.el&quot;)) :after (request org markdown-mode)) #+end_src&lt;/p&gt; 
&lt;p&gt;** Manual Clone repository and eval files in emacs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configuration ** GitHub You will need a GitHub account with access to copilot API. When sending the first prompt, you will need to authenticate to GitHub. Follow instructions and everything will be fine.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Backend &lt;del&gt;copilot-chat-backend&lt;/del&gt; can be set to &lt;del&gt;&#39;curl&lt;/del&gt; (default) or &lt;del&gt;&#39;request&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;With curl, answers will be written token by token. Curl path can be set with &lt;code&gt;copilot-chat-curl-program&lt;/code&gt; variable.&lt;br&gt; With request library, the text is written when all data is read and this can be long.&lt;/p&gt; 
&lt;p&gt;** Frontend Several frontends are available. You can select your favorite one by setting the &lt;del&gt;copilot-chat-frontend&lt;/del&gt; variable to &lt;del&gt;&#39;org&lt;/del&gt; (default), &lt;del&gt;&#39;markdown&lt;/del&gt; or &lt;del&gt;&#39;shell-maker&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;Try them and choose wisely.&lt;/p&gt; 
&lt;p&gt;** Magit commits You can use copilot to generate your commit messages&amp;nbsp;:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;git-commit-setup-hook &#39;copilot-chat-insert-commit-message) #+end_src&lt;/p&gt; 
&lt;p&gt;Or call manually &lt;del&gt;(copilot-chat-insert-commit-message)&lt;/del&gt; when in the commit message buffer.&lt;/p&gt; 
&lt;p&gt;** Proxy The proxy can be configured with the curl backend. For the emacs-request backend, please refer to the emacs-request documentation if you need to configure a proxy.&lt;/p&gt; 
&lt;p&gt;Use the variables &lt;del&gt;copilot-chat-curl-proxy&lt;/del&gt;, &lt;del&gt;copilot-chat-curl-proxy-user-pass&lt;/del&gt;, and &lt;del&gt;copilot-chat-curl-proxy-insecure&lt;/del&gt; to set up a proxy. Refer to the documentation for each variable to learn how to use them.&lt;/p&gt; 
&lt;p&gt;Proxies have not been thoroughly tested yet, so there may be bugs. Many options are missing for HTTPS proxies. Please open an issue if you need additional features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage ** Basic Start chatting with &lt;del&gt;(copilot-chat-display)&lt;/del&gt;. Type your question in prompt, then press &lt;del&gt;C-c C-c&lt;/del&gt; or &lt;del&gt;C-c RET&lt;/del&gt;.&lt;br&gt; You may need to authenticate to GitHub. Follow instructions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can select buffers that will be added as context in your prompt. Use &lt;del&gt;copilot-chat-add-current-buffer&lt;/del&gt; and &lt;del&gt;copilot-chat-del-current-buffer&lt;/del&gt;. You can also manage buffers by using &lt;del&gt;(copilot-chat-list)&lt;/del&gt;. In the list, selected buffer will be highlighted using &lt;del&gt;copilot-chat-list-selected-buffer-face&lt;/del&gt; which inherit from &lt;del&gt;font-lock-keyword-face&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;Selected buffers will be sent with each prompt until you remove them.&lt;/p&gt; 
&lt;p&gt;** Transient You can call &lt;del&gt;(copilot-chat-transient)&lt;/del&gt; to open transient menu. Almost all functions are accessible.&lt;/p&gt; 
&lt;p&gt;** Functions *** Basic functions&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-reset)&lt;/del&gt; reset everything including history, frontend and included buffers (default). Use with prefix argument to preserve selected buffers.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-display)&lt;/del&gt; display copilot chat buffers.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-switch-to-buffer)&lt;/del&gt; switch to Copilot Chat buffer, side by side with the current code editing buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-set-model)&lt;/del&gt; Select AI model to use.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Prompt&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-goto-input&lt;/del&gt; place point at the beginning of the prompt area.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-custom-mini-buffer)&lt;/del&gt; ask for a prompt in minibuffer and send it to copilot.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-custom-prompt-selection)&lt;/del&gt; uses the provided prompt or asks for a prompt in minibuffer, then appends selection (or entire buffer), sends the result to copilot.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-prompt-history-previous)&lt;/del&gt; insert previous prompt from history in prompt buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-prompt-history-next)&lt;/del&gt; insert next prompt from history in prompt buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-ask-and-insert)&lt;/del&gt; ask for a custom prompt and write answer in current buffer at point.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Answer manipulation&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-yank)&lt;/del&gt; yank the last code block at point (org frontend only).&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-yank-pop)&lt;/del&gt; Replace last yank with previous block, or use argument to choose the block. Acts like &lt;del&gt;(yank-pop)&lt;/del&gt; (org frontend only).&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-send-to-buffer)&lt;/del&gt; send a code block to a chosen buffer. Replace selection if any (org and markdown frontends only).&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-copy-code-at-point)&lt;/del&gt; copy current code block into kill ring.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Buffers&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-add-current-buffer)&lt;/del&gt; add current buffer to copilot chat. Its content will be sent with every request.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-del-current-buffer)&lt;/del&gt; remove current buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-list)&lt;/del&gt; open buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-add-buffers-in-current-window)&lt;/del&gt; add all buffers in current Emacs window to copilot chat.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-add-files-under-dir)&lt;/del&gt; Add all files with same suffix as current file under current directory. If there are more than 40 files, refuse to add and show warning message.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Code helper functions&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-explain-symbol-at-line)&lt;/del&gt; ask Copilot to explain symbol under point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-explain)&lt;/del&gt; ask copilot to explain selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-review)&lt;/del&gt; ask copilot to review selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-doc)&lt;/del&gt; ask copilot to document selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-fix)&lt;/del&gt; ask copilot to fix selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-optimize)&lt;/del&gt; ask copilot to optimize selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-test)&lt;/del&gt; ask copilot to write tests for selected code.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-explain-defun)&lt;/del&gt; ask copilot to explain current function under point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-custom-prompt-function)&lt;/del&gt; ask copilot to apply a custom prompt to the function body under point. Eg. instruct on how to refactor the function.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-review-whole-buffer)&lt;/del&gt; ask copilot to review the current whole buffer. It can be used to review the full class, or, review the magit diff for my change, or other people&#39;s change.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Magit&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-insert-commit-message)&lt;/del&gt; Insert in the current buffer a copilot generated commit message.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Transient&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient)&lt;/del&gt; display main transient menu to access all functions.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient-buffers)&lt;/del&gt; display transient menu for buffer management.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient-code)&lt;/del&gt; display transient menu for code helper functions.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-transient-magit)&lt;/del&gt; display transient menu for magit functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Troubleshooting&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;(copilot-chat-clear-auth-cache)&lt;/del&gt; clears the auth cache for Copilot Chat. You will have to login again.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Customizable variables All variables can be customized using &lt;del&gt;M-x customize-group RET copilot-chat RET&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;*** Backend&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-backend&lt;/del&gt; - Backend to use for API calls. Can be &lt;del&gt;&#39;curl&lt;/del&gt; (default) or &lt;del&gt;&#39;request&lt;/del&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-program&lt;/del&gt; - Path to curl executable when using curl backend.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy&lt;/del&gt; - Proxy configuration for curl backend. Supports HTTP/HTTPS/SOCKS protocols.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy-insecure&lt;/del&gt; - Skip SSL verification for proxy connections in curl backend.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy-user-pass&lt;/del&gt; - Proxy authentication credentials for curl backend.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Frontend&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-frontend&lt;/del&gt; - Frontend interface to use. Can be &lt;del&gt;&#39;org&lt;/del&gt; (default) or &lt;del&gt;&#39;markdown&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Display&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-list-added-buffers-only&lt;/del&gt; - By default, buffer list displays all buffers and uses faces to highlight added buffer. If set to &lt;del&gt;t&lt;/del&gt;, only added buffer are displayed.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-follow&lt;/del&gt; - If &lt;del&gt;t&lt;/del&gt; (default is &lt;del&gt;nil&lt;/del&gt;), point follows answer in chat buffer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Storage and cache&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-github-token-file&lt;/del&gt; - File path to store GitHub authentication token.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-token-cache&lt;/del&gt; - File path to store session token cache.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Model settings&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-model&lt;/del&gt; - AI model to use. It is better to use &lt;del&gt;(copilot-chat-set-model)&lt;/del&gt; to set it.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-model-ignore-picker&lt;/del&gt; - If &lt;del&gt;nil&lt;/del&gt; (default) add a filter to &lt;del&gt;(copilot-chat-set-model)&lt;/del&gt; which will only show models with &lt;del&gt;model_picker_enabled&lt;/del&gt; attribute.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Prompts Default prompts used by various commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-org-prompt&lt;/del&gt; - Base org system prompt configuring Copilot&#39;s behavior.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-markdown-prompt&lt;/del&gt; - Base markdown system prompt configuring Copilot&#39;s behavior.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-explain&lt;/del&gt; - Prompt for explain command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-review&lt;/del&gt; - Prompt for code review command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-doc&lt;/del&gt; - Prompt for documentation command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-fix&lt;/del&gt; - Prompt for fix command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-optimize&lt;/del&gt; - Prompt for optimization command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-prompt-test&lt;/del&gt; - Prompt for test generation command.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-commit-prompt&lt;/del&gt; - Prompt for generating commit messages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Faces You can customize the appearance of the buffer list by modifying these faces:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-list-default-face&lt;/del&gt; - Face used for unselected buffers in the buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;copilot-chat-list-selected-buffer-face&lt;/del&gt; - Face used for selected buffers in the buffer list.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Key bindings *** Prompt buffer&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-c&lt;/del&gt; send prompt. Answer will be written in chat buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c RET&lt;/del&gt; send prompt. Answer will be written in chat buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;M-p&lt;/del&gt; previous prompt.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;M-n&lt;/del&gt; next prompt.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-l&lt;/del&gt; open buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-q&lt;/del&gt; bury buffer and delete window.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-t&lt;/del&gt; open transient menu.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Buffer list buffer&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;RET&lt;/del&gt; select or deselect buffer on point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;space&lt;/del&gt; select or deselect buffer on point.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;C-c C-c&lt;/del&gt; clear buffer list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;g&lt;/del&gt; refresh list.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;q&lt;/del&gt; bury buffer and delete window.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Notes This plugin is unofficial and based on Copilot Chat for neovim repository: &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;https://github.com/CopilotC-Nvim/CopilotChat.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The prompt for git commit messages comes from [[https://github.com/ywkim/gpt-commit][gpt-commit]].&lt;/p&gt; 
&lt;p&gt;For GitHub copilot code completion in emacs, checkout [[https://github.com/copilot-emacs/copilot.el][copilot.el]]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>progfolio/elpaca</title>
      <link>https://github.com/progfolio/elpaca</link>
      <description>&lt;p&gt;An elisp package manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elpaca: An Elisp Package Manager&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/images/elpaca.svg?sanitize=true&quot;&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&quot;Chews data, spits packages.&quot;&lt;/p&gt; 
&lt;p&gt;Elpaca is an elisp package manager. It allows users to find, install, update, and remove third-party packages for Emacs. It is a replacement for the built-in Emacs package manager, package.el.&lt;/p&gt; 
&lt;p&gt;Elpaca:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installs packages asynchronously, in parallel for fast, non-blocking installations.&lt;/li&gt; 
 &lt;li&gt;Includes a flexible UI for finding and operating on packages.&lt;/li&gt; 
 &lt;li&gt;Downloads packages from their sources for convenient elisp development.&lt;/li&gt; 
 &lt;li&gt;Supports thousands of elisp packages out of the box (MELPA, NonGNU/GNU ELPA, Org/org-contrib).&lt;/li&gt; 
 &lt;li&gt;Makes it easy for users to create their own ELPAs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/doc/manual.md&quot;&gt;manual&lt;/a&gt; and &lt;a href=&quot;https://github.com/progfolio/elpaca/wiki&quot;&gt;wiki&lt;/a&gt; for in-depth information on Elpaca usage, customization, and development. Users who wish to experiment with Elpaca may find the example &lt;a href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/doc/init.el&quot;&gt;init.el&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/doc/early-init.el&quot;&gt;early-init.el&lt;/a&gt; files useful.&lt;/p&gt; 
&lt;h1&gt;Video Tour&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5Ud-TE3iIQY&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/images/elpaca-manager-install.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;Elpaca requires:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Emacs &amp;gt;= 27.1&lt;/li&gt; 
 &lt;li&gt;git (minimum version TBD)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a id=&quot;installer&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Installer&lt;/h3&gt; 
&lt;p&gt;To install Elpaca, add the following elisp to your init.el. It must come before any calls to other Elpaca functions/macros. This will clone Elpaca into your &lt;code&gt;user-emacs-directory&lt;/code&gt; under the &lt;code&gt;elpaca&lt;/code&gt; subdirectory. It then builds and activates Elpaca.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(defvar elpaca-installer-version 0.10)
(defvar elpaca-directory (expand-file-name &quot;elpaca/&quot; user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name &quot;builds/&quot; elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name &quot;repos/&quot; elpaca-directory))
(defvar elpaca-order &#39;(elpaca :repo &quot;https://github.com/progfolio/elpaca.git&quot;
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults &quot;elpaca-test.el&quot; (:exclude &quot;extensions&quot;))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name &quot;elpaca/&quot; elpaca-repos-directory))
       (build (expand-file-name &quot;elpaca/&quot; elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list &#39;load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (&amp;lt;= emacs-major-version 28) (require &#39;subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window &quot;*elpaca-bootstrap*&quot;))
                  ((zerop (apply #&#39;call-process `(&quot;git&quot; nil ,buffer t &quot;clone&quot;
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format &quot;--depth=%d&quot; depth) &quot;--no-single-branch&quot;))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process &quot;git&quot; nil buffer t &quot;checkout&quot;
                                        (or (plist-get order :ref) &quot;--&quot;))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil &quot;-Q&quot; &quot;-L&quot; &quot;.&quot; &quot;--batch&quot;
                                        &quot;--eval&quot; &quot;(byte-recompile-directory \&quot;.\&quot; 0 &#39;force)&quot;)))
                  ((require &#39;elpaca))
                  ((elpaca-generate-autoloads &quot;elpaca&quot; repo)))
            (progn (message &quot;%s&quot; (buffer-string)) (kill-buffer buffer))
          (error &quot;%s&quot; (with-current-buffer buffer (buffer-string))))
      ((error) (warn &quot;%s&quot; err) (delete-directory repo &#39;recursive))))
  (unless (require &#39;elpaca-autoloads nil t)
    (require &#39;elpaca)
    (elpaca-generate-autoloads &quot;elpaca&quot; repo)
    (load &quot;./elpaca-autoloads&quot;)))
(add-hook &#39;after-init-hook #&#39;elpaca-process-queues)
(elpaca `(,@elpaca-order))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows users must be able to create symlinks&lt;sup&gt;&lt;a id=&quot;fnr.-0-1&quot; class=&quot;footref&quot; href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/#fn.-0-1&quot; role=&quot;doc-backlink&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, or enable &lt;code&gt;elpaca-no-symlink-mode&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; Uncomment for systems which cannot create symlinks:
;; (elpaca-no-symlink-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll also want to disable package.el in your early-init file&lt;sup&gt;&lt;a id=&quot;fnr.-0-2&quot; class=&quot;footref&quot; href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/#fn.-0-2&quot; role=&quot;doc-backlink&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq package-enable-at-startup nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And remove anything related to package.el in your init file. e.g. calls to &lt;code&gt;(package-activate-all)&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operation&lt;/th&gt; 
   &lt;th&gt;UI (keys apply in elpaca-ui-mode)&lt;/th&gt; 
   &lt;th&gt;completing-read interface commands&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Finding Packages&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g&lt;/code&gt; &lt;code&gt;m&lt;/code&gt; (or &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;elpaca-manager&lt;/code&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-info&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Trying Packages (for current session)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;i&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-try&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fetching Package Updates&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;f&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-fetch&lt;/code&gt; or &lt;code&gt;elpaca-fetch-all&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Merging Updates&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;m&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-merge&lt;/code&gt; or &lt;code&gt;elpaca-merge-all&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Updating Packages&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;p&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-update&lt;/code&gt; or &lt;code&gt;elpaca-update-all&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rebuilding Packages&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;r&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-rebuild&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Deleting Packages&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;d&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-delete&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;View Package Logs&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g&lt;/code&gt; &lt;code&gt;l&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-log&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Visit Package Repository Directory&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-visit&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Visit Package Build Directory&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;v&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-u M-x&lt;/code&gt; &lt;code&gt;elpaca-visit&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Browse Package Website&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;elpaca-browse&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;​* Update is an alias for &quot;pull&quot;. It&#39;s encouraged to fetch, review, and &lt;strong&gt;then&lt;/strong&gt; merge package updates rather than pulling.&lt;/p&gt; 
&lt;p&gt;Packages installed via the above commands are not loaded on subsequent Emacs sessions (after restarting). To install and load packages persistently (across Emacs restarts), use the &lt;code&gt;elpaca&lt;/code&gt; macro in your init file after the installer. (&lt;a href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/#installer&quot;&gt;installer&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; Install a package via the elpaca macro
;; See the &quot;recipes&quot; section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;;When installing a package used in the init file itself,
;;e.g. a package which adds a use-package key word,
;;use the :wait recipe keyword to block until that package is installed/configured.
;;For example:
;;(use-package general :ensure (:wait t) :demand t)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil :ensure t :demand t)

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause evaluate the declaration immediately. It is not deferred.
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #&#39;ignore))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;:&lt;/p&gt; 
&lt;p&gt;Elpaca installs and activates packages asynchronously. Elpaca processes its package queues &lt;em&gt;after&lt;/em&gt; Emacs reads the init file.&lt;sup&gt;&lt;a id=&quot;fnr.-0-3&quot; class=&quot;footref&quot; href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/#fn.-0-3&quot; role=&quot;doc-backlink&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Consider the following example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(elpaca package-a (message &quot;First&quot;)) ; Queue First
(message &quot;Second&quot;) ; Second messaged
(elpaca package-b (message &quot;Third&quot;)) ; Queue Third
(elpaca-process-queues) ; Process queue: First messaged, Third messaged.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&quot;Second&quot; will be message &lt;em&gt;before&lt;/em&gt; &quot;First&quot; and &quot;Third&quot;. If a form should be evaluated after a package is installed/activated, put it in that package declaration&#39;s &lt;em&gt;BODY&lt;/em&gt;. Declaration &lt;em&gt;BODY&lt;/em&gt; forms are evaluated synchronously in declared order. e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(elpaca package-a (message &quot;First&quot;) (message &quot;Second&quot;))  ; Queue First, Second
(elpaca package-b (message &quot;Third&quot;))  ; Queue Third
(elpaca-process-queues) ; Process queue: First, Second, then Third messaged.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add configuration which relies on &lt;code&gt;after-init-hook&lt;/code&gt;, &lt;code&gt;emacs-startup-hook&lt;/code&gt;, etc to &lt;code&gt;elpaca-after-init-hook&lt;/code&gt; so it runs after Elpaca has activated all queued packages. This includes loading of saved customizations. e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq custom-file (expand-file-name &quot;customs.el&quot; user-emacs-directory))
(add-hook &#39;elpaca-after-init-hook (lambda () (load custom-file &#39;noerror)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Footnotes&lt;/h2&gt; 
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;a href=&quot;https://www.howtogeek.com/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/&quot;&gt;windows symlink guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; class=&quot;footnum&quot; href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html&quot;&gt;early-init file&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.3&quot; class=&quot;footnum&quot; href=&quot;https://raw.githubusercontent.com/progfolio/elpaca/master/#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; This is so Elpaca can build a proper dependency tree. It ensures packages the user explicitly requests are not preempted by dependencies of other packages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>magit/magit</title>
      <link>https://github.com/magit/magit</link>
      <description>&lt;p&gt;It&#39;s Magit! A Git Porcelain inside Emacs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;https://magit.vc/assets/magit-168x200px.png&quot;&gt;
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;A Git Porcelain inside Emacs&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://magit.vc&quot;&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://magit.vc/manual&quot;&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://magit.vc/manual/magit/FAQ.html&quot;&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/magit/magit/wiki&quot;&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://emacs.ch/@tarsius&quot;&gt;&lt;b&gt;mastodon&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;justify&quot;&gt; Magit is an interface to the version control system &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt;, implemented as an &lt;a href=&quot;https://www.gnu.org/software/emacs&quot;&gt;Emacs&lt;/a&gt; package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. &lt;/p&gt; 
&lt;hr&gt; 
&lt;div align=&quot;center&quot;&gt;
  Keeping its users 
 &lt;a href=&quot;https://magit.vc/quotes/&quot;&gt;this excited&lt;/a&gt; is 
 &lt;a href=&quot;https://magit.vc/stats/magit/authors.html#cumulated_added_lines_of_code_per_author&quot;&gt; a lot of work &lt;/a&gt;. If Magit makes you 
 &lt;br&gt; more productive too, then 
 &lt;b&gt;please consider making a donation&lt;/b&gt;. 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/sponsors/tarsius/&quot;&gt; &lt;img title=&quot;Sponsor my work using Github Sponsors&quot; alt=&quot;Sponsor my work using Github Sponsors&quot; src=&quot;https://magit.vc/assets/donate/github-sponsors-50px.png&quot;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; 
 &lt;a href=&quot;https://liberapay.com/magit/&quot;&gt; &lt;img title=&quot;Sponsor my work using Liberapay&quot; alt=&quot;Sponsor my work using Liberapay&quot; src=&quot;https://magit.vc/assets/donate/liberapay-50px.png&quot;&gt;&lt;/a&gt; 
 &lt;br&gt; 
 &lt;a href=&quot;https://opencollective.com/magit/&quot;&gt; &lt;img title=&quot;Sponsor my work using Opencollective&quot; alt=&quot;Sponsor my work using Opencollective&quot; src=&quot;https://magit.vc/assets/donate/opencollective-50px.png&quot;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; 
 &lt;a href=&quot;https://magit.vc/donate/paypal.html&quot;&gt; &lt;img title=&quot;Sponsor my work using PayPal&quot; alt=&quot;Sponsor my work using PayPal&quot; src=&quot;https://magit.vc/assets/donate/paypal-50px.png&quot;&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align=&quot;center&quot;&gt;
  Some alternative donation methods are 
 &lt;a href=&quot;https://magit.vc/donate/&quot;&gt;available&lt;/a&gt;. 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;If you are new to Magit, then either one of the following two articles should help understanding how it differs from other Git clients.&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://emacsair.me/2017/09/01/magit-walk-through&quot;&gt;Visual Magit walk-through&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;If you are completely new to Magit, then this article is a good visual introduction.&lt;/p&gt; 
&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing some key, but that&#39;s not obvious from just seeing how Magit looks. The screenshots and accompanying text of this article explain how to perform a variety of actions on Magit&#39;s output.&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://emacsair.me/2017/09/01/the-magical-git-interface&quot;&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Magit differs significantly from other Git interfaces, and its advantages are not immediately obvious simply from looking at a few screenshots as presented in the preceding article.&lt;/p&gt; 
&lt;p&gt;This article discusses Magit&#39;s properties in somewhat more abstract terms.&lt;/p&gt; 
&lt;h4&gt;Video introductions&lt;/h4&gt; 
&lt;p&gt;If you prefer &lt;a href=&quot;https://magit.vc/screencasts/&quot;&gt;video&lt;/a&gt; introductions, head over to that page, where find a collection of such introductions and other videos about Magit, by various creators.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Support and Contributing&lt;/h3&gt; 
&lt;p&gt;Magit has many users and very few maintainers, so we kindly ask to read the appropriate guidelines before getting in contact. — Thanks!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🆘 &lt;a href=&quot;https://github.com/magit/magit/discussions/4630&quot;&gt;How to ask for help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🪳 &lt;a href=&quot;https://github.com/magit/magit/wiki/How-to-report-a-bug&quot;&gt;How to report a bug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💡 &lt;a href=&quot;https://github.com/magit/magit/discussions/4631&quot;&gt;How to suggest a feature&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🏗️ &lt;a href=&quot;https://github.com/magit/magit/wiki/Pull-request-guidelines&quot;&gt;Pull request guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ℹ️ &lt;a href=&quot;https://magit.vc/manual/magit/FAQ.html&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ℹ️ &lt;a href=&quot;https://magit.vc/manual/magit&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;TL;DR We now use discussions for feature requests (not issues) and prefer if you ask the community for support instead of the overworked maintainers.&lt;/p&gt; 
&lt;p&gt;Please also consider to contribute by supporting other users or by making a &lt;a href=&quot;https://magit.vc/donate&quot;&gt;monetary donation&lt;/a&gt;. — Thanks!&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Acknowledgments&lt;/h3&gt; 
&lt;p&gt;Magit was started by &lt;a href=&quot;https://github.com/mvollmer&quot;&gt;Marius Vollmer&lt;/a&gt;, and is now maintained by &lt;a href=&quot;https://emacsair.me&quot;&gt;Jonas Bernoulli&lt;/a&gt; and &lt;a href=&quot;https://kyleam.com&quot;&gt;Kyle Meyer&lt;/a&gt;. Former maintainers are &lt;a href=&quot;http://dudebout.com&quot;&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href=&quot;https://github.com/npostavs&quot;&gt;Noam Postavsky&lt;/a&gt;, &lt;a href=&quot;https://github.com/pjweisberg&quot;&gt;Peter J. Weisberg&lt;/a&gt;, &lt;a href=&quot;https://github.com/philjackson&quot;&gt;Phil Jackson&lt;/a&gt;, &lt;a href=&quot;https://github.com/vanicat&quot;&gt;Rémi Vanicat&lt;/a&gt; and &lt;a href=&quot;https://yann.hodique.info&quot;&gt;Yann Hodique&lt;/a&gt;. Many more people have &lt;a href=&quot;https://magit.vc/stats/magit/authors.html&quot;&gt;contributed code&lt;/a&gt;, suggested features or made monetary contributions.&lt;/p&gt; 
&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/magit/magit/actions/workflows/compile.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/compile.yml/badge.svg?sanitize=true&quot; alt=&quot;Compile&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/magit/magit/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/magit/magit/actions/workflows/manual.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/manual.yml/badge.svg?sanitize=true&quot; alt=&quot;Manual&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.nongnu.org/nongnu/magit.html&quot;&gt;&lt;img src=&quot;https://emacsair.me/assets/badges/nongnu-elpa.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/magit&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/magit-badge.svg?sanitize=true&quot; alt=&quot;Melpa&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/magit&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/magit-badge.svg?sanitize=true&quot; alt=&quot;Melpa Stable&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
