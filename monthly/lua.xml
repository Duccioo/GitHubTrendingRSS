<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Monthly Trending</title>
    <description>Monthly Trending of Lua in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 02:03:26 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>williamboman/mason.nvim</title>
      <link>https://github.com/williamboman/mason.nvim</link>
      <description>&lt;p&gt;Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Linux-%23.svg?logo=linux&amp;amp;color=FCC624&amp;amp;logoColor=black&quot; alt=&quot;Linux&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/macOS-%23.svg?logo=apple&amp;amp;color=000000&amp;amp;logoColor=white&quot; alt=&quot;macOS&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Windows-%23.svg?logo=windows&amp;amp;color=0078D6&amp;amp;logoColor=white&quot; alt=&quot;Windows&quot;&gt; &lt;a href=&quot;https://github.com/williamboman/mason.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/williamboman/mason.nvim/workflows/Tests/badge.svg?sanitize=true&quot; alt=&quot;GitHub CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/williamboman&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/williamboman&quot; alt=&quot;Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/6705160/177613416-0c0354d2-f431-40d8-87f0-21310f0bba0e.png&quot; alt=&quot;mason.nvim&quot;&gt; 
&lt;p align=&quot;center&quot;&gt; Portable package manager for Neovim that runs everywhere Neovim runs.&lt;br&gt; Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;br&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;sup&gt;Latest version: v1.11.0&lt;/sup&gt; 
 &lt;!-- x-release-please-version --&gt; &lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#introduction&quot;&gt;Introduction&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#how-to-use-installed-packages&quot;&gt;How to use installed packages&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#screenshots&quot;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#setup&quot;&gt;Setup&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#commands&quot;&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#registries&quot;&gt;Registries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L11&quot;&gt;&lt;code&gt;:h mason-introduction&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is a Neovim plugin that allows you to easily manage external editor tooling such as LSP servers, DAP servers, linters, and formatters through a single interface. It runs everywhere Neovim runs (across Linux, macOS, Windows, etc.), with only a small set of &lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#requirements&quot;&gt;external requirements&lt;/a&gt; needed.&lt;/p&gt; 
&lt;p&gt;Packages are installed in Neovim&#39;s data directory (&lt;a href=&quot;https://neovim.io/doc/user/starting.html#standard-path&quot;&gt;&lt;code&gt;:h standard-path&lt;/code&gt;&lt;/a&gt;) by default. Executables are linked to a single &lt;code&gt;bin/&lt;/code&gt; directory, which &lt;code&gt;mason.nvim&lt;/code&gt; will add to Neovim&#39;s PATH during setup, allowing seamless access from Neovim builtins (shell, terminal, etc.) as well as other 3rd party plugins.&lt;/p&gt; 
&lt;p&gt;For a list of all available packages, see &lt;a href=&quot;https://mason-registry.dev/registry/list&quot;&gt;https://mason-registry.dev/registry/list&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;How to use installed packages&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L153&quot;&gt;&lt;code&gt;:h mason-how-to-use-packages&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Although many packages are perfectly usable out of the box through Neovim builtins, it is recommended to use other 3rd party plugins to further integrate these. The following plugins are recommended:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;LSP: &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/williamboman/mason-lspconfig.nvim&quot;&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;DAP: &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;&lt;code&gt;nvim-dap-ui&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Linters: &lt;a href=&quot;https://github.com/jose-elias-alvarez/null-ls.nvim&quot;&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/mfussenegger/nvim-lint&quot;&gt;&lt;code&gt;nvim-lint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Formatters: &lt;a href=&quot;https://github.com/jose-elias-alvarez/null-ls.nvim&quot;&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/mhartington/formatter.nvim&quot;&gt;&lt;code&gt;formatter.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Main window&quot; src=&quot;https://user-images.githubusercontent.com/6705160/177617680-d62caf26-f253-4ace-ab57-4b590595adca.png&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/6705160/177617684-6bb4c13f-1235-4ac9-829e-120b06f7437b.png&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Language filter&quot; src=&quot;https://user-images.githubusercontent.com/6705160/177617688-8f9ba225-00c8-495c-9c4c-b74240d6f280.png&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;LSP server configuration schema&quot; src=&quot;https://user-images.githubusercontent.com/6705160/177617692-02c6ddde-a97e-42b4-bca4-4f4caf45d569.png&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Checking for new versions&quot; src=&quot;https://user-images.githubusercontent.com/6705160/180648183-69077d10-8795-4da6-ba4d-57ecf0cb25c9.png&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Help window&quot; src=&quot;https://user-images.githubusercontent.com/6705160/180648292-136a0888-0fb6-4226-aa29-53bd3ffed400.png&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Requirements&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L50&quot;&gt;&lt;code&gt;:h mason-requirements&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; relaxes the minimum requirements by attempting multiple different utilities (for example, &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; are all perfect substitutes). The &lt;em&gt;minimum&lt;/em&gt; recommended requirements are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For Unix systems: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;curl(1)&lt;/code&gt; or &lt;code&gt;wget(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;unzip(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;GNU tar (&lt;code&gt;tar(1)&lt;/code&gt; or &lt;code&gt;gtar(1)&lt;/code&gt; depending on platform)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;gzip(1)&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;For Windows systems: 
  &lt;ul&gt; 
   &lt;li&gt;pwsh or powershell&lt;/li&gt; 
   &lt;li&gt;git&lt;/li&gt; 
   &lt;li&gt;GNU tar&lt;/li&gt; 
   &lt;li&gt;One of the following: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.7-zip.org/&quot;&gt;7zip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://peazip.github.io/&quot;&gt;peazip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/mholt/archiver&quot;&gt;archiver&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.winzip.com/&quot;&gt;winzip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.win-rar.com/&quot;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that &lt;code&gt;mason.nvim&lt;/code&gt; will regularly shell out to external package managers, such as &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;. Depending on your personal usage, some of these will also need to be installed. Refer to &lt;code&gt;:checkhealth mason&lt;/code&gt; for a full list.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;Packer&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
    &quot;williamboman/mason.nvim&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;williamboman/mason.nvim&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;williamboman/mason.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Setup&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L67&quot;&gt;&lt;code&gt;:h mason-quickstart&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is optimized to load as little as possible during setup. Lazy-loading the plugin, or somehow deferring the setup, is not recommended.&lt;/p&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; 
&lt;h2&gt;Extensions&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/williamboman/mason.nvim/wiki/Extensions&quot;&gt;Wiki&lt;/a&gt; for a list of 3rd party extensions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/williamboman/mason-lspconfig.nvim&quot;&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt;&lt;/a&gt; - recommended for usage with &lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Commands&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L178&quot;&gt;&lt;code&gt;:h mason-commands&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:Mason&lt;/code&gt; - opens a graphical status window&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUpdate&lt;/code&gt; - updates all managed registries&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonInstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - installs/re-installs the provided packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUninstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - uninstalls the provided packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUninstallAll&lt;/code&gt; - uninstalls all packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonLog&lt;/code&gt; - opens the &lt;code&gt;mason.nvim&lt;/code&gt; log file in a new tab window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Registries&lt;/h1&gt; 
&lt;p&gt;Mason&#39;s core package registry is located at &lt;a href=&quot;https://github.com/mason-org/mason-registry&quot;&gt;mason-org/mason-registry&lt;/a&gt;. Before any packages can be used, the registry needs to be downloaded. This is done automatically for you when using the different Mason commands (e.g. &lt;code&gt;:MasonInstall&lt;/code&gt;), but can also be done manually by using the &lt;code&gt;:MasonUpdate&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;If you&#39;re utilizing Mason&#39;s Lua APIs to access packages, it&#39;s recommended to use the &lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L549&quot;&gt;&lt;code&gt;:h mason-registry.refresh()&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L542&quot;&gt;&lt;code&gt;:h mason-registry.update()&lt;/code&gt;&lt;/a&gt; functions to ensure you have the latest package information before retrieving packages.&lt;/p&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt#L238&quot;&gt;&lt;code&gt;:h mason-settings&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#default-configuration&quot;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason&quot;).setup({
    ui = {
        icons = {
            package_installed = &quot;✓&quot;,
            package_pending = &quot;➜&quot;,
            package_uninstalled = &quot;✗&quot;
        }
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Default configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class MasonSettings
local DEFAULT_SETTINGS = {
    ---@since 1.0.0
    -- The directory in which to install packages.
    install_root_dir = path.concat { vim.fn.stdpath &quot;data&quot;, &quot;mason&quot; },

    ---@since 1.0.0
    -- Where Mason should put its bin location in your PATH. Can be one of:
    -- - &quot;prepend&quot; (default, Mason&#39;s bin location is put first in PATH)
    -- - &quot;append&quot; (Mason&#39;s bin location is put at the end of PATH)
    -- - &quot;skip&quot; (doesn&#39;t modify PATH)
    ---@type &#39;&quot;prepend&quot;&#39; | &#39;&quot;append&quot;&#39; | &#39;&quot;skip&quot;&#39;
    PATH = &quot;prepend&quot;,

    ---@since 1.0.0
    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when
    -- debugging issues with package installations.
    log_level = vim.log.levels.INFO,

    ---@since 1.0.0
    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further
    -- packages that are requested to be installed will be put in a queue.
    max_concurrent_installers = 4,

    ---@since 1.0.0
    -- [Advanced setting]
    -- The registries to source packages from. Accepts multiple entries. Should a package with the same name exist in
    -- multiple registries, the registry listed first will be used.
    registries = {
        &quot;github:mason-org/mason-registry&quot;,
    },

    ---@since 1.0.0
    -- The provider implementations to use for resolving supplementary package metadata (e.g., all available versions).
    -- Accepts multiple entries, where later entries will be used as fallback should prior providers fail.
    -- Builtin providers are:
    --   - mason.providers.registry-api  - uses the https://api.mason-registry.dev API
    --   - mason.providers.client        - uses only client-side tooling to resolve metadata
    providers = {
        &quot;mason.providers.registry-api&quot;,
        &quot;mason.providers.client&quot;,
    },

    github = {
        ---@since 1.0.0
        -- The template URL to use when downloading assets from GitHub.
        -- The placeholders are the following (in order):
        -- 1. The repository (e.g. &quot;rust-lang/rust-analyzer&quot;)
        -- 2. The release version (e.g. &quot;v0.3.0&quot;)
        -- 3. The asset name (e.g. &quot;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&quot;)
        download_url_template = &quot;https://github.com/%s/releases/download/%s/%s&quot;,
    },

    pip = {
        ---@since 1.0.0
        -- Whether to upgrade pip to the latest version in the virtual environment before installing packages.
        upgrade_pip = false,

        ---@since 1.0.0
        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior
        -- and is not recommended.
        --
        -- Example: { &quot;--proxy&quot;, &quot;https://proxyserver&quot; }
        install_args = {},
    },

    ui = {
        ---@since 1.0.0
        -- Whether to automatically check for new versions when opening the :Mason window.
        check_outdated_packages_on_open = true,

        ---@since 1.0.0
        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.
        border = &quot;none&quot;,

        ---@since 1.11.0
        -- The backdrop opacity. 0 is fully opaque, 100 is fully transparent.
        backdrop = 60,

        ---@since 1.0.0
        -- Width of the window. Accepts:
        -- - Integer greater than 1 for fixed width.
        -- - Float in the range of 0-1 for a percentage of screen width.
        width = 0.8,

        ---@since 1.0.0
        -- Height of the window. Accepts:
        -- - Integer greater than 1 for fixed height.
        -- - Float in the range of 0-1 for a percentage of screen height.
        height = 0.9,

        icons = {
            ---@since 1.0.0
            -- The list icon to use for installed packages.
            package_installed = &quot;◍&quot;,
            ---@since 1.0.0
            -- The list icon to use for packages that are installing, or queued for installation.
            package_pending = &quot;◍&quot;,
            ---@since 1.0.0
            -- The list icon to use for packages that are not installed.
            package_uninstalled = &quot;◍&quot;,
        },

        keymaps = {
            ---@since 1.0.0
            -- Keymap to expand a package
            toggle_package_expand = &quot;&amp;lt;CR&amp;gt;&quot;,
            ---@since 1.0.0
            -- Keymap to install the package under the current cursor position
            install_package = &quot;i&quot;,
            ---@since 1.0.0
            -- Keymap to reinstall/update the package under the current cursor position
            update_package = &quot;u&quot;,
            ---@since 1.0.0
            -- Keymap to check for new version for the package under the current cursor position
            check_package_version = &quot;c&quot;,
            ---@since 1.0.0
            -- Keymap to update all installed packages
            update_all_packages = &quot;U&quot;,
            ---@since 1.0.0
            -- Keymap to check which installed packages are outdated
            check_outdated_packages = &quot;C&quot;,
            ---@since 1.0.0
            -- Keymap to uninstall a package
            uninstall_package = &quot;X&quot;,
            ---@since 1.0.0
            -- Keymap to cancel a package installation
            cancel_installation = &quot;&amp;lt;C-c&amp;gt;&quot;,
            ---@since 1.0.0
            -- Keymap to apply language filter
            apply_language_filter = &quot;&amp;lt;C-f&amp;gt;&quot;,
            ---@since 1.1.0
            -- Keymap to toggle viewing package installation log
            toggle_package_install_log = &quot;&amp;lt;CR&amp;gt;&quot;,
            ---@since 1.8.0
            -- Keymap to toggle the help view
            toggle_help = &quot;g?&quot;,
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;sup&gt; 👋 didn&#39;t find what you were looking for? Try looking in the &lt;a href=&quot;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt&quot;&gt;help docs&lt;/a&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt;! &lt;/sup&gt;</description>
    </item>
    
    <item>
      <title>CopilotC-Nvim/CopilotChat.nvim</title>
      <link>https://github.com/CopilotC-Nvim/CopilotChat.nvim</link>
      <description>&lt;p&gt;Chat with GitHub Copilot in Neovim&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Copilot Chat for Neovim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/CopilotC-Nvim/CopilotChat.nvim?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/CopilotC-Nvim/CopilotChat.nvim/ci.yml?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://copilotc-nvim.github.io/CopilotChat.nvim/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-up-green.svg?logo=vim&amp;amp;style=for-the-badge&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/#contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/all-contributors/CopilotC-Nvim/CopilotChat.nvim?color=ee8449&amp;amp;logo=github&amp;amp;label=contributors&amp;amp;style=for-the-badge&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/vy6hJsTWaZ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1200633211236122665?logo=discord&amp;amp;label=discord&amp;amp;style=for-the-badge&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim/shield?style=for-the-badge&quot; alt=&quot;Dotfyle&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/9ee30811-0fb8-4500-91f6-34ea6b26adea&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&quot;&gt;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;CopilotChat.nvim is a Neovim plugin that brings GitHub Copilot Chat capabilities directly into your editor. It provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🤖 GitHub Copilot Chat integration with official model and agent support (GPT-4o, Claude 3.7 Sonnet, Gemini 2.0 Flash, and more)&lt;/li&gt; 
 &lt;li&gt;💻 Rich workspace context powered by smart embeddings system&lt;/li&gt; 
 &lt;li&gt;🔒 Explicit context sharing - only sends what you specifically request, either as context or selection&lt;/li&gt; 
 &lt;li&gt;🔌 Modular provider architecture supporting both official and custom LLM backends (Ollama, LM Studio, Mistral.ai and more)&lt;/li&gt; 
 &lt;li&gt;📝 Interactive chat UI with completion, diffs and quickfix integration&lt;/li&gt; 
 &lt;li&gt;🎯 Powerful prompt system with composable templates and sticky prompts&lt;/li&gt; 
 &lt;li&gt;🔄 Extensible context providers for granular workspace understanding (buffers, files, git diffs, URLs, and more)&lt;/li&gt; 
 &lt;li&gt;⚡ Efficient token usage with tiktoken optimization&lt;/li&gt; 
 &lt;li&gt;📜 Intelligent chat memory management with automatic summarization to handle lengthy conversations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Requirements&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim 0.10.0+&lt;/a&gt; - Older versions are not officially supported&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;curl&lt;/a&gt; - Version 8.0.0+ recommended for best compatibility&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/settings/copilot&quot;&gt;Copilot chat in the IDE&lt;/a&gt; enabled in GitHub settings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] For Neovim &amp;lt; 0.11.0, add &lt;code&gt;noinsert&lt;/code&gt; or &lt;code&gt;noselect&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; otherwise chat autocompletion will not work. For best autocompletion experience, also add &lt;code&gt;popup&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; (even on Neovim 0.11.0+).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Optional Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gptlang/lua-tiktoken&quot;&gt;tiktoken_core&lt;/a&gt; - For accurate token counting&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Arch Linux: Install &lt;a href=&quot;https://aur.archlinux.org/packages/luajit-tiktoken-bin&quot;&gt;&lt;code&gt;luajit-tiktoken-bin&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://aur.archlinux.org/packages/lua51-tiktoken-bin&quot;&gt;&lt;code&gt;lua51-tiktoken-bin&lt;/code&gt;&lt;/a&gt; from AUR&lt;/li&gt; 
   &lt;li&gt;Via luarocks: &lt;code&gt;sudo luarocks install --lua-version 5.1 tiktoken_core&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Manual: Download from &lt;a href=&quot;https://github.com/gptlang/lua-tiktoken/releases&quot;&gt;lua-tiktoken releases&lt;/a&gt; and save as &lt;code&gt;tiktoken_core.so&lt;/code&gt; in your Lua path&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; - For git diff context features&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; - For improved search performance&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://lynx.invisible-island.net/&quot;&gt;lynx&lt;/a&gt; - For improved URL context features&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integration with pickers&lt;/h2&gt; 
&lt;p&gt;For various plugin pickers to work correctly, you need to replace &lt;code&gt;vim.ui.select&lt;/code&gt; with your desired picker (as the default &lt;code&gt;vim.ui.select&lt;/code&gt; is very basic). Here are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua?tab=readme-ov-file#neovim-api&quot;&gt;fzf-lua&lt;/a&gt; - call &lt;code&gt;require(&#39;fzf-lua&#39;).register_ui_select()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope-ui-select.nvim?tab=readme-ov-file#telescope-setup-and-configuration&quot;&gt;telescope&lt;/a&gt; - setup &lt;code&gt;telescope-ui-select.nvim&lt;/code&gt; plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md#%EF%B8%8F-config&quot;&gt;snacks.picker&lt;/a&gt; - enable &lt;code&gt;ui_select&lt;/code&gt; config&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick/raw/main/lua/mini/pick.lua#L1229&quot;&gt;mini.pick&lt;/a&gt; - set &lt;code&gt;vim.ui.select = require(&#39;mini.pick&#39;).ui_select&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Plugin features that use picker:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt; - for selecting prompts&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt; - for selecting models&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatAgents&lt;/code&gt; - for selecting agents&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;#&amp;lt;context&amp;gt;:&amp;lt;input&amp;gt;&lt;/code&gt; - for selecting context input&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;CopilotC-Nvim/CopilotChat.nvim&quot;,
    dependencies = {
      { &quot;github/copilot.vim&quot; }, -- or zbirenbaum/copilot.lua
      { &quot;nvim-lua/plenary.nvim&quot;, branch = &quot;master&quot; }, -- for curl, log and async functions
    },
    build = &quot;make tiktoken&quot;, -- Only on MacOS or Linux
    opts = {
      -- See Configuration section for options
    },
    -- See Commands section for default commands if you want to lazy load on them
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/jellydn&quot;&gt;@jellydn&lt;/a&gt; for &lt;a href=&quot;https://github.com/jellydn/lazy-nvim-ide/raw/main/lua/plugins/extras/copilot-chat-v2.lua&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Similar to the lazy setup, you can use the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call plug#begin()
Plug &#39;github/copilot.vim&#39;
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;CopilotC-Nvim/CopilotChat.nvim&#39;
call plug#end()

lua &amp;lt;&amp;lt; EOF
require(&quot;CopilotChat&quot;).setup {
  -- See Configuration section for options
}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Put the files in the right place&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;mkdir -p ~/.config/nvim/pack/copilotchat/start
cd ~/.config/nvim/pack/copilotchat/start

git clone https://github.com/github/copilot.vim
git clone https://github.com/nvim-lua/plenary.nvim

git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Add to your configuration (e.g. &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;CopilotChat&quot;).setup {
  -- See Configuration section for options
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/deathbeam&quot;&gt;@deathbeam&lt;/a&gt; for &lt;a href=&quot;https://github.com/deathbeam/dotfiles/raw/master/nvim/.config/nvim/lua/config/copilot.lua&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;Commands are used to control the chat interface:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat &amp;lt;input&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat with optional input&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatOpen&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatClose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatStop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stop current output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatSave &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Save chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatLoad &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select prompt templates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatAgents&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available agents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use specific prompt template&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Key Mappings&lt;/h2&gt; 
&lt;p&gt;Default mappings in the chat interface:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Insert&lt;/th&gt; 
   &lt;th&gt;Normal&lt;/th&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Trigger/accept completion menu for tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset and clear the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Submit the current prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grr&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle sticky prompt for line under cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grx&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear all sticky prompts in prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Accept nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gj&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Jump to section of nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqa&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all answers from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all diffs from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yank nearest diff to register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show diff between source and nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gi&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show info about current chat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show current chat context&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show help message&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The mappings can be customized by setting the &lt;code&gt;mappings&lt;/code&gt; table in your configuration. Each mapping can have:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;normal&lt;/code&gt;: Key for normal mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;insert&lt;/code&gt;: Key for insert mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to change the submit prompt mapping or show_diff full diff option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    mappings = {
      submit_prompt = {
        normal = &#39;&amp;lt;Leader&amp;gt;s&#39;,
        insert = &#39;&amp;lt;C-s&amp;gt;&#39;
      }
      show_diff = {
        full_diff = true
      }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Prompts&lt;/h2&gt; 
&lt;h3&gt;Predefined Prompts&lt;/h3&gt; 
&lt;p&gt;Predefined prompt templates for common tasks. Reference them with &lt;code&gt;/PromptName&lt;/code&gt; in chat, use &lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt; or &lt;code&gt;:CopilotChatPrompts&lt;/code&gt; to select them:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Explain&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write an explanation for the selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Review&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Review the selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Fix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Rewrite the code with bug fixes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Optimize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Optimize code for performance and readability&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Docs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add documentation comments to the code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Tests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generate tests for the code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Commit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write commit message using commitizen convention&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Define your own prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    MyCustomPrompt = {
      prompt = &#39;Explain how it works.&#39;,
      system_prompt = &#39;You are very good at explaining stuff&#39;,
      mapping = &#39;&amp;lt;leader&amp;gt;ccmc&#39;,
      description = &#39;My custom prompt description&#39;,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;System Prompts&lt;/h3&gt; 
&lt;p&gt;System prompts define the AI model&#39;s behavior. Reference them with &lt;code&gt;/PROMPT_NAME&lt;/code&gt; in chat:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_BASE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;All prompts should be built on top of this&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_INSTRUCTIONS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Base instructions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_EXPLAIN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds coding tutor behavior&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_REVIEW&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds code review behavior with diagnostics&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Define your own system prompts in the configuration (similar to &lt;code&gt;prompts&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    Yarrr = {
      system_prompt = &#39;You are fascinated by pirates, so please respond in pirate speak.&#39;,
    },
    NiceInstructions = {
      system_prompt = &#39;You are a nice coding tutor, so please respond in a friendly and helpful manner.&#39; .. require(&#39;CopilotChat.config.prompts&#39;).COPILOT_BASE.system_prompt,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sticky Prompts&lt;/h3&gt; 
&lt;p&gt;Sticky prompts persist across chat sessions. They&#39;re useful for maintaining context or agent selection. They work as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Prefix text with &lt;code&gt;&amp;gt; &lt;/code&gt; using markdown blockquote syntax&lt;/li&gt; 
 &lt;li&gt;The prompt will be copied at the start of every new chat prompt&lt;/li&gt; 
 &lt;li&gt;Edit sticky prompts freely while maintaining the &lt;code&gt;&amp;gt; &lt;/code&gt; prefix&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; #files
&amp;gt; List all files in the workspace

&amp;gt; @models Using Mistral-small
&amp;gt; What is 1 + 11
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also set default sticky prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  sticky = {
    &#39;@models Using Mistral-small&#39;,
    &#39;#files&#39;,
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Models and Agents&lt;/h2&gt; 
&lt;h3&gt;Models&lt;/h3&gt; 
&lt;p&gt;You can control which AI model to use in three ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;List available models with &lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Set model in prompt with &lt;code&gt;$model_name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configure default model via &lt;code&gt;model&lt;/code&gt; config key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For supported models, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/copilot/using-github-copilot/ai-models/changing-the-ai-model-for-copilot-chat#ai-models-for-copilot-chat&quot;&gt;Copilot Chat Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marketplace/models&quot;&gt;GitHub Marketplace Models&lt;/a&gt; (experimental, limited usage)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Agents&lt;/h3&gt; 
&lt;p&gt;Agents determine the AI assistant&#39;s capabilities. Control agents in three ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;List available agents with &lt;code&gt;:CopilotChatAgents&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Set agent in prompt with &lt;code&gt;@agent_name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configure default agent via &lt;code&gt;agent&lt;/code&gt; config key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The default &quot;noop&quot; agent is &lt;code&gt;none&lt;/code&gt;. For more information:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/copilot/using-github-copilot/using-extensions-to-integrate-external-tools-with-copilot-chat&quot;&gt;Extension Agents Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marketplace?type=apps&amp;amp;copilot_app=true&quot;&gt;Available Agents&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contexts&lt;/h2&gt; 
&lt;p&gt;Contexts provide additional information to the chat. Add context using &lt;code&gt;#context_name[:input]&lt;/code&gt; syntax:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Context&lt;/th&gt; 
   &lt;th&gt;Input Support&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (number)&lt;/td&gt; 
   &lt;td&gt;Current or specified buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (type)&lt;/td&gt; 
   &lt;td&gt;All buffers content (listed/all)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (path)&lt;/td&gt; 
   &lt;td&gt;Content of specified file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (glob)&lt;/td&gt; 
   &lt;td&gt;Workspace files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;filenames&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (glob)&lt;/td&gt; 
   &lt;td&gt;Workspace file names&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;git&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (ref)&lt;/td&gt; 
   &lt;td&gt;Git diff (unstaged/staged/commit)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (url)&lt;/td&gt; 
   &lt;td&gt;Content from URL&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;register&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (name)&lt;/td&gt; 
   &lt;td&gt;Content of vim register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Quickfix list file contents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (command)&lt;/td&gt; 
   &lt;td&gt;Output of shell command&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] The AI is aware of these context providers and may request additional context if needed by asking you to input a specific context command like &lt;code&gt;#file:path/to/file.js&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; #buffer
&amp;gt; #buffer:2
&amp;gt; #files:\*.lua
&amp;gt; #filenames
&amp;gt; #git:staged
&amp;gt; #url:https://example.com
&amp;gt; #system:`ls -la | grep lua`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Define your own contexts in the configuration with input handling and resolution:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  contexts = {
    birthday = {
      input = function(callback)
        vim.ui.select({ &#39;user&#39;, &#39;napoleon&#39; }, {
          prompt = &#39;Select birthday&amp;gt; &#39;,
        }, callback)
      end,
      resolve = function(input)
        return {
          {
            content = input .. &#39; birthday info&#39;,
            filename = input .. &#39;_birthday&#39;,
            filetype = &#39;text&#39;,
          }
        }
      end
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Contexts&lt;/h3&gt; 
&lt;p&gt;For external contexts, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/contexts&quot;&gt;contexts discussion page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Selections&lt;/h2&gt; 
&lt;p&gt;Selections determine the source content for chat interactions.&lt;/p&gt; 
&lt;p&gt;Available selections are located in &lt;code&gt;local select = require(&quot;CopilotChat.select&quot;)&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Selection&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;visual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current visual selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;line&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current line content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;unnamed&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Unnamed register (last deleted/changed/yanked content)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You can set a default selection in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Default uses visual selection or falls back to buffer
  selection = function(source)
    return select.visual(source) or select.buffer(source)
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Providers&lt;/h2&gt; 
&lt;p&gt;Providers are modules that implement integration with different AI providers.&lt;/p&gt; 
&lt;h3&gt;Built-in Providers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot&lt;/code&gt; - Default GitHub Copilot provider used for chat&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;github_models&lt;/code&gt; - Provider for GitHub Marketplace models&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;copilot_embeddings&lt;/code&gt; - Provider for Copilot embeddings, not standalone&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Provider Interface&lt;/h3&gt; 
&lt;p&gt;Custom providers can implement these methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Optional: Disable provider
  disabled?: boolean,

  -- Optional: Embeddings provider name or function
  embed?: string|function,

  -- Optional: Get extra request headers with optional expiration time
  get_headers?(): table&amp;lt;string,string&amp;gt;, number?,

  -- Optional: Get API endpoint URL
  get_url?(opts: CopilotChat.Provider.options): string,

  -- Optional: Prepare request input
  prepare_input?(inputs: table&amp;lt;CopilotChat.Provider.input&amp;gt;, opts: CopilotChat.Provider.options): table,

  -- Optional: Prepare response output
  prepare_output?(output: table, opts: CopilotChat.Provider.options): CopilotChat.Provider.output,

  -- Optional: Get available models
  get_models?(headers: table): table&amp;lt;CopilotChat.Provider.model&amp;gt;,

  -- Optional: Get available agents
  get_agents?(headers: table): table&amp;lt;CopilotChat.Provider.agent&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Providers&lt;/h3&gt; 
&lt;p&gt;For external providers (Ollama, LM Studio, Mistral.ai), see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/providers&quot;&gt;providers discussion page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;h2&gt;Default Configuration&lt;/h2&gt; 
&lt;p&gt;Below are all available configuration options with their default values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{

  -- Shared config starts here (can be passed to functions at runtime and configured via setup function)

  system_prompt = &#39;COPILOT_INSTRUCTIONS&#39;, -- System prompt to use (can be specified manually in prompt via /).

  model = &#39;gpt-4o&#39;, -- Default model to use, see &#39;:CopilotChatModels&#39; for available models (can be specified manually in prompt via $).
  agent = &#39;copilot&#39;, -- Default agent to use, see &#39;:CopilotChatAgents&#39; for available agents (can be specified manually in prompt via @).
  context = nil, -- Default context or array of contexts to use (can be specified manually in prompt via #).
  sticky = nil, -- Default sticky prompt or array of sticky prompts to use at start of every new chat.

  temperature = 0.1, -- GPT result temperature
  headless = false, -- Do not write to chat buffer and use history (useful for using custom processing)
  stream = nil, -- Function called when receiving stream updates (returned string is appended to the chat buffer)
  callback = nil, -- Function called when full response is received (retuned string is stored to history)
  remember_as_sticky = true, -- Remember model/agent/context as sticky prompts when asking questions

  -- default selection
  -- see select.lua for implementation
  selection = function(source)
    return select.visual(source) or select.buffer(source)
  end,

  -- default window options
  window = {
    layout = &#39;vertical&#39;, -- &#39;vertical&#39;, &#39;horizontal&#39;, &#39;float&#39;, &#39;replace&#39;
    width = 0.5, -- fractional width of parent, or absolute width in columns when &amp;gt; 1
    height = 0.5, -- fractional height of parent, or absolute height in rows when &amp;gt; 1
    -- Options below only apply to floating windows
    relative = &#39;editor&#39;, -- &#39;editor&#39;, &#39;win&#39;, &#39;cursor&#39;, &#39;mouse&#39;
    border = &#39;single&#39;, -- &#39;none&#39;, single&#39;, &#39;double&#39;, &#39;rounded&#39;, &#39;solid&#39;, &#39;shadow&#39;
    row = nil, -- row position of the window, default is centered
    col = nil, -- column position of the window, default is centered
    title = &#39;Copilot Chat&#39;, -- title of chat window
    footer = nil, -- footer of chat window
    zindex = 1, -- determines if window is on top or below other floating windows
  },

  show_help = true, -- Shows help message as virtual lines when waiting for user input
  highlight_selection = true, -- Highlight selection
  highlight_headers = true, -- Highlight headers in chat, disable if using markdown renderers (like render-markdown.nvim)
  references_display = &#39;virtual&#39;, -- &#39;virtual&#39;, &#39;write&#39;, Display references in chat as virtual text or write to buffer
  auto_follow_cursor = true, -- Auto-follow cursor in chat
  auto_insert_mode = false, -- Automatically enter insert mode when opening window and on new prompt
  insert_at_end = false, -- Move cursor to end of buffer when inserting text
  clear_chat_on_new_prompt = false, -- Clears chat on every new prompt

  -- Static config starts here (can be configured only via setup function)

  debug = false, -- Enable debug logging (same as &#39;log_level = &#39;debug&#39;)
  log_level = &#39;info&#39;, -- Log level to use, &#39;trace&#39;, &#39;debug&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;error&#39;, &#39;fatal&#39;
  proxy = nil, -- [protocol://]host[:port] Use this proxy
  allow_insecure = false, -- Allow insecure server connections

  chat_autocomplete = true, -- Enable chat autocompletion (when disabled, requires manual `mappings.complete` trigger)

  log_path = vim.fn.stdpath(&#39;state&#39;) .. &#39;/CopilotChat.log&#39;, -- Default path to log file
  history_path = vim.fn.stdpath(&#39;data&#39;) .. &#39;/copilotchat_history&#39;, -- Default path to stored history

  question_header = &#39;# User &#39;, -- Header to use for user questions
  answer_header = &#39;# Copilot &#39;, -- Header to use for AI answers
  error_header = &#39;# Error &#39;, -- Header to use for errors
  separator = &#39;───&#39;, -- Separator to use in chat

  -- default providers
  -- see config/providers.lua for implementation
  providers = {
    copilot = {
    },
    github_models = {
    },
    copilot_embeddings = {
    },
  }

  -- default contexts
  -- see config/contexts.lua for implementation
  contexts = {
    buffer = {
    },
    buffers = {
    },
    file = {
    },
    files = {
    },
    git = {
    },
    url = {
    },
    register = {
    },
    quickfix = {
    },
    system = {
    }
  },

  -- default prompts
  -- see config/prompts.lua for implementation
  prompts = {
    Explain = {
      prompt = &#39;Write an explanation for the selected code as paragraphs of text.&#39;,
      system_prompt = &#39;COPILOT_EXPLAIN&#39;,
    },
    Review = {
      prompt = &#39;Review the selected code.&#39;,
      system_prompt = &#39;COPILOT_REVIEW&#39;,
    },
    Fix = {
      prompt = &#39;There is a problem in this code. Identify the issues and rewrite the code with fixes. Explain what was wrong and how your changes address the problems.&#39;,
    },
    Optimize = {
      prompt = &#39;Optimize the selected code to improve performance and readability. Explain your optimization strategy and the benefits of your changes.&#39;,
    },
    Docs = {
      prompt = &#39;Please add documentation comments to the selected code.&#39;,
    },
    Tests = {
      prompt = &#39;Please generate tests for my code.&#39;,
    },
    Commit = {
      prompt = &#39;Write commit message for the change with commitizen convention. Keep the title under 50 characters and wrap message at 72 characters. Format as a gitcommit code block.&#39;,
      context = &#39;git:staged&#39;,
    },
  },

  -- default mappings
  -- see config/mappings.lua for implementation
  mappings = {
    complete = {
      insert = &#39;&amp;lt;Tab&amp;gt;&#39;,
    },
    close = {
      normal = &#39;q&#39;,
      insert = &#39;&amp;lt;C-c&amp;gt;&#39;,
    },
    reset = {
      normal = &#39;&amp;lt;C-l&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-l&amp;gt;&#39;,
    },
    submit_prompt = {
      normal = &#39;&amp;lt;CR&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-s&amp;gt;&#39;,
    },
    toggle_sticky = {
      normal = &#39;grr&#39;,
    },
    clear_stickies = {
      normal = &#39;grx&#39;,
    },
    accept_diff = {
      normal = &#39;&amp;lt;C-y&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-y&amp;gt;&#39;,
    },
    jump_to_diff = {
      normal = &#39;gj&#39;,
    },
    quickfix_answers = {
      normal = &#39;gqa&#39;,
    },
    quickfix_diffs = {
      normal = &#39;gqd&#39;,
    },
    yank_diff = {
      normal = &#39;gy&#39;,
      register = &#39;&quot;&#39;, -- Default register to use for yanking
    },
    show_diff = {
      normal = &#39;gd&#39;,
      full_diff = false, -- Show full diff instead of unified diff when showing diff window
    },
    show_info = {
      normal = &#39;gi&#39;,
    },
    show_context = {
      normal = &#39;gc&#39;,
    },
    show_help = {
      normal = &#39;gh&#39;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customizing Buffers&lt;/h2&gt; 
&lt;p&gt;Types of copilot buffers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot-chat&lt;/code&gt; - Main chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;copilot-overlay&lt;/code&gt; - Overlay buffers (e.g. help, info, diff)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can set local options for plugin buffers like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;BufEnter&#39;, {
    pattern = &#39;copilot-*&#39;,
    callback = function()
        -- Set buffer-local options
        vim.opt_local.relativenumber = false
        vim.opt_local.number = false
        vim.opt_local.conceallevel = 0
    end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customizing Highlights&lt;/h2&gt; 
&lt;p&gt;Types of copilot highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHeader&lt;/code&gt; - Header highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSeparator&lt;/code&gt; - Separator highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatStatus&lt;/code&gt; - Status and spinner in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHelp&lt;/code&gt; - Help messages in chat buffer (help, references)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSelection&lt;/code&gt; - Selection highlight in source buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatKeyword&lt;/code&gt; - Keyword highlight in chat buffer (e.g. prompts, contexts)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatInput&lt;/code&gt; - Input highlight in chat buffer (for contexts)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;API Reference&lt;/h1&gt; 
&lt;h2&gt;Core&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local chat = require(&quot;CopilotChat&quot;)

-- Basic Chat Functions
chat.ask(prompt, config)      -- Ask a question with optional config
chat.response()               -- Get the last response text
chat.resolve_prompt()         -- Resolve prompt references
chat.resolve_context()        -- Resolve context embeddings (WARN: async, requires plenary.async.run)
chat.resolve_agent()          -- Resolve agent from prompt (WARN: async, requires plenary.async.run)
chat.resolve_model()          -- Resolve model from prompt (WARN: async, requires plenary.async.run)

-- Window Management
chat.open(config)             -- Open chat window with optional config
chat.close()                  -- Close chat window
chat.toggle(config)           -- Toggle chat window visibility with optional config
chat.reset()                  -- Reset the chat
chat.stop()                   -- Stop current output

-- Source Management
chat.get_source()             -- Get the current source buffer and window
chat.set_source(winnr)        -- Set the source window

-- Selection Management
chat.get_selection()                                   -- Get the current selection
chat.set_selection(bufnr, start_line, end_line, clear) -- Set or clear selection

-- Prompt &amp;amp; Context Management
chat.select_prompt(config)    -- Open prompt selector with optional config
chat.select_model()           -- Open model selector
chat.select_agent()           -- Open agent selector
chat.prompts()                -- Get all available prompts

-- Completion
chat.trigger_complete()       -- Trigger completion in chat window
chat.complete_info()          -- Get completion info for custom providers
chat.complete_items()         -- Get completion items (WARN: async, requires plenary.async.run)

-- History Management
chat.save(name, history_path) -- Save chat history
chat.load(name, history_path) -- Load chat history

-- Configuration
chat.setup(config)            -- Update configuration
chat.log_level(level)         -- Set log level (debug, info, etc.)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Chat Window&lt;/h2&gt; 
&lt;p&gt;You can also access the chat window UI methods through the &lt;code&gt;chat.chat&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local window = require(&quot;CopilotChat&quot;).chat

-- Chat UI State
window:visible()             -- Check if chat window is visible
window:focused()             -- Check if chat window is focused

-- Content Management
window:get_prompt()          -- Get current prompt from chat window
window:set_prompt(prompt)    -- Set prompt in chat window
window:add_sticky(sticky)    -- Add sticky prompt to chat window
window:append(text)          -- Append text to chat window
window:clear()               -- Clear chat window content
window:finish()              -- Finish writing to chat window

-- Navigation
window:follow()              -- Move cursor to end of chat content
window:focus()               -- Focus the chat window

-- Advanced Features
window:get_closest_section() -- Get section closest to cursor
window:get_closest_block()   -- Get code block closest to cursor
window:overlay(opts)         -- Show overlay with specified options
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Open chat, ask a question and handle response
require(&quot;CopilotChat&quot;).open()
require(&quot;CopilotChat&quot;).ask(&quot;Explain this code&quot;, {
  callback = function(response)
    vim.notify(&quot;Got response: &quot; .. response:sub(1, 50) .. &quot;...&quot;)
    return response
  end,
  context = &quot;buffer&quot;
})

-- Save and load chat history
require(&quot;CopilotChat&quot;).save(&quot;my_debugging_session&quot;)
require(&quot;CopilotChat&quot;).load(&quot;my_debugging_session&quot;)

-- Use custom context and model
require(&quot;CopilotChat&quot;).ask(&quot;How can I optimize this?&quot;, {
  model = &quot;gpt-4o&quot;,
  context = {&quot;buffer&quot;, &quot;git:staged&quot;}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more examples, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/wiki/Examples-and-Tips&quot;&gt;examples wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;To set up the environment:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
cd CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Install development dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install pre-commit hooks
make install-pre-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create your feature branch&lt;/li&gt; 
 &lt;li&gt;Make your changes&lt;/li&gt; 
 &lt;li&gt;Run tests and lint checks&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gptlang&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/121417512?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;gptlang&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;gptlang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://productsway.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/870029?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dung Duc Huynh (Kaka)&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dung Duc Huynh (Kaka)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qoobes.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/58834655?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahmed Haracic&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ahmed Haracic&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=qoobes&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://youtube.com/@ziontee113&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/102876811?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Trí Thiện Nguyễn&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Trí Thiện Nguyễn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ziontee113&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Cassius0924&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62874592?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;He Zhizhou&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;He Zhizhou&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Cassius0924&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/guruprakashrajakkannu/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9963717?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Guruprakash Rajakkannu&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Guruprakash Rajakkannu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rguruprakash&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kristofka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/140354?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;kristofka&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;kristofka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kristofka&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PostCyberPunk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/134976996?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;PostCyberPunk&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;PostCyberPunk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PostCyberPunk&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ktns&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1302759?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Katsuhiko Nishimra&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Katsuhiko Nishimra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ktns&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/errnoh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/373946?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Erno Hopearuoho&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Erno Hopearuoho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=errnoh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shaungarwood&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4156525?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shaun Garwood&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shaun Garwood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=shaungarwood&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/neutrinoA4&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/122616073?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;neutrinoA4&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;neutrinoA4&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/banjocat&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3247309?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jack Muratore&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jack Muratore&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=banjocat&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AdrielVelazquez&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3443378?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Adriel Velazquez&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adriel Velazquez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/deathbeam&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5115805?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomas Slusny&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tomas Slusny&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://nisalvd.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30633436?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nisal&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nisal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nisalVD&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.gaardhus.dk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46934916?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tobias Gårdhus&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tobias Gårdhus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gaardhus&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.patreon.com/PetrDlouhy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/156755?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Petr Dlouhý&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Petr Dlouhý&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PetrDlouhy&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.dylanmadisetti.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2689338?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dylan Madisetti&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dylan Madisetti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dmadisetti&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/aweis89&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5186956?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaron Weisberg&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aaron Weisberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tlacuilose&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65783495?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jose Tlacuilo&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jose Tlacuilo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://kevintraver.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/196406?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kevin Traver&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kevin Traver&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/D7ry&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/92609548?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;dTry&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;dTry&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=D7ry&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://blog.ornew.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19766770?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Arata Furukawa&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Arata Furukawa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ornew&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lingjie00&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64540764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ling&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ling&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lingjie00&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/frolvanya&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/59515280?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ivan Frolov&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ivan Frolov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=frolvanya&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.folkelemaitre.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/292349?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Folke Lemaitre&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Folke Lemaitre&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/GitMurf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64155612?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;GitMurf&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;GitMurf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=GitMurf&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://dimalip.in&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6877858?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dmitrii Lipin&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dmitrii Lipin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=festeh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nvimer.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/41784264?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;jinzhongjia&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;jinzhongjia&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jinzhongjia&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/guill&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3157454?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;guill&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;guill&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=guill&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sjonpaulbrown-cc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/81941908?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sjon-Paul Brown&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sjon-Paul Brown&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=sjonpaulbrown-cc&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/renxzen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13023797?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Renzo Mondragón&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Renzo Mondragón&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/fjchen7&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10106636?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;fjchen7&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;fjchen7&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=fjchen7&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/radwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/184065?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Radosław Woźniak&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Radosław Woźniak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=radwo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/JakubPecenka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/87969308?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JakubPecenka&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JakubPecenka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=JakubPecenka&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/thomastthai&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16532581?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;thomastthai&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;thomastthai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=thomastthai&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://lisk.in/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/300342?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomáš Janoušek&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tomáš Janoušek&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=liskin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Moriango&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43554061?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Toddneal Stallworth&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Toddneal Stallworth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Moriango&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/taketwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1241736?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sergey Alexandrov&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sergey Alexandrov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=taketwo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lemeb&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7331643?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Léopold Mebazaa&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Léopold Mebazaa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lemeb&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://atko.space&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14937572?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JunKi Jin&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JunKi Jin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=atkodev&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/abdennourzahaf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62243290?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;abdennourzahaf&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;abdennourzahaf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=abdennourzahaf&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/josiahdenton&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44758384?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Josiah&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Josiah&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=josiahdenton&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tku137&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3052212?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tony Fischer&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tony Fischer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qiita.com/program3152019&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64008205?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kohei Wada&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kohei Wada&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Kohei-Wada&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://zags.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/79172513?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sebastian Yaghoubi&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sebastian Yaghoubi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=syaghoubi00&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/johncming&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11719334?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;johncming&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;johncming&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=johncming&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dzonatan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5166666?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rokas Brazdžionis&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rokas Brazdžionis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dzonatan&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/unlimitedsola&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3632663?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sola&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sola&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ThisIsMani&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/84711804?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mani Chandra&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mani Chandra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ThisIsMani&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; 
&lt;h1&gt;Stargazers&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg?variant=adaptive&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/tokyonight.nvim</title>
      <link>https://github.com/folke/tokyonight.nvim</link>
      <description>&lt;p&gt;🏙 A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins. Includes additional themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🏙 Tokyo Night&lt;/h1&gt; 
&lt;p&gt;A dark and light &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; theme written in &lt;a href=&quot;https://www.lua.org&quot;&gt;Lua&lt;/a&gt; ported from the &lt;a href=&quot;https://github.com/enkia/tokyo-night-vscode-theme&quot;&gt;Visual Studio Code TokyoNight&lt;/a&gt; theme. Includes &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extra&lt;/a&gt; themes for &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;, &lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;, &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;.&lt;/p&gt; 
&lt;table width=&quot;100%&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Moon&lt;/th&gt; 
   &lt;th&gt;Storm&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/190951628-10ba28a1-57ff-4479-8eab-47400a402242.png&quot;&gt; &lt;/td&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115295095-3a9e5080-a10e-11eb-9aed-6054488c46ce.png&quot;&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Night&lt;/th&gt; 
   &lt;th&gt;Day&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115295327-7afdce80-a10e-11eb-89b3-2591262bf95a.png&quot;&gt; &lt;/td&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115996270-78c6c480-a593-11eb-8ed0-7d1400b058f5.png&quot;&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports the latest &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.9.0&quot;&gt;0.9.0&lt;/a&gt; features.&lt;/li&gt; 
 &lt;li&gt;Terminal colors.&lt;/li&gt; 
 &lt;li&gt;Supports all major plugins.&lt;/li&gt; 
 &lt;li&gt;Provides &lt;a href=&quot;https://github.com/folke/tokyonight.nvim&quot;&gt;TokyoNight&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extras&lt;/a&gt; for numerous other applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;🎨 Supported Plugins&lt;/summary&gt; 
 &lt;!-- plugins:start --&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Plugin&lt;/th&gt; 
    &lt;th&gt;Source&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/aerial.lua&quot;&gt;&lt;code&gt;aerial&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/dense-analysis/ale&quot;&gt;ale&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/ale.lua&quot;&gt;&lt;code&gt;ale&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/alpha.lua&quot;&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/barbar.lua&quot;&gt;&lt;code&gt;barbar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/blink.lua&quot;&gt;&lt;code&gt;blink&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/bufferline.lua&quot;&gt;&lt;code&gt;bufferline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/cmp.lua&quot;&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Exafunction/codeium.nvim&quot;&gt;codeium.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/codeium.lua&quot;&gt;&lt;code&gt;codeium&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot.lua&quot;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/copilot.lua&quot;&gt;&lt;code&gt;copilot&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/dap.lua&quot;&gt;&lt;code&gt;dap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvimdev/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/dashboard.lua&quot;&gt;&lt;code&gt;dashboard&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/flash.lua&quot;&gt;&lt;code&gt;flash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/fzf.lua&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/gitgutter.lua&quot;&gt;&lt;code&gt;gitgutter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/gitsigns.lua&quot;&gt;&lt;code&gt;gitsigns&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lambdalisue/glyph-palette.vim&quot;&gt;glyph-palette.vim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/glyph-palette.lua&quot;&gt;&lt;code&gt;glyph-palette&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/grug-far.lua&quot;&gt;&lt;code&gt;grug-far&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/headlines.lua&quot;&gt;&lt;code&gt;headlines&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/hop.lua&quot;&gt;&lt;code&gt;hop&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/illuminate.lua&quot;&gt;&lt;code&gt;illuminate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/indent-blankline.lua&quot;&gt;&lt;code&gt;indent-blankline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvimdev/indentmini.nvim&quot;&gt;indentmini.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/indentmini.lua&quot;&gt;&lt;code&gt;indentmini&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/lazy.lua&quot;&gt;&lt;code&gt;lazy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/leap.lua&quot;&gt;&lt;code&gt;leap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/lspsaga.lua&quot;&gt;&lt;code&gt;lspsaga&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.animate&quot;&gt;mini.animate&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_animate.lua&quot;&gt;&lt;code&gt;mini_animate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.clue&quot;&gt;mini.clue&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_clue.lua&quot;&gt;&lt;code&gt;mini_clue&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.completion&quot;&gt;mini.completion&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_completion.lua&quot;&gt;&lt;code&gt;mini_completion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.cursorword&quot;&gt;mini.cursorword&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_cursorword.lua&quot;&gt;&lt;code&gt;mini_cursorword&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.deps&quot;&gt;mini.deps&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_deps.lua&quot;&gt;&lt;code&gt;mini_deps&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.diff&quot;&gt;mini.diff&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_diff.lua&quot;&gt;&lt;code&gt;mini_diff&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.files&quot;&gt;mini.files&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_files.lua&quot;&gt;&lt;code&gt;mini_files&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.hipatterns&quot;&gt;mini.hipatterns&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_hipatterns.lua&quot;&gt;&lt;code&gt;mini_hipatterns&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_icons.lua&quot;&gt;&lt;code&gt;mini_icons&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.indentscope&quot;&gt;mini.indentscope&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_indentscope.lua&quot;&gt;&lt;code&gt;mini_indentscope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.jump&quot;&gt;mini.jump&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_jump.lua&quot;&gt;&lt;code&gt;mini_jump&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.map&quot;&gt;mini.map&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_map.lua&quot;&gt;&lt;code&gt;mini_map&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.notify&quot;&gt;mini.notify&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_notify.lua&quot;&gt;&lt;code&gt;mini_notify&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.operators&quot;&gt;mini.operators&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_operators.lua&quot;&gt;&lt;code&gt;mini_operators&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick&quot;&gt;mini.pick&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_pick.lua&quot;&gt;&lt;code&gt;mini_pick&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.starter&quot;&gt;mini.starter&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_starter.lua&quot;&gt;&lt;code&gt;mini_starter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.statusline&quot;&gt;mini.statusline&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_statusline.lua&quot;&gt;&lt;code&gt;mini_statusline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.surround&quot;&gt;mini.surround&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_surround.lua&quot;&gt;&lt;code&gt;mini_surround&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.tabline&quot;&gt;mini.tabline&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_tabline.lua&quot;&gt;&lt;code&gt;mini_tabline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.test&quot;&gt;mini.test&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_test.lua&quot;&gt;&lt;code&gt;mini_test&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.trailspace&quot;&gt;mini.trailspace&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_trailspace.lua&quot;&gt;&lt;code&gt;mini_trailspace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;nvim-navic&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/navic.lua&quot;&gt;&lt;code&gt;navic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neo-tree.lua&quot;&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/TimUntersberger/neogit&quot;&gt;neogit&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neogit.lua&quot;&gt;&lt;code&gt;neogit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neotest.lua&quot;&gt;&lt;code&gt;neotest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/noice.lua&quot;&gt;&lt;code&gt;noice&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/notify.lua&quot;&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/nvim-tree.lua&quot;&gt;&lt;code&gt;nvim-tree&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/octo.lua&quot;&gt;&lt;code&gt;octo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/rainbow.lua&quot;&gt;&lt;code&gt;rainbow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/render-markdown.lua&quot;&gt;&lt;code&gt;render-markdown&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/petertriho/nvim-scrollbar&quot;&gt;nvim-scrollbar&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/scrollbar.lua&quot;&gt;&lt;code&gt;scrollbar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/snacks.lua&quot;&gt;&lt;code&gt;snacks&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/sneak.lua&quot;&gt;&lt;code&gt;sneak&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/supermaven-inc/supermaven-nvim&quot;&gt;supermaven-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/supermaven.lua&quot;&gt;&lt;code&gt;supermaven&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/telescope.lua&quot;&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/treesitter-context.lua&quot;&gt;&lt;code&gt;treesitter-context&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/trouble.lua&quot;&gt;&lt;code&gt;trouble&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/vimwiki.lua&quot;&gt;&lt;code&gt;vimwiki&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/which-key.lua&quot;&gt;&lt;code&gt;which-key&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/gbprod/yanky.nvim&quot;&gt;yanky.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/yanky.lua&quot;&gt;&lt;code&gt;yanky&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;!-- plugins:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🍭 Extras&lt;/summary&gt; 
 &lt;!-- extras:start --&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Tool&lt;/th&gt; 
    &lt;th&gt;Extra&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://git.sr.ht/~rjarry/aerc/&quot;&gt;Aerc&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/aerc&quot;&gt;extras/aerc&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/alacritty&quot;&gt;extras/alacritty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;Delta&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/delta&quot;&gt;extras/delta&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://betterdiscord.app/&quot;&gt;(Better-)Discord&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/discord&quot;&gt;extras/discord&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://dunst-project.org/&quot;&gt;Dunst&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/dunst&quot;&gt;extras/dunst&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish&quot;&gt;extras/fish&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://fishshell.com/docs/current/interactive.html#syntax-highlighting&quot;&gt;Fish Themes&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish_themes&quot;&gt;extras/fish_themes&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://codeberg.org/dnkl/foot&quot;&gt;Foot&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/foot&quot;&gt;extras/foot&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://codeberg.org/dnkl/fuzzel&quot;&gt;Fuzzel&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fuzzel&quot;&gt;extras/fuzzel&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;Fzf&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fzf&quot;&gt;extras/fzf&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ghostty-org/ghostty&quot;&gt;Ghostty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/ghostty&quot;&gt;extras/ghostty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/extrawurst/gitui&quot;&gt;GitUI&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/gitui&quot;&gt;extras/gitui&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-terminal&quot;&gt;GNOME Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/gnome_terminal&quot;&gt;extras/gnome_terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://helix-editor.com/&quot;&gt;Helix&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/helix&quot;&gt;extras/helix&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/iterm&quot;&gt;extras/iterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/kitty&quot;&gt;extras/kitty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;Lazygit&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lazygit&quot;&gt;extras/lazygit&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.lua.org&quot;&gt;Lua Table for testing&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua&quot;&gt;extras/lua&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://prismjs.com&quot;&gt;Prism&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/prism&quot;&gt;extras/prism&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://f1bonacc1.github.io/process-compose/&quot;&gt;process-compose&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/process_compose&quot;&gt;extras/process_compose&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/slack&quot;&gt;extras/slack&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/aome510/spotify-player&quot;&gt;Spotify Player&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/spotify_player&quot;&gt;extras/spotify_player&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.sublimetext.com/docs/themes&quot;&gt;Sublime Text&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/sublime&quot;&gt;extras/sublime&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://gnome-terminator.readthedocs.io/en/latest/config.html&quot;&gt;Terminator&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/terminator&quot;&gt;extras/terminator&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://termux.dev/&quot;&gt;Termux&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/termux&quot;&gt;extras/termux&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/gnunn1/tilix&quot;&gt;Tilix&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tilix&quot;&gt;extras/tilix&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;Tmux&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tmux&quot;&gt;extras/tmux&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://vimhelp.org/&quot;&gt;Vim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/vim&quot;&gt;extras/vim&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://vimium.github.io/&quot;&gt;Vimium&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/vimium&quot;&gt;extras/vimium&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://wezfurlong.org/wezterm/config/files.html&quot;&gt;WezTerm&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/wezterm&quot;&gt;extras/wezterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://aka.ms/terminal-documentation&quot;&gt;Windows Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/windows_terminal&quot;&gt;extras/windows_terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://docs.xfce.org/apps/terminal/advanced&quot;&gt;Xfce Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xfceterm&quot;&gt;extras/xfceterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/X_resources&quot;&gt;Xresources&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xresources&quot;&gt;extras/xresources&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/sxyazi/yazi&quot;&gt;Yazi&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/yazi&quot;&gt;extras/yazi&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://pwmt.org/projects/zathura/&quot;&gt;Zathura&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zathura&quot;&gt;extras/zathura&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://zellij.dev/&quot;&gt;Zellij&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zellij&quot;&gt;extras/zellij&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;!-- extras:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; &amp;gt;= &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.8.0&quot;&gt;0.8.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the theme with your preferred package manager, such as &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;folke/lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/tokyonight.nvim&quot;,
  lazy = false,
  priority = 1000,
  opts = {},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd[[colorscheme tokyonight]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme tokyonight

&quot; There are also colorschemes for the different styles.
colorscheme tokyonight-night
colorscheme tokyonight-storm
colorscheme tokyonight-day
colorscheme tokyonight-moon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some plugins need extra configuration to work with &lt;strong&gt;TokyoNight&lt;/strong&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click here for more details&lt;/summary&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;Barbecue&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
require(&#39;barbecue&#39;).setup {
  -- ... your barbecue config
  theme = &#39;tokyonight&#39;,
  -- ... your barbecue config
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;Lualine&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
require(&#39;lualine&#39;).setup {
  options = {
    -- ... your lualine config
    theme = &#39;tokyonight&#39;
    -- ... your lualine config
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;Lightline&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; Vim Script
let g:lightline = {&#39;colorscheme&#39;: &#39;tokyonight&#39;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Set the configuration &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme tokyonight&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The theme offers four styles: &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#storm&quot;&gt;storm&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#moon&quot;&gt;moon&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#night&quot;&gt;night&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&quot;&gt;day&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&quot;&gt;day&lt;/a&gt; style is used when &lt;code&gt;{ style = &quot;day&quot; }&lt;/code&gt; is passed to &lt;code&gt;setup(options)&lt;/code&gt; or when &lt;code&gt;vim.o.background = &quot;light&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/tokyonight.nvim&quot;&gt;TokyoNight&lt;/a&gt; uses the default options, unless &lt;code&gt;setup&lt;/code&gt; is explicitly called.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class tokyonight.Config
---@field on_colors fun(colors: ColorScheme)
---@field on_highlights fun(highlights: tokyonight.Highlights, colors: ColorScheme)
M.defaults = {
  style = &quot;moon&quot;, -- The theme comes in three styles, `storm`, a darker variant `night` and `day`
  light_style = &quot;day&quot;, -- The theme is used when the background is set to light
  transparent = false, -- Enable this to disable setting the background color
  terminal_colors = true, -- Configure the colors used when opening a `:terminal` in Neovim
  styles = {
    -- Style to be applied to different syntax groups
    -- Value is any valid attr-list value for `:help nvim_set_hl`
    comments = { italic = true },
    keywords = { italic = true },
    functions = {},
    variables = {},
    -- Background styles. Can be &quot;dark&quot;, &quot;transparent&quot; or &quot;normal&quot;
    sidebars = &quot;dark&quot;, -- style for sidebars, see below
    floats = &quot;dark&quot;, -- style for floating windows
  },
  day_brightness = 0.3, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
  dim_inactive = false, -- dims inactive windows
  lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold

  --- You can override specific color groups to use other groups or a hex color
  --- function will be called with a ColorScheme table
  ---@param colors ColorScheme
  on_colors = function(colors) end,

  --- You can override specific highlights to use other groups or a hex color
  --- function will be called with a Highlights and ColorScheme table
  ---@param highlights tokyonight.Highlights
  ---@param colors ColorScheme
  on_highlights = function(highlights, colors) end,

  cache = true, -- When set to true, the theme will be cached for better performance

  ---@type table&amp;lt;string, boolean|{enabled:boolean}&amp;gt;
  plugins = {
    -- enable all plugins when not using lazy.nvim
    -- set to false to manually enable/disable plugins
    all = package.loaded.lazy == nil,
    -- uses your plugin manager to automatically enable needed plugins
    -- currently only lazy.nvim is supported
    auto = true,
    -- add any plugins here that you want to enable
    -- for all possible plugins, see:
    --   * https://github.com/folke/tokyonight.nvim/tree/main/lua/tokyonight/groups
    -- telescope = true,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;🪓 Overriding Colors &amp;amp; Highlight Groups&lt;/h2&gt; 
&lt;p&gt;How the highlight groups are calculated:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;colors&lt;/code&gt; are determined based on your configuration, with the ability to override them using &lt;code&gt;config.on_colors(colors)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;These &lt;code&gt;colors&lt;/code&gt; are utilized to generate the highlight groups.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config.on_highlights(highlights, colors)&lt;/code&gt; can be used to override highlight groups.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For default values of &lt;code&gt;colors&lt;/code&gt; and &lt;code&gt;highlights&lt;/code&gt;, please consult the &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_storm.lua&quot;&gt;storm&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_moon.lua&quot;&gt;moon&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_night.lua&quot;&gt;night&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_day.lua&quot;&gt;day&lt;/a&gt; themes.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Settings &amp;amp; Changing Colors&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;tokyonight&quot;).setup({
  -- use the night style
  style = &quot;night&quot;,
  -- disable italic for functions
  styles = {
    functions = {}
  },
  -- Change the &quot;hint&quot; color to the &quot;orange&quot; color, and make the &quot;error&quot; color bright red
  on_colors = function(colors)
    colors.hint = colors.orange
    colors.error = &quot;#ff0000&quot;
  end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Borderless Telescope&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;tokyonight&quot;).setup({
  on_highlights = function(hl, c)
    local prompt = &quot;#2d3149&quot;
    hl.TelescopeNormal = {
      bg = c.bg_dark,
      fg = c.fg_dark,
    }
    hl.TelescopeBorder = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
    hl.TelescopePromptNormal = {
      bg = prompt,
    }
    hl.TelescopePromptBorder = {
      bg = prompt,
      fg = prompt,
    }
    hl.TelescopePromptTitle = {
      bg = prompt,
      fg = prompt,
    }
    hl.TelescopePreviewTitle = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
    hl.TelescopeResultsTitle = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Fix &lt;code&gt;undercurls&lt;/code&gt; in Tmux&lt;/summary&gt; 
 &lt;p&gt;To have undercurls show up and in color, add the following to your &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;Tmux&lt;/a&gt; configuration file:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Undercurl
set -g default-terminal &quot;${TERM}&quot;
set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support
set -as terminal-overrides &#39;,*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;🍭 Extras&lt;/h2&gt; 
&lt;p&gt;Extra color configs for &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;, &lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;, &lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;, &lt;a href=&quot;https://wezfurlong.org/wezterm/config/files.html&quot;&gt;WezTerm&lt;/a&gt;, &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt; and &lt;a href=&quot;https://codeberg.org/dnkl/foot&quot;&gt;foot&lt;/a&gt; can be found in &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/&quot;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/115395546-d8d6f880-a198-11eb-98fb-a1194787701d.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;You can easily use the color palette for other plugins inside your &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local colors = require(&quot;tokyonight.colors&quot;).setup() -- pass in any of the config options as explained above
local util = require(&quot;tokyonight.util&quot;)

aplugin.background = colors.bg_dark
aplugin.my_error = util.lighten(colors.red1, 0.3) -- number between 0 and 1. 0 results in white, 1 results in red1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔥 Contributing&lt;/h2&gt; 
&lt;p&gt;Pull requests are welcome.&lt;/p&gt; 
&lt;p&gt;For the &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extras&lt;/a&gt;, we use a simple template system that can be used to generate themes for the different styles.&lt;/p&gt; 
&lt;p&gt;How to add a new extra template:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a file like &lt;code&gt;lua/tokyonight/extra/cool-app.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the name and output file extension to the &lt;code&gt;extras&lt;/code&gt; table in &lt;code&gt;lua/tokyonight/extra/init.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the following command to generate new &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extra&lt;/a&gt; themes from the tokyonight plugin directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./scripts/build
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Check the newly created themes in the &lt;code&gt;extra/&lt;/code&gt; directory. Please &lt;strong&gt;DO NOT&lt;/strong&gt; commit them, as they are already automatically built by the CI.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>MagicDuck/grug-far.nvim</title>
      <link>https://github.com/MagicDuck/grug-far.nvim</link>
      <description>&lt;p&gt;Find And Replace plugin for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;grug-far.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;ind &lt;strong&gt;A&lt;/strong&gt;nd &lt;strong&gt;R&lt;/strong&gt;eplace plugin for neovim&lt;/p&gt; 
&lt;img width=&quot;500&quot; alt=&quot;image&quot; src=&quot;https://github.com/MagicDuck/grug-far.nvim/assets/95201/770900e2-36c6-488c-9117-5fcb514454cb&quot;&gt; 
&lt;p&gt;Grug find! Grug replace! Grug happy!&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search using the &lt;strong&gt;full power&lt;/strong&gt; of &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ast-grep&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Replace using almost the &lt;strong&gt;full power&lt;/strong&gt; of &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ast-grep&lt;/code&gt;. For example, for &lt;code&gt;rg&lt;/code&gt;, some flags such as &lt;code&gt;--binary&lt;/code&gt; and &lt;code&gt;--json&lt;/code&gt;, etc. are &lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/engine/ripgrep/blacklistedReplaceFlags.lua&quot;&gt;blacklisted&lt;/a&gt; in order to prevent unexpected output. The UI will warn you and prevent replace when using such flags.&lt;/li&gt; 
 &lt;li&gt;Automatic debounced search or manual search on leaving insert mode (and normal mode changes)&lt;/li&gt; 
 &lt;li&gt;Open search results in quickfix list&lt;/li&gt; 
 &lt;li&gt;Goto file/line/column of match when pressing &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; in normal mode on lines in the results output (keybind configurable).&lt;/li&gt; 
 &lt;li&gt;Inline edit result lines and sync them back to their originating file locations using a configurable keybinding.&lt;/li&gt; 
 &lt;li&gt;Manual/auto-save search history and reload&lt;/li&gt; 
 &lt;li&gt;Syntax highlighted search results&lt;/li&gt; 
 &lt;li&gt;Search results folding&lt;/li&gt; 
 &lt;li&gt;Multiline search &amp;amp; replace&lt;/li&gt; 
 &lt;li&gt;Search/Replace within buffer range denoted by visual selection&lt;/li&gt; 
 &lt;li&gt;&quot;Preview&quot; result source while &quot;scrolling&quot; through results&lt;/li&gt; 
 &lt;li&gt;Replace using lua interpreted replacement for each match&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Searching:&lt;/h4&gt; 
&lt;img width=&quot;1263&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/7851bc37-bd88-473d-a09a-1510088e074c&quot;&gt; 
&lt;h4&gt;Replacing:&lt;/h4&gt; 
&lt;img width=&quot;1260&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/c8edd521-9321-4e83-a4ce-e3d98ac1b346&quot;&gt; 
&lt;details&gt; 
 &lt;summary&gt;More screenshots:&lt;/summary&gt; 
 &lt;h4&gt;Rg teaching you its ways&lt;/h4&gt; 
 &lt;img width=&quot;1258&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/c59da414-2836-4e1c-93cd-9ac4568c819c&quot;&gt; 
 &lt;h4&gt;Help:&lt;/h4&gt; 
 &lt;img width=&quot;1252&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/5da63e72-f768-46e7-a807-b26c6f44c42c&quot;&gt; 
 &lt;h4&gt;Searching within buffer range&lt;/h4&gt; 
 &lt;img width=&quot;2500&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/497e8024-4823-4331-92ac-d78cdae332f0&quot;&gt; 
 &lt;h4&gt;History:&lt;/h4&gt; 
 &lt;img width=&quot;1252&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/ee96bea6-62bc-4c39-b924-e5d42e70196a&quot;&gt; 
 &lt;h4&gt;Ast-grep multiline search and replace:&lt;/h4&gt; 
 &lt;img width=&quot;1254&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/1f07c536-ef41-476f-9a15-7f0715c0579c&quot;&gt; 
 &lt;h4&gt;Ast-grep debug-query&lt;/h4&gt; 
 &lt;img width=&quot;1251&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/20fab223-56b6-42ff-825b-0df3c0e8d625&quot;&gt; 
 &lt;h4&gt;Ripgrep with lua interpreted replacement&lt;/h4&gt; 
 &lt;img width=&quot;1259&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/e2b9ca48-e0cc-49d1-b048-5042f40b774b&quot;&gt; 
 &lt;h4&gt;Ast-grep with vimscript interpreted replacement&lt;/h4&gt; 
 &lt;img width=&quot;1257&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/34eebeda-4e29-4fed-a751-eac3f879425c&quot;&gt; 
 &lt;h4&gt;Ast-grep rules&lt;/h4&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/123c5c3e-85c1-45d3-89a1-167dc3376b62&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Video&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;linkarzu&lt;/em&gt; has kindly made a video which shows off some of the features in action (don&#39;t forget to thank him for his hard work by liking if you found it helpful):&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AK1TSwJrB3k&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/AK1TSwJrB3k/0.jpg&quot; alt=&quot;linkarzu youtube video&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🤔 Philosophy&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;em&gt;strives for reduced mental overhead.&lt;/em&gt; All actions you can take and as much help as possible is in your face (some configurable). Grug often forget how to do capture groups or which flag does what.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;transparency.&lt;/em&gt; Does not try to hide away the underlying tool. For instance, error messages from &lt;code&gt;rg&lt;/code&gt; are shown as they are actually quite friendly when you mess up your regex. You can gradually learn &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ast-grep&lt;/code&gt; flags or use existing knowledge from running it in the CLI. You can even input the &lt;code&gt;--help&lt;/code&gt; flag to see the full &lt;code&gt;rg&lt;/code&gt; help or the &lt;code&gt;--debug-query=ast&lt;/code&gt; flag to debug your &lt;code&gt;ast-grep&lt;/code&gt; query. Grug like!&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;reuse muscle memory.&lt;/em&gt; Does not try to block any type of buffer edits, such as deleting lines, etc. It&#39;s very easy to get such things wrong and when you do, Grug becomes unable to modify text in the middle of writing a large regex. Grug mad!! Only ensures graceful recovery in order to preserve basic UI integrity (possible due to the magic of extmarks). Recovery should be simple undo away.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;uniformity.&lt;/em&gt; only uses one tool for both search and applying replace to keep things consistent. For example, does not combine &lt;code&gt;rg&lt;/code&gt; with other tools like &lt;code&gt;sed&lt;/code&gt;, even though &lt;code&gt;rg&lt;/code&gt; does not support replacement directly. One should not have to worry about compatibility differences when writing regexes. Additionally it opens the door to use many fancy &lt;code&gt;rg&lt;/code&gt; flags such as different regex engine that would not be possible in a mixed environment. There is currently one small exception for this due to the fact that &lt;code&gt;ast-grep&lt;/code&gt; does not currently support something like a &lt;code&gt;--glob&lt;/code&gt; flag, so we have to filter files through &lt;code&gt;rg&lt;/code&gt;, but hopefully that can be rectified in the future.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.10.0&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;BurntSushi/ripgrep&lt;/a&gt; &amp;gt;= 14 recommended&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ast-grep.github.io&quot;&gt;ast-grep&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; if you would like to use the &lt;code&gt;ast-grep&lt;/code&gt; search engine. ersion &amp;gt;= &lt;code&gt;0.36&lt;/code&gt; recommended.&lt;/li&gt; 
 &lt;li&gt;either &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; or &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; for file icons support &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Run &lt;code&gt;:checkhealth grug-far&lt;/code&gt; if you see unexpected issues.&lt;/p&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  {
    &#39;MagicDuck/grug-far.nvim&#39;,
    config = function()
      -- optional setup call to override plugin options
      -- alternatively you can set options with vim.g.grug_far = { ... }
      require(&#39;grug-far&#39;).setup({
        -- options, see Configuration section below
        -- there are no required options atm
        -- engine = &#39;ripgrep&#39; is default, but &#39;astgrep&#39; or &#39;astgrep-rules&#39; can
        -- be specified
      });
    end
  },

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;grug-far.nvim&lt;/strong&gt; comes with the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/opts.lua&quot;&gt;default options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/highlights.lua&quot;&gt;highlights&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note on the key mappings&lt;/strong&gt;: By default, grug-far, will use &lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt; for it&#39;s keymaps as that is the vim recommended way for plugins. See &lt;a href=&quot;https://learnvimscriptthehardway.stevelosh.com/chapters/11.html#local-leader&quot;&gt;https://learnvimscriptthehardway.stevelosh.com/chapters/11.html#local-leader&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;So to use that, make sure you have &lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt; configured. For example, to use &lt;code&gt;,&lt;/code&gt; as the local leader:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;vim.g.maplocalleader = &#39;,&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;h3&gt;Opening and editing&lt;/h3&gt; 
&lt;p&gt;You can open a new &lt;em&gt;grug-far.nvim&lt;/em&gt; vertical split buffer with the &lt;code&gt;:GrugFar&lt;/code&gt; command. Note that command supports the typical &lt;code&gt;command-modifiers&lt;/code&gt; like &lt;code&gt;botright&lt;/code&gt;, &lt;code&gt;aboveleft&lt;/code&gt;, etc. and visual ranges. In visual mode, the command will pre-fill the search string with the current visual selection. Note that if you would like to search and replace &lt;em&gt;within&lt;/em&gt; the visual selection range, you should use &lt;code&gt;:GrugFarWithin&lt;/code&gt; instead.&lt;/p&gt; 
&lt;p&gt;Possibly best to map a keybind to it for easy triggering. Since it&#39;s &lt;em&gt;just a buffer&lt;/em&gt;, you can edit in it as you see fit. The UI will try to guide you along and recover gracefully if you do things like &lt;code&gt;ggVGd&lt;/code&gt; (delete all lines). Ultimately it leaves the power in your hands, and in any case recovery is just a few &lt;code&gt;u&lt;/code&gt; taps away.&lt;/p&gt; 
&lt;p&gt;You can create multiple such buffers with potentially different searches, which will reflect in each buffer&#39;s title (configurable). The buffers should be visible in the buffers list if you need to toggle to them.&lt;/p&gt; 
&lt;h3&gt;Searching and replacing&lt;/h3&gt; 
&lt;p&gt;Search and replace is accomplished by simply typing text on appropriately marked lines. Search will happen in a debounced manner as you type. In the options, you can also specify a minimum number of characters that one has to enter before search is triggered. You can also specify a files filter to narrow down your search and more ripgrep flags to refine it further. Error messages from ripgrep when entering invalid flags and so on are displayed to guide you along.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; When replacing matches with the empty string, you will be prompted to confirm, as the change is not visible in the results area due to UI considering it just a search. If you would like to see the actual replacement in the results area, add &lt;code&gt;--replace=&lt;/code&gt; to the flags.&lt;/p&gt; 
&lt;h3&gt;Replacing each match with the result of an interpreted script&lt;/h3&gt; 
&lt;p&gt;Some situations require the power of arbitrary code executed for each search to determine the proper replacements. In those cases, you can use the &lt;code&gt;Swap Replacement Interpreter&lt;/code&gt; action to switch to a desired replacement interpreter, such as &lt;code&gt;lua&lt;/code&gt; or &lt;code&gt;vimscript&lt;/code&gt;. For example with the &lt;code&gt;lua&lt;/code&gt; interpreter, this will allow you to write multi-line lua code, essentially the body of a lua function, in the &lt;code&gt;Replace:&lt;/code&gt; input.&lt;/p&gt; 
&lt;p&gt;You can use &lt;code&gt;match&lt;/code&gt; to refer to each match and need to &lt;code&gt;return&lt;/code&gt; the value you want to be the replacement. In the case of the &lt;code&gt;astgrep&lt;/code&gt; engine, you will also have access to the meta variables by accessing them through the &lt;code&gt;vars&lt;/code&gt; table. e.g. &lt;code&gt;$A&lt;/code&gt; is referred to by &lt;code&gt;vars.A&lt;/code&gt;, &lt;code&gt;$$$ARGS&lt;/code&gt; is referred to by &lt;code&gt;vars.ARGS&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;It is a similar situation for the &lt;code&gt;vimscript&lt;/code&gt; interpreter.&lt;/p&gt; 
&lt;h3&gt;Syncing results lines back to originating files&lt;/h3&gt; 
&lt;p&gt;It is possible to sync the text of the lines in the results area back to their originating files. There are 3 types of actions that can accomplish this operation:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;Sync Line&lt;/code&gt; - syncs current line&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Sync All&lt;/code&gt; - syncs all lines&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Apply Next&lt;/code&gt;/&lt;code&gt;Apply Prev&lt;/code&gt; - syncs current line/diff and smartly deletes it from the result buffer&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;A sync will happen only if a line has changed in some way compared to the source file, so if there&#39;s either a replacement taking place or you have manually edited it.&lt;/p&gt; 
&lt;p&gt;Deleting result lines will cause them to be excluded from being synced by &lt;code&gt;Sync All&lt;/code&gt; action. This can be a nice way to refine a replacement in some situations if you want to exclude a particular file or some particular matches.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; sync is only supported by &lt;code&gt;ripgrep&lt;/code&gt; engine. The following explanation is &lt;code&gt;ripgrep&lt;/code&gt; engine specific:&lt;/p&gt; 
&lt;p&gt;If you don&#39;t edit the results list, &lt;code&gt;Sync All&lt;/code&gt; and &lt;code&gt;Replace&lt;/code&gt; have equivalent outcomes, except for one case. When you do multi-line replace with &lt;code&gt;--multiline&lt;/code&gt; and &lt;code&gt;--multiline-dot-all&lt;/code&gt; flags, sync won&#39;t work so you have to use replace. Essentially the difference it that &lt;code&gt;Replace&lt;/code&gt; runs &lt;code&gt;rg --replace=... --passthrough&lt;/code&gt; on each file and does not depend at all on what&#39;s in the results area. &lt;code&gt;Sync All&lt;/code&gt; does a line by line sync based on what&#39;s in the results area.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; changing the &lt;code&gt;&amp;lt;line-number&amp;gt;:&amp;lt;column&amp;gt;:&lt;/code&gt; prefix of result lines will disable sync for that line&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; sync is disabled when doing multiline replacement (&lt;code&gt;--multiline&lt;/code&gt; flag)&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if you would like sync to work when doing a replacement with empty string, please add &lt;code&gt;--replace=&lt;/code&gt; to the flags.&lt;/p&gt; 
&lt;h3&gt;Going to / Opening / Previewing Result Location&lt;/h3&gt; 
&lt;p&gt;When the cursor is placed on a result file path, you can go to that file by pressing &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; in normal mode (&lt;code&gt;Goto&lt;/code&gt; action default keybind). When it&#39;s placed over a result match line, you will be taken to the file/line/column of the match. By default, the file buffer is opened in the last window you were in before opening grug-far, which is typically the other vertical split.&lt;/p&gt; 
&lt;p&gt;If you would like to do the same thing, but have the cursor stay in place, you can use the &lt;code&gt;Open&lt;/code&gt; action instead.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; for both &lt;code&gt;Goto&lt;/code&gt; and &lt;code&gt;Open&lt;/code&gt; actions, if a &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; is entered beforehand, the location corresponding to &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; result line is used instead of the current cursor line. You can set the option &lt;code&gt;resultLocation.showNumberLabel = true&lt;/code&gt; if you would like to have a visual indication of the &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to smoothly &lt;code&gt;Open&lt;/code&gt; each result location in sequence, you can use the &lt;code&gt;Open Next&lt;/code&gt; and &lt;code&gt;Open Prev&lt;/code&gt; actions.&lt;/p&gt; 
&lt;p&gt;If you would like to keep the buffers layout, you can use the &lt;code&gt;Preview&lt;/code&gt; action instead, which will open location in a floating window.&lt;/p&gt; 
&lt;h3&gt;Opening result lines in quickfix list&lt;/h3&gt; 
&lt;p&gt;Result lines can be opened in the quickfix list. Deleting result lines will cause them not to be included.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; changing the &lt;code&gt;&amp;lt;line-number&amp;gt;:&amp;lt;column&amp;gt;:&lt;/code&gt; prefix of result lines will remove lines from consideration&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; quickfix list is disabled when doing multiline replacement (&lt;code&gt;--multiline&lt;/code&gt; flag)&lt;/p&gt; 
&lt;h3&gt;History&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;grug-far&lt;/strong&gt; can keep track of your search history. This is done either by manually adding a history entry with &lt;code&gt;History Add&lt;/code&gt; action or automatically on certain successful actions like &lt;code&gt;Replace&lt;/code&gt; and &lt;code&gt;Sync All&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When you would like to pick one of your history entries to reuse, you can use the &lt;code&gt;History Open&lt;/code&gt; action to open the search history as a buffer. From there you can pick an entry that will be auto-filled in.&lt;/p&gt; 
&lt;p&gt;Note that you can edit the history buffer and save just like any other buffer if you need to do some cleanup. The format of a history entry looks like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;optional comment, e.g. My special search&amp;gt;
Engine: &amp;lt;astgrep|astgrep-rules|ripgrep&amp;gt;(|lua)?
Search: &amp;lt;text&amp;gt;
Replace: &amp;lt;text&amp;gt;
Files Filter: &amp;lt;text&amp;gt;
Flags: &amp;lt;text&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; can span multiple line with the aid of a &quot;continuation prefix&quot; (&lt;code&gt;| &lt;/code&gt;). e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Replace: something
| additional replace text
| more replace text
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that some engines might use other inputs. For example, &lt;code&gt;astgrep-rules&lt;/code&gt; uses &lt;code&gt;Rules&lt;/code&gt; instead of &lt;code&gt;Search&lt;/code&gt; and does not have &lt;code&gt;Replace&lt;/code&gt;. History entries are separated by one or more empty lines.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;strong&gt;grug-far&lt;/strong&gt; will ignore lines that do not start with the prefixes above&lt;/p&gt; 
&lt;h3&gt;Seeing the full search command&lt;/h3&gt; 
&lt;p&gt;Sometimes, mostly for debug purposes, it&#39;s useful to see the full CLI command that gets executed on search. You can toggle that on with the &lt;code&gt;Toggle Show rg Command&lt;/code&gt; action, and the command will appear as the first thing in the search results area.&lt;/p&gt; 
&lt;p&gt;The command is shell-escaped, so you can copy and execute it in a shell manually if you need to.&lt;/p&gt; 
&lt;h3&gt;Aborting&lt;/h3&gt; 
&lt;p&gt;If you inadvertently launched a wrong search/sync/replace, you can abort early using the &lt;code&gt;Abort&lt;/code&gt; action.&lt;/p&gt; 
&lt;h3&gt;Swapping search engine&lt;/h3&gt; 
&lt;p&gt;You can swap search engines with the &lt;code&gt;Swap Engine&lt;/code&gt; action. Currently &lt;code&gt;ripgrep&lt;/code&gt; (default), &lt;code&gt;astgrep&lt;/code&gt;, and &lt;code&gt;astgrep-rules&lt;/code&gt; are supported.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ripgrep&lt;/code&gt; uses the &lt;code&gt;rg&lt;/code&gt; CLI command to search and replace. See &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep docs&lt;/a&gt; for more information about CLI options and regex syntax.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;astgrep&lt;/code&gt; and &lt;code&gt;astgrep-rules&lt;/code&gt; are two different interfaces to the &lt;code&gt;sg&lt;/code&gt; CLI command. &lt;code&gt;astgrep&lt;/code&gt; is limited to single &lt;a href=&quot;https://ast-grep.github.io/guide/pattern-syntax.html&quot;&gt;patterns&lt;/a&gt;, with &lt;code&gt;astgrep run --pattern=&amp;lt;your_search_string&amp;gt;&lt;/code&gt;. &lt;code&gt;astgrep-rules&lt;/code&gt; takes YAML input to define &lt;a href=&quot;https://ast-grep.github.io/guide/rule-config.html&quot;&gt;rules&lt;/a&gt;, run with &lt;code&gt;sg scan --inline-rules=&amp;lt;your_rules_yaml&amp;gt;&lt;/code&gt;, which is more verbose but more powerful. See &lt;a href=&quot;https://ast-grep.github.io/guide/introduction.html&quot;&gt;ast-grep docs&lt;/a&gt; for more information. grug-far will attempt to pre-populate reasonable YAML boilerplate when selecting the &lt;code&gt;astgrep-rules&lt;/code&gt; engine. If you&#39;ve been working on a pattern with &lt;code&gt;astgrep&lt;/code&gt;, then swap engine to &lt;code&gt;astgrep-rules&lt;/code&gt;, grug-far will include your existing pattern in the rule so you can build on it from there.&lt;/p&gt; 
&lt;h3&gt;Closing&lt;/h3&gt; 
&lt;p&gt;When you are done, it is recommended to close the buffer with the configured keybinding (see Configuration section above) or just &lt;code&gt;:bd&lt;/code&gt; in order to save on resources as some search results can be quite beefy in size. The advantage of using the &lt;code&gt;Close&lt;/code&gt; action as opposed to just &lt;code&gt;:bd&lt;/code&gt; is that it will ask you to confirm if there is a replace/sync in progress, as those would be aborted.&lt;/p&gt; 
&lt;h3&gt;Filetype&lt;/h3&gt; 
&lt;p&gt;Note that &lt;em&gt;grug-far.nvim&lt;/em&gt; buffers will have &lt;code&gt;filetype=grug-far&lt;/code&gt;, history buffers will have &lt;code&gt;filetype=grug-far-history&lt;/code&gt; and help will have &lt;code&gt;filetype=grug-far-help&lt;/code&gt; if you need filter/exclude them in any situations. Excluding seems to be necessary with copilot at the time of writing this.&lt;/p&gt; 
&lt;h3&gt;⚒️ Lua API&lt;/h3&gt; 
&lt;p&gt;For more control, you can programmatically open a grug-far buffer like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;require(&#39;grug-far&#39;).open(opts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the above is called while in visual mode, it will pre-fill current visual selection as search text. (note, this will also set &lt;code&gt;--fixed-strings&lt;/code&gt; flag as selection can contain special characters)&lt;/p&gt; 
&lt;p&gt;Note that if you want to pre-fill current visual selection from command mode, you would have to use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:lua require(&#39;grug-far&#39;).with_visual_selection(opts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(command mode is the only case where this is necessary in order to force using the visual selection)&lt;/p&gt; 
&lt;p&gt;where &lt;code&gt;opts&lt;/code&gt; will be merged with and override the global plugin options configured at setup time.&lt;/p&gt; 
&lt;p&gt;See here for all the available &lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/opts.lua&quot;&gt;options&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For more API, see &lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/doc/grug-far.txt&quot;&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;🥪 Cookbook&lt;/h3&gt; 
&lt;h4&gt;Launch with the current word under the cursor as the search string&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ prefills = { search = vim.fn.expand(&quot;&amp;lt;cword&amp;gt;&quot;) } })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch with ast-grep engine&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ engine = &#39;astgrep&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch as a transient buffer which is both unlisted and fully deletes itself when not in use&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ transient = true })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch, limiting search/replace to current file&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ prefills = { paths = vim.fn.expand(&quot;%&quot;) } })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch with the current visual selection, searching only current file&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:&amp;lt;C-u&amp;gt;lua require(&#39;grug-far&#39;).with_visual_selection({ prefills = { paths = vim.fn.expand(&quot;%&quot;) } })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch, limiting search to the current buffer visual selection range&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:GrugFarWithin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or as a keymap if you want to go fully lua:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &#39;n&#39;, &#39;x&#39; }, &#39;&amp;lt;leader&amp;gt;si&#39;, function()
  require(&#39;grug-far&#39;).open({ visualSelectionUsage = &#39;operate-within-range&#39; })
end, { desc = &#39;grug-far: Search within range&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch, with @/ register value as the search query, falling back to visual selection&lt;/h4&gt; 
&lt;p&gt;Note that &lt;code&gt;@/&lt;/code&gt; register holds your last &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;, etc search query.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &#39;n&#39;, &#39;x&#39; }, &#39;&amp;lt;leader&amp;gt;ss&#39;, function()
  local search = vim.fn.getreg(&#39;/&#39;)
  -- surround with \b if &quot;word&quot; search (such as when pressing `*`)
  if search and vim.startswith(search, &#39;\\&amp;lt;&#39;) and vim.endswith(search, &#39;\\&amp;gt;&#39;) then
    search = &#39;\\b&#39; .. search:sub(3, -3) .. &#39;\\b&#39;
  end
  require(&#39;grug-far&#39;).open({
    prefills = {
      search = search,
    },
  })
end, { desc = &#39;grug-far: Search using @/ register value or visual selection&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Toggle visibility of a particular instance and set title to a fixed string&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).toggle_instance({ instanceName=&quot;far&quot;, staticTitle=&quot;Find and Replace&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Create a buffer local keybinding to toggle --fixed-strings flag&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;FileType&#39;, {
  group =  vim.api.nvim_create_augroup(&#39;my-grug-far-custom-keybinds&#39;, { clear = true }),
  pattern = { &#39;grug-far&#39; },
  callback = function()
    vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;localleader&amp;gt;w&#39;, function()
      local state = unpack(require(&#39;grug-far&#39;).toggle_flags({ &#39;--fixed-strings&#39; }))
      vim.notify(&#39;grug-far: toggled --fixed-strings &#39; .. (state and &#39;ON&#39; or &#39;OFF&#39;))
    end, { buffer = true })
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Create a buffer local keybinding to open a result location and immediately close grug-far.nvim&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;FileType&#39;, {
  group = vim.api.nvim_create_augroup(&#39;grug-far-keybindings&#39;, { clear = true }),
  pattern = { &#39;grug-far&#39; },
  callback = function()
    vim.api.nvim_buf_set_keymap(0, &#39;n&#39;, &#39;&amp;lt;C-enter&amp;gt;&#39;, &#39;&amp;lt;localleader&amp;gt;o&amp;lt;localleader&amp;gt;c&#39;, {})
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(where &lt;code&gt;&amp;lt;localleader&amp;gt;o&lt;/code&gt; and &lt;code&gt;&amp;lt;localleader&amp;gt;c&lt;/code&gt; are the default keybindings for Open and Close actions. You will need to change them if you set them to something different)&lt;/p&gt; 
&lt;h4&gt;Create a buffer local keybinding to jump back to Search input&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;FileType&#39;, {
  group = vim.api.nvim_create_augroup(&#39;grug-far-keymap&#39;, { clear = true }),
  pattern = { &#39;grug-far&#39; },
  callback = function()
    -- jump back to search input by hitting left arrow in normal mode:
    vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;left&amp;gt;&#39;, function()
      vim.api.nvim_win_set_cursor(vim.fn.bufwinid(0), { 2, 0 })
    end, { buffer = true })
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Add neo-tree integration to open search limited to focused directory or file&lt;/h4&gt; 
&lt;p&gt;Create a hotkey &lt;code&gt;z&lt;/code&gt; in &lt;code&gt;neo-tree&lt;/code&gt; that will create/open a named instance of grug-far with the current directory of the file or directory in focus. On the second trigger, path of the grug-far instance will be updated, leaving other fields intact.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neo tree lazy plugin setup&lt;/summary&gt; 
 &lt;p&gt;Small video of it in action: &lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim/issues/165#issuecomment-2257439367&quot;&gt;https://github.com/MagicDuck/grug-far.nvim/issues/165#issuecomment-2257439367&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  dependencies = &quot;nvim-tree/nvim-web-devicons&quot;,
  config = function()
    local function open_grug_far(prefills)
      local grug_far = require(&quot;grug-far&quot;)

      if not grug_far.has_instance(&quot;explorer&quot;) then
        grug_far.open({ instanceName = &quot;explorer&quot; })
      else
        grug_far.open_instance(&quot;explorer&quot;)
      end
      -- doing it seperately because multiple paths doesn&#39;t open work when passed with open
      -- updating the prefills without clearing the search and other fields
      grug_far.update_instance_prefills(&quot;explorer&quot;, prefills, false)
    end
    require(&quot;neo-tree&quot;).setup {
      commands = {
        -- create a new neo-tree command
        grug_far_replace = function(state)
          local node = state.tree:get_node()
          local prefills = {
            -- also escape the paths if space is there
            -- if you want files to be selected, use &#39;:p&#39; only, see filename-modifiers
            paths = node.type == &quot;directory&quot; and vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:p&quot;))
        or vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:h&quot;)),
          }
          open_grug_far(prefills)
        end,
        -- https://github.com/nvim-neo-tree/neo-tree.nvim/blob/fbb631e818f48591d0c3a590817003d36d0de691/doc/neo-tree.txt#L535
        grug_far_replace_visual = function(state, selected_nodes, callback)
          local paths = {}
          for _, node in pairs(selected_nodes) do
            -- also escape the paths if space is there
            -- if you want files to be selected, use &#39;:p&#39; only, see filename-modifiers
            local path = node.type == &quot;directory&quot; and vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:p&quot;))
        or vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:h&quot;))
            table.insert(paths, path)
          end
          local prefills = { paths = table.concat(paths, &quot;\n&quot;) }
          open_grug_far(prefills)
        end,
      },
      window = {
        mappings = {
          -- map our new command to z
          z = &quot;grug_far_replace&quot;,
        },
      },
      -- rest of your config
    }
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Add oil.nvim integration to open search limited to focused directory&lt;/h4&gt; 
&lt;p&gt;Create a hotkey &lt;code&gt;gs&lt;/code&gt; in &lt;code&gt;oil.nvim&lt;/code&gt; that will create/open a named instance of grug-far with the current directory in focus. On the second trigger, path of the grug-far instance will be updated, leaving other fields intact.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Oil explorer lazy plugin setup&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;stevearc/oil.nvim&quot;,
  config = function()
    local oil = require &quot;oil&quot;
    oil.setup {
      keymaps = {
        -- create a new mapping, gs, to search and replace in the current directory
        gs = {
          callback = function()
            -- get the current directory
            local prefills = { paths = oil.get_current_dir() }

            local grug_far = require &quot;grug-far&quot;
            -- instance check
            if not grug_far.has_instance &quot;explorer&quot; then
              grug_far.open {
                instanceName = &quot;explorer&quot;,
                prefills = prefills,
                staticTitle = &quot;Find and Replace from Explorer&quot;,
              }
            else
              grug_far.open_instance &quot;explorer&quot;
              -- updating the prefills without clearing the search and other fields
              grug_far.update_instance_prefills(&quot;explorer&quot;, prefills, false)
            end
          end,
          desc = &quot;oil: Search in directory&quot;,
        },
      },
      -- rest of your config
    }
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Add mini.files integration to open search limited to focused directory&lt;/h4&gt; 
&lt;p&gt;Create a hotkey &lt;code&gt;gs&lt;/code&gt; in &lt;code&gt;mini.files&lt;/code&gt; that will create/open a named instance of grug-far with the current directory in focus. On the second trigger, the path of the grug-far instance will be updated, leaving other fields intact.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;MiniFiles explorer lazy plugin setup&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;echasnovski/mini.files&quot;,
  config = function()
    local MiniFiles = require &quot;mini.files&quot;

    MiniFiles.setup({
      -- your config
    })

    
    local files_grug_far_replace = function(path)
      -- works only if cursor is on the valid file system entry
      local cur_entry_path = MiniFiles.get_fs_entry().path
      local prefills = { paths = vim.fs.dirname(cur_entry_path) }

      local grug_far = require &quot;grug-far&quot;

      -- instance check
      if not grug_far.has_instance &quot;explorer&quot; then
        grug_far.open {
          instanceName = &quot;explorer&quot;,
          prefills = prefills,
          staticTitle = &quot;Find and Replace from Explorer&quot;,
        }
      else
        grug_far.open_instance &quot;explorer&quot;
        -- updating the prefills without crealing the search and other fields
        grug_far.update_instance_prefills(&quot;explorer&quot;, prefills, false)
      end
    end

    vim.api.nvim_create_autocmd(&quot;User&quot;, {
      pattern = &quot;MiniFilesBufferCreate&quot;,
      callback = function(args)
        vim.keymap.set(&quot;n&quot;, &quot;gs&quot;, files_grug_far_replace, { buffer = args.data.buf_id, desc = &quot;Search in directory&quot; })
      end,
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;❓ Q&amp;amp;A&lt;/h2&gt; 
&lt;h4&gt;1. Getting RPC[Error] ... Document for URI could not be found: file:///.../Grug%20FAR%20-%20...&lt;/h4&gt; 
&lt;p&gt;Chances are that you are using copilot.nvim and the fix is to exclude &lt;code&gt;grug-far&lt;/code&gt; file types in copilot config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;filetypes = {
  [&quot;grug-far&quot;] = false,
  [&quot;grug-far-history&quot;] = false,
  [&quot;grug-far-help&quot;] = false,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;📦 Similar Plugins / Inspiration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-pack/nvim-spectre&quot;&gt;nvim-spectre&lt;/a&gt;: the OG find and replace in a buffer plugin, great inspiration!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt;: lifted &lt;code&gt;rg&lt;/code&gt; healthcheck from there :P&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;: used their beautiful &lt;code&gt;README.md&lt;/code&gt; as a template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/m00qek/plugin-template.nvim/tree/main&quot;&gt;plugin-template.nvim&lt;/a&gt;: super handy template, this plugin is based on it!&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>folke/snacks.nvim</title>
      <link>https://github.com/folke/snacks.nvim</link>
      <description>&lt;p&gt;🍿 A collection of QoL plugins for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🍿 &lt;code&gt;snacks.nvim&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;A collection of small QoL plugins for Neovim.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;!-- toc:start --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Snack&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Setup&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/animate.md&quot;&gt;animate&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Efficient animations including over 45 easing functions &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bigfile.md&quot;&gt;bigfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Deal with big files&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bufdelete.md&quot;&gt;bufdelete&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Delete buffers without disrupting window layout&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dashboard.md&quot;&gt;dashboard&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Beautiful declarative dashboards&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/debug.md&quot;&gt;debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty inspect &amp;amp; backtraces for debugging&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dim.md&quot;&gt;dim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Focus on the active scope by dimming the rest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/explorer.md&quot;&gt;explorer&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A file explorer (picker in disguise)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/git.md&quot;&gt;git&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Git utilities&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/gitbrowse.md&quot;&gt;gitbrowse&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open the current file, branch, commit, or repo in a browser (e.g. GitHub, GitLab, Bitbucket)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/image.md&quot;&gt;image&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Image viewer using Kitty Graphics Protocol, supported by &lt;code&gt;kitty&lt;/code&gt;, &lt;code&gt;wezterm&lt;/code&gt; and &lt;code&gt;ghostty&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/indent.md&quot;&gt;indent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Indent guides and scopes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/input.md&quot;&gt;input&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Better &lt;code&gt;vim.ui.input&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/layout.md&quot;&gt;layout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Window layouts&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/lazygit.md&quot;&gt;lazygit&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open LazyGit in a float, auto-configure colorscheme and integration with Neovim&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notifier.md&quot;&gt;notifier&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notify.md&quot;&gt;notify&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions to work with Neovim&#39;s &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md&quot;&gt;picker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Picker for selecting items&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/profiler.md&quot;&gt;profiler&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Neovim lua profiler&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/quickfile.md&quot;&gt;quickfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;When doing &lt;code&gt;nvim somefile.txt&lt;/code&gt;, it will render the file as quickly as possible, before loading your plugins.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md&quot;&gt;rename&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;LSP-integrated file renaming with support for plugins like &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/echasnovski/mini.files&quot;&gt;mini.files&lt;/a&gt;.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scope.md&quot;&gt;scope&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scope detection, text objects and jumping based on treesitter or indent&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scratch.md&quot;&gt;scratch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scratch buffers with a persistent file&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scroll.md&quot;&gt;scroll&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Smooth scrolling&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/statuscolumn.md&quot;&gt;statuscolumn&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty status column&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/terminal.md&quot;&gt;terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and toggle floating/split terminals&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/toggle.md&quot;&gt;toggle&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle keymaps integrated with which-key icons / colors&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/util.md&quot;&gt;util&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions for Snacks &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/win.md&quot;&gt;win&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and manage floating windows or splits&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/words.md&quot;&gt;words&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Auto-show LSP references and quickly navigate between them&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/zen.md&quot;&gt;zen&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Zen mode • distraction-free coding&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- toc:end --&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; 
 &lt;li&gt;for proper icons support: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important] A couple of plugins &lt;strong&gt;require&lt;/strong&gt; &lt;code&gt;snacks.nvim&lt;/code&gt; to be set-up early. Setup creates some autocmds and does not load any plugins. Check the &lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/lua/snacks/init.lua&quot;&gt;code&lt;/a&gt; to see what it does.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!caution] You need to explicitly pass options for a plugin or set &lt;code&gt;enabled = true&lt;/code&gt; to enable it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!tip] It&#39;s a good idea to run &lt;code&gt;:checkhealth snacks&lt;/code&gt; to see if everything is set up correctly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    picker = { enabled = true },
    notifier = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For an in-depth setup of &lt;code&gt;snacks.nvim&lt;/code&gt; with &lt;code&gt;lazy.nvim&lt;/code&gt;, check the &lt;a href=&quot;https://github.com/folke/snacks.nvim?tab=readme-ov-file#-usage&quot;&gt;example&lt;/a&gt; below.&lt;/p&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;Please refer to the readme of each plugin for their specific configuration.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class snacks.Config
---@field animate? snacks.animate.Config
---@field bigfile? snacks.bigfile.Config
---@field dashboard? snacks.dashboard.Config
---@field dim? snacks.dim.Config
---@field explorer? snacks.explorer.Config
---@field gitbrowse? snacks.gitbrowse.Config
---@field image? snacks.image.Config
---@field indent? snacks.indent.Config
---@field input? snacks.input.Config
---@field layout? snacks.layout.Config
---@field lazygit? snacks.lazygit.Config
---@field notifier? snacks.notifier.Config
---@field picker? snacks.picker.Config
---@field profiler? snacks.profiler.Config
---@field quickfile? snacks.quickfile.Config
---@field scope? snacks.scope.Config
---@field scratch? snacks.scratch.Config
---@field scroll? snacks.scroll.Config
---@field statuscolumn? snacks.statuscolumn.Config
---@field terminal? snacks.terminal.Config
---@field toggle? snacks.toggle.Config
---@field win? snacks.win.Config
---@field words? snacks.words.Config
---@field zen? snacks.zen.Config
---@field styles? table&amp;lt;string, snacks.win.Config&amp;gt;
---@field image? snacks.image.Config|{}
{
  image = {
    -- define these here, so that we don&#39;t need to load the image module
    formats = {
      &quot;png&quot;,
      &quot;jpg&quot;,
      &quot;jpeg&quot;,
      &quot;gif&quot;,
      &quot;bmp&quot;,
      &quot;webp&quot;,
      &quot;tiff&quot;,
      &quot;heic&quot;,
      &quot;avif&quot;,
      &quot;mp4&quot;,
      &quot;mov&quot;,
      &quot;avi&quot;,
      &quot;mkv&quot;,
      &quot;webm&quot;,
      &quot;pdf&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;p&gt;Some plugins have examples in their documentation. You can include them in your config like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  dashboard = { example = &quot;github&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to customize options for a plugin after they have been resolved, you can use the &lt;code&gt;config&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  gitbrowse = {
    config = function(opts, defaults)
      table.insert(opts.remote_patterns, { &quot;my&quot;, &quot;custom pattern&quot; })
    end
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;p&gt;See the example below for how to configure &lt;code&gt;snacks.nvim&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- example:start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    notifier = {
      enabled = true,
      timeout = 3000,
    },
    picker = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
    styles = {
      notification = {
        -- wo = { wrap = true } -- Wrap notifications
      }
    }
  },
  keys = {
    -- Top Pickers &amp;amp; Explorer
    { &quot;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&quot;, function() Snacks.picker.smart() end, desc = &quot;Smart Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;,&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;/&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;:&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;, function() Snacks.picker.notifications() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;e&quot;, function() Snacks.explorer() end, desc = &quot;File Explorer&quot; },
    -- find
    { &quot;&amp;lt;leader&amp;gt;fb&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;fc&quot;, function() Snacks.picker.files({ cwd = vim.fn.stdpath(&quot;config&quot;) }) end, desc = &quot;Find Config File&quot; },
    { &quot;&amp;lt;leader&amp;gt;ff&quot;, function() Snacks.picker.files() end, desc = &quot;Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fg&quot;, function() Snacks.picker.git_files() end, desc = &quot;Find Git Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fp&quot;, function() Snacks.picker.projects() end, desc = &quot;Projects&quot; },
    { &quot;&amp;lt;leader&amp;gt;fr&quot;, function() Snacks.picker.recent() end, desc = &quot;Recent&quot; },
    -- git
    { &quot;&amp;lt;leader&amp;gt;gb&quot;, function() Snacks.picker.git_branches() end, desc = &quot;Git Branches&quot; },
    { &quot;&amp;lt;leader&amp;gt;gl&quot;, function() Snacks.picker.git_log() end, desc = &quot;Git Log&quot; },
    { &quot;&amp;lt;leader&amp;gt;gL&quot;, function() Snacks.picker.git_log_line() end, desc = &quot;Git Log Line&quot; },
    { &quot;&amp;lt;leader&amp;gt;gs&quot;, function() Snacks.picker.git_status() end, desc = &quot;Git Status&quot; },
    { &quot;&amp;lt;leader&amp;gt;gS&quot;, function() Snacks.picker.git_stash() end, desc = &quot;Git Stash&quot; },
    { &quot;&amp;lt;leader&amp;gt;gd&quot;, function() Snacks.picker.git_diff() end, desc = &quot;Git Diff (Hunks)&quot; },
    { &quot;&amp;lt;leader&amp;gt;gf&quot;, function() Snacks.picker.git_log_file() end, desc = &quot;Git Log File&quot; },
    -- Grep
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sB&quot;, function() Snacks.picker.grep_buffers() end, desc = &quot;Grep Open Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;sg&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;sw&quot;, function() Snacks.picker.grep_word() end, desc = &quot;Visual selection or word&quot;, mode = { &quot;n&quot;, &quot;x&quot; } },
    -- search
    { &#39;&amp;lt;leader&amp;gt;s&quot;&#39;, function() Snacks.picker.registers() end, desc = &quot;Registers&quot; },
    { &#39;&amp;lt;leader&amp;gt;s/&#39;, function() Snacks.picker.search_history() end, desc = &quot;Search History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sa&quot;, function() Snacks.picker.autocmds() end, desc = &quot;Autocmds&quot; },
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sc&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sC&quot;, function() Snacks.picker.commands() end, desc = &quot;Commands&quot; },
    { &quot;&amp;lt;leader&amp;gt;sd&quot;, function() Snacks.picker.diagnostics() end, desc = &quot;Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sD&quot;, function() Snacks.picker.diagnostics_buffer() end, desc = &quot;Buffer Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sh&quot;, function() Snacks.picker.help() end, desc = &quot;Help Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sH&quot;, function() Snacks.picker.highlights() end, desc = &quot;Highlights&quot; },
    { &quot;&amp;lt;leader&amp;gt;si&quot;, function() Snacks.picker.icons() end, desc = &quot;Icons&quot; },
    { &quot;&amp;lt;leader&amp;gt;sj&quot;, function() Snacks.picker.jumps() end, desc = &quot;Jumps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sk&quot;, function() Snacks.picker.keymaps() end, desc = &quot;Keymaps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sl&quot;, function() Snacks.picker.loclist() end, desc = &quot;Location List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sm&quot;, function() Snacks.picker.marks() end, desc = &quot;Marks&quot; },
    { &quot;&amp;lt;leader&amp;gt;sM&quot;, function() Snacks.picker.man() end, desc = &quot;Man Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sp&quot;, function() Snacks.picker.lazy() end, desc = &quot;Search for Plugin Spec&quot; },
    { &quot;&amp;lt;leader&amp;gt;sq&quot;, function() Snacks.picker.qflist() end, desc = &quot;Quickfix List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sR&quot;, function() Snacks.picker.resume() end, desc = &quot;Resume&quot; },
    { &quot;&amp;lt;leader&amp;gt;su&quot;, function() Snacks.picker.undo() end, desc = &quot;Undo History&quot; },
    { &quot;&amp;lt;leader&amp;gt;uC&quot;, function() Snacks.picker.colorschemes() end, desc = &quot;Colorschemes&quot; },
    -- LSP
    { &quot;gd&quot;, function() Snacks.picker.lsp_definitions() end, desc = &quot;Goto Definition&quot; },
    { &quot;gD&quot;, function() Snacks.picker.lsp_declarations() end, desc = &quot;Goto Declaration&quot; },
    { &quot;gr&quot;, function() Snacks.picker.lsp_references() end, nowait = true, desc = &quot;References&quot; },
    { &quot;gI&quot;, function() Snacks.picker.lsp_implementations() end, desc = &quot;Goto Implementation&quot; },
    { &quot;gy&quot;, function() Snacks.picker.lsp_type_definitions() end, desc = &quot;Goto T[y]pe Definition&quot; },
    { &quot;&amp;lt;leader&amp;gt;ss&quot;, function() Snacks.picker.lsp_symbols() end, desc = &quot;LSP Symbols&quot; },
    { &quot;&amp;lt;leader&amp;gt;sS&quot;, function() Snacks.picker.lsp_workspace_symbols() end, desc = &quot;LSP Workspace Symbols&quot; },
    -- Other
    { &quot;&amp;lt;leader&amp;gt;z&quot;,  function() Snacks.zen() end, desc = &quot;Toggle Zen Mode&quot; },
    { &quot;&amp;lt;leader&amp;gt;Z&quot;,  function() Snacks.zen.zoom() end, desc = &quot;Toggle Zoom&quot; },
    { &quot;&amp;lt;leader&amp;gt;.&quot;,  function() Snacks.scratch() end, desc = &quot;Toggle Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;S&quot;,  function() Snacks.scratch.select() end, desc = &quot;Select Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;,  function() Snacks.notifier.show_history() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;bd&quot;, function() Snacks.bufdelete() end, desc = &quot;Delete Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;cR&quot;, function() Snacks.rename.rename_file() end, desc = &quot;Rename File&quot; },
    { &quot;&amp;lt;leader&amp;gt;gB&quot;, function() Snacks.gitbrowse() end, desc = &quot;Git Browse&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
    { &quot;&amp;lt;leader&amp;gt;gg&quot;, function() Snacks.lazygit() end, desc = &quot;Lazygit&quot; },
    { &quot;&amp;lt;leader&amp;gt;un&quot;, function() Snacks.notifier.hide() end, desc = &quot;Dismiss All Notifications&quot; },
    { &quot;&amp;lt;c-/&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;Toggle Terminal&quot; },
    { &quot;&amp;lt;c-_&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;which_key_ignore&quot; },
    { &quot;]]&quot;,         function() Snacks.words.jump(vim.v.count1) end, desc = &quot;Next Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    { &quot;[[&quot;,         function() Snacks.words.jump(-vim.v.count1) end, desc = &quot;Prev Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    {
      &quot;&amp;lt;leader&amp;gt;N&quot;,
      desc = &quot;Neovim News&quot;,
      function()
        Snacks.win({
          file = vim.api.nvim_get_runtime_file(&quot;doc/news.txt&quot;, false)[1],
          width = 0.6,
          height = 0.6,
          wo = {
            spell = false,
            wrap = false,
            signcolumn = &quot;yes&quot;,
            statuscolumn = &quot; &quot;,
            conceallevel = 3,
          },
        })
      end,
    }
  },
  init = function()
    vim.api.nvim_create_autocmd(&quot;User&quot;, {
      pattern = &quot;VeryLazy&quot;,
      callback = function()
        -- Setup some globals for debugging (lazy-loaded)
        _G.dd = function(...)
          Snacks.debug.inspect(...)
        end
        _G.bt = function()
          Snacks.debug.backtrace()
        end
        vim.print = _G.dd -- Override print to use snacks for `:=` command

        -- Create some toggle mappings
        Snacks.toggle.option(&quot;spell&quot;, { name = &quot;Spelling&quot; }):map(&quot;&amp;lt;leader&amp;gt;us&quot;)
        Snacks.toggle.option(&quot;wrap&quot;, { name = &quot;Wrap&quot; }):map(&quot;&amp;lt;leader&amp;gt;uw&quot;)
        Snacks.toggle.option(&quot;relativenumber&quot;, { name = &quot;Relative Number&quot; }):map(&quot;&amp;lt;leader&amp;gt;uL&quot;)
        Snacks.toggle.diagnostics():map(&quot;&amp;lt;leader&amp;gt;ud&quot;)
        Snacks.toggle.line_number():map(&quot;&amp;lt;leader&amp;gt;ul&quot;)
        Snacks.toggle.option(&quot;conceallevel&quot;, { off = 0, on = vim.o.conceallevel &amp;gt; 0 and vim.o.conceallevel or 2 }):map(&quot;&amp;lt;leader&amp;gt;uc&quot;)
        Snacks.toggle.treesitter():map(&quot;&amp;lt;leader&amp;gt;uT&quot;)
        Snacks.toggle.option(&quot;background&quot;, { off = &quot;light&quot;, on = &quot;dark&quot;, name = &quot;Dark Background&quot; }):map(&quot;&amp;lt;leader&amp;gt;ub&quot;)
        Snacks.toggle.inlay_hints():map(&quot;&amp;lt;leader&amp;gt;uh&quot;)
        Snacks.toggle.indent():map(&quot;&amp;lt;leader&amp;gt;ug&quot;)
        Snacks.toggle.dim():map(&quot;&amp;lt;leader&amp;gt;uD&quot;)
      end,
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- example:end --&gt; 
&lt;h2&gt;🌈 Highlight Groups&lt;/h2&gt; 
&lt;p&gt;Snacks defines &lt;strong&gt;a lot&lt;/strong&gt; of highlight groups and it&#39;s impossible to document them all.&lt;/p&gt; 
&lt;p&gt;Instead, you can use the picker to see all the highlight groups.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;Snacks.picker.highlights({pattern = &quot;hl_group:^Snacks&quot;})
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>overextended/ox_lib</title>
      <link>https://github.com/overextended/ox_lib</link>
      <description>&lt;p&gt;A FiveM resource and script library for Lua and JS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ox_lib&lt;/h1&gt; 
&lt;p&gt;A FiveM library and resource implementing reusable modules, methods, and UI elements.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/overextended/ox_lib/total?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/overextended/ox_lib/latest/total?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/overextended/ox_lib?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/overextended/ox_lib?logo=github&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://overextended.dev/ox_lib&quot;&gt;https://overextended.dev/ox_lib&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;💾 Download&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/overextended/ox_lib/releases/latest/download/ox_lib.zip&quot;&gt;https://github.com/overextended/ox_lib/releases/latest/download/ox_lib.zip&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;npm Package&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/@overextended/ox_lib&quot;&gt;https://www.npmjs.com/package/@overextended/ox_lib&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Lua Language Server&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sumneko.lua&quot;&gt;Lua Language Server&lt;/a&gt; to ease development with annotations, type checking, diagnostics, and more.&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=overextended.cfxlua-vscode&quot;&gt;cfxlua-vscode&lt;/a&gt; to add natives and cfxlua runtime declarations to LLS.&lt;/li&gt; 
 &lt;li&gt;You can load ox_lib into your global development environment by modifying workspace/user settings &quot;Lua.workspace.library&quot; with the resource path. 
  &lt;ul&gt; 
   &lt;li&gt;e.g. &quot;c:/fxserver/resources/ox_lib&quot;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Saghen/blink.cmp</title>
      <link>https://github.com/Saghen/blink.cmp</link>
      <description>&lt;p&gt;Performant, batteries-included completion plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This plugin is &lt;em&gt;beta&lt;/em&gt; quality. Expect breaking changes and many bugs&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Blink Completion (blink.cmp)&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;blink.cmp&lt;/strong&gt; is a completion plugin with support for LSPs and external sources that updates on every keystroke with minimal overhead (0.5-4ms async). It uses an &lt;a href=&quot;https://cmp.saghen.dev/configuration/fuzzy.html#rust-vs-lua-implementation&quot;&gt;optional&lt;/a&gt; custom &lt;a href=&quot;https://github.com/saghen/frizbee&quot;&gt;fuzzy matcher&lt;/a&gt; to easily handle 20k+ items. It provides extensibility via pluggable sources (LSP, snippets, etc), component based rendering and scripting for the configuration.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/9849e57a-3c2c-49a8-959c-dbb7fef78c80&quot;&gt;https://github.com/user-attachments/assets/9849e57a-3c2c-49a8-959c-dbb7fef78c80&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Works out of the box with no additional configuration&lt;/li&gt; 
 &lt;li&gt;Updates on every keystroke (0.5-4ms async, single core)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/saghen/frizbee&quot;&gt;Typo resistant fuzzy&lt;/a&gt; with frecency and proximity bonus&lt;/li&gt; 
 &lt;li&gt;Extensive LSP support (&lt;a href=&quot;https://raw.githubusercontent.com/Saghen/blink.cmp/main/doc/development/lsp-tracker.md&quot;&gt;tracker&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/configuration/snippets.html&quot;&gt;Snippet support&lt;/a&gt;: native &lt;code&gt;vim.snippet&lt;/code&gt; (including &lt;code&gt;friendly-snippets&lt;/code&gt;), &lt;code&gt;LuaSnip&lt;/code&gt; and &lt;code&gt;mini.snippets&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;External sources support (&lt;a href=&quot;https://cmp.saghen.dev/configuration/sources.html#community-sources&quot;&gt;community sources&lt;/a&gt; and &lt;a href=&quot;https://github.com/saghen/blink.compat&quot;&gt;compatibility layer for &lt;code&gt;nvim-cmp&lt;/code&gt; sources&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Auto-bracket support based on semantic tokens&lt;/li&gt; 
 &lt;li&gt;Signature help (experimental, opt-in)&lt;/li&gt; 
 &lt;li&gt;Command line completion&lt;/li&gt; 
 &lt;li&gt;Terminal completion (Nightly only! No source for shell completions exists yet, contributions welcome!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/#compared-to-nvim-cmp&quot;&gt;Comparison with nvim-cmp&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Head over to the &lt;a href=&quot;https://cmp.saghen.dev/installation&quot;&gt;documentation website&lt;/a&gt; for installation instructions and configuration options.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/&quot;&gt;@hrsh7th&lt;/a&gt; nvim-cmp used as inspiration and cmp-path/cmp-cmdline implementations modified for path/cmdline sources&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/garymjr&quot;&gt;@garymjr&lt;/a&gt; nvim-snippets implementation modified for snippets source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/redxtech&quot;&gt;@redxtech&lt;/a&gt; Help with design and testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aaditya-sahay&quot;&gt;@aaditya-sahay&lt;/a&gt; Help with rust, design and testing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stefanboca&quot;&gt;@stefanboca&lt;/a&gt; Author of &lt;a href=&quot;https://github.com/saghen/blink.compat&quot;&gt;blink.compat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lopi-py&quot;&gt;@lopi-py&lt;/a&gt; Windowing code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scottmckendry&quot;&gt;@scottmckendry&lt;/a&gt; CI and prebuilt binaries&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Balssh&quot;&gt;@balssh&lt;/a&gt; + &lt;a href=&quot;https://github.com/konradmalik&quot;&gt;@konradmalik&lt;/a&gt; Nix flake, nixpkg and nixvim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/abeldekat&quot;&gt;@abeldekat&lt;/a&gt; mini.snippets source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wurli&quot;&gt;@wurli&lt;/a&gt; Terminal completions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mikavilpas&quot;&gt;@mikavilpas&lt;/a&gt; + &lt;a href=&quot;https://github.com/xzbdmw&quot;&gt;@xzbdmw&lt;/a&gt; Dot-repeat (&lt;code&gt;.&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/soifou&quot;&gt;@soifou&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FerretDetective&quot;&gt;@FerretDetective&lt;/a&gt; &lt;code&gt;complete_func&lt;/code&gt; source&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ThePrimeagen/refactoring.nvim</title>
      <link>https://github.com/ThePrimeagen/refactoring.nvim</link>
      <description>&lt;p&gt;The Refactoring library based off the Refactoring book by Martin Fowler&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;refactoring.nvim&lt;/h1&gt; 
 &lt;h5&gt;The Refactoring library based off the Refactoring book by Martin Fowler&lt;/h5&gt; 
 &lt;h6&gt;&#39;If I use an environment that has good automated refactorings, I can trust those refactorings&#39; - Martin Fowler&lt;/h6&gt; 
 &lt;p&gt;&lt;a href=&quot;http://www.lua.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&quot; alt=&quot;Lua&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://neovim.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim%200.10-green.svg?style=for-the-badge&amp;amp;logo=neovim&quot; alt=&quot;Neovim 0.10&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/Work%20In%20Progress-orange?style=for-the-badge&quot; alt=&quot;Work In Progress&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#packer&quot;&gt;Setup Using Packer&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#lazy&quot;&gt;Setup Using Lazy&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#quickstart&quot;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#features&quot;&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#supported-languages&quot;&gt;Supported Languages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#refactoring-features&quot;&gt;Refactoring Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#debug-features&quot;&gt;Debug Features&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#configuration&quot;&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring&quot;&gt;Configuration for Refactoring Operations&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-command&quot;&gt;Ex Commands&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-direct&quot;&gt;Lua API&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-builtin&quot;&gt;Using Built-In Neovim Selection&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-telescope&quot;&gt;Using Telescope&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug&quot;&gt;Configuration for Debug Operations&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification&quot;&gt;Customizing Printf and Print Var Statements&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification-printf&quot;&gt;Customizing Printf Statements&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification-print-var&quot;&gt;Customizing Print Var Statements&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-119-custom&quot;&gt;Customizing Extract Variable Statements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-prompt&quot;&gt;Configuration for Type Prompt Operations&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;a name=&quot;requirements&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim 0.10&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Treesitter&lt;/li&gt; 
 &lt;li&gt;Plenary&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Setup Using Packer&lt;a name=&quot;packer&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
    &quot;ThePrimeagen/refactoring.nvim&quot;,
    requires = {
        {&quot;nvim-lua/plenary.nvim&quot;},
        {&quot;nvim-treesitter/nvim-treesitter&quot;}
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setup Using Lazy&lt;a name=&quot;lazy&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  {
    &quot;ThePrimeagen/refactoring.nvim&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;nvim-treesitter/nvim-treesitter&quot;,
    },
    lazy = false,
    config = function()
      require(&quot;refactoring&quot;).setup()
    end,
  },
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Quickstart&lt;a name=&quot;quickstart&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;a name=&quot;features&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Supported Languages&lt;a name=&quot;supported-languages&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Given that this is a work in progress, the languages supported for the operations listed below is &lt;strong&gt;constantly changing&lt;/strong&gt;. As of now, these languages are supported (with individual support for each function may vary):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;TypeScript&lt;/li&gt; 
 &lt;li&gt;JavaScript&lt;/li&gt; 
 &lt;li&gt;Lua&lt;/li&gt; 
 &lt;li&gt;C/C++&lt;/li&gt; 
 &lt;li&gt;Golang&lt;/li&gt; 
 &lt;li&gt;Python&lt;/li&gt; 
 &lt;li&gt;Java&lt;/li&gt; 
 &lt;li&gt;PHP&lt;/li&gt; 
 &lt;li&gt;Ruby&lt;/li&gt; 
 &lt;li&gt;C#&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Refactoring Features&lt;a name=&quot;refactoring-features&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for various common refactoring operations 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;106: Extract Function&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Extracts the last highlighted code from visual mode to a separate function&lt;/li&gt; 
     &lt;li&gt;Optionally prompts for function param types and return types (see &lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-prompt&quot;&gt;configuration for type prompt operations&lt;/a&gt;)&lt;/li&gt; 
     &lt;li&gt;Also possible to Extract Block.&lt;/li&gt; 
     &lt;li&gt;Both Extract Function and Extract Block have the capability to extract to a separate file.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;115: Inline Function&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Inverse of extract function&lt;/li&gt; 
     &lt;li&gt;In normal mode, inline occurrences of the function under the cursor&lt;/li&gt; 
     &lt;li&gt;The function under the cursor has to be the declaration of the function&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;119: Extract Variable&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;In visual mode, extracts occurrences of a selected expression to its own variable, replacing occurrences of that expression with the variable&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;123: Inline Variable&lt;/strong&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Inverse of extract variable&lt;/li&gt; 
     &lt;li&gt;Replaces all occurrences of a variable with its value&lt;/li&gt; 
     &lt;li&gt;Can be used in normal mode or visual mode 
      &lt;ul&gt; 
       &lt;li&gt;Using this function in normal mode will automatically find the variable under the cursor and inline it&lt;/li&gt; 
       &lt;li&gt;Using this function in visual mode will find the variable(s) in the visual selection. 
        &lt;ul&gt; 
         &lt;li&gt;If there is more than one variable in the selection, the plugin will prompt for which variable to inline,&lt;/li&gt; 
         &lt;li&gt;If there is only one variable in the visual selection, it will automatically inline that variable&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Debug Features&lt;a name=&quot;debug-features&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Also comes with various useful features for debugging 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Printf:&lt;/strong&gt; Automated insertion of print statement to mark the calling of a function 
    &lt;ul&gt; 
     &lt;li&gt;dot-repeatable&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Print var:&lt;/strong&gt; Automated insertion of print statement to print a variable at a given point in the code. This map can be made with either visual or normal mode: 
    &lt;ul&gt; 
     &lt;li&gt;Using this function in visual mode will print out whatever is in the visual selection.&lt;/li&gt; 
     &lt;li&gt;Using this function in normal mode will print out the identifier under the cursor&lt;/li&gt; 
     &lt;li&gt;dot-repeatable&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Cleanup:&lt;/strong&gt; Automated cleanup of all print statements generated by the plugin&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;a name=&quot;configuration&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;There are many ways to configure this plugin. Below are some example configurations.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Setup Function&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;No matter which configuration option you use, you must first call the setup function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).setup({})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here are all the available options for the setup function and their defaults:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).setup({
    prompt_func_return_type = {
        go = false,
        java = false,

        cpp = false,
        c = false,
        h = false,
        hpp = false,
        cxx = false,
    },
    prompt_func_param_type = {
        go = false,
        java = false,

        cpp = false,
        c = false,
        h = false,
        hpp = false,
        cxx = false,
    },
    printf_statements = {},
    print_var_statements = {},
    show_success_message = false, -- shows a message with information about the refactor on success
                                  -- i.e. [Refactor] Inlined 3 variable occurrences
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See each of the sections below for details on each configuration option.&lt;/p&gt; 
&lt;h3&gt;Configuration for Refactoring Operations&lt;a name=&quot;config-refactoring&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;h4&gt;Ex Commands &lt;a name=&quot;config-refactoring-command&quot;&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;The plugin offers the &lt;code&gt;:Refactor&lt;/code&gt; command as an alternative to the Lua API.&lt;/p&gt; 
&lt;p&gt;The first argument to the command selects the type of refactor to perform. Additional arguments will be passed to each refactor if needed (e.g. the name of the extracted function for &lt;code&gt;extract&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;The first argument can be tab completed, so there is no need to memorize them all. (e.g. &lt;code&gt;:Refactor e&amp;lt;tab&amp;gt;&lt;/code&gt; will suggest &lt;code&gt;extract_block_to_file&lt;/code&gt;, &lt;code&gt;extract&lt;/code&gt;, &lt;code&gt;extract_block&lt;/code&gt;, &lt;code&gt;extract_var&lt;/code&gt; and &lt;code&gt;extract_to_file&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;The main advantage of using an Ex command instead of the Lua API is that you will be able to preview the changes made by the refactor before committing to them.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ThePrimeagen/refactoring.nvim/assets/53507599/6ad58376-c503-4504-ab07-3590ae9a6c75&quot;&gt;https://github.com/ThePrimeagen/refactoring.nvim/assets/53507599/6ad58376-c503-4504-ab07-3590ae9a6c75&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The command can also be used in mappings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set(&quot;x&quot;, &quot;&amp;lt;leader&amp;gt;re&quot;, &quot;:Refactor extract &quot;)
vim.keymap.set(&quot;x&quot;, &quot;&amp;lt;leader&amp;gt;rf&quot;, &quot;:Refactor extract_to_file &quot;)

vim.keymap.set(&quot;x&quot;, &quot;&amp;lt;leader&amp;gt;rv&quot;, &quot;:Refactor extract_var &quot;)

vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;ri&quot;, &quot;:Refactor inline_var&quot;)

vim.keymap.set( &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;rI&quot;, &quot;:Refactor inline_func&quot;)

vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;rb&quot;, &quot;:Refactor extract_block&quot;)
vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;rbf&quot;, &quot;:Refactor extract_block_to_file&quot;)

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt; &lt;/code&gt; (space) at the end of some mappings is intentional because those mappings expect an additional argument (all of these mappings leave the user in command mode to utilize the preview command feature).&lt;/p&gt; 
&lt;h4&gt;Lua API &lt;a name=&quot;config-refactoring-direct&quot;&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;If you want to make remaps for a specific refactoring operation, you can do so by configuring the plugin like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;re&quot;, function() return require(&#39;refactoring&#39;).refactor(&#39;Extract Function&#39;) end, { expr = true })
vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;rf&quot;, function() return require(&#39;refactoring&#39;).refactor(&#39;Extract Function To File&#39;) end, { expr = true })
vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;rv&quot;, function() return require(&#39;refactoring&#39;).refactor(&#39;Extract Variable&#39;) end, { expr = true })
vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;rI&quot;, function() return require(&#39;refactoring&#39;).refactor(&#39;Inline Function&#39;) end, { expr = true })
vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;ri&quot;, function() return require(&#39;refactoring&#39;).refactor(&#39;Inline Variable&#39;) end, { expr = true })

vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;rbb&quot;, function() return require(&#39;refactoring&#39;).refactor(&#39;Extract Block&#39;) end, { expr = true })
vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;&amp;lt;leader&amp;gt;rbf&quot;, function() return require(&#39;refactoring&#39;).refactor(&#39;Extract Block To File&#39;) end, { expr = true })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;IMPORTANT: the keymaps &lt;strong&gt;MUST&lt;/strong&gt; to be created using the &lt;code&gt;{ expr = true }&lt;/code&gt; option and return the value of the &lt;code&gt;require(&#39;refactoring&#39;).refactor&lt;/code&gt; function (like in the example above).&lt;/p&gt; 
&lt;h4&gt;Using Built-In Neovim Selection&lt;a name=&quot;config-refactoring-builtin&quot;&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;You can also set up the plugin to prompt for a refactoring operation to apply using Neovim&#39;s built in selection API. Here is an example remap to demonstrate this functionality:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- prompt for a refactor to apply when the remap is triggered
vim.keymap.set(
    {&quot;n&quot;, &quot;x&quot;},
    &quot;&amp;lt;leader&amp;gt;rr&quot;,
    function() require(&#39;refactoring&#39;).select_refactor() end
)
-- Note that not all refactor support both normal and visual mode
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;select_refactor()&lt;/code&gt; uses &lt;code&gt;vim.ui.input&lt;/code&gt; by default to input the arguments (if needed). If you want to use the Ex command to get the preview of the changes you can use the &lt;code&gt;prefer_ex_cmd&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).select_refactor({prefer_ex_cmd = true})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using Telescope&lt;a name=&quot;config-refactoring-telescope&quot;&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;If you would prefer to use Telescope to choose a refactor, you can do so using the &lt;strong&gt;Telescope extension.&lt;/strong&gt; Here is an example config for this setup:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- load refactoring Telescope extension
require(&quot;telescope&quot;).load_extension(&quot;refactoring&quot;)

vim.keymap.set(
	{&quot;n&quot;, &quot;x&quot;},
	&quot;&amp;lt;leader&amp;gt;rr&quot;,
	function() require(&#39;telescope&#39;).extensions.refactoring.refactors() end
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration for Debug Operations&lt;a name=&quot;config-debug&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Finally, you can configure remaps for the debug operations of this plugin like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- You can also use below = true here to to change the position of the printf
-- statement (or set two remaps for either one). This remap must be made in normal mode.
vim.keymap.set(
	&quot;n&quot;,
	&quot;&amp;lt;leader&amp;gt;rp&quot;,
	function() require(&#39;refactoring&#39;).debug.printf({below = false}) end
)

-- Print var

vim.keymap.set({&quot;x&quot;, &quot;n&quot;}, &quot;&amp;lt;leader&amp;gt;rv&quot;, function() require(&#39;refactoring&#39;).debug.print_var() end)
-- Supports both visual and normal mode

vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;rc&quot;, function() require(&#39;refactoring&#39;).debug.cleanup({}) end)
-- Supports only normal mode
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Customizing Printf and Print Var Statements&lt;a name=&quot;config-debug-stringification&quot;&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;It is possible to override the statements used in the printf and print var functionalities.&lt;/p&gt; 
&lt;h5&gt;Customizing Printf Statements&lt;a name=&quot;config-debug-stringification-printf&quot;&gt;&lt;/a&gt;&lt;/h5&gt; 
&lt;p&gt;You can add to the printf statements for any language by adding something like the below to your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).setup({
  -- overriding printf statement for cpp
  printf_statements = {
      -- add a custom printf statement for cpp
      cpp = {
          &#39;std::cout &amp;lt;&amp;lt; &quot;%s&quot; &amp;lt;&amp;lt; std::endl;&#39;
      }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In any custom printf statement, it is possible to optionally add a max of &lt;strong&gt;one %s&lt;/strong&gt; pattern, which is where the debug path will go. For an example custom printf statement, go to &lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/lua/refactoring/tests/debug/printf&quot;&gt;this folder&lt;/a&gt;, select your language, and click on &lt;code&gt;multiple-statements/printf.config&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Customizing Print Var Statements&lt;a name=&quot;config-debug-stringification-print-var&quot;&gt;&lt;/a&gt;&lt;/h5&gt; 
&lt;p&gt;The print var functionality can also be extended for any given language, as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).setup({
  -- overriding printf statement for cpp
  print_var_statements = {
      -- add a custom print var statement for cpp
      cpp = {
          &#39;printf(&quot;a custom statement %%s %s&quot;, %s)&#39;
      }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In any custom print var statement, it is possible to optionally add a max of &lt;strong&gt;two %s&lt;/strong&gt; patterns, which is where the debug path and the actual variable reference will go, respectively. To add a literal &quot;%s&quot; to the string, escape the sequence like this: &lt;code&gt;%%s&lt;/code&gt;. For an example custom print var statement, go to &lt;a href=&quot;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/lua/refactoring/tests/debug/print_var&quot;&gt;this folder&lt;/a&gt;, select your language, and view &lt;code&gt;multiple-statements/print_var.config&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; for either of these functions, if you have multiple custom statements, the plugin will prompt for which one should be inserted. If you just have one custom statement in your config, it will override the default automatically.&lt;/p&gt; 
&lt;h3&gt;Customizing Extract variable Statements&lt;a name=&quot;config-119-custom&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When performing an &lt;code&gt;extract_var&lt;/code&gt; refactor operation, you can custom how the new variable would be declared by setting configuration like the below example.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).setup({
  -- overriding extract statement for go
  extract_var_statements = {
    go = &quot;%s := %s // poggers&quot;
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration for Type Prompt Operations&lt;a name=&quot;config-prompt&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;For certain languages like Golang, types are required for functions that return an object(s) and parameters of functions. Unfortunately, for some parameters and functions there is no way to automatically find their type. In those instances, we want to provide a way to input a type instead of inserting a placeholder value.&lt;/p&gt; 
&lt;p&gt;By default all prompts are turned off. The configuration below shows how to enable prompts for all the languages currently supported.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;refactoring&#39;).setup({
    -- prompt for return type
    prompt_func_return_type = {
        go = true,
        cpp = true,
        c = true,
        java = true,
    },
    -- prompt for function parameters
    prompt_func_param_type = {
        go = true,
        cpp = true,
        c = true,
        java = true,
    },
})
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>koreader/koreader</title>
      <link>https://github.com/koreader/koreader</link>
      <description>&lt;p&gt;An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://koreader.rocks&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/koreader/koreader.github.io/master/koreader-logo.png&quot; alt=&quot;KOReader&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;KOReader is a document viewer primarily aimed at e-ink readers.&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/COPYING&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/koreader/koreader&quot; alt=&quot;AGPL Licence&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/koreader/koreader.svg?sanitize=true&quot; alt=&quot;Latest release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/koreader/koreader&quot;&gt;&lt;img src=&quot;https://img.shields.io/gitter/room/koreader/koreader?color=red&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.mobileread.com/forums/forumdisplay.php?f=276&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/forum-on_mobileread-lightgrey&quot; alt=&quot;Mobileread&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/koreader/koreader&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/koreader/koreader.svg?style=shield&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/koreader/koreader&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/koreader/koreader/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hosted.weblate.org/engage/koreader/?utm_source=widget&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widgets/koreader/-/koreader/svg-badge.svg?sanitize=true&quot; alt=&quot;Weblate Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/releases&quot;&gt;Download&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/user_guide/&quot;&gt;User guide&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;Wiki&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/doc/&quot;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Main features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;portable&lt;/strong&gt;: runs on embedded devices (Cervantes, Kindle, Kobo, PocketBook, reMarkable), Android and Linux computers. Developers can run a KOReader emulator in Linux and MacOS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;multi-format documents&lt;/strong&gt;: supports fixed page formats (PDF, DjVu, CBT, CBZ) and reflowable e-book formats (EPUB, FB2, Mobi, DOC, RTF, HTML, CHM, TXT). Scanned PDF/DjVu documents can also be reflowed with the built-in K2pdfopt library. &lt;a href=&quot;https://github.com/koreader/koreader/wiki/ZIP&quot;&gt;ZIP files&lt;/a&gt; are also supported for some formats.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;full-featured reading&lt;/strong&gt;: multi-lingual user interface with a highly customizable reader view and many typesetting options. You can set arbitrary page margins, override line spacing and choose external fonts and styles. It has multi-lingual hyphenation dictionaries bundled into the application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;integrated&lt;/strong&gt; with &lt;em&gt;calibre&lt;/em&gt; (search metadata, receive ebooks wirelessly, browse library via OPDS), &lt;em&gt;Wallabag&lt;/em&gt;, &lt;em&gt;Wikipedia&lt;/em&gt;, &lt;em&gt;Google Translate&lt;/em&gt; and other content providers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;optimized for e-ink devices&lt;/strong&gt;: custom UI without animation, with paginated menus, adjustable text contrast, and easy zoom to fit content or page in paged media.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;extensible&lt;/strong&gt;: via plugins&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;fast&lt;/strong&gt;: on some older devices, it has been measured to have less than half the page-turn delay as the built in reading software.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;and much more&lt;/strong&gt;: look up words with StarDict dictionaries / Wikipedia, add your own online OPDS catalogs and RSS feeds, over-the-air software updates, an FTP client, an SSH server, …&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please check the &lt;a href=&quot;http://koreader.rocks/user_guide/&quot;&gt;user guide&lt;/a&gt; and the &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;wiki&lt;/a&gt; to discover more features and to help us document them.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Please follow the model specific steps for your device:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Android-devices&quot;&gt;Android&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-BQ-devices&quot;&gt;Cervantes&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Kindle-devices&quot;&gt;Kindle&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Kobo-devices&quot;&gt;Kobo&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-desktop-linux&quot;&gt;Linux&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-PocketBook-devices&quot;&gt;Pocketbook&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Remarkable&quot;&gt;reMarkable&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building.md&quot;&gt;Setting up a build environment&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Collaborating_with_Git.md&quot;&gt;Collaborating with Git&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building_targets.md&quot;&gt;Building targets&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Porting.md&quot;&gt;Porting&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/doc/&quot;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;KOReader is developed and supported by volunteers all around the world. There are many ways you can help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Abug&quot;&gt;fix bugs&lt;/a&gt; and &lt;a href=&quot;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&quot;&gt;implement new features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hosted.weblate.org/engage/koreader/?utm_source=widget&quot;&gt;translate the program into your language&lt;/a&gt; or improve an existing translation&lt;/li&gt; 
 &lt;li&gt;document lesser-known features on the &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;help others with your knowledge on the &lt;a href=&quot;http://www.mobileread.com/forums/forumdisplay.php?f=276&quot;&gt;forum&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Right now we only support &lt;a href=&quot;https://liberapay.com/KOReader&quot;&gt;liberapay&lt;/a&gt; donations.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/commits/master&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/koreader/koreader?color=orange&quot; alt=&quot;Last commit&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader/pulse&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/koreader/koreader&quot; alt=&quot;Commit activity&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stevearc/conform.nvim</title>
      <link>https://github.com/stevearc/conform.nvim</link>
      <description>&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;conform.nvim&lt;/h1&gt; 
&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt; 
&lt;!-- TOC --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatters&quot;&gt;Formatters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#customizing-formatters&quot;&gt;Customizing formatters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#recipes&quot;&gt;Recipes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#advanced-topics&quot;&gt;Advanced topics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#options&quot;&gt;Options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatter-options&quot;&gt;Formatter options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#api&quot;&gt;API&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#setupopts&quot;&gt;setup(opts)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&quot;&gt;format(opts, callback)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_formattersbufnr&quot;&gt;list_formatters(bufnr)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_formatters_to_runbufnr&quot;&gt;list_formatters_to_run(bufnr)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_all_formatters&quot;&gt;list_all_formatters()&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#get_formatter_infoformatter-bufnr&quot;&gt;get_formatter_info(formatter, bufnr)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /TOC --&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim 0.10+ (for older versions, use a &lt;a href=&quot;https://github.com/stevearc/conform.nvim/branches&quot;&gt;nvim-0.x branch&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Preserves extmarks and folds&lt;/strong&gt; - Most formatters replace the entire buffer, which clobbers extmarks and folds, and can cause the viewport and cursor to jump unexpectedly. Conform calculates minimal diffs and applies them using the built-in LSP format utilities.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fixes bad-behaving LSP formatters&lt;/strong&gt; - Some LSP servers are lazy and simply replace the entire buffer, leading to the problems mentioned above. Conform hooks into the LSP handler and turns these responses into proper piecewise changes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enables range formatting for all formatters&lt;/strong&gt; - Since conform calculates minimal diffs, it can perform range formatting &lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#range-formatting&quot;&gt;even if the underlying formatter doesn&#39;t support it.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simple API&lt;/strong&gt; - Conform exposes a simple, imperative API modeled after &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Formats embedded code blocks&lt;/strong&gt; - Can format code blocks inside markdown files or similar (see &lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#injected-language-formatting-code-blocks&quot;&gt;injected language formatting&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;conform.nvim supports all the usual plugin managers&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;lazy.nvim&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &#39;stevearc/conform.nvim&#39;,
  opts = {},
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For a more thorough configuration involving lazy-loading, see &lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#lazy-loading-with-lazynvim&quot;&gt;Lazy loading with lazy.nvim&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Packer&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;packer&quot;).startup(function()
  use({
    &quot;stevearc/conform.nvim&quot;,
    config = function()
      require(&quot;conform&quot;).setup()
    end,
  })
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Paq&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;paq&quot;)({
  { &quot;stevearc/conform.nvim&quot; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;vim-plug&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;stevearc/conform.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;dein&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call dein#add(&#39;stevearc/conform.nvim&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Pathogen&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git ~/.vim/bundle/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neovim native package&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git \
  &quot;${XDG_DATA_HOME:-$HOME/.local/share}&quot;/nvim/site/pack/conform/start/conform.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;At a minimum, you will need to set up some formatters by filetype&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;conform&quot;).setup({
  formatters_by_ft = {
    lua = { &quot;stylua&quot; },
    -- Conform will run multiple formatters sequentially
    python = { &quot;isort&quot;, &quot;black&quot; },
    -- You can customize some of the format options for the filetype (:help conform.format)
    rust = { &quot;rustfmt&quot;, lsp_format = &quot;fallback&quot; },
    -- Conform will run the first available formatter
    javascript = { &quot;prettierd&quot;, &quot;prettier&quot;, stop_after_first = true },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can use &lt;code&gt;conform.format()&lt;/code&gt; just like you would &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. For example, to format on save:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;BufWritePre&quot;, {
  pattern = &quot;*&quot;,
  callback = function(args)
    require(&quot;conform&quot;).format({ bufnr = args.buf })
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a shortcut, conform will optionally set up this format-on-save autocmd for you&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;conform&quot;).setup({
  format_on_save = {
    -- These options will be passed to conform.format()
    timeout_ms = 500,
    lsp_format = &quot;fallback&quot;,
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&quot;&gt;conform.format()&lt;/a&gt; for more details about the parameters.&lt;/p&gt; 
&lt;p&gt;Conform also provides a formatexpr, same as the LSP client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.o.formatexpr = &quot;v:lua.require&#39;conform&#39;.formatexpr()&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To view configured and available formatters, as well as to see the log file, run &lt;code&gt;:ConformInfo&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Formatters&lt;/h2&gt; 
&lt;p&gt;You can view this list in vim with &lt;code&gt;:help conform-formatters&lt;/code&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Expand to see all formatters&lt;/summary&gt; 
 &lt;!-- FORMATTERS --&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/posit-dev/air&quot;&gt;air&lt;/a&gt; - R formatter and language server.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://kamadorueda.com/alejandra/&quot;&gt;alejandra&lt;/a&gt; - The Uncompromising Nix Code Formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ansible/ansible-lint&quot;&gt;ansible-lint&lt;/a&gt; - ansible-lint with --fix.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/klauspost/asmfmt&quot;&gt;asmfmt&lt;/a&gt; - Go Assembler Formatter&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://ast-grep.github.io/&quot;&gt;ast-grep&lt;/a&gt; - A CLI tool for code structural search, lint and rewriting. Written in Rust.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://astyle.sourceforge.net/astyle.html&quot;&gt;astyle&lt;/a&gt; - A Free, Fast, and Small Automatic Formatter for C, C++, C++/CLI, Objective-C, C#, and Java Source Code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://auto-optional.daanluttik.nl/&quot;&gt;auto_optional&lt;/a&gt; - Adds the Optional type-hint to arguments where the default value is None.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/huacnlee/autocorrect&quot;&gt;autocorrect&lt;/a&gt; - A linter and formatter to help you to improve copywriting, correct spaces, words, and punctuations between CJK.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/PyCQA/autoflake&quot;&gt;autoflake&lt;/a&gt; - Removes unused imports and unused variables as reported by pyflakes.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hhatto/autopep8&quot;&gt;autopep8&lt;/a&gt; - A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-format&quot;&gt;bean-format&lt;/a&gt; - Reformat Beancount files to right-align all the numbers at the same, minimal column.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/lovesegfault/beautysh&quot;&gt;beautysh&lt;/a&gt; - A Bash beautifier for the masses.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/FlamingTempura/bibtex-tidy&quot;&gt;bibtex-tidy&lt;/a&gt; - Cleaner and Formatter for BibTeX files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Azure/bicep&quot;&gt;bicep&lt;/a&gt; - Bicep is a Domain Specific Language (DSL) for deploying Azure resources declaratively.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/biomejs/biome&quot;&gt;biome&lt;/a&gt; - A toolchain for web projects, aimed to provide functionalities to maintain them.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/biomejs/biome&quot;&gt;biome-check&lt;/a&gt; - A toolchain for web projects, aimed to provide functionalities to maintain them.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/biomejs/biome&quot;&gt;biome-organize-imports&lt;/a&gt; - A toolchain for web projects, aimed to provide functionalities to maintain them.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;black&lt;/a&gt; - The uncompromising Python code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/shufo/blade-formatter&quot;&gt;blade-formatter&lt;/a&gt; - An opinionated blade template formatter for Laravel that respects readability.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/grantjenks/blue&quot;&gt;blue&lt;/a&gt; - The slightly less uncompromising Python code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://source.android.com/docs/setup/reference/androidbp&quot;&gt;bpfmt&lt;/a&gt; - Android Blueprint file formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/rokucommunity/brighterscript-formatter&quot;&gt;bsfmt&lt;/a&gt; - A code formatter for BrighterScript (and BrightScript).&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://buf.build/docs/reference/cli/buf/format&quot;&gt;buf&lt;/a&gt; - A new way of working with Protocol Buffers.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/bazelbuild/buildtools/tree/master/buildifier&quot;&gt;buildifier&lt;/a&gt; - buildifier is a tool for formatting bazel BUILD and .bzl files with a standard convention.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/cabal-fmt&quot;&gt;cabal_fmt&lt;/a&gt; - Format cabal files with cabal-fmt.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://caramel.run/manual/reference/cli/fmt.html&quot;&gt;caramel_fmt&lt;/a&gt; - Format Caramel code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/lukas-reineke/cbfmt&quot;&gt;cbfmt&lt;/a&gt; - A tool to format codeblocks inside markdown and org documents.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://clang.llvm.org/docs/ClangFormat.html&quot;&gt;clang-format&lt;/a&gt; - Tool to format C/C++/… code according to a set of rules and heuristics.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/cljfmt&quot;&gt;cljfmt&lt;/a&gt; - cljfmt is a tool for detecting and fixing formatting errors in Clojure code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/greglook/cljstyle&quot;&gt;cljstyle&lt;/a&gt; - Formatter for Clojure code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/cheshirekow/cmake_format&quot;&gt;cmake_format&lt;/a&gt; - Parse cmake listfiles and format them nicely.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/code-security/codeql-cli/codeql-cli-manual/query-format&quot;&gt;codeql&lt;/a&gt; - Format queries and libraries with CodeQL.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/codespell-project/codespell&quot;&gt;codespell&lt;/a&gt; - Check code for common misspellings.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gitlab.com/mkjeldsen/commitmsgfmt&quot;&gt;commitmsgfmt&lt;/a&gt; - Formats commit messages better than fmt(1) and Vim.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/crlfmt&quot;&gt;crlfmt&lt;/a&gt; - Formatter for CockroachDB&#39;s additions to the Go style guide.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://crystal-lang.org/&quot;&gt;crystal&lt;/a&gt; - Format Crystal code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/belav/csharpier&quot;&gt;csharpier&lt;/a&gt; - The opinionated C# code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/beautifier/js-beautify&quot;&gt;css_beautify&lt;/a&gt; - Beautifier for css.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://cuelang.org&quot;&gt;cue_fmt&lt;/a&gt; - Format CUE files using &lt;code&gt;cue fmt&lt;/code&gt; command.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/terrastruct/d2&quot;&gt;d2&lt;/a&gt; - D2 is a modern diagram scripting language that turns text to diagrams.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/akaihola/darker&quot;&gt;darker&lt;/a&gt; - Run black only on changed lines.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://dart.dev/tools/dart-format&quot;&gt;dart_format&lt;/a&gt; - Replace the whitespace in your program with formatting that follows Dart guidelines.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://dcm.dev/docs/cli/formatting/fix/&quot;&gt;dcm_fix&lt;/a&gt; - Fixes issues produced by dcm analyze, dcm check-unused-code or dcm check-dependencies commands.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://dcm.dev/docs/cli/formatting/format/&quot;&gt;dcm_format&lt;/a&gt; - Formats .dart files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://deno.land/manual/tools/formatter&quot;&gt;deno_fmt&lt;/a&gt; - Use &lt;a href=&quot;https://deno.land/&quot;&gt;Deno&lt;/a&gt; to format TypeScript, JavaScript/JSON and markdown.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/dlang-community/dfmt&quot;&gt;dfmt&lt;/a&gt; - Formatter for D source code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Riverside-Healthcare/djLint&quot;&gt;djlint&lt;/a&gt; - ✨ HTML Template Linter and Formatter. Django - Jinja - Nunjucks - Handlebars - GoLang.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/docformatter/&quot;&gt;docformatter&lt;/a&gt; - docformatter automatically formats docstrings to follow a subset of the PEP 257 conventions.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/LilSpazJoekp/docstrfmt&quot;&gt;docstrfmt&lt;/a&gt; - reStructuredText formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/thlorenz/doctoc&quot;&gt;doctoc&lt;/a&gt; - Generates table of contents for markdown files inside local git repository.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/dprint/dprint&quot;&gt;dprint&lt;/a&gt; - Pluggable and configurable code formatting platform written in Rust.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/easy-coding-standard/easy-coding-standard&quot;&gt;easy-coding-standard&lt;/a&gt; - ecs - Use Coding Standard with 0-knowledge of PHP-CS-Fixer and PHP_CodeSniffer.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sile/efmt&quot;&gt;efmt&lt;/a&gt; - Erlang code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/avh4/elm-format&quot;&gt;elm_format&lt;/a&gt; - elm-format formats Elm source code according to a standard set of rules based on the official &lt;a href=&quot;https://elm-lang.org/docs/style-guide&quot;&gt;Elm Style Guide&lt;/a&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nebulab/erb-formatter&quot;&gt;erb_format&lt;/a&gt; - Format ERB files with speed and precision.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/WhatsApp/erlfmt&quot;&gt;erlfmt&lt;/a&gt; - An automated code formatter for Erlang.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mantoni/eslint_d.js/&quot;&gt;eslint_d&lt;/a&gt; - Like ESLint, but faster.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/fsprojects/fantomas&quot;&gt;fantomas&lt;/a&gt; - F# source code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/wvermin/findent&quot;&gt;findent&lt;/a&gt; - Indent, relabel and convert Fortran sources.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://fishshell.com/docs/current/cmds/fish_indent.html&quot;&gt;fish_indent&lt;/a&gt; - Indent or otherwise prettify a piece of fish code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/rhysd/fixjson&quot;&gt;fixjson&lt;/a&gt; - JSON Fixer for Humans using (relaxed) JSON5.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~technomancy/fnlfmt&quot;&gt;fnlfmt&lt;/a&gt; - A formatter for Fennel code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/foundry-rs/foundry&quot;&gt;forge_fmt&lt;/a&gt; - Forge is a command-line tool that ships with Foundry. Forge tests, builds, and deploys your smart contracts.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/dune&quot;&gt;format-dune-file&lt;/a&gt; - Auto-formatter for Dune files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter/raw/main/CONTRIBUTING.md#formatting&quot;&gt;format-queries&lt;/a&gt; - Tree-sitter query formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/fourmolu&quot;&gt;fourmolu&lt;/a&gt; - A fork of ormolu that uses four space indentation and allows arbitrary configuration.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/fortran-lang/fprettify&quot;&gt;fprettify&lt;/a&gt; - Auto-formatter for modern fortran source code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/gawk/manual/gawk.html&quot;&gt;gawk&lt;/a&gt; - Format awk programs with gawk.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/daixiang0/gci&quot;&gt;gci&lt;/a&gt; - GCI, a tool that controls Go package import order and makes it always deterministic.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Scony/godot-gdscript-toolkit&quot;&gt;gdformat&lt;/a&gt; - A formatter for Godot&#39;s gdscript.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/BlankSpruce/gersemi&quot;&gt;gersemi&lt;/a&gt; - A formatter to make your CMake code the real treasure.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/gleam-lang/gleam&quot;&gt;gleam&lt;/a&gt; - ⭐️ A friendly language for building type-safe, scalable systems!&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/gluon-lang/gluon&quot;&gt;gluon_fmt&lt;/a&gt; - Code formatting for the gluon programming language.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gn.googlesource.com/gn/&quot;&gt;gn&lt;/a&gt; - gn build system.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pkg.go.dev/cmd/gofmt&quot;&gt;gofmt&lt;/a&gt; - Formats go programs.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mvdan/gofumpt&quot;&gt;gofumpt&lt;/a&gt; - Enforce a stricter format than gofmt, while being backwards compatible. That is, gofumpt is happy with a subset of the formats that gofmt is happy with.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pkg.go.dev/golang.org/x/tools/cmd/goimports&quot;&gt;goimports&lt;/a&gt; - Updates your Go import lines, adding missing ones and removing unreferenced ones.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/incu6us/goimports-reviser&quot;&gt;goimports-reviser&lt;/a&gt; - Right imports sorting &amp;amp; code formatting tool (goimports alternative).&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/itchyny/gojq&quot;&gt;gojq&lt;/a&gt; - Pure Go implementation of jq.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/segmentio/golines&quot;&gt;golines&lt;/a&gt; - A golang formatter that fixes long lines.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/google-java-format&quot;&gt;google-java-format&lt;/a&gt; - Reformats Java source code according to Google Java Style.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://grain-lang.org/docs/tooling/grain_cli#grain-format&quot;&gt;grain_format&lt;/a&gt; - Code formatter for the grain programming language.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hashicorp/hcl&quot;&gt;hcl&lt;/a&gt; - A formatter for HCL files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mihaimaruseac/hindent&quot;&gt;hindent&lt;/a&gt; - Haskell pretty printer.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/beautifier/js-beautify&quot;&gt;html_beautify&lt;/a&gt; - Beautifier for html.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/threedaymonk/htmlbeautifier&quot;&gt;htmlbeautifier&lt;/a&gt; - A normaliser/beautifier for HTML that also understands embedded Ruby. Ideal for tidying up Rails templates.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://hurl.dev/&quot;&gt;hurlfmt&lt;/a&gt; - Formats hurl files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://imba.io/&quot;&gt;imba_fmt&lt;/a&gt; - Code formatter for the Imba programming language.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/indent/&quot;&gt;indent&lt;/a&gt; - GNU Indent.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#injected-language-formatting-code-blocks&quot;&gt;injected&lt;/a&gt; - Format treesitter injected languages.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://inko-lang.org/&quot;&gt;inko&lt;/a&gt; - A language for building concurrent software with confidence&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/PyCQA/isort&quot;&gt;isort&lt;/a&gt; - Python utility / library to sort imports alphabetically and automatically separate them into sections and by type.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/candid82/joker&quot;&gt;joker&lt;/a&gt; - Small Clojure interpreter, linter and formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/stedolan/jq&quot;&gt;jq&lt;/a&gt; - Command-line JSON processor.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/beautifier/js-beautify&quot;&gt;js_beautify&lt;/a&gt; - Beautifier for javascript.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/go-jsonnet/tree/master/cmd/jsonnetfmt&quot;&gt;jsonnetfmt&lt;/a&gt; - jsonnetfmt is a command line tool to format jsonnet files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/casey/just&quot;&gt;just&lt;/a&gt; - Format Justfile.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.kcl-lang.io/docs/tools/cli/kcl/fmt&quot;&gt;kcl&lt;/a&gt; - The KCL Format tool modifies the files according to the KCL code style.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hougesen/kdlfmt&quot;&gt;kdlfmt&lt;/a&gt; - A formatter for kdl documents.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/ktfmt&quot;&gt;ktfmt&lt;/a&gt; - Reformats Kotlin source code to comply with the common community standard conventions.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://ktlint.github.io/&quot;&gt;ktlint&lt;/a&gt; - An anti-bikeshedding Kotlin linter with built-in formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mistweaverco/kulala-fmt&quot;&gt;kulala-fmt&lt;/a&gt; - An opinionated .http and .rest files linter and formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/cmhughes/latexindent.pl&quot;&gt;latexindent&lt;/a&gt; - A perl script for formatting LaTeX files that is generally included in major TeX distributions.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/bram209/leptosfmt&quot;&gt;leptosfmt&lt;/a&gt; - A formatter for the Leptos view! macro.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/savonet/liquidsoap-prettier&quot;&gt;liquidsoap-prettier&lt;/a&gt; - A binary to format Liquidsoap scripts&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://repo.or.cz/llf.git&quot;&gt;llf&lt;/a&gt; - A LaTeX reformatter / beautifier.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Koihik/LuaFormatter&quot;&gt;lua-format&lt;/a&gt; - Code formatter for Lua.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/jonschlinkert/markdown-toc&quot;&gt;markdown-toc&lt;/a&gt; - API and CLI for generating a markdown TOC (table of contents) for a README or any markdown files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/shurcooL/markdownfmt&quot;&gt;markdownfmt&lt;/a&gt; - Like gofmt, but for Markdown.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/DavidAnson/markdownlint&quot;&gt;markdownlint&lt;/a&gt; - A Node.js style checker and lint tool for Markdown/CommonMark files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/DavidAnson/markdownlint-cli2&quot;&gt;markdownlint-cli2&lt;/a&gt; - A fast, flexible, configuration-based command-line interface for linting Markdown/CommonMark files with the markdownlint library.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/executablebooks/mdformat&quot;&gt;mdformat&lt;/a&gt; - An opinionated Markdown formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hougesen/mdsf&quot;&gt;mdsf&lt;/a&gt; - Format markdown code blocks using your favorite code formatters.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/razziel89/mdslw&quot;&gt;mdslw&lt;/a&gt; - Prepare your markdown for easy diff&#39;ing by adding line breaks after every sentence.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/mix/main/Mix.Tasks.Format.html&quot;&gt;mix&lt;/a&gt; - Format Elixir files using the mix format command.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.modular.com/mojo/cli/format&quot;&gt;mojo_format&lt;/a&gt; - Official Formatter for The Mojo Programming Language&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/slomkowski/nginx-config-formatter&quot;&gt;nginxfmt&lt;/a&gt; - nginx config file formatter/beautifier written in Python with no additional dependencies.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://nickel-lang.org/&quot;&gt;nickel&lt;/a&gt; - Code formatter for the Nickel programming language.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nim-lang/nim&quot;&gt;nimpretty&lt;/a&gt; - nimpretty is a Nim source code beautifier that follows the official style guide.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/NixOS/nixfmt&quot;&gt;nixfmt&lt;/a&gt; - The official (but not yet stable) formatter for Nix code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nix-community/nixpkgs-fmt&quot;&gt;nixpkgs_fmt&lt;/a&gt; - nixpkgs-fmt is a Nix code formatter for nixpkgs.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/nomad/docs/commands/fmt&quot;&gt;nomad_fmt&lt;/a&gt; - The fmt commands check the syntax and rewrites Nomad configuration and jobspec files to canonical format.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/arnetheduck/nph&quot;&gt;nph&lt;/a&gt; - An opinionated code formatter for Nim.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvuillam/npm-groovy-lint&quot;&gt;npm-groovy-lint&lt;/a&gt; - Lint, format and auto-fix your Groovy / Jenkinsfile / Gradle files using command line.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nushell/nufmt&quot;&gt;nufmt&lt;/a&gt; - The nushell formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ocaml-ppx/ocamlformat&quot;&gt;ocamlformat&lt;/a&gt; - Auto-formatter for OCaml code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/OCamlPro/ocp-indent&quot;&gt;ocp-indent&lt;/a&gt; - Automatic indentation of OCaml source files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.openpolicyagent.org/docs/latest/cli/#opa-fmt&quot;&gt;opa_fmt&lt;/a&gt; - Format Rego files using &lt;code&gt;opa fmt&lt;/code&gt; command.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/ormolu&quot;&gt;ormolu&lt;/a&gt; - A formatter for Haskell source code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/packer/docs/commands/fmt&quot;&gt;packer_fmt&lt;/a&gt; - The packer fmt Packer command is used to format HCL2 configuration files to a canonical format and style.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/vinta/pangu.py&quot;&gt;pangu&lt;/a&gt; - Insert whitespace between CJK and half-width characters.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/perl-ide/App-perlimports&quot;&gt;perlimports&lt;/a&gt; - Make implicit Perl imports explicit.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/perltidy/perltidy&quot;&gt;perltidy&lt;/a&gt; - Perl::Tidy, a source code formatter for Perl.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/darold/pgFormatter&quot;&gt;pg_format&lt;/a&gt; - PostgreSQL SQL syntax beautifier.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/PHP-CS-Fixer/PHP-CS-Fixer&quot;&gt;php_cs_fixer&lt;/a&gt; - The PHP Coding Standards Fixer.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://phpqa.io/projects/phpcbf.html&quot;&gt;phpcbf&lt;/a&gt; - PHP Code Beautifier and Fixer fixes violations of a defined coding standard.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nunomaduro/phpinsights&quot;&gt;phpinsights&lt;/a&gt; - The perfect starting point to analyze the code quality of your PHP projects.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/laravel/pint&quot;&gt;pint&lt;/a&gt; - Laravel Pint is an opinionated PHP code style fixer for minimalists.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/prettier/prettier&quot;&gt;prettier&lt;/a&gt; - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/fsouza/prettierd&quot;&gt;prettierd&lt;/a&gt; - prettier, as a daemon, for ludicrous formatting speed.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/lkrms/pretty-php&quot;&gt;pretty-php&lt;/a&gt; - The opinionated PHP code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/antonWetzel/prettypst&quot;&gt;prettypst&lt;/a&gt; - Formatter for Typst.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/puppetlabs/puppet-lint&quot;&gt;puppet-lint&lt;/a&gt; - Check that your Puppet manifests conform to the style guide.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/natefaubion/purescript-tidy&quot;&gt;purs-tidy&lt;/a&gt; - A syntax tidy-upper for PureScript.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/pyink&quot;&gt;pyink&lt;/a&gt; - A Python formatter, forked from Black with a few different formatting behaviors.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/tox-dev/toml-fmt/tree/main/pyproject-fmt&quot;&gt;pyproject-fmt&lt;/a&gt; - Apply a consistent format to your pyproject.toml file with comment support.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/frescobaldi/python-ly&quot;&gt;python-ly&lt;/a&gt; - A Python package and commandline tool to manipulate LilyPond files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ducminh-phan/reformat-gherkin&quot;&gt;reformat-gherkin&lt;/a&gt; - Formatter for Gherkin language.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/asottile/reorder-python-imports&quot;&gt;reorder-python-imports&lt;/a&gt; - Rewrites source to reorder python imports&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://rescript-lang.org/&quot;&gt;rescript-format&lt;/a&gt; - The built-in ReScript formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/roc-lang/roc&quot;&gt;roc&lt;/a&gt; - A fast, friendly, functional language.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/dzhu/rstfmt&quot;&gt;rstfmt&lt;/a&gt; - A formatter for reStructuredText.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/rubocop/rubocop&quot;&gt;rubocop&lt;/a&gt; - Ruby static code analyzer and formatter, based on the community Ruby style guide.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/fables-tales/rubyfmt&quot;&gt;rubyfmt&lt;/a&gt; - Ruby Autoformatter! (Written in Rust)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.astral.sh/ruff/&quot;&gt;ruff_fix&lt;/a&gt; - An extremely fast Python linter, written in Rust. Fix lint errors.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.astral.sh/ruff/&quot;&gt;ruff_format&lt;/a&gt; - An extremely fast Python linter, written in Rust. Formatter subcommand.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.astral.sh/ruff/&quot;&gt;ruff_organize_imports&lt;/a&gt; - An extremely fast Python linter, written in Rust. Organize imports.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ruby-formatter/rufo&quot;&gt;rufo&lt;/a&gt; - Rufo is an opinionated ruby formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/fredrikekre/Runic.jl&quot;&gt;runic&lt;/a&gt; - Julia code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;rustfmt&lt;/a&gt; - A tool for formatting rust code according to style guidelines.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/avencera/rustywind&quot;&gt;rustywind&lt;/a&gt; - A tool for formatting Tailwind CSS classes.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalameta/scalafmt&quot;&gt;scalafmt&lt;/a&gt; - Code formatter for Scala.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck&quot;&gt;shellcheck&lt;/a&gt; - A static analysis tool for shell scripts.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/anordal/shellharden&quot;&gt;shellharden&lt;/a&gt; - The corrective bash syntax highlighter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mvdan/sh&quot;&gt;shfmt&lt;/a&gt; - A shell parser, formatter, and interpreter with &lt;code&gt;bash&lt;/code&gt; support.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nrempel/sleek&quot;&gt;sleek&lt;/a&gt; - Sleek is a CLI tool for formatting SQL.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/shwestrick/smlfmt&quot;&gt;smlfmt&lt;/a&gt; - A custom parser and code formatter for Standard ML.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/snakemake/snakefmt&quot;&gt;snakefmt&lt;/a&gt; - a formatting tool for Snakemake files following the design of Black.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sql-formatter-org/sql-formatter&quot;&gt;sql_formatter&lt;/a&gt; - A whitespace formatter for different query languages.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sqlfluff/sqlfluff&quot;&gt;sqlfluff&lt;/a&gt; - A modular SQL linter and auto-formatter with support for multiple dialects and templated code.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.sqlfmt.com&quot;&gt;sqlfmt&lt;/a&gt; - sqlfmt formats your dbt SQL files so you don&#39;t have to. It is similar in nature to Black, gofmt, and rustfmt (but for SQL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/quarylabs/sqruff&quot;&gt;sqruff&lt;/a&gt; - sqruff is a SQL linter and formatter written in Rust.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html#cat-invocation&quot;&gt;squeeze_blanks&lt;/a&gt; - Squeeze repeated blank lines into a single blank line via &lt;code&gt;cat -s&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/oakmac/standard-clojure-style-js&quot;&gt;standard-clj&lt;/a&gt; - A JavaScript library to format Clojure code according to Standard Clojure Style.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://standardjs.com&quot;&gt;standardjs&lt;/a&gt; - JavaScript Standard style guide, linter, and formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/standardrb/standard&quot;&gt;standardrb&lt;/a&gt; - Ruby&#39;s bikeshed-proof linter and formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/stylelint/stylelint&quot;&gt;stylelint&lt;/a&gt; - A mighty CSS linter that helps you avoid errors and enforce conventions.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/devOpifex/r.nvim&quot;&gt;styler&lt;/a&gt; - R formatter and linter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/haskell/stylish-haskell&quot;&gt;stylish-haskell&lt;/a&gt; - Haskell code prettifier.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/JohnnyMorganz/StyLua&quot;&gt;stylua&lt;/a&gt; - An opinionated code formatter for Lua.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/kristoff-it/superhtml&quot;&gt;superhtml&lt;/a&gt; - HTML Language Server and Templating Language Library.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-format&quot;&gt;swift_format&lt;/a&gt; - Swift formatter from apple. Requires building from source with &lt;code&gt;swift build&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;swiftformat&lt;/a&gt; - SwiftFormat is a code library and command-line tool for reformatting &lt;code&gt;swift&lt;/code&gt; code on macOS or Linux.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;swiftlint&lt;/a&gt; - A tool to enforce Swift style and conventions.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ruby-syntax-tree/syntax_tree&quot;&gt;syntax_tree&lt;/a&gt; - Syntax Tree is a suite of tools built on top of the internal CRuby parser.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/tamasfe/taplo&quot;&gt;taplo&lt;/a&gt; - A TOML toolkit written in Rust.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://templ.guide/developer-tools/cli/#formatting-templ-files&quot;&gt;templ&lt;/a&gt; - Formats templ template files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/cli/commands/fmt.html&quot;&gt;terraform_fmt&lt;/a&gt; - The terraform-fmt command rewrites &lt;code&gt;terraform&lt;/code&gt; configuration files to a canonical format and style.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://terragrunt.gruntwork.io/docs/reference/cli-options/#hclfmt&quot;&gt;terragrunt_hclfmt&lt;/a&gt; - Format hcl files into a canonical format.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/WGUNDERWOOD/tex-fmt&quot;&gt;tex-fmt&lt;/a&gt; - An extremely fast LaTeX formatter written in Rust.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/tighten/tlint&quot;&gt;tlint&lt;/a&gt; - Tighten linter for Laravel conventions with support for auto-formatting.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://opentofu.org/docs/cli/commands/fmt/&quot;&gt;tofu_fmt&lt;/a&gt; - The tofu-fmt command rewrites OpenTofu configuration files to a canonical format and style.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/conform.nvim/raw/master/lua/conform/formatters/trim_newlines.lua&quot;&gt;trim_newlines&lt;/a&gt; - Trim empty lines at the end of the file.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/conform.nvim/raw/master/lua/conform/formatters/trim_whitespace.lua&quot;&gt;trim_whitespace&lt;/a&gt; - Trim trailing whitespace.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/VincentLanglet/Twig-CS-Fixer&quot;&gt;twig-cs-fixer&lt;/a&gt; - Automatically fix Twig Coding Standards issues&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/crate-ci/typos&quot;&gt;typos&lt;/a&gt; - Source code spell checker&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Enter-tainer/typstyle&quot;&gt;typstyle&lt;/a&gt; - Beautiful and reliable typst code formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/omnilib/ufmt&quot;&gt;ufmt&lt;/a&gt; - Safe, atomic formatting with black and µsort.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/uncrustify/uncrustify&quot;&gt;uncrustify&lt;/a&gt; - A source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and Vala.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/usort&quot;&gt;usort&lt;/a&gt; - Safe, minimal import sorting for Python projects.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/chipsalliance/verible/raw/master/verilog/tools/formatter/README.md&quot;&gt;verible&lt;/a&gt; - The SystemVerilog formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeremiah-c-leary/vhdl-style-guide&quot;&gt;vsg&lt;/a&gt; - Style guide enforcement for VHDL.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/pamoller/xmlformatter&quot;&gt;xmlformatter&lt;/a&gt; - xmlformatter is an Open Source Python package, which provides formatting of XML documents.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;http://xmlsoft.org/xmllint.html&quot;&gt;xmllint&lt;/a&gt; - Despite the name, xmllint can be used to format XML files as well as lint them.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;http://xmlstar.sourceforge.net/&quot;&gt;xmlstarlet&lt;/a&gt; - XMLStarlet is a command-line XML toolkit that can be used to format XML files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/lyz-code/yamlfix&quot;&gt;yamlfix&lt;/a&gt; - A configurable YAML formatter that keeps comments.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/yamlfmt&quot;&gt;yamlfmt&lt;/a&gt; - yamlfmt is an extensible command line tool or library to format yaml files.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/yapf&quot;&gt;yapf&lt;/a&gt; - Yet Another Python Formatter.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/schvv31n/yew-fmt&quot;&gt;yew-fmt&lt;/a&gt; - Code formatter for the Yew framework.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mikefarah/yq&quot;&gt;yq&lt;/a&gt; - YAML/JSON processor&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ziglang/zig&quot;&gt;zigfmt&lt;/a&gt; - Reformat Zig source into canonical form.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/kristoff-it/ziggy&quot;&gt;ziggy&lt;/a&gt; - A data serialization language for expressing clear API messages, config files, etc.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/kristoff-it/ziggy&quot;&gt;ziggy_schema&lt;/a&gt; - A data serialization language for expressing clear API messages, config files, etc.&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/kkinnear/zprint&quot;&gt;zprint&lt;/a&gt; - Formatter for Clojure and EDN.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;!-- /FORMATTERS --&gt; 
&lt;/details&gt; 
&lt;h2&gt;Customizing formatters&lt;/h2&gt; 
&lt;p&gt;You can override/add to the default values of formatters&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;conform&quot;).setup({
  formatters = {
    yamlfix = {
      -- Change where to find the command
      command = &quot;local/path/yamlfix&quot;,
      -- Adds environment args to the yamlfix formatter
      env = {
        YAMLFIX_SEQUENCE_STYLE = &quot;block_style&quot;,
      },
    },
  },
})

-- These can also be set directly
require(&quot;conform&quot;).formatters.yamlfix = {
  env = {
    YAMLFIX_SEQUENCE_STYLE = &quot;block_style&quot;,
  },
}

-- This can also be a function that returns the config,
-- which can be useful if you&#39;re doing lazy loading
require(&quot;conform&quot;).formatters.yamlfix = function(bufnr)
  return {
    command = require(&quot;conform.util&quot;).find_executable({
      &quot;local/path/yamlfix&quot;,
    }, &quot;yamlfix&quot;),
  }
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to being able to override any of the original properties on the formatter, there is another property for easily adding additional arguments to the format command&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;conform&quot;).formatters.shfmt = {
  prepend_args = { &quot;-i&quot;, &quot;2&quot; },
  -- The base args are { &quot;-filename&quot;, &quot;$FILENAME&quot; } so the final args will be
  -- { &quot;-i&quot;, &quot;2&quot;, &quot;-filename&quot;, &quot;$FILENAME&quot; }
}
-- prepend_args can be a function, just like args
require(&quot;conform&quot;).formatters.shfmt = {
  prepend_args = function(self, ctx)
    return { &quot;-i&quot;, &quot;2&quot; }
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to overwrite the entire formatter definition and &lt;em&gt;not&lt;/em&gt; merge with the default values, pass &lt;code&gt;inherit = false&lt;/code&gt;. This is also the default behavior if there is no built-in formatter with the given name, which can be used to add your own custom formatters.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;conform&quot;).formatters.shfmt = {
  inherit = false,
  command = &quot;shfmt&quot;,
  args = { &quot;-i&quot;, &quot;2&quot;, &quot;-filename&quot;, &quot;$FILENAME&quot; },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Recipes&lt;/h2&gt; 
&lt;!-- RECIPES --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#format-command&quot;&gt;Format command&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#autoformat-with-extra-features&quot;&gt;Autoformat with extra features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#command-to-toggle-format-on-save&quot;&gt;Command to toggle format-on-save&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#lazy-loading-with-lazynvim&quot;&gt;Lazy loading with lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#leave-visual-mode-after-range-format&quot;&gt;Leave visual mode after range format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#run-the-first-available-formatter-followed-by-more-formatters&quot;&gt;Run the first available formatter followed by more formatters&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /RECIPES --&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;!-- DEBUGGING --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/debugging.md#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/debugging.md#tools&quot;&gt;Tools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/debugging.md#testing-the-formatter&quot;&gt;Testing the formatter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/debugging.md#testing-vimsystem&quot;&gt;Testing vim.system&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /DEBUGGING --&gt; 
&lt;h2&gt;Advanced topics&lt;/h2&gt; 
&lt;!-- ADVANCED --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#minimal-format-diffs&quot;&gt;Minimal format diffs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#range-formatting&quot;&gt;Range formatting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#injected-language-formatting-code-blocks&quot;&gt;Injected language formatting (code blocks)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /ADVANCED --&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;A complete list of all configuration options&lt;/p&gt; 
&lt;!-- OPTIONS --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;conform&quot;).setup({
  -- Map of filetype to formatters
  formatters_by_ft = {
    lua = { &quot;stylua&quot; },
    -- Conform will run multiple formatters sequentially
    go = { &quot;goimports&quot;, &quot;gofmt&quot; },
    -- You can also customize some of the format options for the filetype
    rust = { &quot;rustfmt&quot;, lsp_format = &quot;fallback&quot; },
    -- You can use a function here to determine the formatters dynamically
    python = function(bufnr)
      if require(&quot;conform&quot;).get_formatter_info(&quot;ruff_format&quot;, bufnr).available then
        return { &quot;ruff_format&quot; }
      else
        return { &quot;isort&quot;, &quot;black&quot; }
      end
    end,
    -- Use the &quot;*&quot; filetype to run formatters on all filetypes.
    [&quot;*&quot;] = { &quot;codespell&quot; },
    -- Use the &quot;_&quot; filetype to run formatters on filetypes that don&#39;t
    -- have other formatters configured.
    [&quot;_&quot;] = { &quot;trim_whitespace&quot; },
  },
  -- Set this to change the default values when calling conform.format()
  -- This will also affect the default values for format_on_save/format_after_save
  default_format_opts = {
    lsp_format = &quot;fallback&quot;,
  },
  -- If this is set, Conform will run the formatter on save.
  -- It will pass the table to conform.format().
  -- This can also be a function that returns the table.
  format_on_save = {
    -- I recommend these options. See :help conform.format for details.
    lsp_format = &quot;fallback&quot;,
    timeout_ms = 500,
  },
  -- If this is set, Conform will run the formatter asynchronously after save.
  -- It will pass the table to conform.format().
  -- This can also be a function that returns the table.
  format_after_save = {
    lsp_format = &quot;fallback&quot;,
  },
  -- Set the log level. Use `:ConformInfo` to see the location of the log file.
  log_level = vim.log.levels.ERROR,
  -- Conform will notify you when a formatter errors
  notify_on_error = true,
  -- Conform will notify you when no formatters are available for the buffer
  notify_no_formatters = true,
  -- Custom formatters and overrides for built-in formatters
  formatters = {
    my_formatter = {
      -- This can be a string or a function that returns a string.
      -- When defining a new formatter, this is the only field that is required
      command = &quot;my_cmd&quot;,
      -- A list of strings, or a function that returns a list of strings
      -- Return a single string instead of a list to run the command in a shell
      args = { &quot;--stdin-from-filename&quot;, &quot;$FILENAME&quot; },
      -- If the formatter supports range formatting, create the range arguments here
      range_args = function(self, ctx)
        return { &quot;--line-start&quot;, ctx.range.start[1], &quot;--line-end&quot;, ctx.range[&quot;end&quot;][1] }
      end,
      -- Send file contents to stdin, read new contents from stdout (default true)
      -- When false, will create a temp file (will appear in &quot;$FILENAME&quot; args). The temp
      -- file is assumed to be modified in-place by the format command.
      stdin = true,
      -- A function that calculates the directory to run the command in
      cwd = require(&quot;conform.util&quot;).root_file({ &quot;.editorconfig&quot;, &quot;package.json&quot; }),
      -- When cwd is not found, don&#39;t run the formatter (default false)
      require_cwd = true,
      -- When stdin=false, use this template to generate the temporary file that gets formatted
      tmpfile_format = &quot;.conform.$RANDOM.$FILENAME&quot;,
      -- When returns false, the formatter will not be used
      condition = function(self, ctx)
        return vim.fs.basename(ctx.filename) ~= &quot;README.md&quot;
      end,
      -- Exit codes that indicate success (default { 0 })
      exit_codes = { 0, 1 },
      -- Environment variables. This can also be a function that returns a table.
      env = {
        VAR = &quot;value&quot;,
      },
      -- Set to false to disable merging the config with the base definition
      inherit = true,
      -- When inherit = true, add these additional arguments to the beginning of the command.
      -- This can also be a function, like args
      prepend_args = { &quot;--use-tabs&quot; },
      -- When inherit = true, add these additional arguments to the end of the command.
      -- This can also be a function, like args
      append_args = { &quot;--trailing-comma&quot; },
    },
    -- These can also be a function that returns the formatter
    other_formatter = function(bufnr)
      return {
        command = &quot;my_cmd&quot;,
      }
    end,
  },
})

-- You can set formatters_by_ft and formatters directly
require(&quot;conform&quot;).formatters_by_ft.lua = { &quot;stylua&quot; }
require(&quot;conform&quot;).formatters.my_formatter = {
  command = &quot;my_cmd&quot;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- /OPTIONS --&gt; 
&lt;h2&gt;Formatter options&lt;/h2&gt; 
&lt;!-- FORMATTER_OPTIONS --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/formatter_options.md#injected&quot;&gt;injected&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/formatter_options.md#prettier&quot;&gt;prettier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/formatter_options.md#rustfmt&quot;&gt;rustfmt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/formatter_options.md#yew-fmt&quot;&gt;yew-fmt&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /FORMATTER_OPTIONS --&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;!-- API --&gt; 
&lt;h3&gt;setup(opts)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;setup(opts)&lt;/code&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Param&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Desc&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;opts&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.setupOpts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;formatters_by_ft&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|table&amp;lt;string, conform.FiletypeFormatter&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Map of filetype to formatters&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;format_on_save&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.FormatOpts|fun(bufnr: integer): nil|conform.FormatOpts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;If this is set, Conform will run the formatter on save. It will pass the table to conform.format(). This can also be a function that returns the table.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;default_format_opts&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.DefaultFormatOpts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The default options to use when calling conform.format()&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;&amp;gt;timeout_ms&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Time in milliseconds to block for formatting. Defaults to 1000. No effect if async = true.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;&amp;gt;lsp_format&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.LspFormatOpts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Configure if and when LSP should be used for formatting. Defaults to &quot;never&quot;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;never&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;never use the LSP for formatting (default)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;fallback&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP formatting is used when no other formatters are available&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;prefer&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;use only LSP formatting when available&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;first&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP formatting is used when available and then other formatters&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;last&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;other formatters are used then LSP formatting when available&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;&amp;gt;quiet&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Don&#39;t show any notifications for warnings or failures. Defaults to false.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;&amp;gt;stop_after_first&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Only run the first available formatter in the list. Defaults to false.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;format_after_save&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.FormatOpts|fun(bufnr: integer): nil|conform.FormatOpts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;If this is set, Conform will run the formatter asynchronously after save. It will pass the table to conform.format(). This can also be a function that returns the table.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;log_level&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set the log level (e.g. &lt;code&gt;vim.log.levels.DEBUG&lt;/code&gt;). Use &lt;code&gt;:ConformInfo&lt;/code&gt; to see the location of the log file.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;notify_on_error&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Conform will notify you when a formatter errors (default true).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;notify_no_formatters&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Conform will notify you when no formatters are available for the buffer (default true).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;formatters&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|table&amp;lt;string, conform.FormatterConfigOverride|fun(bufnr: integer): nil|conform.FormatterConfigOverride&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Custom formatters and overrides for built-in formatters.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;format(opts, callback)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;format(opts, callback): boolean&lt;/code&gt; &lt;br&gt; Format a buffer&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Param&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Desc&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;opts&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.FormatOpts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;timeout_ms&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Time in milliseconds to block for formatting. Defaults to 1000. No effect if async = true.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;bufnr&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Format this buffer (default 0)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;async&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;If true the method won&#39;t block. Defaults to false. If the buffer is modified before the formatter completes, the formatting will be discarded.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;dry_run&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;If true don&#39;t apply formatting changes to the buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;undojoin&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use undojoin to merge formatting changes with previous edit (default false)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;formatters&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|string[]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;List of formatters to run. Defaults to all formatters for the buffer filetype.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;lsp_format&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.LspFormatOpts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Configure if and when LSP should be used for formatting. Defaults to &quot;never&quot;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;never&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;never use the LSP for formatting (default)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;fallback&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP formatting is used when no other formatters are available&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;prefer&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;use only LSP formatting when available&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;first&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP formatting is used when available and then other formatters&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;last&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;other formatters are used then LSP formatting when available&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;stop_after_first&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Only run the first available formatter in the list. Defaults to false.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;quiet&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Don&#39;t show any notifications for warnings or failures. Defaults to false.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;range&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|conform.Range&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Range to format. Table must contain &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; keys with {row, col} tuples using (1,0) indexing. Defaults to current selection in visual mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;&amp;gt;start&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;integer[]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;&amp;gt;end&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;integer[]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;id&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Passed to vim.lsp.buf.format when using LSP formatting&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;name&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|string&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Passed to vim.lsp.buf.format when using LSP formatting&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;filter&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|fun(client: table): boolean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Passed to vim.lsp.buf.format when using LSP formatting&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;callback&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|fun(err: nil|string, did_edit: nil|boolean)&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Called once formatting has completed&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Returns:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Desc&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;True if any formatters were attempted&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;list_formatters(bufnr)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;list_formatters(bufnr): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; Retrieve the available formatters for a buffer&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Param&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Desc&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bufnr&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;list_formatters_to_run(bufnr)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;list_formatters_to_run(bufnr): conform.FormatterInfo[], boolean&lt;/code&gt; &lt;br&gt; Get the exact formatters that will be run for a buffer.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Param&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Desc&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bufnr&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Returns:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Desc&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;conform.FormatterInfo[]&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;lsp Will use LSP formatter&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
This accounts for stop_after_first, lsp fallback logic, etc.
&lt;/pre&gt; 
&lt;h3&gt;list_all_formatters()&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;list_all_formatters(): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; List information about all filetype-configured formatters&lt;/p&gt; 
&lt;h3&gt;get_formatter_info(formatter, bufnr)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;get_formatter_info(formatter, bufnr): conform.FormatterInfo&lt;/code&gt; &lt;br&gt; Get information about a formatter (including availability)&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Param&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Desc&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;formatter&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The name of the formatter&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bufnr&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- /API --&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Thanks to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-lint&quot;&gt;nvim-lint&lt;/a&gt; for providing inspiration for the config and API. It&#39;s an excellent plugin that balances power and simplicity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jose-elias-alvarez/null-ls.nvim&quot;&gt;null-ls&lt;/a&gt; for formatter configurations and being my formatter/linter of choice for a long time.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>yetone/avante.nvim</title>
      <link>https://github.com/yetone/avante.nvim</link>
      <description>&lt;p&gt;Use your Neovim like using Cursor AI IDE!&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img alt=&quot;logo&quot; width=&quot;120&quot; src=&quot;https://github.com/user-attachments/assets/2e2f2a58-2b28-4d11-afd1-87b65612b2de&quot;&gt; 
 &lt;h1&gt;avante.nvim&lt;/h1&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://neovim.io/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=Neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&quot; alt=&quot;Neovim: v0.10+&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/lua.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/lua.yaml?style=flat-square&amp;amp;logo=lua&amp;amp;logoColor=c7c7c7&amp;amp;label=Lua+CI&amp;amp;labelColor=1E40AF&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Lua CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/rust.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/rust.yaml?style=flat-square&amp;amp;logo=rust&amp;amp;logoColor=ffffff&amp;amp;label=Rust+CI&amp;amp;labelColor=BC826A&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Rust CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/python.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/python.yaml?style=flat-square&amp;amp;logo=python&amp;amp;logoColor=ffffff&amp;amp;label=Python+CI&amp;amp;labelColor=3672A5&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Python CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://discord.gg/QfnEFEdSjz&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/1302530866362323016?style=flat-square&amp;amp;logo=discord&amp;amp;label=Discord&amp;amp;logoColor=ffffff&amp;amp;labelColor=7376CF&amp;amp;color=268165&quot; alt=&quot;Discord&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://dotfyle.com/plugins/yetone/avante.nvim&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/yetone/avante.nvim/shield?style=flat-square&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;avante.nvim&lt;/strong&gt; is a Neovim plugin designed to emulate the behaviour of the &lt;a href=&quot;https://www.cursor.com&quot;&gt;Cursor&lt;/a&gt; AI IDE. It provides users with AI-driven code suggestions and the ability to apply these recommendations directly to their source files with minimal effort.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;🥰 This project is undergoing rapid iterations, and many exciting features will be added successively. Stay tuned!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&quot;&gt;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&quot;&gt;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsorship ❤️&lt;/h2&gt; 
&lt;p&gt;If you like this project, please consider supporting me on Patreon, as it helps me to continue maintaining and improving it:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://patreon.com/yetone&quot;&gt;Sponsor me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;AI-Powered Code Assistance&lt;/strong&gt;: Interact with AI to ask questions about your current code file and receive intelligent suggestions for improvement or modification.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;One-Click Application&lt;/strong&gt;: Quickly apply the AI&#39;s suggested changes to your source code with a single command, streamlining the editing process and saving time.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;For building binary if you wish to build from source, then &lt;code&gt;cargo&lt;/code&gt; is required. Otherwise &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; will be used to get prebuilt binary from GitHub.&lt;/p&gt; 
&lt;details open&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; (recommended)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;yetone/avante.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  version = false, -- Set this to &quot;*&quot; to always pull the latest release version, or set it to false to update to the latest code changes.
  opts = {
    -- add any opts here
    -- for example
    provider = &quot;openai&quot;,
    openai = {
      endpoint = &quot;https://api.openai.com/v1&quot;,
      model = &quot;gpt-4o&quot;, -- your desired model (or use gpt-4o, etc.)
      timeout = 30000, -- timeout in milliseconds
      temperature = 0, -- adjust if needed
      max_tokens = 4096,
      -- reasoning_effort = &quot;high&quot; -- only supported for reasoning models (o1, etc.)
    },
  },
  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  build = &quot;make&quot;,
  -- build = &quot;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false&quot; -- for windows
  dependencies = {
    &quot;nvim-treesitter/nvim-treesitter&quot;,
    &quot;stevearc/dressing.nvim&quot;,
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    --- The below dependencies are optional,
    &quot;echasnovski/mini.pick&quot;, -- for file_selector provider mini.pick
    &quot;nvim-telescope/telescope.nvim&quot;, -- for file_selector provider telescope
    &quot;hrsh7th/nvim-cmp&quot;, -- autocompletion for avante commands and mentions
    &quot;ibhagwan/fzf-lua&quot;, -- for file_selector provider fzf
    &quot;nvim-tree/nvim-web-devicons&quot;, -- or echasnovski/mini.icons
    &quot;zbirenbaum/copilot.lua&quot;, -- for providers=&#39;copilot&#39;
    {
      -- support for image pasting
      &quot;HakonHarnes/img-clip.nvim&quot;,
      event = &quot;VeryLazy&quot;,
      opts = {
        -- recommended settings
        default = {
          embed_image_as_base64 = false,
          prompt_for_file_name = false,
          drag_and_drop = {
            insert_mode = true,
          },
          -- required for Windows users
          use_absolute_path = true,
        },
      },
    },
    {
      -- Make sure to set this up properly if you have lazy=true
      &#39;MeanderingProgrammer/render-markdown.nvim&#39;,
      opts = {
        file_types = { &quot;markdown&quot;, &quot;Avante&quot; },
      },
      ft = { &quot;markdown&quot;, &quot;Avante&quot; },
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;vim-plug&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
&quot; Deps
Plug &#39;nvim-treesitter/nvim-treesitter&#39;
Plug &#39;stevearc/dressing.nvim&#39;
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;MunifTanjim/nui.nvim&#39;
Plug &#39;MeanderingProgrammer/render-markdown.nvim&#39;

&quot; Optional deps
Plug &#39;hrsh7th/nvim-cmp&#39;
Plug &#39;nvim-tree/nvim-web-devicons&#39; &quot;or Plug &#39;echasnovski/mini.icons&#39;
Plug &#39;HakonHarnes/img-clip.nvim&#39;
Plug &#39;zbirenbaum/copilot.lua&#39;

&quot; Yay, pass source=true if you want to build from source
Plug &#39;yetone/avante.nvim&#39;, { &#39;branch&#39;: &#39;main&#39;, &#39;do&#39;: &#39;make&#39; }
autocmd! User avante.nvim lua &amp;lt;&amp;lt; EOF
require(&#39;avante&#39;).setup()
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.deps&quot;&gt;mini.deps&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local add, later, now = MiniDeps.add, MiniDeps.later, MiniDeps.now

add({
  source = &#39;yetone/avante.nvim&#39;,
  monitor = &#39;main&#39;,
  depends = {
    &#39;nvim-treesitter/nvim-treesitter&#39;,
    &#39;stevearc/dressing.nvim&#39;,
    &#39;nvim-lua/plenary.nvim&#39;,
    &#39;MunifTanjim/nui.nvim&#39;,
    &#39;echasnovski/mini.icons&#39;
  },
  hooks = { post_checkout = function() vim.cmd(&#39;make&#39;) end }
})
--- optional
add({ source = &#39;hrsh7th/nvim-cmp&#39; })
add({ source = &#39;zbirenbaum/copilot.lua&#39; })
add({ source = &#39;HakonHarnes/img-clip.nvim&#39; })
add({ source = &#39;MeanderingProgrammer/render-markdown.nvim&#39; })

later(function() require(&#39;render-markdown&#39;).setup({...}) end)
later(function()
  require(&#39;img-clip&#39;).setup({...}) -- config img-clip
  require(&quot;copilot&quot;).setup({...}) -- setup copilot to your liking
  require(&quot;avante&quot;).setup({...}) -- config for avante.nvim
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;Packer&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
  -- Required plugins
  use &#39;nvim-treesitter/nvim-treesitter&#39;
  use &#39;stevearc/dressing.nvim&#39;
  use &#39;nvim-lua/plenary.nvim&#39;
  use &#39;MunifTanjim/nui.nvim&#39;
  use &#39;MeanderingProgrammer/render-markdown.nvim&#39;

  -- Optional dependencies
  use &#39;hrsh7th/nvim-cmp&#39;
  use &#39;nvim-tree/nvim-web-devicons&#39; -- or use &#39;echasnovski/mini.icons&#39;
  use &#39;HakonHarnes/img-clip.nvim&#39;
  use &#39;zbirenbaum/copilot.lua&#39;

  -- Avante.nvim with build process
  use {
    &#39;yetone/avante.nvim&#39;,
    branch = &#39;main&#39;,
    run = &#39;make&#39;,
    config = function()
      require(&#39;avante&#39;).setup()
    end
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/nix-community/home-manager&quot;&gt;Home Manager&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;programs.neovim = {
  plugins = [
    {
      plugin = pkgs.vimPlugins.avante-nvim;
      type = &quot;lua&quot;;
      config = &#39;&#39;require(&quot;avante&quot;).setup()&#39;&#39; # or builtins.readFile ./plugins/avante.lua;
    }
  ];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://nix-community.github.io/nixvim/plugins/avante/index.html&quot;&gt;Nixvim&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;  plugins.avante.enable = true;
  plugins.avante.settings = {
    # setup options here
  };
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- deps:
require(&#39;cmp&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;img-clip&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;copilot&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;render-markdown&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;avante&#39;).setup ({
  -- Your config here!
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;avante.nvim&lt;/code&gt; is currently only compatible with Neovim 0.10.1 or later. Please ensure that your Neovim version meets these requirements before proceeding.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;When loading the plugin synchronously, we recommend &lt;code&gt;require&lt;/code&gt;ing it sometime after your colorscheme.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Recommended &lt;strong&gt;Neovim&lt;/strong&gt; options:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- views can only be fully collapsed with the global statusline
vim.opt.laststatus = 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Any rendering plugins that support markdown should work with Avante as long as you add the supported filetype &lt;code&gt;Avante&lt;/code&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175&quot;&gt;https://github.com/yetone/avante.nvim/issues/175&lt;/a&gt; and &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175#issuecomment-2313749363&quot;&gt;this comment&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Default setup configuration&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/config.lua&quot;&gt;config.lua#L9&lt;/a&gt; for the full config&lt;/em&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  ---@alias Provider &quot;claude&quot; | &quot;openai&quot; | &quot;azure&quot; | &quot;gemini&quot; | &quot;cohere&quot; | &quot;copilot&quot; | string
  provider = &quot;claude&quot;, -- The provider used in Aider mode or in the planning phase of Cursor Planning Mode
  -- WARNING: Since auto-suggestions are a high-frequency operation and therefore expensive,
  -- currently designating it as `copilot` provider is dangerous because: https://github.com/yetone/avante.nvim/issues/1048
  -- Of course, you can reduce the request frequency by increasing `suggestion.debounce`.
  auto_suggestions_provider = &quot;claude&quot;,
  cursor_applying_provider = nil, -- The provider used in the applying phase of Cursor Planning Mode, defaults to nil, when nil uses Config.provider as the provider for the applying phase
  claude = {
    endpoint = &quot;https://api.anthropic.com&quot;,
    model = &quot;claude-3-5-sonnet-20241022&quot;,
    temperature = 0,
    max_tokens = 4096,
  },
  ---Specify the special dual_boost mode
  ---1. enabled: Whether to enable dual_boost mode. Default to false.
  ---2. first_provider: The first provider to generate response. Default to &quot;openai&quot;.
  ---3. second_provider: The second provider to generate response. Default to &quot;claude&quot;.
  ---4. prompt: The prompt to generate response based on the two reference outputs.
  ---5. timeout: Timeout in milliseconds. Default to 60000.
  ---How it works:
  --- When dual_boost is enabled, avante will generate two responses from the first_provider and second_provider respectively. Then use the response from the first_provider as provider1_output and the response from the second_provider as provider2_output. Finally, avante will generate a response based on the prompt and the two reference outputs, with the default Provider as normal.
  ---Note: This is an experimental feature and may not work as expected.
  dual_boost = {
    enabled = false,
    first_provider = &quot;openai&quot;,
    second_provider = &quot;claude&quot;,
    prompt = &quot;Based on the two reference outputs below, generate a response that incorporates elements from both but reflects your own judgment and unique perspective. Do not provide any explanation, just give the response directly. Reference Output 1: [{{provider1_output}}], Reference Output 2: [{{provider2_output}}]&quot;,
    timeout = 60000, -- Timeout in milliseconds
  },
  behaviour = {
    auto_suggestions = false, -- Experimental stage
    auto_set_highlight_group = true,
    auto_set_keymaps = true,
    auto_apply_diff_after_generation = false,
    support_paste_from_clipboard = false,
    minimize_diff = true, -- Whether to remove unchanged lines when applying a code block
    enable_token_counting = true, -- Whether to enable token counting. Default to true.
    enable_cursor_planning_mode = false, -- Whether to enable Cursor Planning Mode. Default to false.
  },
  mappings = {
    --- @class AvanteConflictMappings
    diff = {
      ours = &quot;co&quot;,
      theirs = &quot;ct&quot;,
      all_theirs = &quot;ca&quot;,
      both = &quot;cb&quot;,
      cursor = &quot;cc&quot;,
      next = &quot;]x&quot;,
      prev = &quot;[x&quot;,
    },
    suggestion = {
      accept = &quot;&amp;lt;M-l&amp;gt;&quot;,
      next = &quot;&amp;lt;M-]&amp;gt;&quot;,
      prev = &quot;&amp;lt;M-[&amp;gt;&quot;,
      dismiss = &quot;&amp;lt;C-]&amp;gt;&quot;,
    },
    jump = {
      next = &quot;]]&quot;,
      prev = &quot;[[&quot;,
    },
    submit = {
      normal = &quot;&amp;lt;CR&amp;gt;&quot;,
      insert = &quot;&amp;lt;C-s&amp;gt;&quot;,
    },
    sidebar = {
      apply_all = &quot;A&quot;,
      apply_cursor = &quot;a&quot;,
      retry_user_request = &quot;r&quot;,
      edit_user_request = &quot;e&quot;,
      switch_windows = &quot;&amp;lt;Tab&amp;gt;&quot;,
      reverse_switch_windows = &quot;&amp;lt;S-Tab&amp;gt;&quot;,
      remove_file = &quot;d&quot;,
      add_file = &quot;@&quot;,
      close = { &quot;&amp;lt;Esc&amp;gt;&quot;, &quot;q&quot; },
      close_from_input = nil, -- e.g., { normal = &quot;&amp;lt;Esc&amp;gt;&quot;, insert = &quot;&amp;lt;C-d&amp;gt;&quot; }
    },
  },
  hints = { enabled = true },
  windows = {
    ---@type &quot;right&quot; | &quot;left&quot; | &quot;top&quot; | &quot;bottom&quot;
    position = &quot;right&quot;, -- the position of the sidebar
    wrap = true, -- similar to vim.o.wrap
    width = 30, -- default % based on available width
    sidebar_header = {
      enabled = true, -- true, false to enable/disable the header
      align = &quot;center&quot;, -- left, center, right for title
      rounded = true,
    },
    input = {
      prefix = &quot;&amp;gt; &quot;,
      height = 8, -- Height of the input window in vertical layout
    },
    edit = {
      border = &quot;rounded&quot;,
      start_insert = true, -- Start insert mode when opening the edit window
    },
    ask = {
      floating = false, -- Open the &#39;AvanteAsk&#39; prompt in a floating window
      start_insert = true, -- Start insert mode when opening the ask window
      border = &quot;rounded&quot;,
      ---@type &quot;ours&quot; | &quot;theirs&quot;
      focus_on_apply = &quot;ours&quot;, -- which diff to focus after applying
    },
  },
  highlights = {
    ---@type AvanteConflictHighlights
    diff = {
      current = &quot;DiffText&quot;,
      incoming = &quot;DiffAdd&quot;,
    },
  },
  --- @class AvanteConflictUserConfig
  diff = {
    autojump = true,
    ---@type string | fun(): any
    list_opener = &quot;copen&quot;,
    --- Override the &#39;timeoutlen&#39; setting while hovering over a diff (see :help timeoutlen).
    --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`.
    --- Disable by setting to -1.
    override_timeoutlen = 500,
  },
  suggestion = {
    debounce = 600,
    throttle = 600,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Blink.cmp users&lt;/h2&gt; 
&lt;p&gt;For blink cmp users (nvim-cmp alternative) view below instruction for configuration This is achieved by emulating nvim-cmp using blink.compat or you can use &lt;a href=&quot;https://github.com/Kaiser-Yang/blink-cmp-avante&quot;&gt;Kaiser-Yang/blink-cmp-avante&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      file_selector = {
        --- @alias FileSelectorProvider &quot;native&quot; | &quot;fzf&quot; | &quot;mini.pick&quot; | &quot;snacks&quot; | &quot;telescope&quot; | string | fun(params: avante.file_selector.IParams|nil): nil
        provider = &quot;fzf&quot;,
        -- Options override for custom providers
        provider_opts = {},
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To create a customized file_selector, you can specify a customized function to launch a picker to select items and pass the selected items to the &lt;code&gt;handler&lt;/code&gt; callback.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      file_selector = {
        ---@param params avante.file_selector.IParams
        provider = function(params)
          local filepaths = params.filepaths ---@type string[]
          local title = params.title ---@type string
          local handler = params.handler ---@type fun(selected_filepaths: string[]|nil): nil

          -- Launch your customized picker with the items built from `filepaths`, then in the `on_confirm` callback,
          -- pass the selected items (convert back to file paths) to the `handler` function.

          local items = __your_items_formatter__(filepaths)
          __your_picker__({
            items = items,
            on_cancel = function()
              handler(nil)
            end,
            on_confirm = function(selected_items)
              local selected_filepaths = {}
              for _, item in ipairs(selected_items) do
                table.insert(selected_filepaths, item.filepath)
              end
              handler(selected_filepaths)
            end
          })
        end,
        ---below is optional
        provider_opts = {
          ---@param params avante.file_selector.opts.IGetFilepathsParams
          get_filepaths = function(params)
            local cwd = params.cwd ---@type string
            local selected_filepaths = params.selected_filepaths ---@type string[]
            local cmd = string.format(&quot;fd --base-directory &#39;%s&#39; --hidden&quot;, vim.fn.fnameescape(cwd))
            local output = vim.fn.system(cmd)
            local filepaths = vim.split(output, &quot;\n&quot;, { trimempty = true })
            return vim
              .iter(filepaths)
              :filter(function(filepath)
                return not vim.tbl_contains(selected_filepaths, filepath)
              end)
              :totable()
          end
        }
        end
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Choose a selector other that native, the default as that currently has an issue For lazyvim users copy the full config for blink.cmp from the website or extend the options&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      compat = {
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For other users just add a custom provider&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      default = {
        ...
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      providers = {
        avante_commands = {
          name = &quot;avante_commands&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 90, -- show at a higher priority than lsp
          opts = {},
        },
        avante_files = {
          name = &quot;avante_files&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 100, -- show at a higher priority than lsp
          opts = {},
        },
        avante_mentions = {
          name = &quot;avante_mentions&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 1000, -- show at a higher priority than lsp
          opts = {},
        }
        ...
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Given its early stage, &lt;code&gt;avante.nvim&lt;/code&gt; currently supports the following basic functionalities:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;Avante will only support Claude, and OpenAI (and its variants including azure)out-of-the-box due to its high code quality generation. For all OpenAI-compatible providers, see &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki/Custom-providers&quot;&gt;wiki&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;del&gt;Due to the poor performance of other models, avante.nvim only recommends using the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;All features can only be guaranteed to work properly on the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;We do not accept changes to the code or prompts to accommodate other models. Otherwise, it will greatly increase our maintenance costs.&lt;/del&gt; &amp;gt; &lt;del&gt;We hope everyone can understand. Thank you!&lt;/del&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;Since avante.nvim now supports &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor planning mode&lt;/a&gt;, the above statement is no longer valid! avante.nvim now supports most models! If you encounter issues with normal usage, please try enabling &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor planning mode&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;For most consistency between neovim session, it is recommended to set the environment variables in your shell file. By default, &lt;code&gt;Avante&lt;/code&gt; will prompt you at startup to input the API key for the provider you have selected.&lt;/p&gt; 
 &lt;p&gt;For Claude:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export ANTHROPIC_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Azure OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export AZURE_OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Amazon Bedrock:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export BEDROCK_KEYS=aws_access_key_id,aws_secret_access_key,aws_region[,aws_session_token]

&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: The aws_session_token is optional and only needed when using temporary AWS credentials&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open a code file in Neovim.&lt;/li&gt; 
 &lt;li&gt;Use the &lt;code&gt;:AvanteAsk&lt;/code&gt; command to query the AI about the code.&lt;/li&gt; 
 &lt;li&gt;Review the AI&#39;s suggestions.&lt;/li&gt; 
 &lt;li&gt;Apply the recommended changes directly to your code with a simple command or key binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The plugin is still under active development, and both its functionality and interface are subject to significant changes. Expect some rough edges and instability as the project evolves.&lt;/p&gt; 
&lt;h2&gt;Key Bindings&lt;/h2&gt; 
&lt;p&gt;The following key bindings are available for use with &lt;code&gt;avante.nvim&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key Binding&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;show sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;toggle sidebar visibility&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;refresh sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;switch sidebar focus&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;?&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;select model&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;edit selected blocks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose ours&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose all theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;0&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose none&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose both&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to previous conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to next conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;jump to previous codeblocks (results window)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;jump to next codeblocks (results windows)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;If you are using &lt;code&gt;lazy.nvim&lt;/code&gt;, then all keymap here will be safely set, meaning if &lt;code&gt;&amp;lt;leader&amp;gt;aa&lt;/code&gt; is already binded, then avante.nvim won&#39;t bind this mapping. In this case, user will be responsible for setting up their own. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki#keymaps-and-api-i-guess&quot;&gt;notes on keymaps&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Neotree shortcut&lt;/h3&gt; 
&lt;p&gt;In the neotree sidebar, you can also add a new keyboard shortcut to quickly add &lt;code&gt;file/folder&lt;/code&gt; to &lt;code&gt;Avante Selected Files&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neotree configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &#39;nvim-neo-tree/neo-tree.nvim&#39;,
    config = function()
      require(&#39;neo-tree&#39;).setup({
        filesystem = {
          commands = {
            avante_add_files = function(state)
              local node = state.tree:get_node()
              local filepath = node:get_id()
              local relative_path = require(&#39;avante.utils&#39;).relative_path(filepath)

              local sidebar = require(&#39;avante&#39;).get()

              local open = sidebar:is_open()
              -- ensure avante sidebar is open
              if not open then
                require(&#39;avante.api&#39;).ask()
                sidebar = require(&#39;avante&#39;).get()
              end

              sidebar.file_selector:add_selected_file(relative_path)

              -- remove neo tree buffer
              if not open then
                sidebar.file_selector:remove_selected_file(&#39;neo-tree filesystem [1]&#39;)
              end
            end,
          },
          window = {
            mappings = {
              [&#39;oa&#39;] = &#39;avante_add_files&#39;,
            },
          },
        },
      })
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Examples&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk [question] [position]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Ask AI about your code. Optional &lt;code&gt;position&lt;/code&gt; set window position and &lt;code&gt;ask&lt;/code&gt; enable/disable direct asking mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk position=right Refactor this code here&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteBuild&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Build dependencies for the project&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteChat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Start a chat session with AI about your codebase. Default is &lt;code&gt;ask&lt;/code&gt;=false&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteClear&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear the chat history&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteEdit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Edit the selected code blocks&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteFocus&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch focus to/from the sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteRefresh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Refresh all Avante windows&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteSwitchProvider&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch AI provider (e.g. openai)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteShowRepoMap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show repo map for project&#39;s structure&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle the Avante sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show model list&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Highlight Groups&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteTitle&lt;/td&gt; 
   &lt;td&gt;Title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteSubtitle&lt;/td&gt; 
   &lt;td&gt;Selected code title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedSubtitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteThirdTitle&lt;/td&gt; 
   &lt;td&gt;Prompt title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedThirdTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrent&lt;/td&gt; 
   &lt;td&gt;Current conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.current&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncoming&lt;/td&gt; 
   &lt;td&gt;Incoming conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.incoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrentLabel&lt;/td&gt; 
   &lt;td&gt;Current conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictCurrent&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncomingLabel&lt;/td&gt; 
   &lt;td&gt;Incoming conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictIncoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvantePopupHint&lt;/td&gt; 
   &lt;td&gt;Usage hints in popup menus&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteInlineHint&lt;/td&gt; 
   &lt;td&gt;The end-of-line hint displayed in visual mode&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/highlights.lua&quot;&gt;highlights.lua&lt;/a&gt; for more information&lt;/p&gt; 
&lt;h2&gt;Ollama&lt;/h2&gt; 
&lt;p&gt;ollama is a first-class provider for avante.nvim. You can use it by setting &lt;code&gt;provider = &quot;ollama&quot;&lt;/code&gt; in the configuration, and set the &lt;code&gt;model&lt;/code&gt; field in &lt;code&gt;ollama&lt;/code&gt; to the model you want to use. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;provider = &quot;ollama&quot;,
ollama = {
  model = &quot;qwq:32b&quot;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you use ollama, the code planning effect may not be ideal, so it is strongly recommended that you enable &lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/cursor-planning-mode.md&quot;&gt;cursor-planning-mode&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom providers&lt;/h2&gt; 
&lt;p&gt;Avante provides a set of default providers, but users can also create their own providers.&lt;/p&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki/Custom-providers&quot;&gt;Custom Providers&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Cursor planning mode&lt;/h2&gt; 
&lt;p&gt;Because avante.nvim has always used Aider’s method for planning applying, but its prompts are very picky with models and require ones like claude-3.5-sonnet or gpt-4o to work properly.&lt;/p&gt; 
&lt;p&gt;Therefore, I have adopted Cursor’s method to implement planning applying. For details on the implementation, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor-planning-mode.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;RAG Service&lt;/h2&gt; 
&lt;p&gt;Avante provides a RAG service, which is a tool for obtaining the required context for the AI to generate the codes. By default, it is not enabled. You can enable it this way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rag_service = {
  enabled = false, -- Enables the RAG service
  host_mount = os.getenv(&quot;HOME&quot;), -- Host mount path for the rag service
  provider = &quot;openai&quot;, -- The provider to use for RAG service (e.g. openai or ollama)
  llm_model = &quot;&quot;, -- The LLM model to use for RAG service
  embed_model = &quot;&quot;, -- The embedding model to use for RAG service
  endpoint = &quot;https://api.openai.com/v1&quot;, -- The API endpoint for RAG service
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;openai&lt;/code&gt;, then you need to set the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable!&lt;/p&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, you need to set the endpoint to &lt;code&gt;http://localhost:11434&lt;/code&gt; (note there is no &lt;code&gt;/v1&lt;/code&gt; at the end) or any address of your own ollama server.&lt;/p&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, when &lt;code&gt;llm_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;llama3&lt;/code&gt;, and when &lt;code&gt;embed_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;nomic-embed-text&lt;/code&gt;. Please make sure these models are available in your ollama server.&lt;/p&gt; 
&lt;p&gt;Additionally, RAG Service also depends on Docker! (For macOS users, OrbStack is recommended as a Docker alternative).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;host_mount&lt;/code&gt; is the path that will be mounted to the container, and the default is the home directory. The mount is required for the RAG service to access the files in the host machine. It is up to the user to decide if you want to mount the whole &lt;code&gt;/&lt;/code&gt; directory, just the project directory, or the home directory. If you plan using avante and RAG event for projects stored outside your home directory, you will need to set the &lt;code&gt;host_mount&lt;/code&gt; to the root directory of your file system.&lt;/p&gt; 
&lt;p&gt;The mount will be read only.&lt;/p&gt; 
&lt;p&gt;After changing the rag_service configuration, you need to manually delete the rag_service container to ensure the new configuration is used: &lt;code&gt;docker rm -fv avante-rag-service&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Web Search Engines&lt;/h2&gt; 
&lt;p&gt;Avante&#39;s tools include some web search engines, currently support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tavily.com/&quot;&gt;Tavily&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://serpapi.com/&quot;&gt;SerpApi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.searchapi.io/&quot;&gt;SearchAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google&#39;s &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;Programmable Search Engine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.kagi.com/kagi/api/search.html&quot;&gt;Kagi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api-dashboard.search.brave.com/app/documentation/web-search/get-started&quot;&gt;Brave Search&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The default is Tavily, and can be changed through configuring &lt;code&gt;Config.web_search_engine.provider&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;web_search_engine = {
  provider = &quot;tavily&quot;, -- tavily, serpapi, searchapi, google or kagi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Environment variables required for providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tavily: &lt;code&gt;TAVILY_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SerpApi: &lt;code&gt;SERPAPI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SearchAPI: &lt;code&gt;SEARCHAPI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Google: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_ENGINE_ID&lt;/code&gt; as the &lt;a href=&quot;https://programmablesearchengine.google.com&quot;&gt;search engine&lt;/a&gt; ID&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Kagi: &lt;code&gt;KAGI_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://kagi.com/settings?p=api&quot;&gt;API Token&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brave Search: &lt;code&gt;BRAVE_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://api-dashboard.search.brave.com/app/keys&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disable Tools&lt;/h2&gt; 
&lt;p&gt;Avante enables tools by default, but some LLM models do not support tools. You can disable tools by setting &lt;code&gt;disable_tools = true&lt;/code&gt; for the provider. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  claude = {
    endpoint = &quot;https://api.anthropic.com&quot;,
    model = &quot;claude-3-5-sonnet-20241022&quot;,
    timeout = 30000, -- Timeout in milliseconds
    temperature = 0,
    max_tokens = 4096,
    disable_tools = true, -- disable tools!
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you want to ban some tools to avoid its usage (like Claude 3.7 overusing the python tool) you can disable just specific tools&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  disabled_tools = { &quot;python&quot; },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tool list&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;rag_search, python, git_diff, git_commit, list_files, search_files, search_keyword, read_file_toplevel_symbols, read_file, create_file, rename_file, delete_file, create_dir, rename_dir, delete_dir, bash, web_search, fetch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom Tools&lt;/h2&gt; 
&lt;p&gt;Avante allows you to define custom tools that can be used by the AI during code generation and analysis. These tools can execute shell commands, run scripts, or perform any custom logic you need.&lt;/p&gt; 
&lt;h3&gt;Example: Go Test Runner&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Here&#39;s an example of a custom tool that runs Go unit tests:&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  custom_tools = {
    {
      name = &quot;run_go_tests&quot;,  -- Unique name for the tool
      description = &quot;Run Go unit tests and return results&quot;,  -- Description shown to AI
      command = &quot;go test -v ./...&quot;,  -- Shell command to execute
      param = {  -- Input parameters (optional)
        type = &quot;table&quot;,
        fields = {
          {
            name = &quot;target&quot;,
            description = &quot;Package or directory to test (e.g. &#39;./pkg/...&#39; or &#39;./internal/pkg&#39;)&quot;,
            type = &quot;string&quot;,
            optional = true,
          },
        },
      },
      returns = {  -- Expected return values
        {
          name = &quot;result&quot;,
          description = &quot;Result of the fetch&quot;,
          type = &quot;string&quot;,
        },
        {
          name = &quot;error&quot;,
          description = &quot;Error message if the fetch was not successful&quot;,
          type = &quot;string&quot;,
          optional = true,
        },
      },
      func = function(params, on_log, on_complete)  -- Custom function to execute
        local target = params.target or &quot;./...&quot;
        return vim.fn.system(string.format(&quot;go test -v %s&quot;, target))
      end,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;MCP&lt;/h2&gt; 
&lt;p&gt;Now you can integrate MCP functionality for Avante through &lt;code&gt;mcphub.nvim&lt;/code&gt;. For detailed documentation, please refer to &lt;a href=&quot;https://github.com/ravitemer/mcphub.nvim#avante-integration&quot;&gt;mcphub.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Custom prompts&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;avante.nvim&lt;/code&gt; provides three different modes to interact with: &lt;code&gt;planning&lt;/code&gt;, &lt;code&gt;editing&lt;/code&gt;, and &lt;code&gt;suggesting&lt;/code&gt;, followed with three different prompts per mode.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on sidebar&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;editing&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).edit()&lt;/code&gt; on selection codeblock&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;suggesting&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).get_suggestion():suggest()&lt;/code&gt; on Tab flow.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cursor-planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on Tab flow, but only when cursor planning mode is enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Users can customize the system prompts via &lt;code&gt;Config.system_prompt&lt;/code&gt;. We recommend calling this in a custom Autocmds depending on your need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;User&quot;, {
  pattern = &quot;ToggleMyPrompt&quot;,
  callback = function() require(&quot;avante.config&quot;).override({system_prompt = &quot;MY CUSTOM SYSTEM PROMPT&quot;}) end,
})

vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;am&quot;, function() vim.api.nvim_exec_autocmds(&quot;User&quot;, { pattern = &quot;ToggleMyPrompt&quot; }) end, { desc = &quot;avante: toggle my prompt&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If one wish to custom prompts for each mode, &lt;code&gt;avante.nvim&lt;/code&gt; will check for project root based on the given buffer whether it contains the following patterns: &lt;code&gt;*.{mode}.avanterules&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The rules for root hierarchy:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;lsp workspace folders&lt;/li&gt; 
 &lt;li&gt;lsp root_dir&lt;/li&gt; 
 &lt;li&gt;root pattern of filename of the current buffer&lt;/li&gt; 
 &lt;li&gt;root pattern of cwd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example folder structure for custom prompt&lt;/summary&gt; 
 &lt;p&gt;If you have the following structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;.
├── .git/
├── typescript.planning.avanterules
├── snippets.editing.avanterules
├── suggesting.avanterules
└── src/

&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;typescript.planning.avanterules&lt;/code&gt; will be used for &lt;code&gt;planning&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;snippets.editing.avanterules&lt;/code&gt; will be used for &lt;code&gt;editing&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;suggesting.avanterules&lt;/code&gt; will be used for &lt;code&gt;suggesting&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;*.avanterules&lt;/code&gt; is a jinja template file, in which will be rendered using &lt;a href=&quot;https://github.com/mitsuhiko/minijinja&quot;&gt;minijinja&lt;/a&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates&quot;&gt;templates&lt;/a&gt; for example on how to extend current templates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;TODOs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with current file&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Apply diff patch&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Slash commands&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Edit the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Smart Tab (Cursor Flow)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with project (You can use &lt;code&gt;@codebase&lt;/code&gt; to chat with the whole project)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with selected files&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Tool use&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; MCP&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Better codebase indexing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced AI Interactions&lt;/strong&gt;: Improve the depth of AI analysis and recommendations for more complex coding scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LSP + Tree-sitter + LLM Integration&lt;/strong&gt;: Integrate with LSP and Tree-sitter and LLM to provide more accurate and powerful code suggestions and analysis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to avante.nvim are welcome! If you&#39;re interested in helping out, please feel free to submit pull requests or open issues. Before contributing, ensure that your code has been thoroughly tested.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki&quot;&gt;wiki&lt;/a&gt; for more recipes and tricks.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;We would like to express our heartfelt gratitude to the contributors of the following open-source projects, whose code has provided invaluable inspiration and reference for the development of avante.nvim:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Nvim Plugin&lt;/th&gt; 
   &lt;th&gt;License&lt;/th&gt; 
   &lt;th&gt;Functionality&lt;/th&gt; 
   &lt;th&gt;Location&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/akinsho/git-conflict.nvim&quot;&gt;git-conflict.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;No License&lt;/td&gt; 
   &lt;td&gt;Diff comparison functionality&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/diff.lua&quot;&gt;lua/avante/diff.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jackMort/ChatGPT.nvim&quot;&gt;ChatGPT.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Calculation of tokens count&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/utils/tokens.lua&quot;&gt;lua/avante/utils/tokens.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HakonHarnes/img-clip.nvim&quot;&gt;img-clip.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Clipboard image support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/clipboard.lua&quot;&gt;lua/avante/clipboard.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot.lua&quot;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Copilot support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/copilot.lua&quot;&gt;lua/avante/providers/copilot.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HiPhish/jinja.vim&quot;&gt;jinja.vim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Template filetype support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/syntax/jinja.vim&quot;&gt;syntax/jinja.vim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim&quot;&gt;codecompanion.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Secrets logic support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/init.lua&quot;&gt;lua/avante/providers/init.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/paul-gauthier/aider&quot;&gt;aider&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Planning mode user prompt&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates/planning.avanterules&quot;&gt;lua/avante/templates/planning.avanterules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The high quality and ingenuity of these projects&#39; source code have been immensely beneficial throughout our development process. We extend our sincere thanks and respect to the authors and contributors of these projects. It is the selfless dedication of the open-source community that drives projects like avante.nvim forward.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Star History&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://star-history.com/#yetone/avante.nvim&amp;amp;Date&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&amp;amp;theme=dark&quot;&gt; 
   &lt;img alt=&quot;NebulaGraph Data Intelligence Suite(ngdi)&quot; src=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&quot;&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nvim-neo-tree/neo-tree.nvim</title>
      <link>https://github.com/nvim-neo-tree/neo-tree.nvim</link>
      <description>&lt;p&gt;Neovim plugin to manage the file system and other tree like structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neo-tree.nvim&lt;/h1&gt; 
&lt;p&gt;Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once!&lt;/p&gt; 
&lt;h3&gt;Neo-tree filesystem as Sidebar:&lt;/h3&gt; 
&lt;p&gt;This screenshot shows Neo-tree opened in the traditional sidebar layout:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-right-aligned-symbols.png&quot; alt=&quot;Neo-tree file system sidebar&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Neo-tree filesystem Netrw Style&lt;/h3&gt; 
&lt;p&gt;The below screenshot shows Neo-tree opened &quot;netrw style&quot; (&lt;code&gt;:Neotree position=current&lt;/code&gt;). When opened in this way, there is more room so the extra detail columns can be shown. This screenshot also shows how the contents can be sorted on any column. In this example, we are sorted on &quot;Size&quot; descending:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-file-details-and-sort.png&quot; alt=&quot;Neo-tree file system details&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Breaking Changes BAD &lt;span&gt;💣&lt;/span&gt; &lt;span&gt;👿&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#what-is-a-breaking-change&quot;&gt;What is a Breaking Change?&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Changelog#30&quot;&gt;Changelog 3.0&lt;/a&gt; for breaking changes and deprecations in 3.0.&lt;/p&gt; 
&lt;h3&gt;User Experience GOOD &lt;span&gt;🙂&lt;/span&gt; &lt;span&gt;👍&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in (neo)vim sidebars. I can&#39;t stand glitchy behavior, and neither should you!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neo-tree won&#39;t let other buffers take over its window.&lt;/li&gt; 
 &lt;li&gt;Neo-tree won&#39;t leave its window scrolled to the last line when there is plenty of room to display the whole tree.&lt;/li&gt; 
 &lt;li&gt;Neo-tree does not need to be manually refreshed (set &lt;code&gt;use_libuv_file_watcher=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree can intelligently follow the current file (set &lt;code&gt;follow_current_file.enabled=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree is thoughtful about maintaining or setting focus on the right node&lt;/li&gt; 
 &lt;li&gt;Neo-tree windows in different tabs are completely separate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;respect_gitignore&lt;/code&gt; actually works!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Neo-tree is smooth, efficient, stable, and pays attention to the little details. If you find anything janky, wanky, broken, or unintuitive, please open an issue so we can fix it.&lt;/p&gt; 
&lt;h2&gt;Minimal Quickstart&lt;/h2&gt; 
&lt;h4&gt;Minimal Example for Lazy:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- not strictly required, but recommended
    &quot;MunifTanjim/nui.nvim&quot;,
    -- {&quot;3rd/image.nvim&quot;, opts = {}}, -- Optional image support in preview window: See `# Preview Mode` for more information
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Minimal Example for Packer:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use({
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  requires = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- not strictly required, but recommended
    &quot;MunifTanjim/nui.nvim&quot;,
    -- &quot;3rd/image.nvim&quot;, -- Optional image support in preview window: See `# Preview Mode` for more information
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After installing, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Press &lt;code&gt;?&lt;/code&gt; in the Neo-tree window to view the list of mappings.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h4&gt;Longer Example for lazy.nvim:&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt; Click to view longer example for lazy.nvim &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  -- If you want neo-tree&#39;s file operations to work with LSP (updating imports, etc.), you can use a plugin like
  -- https://github.com/antosha417/nvim-lsp-file-operations:
  -- {
  --   &quot;antosha417/nvim-lsp-file-operations&quot;,
  --   dependencies = {
  --     &quot;nvim-lua/plenary.nvim&quot;,
  --     &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  --   },
  --   config = function()
  --     require(&quot;lsp-file-operations&quot;).setup()
  --   end,
  -- },
  {
    &quot;nvim-neo-tree/neo-tree.nvim&quot;,
    branch = &quot;v3.x&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;nvim-tree/nvim-web-devicons&quot;, -- not strictly required, but recommended
      &quot;MunifTanjim/nui.nvim&quot;,
      -- {&quot;3rd/image.nvim&quot;, opts = {}}, -- Optional image support in preview window: See `# Preview Mode` for more information
      {
        &quot;s1n7ax/nvim-window-picker&quot;, -- for open_with_window_picker keymaps
        version = &quot;2.*&quot;,
        config = function()
          require(&quot;window-picker&quot;).setup({
            filter_rules = {
              include_current_win = false,
              autoselect_one = true,
              -- filter using buffer options
              bo = {
                -- if the file type is one of following, the window will be ignored
                filetype = { &quot;neo-tree&quot;, &quot;neo-tree-popup&quot;, &quot;notify&quot; },
                -- if the buffer type is one of following, the window will be ignored
                buftype = { &quot;terminal&quot;, &quot;quickfix&quot; },
              },
            },
          })
        end,
      },
    },
    config = function()
      -- If you want icons for diagnostic errors, you&#39;ll need to define them somewhere:
      vim.fn.sign_define(&quot;DiagnosticSignError&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignError&quot; })
      vim.fn.sign_define(&quot;DiagnosticSignWarn&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignWarn&quot; })
      vim.fn.sign_define(&quot;DiagnosticSignInfo&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignInfo&quot; })
      vim.fn.sign_define(&quot;DiagnosticSignHint&quot;, { text = &quot;󰌵&quot;, texthl = &quot;DiagnosticSignHint&quot; })

      require(&quot;neo-tree&quot;).setup({
        close_if_last_window = false, -- Close Neo-tree if it is the last window left in the tab
        popup_border_style = &quot;rounded&quot;,
        enable_git_status = true,
        enable_diagnostics = true,
        open_files_do_not_replace_types = { &quot;terminal&quot;, &quot;trouble&quot;, &quot;qf&quot; }, -- when opening files, do not use windows containing these filetypes or buftypes
        open_files_using_relative_paths = false,
        sort_case_insensitive = false, -- used when sorting files and directories in the tree
        sort_function = nil, -- use a custom function for sorting files and directories in the tree
        -- sort_function = function (a,b)
        --       if a.type == b.type then
        --           return a.path &amp;gt; b.path
        --       else
        --           return a.type &amp;gt; b.type
        --       end
        --   end , -- this sorts files and directories descendantly
        default_component_configs = {
          container = {
            enable_character_fade = true,
          },
          indent = {
            indent_size = 2,
            padding = 1, -- extra padding on left hand side
            -- indent guides
            with_markers = true,
            indent_marker = &quot;│&quot;,
            last_indent_marker = &quot;└&quot;,
            highlight = &quot;NeoTreeIndentMarker&quot;,
            -- expander config, needed for nesting files
            with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders
            expander_collapsed = &quot;&quot;,
            expander_expanded = &quot;&quot;,
            expander_highlight = &quot;NeoTreeExpander&quot;,
          },
          icon = {
            folder_closed = &quot;&quot;,
            folder_open = &quot;&quot;,
            folder_empty = &quot;󰜌&quot;,
            provider = function(icon, node, state) -- default icon provider utilizes nvim-web-devicons if available
              if node.type == &quot;file&quot; or node.type == &quot;terminal&quot; then
                local success, web_devicons = pcall(require, &quot;nvim-web-devicons&quot;)
                local name = node.type == &quot;terminal&quot; and &quot;terminal&quot; or node.name
                if success then
                  local devicon, hl = web_devicons.get_icon(name)
                  icon.text = devicon or icon.text
                  icon.highlight = hl or icon.highlight
                end
              end
            end,
            -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there
            -- then these will never be used.
            default = &quot;*&quot;,
            highlight = &quot;NeoTreeFileIcon&quot;,
          },
          modified = {
            symbol = &quot;[+]&quot;,
            highlight = &quot;NeoTreeModified&quot;,
          },
          name = {
            trailing_slash = false,
            use_git_status_colors = true,
            highlight = &quot;NeoTreeFileName&quot;,
          },
          git_status = {
            symbols = {
              -- Change type
              added = &quot;&quot;, -- or &quot;✚&quot;, but this is redundant info if you use git_status_colors on the name
              modified = &quot;&quot;, -- or &quot;&quot;, but this is redundant info if you use git_status_colors on the name
              deleted = &quot;✖&quot;, -- this can only be used in the git_status source
              renamed = &quot;󰁕&quot;, -- this can only be used in the git_status source
              -- Status type
              untracked = &quot;&quot;,
              ignored = &quot;&quot;,
              unstaged = &quot;󰄱&quot;,
              staged = &quot;&quot;,
              conflict = &quot;&quot;,
            },
          },
          -- If you don&#39;t want to use these columns, you can set `enabled = false` for each of them individually
          file_size = {
            enabled = true,
            width = 12, -- width of the column
            required_width = 64, -- min width of window required to show this column
          },
          type = {
            enabled = true,
            width = 10, -- width of the column
            required_width = 122, -- min width of window required to show this column
          },
          last_modified = {
            enabled = true,
            width = 20, -- width of the column
            required_width = 88, -- min width of window required to show this column
          },
          created = {
            enabled = true,
            width = 20, -- width of the column
            required_width = 110, -- min width of window required to show this column
          },
          symlink_target = {
            enabled = false,
          },
        },
        -- A list of functions, each representing a global custom command
        -- that will be available in all sources (if not overridden in `opts[source_name].commands`)
        -- see `:h neo-tree-custom-commands-global`
        commands = {},
        window = {
          position = &quot;left&quot;,
          width = 40,
          mapping_options = {
            noremap = true,
            nowait = true,
          },
          mappings = {
            [&quot;&amp;lt;space&amp;gt;&quot;] = {
              &quot;toggle_node&quot;,
              nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use
            },
            [&quot;&amp;lt;2-LeftMouse&amp;gt;&quot;] = &quot;open&quot;,
            [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open&quot;,
            [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;cancel&quot;, -- close preview or floating neo-tree window
            [&quot;P&quot;] = { &quot;toggle_preview&quot;, config = { use_float = true, use_image_nvim = true } },
            -- Read `# Preview Mode` for more information
            [&quot;l&quot;] = &quot;focus_preview&quot;,
            [&quot;S&quot;] = &quot;open_split&quot;,
            [&quot;s&quot;] = &quot;open_vsplit&quot;,
            -- [&quot;S&quot;] = &quot;split_with_window_picker&quot;,
            -- [&quot;s&quot;] = &quot;vsplit_with_window_picker&quot;,
            [&quot;t&quot;] = &quot;open_tabnew&quot;,
            -- [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open_drop&quot;,
            -- [&quot;t&quot;] = &quot;open_tab_drop&quot;,
            [&quot;w&quot;] = &quot;open_with_window_picker&quot;,
            --[&quot;P&quot;] = &quot;toggle_preview&quot;, -- enter preview mode, which shows the current node without focusing
            [&quot;C&quot;] = &quot;close_node&quot;,
            -- [&#39;C&#39;] = &#39;close_all_subnodes&#39;,
            [&quot;z&quot;] = &quot;close_all_nodes&quot;,
            --[&quot;Z&quot;] = &quot;expand_all_nodes&quot;,
            [&quot;a&quot;] = {
              &quot;add&quot;,
              -- this command supports BASH style brace expansion (&quot;x{a,b,c}&quot; -&amp;gt; xa,xb,xc). see `:h neo-tree-file-actions` for details
              -- some commands may take optional config options, see `:h neo-tree-mappings` for details
              config = {
                show_path = &quot;none&quot;, -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
              },
            },
            [&quot;A&quot;] = &quot;add_directory&quot;, -- also accepts the optional config.show_path option like &quot;add&quot;. this also supports BASH style brace expansion.
            [&quot;d&quot;] = &quot;delete&quot;,
            [&quot;r&quot;] = &quot;rename&quot;,
            [&quot;b&quot;] = &quot;rename_basename&quot;,
            [&quot;y&quot;] = &quot;copy_to_clipboard&quot;,
            [&quot;x&quot;] = &quot;cut_to_clipboard&quot;,
            [&quot;p&quot;] = &quot;paste_from_clipboard&quot;,
            [&quot;c&quot;] = &quot;copy&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;:
            -- [&quot;c&quot;] = {
            --  &quot;copy&quot;,
            --  config = {
            --    show_path = &quot;none&quot; -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
            --  }
            --}
            [&quot;m&quot;] = &quot;move&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;.
            [&quot;q&quot;] = &quot;close_window&quot;,
            [&quot;R&quot;] = &quot;refresh&quot;,
            [&quot;?&quot;] = &quot;show_help&quot;,
            [&quot;&amp;lt;&quot;] = &quot;prev_source&quot;,
            [&quot;&amp;gt;&quot;] = &quot;next_source&quot;,
            [&quot;i&quot;] = &quot;show_file_details&quot;,
            -- [&quot;i&quot;] = {
            --   &quot;show_file_details&quot;,
            --   -- format strings of the timestamps shown for date created and last modified (see `:h os.date()`)
            --   -- both options accept a string or a function that takes in the date in seconds and returns a string to display
            --   -- config = {
            --   --   created_format = &quot;%Y-%m-%d %I:%M %p&quot;,
            --   --   modified_format = &quot;relative&quot;, -- equivalent to the line below
            --   --   modified_format = function(seconds) return require(&#39;neo-tree.utils&#39;).relative_date(seconds) end
            --   -- }
            -- },
          },
        },
        nesting_rules = {},
        filesystem = {
          filtered_items = {
            visible = false, -- when true, they will just be displayed differently than normal items
            hide_dotfiles = true,
            hide_gitignored = true,
            hide_hidden = true, -- only works on Windows for hidden files/directories
            hide_by_name = {
              --&quot;node_modules&quot;
            },
            hide_by_pattern = { -- uses glob style patterns
              --&quot;*.meta&quot;,
              --&quot;*/src/*/tsconfig.json&quot;,
            },
            always_show = { -- remains visible even if other settings would normally hide it
              --&quot;.gitignored&quot;,
            },
            always_show_by_pattern = { -- uses glob style patterns
              --&quot;.env*&quot;,
            },
            never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show
              --&quot;.DS_Store&quot;,
              --&quot;thumbs.db&quot;
            },
            never_show_by_pattern = { -- uses glob style patterns
              --&quot;.null-ls_*&quot;,
            },
          },
          follow_current_file = {
            enabled = false, -- This will find and focus the file in the active buffer every time
            --               -- the current file is changed while the tree is open.
            leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
          },
          group_empty_dirs = false, -- when true, empty folders will be grouped together
          hijack_netrw_behavior = &quot;open_default&quot;, -- netrw disabled, opening a directory opens neo-tree
          -- in whatever position is specified in window.position
          -- &quot;open_current&quot;,  -- netrw disabled, opening a directory opens within the
          -- window like netrw would, regardless of window.position
          -- &quot;disabled&quot;,    -- netrw left alone, neo-tree does not handle opening dirs
          use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes
          -- instead of relying on nvim autocmd events.
          window = {
            mappings = {
              [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
              [&quot;.&quot;] = &quot;set_root&quot;,
              [&quot;H&quot;] = &quot;toggle_hidden&quot;,
              [&quot;/&quot;] = &quot;fuzzy_finder&quot;,
              [&quot;D&quot;] = &quot;fuzzy_finder_directory&quot;,
              [&quot;#&quot;] = &quot;fuzzy_sorter&quot;, -- fuzzy sorting using the fzy algorithm
              -- [&quot;D&quot;] = &quot;fuzzy_sorter_directory&quot;,
              [&quot;f&quot;] = &quot;filter_on_submit&quot;,
              [&quot;&amp;lt;c-x&amp;gt;&quot;] = &quot;clear_filter&quot;,
              [&quot;[g&quot;] = &quot;prev_git_modified&quot;,
              [&quot;]g&quot;] = &quot;next_git_modified&quot;,
              [&quot;o&quot;] = {
                &quot;show_help&quot;,
                nowait = false,
                config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
              },
              [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
              [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
              [&quot;og&quot;] = { &quot;order_by_git_status&quot;, nowait = false },
              [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
              [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
              [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
              [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
              -- [&#39;&amp;lt;key&amp;gt;&#39;] = function(state) ... end,
            },
            fuzzy_finder_mappings = { -- define keymaps for filter popup window in fuzzy_finder_mode
              [&quot;&amp;lt;down&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
              [&quot;&amp;lt;C-n&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
              [&quot;&amp;lt;up&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
              [&quot;&amp;lt;C-p&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
              [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;close&quot;,
              -- [&#39;&amp;lt;key&amp;gt;&#39;] = function(state, scroll_padding) ... end,
            },
          },

          commands = {}, -- Add a custom command or override a global one using the same function name
        },
        buffers = {
          follow_current_file = {
            enabled = true, -- This will find and focus the file in the active buffer every time
            --              -- the current file is changed while the tree is open.
            leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
          },
          group_empty_dirs = true, -- when true, empty folders will be grouped together
          show_unloaded = true,
          window = {
            mappings = {
              [&quot;d&quot;] = &quot;buffer_delete&quot;,
              [&quot;bd&quot;] = &quot;buffer_delete&quot;,
              [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
              [&quot;.&quot;] = &quot;set_root&quot;,
              [&quot;o&quot;] = {
                &quot;show_help&quot;,
                nowait = false,
                config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
              },
              [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
              [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
              [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
              [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
              [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
              [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
            },
          },
        },
        git_status = {
          window = {
            position = &quot;float&quot;,
            mappings = {
              [&quot;A&quot;] = &quot;git_add_all&quot;,
              [&quot;gu&quot;] = &quot;git_unstage_file&quot;,
              [&quot;ga&quot;] = &quot;git_add_file&quot;,
              [&quot;gr&quot;] = &quot;git_revert_file&quot;,
              [&quot;gc&quot;] = &quot;git_commit&quot;,
              [&quot;gp&quot;] = &quot;git_push&quot;,
              [&quot;gg&quot;] = &quot;git_commit_and_push&quot;,
              [&quot;o&quot;] = {
                &quot;show_help&quot;,
                nowait = false,
                config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
              },
              [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
              [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
              [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
              [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
              [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
              [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
            },
          },
        },
      })

      vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;, &quot;&amp;lt;Cmd&amp;gt;Neotree reveal&amp;lt;CR&amp;gt;&quot;)
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;em&gt;The above configuration is not everything that can be changed, it&#39;s just the parts you might want to change first.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree&lt;/code&gt; for full documentation. You can also preview that online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/neo-tree.txt&quot;&gt;doc/neo-tree.txt&lt;/a&gt;, although it&#39;s best viewed within vim.&lt;/p&gt; 
&lt;p&gt;To see all of the default config options with commentary, you can view it online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt;. You can also paste it into a buffer after installing Neo-tree by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:lua require(&quot;neo-tree&quot;).paste_default_config()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;The &lt;code&gt;:Neotree&lt;/code&gt; Command&lt;/h2&gt; 
&lt;p&gt;The single &lt;code&gt;:Neotree&lt;/code&gt; command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, &quot;revealing&quot; the currently active file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree filesystem reveal right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree source=filesystem reveal=true position=right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will open the filesystem source on the left hand side and focus it, if you are using the default config.&lt;/p&gt; 
&lt;h3&gt;Tab Completion&lt;/h3&gt; 
&lt;p&gt;Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Arguments&lt;/h3&gt; 
&lt;p&gt;Here is the full list of arguments you can use:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;action&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to do. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;focus&lt;/td&gt; 
   &lt;td&gt;Show and/or switch focus to the specified Neotree window. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;show&lt;/td&gt; 
   &lt;td&gt;Show the window, but keep focus on your current window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the window(s) specified. Can be combined with &quot;position&quot; and/or &quot;source&quot; to specify which window(s) to close.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;source&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to show. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filesystem&lt;/td&gt; 
   &lt;td&gt;Show a file browser. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;Show a list of currently open buffers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;git_status&lt;/td&gt; 
   &lt;td&gt;Show the output of &lt;code&gt;git status&lt;/code&gt; in a tree layout.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;last&lt;/td&gt; 
   &lt;td&gt;Equivalent to the last source used&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Where to show it, can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;left&lt;/td&gt; 
   &lt;td&gt;Open as left hand sidebar. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;right&lt;/td&gt; 
   &lt;td&gt;Open as right hand sidebar.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;top&lt;/td&gt; 
   &lt;td&gt;Open as top window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bottom&lt;/td&gt; 
   &lt;td&gt;Open as bottom window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;float&lt;/td&gt; 
   &lt;td&gt;Open as floating window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;current&lt;/td&gt; 
   &lt;td&gt;Open within the current window, like netrw or vinegar would.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;toggle&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this means that the window will be closed if it is already open.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don&#39;t need the full dir=/path. You may use any value that can be passed to the &#39;expand&#39; function, such as &lt;code&gt;%:p:h:h&lt;/code&gt; to specify two directories up from the current file. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree ./relative/path
:Neotree /home/user/relative/path
:Neotree dir=/home/user/relative/path
:Neotree position=current dir=relative/path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;git_base&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The base that is used to calculate the git status for each dir/file. By default it uses &lt;code&gt;HEAD&lt;/code&gt;, so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to &lt;code&gt;main&lt;/code&gt;. It will show all changes that happened on the feature branch and main since you branched off.&lt;/p&gt; 
&lt;p&gt;Any git ref, commit, tag, or sha will work.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree main
:Neotree v1.0
:Neotree git_base=8fe34be
:Neotree git_base=HEAD
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;reveal_file&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A path to a file to reveal. This supersedes the &quot;reveal&quot; flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like &quot;dir&quot;, you can pass any value that can be passed to the &#39;expand&#39; function. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree reveal_file=/home/user/my/file.text
:Neotree position=current dir=%:p:h:h reveal_file=%:p
:Neotree current %:p:h:h %:p
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nnoremap gd :Neotree float reveal_file=&amp;lt;cfile&amp;gt; reveal_force_cwd&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal_force_cwd&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies &quot;reveal&quot;, so you do not need to specify both.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;selector&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. When you specifically set this to false (&lt;code&gt;selector=false&lt;/code&gt;) neo-tree will disable the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#source-selector&quot;&gt;source selector&lt;/a&gt; for that neo-tree instance. Otherwise, the source selector will depend on what you specified in the configuration (&lt;code&gt;config.source_selector.{winbar,statusline}&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-commands&lt;/code&gt; for details and a full listing of available arguments.&lt;/p&gt; 
&lt;h3&gt;File Nesting&lt;/h3&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-file-nesting&lt;/code&gt; for more details about file nesting.&lt;/p&gt; 
&lt;h3&gt;Netrw Hijack&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;:edit .
:[v]split .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;code&gt;&quot;filesystem.window.position&quot;&lt;/code&gt; is set to &lt;code&gt;&quot;current&quot;&lt;/code&gt;, or if you have specified &lt;code&gt;filesystem.hijack_netrw_behavior = &quot;open_current&quot;&lt;/code&gt;, then any command that would open a directory will open neo-tree in the specified window.&lt;/p&gt; 
&lt;h2&gt;Sources&lt;/h2&gt; 
&lt;p&gt;Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items.&lt;/p&gt; 
&lt;h3&gt;filesystem&lt;/h3&gt; 
&lt;p&gt;The default source is &lt;code&gt;filesystem&lt;/code&gt;, which displays your files and folders. This is the default source in commands when none is specified.&lt;/p&gt; 
&lt;p&gt;This source can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Browse the filesystem&lt;/li&gt; 
 &lt;li&gt;Control the current working directory of nvim&lt;/li&gt; 
 &lt;li&gt;Add/Copy/Delete/Move/Rename files and directories&lt;/li&gt; 
 &lt;li&gt;Search the filesystem&lt;/li&gt; 
 &lt;li&gt;Monitor git status and lsp diagnostics for the current working directory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;buffers&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-buffers.png&quot; alt=&quot;Neo-tree buffers&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Another available source is &lt;code&gt;buffers&lt;/code&gt;, which displays your open buffers. This is the same list you would see from &lt;code&gt;:ls&lt;/code&gt;. To show with the &lt;code&gt;buffers&lt;/code&gt; list, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree buffers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;git_status&lt;/h3&gt; 
&lt;p&gt;This view take the results of the &lt;code&gt;git status&lt;/code&gt; command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing.&lt;/p&gt; 
&lt;p&gt;The screenshot below shows the result of &lt;code&gt;:Neotree float git_status&lt;/code&gt; while the filesystem is open in a sidebar:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-git_status.png&quot; alt=&quot;Neo-tree git_status&quot;&gt;&lt;/p&gt; 
&lt;p&gt;You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree float git_status git_base=main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;document_symbols&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/neo-tree-document-symbols.png&quot; alt=&quot;Neo-tree document_symbols&quot;&gt; The document_symbols source lists the symbols in the current document obtained by the LSP request &quot;textDocument/documentSymbols&quot;. It currently supports the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; UI: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Display all symbols in the current file with symbol kinds&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Symbols nesting&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Configurable kinds&#39; name and icon&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Auto-refresh symbol list 
    &lt;ul&gt; 
     &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Follow cursor&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Commands 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jump to symbols, open symbol in split,... (&lt;code&gt;open_split&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Rename symbols (&lt;code&gt;rename&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Preview symbol (&lt;code&gt;preview&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Hover docs&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Call hierarchy&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; LSP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; LSP Support&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; LSP server selection (ignore, allow_only, use first, use all, etc.)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; CoC Support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See #879 for the tracking issue of these features.&lt;/p&gt; 
&lt;p&gt;This source is currently experimental, so in order to use it, you need to first add &lt;code&gt;&quot;document_symbols&quot;&lt;/code&gt; to &lt;code&gt;config.sources&lt;/code&gt; and open it with the command&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree document_symbols
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Sources&lt;/h3&gt; 
&lt;p&gt;There are more sources available as extensions that are managed outside of this repository. See the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/External-Sources&quot;&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Source Selector&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-source-selector.png&quot; alt=&quot;Neo-tree source selector&quot;&gt;&lt;/p&gt; 
&lt;p&gt;You can enable a clickable source selector in either the winbar (requires neovim 0.8+) or the statusline. To do so, set one of these options to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;    require(&quot;neo-tree&quot;).setup({
        source_selector = {
            winbar = false,
            statusline = false
        }
    })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many configuration options to change the style of these tabs. See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Preview Mode&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neo-tree-preview-mode&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Preview mode will temporarily show whatever file the cursor is on without switching focus from the Neo-tree window. By default, files will be previewed in a new floating window. This can also be configured to automatically choose an existing split by configuring the command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neo-tree&quot;).setup({
  window = {
    mappings = {
      [&quot;P&quot;] = {
        &quot;toggle_preview&quot;,
        config = {
          use_float = false,
          -- use_image_nvim = true,
          -- title = &#39;Neo-tree Preview&#39;,
        },
      },
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Anything that causes Neo-tree to lose focus will end preview mode. When &lt;code&gt;use_float = false&lt;/code&gt;, the window that was taken over by preview mode will revert back to whatever was shown in that window before preview mode began.&lt;/p&gt; 
&lt;p&gt;You can choose a custom title for the floating window by setting the &lt;code&gt;title&lt;/code&gt; option in its config.&lt;/p&gt; 
&lt;p&gt;If you want to work with the floating preview mode window in autocmds or other custom code, the window will have the &lt;code&gt;neo-tree-preview&lt;/code&gt; filetype.&lt;/p&gt; 
&lt;p&gt;When preview mode is not using floats, the window will have the window local variable &lt;code&gt;neo_tree_preview&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; to indicate that it is being used as a preview window. You can refer to this in statusline and winbar configs to mark a window as being used as a preview.&lt;/p&gt; 
&lt;h4&gt;Image Support in Preview Mode&lt;/h4&gt; 
&lt;p&gt;If you have &lt;a href=&quot;https://github.com/3rd/image.nvim&quot;&gt;3rd/image.nvim&lt;/a&gt; installed, preview mode supports image rendering by default using kitty graphics protocol or ueberzug (&lt;a href=&quot;https://user-images.githubusercontent.com/41065736/277180763-b7152637-f310-43a5-b8c3-4bcba135629d.mp4&quot;&gt;Video&lt;/a&gt;). However, if you do not want this feature, you can disable it by changing the option &lt;code&gt;use_image_nvim = false&lt;/code&gt; in the mappings config mentioned above.&lt;/p&gt; 
&lt;h2&gt;Configuration and Customization&lt;/h2&gt; 
&lt;p&gt;This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones.&lt;/p&gt; 
&lt;p&gt;Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component.&lt;/p&gt; 
&lt;p&gt;Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the &lt;code&gt;before_render&lt;/code&gt; event, create a component to display it, and reference that component in the renderer for the &lt;code&gt;file&lt;/code&gt; and/or &lt;code&gt;directory&lt;/code&gt; type.&lt;/p&gt; 
&lt;p&gt;Details on how to configure everything is in the help file at &lt;code&gt;:h neo-tree-configuration&lt;/code&gt; or online at &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/raw/main/doc/neo-tree.txt&quot;&gt;neo-tree.txt&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Recipes for customizations can be found on the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes&quot;&gt;wiki&lt;/a&gt;. Recipes include things like adding a component to show the &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;Harpoon&lt;/a&gt; index for files, or responding to the &lt;code&gt;&quot;file_opened&quot;&lt;/code&gt; event to auto clear the search when you open a file.&lt;/p&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;p&gt;There are many tree plugins for (Neo)vim, so why make another one? Well, I wanted something that was:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Easy to maintain and enhance.&lt;/li&gt; 
 &lt;li&gt;Stable.&lt;/li&gt; 
 &lt;li&gt;Easy to customize.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Easy to maintain and enhance&lt;/h3&gt; 
&lt;p&gt;This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with.&lt;/p&gt; 
&lt;p&gt;One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, &lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvm&lt;/a&gt;. Building upon shared libraries will go a long way in making neo-tree easy to maintain.&lt;/p&gt; 
&lt;h3&gt;Stable&lt;/h3&gt; 
&lt;p&gt;This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the &lt;strong&gt;main&lt;/strong&gt; branch is for contributors and those that always want bleeding edge. There will be branches for &lt;strong&gt;v1.x&lt;/strong&gt;, &lt;strong&gt;v2.x&lt;/strong&gt;, etc which will receive updates after a short testing period in &lt;strong&gt;main&lt;/strong&gt;. You should be safe to follow those branches and be sure your tree won&#39;t break in an update. There will also be tags for each release pushed to those branches named &lt;strong&gt;v1.1&lt;/strong&gt;, &lt;strong&gt;v1.2&lt;/strong&gt;, etc. If stability is critical to you, or a bug accidentally makes it into &lt;strong&gt;v3.x&lt;/strong&gt;, you can use those tags instead. It&#39;s possible we may backport bug fixes to those tags, but no guarantees on that.&lt;/p&gt; 
&lt;p&gt;There will never be a breaking change within a major version (1.x, 2.x, etc.) If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version.&lt;/p&gt; 
&lt;h3&gt;Easy to Customize&lt;/h3&gt; 
&lt;p&gt;Neo-tree follows in the spirit of plugins like &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function.&lt;/p&gt; 
&lt;h2&gt;What is a Breaking Change?&lt;/h2&gt; 
&lt;p&gt;As of v1.30, a breaking change is defined as anything that &lt;em&gt;changes&lt;/em&gt; existing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vim commands (&lt;code&gt;:Neotree&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;configuration options that are passed into the &lt;code&gt;setup()&lt;/code&gt; function&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NeoTree*&lt;/code&gt; highlight groups&lt;/li&gt; 
 &lt;li&gt;lua functions exported in the following modules that are not prefixed with &lt;code&gt;_&lt;/code&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.events&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.sources.manager&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.sources.*&lt;/code&gt; (init.lua files)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.sources.*.commands&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.ui.renderer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.utils&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it.&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Contributions are encouraged. Please see &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;p&gt;First and foremost, this project is a community endeavor and would not survive without the constant stream of features and bug fixes that comes from that community. There have been many valued contributors, but a few have stepped up to become maintainers that generously donate their time to guide the project, help out others, and manage the issues. The current list of maintainers are:&lt;/p&gt; 
&lt;p&gt;(in alphabetical order)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@cseickel&lt;/li&gt; 
 &lt;li&gt;@miversen33&lt;/li&gt; 
 &lt;li&gt;@nhat-vo&lt;/li&gt; 
 &lt;li&gt;@pysan3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Projects&lt;/h3&gt; 
&lt;p&gt;This project relies upon these two excellent libraries:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; for all UI components, including the tree!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt; for backend utilities, such as scanning the filesystem.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The design is heavily inspired by these excellent plugins:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Everything I know about writing a tree control in lua, I learned from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ｜ AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;AI Gateway&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot;&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot;&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway – Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/LazyVim</title>
      <link>https://github.com/LazyVim/LazyVim</link>
      <description>&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&quot;&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;Install&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io/configuration&quot;&gt;Configure&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;💤 lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔥 Transform your Neovim into a full-fledged IDE&lt;/li&gt; 
 &lt;li&gt;💤 Easily customize and extend your config with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚀 Blazingly fast&lt;/li&gt; 
 &lt;li&gt;🧹 Sane default settings for options, autocmds, and keymaps&lt;/li&gt; 
 &lt;li&gt;📦 Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.9.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; compiler for &lt;code&gt;nvim-treesitter&lt;/code&gt;. See &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter#requirements&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Try it with Docker&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;
  apk add git lazygit fzf curl neovim ripgrep alpine-sdk --update
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  cd ~/.config/nvim
  nvim
&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Install the &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf ~/.config/nvim/.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;p&gt;There&#39;s a great video created by &lt;a href=&quot;https://github.com/elijahmanor&quot;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N93cTbtLCIM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&quot; alt=&quot;Watch the video&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dusty-phillips&quot;&gt;@dusty-phillips&lt;/a&gt; wrote a comprehensive book called &lt;a href=&quot;https://lazyvim-ambitious-devs.phillips.codes&quot;&gt;LazyVim for Ambitious Developers&lt;/a&gt; available for free online.&lt;/p&gt; 
&lt;h2&gt;📂 File Structure&lt;/h2&gt; 
&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&quot;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;
~/.config/nvim
├── lua
│&amp;nbsp;&amp;nbsp; ├── config
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── lazy.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── options.lua
│&amp;nbsp;&amp;nbsp; └── plugins
│&amp;nbsp;&amp;nbsp;     ├── spec1.lua
│&amp;nbsp;&amp;nbsp;     ├── **
│&amp;nbsp;&amp;nbsp;     └── spec2.lua
└── init.lua
&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>catppuccin/nvim</title>
      <link>https://github.com/catppuccin/nvim</link>
      <description>&lt;p&gt;🍨 Soothing pastel theme for (Neo)vim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&quot; width=&quot;100&quot; alt=&quot;Logo&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot;&gt; Catppuccin for &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;(Neo)&lt;/a&gt;&lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot;&gt; &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=b7bdf8&amp;amp;style=for-the-badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=f5a97f&amp;amp;style=for-the-badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=a6da95&amp;amp;style=for-the-badge&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; This port of &lt;a href=&quot;https://github.com/catppuccin/&quot;&gt;Catppuccin&lt;/a&gt; is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/v0.1&quot;&gt;v0.1&lt;/a&gt; tag &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213472445-091e54fb-091f-4448-a631-fa6b2ba7d8a5.png&quot;&gt; &lt;/p&gt; 
&lt;h1&gt;Flavours&lt;/h1&gt; 
&lt;details&gt; 
 &lt;summary&gt;Latte&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473391-603bdc68-68f4-4877-a15a-b469040928b5.png&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Frappe&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473368-16931b70-fd84-4a89-a698-1b1bca1f82de.png&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Macchiato&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473285-7bd858be-6947-4d9e-8c01-2573cbc7e76c.png&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Mocha&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213471997-34837219-88cc-4db2-baca-e25813a89789.png&quot;&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/catppuccin/nvim/#overwriting-colors&quot;&gt;Bake your own flavour!&lt;/a&gt;&lt;/strong&gt; Here are some &lt;strong&gt;&lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;config from our community&lt;/a&gt;&lt;/strong&gt;: &lt;a href=&quot;https://www.pixiv.net/en/artworks/101554989&quot;&gt;&lt;sub&gt;&lt;sup&gt;(background source)&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213480149-6ba92b81-1ada-46a4-89bd-4e2bb25d19c3.png&quot; alt=&quot;nvimwalk-custom&quot;&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;!-- panvimdoc-ignore-end --&gt; &lt;/p&gt;
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both vim and neovim (Requires &lt;a href=&quot;https://github.com/neovim/neovim/&quot;&gt;neovim&lt;/a&gt; &amp;gt;= 0.8 or &lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &amp;gt;= 9 compiled with &lt;a href=&quot;https://github.com/lua/lua&quot;&gt;lua&lt;/a&gt; &amp;gt;= 5.1)&lt;/li&gt; 
 &lt;li&gt;Highly configurable with 4 different flavours and &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;ability to create your own!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catppuccin/nvim#Compile&quot;&gt;Compile&lt;/a&gt; user config for &lt;a href=&quot;https://www.reddit.com/r/neovim/comments/xxfpt3/catppuccinnvim_now_startup_in_1ms/&quot;&gt;fastest startuptime&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Integrations with lsp, treesitter and &lt;a href=&quot;https://github.com/catppuccin/nvim#integrations&quot;&gt;a bunch of plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Supports for &lt;a href=&quot;https://github.com/catppuccin/catppuccin&quot;&gt;many other applications&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{ &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot;, priority = 1000 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-deps.md&quot;&gt;mini.deps&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add({ source = &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use { &quot;catppuccin/nvim&quot;, as = &quot;catppuccin&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;catppuccin/nvim&#39;, { &#39;as&#39;: &#39;catppuccin&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme catppuccin &quot; catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    flavour = &quot;auto&quot;, -- latte, frappe, macchiato, mocha
    background = { -- :h background
        light = &quot;latte&quot;,
        dark = &quot;mocha&quot;,
    },
    transparent_background = false, -- disables setting the background color.
    show_end_of_buffer = false, -- shows the &#39;~&#39; characters after the end of buffers
    term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
    dim_inactive = {
        enabled = false, -- dims the background color of inactive window
        shade = &quot;dark&quot;,
        percentage = 0.15, -- percentage of the shade to apply to the inactive window
    },
    no_italic = false, -- Force no italic
    no_bold = false, -- Force no bold
    no_underline = false, -- Force no underline
    styles = { -- Handles the styles of general hi groups (see `:h highlight-args`):
        comments = { &quot;italic&quot; }, -- Change the style of comments
        conditionals = { &quot;italic&quot; },
        loops = {},
        functions = {},
        keywords = {},
        strings = {},
        variables = {},
        numbers = {},
        booleans = {},
        properties = {},
        types = {},
        operators = {},
        -- miscs = {}, -- Uncomment to turn off hard-coded styles
    },
    color_overrides = {},
    custom_highlights = {},
    default_integrations = true,
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        treesitter = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
        -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)
    },
})

-- setup must be called before loading
vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Customize highlights&lt;/h1&gt; 
&lt;h2&gt;Get catppuccin colors&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local latte = require(&quot;catppuccin.palettes&quot;).get_palette &quot;latte&quot;
local frappe = require(&quot;catppuccin.palettes&quot;).get_palette &quot;frappe&quot;
local macchiato = require(&quot;catppuccin.palettes&quot;).get_palette &quot;macchiato&quot;
local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns a table where the key is the name of the color and the value is its hex value corresponding to each flavour.&lt;/p&gt; 
&lt;h2&gt;Overwriting colors&lt;/h2&gt; 
&lt;p&gt;Colors can be overwritten using &lt;code&gt;color_overrides&lt;/code&gt; in the setting, checkout &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;https://github.com/catppuccin/nvim/discussions/323&lt;/a&gt; for inspirations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    color_overrides = {
        all = {
            text = &quot;#ffffff&quot;,
        },
        latte = {
            base = &quot;#ff0000&quot;,
            mantle = &quot;#242424&quot;,
            crust = &quot;#474747&quot;,
        },
        frappe = {},
        macchiato = {},
        mocha = {},
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more information check out our &lt;a href=&quot;https://github.com/catppuccin/catppuccin/raw/main/docs/style-guide.md&quot;&gt;style-guide&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Overwriting highlight groups&lt;/h2&gt; 
&lt;p&gt;Global highlight groups can be overwritten in the setting, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    custom_highlights = function(colors)
        return {
            Comment = { fg = colors.flamingo },
            TabLineSel = { bg = colors.pink },
            CmpBorder = { fg = colors.surface2 },
            Pmenu = { bg = colors.none },
        }
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Per flavour highlight groups can also be overwritten in the setting, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    highlight_overrides = {
        all = function(colors)
            return {
                NvimTreeNormal = { fg = colors.none },
                CmpBorder = { fg = &quot;#3e4145&quot; },
            }
        end,
        latte = function(latte)
            return {
                Normal = { fg = latte.base },
            }
        end,
        frappe = function(frappe)
            return {
                [&quot;@comment&quot;] = { fg = frappe.surface2, style = { &quot;italic&quot; } },
            }
        end,
        macchiato = function(macchiato)
            return {
                LineNr = { fg = macchiato.overlay1 },
            }
        end,
        mocha = function(mocha)
            return {
                Comment = { fg = mocha.flamingo },
            }
        end,
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Integrations&lt;/h1&gt; 
&lt;p&gt;Catppuccin provides theme support for other plugins in the Neovim ecosystem and extended Neovim functionality through &lt;em&gt;integrations&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To enable/disable an integration you just need to set it to true/false, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        treesitter = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some integrations are enabled by default, you can control this behaviour with &lt;code&gt;default_integrations&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    default_integrations = false,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Below is a list of supported plugins and their corresponding integration module.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] If you&#39;d like to know which highlight groups are being affected by catppuccin, check out this directory: &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/groups/integrations&quot;&gt;&lt;code&gt;lua/catppuccin/groups/integrations/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;b&gt;Plugin&lt;/b&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;b&gt;Default&lt;/b&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;aerial = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt; 
  &lt;!-- alpha.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;alpha = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- alpha.nvim --&gt; 
  &lt;!-- barbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbar = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbar.nvim --&gt; 
  &lt;!-- barbecue.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;barbecue.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbecue = {
    dim_dirname = true, -- directory name is dimmed by default
    bold_basename = true,
    dim_context = false,
    alt_background = false,
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;barbecue&quot;).setup {
  theme = &quot;catppuccin&quot;, -- catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbecue.nvim --&gt; 
  &lt;!-- beacon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/DanilaMihailov/beacon.nvim&quot;&gt;beacon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;beacon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- beacon.nvim --&gt; 
  &lt;!-- blink.cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;blink_cmp = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- blink.cmp --&gt; 
  &lt;!-- bufferline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your bufferline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!NOTE] bufferline needs to be loaded after setting up catppuccin or it will highlight incorrectly&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use &quot;akinsho/bufferline.nvim&quot; {
  after = &quot;catppuccin&quot;,
  config = function()
    require(&quot;bufferline&quot;).setup {
      highlights = require(&quot;catppuccin.groups.integrations.bufferline&quot;).get()
    }
  end
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Configurations are self-explanatory, see &lt;code&gt;:h bufferline-highlights&lt;/code&gt; for detailed explanations:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
bufferline.setup {
    highlights = require(&quot;catppuccin.groups.integrations.bufferline&quot;).get {
        styles = { &quot;italic&quot;, &quot;bold&quot; },
        custom = {
            all = {
                fill = { bg = &quot;#000000&quot; },
            },
            mocha = {
                background = { fg = mocha.text },
            },
            latte = {
                background = { fg = &quot;#000000&quot; },
            },
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- bufferline.nvim --&gt; 
  &lt;!-- coc.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;coc.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = true,
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Note] coc.nvim by default link to native lsp highlight groups so config from &lt;code&gt;native_lsp&lt;/code&gt; will also apply to coc&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;p&gt;In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;native_lsp = {
    enabled = true,
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- coc.nvim --&gt; 
  &lt;!-- colorful-winsep.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-zh/colorful-winsep.nvim&quot;&gt;colorful-winsep.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;colorful_winsep = {
    enabled = false,
    color = &quot;red&quot;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- colorful_winsep.nvim --&gt; 
  &lt;!-- dashboard-nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dashboard = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dashboard-nvim --&gt; 
  &lt;!-- diffview.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;diffview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- diffview.nvim --&gt; 
  &lt;!-- dropbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Bekaboo/dropbar.nvim&quot;&gt;dropbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dropbar = {
    enabled = false,
    color_mode = false, -- enable color for kind&#39;s texts, not just kind&#39;s icons
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dropbar.nvim --&gt; 
  &lt;!-- feline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/freddiehaddad/feline.nvim/&quot;&gt;feline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;  
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your Feline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ctp_feline = require(&#39;catppuccin.groups.integrations.feline&#39;)

ctp_feline.setup()

require(&quot;feline&quot;).setup({
    components = ctp_feline.get(),
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Notice that calling &lt;code&gt;setup()&lt;/code&gt; is optional. You may pass a lua table in order to change assets, settings and the colors per vim mode.&lt;/p&gt; 
     &lt;p&gt;Here are the defaults:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local clrs = require(&quot;catppuccin.palettes&quot;).get_palette()
local ctp_feline = require(&#39;catppuccin.groups.integrations.feline&#39;)
local U = require &quot;catppuccin.utils.colors&quot;

ctp_feline.setup({
    assets = {
        left_separator = &quot;&quot;,
        right_separator = &quot;&quot;,
        mode_icon = &quot;&quot;,
        dir = &quot;󰉖&quot;,
        file = &quot;󰈙&quot;,
        lsp = {
            server = &quot;󰅡&quot;,
            error = &quot;&quot;,
            warning = &quot;&quot;,
            info = &quot;&quot;,
            hint = &quot;&quot;,
        },
        git = {
            branch = &quot;&quot;,
            added = &quot;&quot;,
            changed = &quot;&quot;,
            removed = &quot;&quot;,
        },
    },
    sett = {
        text = U.vary_color({ latte = latte.base }, clrs.surface0),
        bkg = U.vary_color({ latte = latte.crust }, clrs.surface0),
        diffs = clrs.mauve,
        extras = clrs.overlay1,
        curr_file = clrs.maroon,
        curr_dir = clrs.flamingo,
        show_modified = false, -- show if the file has been modified
        show_lazy_updates = false -- show the count of updatable plugins from lazy.nvim
                                  -- need to set checker.enabled = true in lazy.nvim first
                                  -- the icon is set in ui.icons.plugin in lazy.nvim
    },
    mode_colors = {
        [&quot;n&quot;] = { &quot;NORMAL&quot;, clrs.lavender },
        [&quot;no&quot;] = { &quot;N-PENDING&quot;, clrs.lavender },
        [&quot;i&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;ic&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;t&quot;] = { &quot;TERMINAL&quot;, clrs.green },
        [&quot;v&quot;] = { &quot;VISUAL&quot;, clrs.flamingo },
        [&quot;V&quot;] = { &quot;V-LINE&quot;, clrs.flamingo },
        [&quot;&quot;] = { &quot;V-BLOCK&quot;, clrs.flamingo },
        [&quot;R&quot;] = { &quot;REPLACE&quot;, clrs.maroon },
        [&quot;Rv&quot;] = { &quot;V-REPLACE&quot;, clrs.maroon },
        [&quot;s&quot;] = { &quot;SELECT&quot;, clrs.maroon },
        [&quot;S&quot;] = { &quot;S-LINE&quot;, clrs.maroon },
        [&quot;&quot;] = { &quot;S-BLOCK&quot;, clrs.maroon },
        [&quot;c&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;cv&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;ce&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;r&quot;] = { &quot;PROMPT&quot;, clrs.teal },
        [&quot;rm&quot;] = { &quot;MORE&quot;, clrs.teal },
        [&quot;r?&quot;] = { &quot;CONFIRM&quot;, clrs.mauve },
        [&quot;!&quot;] = { &quot;SHELL&quot;, clrs.green },
    },
    view = {
        lsp = {
            progress = true, -- if true the status bar will display an lsp progress indicator
            name = false, -- if true the status bar will display the lsp servers name, otherwise it will display the text &quot;Lsp&quot;
            exclude_lsp_names = {}, -- lsp server names that should not be displayed when name is set to true
            separator = &quot;|&quot;, -- the separator used when there are multiple lsp servers
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Warning] Currently feline &lt;a href=&quot;https://github.com/feline-nvim/feline.nvim/issues/302&quot;&gt;doesn&#39;t officially support custom themes&lt;/a&gt;. In order for &lt;code&gt;:colorscheme catppuccin-&amp;lt;flavour&amp;gt;&lt;/code&gt; to work you could add this autocmd as a workaround:&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;ColorScheme&quot;, {
    pattern = &quot;*&quot;,
    callback = function()
        package.loaded[&quot;feline&quot;] = nil
        package.loaded[&quot;catppuccin.groups.integrations.feline&quot;] = nil
        require(&quot;feline&quot;).setup {
            components = require(&quot;catppuccin.groups.integrations.feline&quot;).get(),
        }
    end,
})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- feline.nvim --&gt; 
  &lt;!-- fern.vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lambdalisue/fern.vim&quot;&gt;fern.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fern = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fern.vim --&gt; 
  &lt;!-- fidget.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/j-hui/fidget.nvim&quot;&gt;fidget.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fidget = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; Set `notification.window.winblend` to `0`: 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fidget&quot;).setup {
    notification = {
        window = {
            winblend = 0,
        },
    }
    -- ... the rest of your fidget config
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fidget.nvim --&gt; 
  &lt;!-- flash.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;flash = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- flash.nvim --&gt; 
    &lt;!-- fzf-lua --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fzf-lua --&gt; 
  &lt;!-- gitgraph.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgraph = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- gitgraph.nvim --&gt; 
    &lt;!-- gitsigns.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- gitsigns.nvim --&gt; 
    &lt;!-- grug-far.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;grug_far = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- grug-far.nvim --&gt; 
    &lt;!-- harpoon --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;harpoon&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;harpoon = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- harpoon --&gt; 
    &lt;!-- headlines.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;headlines = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- headlines.nvim --&gt; 
    &lt;!-- hop.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hop = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- hop.nvim --&gt; 
    &lt;!-- indent-blankline.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;indent_blankline = {
    enabled = true,
    scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
    colored_indent_levels = false,
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;&lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim#multiple-indent-colors&quot;&gt;here&lt;/a&gt; to set the latter up.&lt;/p&gt; 
    &lt;/details&gt; 
    &lt;!-- indent-blankline.nvim --&gt; 
    &lt;!-- leap.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;leap = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- leap.nvim --&gt; 
    &lt;!-- lightline.vim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;lightline.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lightline.vim --&gt; 
    &lt;!-- lightspeed.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/lightspeed.nvim&quot;&gt;lightspeed.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lightspeed = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lightspeed.nvim --&gt; 
    &lt;!-- lir.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/tamago324/lir.nvim&quot;&gt;lir.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lir = {
    enabled = false,
    git_status = false
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lir.nvim --&gt; 
    &lt;!-- lspsaga.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_saga = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;For custom Lsp Kind Icon and Color&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lspsaga&quot;).setup {
    ui = {
        kind = require(&quot;catppuccin.groups.integrations.lsp_saga&quot;).custom_kind(),
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;!-- lspsaga.nvim --&gt; 
  &lt;!-- lualine.nvim --&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).setup {
    options = {
        theme = &quot;catppuccin&quot;
        -- ... the rest of your lualine config
    }
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lualine.nvim --&gt; 
    &lt;!-- markdown --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;markdown&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- markdown --&gt; 
  &lt;!-- mason.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;mason.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mason = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mason.nvim --&gt; 
  &lt;!-- mini.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim&quot;&gt;mini.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mini = {
    enabled = true,
    indentscope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mini.nvim --&gt; 
  &lt;!-- neo-tree.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neo-tree.nvim --&gt; 
  &lt;!-- neogit --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/TimUntersberger/neogit&quot;&gt;neogit&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neogit = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neogit --&gt; 
  &lt;!-- neotest --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotest = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neotest --&gt; 
  &lt;!-- noice.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;noice = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- noice.nvim --&gt; 
  &lt;!-- notifier.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vigoux/notifier.nvim&quot;&gt;notifier.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notifier = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- notifier.nvim --&gt; 
  &lt;!-- nvim-cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-cmp --&gt; 
  &lt;!-- nvim-copilot-vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;copilot.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;copilot_vim = false,
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-copilot-vim --&gt; 
  &lt;!-- nvim-dap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special &lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local sign = vim.fn.sign_define

sign(&quot;DapBreakpoint&quot;, { text = &quot;●&quot;, texthl = &quot;DapBreakpoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapBreakpointCondition&quot;, { text = &quot;●&quot;, texthl = &quot;DapBreakpointCondition&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapLogPoint&quot;, { text = &quot;◆&quot;, texthl = &quot;DapLogPoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap --&gt; 
  &lt;!-- nvim-dap-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap_ui = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap-ui --&gt; 
  &lt;!-- nvim-lspconfig --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;native_lsp = {
    enabled = true,
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-lspconfig --&gt; 
  &lt;!-- navic --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;navic&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;navic = {
    enabled = false,
    custom_bg = &quot;NONE&quot;, -- &quot;lualine&quot; will set background to mantle
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- You NEED to enable highlight in nvim-navic setting or it won&#39;t work
require(&quot;nvim-navic&quot;).setup {
    highlight = true
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- navic --&gt; 
  &lt;!-- nvim-notify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-notify --&gt; 
  &lt;!-- nvim-semantic-tokens --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-semantic-highlight&quot;&gt;nvim-semantic-tokens&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;semantic_tokens = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-semantic-tokens --&gt; 
  &lt;!-- nvim-surround --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kylechui/nvim-surround&quot;&gt;nvim-surround&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvim_surround = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-surround --&gt; 
  &lt;!-- nvim-tree.lua --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvimtree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-tree.lua --&gt; 
  &lt;!-- nvim-treesitter-context --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter_context = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter-context --&gt; 
  &lt;!-- nvim-treesitter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter --&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/nvim-ts-rainbow2&quot;&gt;nvim-ts-rainbow2&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow2 = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt; 
  &lt;!-- nvim-ts-rainbow --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/p00f/nvim-ts-rainbow&quot;&gt;nvim-ts-rainbow&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow --&gt; 
  &lt;!-- nvim-ufo --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ufo = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ufo --&gt; 
  &lt;!-- nvim-window-picker --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/s1n7ax/nvim-window-picker&quot;&gt;nvim-window-picker&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;window_picker = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- nvim-window-picker --&gt; 
    &lt;!-- octo.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;octo = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- octo.nvim --&gt; 
  &lt;!-- overseer.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/overseer.nvim&quot;&gt;overseer.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;overseer = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- overseer.nvim --&gt; 
  &lt;!-- pounce.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rlane/pounce.nvim&quot;&gt;pounce.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;pounce = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- pounce.nvim --&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rainbow_delimiters = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt; 
  &lt;!-- reactive.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rasulomaroff/reactive.nvim&quot;&gt;reactive.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;There&#39;re 2 available presets (&lt;code&gt;cursor&lt;/code&gt; and &lt;code&gt;cursorline&lt;/code&gt;) for every flavour.&lt;/p&gt; 
     &lt;p&gt;Here is how you can use them.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;reactive&#39;).setup {
  load = { &#39;catppuccin-mocha-cursor&#39;, &#39;catppuccin-mocha-cursorline&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;To use another flavour just replace &lt;code&gt;mocha&lt;/code&gt; with the one you want to use.&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- reactive.nvim --&gt; 
  &lt;!-- render-markdown.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;render_markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- render-markdown.nvim --&gt; 
  &lt;!-- snacks.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;snacks = {
    enabled = false,
    indent_scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- snacks.nvim --&gt; 
  &lt;!-- symbols-outline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/simrat39/symbols-outline.nvim&quot;&gt;symbols-outline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;blockquote&gt; 
     &lt;p&gt;[!NOTE] This plugin has been archived by the author, consider using &lt;a href=&quot;https://github.com/hedyhli/outline.nvim&quot;&gt;outline.nvim&lt;/a&gt;&lt;/p&gt; 
    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;symbols_outline = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- symbols-outline.nvim --&gt; 
  &lt;!-- telekasten.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/renerocksai/telekasten.nvim&quot;&gt;telekasten.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telekasten = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telekasten.nvim --&gt; 
  &lt;!-- telescope.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telescope = {
    enabled = true,
    -- style = &quot;nvchad&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telescope.nvim --&gt; 
  &lt;!-- trouble.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_trouble = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- trouble.nvim --&gt; 
  &lt;!-- vim-airline --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:airline_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-airline --&gt; 
  &lt;!-- vim-clap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/liuchengxu/vim-clap&quot;&gt;vim-clap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:clap_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-clap --&gt; 
  &lt;!-- vim-dadbod-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kristijanhusak/vim-dadbod-ui&quot;&gt;vim-dadbod-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dadbod_ui = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-dadbod-ui --&gt; 
  &lt;!-- vim-gitgutter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgutter = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-gitgutter --&gt; 
  &lt;!-- vim-illuminate --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;illuminate = {
    enabled = true,
    lsp = false
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-illuminate --&gt; 
  &lt;!-- vim-sandwich --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sandwich = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sandwich --&gt; 
  &lt;!-- vim-sneak --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim_sneak = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sneak --&gt; 
  &lt;!-- vimwiki --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vimwiki = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vimwiki --&gt; 
  &lt;!-- which-key.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;which_key = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- which-key.nvim --&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h1&gt;Compile&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; As of 7/10/2022, catppuccin should be able to automatically recompile when the setup table changed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Catppuccin is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time. Catppuccin can pre compute the results of your configuration and store the results in a compiled lua file. We use these precached values to set it&#39;s highlights.&lt;/p&gt; 
&lt;p&gt;By default catppuccin writes the compiled results into the system&#39;s cache directory. You can change the cache dir using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({ -- Note: On windows we replace `/` with `\` by default
    compile_path = vim.fn.stdpath &quot;cache&quot; .. &quot;/catppuccin&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;FAQ&lt;/h1&gt; 
&lt;h2&gt;Wrong treesitter highlights&lt;/h2&gt; 
&lt;p&gt;Please disable &lt;code&gt;additional_vim_regex_highlighting&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-treesitter.configs&quot;).setup {
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Colors doesn&#39;t match preview screenshots&lt;/h2&gt; 
&lt;p&gt;Catppuccin requires true color support AKA terminals support the full range of 16 million colors&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported: iterm2 (macOS), kitty, wezterm, alacritty, tmux, ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Full list of support terminals can be found here: &lt;a href=&quot;https://github.com/termstandard/colors#truecolor-support-in-output-devices&quot;&gt;https://github.com/termstandard/colors#truecolor-support-in-output-devices&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unsupported terminal: Terminal.app (macOS), Terminus, Terminology, ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Full list of Unsupported terminals can be found here: &lt;a href=&quot;https://github.com/termstandard/colors#not-supporting-truecolor&quot;&gt;https://github.com/termstandard/colors#not-supporting-truecolor&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;For tmux users&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6&quot;&gt;Enable true color support&lt;/a&gt; to fix the following &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/415&quot;&gt;abnormal colors&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1941785/220280749-c3ab52fb-9b8a-4f04-ab98-f8c1bb41f84b.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722&quot;&gt;Enable italic font support&lt;/a&gt; to fix the following &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/428&quot;&gt;incorrect if, then, else, end highlights&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/13246770/224011118-dcf0f567-650a-4eb2-8be6-0af5cf435501.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Thanks to&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pocco81&quot;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nullchilly&quot;&gt;nullchilly&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/footers/gray0_ctp_on_line.svg?sanitize=true&quot;&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Copyright © 2021-present &lt;a href=&quot;https://github.com/catppuccin&quot; target=&quot;_blank&quot;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=363a4f&amp;amp;colorB=b7bdf8&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>folke/lazy.nvim</title>
      <link>https://github.com/folke/lazy.nvim</link>
      <description>&lt;p&gt;💤 A modern plugin manager for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazy.folke.io/installation&quot;&gt;Install&lt;/a&gt; · &lt;a href=&quot;https://lazy.folke.io/configuration&quot;&gt;Configure&lt;/a&gt; · &lt;a href=&quot;https://lazy.folke.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/folke/lazy.nvim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; is a modern plugin manager for Neovim.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/208301737-68fb279c-ba70-43ef-a369-8c3e8367d6b1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📦 Manage all your Neovim plugins with a powerful UI&lt;/li&gt; 
 &lt;li&gt;🚀 Fast startup times thanks to automatic caching and bytecode compilation of Lua modules&lt;/li&gt; 
 &lt;li&gt;💾 Partial clones instead of shallow clones&lt;/li&gt; 
 &lt;li&gt;🔌 Automatic lazy-loading of Lua modules and lazy-loading on events, commands, filetypes, and key mappings&lt;/li&gt; 
 &lt;li&gt;⏳ Automatically install missing plugins before starting up Neovim, allowing you to start using it right away&lt;/li&gt; 
 &lt;li&gt;💪 Async execution for improved performance&lt;/li&gt; 
 &lt;li&gt;🛠️ No need to manually compile plugins&lt;/li&gt; 
 &lt;li&gt;🧪 Correct sequencing of dependencies&lt;/li&gt; 
 &lt;li&gt;📁 Configurable in multiple files&lt;/li&gt; 
 &lt;li&gt;📚 Generates helptags of the headings in &lt;code&gt;README.md&lt;/code&gt; files for plugins that don&#39;t have vimdocs&lt;/li&gt; 
 &lt;li&gt;💻 Dev options and patterns for using local plugins&lt;/li&gt; 
 &lt;li&gt;📊 Profiling tools to optimize performance&lt;/li&gt; 
 &lt;li&gt;🔒 Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt; to keep track of installed plugins&lt;/li&gt; 
 &lt;li&gt;🔎 Automatically check for updates&lt;/li&gt; 
 &lt;li&gt;📋 Commit, branch, tag, version, and full &lt;a href=&quot;https://devhints.io/semver&quot;&gt;Semver&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;📈 Statusline component to see the number of pending updates&lt;/li&gt; 
 &lt;li&gt;🎨 Automatically lazy-loads colorschemes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://luarocks.org/&quot;&gt;luarocks&lt;/a&gt; to install rockspecs. You can remove &lt;code&gt;rockspec&lt;/code&gt; from &lt;code&gt;opts.pkg.sources&lt;/code&gt; to disable this feature.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;Check the &lt;a href=&quot;https://lazy.folke.io/&quot;&gt;documentation website&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/flash.nvim</title>
      <link>https://github.com/folke/flash.nvim</link>
      <description>&lt;p&gt;Navigate your code with search labels, enhanced character motions and Treesitter integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⚡flash.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;flash.nvim&lt;/code&gt; lets you navigate your code with search labels, enhanced character motions, and Treesitter integration.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Search Integration&lt;/th&gt; 
   &lt;th&gt;Standalone Jump&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/e0ac4cbc-fa54-4505-8261-43ec0505518d&quot;&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/90af85e3-3f22-4c51-af4b-2a2488c9560b&quot;&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;Treesitter&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/379cb2de-8ec3-4acf-8811-d3590a5854b6&quot;&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/b963b05e-3d28-45ff-b43a-928a06e5f92a&quot;&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔍 &lt;strong&gt;Search Integration&lt;/strong&gt;: integrate &lt;strong&gt;flash.nvim&lt;/strong&gt; with your regular search using &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt;. Labels appear next to the matches, allowing you to quickly jump to any location. Labels are guaranteed not to exist as a continuation of the search pattern.&lt;/li&gt; 
 &lt;li&gt;⌨️ &lt;strong&gt;type as many characters as you want&lt;/strong&gt; before using a jump label.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Enhanced &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; motions&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;🌳 &lt;strong&gt;Treesitter Integration&lt;/strong&gt;: all parents of the Treesitter node under your cursor are highlighted with a label for quick selection of a specific Treesitter node.&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Jump Mode&lt;/strong&gt;: a standalone jumping mode similar to search&lt;/li&gt; 
 &lt;li&gt;🔎 &lt;strong&gt;Search Modes&lt;/strong&gt;: &lt;code&gt;exact&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt; (regex), and &lt;code&gt;fuzzy&lt;/code&gt; search modes&lt;/li&gt; 
 &lt;li&gt;🪟 &lt;strong&gt;Multi Window&lt;/strong&gt; jumping&lt;/li&gt; 
 &lt;li&gt;🌐 &lt;strong&gt;Remote Actions&lt;/strong&gt;: perform motions in remote locations&lt;/li&gt; 
 &lt;li&gt;⚫ &lt;strong&gt;dot-repeatable&lt;/strong&gt; jumps&lt;/li&gt; 
 &lt;li&gt;📡 &lt;strong&gt;highly extensible&lt;/strong&gt;: check the &lt;a href=&quot;https://github.com/folke/flash.nvim#-examples&quot;&gt;examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📋 Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;!-- setup:start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/flash.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  ---@type Flash.Config
  opts = {},
  -- stylua: ignore
  keys = {
    { &quot;s&quot;, mode = { &quot;n&quot;, &quot;x&quot;, &quot;o&quot; }, function() require(&quot;flash&quot;).jump() end, desc = &quot;Flash&quot; },
    { &quot;S&quot;, mode = { &quot;n&quot;, &quot;x&quot;, &quot;o&quot; }, function() require(&quot;flash&quot;).treesitter() end, desc = &quot;Flash Treesitter&quot; },
    { &quot;r&quot;, mode = &quot;o&quot;, function() require(&quot;flash&quot;).remote() end, desc = &quot;Remote Flash&quot; },
    { &quot;R&quot;, mode = { &quot;o&quot;, &quot;x&quot; }, function() require(&quot;flash&quot;).treesitter_search() end, desc = &quot;Treesitter Search&quot; },
    { &quot;&amp;lt;c-s&amp;gt;&quot;, mode = { &quot;c&quot; }, function() require(&quot;flash&quot;).toggle() end, desc = &quot;Toggle Flash Search&quot; },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- setup:end --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠️ When creating the keymaps manually either use a lua function like &lt;code&gt;function() require(&quot;flash&quot;).jump() end&lt;/code&gt; as the &lt;strong&gt;rhs&lt;/strong&gt;, or a string like &lt;code&gt;&amp;lt;cmd&amp;gt;lua require(&quot;flash&quot;).jump()&amp;lt;cr&amp;gt;&lt;/code&gt;. &lt;strong&gt;DO NOT&lt;/strong&gt; use &lt;code&gt;:lua&lt;/code&gt;, since that will break &lt;strong&gt;&lt;em&gt;dot-repeat&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;flash.nvim&lt;/strong&gt; is highly configurable. Please refer to the default settings below.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Settings&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- labels = &quot;abcdefghijklmnopqrstuvwxyz&quot;,
  labels = &quot;asdfghjklqwertyuiopzxcvbnm&quot;,
  search = {
    -- search/jump in all windows
    multi_window = true,
    -- search direction
    forward = true,
    -- when `false`, find only matches in the given direction
    wrap = true,
    ---@type Flash.Pattern.Mode
    -- Each mode will take ignorecase and smartcase into account.
    -- * exact: exact match
    -- * search: regular search
    -- * fuzzy: fuzzy search
    -- * fun(str): custom function that returns a pattern
    --   For example, to only match at the beginning of a word:
    --   mode = function(str)
    --     return &quot;\\&amp;lt;&quot; .. str
    --   end,
    mode = &quot;exact&quot;,
    -- behave like `incsearch`
    incremental = false,
    -- Excluded filetypes and custom window filters
    ---@type (string|fun(win:window))[]
    exclude = {
      &quot;notify&quot;,
      &quot;cmp_menu&quot;,
      &quot;noice&quot;,
      &quot;flash_prompt&quot;,
      function(win)
        -- exclude non-focusable windows
        return not vim.api.nvim_win_get_config(win).focusable
      end,
    },
    -- Optional trigger character that needs to be typed before
    -- a jump label can be used. It&#39;s NOT recommended to set this,
    -- unless you know what you&#39;re doing
    trigger = &quot;&quot;,
    -- max pattern length. If the pattern length is equal to this
    -- labels will no longer be skipped. When it exceeds this length
    -- it will either end in a jump or terminate the search
    max_length = false, ---@type number|false
  },
  jump = {
    -- save location in the jumplist
    jumplist = true,
    -- jump position
    pos = &quot;start&quot;, ---@type &quot;start&quot; | &quot;end&quot; | &quot;range&quot;
    -- add pattern to search history
    history = false,
    -- add pattern to search register
    register = false,
    -- clear highlight after jump
    nohlsearch = false,
    -- automatically jump when there is only one match
    autojump = false,
    -- You can force inclusive/exclusive jumps by setting the
    -- `inclusive` option. By default it will be automatically
    -- set based on the mode.
    inclusive = nil, ---@type boolean?
    -- jump position offset. Not used for range jumps.
    -- 0: default
    -- 1: when pos == &quot;end&quot; and pos &amp;lt; current position
    offset = nil, ---@type number
  },
  label = {
    -- allow uppercase labels
    uppercase = true,
    -- add any labels with the correct case here, that you want to exclude
    exclude = &quot;&quot;,
    -- add a label for the first match in the current window.
    -- you can always jump to the first match with `&amp;lt;CR&amp;gt;`
    current = true,
    -- show the label after the match
    after = true, ---@type boolean|number[]
    -- show the label before the match
    before = false, ---@type boolean|number[]
    -- position of the label extmark
    style = &quot;overlay&quot;, ---@type &quot;eol&quot; | &quot;overlay&quot; | &quot;right_align&quot; | &quot;inline&quot;
    -- flash tries to re-use labels that were already assigned to a position,
    -- when typing more characters. By default only lower-case labels are re-used.
    reuse = &quot;lowercase&quot;, ---@type &quot;lowercase&quot; | &quot;all&quot; | &quot;none&quot;
    -- for the current window, label targets closer to the cursor first
    distance = true,
    -- minimum pattern length to show labels
    -- Ignored for custom labelers.
    min_pattern_length = 0,
    -- Enable this to use rainbow colors to highlight labels
    -- Can be useful for visualizing Treesitter ranges.
    rainbow = {
      enabled = false,
      -- number between 1 and 9
      shade = 5,
    },
    -- With `format`, you can change how the label is rendered.
    -- Should return a list of `[text, highlight]` tuples.
    ---@class Flash.Format
    ---@field state Flash.State
    ---@field match Flash.Match
    ---@field hl_group string
    ---@field after boolean
    ---@type fun(opts:Flash.Format): string[][]
    format = function(opts)
      return { { opts.match.label, opts.hl_group } }
    end,
  },
  highlight = {
    -- show a backdrop with hl FlashBackdrop
    backdrop = true,
    -- Highlight the search matches
    matches = true,
    -- extmark priority
    priority = 5000,
    groups = {
      match = &quot;FlashMatch&quot;,
      current = &quot;FlashCurrent&quot;,
      backdrop = &quot;FlashBackdrop&quot;,
      label = &quot;FlashLabel&quot;,
    },
  },
  -- action to perform when picking a label.
  -- defaults to the jumping logic depending on the mode.
  ---@type fun(match:Flash.Match, state:Flash.State)|nil
  action = nil,
  -- initial pattern to use when opening flash
  pattern = &quot;&quot;,
  -- When `true`, flash will try to continue the last search
  continue = false,
  -- Set config to a function to dynamically change the config
  config = nil, ---@type fun(opts:Flash.Config)|nil
  -- You can override the default options for a specific mode.
  -- Use it with `require(&quot;flash&quot;).jump({mode = &quot;forward&quot;})`
  ---@type table&amp;lt;string, Flash.Config&amp;gt;
  modes = {
    -- options used when flash is activated through
    -- a regular search with `/` or `?`
    search = {
      -- when `true`, flash will be activated during regular search by default.
      -- You can always toggle when searching with `require(&quot;flash&quot;).toggle()`
      enabled = false,
      highlight = { backdrop = false },
      jump = { history = true, register = true, nohlsearch = true },
      search = {
        -- `forward` will be automatically set to the search direction
        -- `mode` is always set to `search`
        -- `incremental` is set to `true` when `incsearch` is enabled
      },
    },
    -- options used when flash is activated through
    -- `f`, `F`, `t`, `T`, `;` and `,` motions
    char = {
      enabled = true,
      -- dynamic configuration for ftFT motions
      config = function(opts)
        -- autohide flash when in operator-pending mode
        opts.autohide = opts.autohide or (vim.fn.mode(true):find(&quot;no&quot;) and vim.v.operator == &quot;y&quot;)

        -- disable jump labels when not enabled, when using a count,
        -- or when recording/executing registers
        opts.jump_labels = opts.jump_labels
          and vim.v.count == 0
          and vim.fn.reg_executing() == &quot;&quot;
          and vim.fn.reg_recording() == &quot;&quot;

        -- Show jump labels only in operator-pending mode
        -- opts.jump_labels = vim.v.count == 0 and vim.fn.mode(true):find(&quot;o&quot;)
      end,
      -- hide after jump when not using jump labels
      autohide = false,
      -- show jump labels
      jump_labels = false,
      -- set to `false` to use the current line only
      multi_line = true,
      -- When using jump labels, don&#39;t use these keys
      -- This allows using those keys directly after the motion
      label = { exclude = &quot;hjkliardc&quot; },
      -- by default all keymaps are enabled, but you can disable some of them,
      -- by removing them from the list.
      -- If you rather use another key, you can map them
      -- to something else, e.g., { [&quot;;&quot;] = &quot;L&quot;, [&quot;,&quot;] = H }
      keys = { &quot;f&quot;, &quot;F&quot;, &quot;t&quot;, &quot;T&quot;, &quot;;&quot;, &quot;,&quot; },
      ---@alias Flash.CharActions table&amp;lt;string, &quot;next&quot; | &quot;prev&quot; | &quot;right&quot; | &quot;left&quot;&amp;gt;
      -- The direction for `prev` and `next` is determined by the motion.
      -- `left` and `right` are always left and right.
      char_actions = function(motion)
        return {
          [&quot;;&quot;] = &quot;next&quot;, -- set to `right` to always go right
          [&quot;,&quot;] = &quot;prev&quot;, -- set to `left` to always go left
          -- clever-f style
          [motion:lower()] = &quot;next&quot;,
          [motion:upper()] = &quot;prev&quot;,
          -- jump2d style: same case goes next, opposite case goes prev
          -- [motion] = &quot;next&quot;,
          -- [motion:match(&quot;%l&quot;) and motion:upper() or motion:lower()] = &quot;prev&quot;,
        }
      end,
      search = { wrap = false },
      highlight = { backdrop = true },
      jump = {
        register = false,
        -- when using jump labels, set to &#39;true&#39; to automatically jump
        -- or execute a motion when there is only one match
        autojump = false,
      },
    },
    -- options used for treesitter selections
    -- `require(&quot;flash&quot;).treesitter()`
    treesitter = {
      labels = &quot;abcdefghijklmnopqrstuvwxyz&quot;,
      jump = { pos = &quot;range&quot;, autojump = true },
      search = { incremental = false },
      label = { before = true, after = true, style = &quot;inline&quot; },
      highlight = {
        backdrop = false,
        matches = false,
      },
    },
    treesitter_search = {
      jump = { pos = &quot;range&quot; },
      search = { multi_window = true, wrap = true, incremental = false },
      remote_op = { restore = true },
      label = { before = true, after = true, style = &quot;inline&quot; },
    },
    -- options used for remote flash
    remote = {
      remote_op = { restore = true, motion = true },
    },
  },
  -- options for the floating window that shows the prompt,
  -- for regular jumps
  -- `require(&quot;flash&quot;).prompt()` is always available to get the prompt text
  prompt = {
    enabled = true,
    prefix = { { &quot;⚡&quot;, &quot;FlashPromptIcon&quot; } },
    win_config = {
      relative = &quot;editor&quot;,
      width = 1, -- when &amp;lt;=1 it&#39;s a percentage of the editor width
      height = 1,
      row = -1, -- when negative it&#39;s an offset from the bottom
      col = 0, -- when negative it&#39;s an offset from the right
      zindex = 1000,
    },
  },
  -- options for remote operator pending mode
  remote_op = {
    -- restore window views and cursor position
    -- after doing a remote operation
    restore = false,
    -- For `jump.pos = &quot;range&quot;`, this setting is ignored.
    -- `true`: always enter a new motion when doing a remote operation
    -- `false`: use the window&#39;s cursor position and jump target
    -- `nil`: act as `true` for remote windows, `false` for the current window
    motion = false,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Treesitter&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).treesitter(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;Treesitter&lt;/strong&gt; mode&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;use a jump label, or use &lt;code&gt;;&lt;/code&gt; and &lt;code&gt;,&lt;/code&gt; to increase/decrease the selection&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;regular search&lt;/strong&gt;: search as you normally do, but enhanced with jump labels. You need to set &lt;code&gt;opts.modes.search.enabled = true&lt;/code&gt;, or toggle it with &lt;code&gt;require(&quot;flash&quot;).toggle()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; motions:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;After typing &lt;code&gt;f{char}&lt;/code&gt; or &lt;code&gt;F{char},&lt;/code&gt; you can repeat the motion with &lt;code&gt;f&lt;/code&gt; or go to the previous match with &lt;code&gt;F&lt;/code&gt; to undo a jump.&lt;/li&gt; 
   &lt;li&gt;Similarly, after typing &lt;code&gt;t{char}&lt;/code&gt; or &lt;code&gt;T{char},&lt;/code&gt; you can repeat the motion with &lt;code&gt;t&lt;/code&gt; or go to the previous match with &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;You can also go to the next match with &lt;code&gt;;&lt;/code&gt; or previous match with &lt;code&gt;,&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Any highlights clear automatically when moving, changing buffers, or pressing &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;toggle Search&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).toggle(boolean?)&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;toggles &lt;strong&gt;flash&lt;/strong&gt; on or off while using regular search&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Treesitter Search&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).treesitter_search(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;Treesitter Search&lt;/strong&gt; mode&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;combination of &lt;strong&gt;Treesitter&lt;/strong&gt; and &lt;strong&gt;Search&lt;/strong&gt; modes&lt;/li&gt; 
   &lt;li&gt;do something like &lt;code&gt;yR&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;you can now start typing a search pattern.&lt;/li&gt; 
   &lt;li&gt;arround your matches, all the surrounding Treesitter nodes will be labeled.&lt;/li&gt; 
   &lt;li&gt;select a label to perform the operator on the new selection&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;remote&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).remote(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;remote&lt;/strong&gt; mode&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;equivalent to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  remote_op = {
    restore = true,
    motion = true,
  },
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;this is only useful in operator pending mode.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;For example, press &lt;code&gt;yr&lt;/code&gt; to start yanking and open flash&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;select a label to set the cursor position&lt;/li&gt; 
     &lt;li&gt;perform any motion, like &lt;code&gt;iw&lt;/code&gt; or even start flash Treesitter with &lt;code&gt;S&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;the yank will be performed on the new selection&lt;/li&gt; 
     &lt;li&gt;you&#39;ll be back in the original window / position&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also configure the &lt;code&gt;remote_op&lt;/code&gt; options by default, so that &lt;code&gt;ys&lt;/code&gt;, behaves like &lt;code&gt;yr&lt;/code&gt; for remote operations&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  remote_op = {
    restore = true,
    motion = nil,
  },
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;jump&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).jump(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; with the given options&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;type any number of characters before typing a jump label&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt;: some functionality is changed/disabled when running &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;VS Code&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;prompt&lt;/code&gt; is disabled. You can use &lt;code&gt;require(&quot;flash&quot;).prompt()&lt;/code&gt; to get the prompt text and integrate it into the statusline.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;highlights&lt;/code&gt; are set to different defaults that will actually work in VS Code&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📡 API&lt;/h2&gt; 
&lt;p&gt;The options for &lt;code&gt;require(&quot;flash&quot;).jump(opts?)&lt;/code&gt;, are the same as those in the config section, but can additionally have the following fields:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;matcher&lt;/code&gt;: a custom function that generates matches for a given window&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;labeler&lt;/code&gt;: a custom function to label matches&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also add labels in the &lt;code&gt;matcher&lt;/code&gt; function and then set &lt;code&gt;labeler&lt;/code&gt; to an empty function &lt;code&gt;labeler = function() end&lt;/code&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Type Definitions&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type FlashMatcher = (win: number, state: FlashState) =&amp;gt; FlashMatch[];
type FlashLabeler = (matches: FlashMatch[], state: FlashState) =&amp;gt; void;

interface FlashMatch {
  win: number;
  pos: [number, number]; // (1,0)-indexed
  end_pos: [number, number]; // (1,0)-indexed
  label?: string | false; // set to false to never show a label for this match
  highlight?: boolean; // override opts.highlight.matches for this match
}

// Check the code for the full definition
// of Flash.State at `lua/flash/state.lua`
type FlashState = {};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;💡 Examples&lt;/h2&gt; 
&lt;details&gt;
 &lt;summary&gt;Forward search only&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = { forward = true, wrap = false, multi_window = false },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Backward search only&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = { forward = false, wrap = false, multi_window = false },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Show diagnostics at target, without changing cursor position&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  action = function(match, state)
    vim.api.nvim_win_call(match.win, function()
      vim.api.nvim_win_set_cursor(match.win, match.pos)
      vim.diagnostic.open_float()
    end)
    state:restore()
  end,
})

-- More advanced example that also highlights diagnostics:
require(&quot;flash&quot;).jump({
  matcher = function(win)
    ---@param diag Diagnostic
    return vim.tbl_map(function(diag)
      return {
        pos = { diag.lnum + 1, diag.col },
        end_pos = { diag.end_lnum + 1, diag.end_col - 1 },
      }
    end, vim.diagnostic.get(vim.api.nvim_win_get_buf(win)))
  end,
  action = function(match, state)
    vim.api.nvim_win_call(match.win, function()
      vim.api.nvim_win_set_cursor(match.win, match.pos)
      vim.diagnostic.open_float()
    end)
    state:restore()
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Match beginning of words only&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = {
    mode = function(str)
      return &quot;\\&amp;lt;&quot; .. str
    end,
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Initialize flash with the word under the cursor&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  pattern = vim.fn.expand(&quot;&amp;lt;cword&amp;gt;&quot;),
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Jump to a line&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = { mode = &quot;search&quot;, max_length = 0 },
  label = { after = { 0, 0 } },
  pattern = &quot;^&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Select any word&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  pattern = &quot;.&quot;, -- initialize pattern with any char
  search = {
    mode = function(pattern)
      -- remove leading dot
      if pattern:sub(1, 1) == &quot;.&quot; then
        pattern = pattern:sub(2)
      end
      -- return word pattern and proper skip pattern
      return ([[\&amp;lt;%s\w*\&amp;gt;]]):format(pattern), ([[\&amp;lt;%s]]):format(pattern)
    end,
  },
  -- select the range
  jump = { pos = &quot;range&quot; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; with labels&lt;/summary&gt; 
 &lt;p&gt;Use the options below:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  modes = {
    char = {
      jump_labels = true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Telescope integration&lt;/summary&gt; 
 &lt;p&gt;This will allow you to use &lt;code&gt;s&lt;/code&gt; in normal mode and &lt;code&gt;&amp;lt;c-s&amp;gt;&lt;/code&gt; in insert mode, to jump to a label in Telescope results.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;nvim-telescope/telescope.nvim&quot;,
    optional = true,
    opts = function(_, opts)
      local function flash(prompt_bufnr)
        require(&quot;flash&quot;).jump({
          pattern = &quot;^&quot;,
          label = { after = { 0, 0 } },
          search = {
            mode = &quot;search&quot;,
            exclude = {
              function(win)
                return vim.bo[vim.api.nvim_win_get_buf(win)].filetype ~= &quot;TelescopeResults&quot;
              end,
            },
          },
          action = function(match)
            local picker = require(&quot;telescope.actions.state&quot;).get_current_picker(prompt_bufnr)
            picker:set_selection(match.pos[1] - 1)
          end,
        })
      end
      opts.defaults = vim.tbl_deep_extend(&quot;force&quot;, opts.defaults or {}, {
        mappings = {
          n = { s = flash },
          i = { [&quot;&amp;lt;c-s&amp;gt;&quot;] = flash },
        },
      })
    end,
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Snacks Picker integration&lt;/summary&gt; 
 &lt;p&gt;This will allow you to use &lt;code&gt;s&lt;/code&gt; in normal mode and &lt;code&gt;&amp;lt;a-s&amp;gt;&lt;/code&gt; in insert mode, to jump to a label in the picker results.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;folke/snacks.nvim&quot;,
    opts = {
      picker = {
        win = {
          input = {
            keys = {
              [&quot;&amp;lt;a-s&amp;gt;&quot;] = { &quot;flash&quot;, mode = { &quot;n&quot;, &quot;i&quot; } },
              [&quot;s&quot;] = { &quot;flash&quot; },
            },
          },
        },
        actions = {
          flash = function(picker)
            require(&quot;flash&quot;).jump({
              pattern = &quot;^&quot;,
              label = { after = { 0, 0 } },
              search = {
                mode = &quot;search&quot;,
                exclude = {
                  function(win)
                    return vim.bo[vim.api.nvim_win_get_buf(win)].filetype ~= &quot;snacks_picker_list&quot;
                  end,
                },
              },
              action = function(match)
                local idx = picker.list:row2idx(match.pos[1])
                picker.list:_move(idx, true, true)
              end,
            })
          end,
        },
      },
    },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Continue last search&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({continue = true})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2-char jump, similar to &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-jump2d.md&quot;&gt; mini.jump2d &lt;/a&gt; or &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt; HopWord (hop.nvim) &lt;/a&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local Flash = require(&quot;flash&quot;)

---@param opts Flash.Format
local function format(opts)
  -- always show first and second label
  return {
    { opts.match.label1, &quot;FlashMatch&quot; },
    { opts.match.label2, &quot;FlashLabel&quot; },
  }
end

Flash.jump({
  search = { mode = &quot;search&quot; },
  label = { after = false, before = { 0, 0 }, uppercase = false, format = format },
  pattern = [[\&amp;lt;]],
  action = function(match, state)
    state:hide()
    Flash.jump({
      search = { max_length = 0 },
      highlight = { matches = false },
      label = { format = format },
      matcher = function(win)
        -- limit matches to the current label
        return vim.tbl_filter(function(m)
          return m.label == match.label and m.win == win
        end, state.results)
      end,
      labeler = function(matches)
        for _, m in ipairs(matches) do
          m.label = m.label2 -- use the second label
        end
      end,
    })
  end,
  labeler = function(matches, state)
    local labels = state:labels()
    for m, match in ipairs(matches) do
      match.label1 = labels[math.floor((m - 1) / #labels) + 1]
      match.label2 = labels[(m - 1) % #labels + 1]
      match.label = match.label1
    end
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;🌈 Highlights&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Group&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashBackdrop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Comment&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;backdrop&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashMatch&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Search&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;search matches&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashCurrent&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;IncSearch&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;current match&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashLabel&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Substitute&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;jump label&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashPrompt&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;MsgArea&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashPromptIcon&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Special&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;prompt icon&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashCursor&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;cursor&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;📦 Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggandor/lightspeed.nvim&quot;&gt;lightspeed.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-jump.md&quot;&gt;mini.jump&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-jump2d.md&quot;&gt;mini.jump2d&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rlane/pounce.nvim&quot;&gt;pounce.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/woosaaahh/sj.nvim&quot;&gt;sj.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-treehopper&quot;&gt;nvim-treehopper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggandor/flit.nvim&quot;&gt;flit.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Kong/kong</title>
      <link>https://github.com/Kong/kong</link>
      <description>&lt;p&gt;🦍 The Cloud-Native API Gateway and AI Gateway.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://konghq.com/&quot;&gt;&lt;img src=&quot;https://konghq.com/wp-content/uploads/2018/05/kong-logo-github-readme.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/Kong/kong?style=flat-square&quot; alt=&quot;Stars&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/Kong/kong?style=flat-square&quot; alt=&quot;GitHub commit activity&quot;&gt; &lt;img src=&quot;https://img.shields.io/docker/pulls/_/kong?style=flat-square&quot; alt=&quot;Docker Pulls&quot;&gt; &lt;a href=&quot;https://github.com/Kong/kong/actions&quot;&gt;&lt;img src=&quot;https://github.com/Kong/kong/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/Kong/kong?color=green&amp;amp;label=Version&amp;amp;style=flat-square&quot; alt=&quot;Version&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue?style=flat-square&quot; alt=&quot;License&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/thekonginc?style=social&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Kong&lt;/strong&gt; or &lt;strong&gt;Kong API Gateway&lt;/strong&gt; is a cloud-native, platform-agnostic, scalable API Gateway distinguished for its high performance and extensibility via plugins. It also provides advanced AI capabilities with multi-LLM support.&lt;/p&gt; 
&lt;p&gt;By providing functionality for proxying, routing, load balancing, health checking, authentication (and &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/#features&quot;&gt;more&lt;/a&gt;), Kong serves as the central layer for orchestrating microservices or conventional API traffic with ease.&lt;/p&gt; 
&lt;p&gt;Kong runs natively on Kubernetes thanks to its official &lt;a href=&quot;https://github.com/Kong/kubernetes-ingress-controller&quot;&gt;Kubernetes Ingress Controller&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://konghq.com/install/#kong-community&quot;&gt;Installation&lt;/a&gt; | &lt;a href=&quot;https://docs.konghq.com&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://github.com/Kong/kong/discussions&quot;&gt;Discussions&lt;/a&gt; | &lt;a href=&quot;https://discuss.konghq.com&quot;&gt;Forum&lt;/a&gt; | &lt;a href=&quot;https://konghq.com/blog&quot;&gt;Blog&lt;/a&gt; | &lt;a href=&quot;https://hub.docker.com/r/kong/kong/tags&quot;&gt;Builds&lt;/a&gt; | &lt;a href=&quot;https://konghq.com/kong-konnect/&quot;&gt;Cloud Hosted Kong&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you prefer to use a cloud-hosted Kong, you can &lt;a href=&quot;https://konghq.com/products/kong-konnect/register?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&quot;&gt;sign up for a free trial of Kong Konnect&lt;/a&gt; and get started in minutes. If not, you can follow the instructions below to get started with Kong on your own infrastructure.&lt;/p&gt; 
&lt;p&gt;Let’s test drive Kong by adding authentication to an API in under 5 minutes.&lt;/p&gt; 
&lt;p&gt;We suggest using the docker-compose distribution via the instructions below, but there is also a &lt;a href=&quot;https://docs.konghq.com/gateway/latest/install/docker/#install-kong-gateway-in-db-less-mode&quot;&gt;docker installation&lt;/a&gt; procedure if you’d prefer to run the Kong API Gateway in DB-less mode.&lt;/p&gt; 
&lt;p&gt;Whether you’re running in the cloud, on bare metal, or using containers, you can find every supported distribution on our &lt;a href=&quot;https://konghq.com/install/#kong-community&quot;&gt;official installation&lt;/a&gt; page.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;To start, clone the Docker repository and navigate to the compose folder.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;  $ git clone https://github.com/Kong/docker-kong
  $ cd docker-kong/compose/
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Start the Gateway stack using:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;  $ KONG_DATABASE=postgres docker-compose --profile database up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Gateway is now available on the following ports on localhost:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:8000&lt;/code&gt; - send traffic to your service via Kong&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:8001&lt;/code&gt; - configure Kong using Admin API or via &lt;a href=&quot;https://github.com/kong/deck&quot;&gt;decK&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:8002&lt;/code&gt; - access Kong&#39;s management Web UI (&lt;a href=&quot;https://github.com/Kong/kong-manager&quot;&gt;Kong Manager&lt;/a&gt;) on &lt;a href=&quot;http://localhost:8002&quot;&gt;localhost:8002&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Next, follow the &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/getting-started/configuring-a-service/&quot;&gt;quick start guide&lt;/a&gt; to tour the Gateway features.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;By centralizing common API functionality across all your organization&#39;s services, the Kong API Gateway creates more freedom for engineering teams to focus on the challenges that matter most.&lt;/p&gt; 
&lt;p&gt;The top Kong features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Advanced routing, load balancing, health checking - all configurable via a RESTful admin API or declarative configuration.&lt;/li&gt; 
 &lt;li&gt;Authentication and authorization for APIs using methods like JWT, basic auth, OAuth, ACLs and more.&lt;/li&gt; 
 &lt;li&gt;Proxy, SSL/TLS termination, and connectivity support for L4 or L7 traffic.&lt;/li&gt; 
 &lt;li&gt;Plugins for enforcing traffic controls, rate limiting, req/res transformations, logging, monitoring and including a plugin developer hub.&lt;/li&gt; 
 &lt;li&gt;Plugins for AI traffic to support multi-LLM implementations and no-code AI use cases, with advanced AI prompt engineering, AI observability, AI security and more.&lt;/li&gt; 
 &lt;li&gt;Sophisticated deployment models like Declarative Databaseless Deployment and Hybrid Deployment (control plane/data plane separation) without any vendor lock-in.&lt;/li&gt; 
 &lt;li&gt;Native &lt;a href=&quot;https://github.com/Kong/kubernetes-ingress-controller&quot;&gt;ingress controller&lt;/a&gt; support for serving Kubernetes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://konghq.com/&quot;&gt;&lt;img src=&quot;https://konghq.com/wp-content/uploads/2018/05/kong-benefits-github-readme.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Plugin Hub&lt;/h3&gt; 
&lt;p&gt;Plugins provide advanced functionality that extends the use of the Gateway. Many of the Kong Inc. and community-developed plugins like AWS Lambda, Correlation ID, and Response Transformer are showcased at the &lt;a href=&quot;https://docs.konghq.com/hub/&quot;&gt;Plugin Hub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Contribute to the Plugin Hub and ensure your next innovative idea is published and available to the broader community!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We ❤️ pull requests, and we’re continually working hard to make it as easy as possible for developers to contribute. Before beginning development with the Kong API Gateway, please familiarize yourself with the following developer resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Community Pledge (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/COMMUNITY_PLEDGE.md&quot;&gt;COMMUNITY_PLEDGE.md&lt;/a&gt;) for our pledge to interact with you, the open source community.&lt;/li&gt; 
 &lt;li&gt;Contributor Guide (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;) to learn about how to contribute to Kong.&lt;/li&gt; 
 &lt;li&gt;Development Guide (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/DEVELOPER.md&quot;&gt;DEVELOPER.md&lt;/a&gt;): Setting up your development environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use the &lt;a href=&quot;https://docs.konghq.com/latest/plugin-development/&quot;&gt;Plugin Development Guide&lt;/a&gt; for building new and creative plugins, or browse the online version of Kong&#39;s source code documentation in the &lt;a href=&quot;https://docs.konghq.com/latest/pdk/&quot;&gt;Plugin Development Kit (PDK) Reference&lt;/a&gt;. Developers can build plugins in &lt;a href=&quot;https://docs.konghq.com/gateway/latest/plugin-development/&quot;&gt;Lua&lt;/a&gt;, &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-go-plugins&quot;&gt;Go&lt;/a&gt; or &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-javascript-plugins&quot;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt; for more details about a given release. The &lt;a href=&quot;https://semver.org&quot;&gt;SemVer Specification&lt;/a&gt; is followed when versioning Gateway releases.&lt;/p&gt; 
&lt;h2&gt;Join the Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://docs.konghq.com/&quot;&gt;docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join the &lt;a href=&quot;https://github.com/Kong/kong/discussions&quot;&gt;Kong discussions forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join the Kong discussions at the Kong Nation forum: &lt;a href=&quot;https://discuss.konghq.com/&quot;&gt;https://discuss.konghq.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href=&quot;http://kongcommunity.slack.com/&quot;&gt;Community Slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read up on the latest happenings at our &lt;a href=&quot;https://konghq.com/blog/&quot;&gt;blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow us on &lt;a href=&quot;https://x.com/thekonginc&quot;&gt;X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Subscribe to our &lt;a href=&quot;https://www.youtube.com/c/KongInc/videos&quot;&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Visit our &lt;a href=&quot;https://konghq.com/&quot;&gt;homepage&lt;/a&gt; to learn more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Konnect Cloud&lt;/h2&gt; 
&lt;p&gt;Kong Inc. offers commercial subscriptions that enhance the Kong API Gateway in a variety of ways. Customers of Kong&#39;s &lt;a href=&quot;https://konghq.com/kong-konnect/&quot;&gt;Konnect Cloud&lt;/a&gt; subscription take advantage of additional gateway functionality, commercial support, and access to Kong&#39;s managed (SaaS) control plane platform. The Konnect Cloud platform features include real-time analytics, a service catalog, developer portals, and so much more! &lt;a href=&quot;https://konghq.com/products/kong-konnect/register?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&quot;&gt;Get started&lt;/a&gt; with Konnect Cloud.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Copyright 2016-2024 Kong Inc.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>mistweaverco/kulala.nvim</title>
      <link>https://github.com/mistweaverco/kulala.nvim</link>
      <description>&lt;p&gt;A minimal 🤏 HTTP-client 🐼 interface 🖥️ for Neovim ❤️.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/logo.svg?sanitize=true&quot; alt=&quot;Kulala Logo&quot;&gt;&lt;/p&gt; 
 &lt;h1&gt;kulala.nvim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/graphs/contributors&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/badge-made-with-love.svg?sanitize=true&quot; alt=&quot;Made with love&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/mistweaverco/kulala.nvim?style=for-the-badge&quot; alt=&quot;GitHub release (latest by date)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/QyVQmfY4Rt&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/badge-discord.svg?sanitize=true&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/requirements&quot;&gt;Requirements&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://neovim.getkulala.net/docs/usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://neovim.getkulala.net/docs/usage/http-file-spec&quot;&gt;HTTP File Spec&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;A minimal REST-Client Interface for Neovim.&lt;/p&gt; 
 &lt;p&gt;Kulala is swahili for &quot;rest&quot; or &quot;relax&quot;.&lt;/p&gt; 
 &lt;p&gt;It allows you to make HTTP requests from within Neovim.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/demo.gif&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Requires Neovim 0.10.0+ and cURL.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/requirements&quot;&gt;requirements&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Via &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lazy&quot;).setup({
  {
    &quot;mistweaverco/kulala.nvim&quot;,
    keys = {
      { &quot;&amp;lt;leader&amp;gt;Rs&quot;, desc = &quot;Send request&quot; },
      { &quot;&amp;lt;leader&amp;gt;Ra&quot;, desc = &quot;Send all requests&quot; },
      { &quot;&amp;lt;leader&amp;gt;Rb&quot;, desc = &quot;Open scratchpad&quot; },
    },
    ft = {&quot;http&quot;, &quot;rest&quot;},
    opts = {
      -- your configuration comes here
      global_keymaps = false,
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] &lt;code&gt;opts&lt;/code&gt; needs to be at least an empty table &lt;code&gt;{}&lt;/code&gt; and can&#39;t be completely omitted.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] By default global keymaps are disabled, change to &lt;code&gt;global_keymaps = true&lt;/code&gt; to get a complete set of key mappings for Kulala. Check the &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/keymaps&quot;&gt;keymaps documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See complete &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/configuration-options&quot;&gt;configuration options&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Honorable mentions&lt;/h2&gt; 
&lt;h3&gt;rest.nvim&lt;/h3&gt; 
&lt;p&gt;For getting this project started.&lt;/p&gt; 
&lt;p&gt;This project was heavily inspired by the idea of having a REST client in Neovim.&lt;/p&gt; 
&lt;p&gt;The actual state of &lt;a href=&quot;https://github.com/rest-nvim/rest.nvim&quot;&gt;rest.nvim&lt;/a&gt; as archived kicked off the development of kulala.nvim.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The project has been &lt;a href=&quot;https://github.com/rest-nvim/rest.nvim/issues/398#issue-2442747909&quot;&gt;un-archived&lt;/a&gt; again, so check it out if you&#39;re looking for an alternative.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;curl.nvim&lt;/h3&gt; 
&lt;p&gt;If you want a simple scratchpad for making HTTP requests, check out &lt;a href=&quot;https://github.com/oysandvik94/curl.nvim&quot;&gt;curl.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It&#39;s very different to this project, but it&#39;s a great tool for making HTTP requests from within Neovim and maybe just your cup of tea.&lt;/p&gt; 
&lt;h3&gt;httpbin.org&lt;/h3&gt; 
&lt;p&gt;For providing a great service for testing HTTP requests and making it in all the kulala examples.&lt;/p&gt; 
&lt;p&gt;Thanks for making it easy to test and develop this plugin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IntQuant/noita_entangled_worlds</title>
      <link>https://github.com/IntQuant/noita_entangled_worlds</link>
      <description>&lt;p&gt;True coop multiplayer mod for Noita.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Noita Entangled Worlds - Play Noita not alone&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://liberapay.com/bgkillas/&quot;&gt;&lt;img src=&quot;https://img.shields.io/liberapay/patrons/bgkillas.svg?logo=liberapay&quot;&gt;&lt;/a&gt; for one of the 2 devs, the other dev does not have the means for donations due to his residence&lt;/p&gt; 
&lt;p&gt;Noita Entangled Worlds is an online true coop multiplayer mod.&lt;/p&gt; 
&lt;p&gt;What is synced as of now:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Players, their positions, health, perks and inventories&lt;/li&gt; 
 &lt;li&gt;Wand usage&lt;/li&gt; 
 &lt;li&gt;Item usage&lt;/li&gt; 
 &lt;li&gt;Items in world (One player can throw a wand/potion/spell/item, another can pick it up)&lt;/li&gt; 
 &lt;li&gt;Enemies and their attacks&lt;/li&gt; 
 &lt;li&gt;Pixels of the grid world&lt;/li&gt; 
 &lt;li&gt;Fungal shifts&lt;/li&gt; 
 &lt;li&gt;Polymorphing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There is a video by nichelessone that showcases a recent version: &lt;a href=&quot;https://www.youtube.com/watch?v=mMP-93-RTs0&quot;&gt;https://www.youtube.com/watch?v=mMP-93-RTs0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Discord server: &lt;a href=&quot;https://discord.gg/uAK7utvVWN&quot;&gt;https://discord.gg/uAK7utvVWN&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation (provided by @stefnotch)&lt;/h2&gt; 
&lt;p&gt;Go to &lt;a href=&quot;https://github.com/IntQuant/noita_entangled_worlds/releases&quot;&gt;releases&lt;/a&gt; and download the latest &lt;code&gt;noita-proxy-win.zip&lt;/code&gt; or &lt;code&gt;noita-proxy-linux.zip&lt;/code&gt;, depending on your OS.&lt;/p&gt; 
&lt;p&gt;Unpack it, and launch the proxy. Proxy is able to download and install the mod automatically.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/817cd204-1815-4834-803b-58761b21dc51&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Then, start Noita, and enable the mod.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;In the &quot;Mods&quot; menu, enable unsafe mods.&lt;/li&gt; 
 &lt;li&gt;Then, enable the &quot;Quant&#39;s Entangled Worlds&quot; mod.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/IntQuant/noita_entangled_worlds/assets/10220080/3a45f0ad-2ef1-4896-805c-1c1266e039c4&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Now you&#39;re ready to start a server and have fun!&lt;/p&gt; 
&lt;h2&gt;Connect using Steam&lt;/h2&gt; 
&lt;p&gt;In the Proxy window, click on &quot;Create Lobby&quot;. Then, &quot;Save lobby ID to clipboard&quot;. Send that ID to your friends, who can then &lt;em&gt;copy&lt;/em&gt; it and press &quot;Connect to lobby in clipboard&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/45cf2be6-090c-4d83-aa6b-516d94748cc5&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After that, just start a new Noita game on everyone&#39;s PCs, and you should be in multiplayer mode :)&lt;/p&gt; 
&lt;h2&gt;Mods support&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1nMdqzrLCav_diXbNPB9RgxPcCQzDPgXdEv-klKWJyS0&quot;&gt;The mods listed here&lt;/a&gt; have been tested by the community, it is publically editable so please add any untested mod with your findings&lt;/p&gt; 
&lt;h2&gt;Cli connect&lt;/h2&gt; 
&lt;p&gt;can also connect via cli, just run &lt;code&gt;noita_proxy --lobby [steam_code/ip and port]&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Cli host&lt;/h2&gt; 
&lt;p&gt;can also host via cli, just run &lt;code&gt;noita_proxy --host [steam/port]&lt;/code&gt;, &quot;--host steam&quot; will host a steam game and &quot;--host 5123&quot; or any port will host via ip at that port&lt;/p&gt; 
&lt;h2&gt;Connecting via steam without steam version of game&lt;/h2&gt; 
&lt;p&gt;There is a &quot;Allow using steam networking even if you don&#39;t have the game on steam&quot; checkbox in top left on main screen of proxy.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Special thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contributors.&lt;/li&gt; 
 &lt;li&gt;@EvaisaDev for allowing to use code from Noita Arena mod.&lt;/li&gt; 
 &lt;li&gt;@dextercd for NoitaPatcher.&lt;/li&gt; 
 &lt;li&gt;Creators of other libraries used in this project.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>iDvel/rime-ice</title>
      <link>https://github.com/iDvel/rime-ice</link>
      <description>&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL--3.0--only-34ad9b&quot; alt=&quot;License: GPL 3.0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/iDvel/rime-ice?filter=!nightly&quot; alt=&quot;GitHub Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/actions/workflows/release.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/iDvel/rime-ice/release.yml&quot; alt=&quot;GitHub Actions Workflow Status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/iDvel/rime-ice&quot; alt=&quot;GitHub Repo stars&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;a href=&quot;https://rime.im/&quot;&gt;Rime Input Method Engine / 中州韵输入法引擎&lt;/a&gt; 是一个跨平台的输入法算法框架。&lt;/p&gt; 
&lt;p&gt;这里是 Rime 的一份配置仓库，用户需要下载各平台对应的前端，并将此配置应用到配置目录。&lt;/p&gt; 
&lt;p&gt;雾凇拼音提供了一套开箱即用的完整配置，包含输入方案（全拼、常见双拼）、长期维护的开源词库及各项扩展功能。&lt;/p&gt; 
&lt;p&gt;详细介绍：&lt;a href=&quot;https://dvel.me/posts/rime-ice/&quot;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/133&quot;&gt;常见问题&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/CHANGELOG.md&quot;&gt;更新日志&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;基本套路&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; 
 &lt;li&gt;主要功能 
  &lt;ul&gt; 
   &lt;li&gt;轻量的英文输入，支持中英混输&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://dvel.me/posts/make-rime-en-better/&quot;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;拆字反查（&lt;kbd&gt;uU&lt;/kbd&gt;+拼音），拆字辅码（拼音+&lt;kbd&gt;`&lt;/kbd&gt;+拆字辅码）&lt;/li&gt; 
   &lt;li&gt;自整理的 Emoji&lt;/li&gt; 
   &lt;li&gt;以词定字（左右中括号：&lt;kbd&gt;[&lt;/kbd&gt;、&lt;kbd&gt;]&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;长词优先&lt;/li&gt; 
   &lt;li&gt;Unicode（&lt;kbd&gt;U&lt;/kbd&gt;+Unicode 码位）&lt;/li&gt; 
   &lt;li&gt;数字、人民币大写（&lt;kbd&gt;R&lt;/kbd&gt;+数字）&lt;/li&gt; 
   &lt;li&gt;日期、时间、星期（详见方案 &lt;code&gt;/date_translator&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;农历（转写：&lt;kbd&gt;N&lt;/kbd&gt;+八位数字；获取当前农历：全拼&lt;kbd&gt;nl&lt;/kbd&gt;，双拼&lt;kbd&gt;lunar&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;简易计算器（&lt;kbd&gt;cC&lt;/kbd&gt;+算式）&lt;/li&gt; 
   &lt;li&gt;常见错音错字提示&lt;/li&gt; 
   &lt;li&gt;置顶候选项（详见方案 &lt;code&gt;/pin_cand_filter&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;所有标点符号直接上屏&lt;/li&gt; 
   &lt;li&gt;特殊符号、字符输入（全拼&lt;kbd&gt;v&lt;/kbd&gt;+首字母缩写；双拼&lt;kbd&gt;V&lt;/kbd&gt;+首字母缩写）&lt;/li&gt; 
   &lt;li&gt;拼音纠错（模糊音）&lt;/li&gt; 
   &lt;li&gt;更多默认未启用的功能请参考 &lt;code&gt;lua/&lt;/code&gt; 及方案注释&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;简体字表、词库 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&quot;&gt;通用规范汉字表&lt;/a&gt;（by 中华人民共和国教育部）8K 常用汉字&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.unicode.org/Public/&quot;&gt;Unihan 字库&lt;/a&gt;（by Unicode lnc | &lt;a href=&quot;https://www.unicode.org/license.txt&quot;&gt;UNICODE LICENSE V3&lt;/a&gt;）40K 大字库， &lt;strong&gt;默认未启用&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D%E8%A1%A8&quot;&gt;现代汉语常用词表&lt;/a&gt;（by 中国国家语言文字工作委员会）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&quot;&gt;华宇野风词库&lt;/a&gt;（by 野风）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/rime-essay-simp&quot;&gt;简化字八股文&lt;/a&gt;（by rime | &lt;a href=&quot;https://github.com/rime/rime-essay-simp/raw/master/LICENSE&quot;&gt;LGPL&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/thunlp/THUOCL&quot;&gt;清华大学开源词库&lt;/a&gt;（by THUNLP | &lt;a href=&quot;https://github.com/thunlp/THUOCL/raw/master/LICENSE&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/download.html&quot;&gt;腾讯词向量&lt;/a&gt;（@Huandeep &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/24&quot;&gt;整理&lt;/a&gt; | by Tencent AI Lab | &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;词库修订 
  &lt;ul&gt; 
   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; 
   &lt;li&gt;全词库完成注音&lt;/li&gt; 
   &lt;li&gt;同义多音字注音&lt;/li&gt; 
   &lt;li&gt;参考 
    &lt;ul&gt; 
     &lt;li&gt;《现代汉语词典》&lt;/li&gt; 
     &lt;li&gt;《同义词词林》&lt;/li&gt; 
     &lt;li&gt;《新华成语大词典》&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;http://www.jiaodui.com/bbs/&quot;&gt;校对标准论坛&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Rime、Squirrel、Weasel 常用配置项的详尽注释&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;h2&gt;长期维护词库&lt;/h2&gt; 
&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; 
&lt;p&gt;主要维护的词库：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; 
 &lt;li&gt;Emoji&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; 
&lt;p&gt;欢迎在词库方面提 issue &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/666&quot;&gt;#666&lt;/a&gt; ，我会及时更新修正。&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;使用说明&lt;/h2&gt; 
&lt;h3&gt;选择和安装 RIME 前端&lt;/h3&gt; 
&lt;p&gt;要使用雾凇拼音默认提供的所有功能，请保证&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;您的 RIME 前端提供的 librime 版本 ≥ 1.8.5 且&lt;/li&gt; 
 &lt;li&gt;含有 librime-lua 依赖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以下是主流平台上的一些 RIME 前端安装建议。部分信息具有时效性，请以当下具体情况为准：&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;系统&lt;/th&gt; 
   &lt;th&gt;RIME 前端&lt;/th&gt; 
   &lt;th&gt;雾凇拼音版本要求&lt;/th&gt; 
   &lt;th&gt;备注&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx5-android/fcitx5-android/releases&quot;&gt;fcitx5-android&lt;/a&gt; + plugin.rime（小企鹅输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 0.0.8&lt;/td&gt; 
   &lt;td&gt;暂不支持九宫格&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/osfans/trime&quot;&gt;Trime&lt;/a&gt;（同文输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 3.2.11&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95/id6446617683&quot;&gt;Hamster&lt;/a&gt;（仓输入法）&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;闭源；有内购&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;ibus + &lt;a href=&quot;https://github.com/rime/ibus-rime&quot;&gt;ibus-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;fcitx5 + &lt;a href=&quot;https://github.com/fcitx/fcitx5-rime&quot;&gt;fcitx5-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/squirrel&quot;&gt;Squirrel&lt;/a&gt;（鼠须管）&lt;/td&gt; 
   &lt;td&gt;≥ 1.0.0&lt;/td&gt; 
   &lt;td&gt;0.16.0 - 0.18.0 版本请参考&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/1062&quot;&gt;🔗&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx-contrib/fcitx5-macos&quot;&gt;fcitx5-macos&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;支持&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/941&quot;&gt;卷轴模式&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/weasel&quot;&gt;Weasel&lt;/a&gt;（小狼毫）&lt;/td&gt; 
   &lt;td&gt;≥ 0.15.0&lt;/td&gt; 
   &lt;td&gt;0.14.3 可手动更新 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/197&quot;&gt;rime.dll&lt;/a&gt;（但不支持彩色 emoji）&lt;br&gt;Weasel 当下有兼容性问题，建议安装其他输入法备用&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Linux 依赖问题的具体解释请参考 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/840&quot;&gt;#840&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;雾凇拼音的部分配置可能要求更高的 librime 或者客户端版本，这些功能已在具体配置文件中注明。&lt;/p&gt; 
&lt;p&gt;以下安装方式，选择其一：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85&quot;&gt;手动安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#git-%E5%AE%89%E8%A3%85&quot;&gt;Git 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%B8%9C%E9%A3%8E%E7%A0%B4-plum&quot;&gt;东风破 plum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC&quot;&gt;自动部署脚本&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95-hamster&quot;&gt;仓输入法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#arch-linux&quot;&gt;Arch Linux&lt;/a&gt;（AUR）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;手动安装&lt;/h3&gt; 
&lt;p&gt;您可以将仓库打包下载，将所有文件复制粘贴到 RIME 前端的配置目录，重新部署。&lt;/p&gt; 
&lt;p&gt;只需要使用或者更新词库的话，可以手动粘贴覆盖 &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dicts&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; 三个文件夹。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] 雾凇拼音中多个文件可能与其他方案同名冲突，如果是新手想一键安装，建议备份原先配置，&lt;strong&gt;清空配置目录&lt;/strong&gt;再导入。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;单独使用词库注意事项：&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 下面包含了大写字母，这和配置有些许绑定，可以直接删除，详细说明：&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/356&quot;&gt;#356&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;您也可以前往 &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases&quot;&gt;Release&lt;/a&gt; 界面，下载特定版本的词典文件（具体描述见 Release 说明），覆盖配置目录的对应文件。&lt;/p&gt; 
&lt;h3&gt;Git 安装&lt;/h3&gt; 
&lt;p&gt;您如果熟悉 git 常用操作，可以使用 git clone 命令将本仓库克隆到对应前端的用户目录。由于本库提交历史较多且更改频繁，添加 &lt;code&gt;--depth&lt;/code&gt; 参数可以显著减少传输体积。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/iDvel/rime-ice.git Rime --depth 1

# 更新
cd Rime
git pull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 checkout 命令，您也可以实现更新部分文件的效果。&lt;/p&gt; 
&lt;h3&gt;东风破 &lt;a href=&quot;https://github.com/rime/plum&quot;&gt;plum&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;选择配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）来进行安装或更新。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;/plum/ 简易安装和使用教程&lt;/summary&gt; 
 &lt;hr&gt; 
 &lt;p&gt;安装 plum（仅需要执行一次）&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 请先安装 git 和 bash，并加入环境变量
# 请确保和 github.com 的连接稳定
cd ~
git clone https://github.com/rime/plum.git plum
# 卸载 plum 只需要删除 ~/plum 文件夹即可
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;更新 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install plum
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;使用 plum 安装「雾凇拼音」方案的韵书（recipe）&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;指定 RIME 前端为 fcitx5-rime&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
rime_frontend=fcitx5-rime bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;使用 plum 更新「雾凇拼音」的词库文件&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd ~/plum
bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr&gt; 
&lt;/details&gt; 
&lt;p&gt;词库配方只是更新具体词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。如果更新后部署时报错，可能是增、删、改了文件名，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; 
&lt;p&gt;℞ 安装或更新全部文件&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新所有词库文件（包含下面三个）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新拼音词库文件（ &lt;code&gt;cn_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新英文词库文件（ &lt;code&gt;en_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新 opencc （ &lt;code&gt;opencc/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;下面这个配方会在 &lt;code&gt;radical_pinyin.custom.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.custom.yaml&lt;/code&gt; 里将 &lt;code&gt;speller/algebra&lt;/code&gt; 修改为对应的双拼拼写，选择一个自己使用的双拼作为参数。&lt;/p&gt; 
&lt;p&gt;℞ 双拼补丁&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/config:schema=flypy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=double_pinyin
bash rime-install iDvel/rime-ice:others/recipes/config:schema=mspy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=sogou
bash rime-install iDvel/rime-ice:others/recipes/config:schema=abc
bash rime-install iDvel/rime-ice:others/recipes/config:schema=ziguang
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 下载特定版本的配置&lt;/p&gt; 
&lt;p&gt;在仓库后加 &lt;code&gt;@tag&lt;/code&gt; 即可，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bash rime-install iDvel/rime-ice@2024.05.21:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;仓输入法 &lt;a href=&quot;https://github.com/imfuxiao/Hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;参考 &lt;a href=&quot;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&quot;&gt;如何导入&quot;雾凇拼音输入方案&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;仓输入法目前已内置雾凇拼音，也可以通过【输入方案设置 - 右上角加号 - 方案下载 - 覆盖并部署】来更新雾凇拼音。&lt;/p&gt; 
&lt;p&gt;使用九宫格，需要同时启用九宫格方案（输入方案设置）和九宫格布局（键盘设置 - 键盘布局 - 中文 9 键）。&lt;/p&gt; 
&lt;h3&gt;自动部署脚本&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Mark24Code/rime-auto-deploy&quot;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; 一个自动部署脚本，集成了雾凇拼音，帮助无痛快速安装、部署 Rime 输入法（中州韵、小狼毫，鼠须管）以及部署配置。&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;使用 AUR helper 安装 &lt;a href=&quot;https://aur.archlinux.org/packages/rime-ice-git&quot;&gt;rime-ice-git&lt;/a&gt; 包即可。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# paru 默认会每次重新评估 pkgver，所以有新的提交时 paru 会自动更新，
# yay 默认未开启此功能，可以通过此命令开启
# yay -Y --devel --save

paru -S rime-ice-git
# yay -S rime-ice-git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;推荐使用&lt;a href=&quot;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&quot;&gt;补丁&lt;/a&gt;的方式启用。&lt;/p&gt; 
&lt;p&gt;参考下面的配置示例，修改对应输入法框架用户目录（见下）中的 &lt;code&gt;default.custom.yaml&lt;/code&gt; 文件&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iBus 为 &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fcitx5 为 &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;default.custom.yaml&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;patch:
  # 仅使用「雾凇拼音」的默认配置，配置此行即可
  __include: rime_ice_suggestion:/
  # 以下根据自己所需自行定义，仅做参考。
  # 针对对应处方的定制条目，请使用 &amp;lt;recipe&amp;gt;.custom.yaml 中配置，例如 rime_ice.custom.yaml
  __patch:
    key_binder/bindings/+:
      # 开启逗号句号翻页
      - { when: paging, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;感谢 ❤️&lt;/h2&gt; 
&lt;p&gt;特别感谢上文已经提及的词库、词典的作者、贡献者及整理者；特别感谢以及下列词库、方案、脚本的作者及贡献者（提及的均为 GitHub id）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@mozillazg 开发的汉字转拼音工具和数据库（MIT）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt&quot;&gt;melt_eng&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;） ：提供了部分（约 1000 条）英文词汇以及原始英文方案参考；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin&quot;&gt;部件拆字方案&lt;/a&gt;（@mirtlecn | &lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin/raw/master/LICENSE&quot;&gt;GPL 3.0&lt;/a&gt;）：提供的拆字反查和候选筛选插件；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&quot;&gt;长词优先插件&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;Unicode 插件&lt;/a&gt;（@shewer | &lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yanhuacuo/98wubi/raw/master/lua/number.lua&quot;&gt;数字、人民币大写插件&lt;/a&gt;（@98wubi）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/boomker/rime-fast-xhup&quot;&gt;农历插件&lt;/a&gt;（@boomker | &lt;a href=&quot;https://github.com/boomker/rime-fast-xhup/raw/master/LICENSE&quot;&gt;LGPL 3.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;未能在此处详述的、在本库源码注释中提及的项目及作者给予的帮助和参考&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Huandeep&quot;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/mirtlecn&quot;&gt;@Mirtle&lt;/a&gt; 完善的多个功能。&lt;/p&gt; 
&lt;p&gt;感谢所有贡献者。&lt;/p&gt; 
&lt;!-- 搜狗转 Rime：[lewangdev/scel2txt](https://github.com/lewangdev/scel2txt) --&gt; 
&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSourceSupport&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;赞助 ☕&lt;/h2&gt; 
&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&quot; alt=&quot;请 Dvel 吃个煎饼馃子&quot; width=&quot;600&quot;&gt;</description>
    </item>
    
  </channel>
</rss>
