<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Emacs Lisp Weekly Trending</title>
    <description>Weekly Trending of Emacs Lisp in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:43:34 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>doomemacs/doomemacs</title>
      <link>https://github.com/doomemacs/doomemacs</link>
      <description>&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Doom Emacs&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; • &lt;a href=&quot;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&quot;&gt;Screenshots&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&quot; alt=&quot;Made with Doom Emacs&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Supports-Emacs_27.1%E2%80%9330.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&quot; alt=&quot;Supports Emacs 27.1–30.1&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/last-commit/doomemacs/doomemacs?style=flat-square&quot; alt=&quot;Latest commit&quot;&gt;&lt;/p&gt; 
 &lt;!-- ![Build status: master](https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square) --&gt; 
 &lt;p&gt;&lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&quot; alt=&quot;Discord Server&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discourse.doomemacs.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&quot; alt=&quot;Discourse server&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&quot; alt=&quot;Doom Emacs Screenshot&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&quot;&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;a href=&quot;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&quot; align=&quot;right&quot;&gt; &lt;/a&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Doom is a configuration framework for &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; 
&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; 
 &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; 
 &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; 
 &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; 
 &lt;li&gt;A declarative &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&quot;https://github.com/radian-software/straight.el&quot;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; 
 &lt;li&gt;Optional vim emulation powered by &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&quot;https://github.com/easymotion/vim-easymotion&quot;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&quot;https://github.com/tpope/vim-unimpaired&quot;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&quot;&gt;more&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; 
 &lt;li&gt;A Spacemacs-esque &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&quot;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; 
 &lt;li&gt;A rule-based &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&quot;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; 
 &lt;li&gt;Per-file indentation style detection and &lt;a href=&quot;http://editorconfig.org/&quot;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; 
 &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;ivy&lt;/a&gt; or &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; 
 &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; 
 &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git 2.23+&lt;/li&gt; 
 &lt;li&gt;Emacs 27.1–30.1 (&lt;strong&gt;Recommended: 30.1 + &lt;a href=&quot;https://www.emacswiki.org/emacs/GccEmacs&quot;&gt;native-comp&lt;/a&gt;&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; 
 &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Unstable and pre-release builds of Emacs -- which end in &lt;code&gt;.50&lt;/code&gt;, &lt;code&gt;.60&lt;/code&gt;, or &lt;code&gt;.9X&lt;/code&gt; (e.g. &lt;code&gt;28.1.91&lt;/code&gt;) -- &lt;strong&gt;are not officially supported&lt;/strong&gt;. There &lt;em&gt;is&lt;/em&gt; some effort to support Emacs HEAD, however. &lt;a href=&quot;https://discourse.doomemacs.org/t/3241&quot;&gt;Follow this Discourse post&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Doom is comprised of &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&quot;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; 
&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.config/emacs/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Roadmap&lt;/h1&gt; 
&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discourse.doomemacs.org/t/development-roadmap/42&quot;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/5&quot;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/7&quot;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Our documentation&lt;/a&gt; covers many use cases. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&quot;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&quot;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&quot;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&quot;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&quot;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; 
   &lt;li&gt;Your issue may be documented in the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: 
  &lt;ul&gt; 
   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; or &lt;a href=&quot;https://discourse.doomemacs.org/tag/faq&quot;&gt;Discourse FAQs&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; 
 &lt;li&gt;Search &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues&quot;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contribute&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bbatsov/emacs-lisp-style-guide&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&quot; alt=&quot;Elisp styleguide&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&quot; alt=&quot;Donate on liberapay&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/henriklissner/10&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&quot; alt=&quot;Donate on paypal&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&quot;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; 
 &lt;li&gt;Don&#39;t hesitate to &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues/new/choose&quot;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;liberapay&lt;/a&gt; or &lt;a href=&quot;https://paypal.me/henriklissner/10&quot;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>joodland/bm</title>
      <link>https://github.com/joodland/bm</link>
      <description>&lt;p&gt;bm.el -- Visual Bookmarks for GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://melpa.org/#/bm&quot;&gt;&lt;img src=&quot;http://melpa.org/packages/bm-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://melpa.org/#/bm&quot;&gt;&lt;img src=&quot;http://stable.melpa.org/packages/bm-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/joodland/bm/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/joodland/bm/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Visible bookmarks in buffer for GNU Emacs 26.x, 27.x, 28.x, 29.x&lt;/h1&gt; 
&lt;p&gt;This package provides visible, buffer local, bookmarks and the ability to jump forward and backward to the next bookmark.&lt;/p&gt; 
&lt;p&gt;It was created because I missed the bookmarks from M$ Visual Studio in GNU Emacs. I think they provide an easy way to navigate in a buffer.&lt;/p&gt; 
&lt;h2&gt;Features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Auto remove bookmark after jump to it by &lt;code&gt;bm-next&lt;/code&gt; or &lt;code&gt;bm-previous&lt;/code&gt;:&lt;/li&gt; 
 &lt;li&gt;Cycle through bookmarks in all open buffers in LIFO order&lt;/li&gt; 
 &lt;li&gt;Toggle bookmarks. Jump to next/previous bookmark.&lt;/li&gt; 
 &lt;li&gt;Setting bookmarks based on a regexp. (Useful when searching logfiles.)&lt;/li&gt; 
 &lt;li&gt;Mouse navigation.&lt;/li&gt; 
 &lt;li&gt;Annotate bookmarks.&lt;/li&gt; 
 &lt;li&gt;Different wrapping modes.&lt;/li&gt; 
 &lt;li&gt;Different bookmarks styles, line-only, fringe-only or both.&lt;/li&gt; 
 &lt;li&gt;Persistent bookmarks (buffer local), also in non-file buffers (&lt;em&gt;info&lt;/em&gt;) and indirect buffers.&lt;/li&gt; 
 &lt;li&gt;List bookmarks (in all buffers) in a separate buffer.&lt;/li&gt; 
 &lt;li&gt;Cycle through bookmarks in all open buffers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Known Limitations:&lt;/h2&gt; 
&lt;p&gt;There are some incompatibilities with lazy-lock when using fill-paragraph. All bookmark below the paragraph being filled will be lost. This issue can be resolved using the `jit-lock-mode&#39;.&lt;/p&gt; 
&lt;h2&gt;Installation:&lt;/h2&gt; 
&lt;p&gt;To use bm.el, put it in your load-path and add the following to your .emacs&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(require &#39;bm)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(autoload &#39;bm-toggle   &quot;bm&quot; &quot;Toggle bookmark in current buffer.&quot; t)
(autoload &#39;bm-next     &quot;bm&quot; &quot;Goto bookmark.&quot;                     t)
(autoload &#39;bm-previous &quot;bm&quot; &quot;Goto previous bookmark.&quot;            t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration:&lt;/h2&gt; 
&lt;p&gt;To make it easier to use, assign the commands to some keys.&lt;/p&gt; 
&lt;p&gt;M$ Visual Studio key setup.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(global-set-key (kbd &quot;&amp;lt;C-f2&amp;gt;&quot;) &#39;bm-toggle)
(global-set-key (kbd &quot;&amp;lt;f2&amp;gt;&quot;)   &#39;bm-next)
(global-set-key (kbd &quot;&amp;lt;S-f2&amp;gt;&quot;) &#39;bm-previous)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Click on fringe to toggle bookmarks, and use mouse wheel to move between them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(global-set-key (kbd &quot;&amp;lt;left-fringe&amp;gt; &amp;lt;mouse-5&amp;gt;&quot;) &#39;bm-next-mouse)
(global-set-key (kbd &quot;&amp;lt;left-fringe&amp;gt; &amp;lt;mouse-4&amp;gt;&quot;) &#39;bm-previous-mouse)
(global-set-key (kbd &quot;&amp;lt;left-fringe&amp;gt; &amp;lt;mouse-1&amp;gt;&quot;) &#39;bm-toggle-mouse)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like the markers on the right fringe instead of the left, add the following line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq bm-marker &#39;bm-marker-right)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like to cycle bookmark in LIFO order, add the following line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq bm-in-lifo-order t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like to cycle through bookmarks in &lt;em&gt;all&lt;/em&gt; open buffers, add the following line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq bm-cycle-all-buffers t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like to remove bookmark after jump to it by &lt;code&gt;bm-next&lt;/code&gt; or &lt;code&gt;bm-previous&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq temporary-bookmark-p t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or if you want use this feature in your library:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(bm-bookmark-add nil nil t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need org-mode to expand the region containing a bookmark, add the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-hook &#39;bm-after-goto-hook &#39;org-bookmark-jump-unhide)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuring bm.el with use-package:&lt;/h2&gt; 
&lt;p&gt;Configuring bm.el with &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;use-package&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package bm
         :ensure t
         :demand t

         :init
         ;; restore on load (even before you require bm)
         (setq bm-restore-repository-on-load t)


         :config
         ;; Allow cross-buffer &#39;next&#39;
         (setq bm-cycle-all-buffers t)

         ;; where to store persistant files
         (setq bm-repository-file &quot;~/.emacs.d/bm-repository&quot;)

         ;; save bookmarks
         (setq-default bm-buffer-persistence t)

         ;; Loading the repository from file when on start up.
         (add-hook &#39;after-init-hook &#39;bm-repository-load)

         ;; Saving bookmarks
         (add-hook &#39;kill-buffer-hook #&#39;bm-buffer-save)

         ;; Saving the repository to file when on exit.
         ;; kill-buffer-hook is not called when Emacs is killed, so we
         ;; must save all bookmarks first.
         (add-hook &#39;kill-emacs-hook #&#39;(lambda nil
                                          (bm-buffer-save-all)
                                          (bm-repository-save)))

         ;; The `after-save-hook&#39; is not necessary to use to achieve persistence,
         ;; but it makes the bookmark data in repository more in sync with the file
         ;; state.
         (add-hook &#39;after-save-hook #&#39;bm-buffer-save)

         ;; Restoring bookmarks
         (add-hook &#39;find-file-hooks   #&#39;bm-buffer-restore)
         (add-hook &#39;after-revert-hook #&#39;bm-buffer-restore)

         ;; The `after-revert-hook&#39; is not necessary to use to achieve persistence,
         ;; but it makes the bookmark data in repository more in sync with the file
         ;; state. This hook might cause trouble when using packages
         ;; that automatically reverts the buffer (like vc after a check-in).
         ;; This can easily be avoided if the package provides a hook that is
         ;; called before the buffer is reverted (like `vc-before-checkin-hook&#39;).
         ;; Then new bookmarks can be saved before the buffer is reverted.
         ;; Make sure bookmarks is saved before check-in (and revert-buffer)
         (add-hook &#39;vc-before-checkin-hook #&#39;bm-buffer-save)


         :bind ((&quot;&amp;lt;f2&amp;gt;&quot; . bm-next)
                (&quot;S-&amp;lt;f2&amp;gt;&quot; . bm-previous)
                (&quot;C-&amp;lt;f2&amp;gt;&quot; . bm-toggle))
         )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reviews and comments:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.manueluberti.eu//emacs/2020/03/19/lockdown-beam-bm/&quot;&gt;Lockdown Beam: bm.el&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://emacsworld.blogspot.com/2008/09/visual-bookmarks-package-for-emacs.html&quot;&gt;A Visual Bookmarks package for Emacs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.emacsblog.org/2007/03/22/bookmark-mania/&quot;&gt;Bookmark Mania&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.emacswiki.org/cgi-bin/wiki/VisibleBookmarks&quot;&gt;EmacsWiki: VisibleBookmarks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://codeblog.bsdninjas.co.uk/index.php?/archives/136-A-couple-of-useful-Emacs-modes.html&quot;&gt;A couple of useful Emacs modes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://packages.debian.org/unstable/editors/emacs-goodies-el&quot;&gt;Part of Debian package: emacs-goodies-el&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14454219/how-to-highlight-a-particular-line-in-emacs&quot;&gt;A solution to the question &#39;How to highlight a particular line in emacs?&#39; on StackOverflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;gnu.emacs.sources 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/gnu.emacs.sources/browse_thread/thread/2ccc0ece443a81b6/d4b97c612190d0d6?fwc=1&quot;&gt;Original posting of bm.el (31 Jan 2001)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/gnu.emacs.sources/browse_thread/thread/8f0ec0f1eff89764/cd24c441f9bc6bef?lnk=gst#cd24c441f9bc6bef&quot;&gt;Posting of first version with persistence. (12 Nov 2003)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>karthink/gptel</title>
      <link>https://github.com/karthink/gptel</link>
      <description>&lt;p&gt;A simple LLM client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: gptel: A simple LLM client for Emacs&lt;/p&gt; 
&lt;p&gt;[[https://elpa.nongnu.org/nongnu/gptel.html][file:https://elpa.nongnu.org/nongnu/gptel.svg]] [[https://stable.melpa.org/#/gptel][file:https://stable.melpa.org/packages/gptel-badge.svg]] [[https://melpa.org/#/gptel][file:https://melpa.org/packages/gptel-badge.svg]]&lt;/p&gt; 
&lt;p&gt;gptel is a simple Large Language Model chat client for Emacs, with support for multiple models and backends. It works in the spirit of Emacs, available at any time and uniformly in any buffer.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
  | LLM Backend | Supports | Requires | |--------------------+----------+----------------------------| | ChatGPT | ✓ | [[https://platform.openai.com/account/api-keys][API key]] | | Anthropic (Claude) | ✓ | [[https://www.anthropic.com/api][API key]] | | Gemini | ✓ | [[https://makersuite.google.com/app/apikey][API key]] | | Ollama | ✓ | [[https://ollama.ai/][Ollama running locally]] | | Llama.cpp | ✓ | [[https://github.com/ggerganov/llama.cpp/tree/master/examples/server#quick-start][Llama.cpp running locally]] | | Llamafile | ✓ | [[https://github.com/Mozilla-Ocho/llamafile#quickstart][Local Llamafile server]] | | GPT4All | ✓ | [[https://gpt4all.io/index.html][GPT4All running locally]] | | Kagi FastGPT | ✓ | [[https://kagi.com/settings?p=api][API key]] | | Kagi Summarizer | ✓ | [[https://kagi.com/settings?p=api][API key]] | | Azure | ✓ | Deployment and API key | | Groq | ✓ | [[https://console.groq.com/keys][API key]] | | Perplexity | ✓ | [[https://docs.perplexity.ai/docs/getting-started][API key]] | | OpenRouter | ✓ | [[https://openrouter.ai/keys][API key]] | | together.ai | ✓ | [[https://api.together.xyz/settings/api-keys][API key]] | | Anyscale | ✓ | [[https://docs.endpoints.anyscale.com/][API key]] | | PrivateGPT | ✓ | [[https://github.com/zylon-ai/private-gpt#-documentation][PrivateGPT running locally]] | | DeepSeek | ✓ | [[https://platform.deepseek.com/api_keys][API key]] | | Cerebras | ✓ | [[https://cloud.cerebras.ai/][API key]] | | Github Models | ✓ | [[https://github.com/settings/tokens][Token]] | | Novita AI | ✓ | [[https://novita.ai/model-api/product/llm-api?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][Token]] | | xAI | ✓ | [[https://console.x.ai?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][API key]] | #+html: 
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;General usage&lt;/em&gt;: ([[https://www.youtube.com/watch?v=bsRnh_brggM][YouTube Demo]])&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;In-place usage&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&quot;&gt;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Tool use&lt;/em&gt; (experimental)&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&quot;&gt;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&quot;&gt;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;See also [[https://youtu.be/g1VMGhC5gRU][this youtube demo (2 minutes)]] by Armin Darvish.&lt;/p&gt; 
&lt;h1&gt;&lt;em&gt;Media support&lt;/em&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p align=&quot;center&quot;&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&quot;&gt;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&lt;/a&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;em&gt;Multi-LLM support demo&lt;/em&gt;:&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&quot;&gt;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&lt;/a&gt;&lt;/h1&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;gptel is async and fast, streams responses.&lt;/li&gt; 
 &lt;li&gt;Interact with LLMs from anywhere in Emacs (any buffer, shell, minibuffer, wherever).&lt;/li&gt; 
 &lt;li&gt;LLM responses are in Markdown or Org markup.&lt;/li&gt; 
 &lt;li&gt;Supports multiple independent conversations and one-off ad hoc interactions.&lt;/li&gt; 
 &lt;li&gt;Supports tool-use to equip LLMs with agentic capabilities (experimental feature).&lt;/li&gt; 
 &lt;li&gt;Supports multi-modal input (include images, documents).&lt;/li&gt; 
 &lt;li&gt;Save chats as regular Markdown/Org/Text files and resume them later.&lt;/li&gt; 
 &lt;li&gt;Edit your previous prompts or LLM responses when continuing a conversation. These will be fed back to the model.&lt;/li&gt; 
 &lt;li&gt;Supports introspection, so you can see /exactly/ what will be sent. Inspect and modify queries before sending them.&lt;/li&gt; 
 &lt;li&gt;Pause multi-stage requests at an intermediate stage and resume them later.&lt;/li&gt; 
 &lt;li&gt;Don&#39;t like gptel&#39;s workflow? Use it to create your own for any supported model/backend with a [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][simple API]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;gptel uses Curl if available, but falls back to the built-in url-retrieve to work without external dependencies.&lt;/p&gt; 
&lt;p&gt;** Contents :toc:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#breaking-changes][Breaking changes!]]&lt;/li&gt; 
 &lt;li&gt;[[#installation][Installation]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#straight][Straight]]&lt;/li&gt; 
   &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; 
   &lt;li&gt;[[#doom-emacs][Doom Emacs]]&lt;/li&gt; 
   &lt;li&gt;[[#spacemacs][Spacemacs]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#setup][Setup]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chatgpt][ChatGPT]]&lt;/li&gt; 
   &lt;li&gt;[[#other-llm-backends][Other LLM backends]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#azure][Azure]]&lt;/li&gt; 
     &lt;li&gt;[[#gpt4all][GPT4All]]&lt;/li&gt; 
     &lt;li&gt;[[#ollama][Ollama]]&lt;/li&gt; 
     &lt;li&gt;[[#gemini][Gemini]]&lt;/li&gt; 
     &lt;li&gt;[[#llamacpp-or-llamafile][Llama.cpp or Llamafile]]&lt;/li&gt; 
     &lt;li&gt;[[#kagi-fastgpt--summarizer][Kagi (FastGPT &amp;amp; Summarizer)]]&lt;/li&gt; 
     &lt;li&gt;[[#togetherai][together.ai]]&lt;/li&gt; 
     &lt;li&gt;[[#anyscale][Anyscale]]&lt;/li&gt; 
     &lt;li&gt;[[#perplexity][Perplexity]]&lt;/li&gt; 
     &lt;li&gt;[[#anthropic-claude][Anthropic (Claude)]]&lt;/li&gt; 
     &lt;li&gt;[[#groq][Groq]]&lt;/li&gt; 
     &lt;li&gt;[[#openrouter][OpenRouter]]&lt;/li&gt; 
     &lt;li&gt;[[#privategpt][PrivateGPT]]&lt;/li&gt; 
     &lt;li&gt;[[#deepseek][DeepSeek]]&lt;/li&gt; 
     &lt;li&gt;[[#cerebras][Cerebras]]&lt;/li&gt; 
     &lt;li&gt;[[#github-models][Github Models]]&lt;/li&gt; 
     &lt;li&gt;[[#novita-ai][Novita AI]]&lt;/li&gt; 
     &lt;li&gt;[[#xai][xAI]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#usage][Usage]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#in-any-buffer][In any buffer:]]&lt;/li&gt; 
   &lt;li&gt;[[#in-a-dedicated-chat-buffer][In a dedicated chat buffer:]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#including-media-images-documents-with-requests][Including media (images, documents) with requests]]&lt;/li&gt; 
     &lt;li&gt;[[#save-and-restore-your-chat-sessions][Save and restore your chat sessions]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#setting-options-backend-model-request-parameters-system-prompts-and-more][Setting options (backend, model, request parameters, system prompts and more)]]&lt;/li&gt; 
   &lt;li&gt;[[#include-more-context-with-requests][Include more context with requests]]&lt;/li&gt; 
   &lt;li&gt;[[#handle-reasoning-content][Handle &quot;reasoning&quot; content]]&lt;/li&gt; 
   &lt;li&gt;[[#tool-use-experimental][Tool use (experimental)]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#defining-gptel-tools][Defining gptel tools]]&lt;/li&gt; 
     &lt;li&gt;[[#selecting-tools][Selecting tools]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#rewrite-refactor-or-fill-in-a-region][Rewrite, refactor or fill in a region]]&lt;/li&gt; 
   &lt;li&gt;[[#extra-org-mode-conveniences][Extra Org mode conveniences]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#faq][FAQ]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chat-buffer-ui][Chat buffer UI]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-the-window-to-scroll-automatically-as-the-response-is-inserted][I want the window to scroll automatically as the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-the-cursor-to-move-to-the-next-prompt-after-the-response-is-inserted][I want the cursor to move to the next prompt after the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-to-change-the-formatting-of-the-prompt-and-llm-response][I want to change the formatting of the prompt and LLM response]]&lt;/li&gt; 
     &lt;li&gt;[[#how-does-gptel-distinguish-between-user-prompts-and-llm-responses][How does gptel distinguish between user prompts and LLM responses?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#transient-menu-behavior][Transient menu behavior]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-the-transient-menu-options-to-be-saved-so-i-only-need-to-set-them-once][I want the transient menu options to be saved so I only need to set them once]]&lt;/li&gt; 
     &lt;li&gt;[[#using-the-transient-menu-leaves-behind-extra-windows][Using the transient menu leaves behind extra windows]]&lt;/li&gt; 
     &lt;li&gt;[[#can-i-change-the-transient-menu-key-bindings][Can I change the transient menu key bindings?]]&lt;/li&gt; 
     &lt;li&gt;[[#doom-emacs-sending-a-query-from-the-gptel-menu-fails-because-of-a-key-conflict-with-org-mode][(Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#miscellaneous][Miscellaneous]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-to-use-gptel-in-a-way-thats-not-supported-by-gptel-send-or-the-options-menu][I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu]]&lt;/li&gt; 
     &lt;li&gt;[[#chatgpt-i-get-the-error-http2-429-you-exceeded-your-current-quota][(ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot;]]&lt;/li&gt; 
     &lt;li&gt;[[#why-another-llm-client][Why another LLM client?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#additional-configuration][Additional Configuration]]&lt;/li&gt; 
 &lt;li&gt;[[#alternatives][Alternatives]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#packages-using-gptel][Packages using gptel]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Breaking changes!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=gptel-model= is now expected to be a symbol, not a string. Please update your configuration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Installation&lt;/p&gt; 
&lt;p&gt;gptel can be installed in Emacs out of the box with =M-x package-install= ⏎ =gptel=. This installs the latest commit.&lt;/p&gt; 
&lt;p&gt;If you want the stable version instead, add NonGNU-devel ELPA or MELPA-stable to your list of package sources (=package-archives=), then install gptel with =M-x package-install⏎= =gptel= from these sources.&lt;/p&gt; 
&lt;p&gt;(Optional: Install =markdown-mode=.)&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Straight #+html: &lt;/summary&gt; #+begin_src emacs-lisp (straight-use-package &#39;gptel) #+end_src #+html: 
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Manual #+html: &lt;/summary&gt; Clone or download this repository and run =M-x package-install-file⏎= on the repository directory. #+html: 
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Doom Emacs #+html: &lt;/summary&gt; In =packages.el= #+begin_src emacs-lisp (package! gptel) #+end_src
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;In =config.el= #+begin_src emacs-lisp (use-package! gptel :config (setq! gptel-api-key &quot;your key&quot;)) #+end_src &quot;your key&quot; can be the API key itself, or (safer) a function that returns the key. Setting =gptel-api-key= is optional, you will be asked for a key if it&#39;s not found.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Spacemacs #+html: &lt;/summary&gt; In your =.spacemacs= file, add =llm-client= to =dotspacemacs-configuration-layers=. #+begin_src emacs-lisp (llm-client :variables llm-client-enable-gptel t) #+end_src #+html: 
&lt;/details&gt; ** Setup *** ChatGPT Procure an [[https://platform.openai.com/account/api-keys][OpenAI API key]].
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Optional: Set =gptel-api-key= to the key. Alternatively, you may choose a more secure method such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Storing in =~/.authinfo=. By default, &quot;api.openai.com&quot; is used as HOST and &quot;apikey&quot; as USER. #+begin_src authinfo machine api.openai.com login apikey password TOKEN #+end_src&lt;/li&gt; 
 &lt;li&gt;Setting it to a function that returns the key.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Other LLM backends #+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Azure #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-azure &quot;Azure-1&quot; ;Name, whatever you&#39;d like :protocol &quot;https&quot; ;Optional -- https is the default :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; ;or equivalent :stream t ;Enable streaming responses :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4)) #+end_src Refer to the documentation of =gptel-make-azure= to set more parameters.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel. (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-3.5-turbo gptel-backend (gptel-make-azure &quot;Azure-1&quot; :protocol &quot;https&quot; :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; :stream t :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4))) #+end_src #+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** GPT4All #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-gpt4all &quot;GPT4All&quot; ;Name of your choosing :protocol &quot;http&quot; :host &quot;localhost:4891&quot; ;Where it&#39;s running :models &#39;(mistral-7b-openorca.Q4_0.gguf)) ;Available models #+end_src These are the required parameters, refer to the documentation of =gptel-make-gpt4all= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. Additionally you may want to increase the response token size since GPT4All uses very short (often truncated) responses by default. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-max-tokens 500 gptel-model &#39;mistral-7b-openorca.Q4_0.gguf gptel-backend (gptel-make-gpt4all &quot;GPT4All&quot; :protocol &quot;http&quot; :host &quot;localhost:4891&quot; :models &#39;(mistral-7b-openorca.Q4_0.gguf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Ollama #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-ollama &quot;Ollama&quot; ;Any name of your choosing :host &quot;localhost:11434&quot; ;Where it&#39;s running :stream t ;Stream responses :models &#39;(mistral:latest)) ;List of models #+end_src These are the required parameters, refer to the documentation of =gptel-make-ollama= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistral:latest gptel-backend (gptel-make-ollama &quot;Ollama&quot; :host &quot;localhost:11434&quot; :stream t :models &#39;(mistral:latest))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Gemini #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; :key can be a function that returns the API key. (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t) #+end_src These are the required parameters, refer to the documentation of =gptel-make-gemini= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gemini-pro gptel-backend (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
  #+html: 
 &lt;summary&gt; **** Llama.cpp or Llamafile #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;(If using a llamafile, run a [[https://github.com/Mozilla-Ocho/llamafile#other-example-llamafiles][server llamafile]] instead of a &quot;command-line llamafile&quot;, and a model that supports text generation.)&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Llama.cpp offers an OpenAI compatible API (gptel-make-openai &quot;llama-cpp&quot; ;Any name :stream t ;Stream responses :protocol &quot;http&quot; :host &quot;localhost:8000&quot; ;Llama.cpp server location :models &#39;(test)) ;Any names, doesn&#39;t matter for Llama #+end_src These are the required parameters, refer to the documentation of =gptel-make-openai= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;test gptel-backend (gptel-make-openai &quot;llama-cpp&quot; :stream t :protocol &quot;http&quot; :host &quot;localhost:8000&quot; :models &#39;(test))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Kagi (FastGPT &amp;amp; Summarizer) #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Kagi&#39;s FastGPT model and the Universal Summarizer are both supported. A couple of notes:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Universal Summarizer: If there is a URL at point, the summarizer will summarize the contents of the URL. Otherwise the context sent to the model is the same as always: the buffer text upto point, or the contents of the region if the region is active.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Kagi models do not support multi-turn conversations, interactions are &quot;one-shot&quot;. They also do not support streaming responses.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-kagi &quot;Kagi&quot; ;any name :key &quot;YOUR_KAGI_API_KEY&quot;) ;can be a function that returns the key #+end_src These are the required parameters, refer to the documentation of =gptel-make-kagi= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend and the model (fastgpt/summarizer) from the transient menu when using gptel.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;fastgpt gptel-backend (gptel-make-kagi &quot;Kagi&quot; :key &quot;YOUR_KAGI_API_KEY&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;The alternatives to =fastgpt= include =summarize:cecil=, =summarize:agnes=, =summarize:daphne= and =summarize:muriel=. The difference between the summarizer engines is [[https://help.kagi.com/kagi/api/summarizer.html#summarization-engines][documented here]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** together.ai #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Together.ai offers an OpenAI compatible API (gptel-make-openai &quot;TogetherAI&quot; ;Any name you want :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;TogetherAI&quot;&lt;br&gt; :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot;&lt;br&gt; :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anyscale #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Anyscale offers an OpenAI compatible API (gptel-make-openai &quot;Anyscale&quot; ;Any name you want :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;Anyscale&quot; :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Perplexity #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-perplexity &quot;Perplexity&quot; ;Any name you want :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t) ;If you want responses to be streamed #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;sonar gptel-backend (gptel-make-perplexity &quot;Perplexity&quot; :key &quot;your-api-key&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anthropic (Claude) #+html: &lt;/summary&gt; Register a backend with #+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude&quot; ;Any name you want :stream t ;Streaming responses :key &quot;your-api-key&quot;) #+end_src The =:key= can be a function that returns the key (more secure).
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-3-sonnet-20240229 ; &quot;claude-3-opus-20240229&quot; also available gptel-backend (gptel-make-anthropic &quot;Claude&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Interim support for Claude 3.7 Sonnet&lt;/p&gt; 
 &lt;p&gt;gptel does not yet support specifying LLM &quot;reasoning&quot;/&quot;thinking&quot; behaviors dynamically through its interface. This effort is ongoing, but in the meantime you use the Claude 3.7 Sonnet model in its &quot;thinking&quot; mode by defining a second Claude backend and selecting it in via the UI or elisp:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude-thinking&quot; ;Any name you want :key &quot;your-API-key&quot; :stream t :models &#39;(claude-3-7-sonnet-20250219) :header (lambda () (when-let* ((key (gptel--get-api-key))) `((&quot;x-api-key&quot; . ,key) (&quot;anthropic-version&quot; . &quot;2023-06-01&quot;) (&quot;anthropic-beta&quot; . &quot;pdfs-2024-09-25&quot;) (&quot;anthropic-beta&quot; . &quot;output-128k-2025-02-19&quot;) (&quot;anthropic-beta&quot; . &quot;prompt-caching-2024-07-31&quot;)))) :request-params &#39;(:thinking (:type &quot;enabled&quot; :budget_tokens 2048) :max_tokens 4096)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can set the reasoning budget tokens and max tokens for this usage via the =:budget_tokens= and =:max_tokens= keys here, respectively.&lt;/p&gt; 
 &lt;p&gt;Once proper support for specifying reasoning behaviors is added to gptel&#39;s UI this will be unnecessary.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Groq #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Groq offers an OpenAI compatible API (gptel-make-openai &quot;Groq&quot; ;Any name you want :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]). Note that Groq is fast enough that you could easily set =:stream nil= and still get near-instant responses.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;Groq&quot; :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** OpenRouter #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; OpenRouter offers an OpenAI compatible API (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** PrivateGPT #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;private-gpt gptel-backend (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** DeepSeek #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-deepseek &quot;DeepSeek&quot; ;Any name you want :stream t ;for streaming responses :key &quot;your-api-key&quot;) ;can be a function that returns the key #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;deepseek-reasoner gptel-backend (gptel-make-deepseek &quot;DeepSeek&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Cerebras #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Cerebras offers an instant OpenAI compatible API (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t ;optionally nil as Cerebras is instant AI :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama3.1-70b llama3.1-8b)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;llama3.1-8b gptel-backend (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream nil :key &quot;your-api-key&quot; :models &#39;(llama3.1-70b llama3.1-8b))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Github Models #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Github Models offers an OpenAI compatible API (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You will need to create a github [[https://github.com/settings/personal-access-tokens][token]].&lt;/p&gt; 
 &lt;p&gt;For all the available models, check the [[https://github.com/marketplace/models][marketplace]].&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-4o gptel-backend (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Novita AI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Novita AI offers an OpenAI compatible API (gptel-make-openai &quot;NovitaAI&quot; ;Any name you want :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; gryphe/mythomax-l2-13b meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gryphe/mythomax-l2-13b gptel-backend (gptel-make-openai &quot;NovitaAI&quot;&lt;br&gt; :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot;&lt;br&gt; :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; mistralai/Mixtral-8x7B-Instruct-v0.1 meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** xAI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; xAI offers an OpenAI compatible API (gptel-make-openai &quot;xAI&quot; ;Any name you want :host &quot;api.x.ai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :endpoint &quot;/v1/chat/completions&quot; :stream t :models &#39;(;; xAI now only offers &lt;code&gt;grok-beta&lt;/code&gt; as of the time of this writing grok-beta)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;grok-beta gptel-backend (gptel-make-openai &quot;xAI&quot; ;Any name you want :host &quot;api.x.ai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :endpoint &quot;/v1/chat/completions&quot; :stream t :models &#39;(;; xAI now only offers &lt;code&gt;grok-beta&lt;/code&gt; as of the time of this writing grok-beta))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;** Usage&lt;/p&gt; 
&lt;p&gt;gptel provides a few powerful, general purpose and flexible commands. You can dynamically tweak their behavior to the needs of your task with /directives/, redirection options and more. There is a [[https://www.youtube.com/watch?v=bsRnh_brggM][video demo]] showing various uses of gptel -- but =gptel-send= might be all you need.&lt;/p&gt; 
&lt;p&gt;|-------------------+---------------------------------------------------------------------------------------------------| | &lt;em&gt;To send queries&lt;/em&gt; | Description | |-------------------+---------------------------------------------------------------------------------------------------| | =gptel-send= | Send all text up to =(point)=, or the selection if region is active. Works anywhere in Emacs. | | =gptel= | Create a new dedicated chat buffer. Not required to use gptel. | | =gptel-rewrite= | Rewrite, refactor or change the selected region. Can diff/ediff changes before merging/applying. | |-------------------+---------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|---------------------+---------------------------------------------------------------| | &lt;em&gt;To tweak behavior&lt;/em&gt; | | |---------------------+---------------------------------------------------------------| | =C-u= =gptel-send= | Transient menu for preferences, input/output redirection etc. | | =gptel-menu= | /(Same)/ | |---------------------+---------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------+--------------------------------------------------------------------------------------------------------| | &lt;em&gt;To add context&lt;/em&gt; | | |------------------+--------------------------------------------------------------------------------------------------------| | =gptel-add= | Add/remove a region or buffer to gptel&#39;s context. In Dired, add/remove marked files. | | =gptel-add-file= | Add a file (text or supported media type) to gptel&#39;s context. Also available from the transient menu. | |------------------+--------------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|----------------------------+-----------------------------------------------------------------------------------------| | &lt;em&gt;Org mode bonuses&lt;/em&gt; | | |----------------------------+-----------------------------------------------------------------------------------------| | =gptel-org-set-topic= | Limit conversation context to an Org heading. (For branching conversations see below.) | | =gptel-org-set-properties= | Write gptel configuration as Org properties, for per-heading chat configuration. | |----------------------------+-----------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;*** In any buffer:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= to send the text up to the cursor. The response will be inserted below. Continue the conversation by typing below the response.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a region is selected, the conversation will be limited to its contents.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= with a prefix argument (&lt;del&gt;C-u&lt;/del&gt;)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;to set chat parameters (model, backend, system message etc) for this buffer,&lt;/li&gt; 
   &lt;li&gt;include quick instructions for the next request only,&lt;/li&gt; 
   &lt;li&gt;to add additional context -- regions, buffers or files -- to gptel,&lt;/li&gt; 
   &lt;li&gt;to read the prompt from or redirect the response elsewhere,&lt;/li&gt; 
   &lt;li&gt;or to replace the prompt with the response.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/3562a6e2-7a5c-4f7e-8e57-bf3c11589c73&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;*** In a dedicated chat buffer:&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: gptel works anywhere in Emacs. The dedicated chat buffer only adds some conveniences.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Run =M-x gptel= to start or switch to the chat buffer. It will ask you for the key if you skipped the previous step. Run it with a prefix-arg (=C-u M-x gptel=) to start a new session.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the gptel buffer, send your prompt with =M-x gptel-send=, bound to =C-c RET=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set chat parameters (LLM provider, model, directives etc) for the session by calling =gptel-send= with a prefix argument (=C-u C-c RET=):&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/eb4867e5-30ac-455f-999f-e17123afb810&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;That&#39;s it. You can go back and edit previous prompts and responses if you want.&lt;/p&gt; 
&lt;p&gt;The default mode is =markdown-mode= if available, else =text-mode=. You can set =gptel-default-mode= to =org-mode= if desired.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Including media (images, documents) with requests #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel supports sending media in Markdown and Org chat buffers, but this feature is disabled by default.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can enable it globally, for all models that support it, by setting =gptel-track-media=.&lt;/li&gt; 
  &lt;li&gt;Or you can set it locally, just for the chat buffer, via the header line:&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/91f6aaab-2ea4-4806-9cc9-39b4b46a8e6c&quot; align=&quot;center&quot; alt=&quot;Image showing a gptel chat buffer&#39;s header line with the button to toggle media support&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p&gt;There are two ways to include media with requests:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Adding media files to the context with =gptel-add-file=, described further below.&lt;/li&gt; 
  &lt;li&gt;Including links to media in chat buffers, described here:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;To send media -- images or other supported file types -- with requests in chat buffers, you can include links to them in the chat buffer. Such a link must be &quot;standalone&quot;, i.e. on a line by itself surrounded by whitespace.&lt;/p&gt; 
 &lt;p&gt;In Org mode, for example, the following are all &lt;em&gt;valid&lt;/em&gt; ways of including an image with the request:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file link: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file link with description: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png][some picture]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot;, angle file link: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;a href=&quot;file:/path/to/screenshot.png&quot;&gt;file:/path/to/screenshot.png&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;p&gt;The following links are &lt;em&gt;not valid&lt;/em&gt;, and the text of the link will be sent instead of the file contents:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Inline link: #+begin_src Describe this [[file:/path/to/screenshot.png][picture]].&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Link not &quot;standalone&quot;: #+begin_src Describe this picture: [[file:/path/to/screenshot.png]] Focus specifically on the text content. #+end_src&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Not a valid Org link: #+begin_src Describe the picture&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;file:/path/to/screenshot.png #+end_src&lt;/p&gt; 
 &lt;p&gt;Similar criteria apply to Markdown chat buffers.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Save and restore your chat sessions #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Saving the file will save the state of the conversation as well. To resume the chat, open the file and turn on =gptel-mode= before editing the buffer.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Setting options (backend, model, request parameters, system prompts and more)
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Most gptel options can be set from gptel&#39;s transient menu, available by calling =gptel-send= with a prefix-argument, or via =gptel-menu=. To change their default values in your configuration, see [[#additional-configuration][Additional Configuration]]. Chat buffer-specific options are also available via the header-line in chat buffers.&lt;/p&gt; 
&lt;h1&gt;TODO Remove this when writing the manual.&lt;/h1&gt; 
&lt;p&gt;Selecting a model and backend can be done interactively via the =-m= command of =gptel-menu=. Available registered models are prefixed by the name of their backend with a string like =ChatGPT:gpt-4o-mini=, where =ChatGPT= is the backend name you used to register it and =gpt-4o-mini= is the name of the model.&lt;/p&gt; 
&lt;p&gt;*** Include more context with requests&lt;/p&gt; 
&lt;p&gt;By default, gptel will query the LLM with the active region or the buffer contents up to the cursor. Often it can be helpful to provide the LLM with additional context from outside the current buffer. For example, when you&#39;re in a chat buffer but want to ask questions about a (possibly changing) code buffer and auxiliary project files.&lt;/p&gt; 
&lt;p&gt;You can include additional text regions, buffers or files with gptel&#39;s queries. This additional context is &quot;live&quot; and not a snapshot. Once added, the regions, buffers or files are scanned and included at the time of each query. When using multi-modal models, added files can be of any supported type -- typically images.&lt;/p&gt; 
&lt;p&gt;You can add a selected region, buffer or file to gptel&#39;s context from the menu, or call =gptel-add=. To add a file use =gptel-add= in Dired, or use the dedicated =gptel-add-file= command. Directories will have their files added recursively after prompting for confirmation.&lt;/p&gt; 
&lt;p&gt;You can examine the active context from the menu: #+html: &amp;lt;img src=&quot;&lt;a href=&quot;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&quot;&gt;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&lt;/a&gt;&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with the &quot;inspect context&quot; command.&quot;&amp;gt;&lt;/p&gt; 
&lt;p&gt;And then browse through or remove context from the context buffer: #+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/79a5ffe8-3d63-4bf7-9bf6-0457ab61bf2a&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s context buffer.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;*** Handle &quot;reasoning&quot; content&lt;/p&gt; 
&lt;p&gt;Some LLMs include in their response a &quot;thinking&quot; or &quot;reasoning&quot; block. This text improves the quality of the LLM’s final output, but may not be interesting to you by itself. You can decide how you would like this &quot;reasoning&quot; content to be handled by gptel by setting the user option =gptel-include-reasoning=. You can include it in the LLM response (the default), omit it entirely, include it in the buffer but ignore it on subsequent conversation turns, or redirect it to another buffer. As with most options, you can specify this behvaior from gptel&#39;s transient menu globally, buffer-locally or for the next request only.&lt;/p&gt; 
&lt;p&gt;When included with the response, reasoning content will be delimited by Org blocks or markdown backticks.&lt;/p&gt; 
&lt;p&gt;*** Tool use (experimental)&lt;/p&gt; 
&lt;p&gt;gptel can provide the LLM with client-side elisp &quot;tools&quot;, or function specifications, along with the request. If the LLM decides to run the tool, it supplies the tool call arguments, which gptel uses to run the tool in your Emacs session. The result is optionally returned to the LLM to complete the task.&lt;/p&gt; 
&lt;p&gt;This exchange can be used to equip the LLM with capabilities or knowledge beyond what is available out of the box -- for instance, you can get the LLM to control your Emacs frame, create or modify files and directories, or look up information relevant to your request via web search or in a local database. Here is a very simple example:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&quot;&gt;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;This feature is currently experimental.&lt;/p&gt; 
&lt;p&gt;To use tools in gptel, you need&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a model that supports this usage. All the flagship models support tool use, as do many of the smaller open models.&lt;/li&gt; 
 &lt;li&gt;Tool specifications that gptel understands. gptel does not currently include any tools out of the box.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Defining gptel tools #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Defining a gptel tool requires an elisp function and associated metadata. Here are two simple tool definitions:&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To read the contents of an Emacs buffer&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;read_buffer&quot; ; javascript-style snake_case name :function (lambda (buffer) ; the function that will run (unless (buffer-live-p (get-buffer buffer)) (error &quot;error: buffer %s is not live.&quot; buffer)) (with-current-buffer buffer (buffer-substring-no-properties (point-min) (point-max)))) :description &quot;return the contents of an emacs buffer&quot; :args (list &#39;(:name &quot;buffer&quot; :type string ; :type value must be a symbol :description &quot;the name of the buffer whose contents are to be retrieved&quot;)) :category &quot;emacs&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;Besides the function itself, which can be named or anonymous (as above), the tool specification requires a =:name=, =:description= and a list of argument specifications in =:args=. Each argument specification is a plist with atleast the keys =:name=, =:type= and =:description=.&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To create a text file&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;create_file&quot; ; javascript-style snake_case name :function (lambda (path filename content) ; the function that runs (let ((full-path (expand-file-name filename path))) (with-temp-buffer (insert content) (write-file full-path)) (format &quot;Created file %s in %s&quot; filename path))) :description &quot;Create a new file with the specified content&quot; :args (list &#39;(:name &quot;path&quot; ; a list of argument specifications :type string :description &quot;The directory where to create the file&quot;) &#39;(:name &quot;filename&quot; :type string :description &quot;The name of the file to create&quot;) &#39;(:name &quot;content&quot; :type string :description &quot;The content to write to the file&quot;)) :category &quot;filesystem&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;With some prompting, you can get an LLM to write these tools for you.&lt;/p&gt; 
 &lt;p&gt;Tools can also be asynchronous, use optional arguments and arguments with more structure (enums, arrays, objects etc). See =gptel-make-tool= for details.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; **** Selecting tools
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Once defined, tools can be selected (globally, buffer-locally or for the next request only) from gptel&#39;s transient menu:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/fd878596-b313-4385-b675-3d6546909d8b&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s tool selection menu.&quot;&gt;&lt;/p&gt; 
&lt;p&gt;From here you can also require confirmation for all tool calls, and decide if tool call results should be included in the LLM response. See [[#additional-configuration][Additional Configuration]] for doing these things via elisp.&lt;/p&gt; 
&lt;p&gt;*** Rewrite, refactor or fill in a region&lt;/p&gt; 
&lt;p&gt;In any buffer: with a region selected, you can modify text, rewrite prose or refactor code with =gptel-rewrite=. Example with prose:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&quot;&gt;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;The result is previewed over the original text. By default, the buffer is not modified.&lt;/p&gt; 
&lt;p&gt;Pressing =RET= or clicking in the rewritten region should give you a list of options: you can &lt;em&gt;iterate&lt;/em&gt; on, &lt;em&gt;diff&lt;/em&gt;, &lt;em&gt;ediff&lt;/em&gt;, &lt;em&gt;merge&lt;/em&gt; or &lt;em&gt;accept&lt;/em&gt; the replacement. Example with code:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&quot;&gt;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Acting on the LLM response&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;If you would like one of these things to happen automatically, you can customize =gptel-rewrite-default-action=.&lt;/p&gt; 
&lt;p&gt;These options are also available from =gptel-rewrite=:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/589785b9-aa3f-414a-98dd-d26b7509de08&quot; align=&quot;center&quot;&gt;&lt;/p&gt; 
&lt;p&gt;And you can call them directly when the cursor is in the rewritten region:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/f5b3ca47-e146-45fe-8584-f11035fa4dbc&quot; align=&quot;center&quot;&gt;&lt;/p&gt; 
&lt;p&gt;*** Extra Org mode conveniences&lt;/p&gt; 
&lt;p&gt;gptel offers a few extra conveniences in Org mode.&lt;/p&gt; 
&lt;p&gt;***** Limit conversation context to an Org heading&lt;/p&gt; 
&lt;p&gt;You can limit the conversation context to an Org heading with the command =gptel-org-set-topic=.&lt;/p&gt; 
&lt;p&gt;(This sets an Org property (=GPTEL_TOPIC=) under the heading. You can also add this property manually instead.)&lt;/p&gt; 
&lt;p&gt;***** Use branching context in Org mode (tree of conversations)&lt;/p&gt; 
&lt;p&gt;You can have branching conversations in Org mode, where each hierarchical outline path through the document is a separate conversation branch. This is also useful for limiting the context size of each query. See the variable =gptel-org-branching-context=.&lt;/p&gt; 
&lt;p&gt;If this variable is non-nil, you should probably edit =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist= so that the prefix strings for org-mode are not Org headings, e.g.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setf (alist-get &#39;org-mode gptel-prompt-prefix-alist) &quot;@user\n&quot;) (setf (alist-get &#39;org-mode gptel-response-prefix-alist) &quot;@assistant\n&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;Otherwise, the default prompt prefix will make successive prompts sibling headings, and therefore on different conversation branches, which probably isn&#39;t what you want.&lt;/p&gt; 
&lt;p&gt;Note: using this option requires Org 9.7 or higher to be available. The [[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]] package uses gptel to provide this branching conversation behavior for older versions of Org.&lt;/p&gt; 
&lt;p&gt;***** Save gptel parameters to Org headings (reproducible chats)&lt;/p&gt; 
&lt;p&gt;You can declare the gptel model, backend, temperature, system message and other parameters as Org properties with the command =gptel-org-set-properties=. gptel queries under the corresponding heading will always use these settings, allowing you to create mostly reproducible LLM chat notebooks, and to have simultaneous chats with different models, model settings and directives under different Org headings.&lt;/p&gt; 
&lt;p&gt;** FAQ *** Chat buffer UI #+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** I want the window to scroll automatically as the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to enable auto-scrolling.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-stream-hook &#39;gptel-auto-scroll) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the cursor to move to the next prompt after the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to move the cursor:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-response-functions &#39;gptel-end-of-response) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can also call =gptel-end-of-response= as a command at any time.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to change the formatting of the prompt and LLM response #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;For dedicated chat buffers: customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. You can set a different pair for each major-mode.&lt;/p&gt; 
 &lt;p&gt;Anywhere in Emacs: Use =gptel-pre-response-hook= and =gptel-post-response-functions=, which see.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** How does gptel distinguish between user prompts and LLM responses? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel uses [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html][text-properties]] to watermark LLM responses. Thus this text is interpreted as a response even if you copy it into another buffer. In regular buffers (buffers without =gptel-mode= enabled), you can turn off this tracking by unsetting =gptel-track-response=.&lt;/p&gt; 
 &lt;p&gt;When restoring a chat state from a file on disk, gptel will apply these properties from saved metadata in the file when you turn on =gptel-mode=.&lt;/p&gt; 
 &lt;p&gt;gptel does /not/ use any prefix or semantic/syntax element in the buffer (such as headings) to separate prompts and responses. The reason for this is that gptel aims to integrate as seamlessly as possible into your regular Emacs usage: LLM interaction is not the objective, it&#39;s just another tool at your disposal. So requiring a bunch of &quot;user&quot; and &quot;assistant&quot; tags in the buffer is noisy and restrictive. If you want these demarcations, you can customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. Note that these prefixes are for your readability only and purely cosmetic.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Transient menu behavior #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the transient menu options to be saved so I only need to set them once #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Any model options you set are saved for the current buffer. But the redirection options in the menu are set for the next query only:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;You can make them persistent across this Emacs session by pressing &lt;del&gt;C-x C-s&lt;/del&gt;:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;(You can also cycle through presets you&#39;ve saved with &lt;del&gt;C-x p&lt;/del&gt; and &lt;del&gt;C-x n&lt;/del&gt;.)&lt;/p&gt; 
 &lt;p&gt;Now these will be enabled whenever you send a query from the transient menu. If you want to use these saved options without invoking the transient menu, you can use a keyboard macro:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Replace with your key to invoke the transient menu: (keymap-global-set &quot;
  &lt;f6&gt;
   &quot; &quot;C-u C-c 
   &lt;return&gt; 
    &lt;return&gt;
     &quot;) #+end_src
    &lt;/return&gt;
   &lt;/return&gt;
  &lt;/f6&gt;&lt;/p&gt; 
 &lt;p&gt;Or see this [[https://github.com/karthink/gptel/wiki/Commonly-requested-features#save-transient-flags][wiki entry]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Using the transient menu leaves behind extra windows #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;If using gptel&#39;s transient menus causes new/extra window splits to be created, check your value of =transient-display-buffer-action=. [[https://github.com/magit/transient/discussions/358][See this discussion]] for more context.&lt;/p&gt; 
 &lt;p&gt;If you are using Helm, see [[https://github.com/magit/transient/discussions/361][Transient#361]].&lt;/p&gt; 
 &lt;p&gt;In general, do not customize this Transient option unless you know what you&#39;re doing!&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Can I change the transient menu key bindings? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Yes, see =transient-suffix-put=. This changes the key to select a backend/model from &quot;-m&quot; to &quot;M&quot; in gptel&#39;s menu: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;-m&quot;) :key &quot;M&quot;) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Doom binds &lt;del&gt;RET&lt;/del&gt; in Org mode to =+org/dwim-at-point=, which appears to conflict with gptel&#39;s transient menu bindings for some reason.&lt;/p&gt; 
 &lt;p&gt;Two solutions:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Press &lt;del&gt;C-m&lt;/del&gt; instead of the return key.&lt;/li&gt; 
  &lt;li&gt;Change the send key from return to a key of your choice: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;RET&quot;) :key &quot;
   &lt;f8&gt;
    &quot;) #+end_src
   &lt;/f8&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Miscellaneous #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel&#39;s default usage pattern is simple, and will stay this way: Read input in any buffer and insert the response below it. Some custom behavior is possible with the transient menu (=C-u M-x gptel-send=).&lt;/p&gt; 
 &lt;p&gt;For more programmable usage, gptel provides a general =gptel-request= function that accepts a custom prompt and a callback to act on the response. You can use this to build custom workflows not supported by =gptel-send=. See the documentation of =gptel-request=, and the [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][wiki]] for examples.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot; #+html:&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+begin_quote (HTTP/2 429) You exceeded your current quota, please check your plan and billing details. #+end_quote&lt;/p&gt; 
 &lt;p&gt;Using the ChatGPT (or any OpenAI) API requires [[https://platform.openai.com/account/billing/overview][adding credit to your account]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Why another LLM client? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Other Emacs clients for LLMs prescribe the format of the interaction (a comint shell, org-babel blocks, etc). I wanted:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Something that is as free-form as possible: query the model using any text in any buffer, and redirect the response as required. Using a dedicated =gptel= buffer just adds some visual flair to the interaction.&lt;/li&gt; 
  &lt;li&gt;Integration with org-mode, not using a walled-off org-babel block, but as regular text. This way the model can generate code blocks that I can run.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;** Additional Configuration :PROPERTIES: :ID: f885adac-58a3-4eba-a6b7-91e9e7a17829 :END: #+html: &lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :exports none :results list (let ((all)) (mapatoms (lambda (sym) (when (and (string-match-p &quot;^gptel-[^-]&quot; (symbol-name sym)) (get sym &#39;variable-documentation)) (push sym all)))) all) #+end_src&lt;/p&gt; 
&lt;p&gt;|----------------------+--------------------------------------------------------------------| | &lt;em&gt;Connection options&lt;/em&gt; | | |----------------------+--------------------------------------------------------------------| | =gptel-use-curl= | Use Curl (default), fallback to Emacs&#39; built-in =url=. | | =gptel-proxy= | Proxy server for requests, passed to curl via =--proxy=. | | =gptel-api-key= | Variable/function that returns the API key for the active backend. | |----------------------+--------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-----------------------+---------------------------------------------------------| | &lt;em&gt;LLM request options&lt;/em&gt; | /(Note: not supported uniformly across LLMs)/ | |-----------------------+---------------------------------------------------------| | =gptel-backend= | Default LLM Backend. | | =gptel-model= | Default model to use, depends on the backend. | | =gptel-stream= | Enable streaming responses, if the backend supports it. | | =gptel-directives= | Alist of system directives, can switch on the fly. | | =gptel-max-tokens= | Maximum token count (in query + response). | | =gptel-temperature= | Randomness in response text, 0 to 2. | | =gptel-cache= | Cache prompts, system message or tools (Anthropic only) | | =gptel-use-context= | How/whether to include additional context | | =gptel-use-tools= | Disable, allow or force LLM tool-use | | =gptel-tools= | List of tools to include with requests | |-----------------------+---------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+----------------------------------------------------------------| | &lt;em&gt;Chat UI options&lt;/em&gt; | | |-------------------------------+----------------------------------------------------------------| | =gptel-default-mode= | Major mode for dedicated chat buffers. | | =gptel-prompt-prefix-alist= | Text inserted before queries. | | =gptel-response-prefix-alist= | Text inserted before responses. | | =gptel-track-response= | Distinguish between user messages and LLM responses? | | =gptel-track-media= | Send images or other media from links? | | =gptel-confirm-tool-calls= | Confirm all tool calls? | | =gptel-include-tool-results= | Include tool results in the LLM response? | | =gptel-use-header-line= | Display status messages in header-line (default) or minibuffer | | =gptel-display-buffer-action= | Placement of the gptel chat buffer. | |-------------------------------+----------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+-------------------------------------------------------| | &lt;em&gt;Org mode UI options&lt;/em&gt; | | |-------------------------------+-------------------------------------------------------| | =gptel-org-branching-context= | Make each outline path a separate conversation branch | | =gptel-org-ignore-elements= | Ignore parts of the buffer when sending a query | |-------------------------------+-------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|---------------------------------+-------------------------------------------------------------| | &lt;em&gt;Hooks for customization&lt;/em&gt; | | |---------------------------------+-------------------------------------------------------------| | =gptel-save-state-hook= | Runs before saving the chat state to a file on disk | | =gptel-prompt-filter-hook= | Runs in a temp buffer to transform text before sending | | =gptel-post-request-hook= | Runs immediately after dispatching a =gptel-request=. | | =gptel-pre-response-hook= | Runs before inserting the LLM response into the buffer | | =gptel-post-response-functions= | Runs after inserting the full LLM response into the buffer | | =gptel-post-stream-hook= | Runs after each streaming insertion | | =gptel-context-wrap-function= | To include additional context formatted your way | | =gptel-rewrite-default-action= | Automatically diff, ediff, merge or replace refactored text | | =gptel-post-rewrite-functions= | Runs after a =gptel-rewrite= request succeeds | |---------------------------------+-------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt; 
&lt;p&gt;** COMMENT Will you add feature X?&lt;/p&gt; 
&lt;p&gt;Maybe, I&#39;d like to experiment a bit more first. Features added since the inception of this package include&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Curl support (=gptel-use-curl=).&lt;/li&gt; 
 &lt;li&gt;Streaming responses (=gptel-stream=).&lt;/li&gt; 
 &lt;li&gt;Cancelling requests in progress (=gptel-abort=)&lt;/li&gt; 
 &lt;li&gt;General API for writing your own commands (=gptel-request=, [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][wiki]])&lt;/li&gt; 
 &lt;li&gt;Dispatch menus using Transient (=gptel-send= with a prefix arg).&lt;/li&gt; 
 &lt;li&gt;Specifying the conversation context size.&lt;/li&gt; 
 &lt;li&gt;GPT-4 support.&lt;/li&gt; 
 &lt;li&gt;Response redirection (to the echo area, another buffer, etc).&lt;/li&gt; 
 &lt;li&gt;A built-in refactor/rewrite prompt.&lt;/li&gt; 
 &lt;li&gt;Limiting conversation context to Org headings using properties (#58).&lt;/li&gt; 
 &lt;li&gt;Saving and restoring chats (#17).&lt;/li&gt; 
 &lt;li&gt;Support for local LLMs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Features being considered or in the pipeline:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fully stateless design ([[https://github.com/karthink/gptel/discussions/119][discussion #119]]).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Alternatives&lt;/p&gt; 
&lt;p&gt;Other Emacs clients for LLMs include&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/ahyatt/llm][llm]]: llm provides a uniform API across language model providers for building LLM clients in Emacs, and is intended as a library for use by package authors. For similar scripting purposes, gptel provides the command =gptel-request=, which see.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/s-kostyaev/ellama][Ellama]]: A full-fledged LLM client built on llm, that supports many LLM providers (Ollama, Open AI, Vertex, GPT4All and more). Its usage differs from gptel in that it provides separate commands for dozens of common tasks, like general chat, summarizing code/text, refactoring code, improving grammar, translation and so on.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: comint-shell based interaction with ChatGPT. Also supports DALL-E, executable code blocks in the responses, and more.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rksm/org-ai][org-ai]]: Interaction through special =#+begin_ai ... #+end_ai= Org-mode blocks. Also supports DALL-E, querying ChatGPT with the contents of project files, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are several more: [[https://github.com/MichaelBurge/leafy-mode][leafy-mode]], [[https://github.com/iwahbe/chat.el][chat.el]], [[https://github.com/stuhlmueller/gpt.el][gpt.el]], [[https://github.com/AnselmC/le-gpt.el][le-gpt]], [[https://github.com/stevemolitor/robby][robby]].&lt;/p&gt; 
&lt;p&gt;*** Packages using gptel&lt;/p&gt; 
&lt;p&gt;gptel is a general-purpose package for chat and ad-hoc LLM interaction. The following packages use gptel to provide additional or specialized functionality:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/karthink/gptel-quick][gptel-quick]]: Quickly look up the region or text at point.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog/evedel][Evedel]]: Instructed LLM Programmer/Assistant.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/lanceberge/elysium][Elysium]]: Automatically apply AI-generated changes as you code.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/kamushadenes/ai-blog.el][ai-blog.el]]: Streamline generation of blog posts in Hugo.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/douo/magit-gptcommit][magit-gptcommit]]: Generate Commit Messages within magit-status Buffer using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/armindarvish/consult-omni][consult-omni]]: Versatile multi-source search package. It includes gptel as one of its many sources.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]]: Provides branching conversations in Org buffers using gptel. (Note that gptel includes this feature as well (see =gptel-org-branching-context=), but requires a recent version of Org mode 9.7 or later to be installed.)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rob137/Corsair][Corsair]]: Helps gather text to populate LLM prompts for gptel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** COMMENT Older Breaking Changes&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-post-response-hook= has been renamed to =gptel-post-response-functions=, and functions in this hook are now called with two arguments: the start and end buffer positions of the response. This should make it easy to act on the response text without having to locate it first.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Possible breakage, see #120: If streaming responses stop working for you after upgrading to v0.5, try reinstalling gptel and deleting its native comp eln cache in =native-comp-eln-load-path=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The user option =gptel-host= is deprecated. If the defaults don&#39;t work for you, use =gptel-make-openai= (which see) to customize server settings.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-api-key-from-auth-source= now searches for the API key using the host address for the active LLM backend, /i.e./ &quot;api.openai.com&quot; when using ChatGPT. You may need to update your =~/.authinfo=.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Acknowledgments&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/pabl0][Henrik Ahlgren]] for a keen eye to detail and polish applied to gptel&#39;s UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/positron-solutions/][Positron Solutions]] for extensive testing of the tool use feature and the design of gptel&#39;s in-buffer tool use records.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]] for feedback and code assistance with gptel-menu&#39;s redesign&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/meain][Abin Simon]] for extensive feedback on improving gptel&#39;s directives and UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/algal][Alexis Gallagher]] and [[https://github.com/d1egoaz][Diego Alvarez]] for fixing a nasty multi-byte bug with =url-retrieve=.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/tarsius][Jonas Bernoulli]] for the Transient library.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog][daedsidog]] for adding context support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/Aquan1412][Aquan1412]] for adding PrivateGPT support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/r0man][r0man]] for improving gptel&#39;s Curl integration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Local Variables:&lt;/h1&gt; 
&lt;h1&gt;toc-org-max-depth: 4&lt;/h1&gt; 
&lt;h1&gt;eval: (and (fboundp &#39;toc-org-mode) (toc-org-mode 1))&lt;/h1&gt; 
&lt;h1&gt;End:&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>melpa/melpa</title>
      <link>https://github.com/melpa/melpa</link>
      <description>&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/melpa/melpa/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/melpa/melpa/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&quot;https://github.com/dimitri/el-get/&quot;&gt;&lt;code&gt;el-get&lt;/code&gt;&lt;/a&gt;, or even &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; 
&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; 
&lt;p&gt;To browse available packages, check out the &lt;a href=&quot;https://melpa.org/&quot;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&quot;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&quot;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&quot;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, i.e., Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(require &#39;package)
(add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;) t)
;; Comment/uncomment this line to enable MELPA Stable if desired.
;; See `package-archive-priorities` and `package-pinned-packages`.
;; Most users will not need or want to do this.
;; (add-to-list &#39;package-archives
;;              &#39;(&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) t)
(package-initialize)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; 
&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; 
&lt;h3&gt;MELPA Stable&lt;/h3&gt; 
&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&quot;https://stable.melpa.org/&quot;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; 
&lt;p&gt;Some notes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&quot;https://github.com/milkypostman/package-filter/&quot;&gt;&lt;code&gt;package-filter&lt;/code&gt;&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &quot;updated&quot; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&quot;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Recipe Format&lt;/h2&gt; 
&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(&amp;lt;package-name&amp;gt;
 :fetcher [git|github|gitlab|codeberg|sourcehut|hg]
 [:url &quot;&amp;lt;repo url&amp;gt;&quot;]
 [:repo &quot;user-name/repo-name&quot;]
 [:commit &quot;commit&quot;]
 [:branch &quot;branch&quot;]
 [:version-regexp &quot;&amp;lt;regexp&amp;gt;&quot;]
 [:files (&quot;&amp;lt;file1&amp;gt;&quot; ...)]
 [:old-names (&amp;lt;old-name&amp;gt; ...)])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository the package is being maintained in.&lt;/p&gt; &lt;p&gt;Melpa supports the Git and Mercurial version control systems and provides generic fetcher types for them: &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;hg&lt;/code&gt;. When you use one of these fetchers, you must specify the &lt;code&gt;:url&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;Melpa also provides dedicated fetchers for certain Git forges (aka &quot;Git repository hosting platforms&quot;), which should always be preferred over the generic &lt;code&gt;git&lt;/code&gt; fetcher. When using a dedicated fetcher, you must specify &lt;code&gt;:repo&lt;/code&gt;, not &lt;code&gt;:url&lt;/code&gt;. Currently these Git forge fetchers exist: &lt;a href=&quot;https://github.com/&quot;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://gitlab.com/&quot;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://codeberg.org/&quot;&gt;&lt;code&gt;codeberg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://git.sr.ht/&quot;&gt;&lt;code&gt;sourcehut&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There are no dedicated fetchers for Mercurial. When a forge supports both Git and Mercurial, then the respective fetcher can only be used for Git repositories. For Mercurial repositories always use the &lt;code&gt;hg&lt;/code&gt; fetcher.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. It is required for the generic &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;hg&lt;/code&gt; fetchers and is invalid for forge-specific fetchers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the repository used by forge-specific fetchers and is of the form &lt;code&gt;user-name/repo-name&lt;/code&gt;. It is required for forge-specific fetchers and is invalid for the generic fetchers.&lt;/p&gt; &lt;p&gt;Note that user names in Sourcehut URLs are prefixed with &lt;code&gt;~&lt;/code&gt;, that has to be omitted in the value of this property.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the Git repository to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &quot;origin/&quot;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the Git repository to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &quot;origin/&quot; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &quot;OTP-18.1.5&quot;, we might add &lt;code&gt;:version-regexp &quot;[^0-9]*\\(.*\\)&quot;&lt;/code&gt; to strip the &quot;OTP-&quot; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the Emacs Lisp libraries and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;&#39;(&quot;*.el&quot; &quot;lisp/*.el&quot;
  &quot;dir&quot; &quot;*.info&quot; &quot;*.texi&quot; &quot;*.texinfo&quot;
  &quot;doc/dir&quot; &quot;doc/*.info&quot; &quot;doc/*.texi&quot; &quot;doc/*.texinfo&quot;
  &quot;docs/dir&quot; &quot;docs/*.info&quot; &quot;docs/*.texi&quot; &quot;docs/*.texinfo&quot;
  (:exclude
   &quot;.dir-locals.el&quot; &quot;lisp/.dir-locals.el&quot;
   &quot;test.el&quot; &quot;tests.el&quot; &quot;*-test.el&quot; &quot;*-tests.el&quot;
   &quot;lisp/test.el&quot; &quot;lisp/tests.el&quot; &quot;lisp/*-test.el&quot; &quot;lisp/*-tests.el&quot;))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that you should place Emacs Lisp libraries in the root of the repository or in the &lt;code&gt;lisp/&lt;/code&gt; directory. Test files should be placed in the &lt;code&gt;test/&lt;/code&gt; directory and they should not provide a feature. Likewise &lt;code&gt;NAME-pkg.el&lt;/code&gt; isn&#39;t a library, so you might want to place it in the root directory, even when libraries reside in &lt;code&gt;lisp/&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Please do not track any third-party libraries and test utilities in your repository. If you absolutely must do it, then place these files in a directory dedicated to that purpose, alongside a file named &lt;code&gt;.nosearch&lt;/code&gt;. The latter prevents various tools from adding the containing directory to the &lt;code&gt;load-path&lt;/code&gt; or from otherwise getting confused.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded to make a list of paths that will be copied into the root of the new package. This means a file like &lt;code&gt;lisp/foo.el&lt;/code&gt; would become &lt;code&gt;foo.el&lt;/code&gt; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(TARGET-DIR SOURCE-PATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To exclude certain paths, use &lt;code&gt;(:exclude SOURCE-PATH ...)&lt;/code&gt;. There should only be one element that begins with &lt;code&gt;:exclude&lt;/code&gt; and it should be the last element, though that is not enforced at this time.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, use the special element &lt;code&gt;:defaults&lt;/code&gt; as the first element of the &lt;code&gt;:files&lt;/code&gt; list. This causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &quot;snippets&quot;)&lt;/code&gt; would cause the &lt;code&gt;snippets&lt;/code&gt; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Elements of &lt;code&gt;:files&lt;/code&gt; are (no longer) processed in order because we feed these globs to &lt;code&gt;git log&lt;/code&gt; or &lt;code&gt;hg log&lt;/code&gt; to determine the last commit that touched a relevant file. These commands unfortunately process all exclude globs after all include globs. Therefore it is not possible to override the &lt;code&gt;:exclude&lt;/code&gt; element that appears in &lt;code&gt;:defaults&lt;/code&gt; in a later element of &lt;code&gt;:files&lt;/code&gt;. This means that a package whose name ends with &lt;code&gt;-test&lt;/code&gt; cannot use &lt;code&gt;:defaults&lt;/code&gt;. Likewise if the name of a &lt;em&gt;library&lt;/em&gt; (as opposed to a file implementing tests) ends with &lt;code&gt;-test.el&lt;/code&gt;, then &lt;code&gt;:defaults&lt;/code&gt; cannot be used.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Once the appropriate commit has been determined &lt;code&gt;file-expand-wildcards&lt;/code&gt; is used to determine the files matched by each glob. Unfortunately (unlike in a shell) a glob that begins with &lt;code&gt;*&lt;/code&gt; may also match filenames that begin with &lt;code&gt;.&lt;/code&gt;, so you might have to add exclude globs to prevent those from being included. &lt;code&gt;:defaults&lt;/code&gt; takes care to exclude &lt;code&gt;.dir-locals.el&lt;/code&gt;; if you don&#39;t use &lt;code&gt;:defaults&lt;/code&gt;, then you might have to exclude that explicitly.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;smex&lt;/code&gt; is a repository that contains two files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:fetcher&lt;/code&gt; and &lt;code&gt;:repo&lt;/code&gt; specified,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(smex :fetcher github :repo &quot;nonsequitur/smex&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; 
&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; 
&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(helm-mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;helm-mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(persp-mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;persp-mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; 
&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; 
&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(flymake-perlcritic
 :fetcher github
 :repo &quot;illusori/emacs-flymake-perlcritic&quot;
 :files (&quot;*.el&quot; (&quot;bin&quot; &quot;bin/flymake_perlcritic&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which will result in a package structure of,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYYMMDD
|-- bin
|   `-- flymake_perlcritic
|-- flymake-perlcritic-pkg.el
`-- flymake-perlcritic.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory.&lt;/p&gt; 
&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(pony-mode
 :fetcher github
 :repo &quot;davidmiller/pony-mode&quot;
 :files (&quot;src/*.el&quot; &quot;snippets&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which generates the package,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD
|-- pony-mode-pkg.el
|-- pony-mode.el
|-- pony-tpl.el
`-- snippets
    |-- html-mode
    |   |-- bl
    |   |-- ex
    |   |-- for
    |   |-- if
    |   |-- loa
    |   |-- sup
    |   |-- testc
    |   `-- {{
    `-- python-mode
        |-- auth-view
        |-- bn
        |-- model
        |-- modelform
        |-- render-to
        |-- testc
        `-- view
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build Scripts&lt;/h2&gt; 
&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; — build all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; — build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; — build all JSON files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; — construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; — construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; — clean everything.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; — build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; — remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; — remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; — remove all JSON files.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&quot;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&quot;https://github.com/melpa/package-build/&quot;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Functions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; — build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; — interactive Emacs Lisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository.&lt;/p&gt; &lt;p&gt;A file named &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, which contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information about the package is automatically generated. The information is extracted from the summary line and headers of &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;. For historic reasons, if some of these values cannot be extracted from that file, then Melpa also extracts information from &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; if such a file is tracked in the upstream repository (but this fallback will be removed eventually).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Variables&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; — Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; — Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; — Directory containing MELPA compatible recipes. See &lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&quot;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; 
&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; 
&lt;h2&gt;Mirrors&lt;/h2&gt; 
&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mirrorservice.org/sites/melpa.org/packages/&quot;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mirrorservice.org/sites/melpa.org/packages/&quot;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&quot;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&quot;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;rsync&lt;/code&gt; to get started with your own mirror:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rsync -avz --delete rsync://melpa.org/packages/ snapshots/
rsync -avz --delete rsync://melpa.org/packages-stable/ releases/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qjcg/awesome-typst</title>
      <link>https://github.com/qjcg/awesome-typst</link>
      <description>&lt;p&gt;Awesome Typst Links&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README.md&quot; hreflang=&quot;en&quot; lang=&quot;en&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README_ZH.md&quot; hreflang=&quot;zh&quot; lang=&quot;zh&quot;&gt;简体中文&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Awesome Typst&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome#readme&quot;&gt;&lt;img src=&quot;https://awesome.re/badge.svg?sanitize=true&quot; alt=&quot;Awesome&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Curated collection of useful links for &lt;a href=&quot;https://github.com/typst/typst&quot;&gt;Typst&lt;/a&gt; users.&lt;/p&gt; 
&lt;p&gt;PRs welcomed!&lt;/p&gt; 
&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official-project-links&quot;&gt;Official Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#unofficial-project-links&quot;&gt;Unofficial Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#integrations--tools&quot;&gt;Integrations &amp;amp; Tools&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#browser-extensions&quot;&gt;Browser Extensions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#chatbots&quot;&gt;Chatbots&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cicd&quot;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cli-tools&quot;&gt;CLI Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editors&quot;&gt;Editors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editor-integrations&quot;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#online-tools&quot;&gt;Online Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#programming&quot;&gt;Programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#typst-as-a-service&quot;&gt;Typst As A Service&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates--libraries&quot;&gt;Templates &amp;amp; Libraries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official&quot;&gt;Official&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#general&quot;&gt;General&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#assignments&quot;&gt;Assignments&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cv&quot;&gt;CV&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates&quot;&gt;Templates&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#calendar--timetable&quot;&gt;Calendar / Timetable&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#footnotes--endnotes&quot;&gt;Footnotes &amp;amp; Endnotes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#graphics&quot;&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#letters&quot;&gt;Letters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#linguistics&quot;&gt;Linguistics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#mathematics&quot;&gt;Mathematics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#music&quot;&gt;Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#physics&quot;&gt;Physics&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#conferences&quot;&gt;Conferences&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#journals&quot;&gt;Journals&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#grantsproposals&quot;&gt;Grants/Proposals&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#engineering&quot;&gt;Engineering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#plotting&quot;&gt;Plotting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#posters&quot;&gt;Posters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#scripting&quot;&gt;Scripting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdown-toc end --&gt; 
&lt;h2&gt;Official Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app&quot;&gt;typst.app&lt;/a&gt; - The Typst web app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/docs&quot;&gt;Typst Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/typst&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/blog/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Social - &lt;a href=&quot;https://discord.com/invite/2uDybryKPe&quot;&gt;Discord&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/typstapp/&quot;&gt;Instagram&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/company/typst/&quot;&gt;LinkedIn&lt;/a&gt; &lt;a href=&quot;https://mastodon.social/@typst&quot;&gt;Mastodon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/typstapp/&quot;&gt;X&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Unofficial Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/typst_ru&quot;&gt;Typst-telegram-russian-chat&lt;/a&gt; - chat about Typst in Telegram in russian&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://matrix.to/#/%23typst:matrix.org&quot;&gt;#typst:matrix.org&lt;/a&gt; - matrix room for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sitandr.github.io/typst-examples-book/book/&quot;&gt;Typst Examples Book&lt;/a&gt; - An online book with Typst snippets, including extended tutorial and useful hacks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integrations &amp;amp; Tools&lt;/h2&gt; 
&lt;h3&gt;Browser Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://github.com/MordragT/bib_kit&quot;&gt;bib-kit&lt;/a&gt; - Retrieve website information to create citations in the hayagriva format&lt;/li&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/yank/&quot;&gt;yank&lt;/a&gt; - Yank URL and title of current tab, format to a chosen markup language, and copy to clipboard (supports typst link format)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Chatbots&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mattfbacon/typst-bot&quot;&gt;typst-bot&lt;/a&gt; - A discord bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/ru_rend_bot&quot;&gt;typst-bot-telegram&lt;/a&gt; - A telegram bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A &lt;a href=&quot;https://t.me/TypstBot&quot;&gt;telegram bot&lt;/a&gt; with focus in rendering math expression in Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CI/CD&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/IvanSanchez/gitlab-ci-typst&quot;&gt;gitlab-ci-typst&lt;/a&gt; - Build Typst documents using GitLab CI pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst-community/setup-typst&quot;&gt;setup-typst&lt;/a&gt; - 📑 Install Typst for use in GitHub Actions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-action&quot;&gt;typst-action&lt;/a&gt; - Build Typst documents using GitHub actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CLI Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Enter-tainer/typstyle&quot;&gt;typstyle&lt;/a&gt; - Opinionated typst code formatter focusing on aesthetic, convergence and correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ItsEthra/typst-live&quot;&gt;typst-live&lt;/a&gt; - Hot reloading of pdf in web browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-pandoc&quot;&gt;typst-pandoc&lt;/a&gt; - Typst custom reader and writer for Pandoc&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Thumuss/utpm&quot;&gt;utpm&lt;/a&gt; - Package manager for local and remote packages&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mkpoli/tyler&quot;&gt;Tyler&lt;/a&gt; - Package compiler for the ease of packaging and publishing Typst libraries and templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/textlint/textlint-plugin-typst&quot;&gt;textlint-plugin-typst&lt;/a&gt; - &lt;a href=&quot;https://textlint.github.io/&quot;&gt;textlint&lt;/a&gt; plugin to lint Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Cubxity/typstudio&quot;&gt;typstudio&lt;/a&gt; - An in development desktop editor built using Tauri.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IgKh/katvan&quot;&gt;Katvan&lt;/a&gt; - A bare-bones editor for Typst files, with a bias for Right-to-Left editing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bzero/typstwriter&quot;&gt;Typstwriter&lt;/a&gt; - An integrated desktop editor for typst projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/soupslurpr/BeauTyXT&quot;&gt;BeauTyXT&lt;/a&gt; - A private, secure, minimalistic Text, Markdown, and Typst editor for Android&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editor Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/tree-sitter-typst&quot;&gt;SeniorMars/tree-sitter-typst&lt;/a&gt; - A TreeSitter parser for the Typst File Format&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=myriad-dreamin.tinymist&quot;&gt;Tinymist VS Code Extension&lt;/a&gt; - A vscode extension for Tinymist integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/tinymist&quot;&gt;Tinymist&lt;/a&gt; - A language server for typst with integrations for Emacs, Helix, NeoVim, Sublime Text, VsCode/VsCodium, and Zed&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sync&quot;&gt;Typst Sync&lt;/a&gt; - A vscode extension for Typst local packages management and synchronization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/frozolotl/tree-sitter-typst&quot;&gt;frozolotl/tree-sitter-typst&lt;/a&gt; - A tree-sitter grammar with a focus on correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/herlev/inktyp&quot;&gt;inktyp&lt;/a&gt; - An Inkscape plugin to insert and edit Typst equations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/obsidian-typst&quot;&gt;obsidian-typst&lt;/a&gt; - Renders typst code blocks in Obsidian into images using Typst through the power of WASM!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/remimimimimi/org-typst-preview.el&quot;&gt;org-typst-preview&lt;/a&gt; - Typst preview in org-mode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arne314/typstar&quot;&gt;typstar&lt;/a&gt; - Neovim plugin providing autosnippets, excalidraw integration and [standalone] Anki flashcard export&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MrPicklePinosaur/typst-conceal.vim&quot;&gt;typst-conceal.vim&lt;/a&gt; - Vim/Nvim plugin for replacing long typst symbol names with unicode characters&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=surv.typst-math&quot;&gt;typst-math&lt;/a&gt; - A VS Code extension to simplify math writing in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sympy-calculator&quot;&gt;typst-sympy-calculator&lt;/a&gt; - VS Code extension for Typst math calculating, includes Arithmetic, Calculus, Matrix, Custom Variances and Functions by yourself&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~meow_king/typst-ts-mode&quot;&gt;typst-ts-mode&lt;/a&gt; - Typst tree sitter major mode for Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst.nvim&quot;&gt;typst.nvim&lt;/a&gt; - WIP. Goals: Treesitter highlighting, snippets, and a smooth integration with neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/typst.vim&quot;&gt;typst.vim&lt;/a&gt; - Vim plugin for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typstd&quot;&gt;typstd&lt;/a&gt; - Yet another Typst language server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uben0/tree-sitter-typst&quot;&gt;uben0/tree-sitter-typst&lt;/a&gt; - A TreeSitter grammar for the Typst language, used by Helix&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Online Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/QuarticCat/detypify&quot;&gt;Detypify&lt;/a&gt; - Typst symbol classifier&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hongjr03/excel-to-typst&quot;&gt;excel-to-typst&lt;/a&gt; - A tool that convert Excel tables to Typst table, can work in uploading .xlsx file or pasting.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Programming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lucifer1004/leetcode.typ&quot;&gt;leetcode.typ&lt;/a&gt; - Solving Leetcode problems in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/loqusion/typix&quot;&gt;Typix&lt;/a&gt; - Deterministic Typst compilation with Nix&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/messense/typst-py&quot;&gt;typst-py&lt;/a&gt; - Python binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actsasflinn/typst-rb&quot;&gt;typst-rb&lt;/a&gt; - Ruby binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/typst.ts&quot;&gt;typst.ts&lt;/a&gt; - JavaScript binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jakobjpeters/Typstry.jl&quot;&gt;Typstry.jl&lt;/a&gt; - The Julia to Typst interface&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/mpl-typst&quot;&gt;mpl-typst&lt;/a&gt; - A Typst backend for Matplotlib.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Typst As A Service&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/slashformotion/typst-http-api&quot;&gt;typst-http-api&lt;/a&gt; - An simple docker containing an API to compile typst markup&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A plain and simple HTTP API for rendering math with Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Templates &amp;amp; Libraries&lt;/h2&gt; 
&lt;h3&gt;Official&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/templates&quot;&gt;typst/templates&lt;/a&gt; - The templates that ship with the Typst web app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;General&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onefact/datathinking.org-report-template&quot;&gt;Data Thinking Report Template&lt;/a&gt; - a template for artificial intelligence whitepapers with collaborative bibliographies using Zotero&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mst2k/HSOS-PTP-Typst-Template&quot;&gt;HSOS-PTP-Typst-Template&lt;/a&gt; - A German template for writing papers, overfitted for the Osnabrück University of Applied Scien&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SkytAsul/INSA-Typst-Template&quot;&gt;INSA Typst Template&lt;/a&gt; - A template for INSA (Institut National des Sciences Appliquées), a french public engineering school.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaPreprint/typst&quot;&gt;LaPreprint&lt;/a&gt; - Beautiful preprints for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-mantys&quot;&gt;Mantys&lt;/a&gt; - A template for writing manuals for Typst packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aurghya-0/Project-Report-Typst&quot;&gt;Project-Report-Typst&lt;/a&gt; - A simple template for college or university level project report.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jinhao-huang/SimplePaper&quot;&gt;SimplePaper&lt;/a&gt; - A Chinese template for writing simple paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-Paper-Template&quot;&gt;Typst-Paper-Template&lt;/a&gt; - Typst template for Working Paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/waterlubber/aiaa-typst-template&quot;&gt;aiaa-typst-template&lt;/a&gt; - A template for AIAA (American Institute of Aeronautics and Astronautics) papers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hzkonor/bubble-template&quot;&gt;bubble-template&lt;/a&gt; - A simple and colorful template for reports&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/coco33920/typst-association-statuts&quot;&gt;french-association-status&lt;/a&gt; - A Template to write status for french associations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/gloss-awe&quot;&gt;gloss-awe&lt;/a&gt; - Automatically Generated Glossary Page (renamed from typst-glossary)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/in-dexter&quot;&gt;in-dexter&lt;/a&gt; - Automatically Generated Index Page (renamed from typst-index)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/mcm-icm-typst-template&quot;&gt;mcm-icm-typst-template&lt;/a&gt; - A template for Mathematical Contest in Modeling (MCM) and the Interdisciplinary Contest in Modeling(ICM).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zagoli/simple-typst-thesis&quot;&gt;simple-typst-thesis&lt;/a&gt; - A template useful for writing simple thesis in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ls1intum/thesis-template-typst&quot;&gt;thesis-template-typst&lt;/a&gt; - Technical University of Munich thesis Template with cover, titlepage, tables, figures, appendix, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkndl/typst-bioinfo-thesis&quot;&gt;typst-bioinfo-thesis&lt;/a&gt; - Flexible section headers and page numbers; pretty outlines and a &lt;code&gt;wrapfig&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/erictapen/typst-invoice&quot;&gt;typst-invoice&lt;/a&gt; - Generate invoices from TOML files&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wychwitch/typst-mla9-template&quot;&gt;typst-mla9-template&lt;/a&gt; - An MLA 9th edition template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/flavio20002/typst-orange-template&quot;&gt;typst-orange-template&lt;/a&gt; - A Typst book template inspired by The Legrand Orange Book&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/splash&quot;&gt;typst-palettes&lt;/a&gt; - A library of color palettes for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - A templates collection for major venues in machine learning and AI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eigenein/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - Templates for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/haxibami/haxipst&quot;&gt;typst-templates&lt;/a&gt; - My typst templates&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yangwenbo99/typst-uwthesis&quot;&gt;typst-uwthesis&lt;/a&gt; - A typst template for writing thesis, featuring a working abbreviation lists.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qjcg/typstry&quot;&gt;typstry&lt;/a&gt; - A Tapestry of Typst Templates &amp;amp; Examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LLBlumire/writable-gm-screen-inserts&quot;&gt;writable-gm-screen-inserts&lt;/a&gt; - Writable Game Master Screen Insertsces&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Assignments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/diquah/OpenBoard&quot;&gt;OpenBoard&lt;/a&gt; - Easily build clean assessments in the style of the College Board.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/AntoniosBarotsis/typst-assignment-template&quot;&gt;assignment-template&lt;/a&gt; - A simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/astrale-sharp/typst-assignement-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gRox167/typst-assignment-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template with a cover and several useful math symbols.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/OriginCode/typst-homework-template&quot;&gt;typst-homework-template&lt;/a&gt; - A simple homework template inspired by the LaTeX homework template by Adam Blank&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/jomaway/typst-teacher-templates&quot;&gt;typst-teacher-template&lt;/a&gt; - A collection of typst templates. Mainly used to create worksheets and exams for my classes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/sylvanfranklin/tinyset&quot;&gt;tinyset&lt;/a&gt; - A lightweight and opinionated problem set package designed with pure math proofs in mind.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CV&lt;/h3&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/caffeinatedgaze/bare-bones-cv&quot;&gt;bare-bones-cv&lt;/a&gt; –&amp;nbsp;A single-page minimalistic CV comprising essentials only.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template for Typst that uses a YAML file for data input in order to version control CV data easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;chicv&lt;/a&gt; - A minimal and fully-customizable CV template.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Templates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tzx/NNJR&quot;&gt;NNJR&lt;/a&gt; - A resume template inspired by &lt;code&gt;Jake&#39;s Resume&lt;/code&gt; LaTeX template. Uses Typst and YAML.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GeorgeHoneywood/alta-typst&quot;&gt;alta-typst&lt;/a&gt; - A simple Typst CV template, inspired by AltaCV by LianTze Lim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Harkunwar/attractive-typst-resume&quot;&gt;attractive-typst-resume&lt;/a&gt; - A modern looking, attractive CV/Resume template by Harkunwar Kochar&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gvariable/billryan-typst&quot;&gt;billryan-typst&lt;/a&gt; - A simple and minimalist resume template, inspired by Resume by Billryan.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mintyfrankie/brilliant-CV&quot;&gt;brilliant-CV&lt;/a&gt; - Another CV template for your job application, yet powered by Typst and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cu1ch3n/caidan&quot;&gt;caidan&lt;/a&gt; - A clean and minimal food menu template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template using Typst and YAML to version control CV data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/olligobber/friggeri-cv&quot;&gt;friggeri-cv&lt;/a&gt; - A slightly modified version of the Friggeri CV, originally created by Adrien Friggeri in LaTeX, ported to Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-cv&lt;/a&gt; - A modern resume and coverletter template based on &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-typst-template&lt;/a&gt; - A modern resume/CV template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/giovanniberti/moderncv.typst&quot;&gt;moderncv.typst&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;moderncv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wusyong/resume.typ&quot;&gt;resume.typ&lt;/a&gt; - Simple and ergonomic template to generate resume and CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaurenzV/simplecv&quot;&gt;simplecv&lt;/a&gt; - SimpleCV is a simple and elegant CV template written in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/typst-academic-cv&quot;&gt;typst-academic-cv&lt;/a&gt; - Typst Template for Academic CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cammellos/typst-blue-header-cv&quot;&gt;typst-blue-header-cv&lt;/a&gt; - Customizable Typst two-columns CV template with a top header.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ice-kylin/typst-cv-miku&quot;&gt;typst-cv-miku&lt;/a&gt; - A simple, elegant, academic style CV template for typst. Support for English and Chinese (and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-CV-Resume&quot;&gt;typst-cv-resume&lt;/a&gt; - A CV template with Sans font inspired by LaTeX &lt;code&gt;Deedy-Resume&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vaibhavjhawar/typst-cv-template1&quot;&gt;typst-cv-template1&lt;/a&gt; - A CV template inspired by Alessandro Plasmati&#39;s Graduate CV LaTex template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JCGoran/typst-cv-template&quot;&gt;typst-cv-template&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;typst-cv-template&lt;/a&gt; - Chi CV Template (For Typst)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/titaneric/typst-mixed-resume&quot;&gt;typst-mixed-resume&lt;/a&gt; - A casual and elegant resume template inspired by multiple templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UntimelyCreation/typst-neat-cv&quot;&gt;typst-neat-cv&lt;/a&gt; - A Typst template for modern, minimal and elegant CVs, inspired by mintyfrankie&#39;s &lt;code&gt;Brilliant CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mizlan/typst-resume-sans&quot;&gt;typst-resume-sans&lt;/a&gt; - A sleek and unadorned sans-serif resume template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bamboovir/typst-resume-template&quot;&gt;typst-resume-template&lt;/a&gt; - Aesthetic style inspired by the Awesome-CV project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hexWars/resume&quot;&gt;typst-resume-template&lt;/a&gt; - A pretty resume template designed using typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tomowang/typst-twentysecondcv&quot;&gt;typst-twentysecondcv&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Twenty Seconds Resume/CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daxartio/cv&quot;&gt;typst-yaml-cv&lt;/a&gt; - A simple cv template designed using typst and yaml.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/elegaanz/vercanard&quot;&gt;vercanard&lt;/a&gt; - A colorful resume template for Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Calendar / Timetable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ludwig-austermann/typst-timetable&quot;&gt;typst-timetable&lt;/a&gt; - A template for timetables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/extua/october&quot;&gt;october&lt;/a&gt; - A simple printable month calendar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Footnotes &amp;amp; Endnotes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tudborg/notes.typ&quot;&gt;notes.typ&lt;/a&gt; - A library for notes with deduplication and customizability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Formatting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/metro&quot;&gt;metro&lt;/a&gt; - A typst package to add typsetting to units!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rinmyo/ruby-typ&quot;&gt;ruby-typ&lt;/a&gt; - A library to add ruby text&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pablo-Gonzalez-Calderon/showybox-package&quot;&gt;showybox&lt;/a&gt; - A Typst package for creating colorful and customizable boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asibahi/simple-poem-typst&quot;&gt;simple-poem-typst&lt;/a&gt; - An application of the &lt;code&gt;measure&lt;/code&gt; function to set Arabic poetry.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RubixDev/syntastica-typst/&quot;&gt;syntastica-typst&lt;/a&gt; - Tree-sitter syntax highlighting for code blocks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qo/term&quot;&gt;term&lt;/a&gt; - A Typst package for creating figures that emulate terminal screenshots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/8LWXpg/typst-ansi-render&quot;&gt;typst-ansi_render&lt;/a&gt; - A library to render text with ANSI escape sequences&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkoehl/typst-boxes&quot;&gt;typst-boxes&lt;/a&gt; - A library to draw colorful boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-codelst&quot;&gt;typst-codelst&lt;/a&gt; - A Typst package to render source code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-diagbox&quot;&gt;typst-diagbox&lt;/a&gt; - A library for diagonal line dividers in Typst tables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-gentle-clues&quot;&gt;typst-gentle-clues&lt;/a&gt; - A typst package to simply add admonitions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-tablem&quot;&gt;typst-tablem&lt;/a&gt; - Write markdown-like tables easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-tablex&quot;&gt;typst-tablex&lt;/a&gt; - More powerful and customizable tables in Typst!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cetz-package/cetz&quot;&gt;CeTZ&lt;/a&gt; - CeTZ (CeTZ, ein Typst Zeichenpacket) is a library for drawing with &lt;a href=&quot;https://typst.app&quot;&gt;Typst&lt;/a&gt; with an API inspired by TikZ and &lt;a href=&quot;https://processing.org/&quot;&gt;Processing&lt;/a&gt;. It comes with modules for drawing plots, graphs and charts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst-raytracer&quot;&gt;typst-raytracer&lt;/a&gt; - raytracer in typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Letters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Sematre/typst-letter-pro&quot;&gt;typst-letter-pro&lt;/a&gt; - DIN 5008 letter template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dvdvgt/typst-letter&quot;&gt;typst-letter&lt;/a&gt; - A typst letter template inspired by the DIN 5008 norm&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pascal-huber/typst-letter-template&quot;&gt;typst-letter-template&lt;/a&gt; - A customizable typst letter template with different presets (DIN 5008, Swiss C5)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linguistics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitea.everydayimshuflin.com/greg/typst-lepizig-glossing&quot;&gt;leipzig-gloss&lt;/a&gt; - A library that provides primitives for creating glossing rules according to Leipzig.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/imatpot/typst-ascii-ipa&quot;&gt;typst-ipa&lt;/a&gt; - 🔄 ASCII / IPA conversion for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://kianting.info/wiki/w/Tan_Kian-ting%E7%9A%84%E7%B6%AD%E5%9F%BA:Typst-dictionary-template&quot;&gt;typst-dictionary-template&lt;/a&gt; - 📕 a template for lexical dictionary/glossary in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lynn/typst-syntree&quot;&gt;typst-syntree&lt;/a&gt; - Syntax trees for typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mathematics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;commute&lt;/a&gt; - A library for creating commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/platformer/typst-algorithms&quot;&gt;typst-algorithms&lt;/a&gt; - A library for writing algorithms&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EvanLuo42/typst-himcm-template&quot;&gt;typst-himcm-template&lt;/a&gt; - An HiMCM template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/matthiasGmayer/typst-math-template&quot;&gt;typst-math-template&lt;/a&gt; - A simple math template that allows for numbered, referenceable theorems and compilation of subfiles that use references.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/maxwell-thum/typst-pf3&quot;&gt;typst-pf3&lt;/a&gt; - A small package for creating &quot;structured proofs.&quot; Essentially a port of Leslie Lamport&#39;s &lt;a href=&quot;https://web.archive.org/web/20240419130400/https://lamport.azurewebsites.net/latex/pf2.sty&quot;&gt;&lt;code&gt;pf2.sty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sahasatvik/typst-theorems&quot;&gt;typst-theorems&lt;/a&gt; - A library for creating numbered theorem environments&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johanvx/typst-undergradmath&quot;&gt;typst-undergradmath&lt;/a&gt; - A Typst port of &lt;a href=&quot;https://gitlab.com/jim.hefferon/undergradmath&quot;&gt;undergradmath&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Music&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sitandr/conchord&quot;&gt;conchord&lt;/a&gt; - Typst package to easily write lyrics with chords and generate colorful fretboard diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ljgago/typst-chords&quot;&gt;typst-chords&lt;/a&gt; - A library to write song lyrics with chord diagrams in Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Physics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Leedehai/typst-physics&quot;&gt;physics&lt;/a&gt; - A library for usual physics notations, e.g. vectors and vector fields, matrices, differentials, derivatives, Dirac brackets, tensors, isotopes, and digital signal sequences.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Conferences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isaacew/aiaa-typst&quot;&gt;aiaa-typst&lt;/a&gt; - A template for creating conference papers in the style of the American Institute of Aeronautics and Astronautics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/ieee-conference-typst-template&quot;&gt;ieee-conference-typst-template&lt;/a&gt; A template to write IEEE Conference in Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bsp0109/ieee-typst-template&quot;&gt;ieee-typst-template&lt;/a&gt; - A template to write IEEE Papers in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/avonmoll/ifacconf-typst&quot;&gt;ifacconf-typst&lt;/a&gt; - A template for creating conference papers in the style of the International Federation of Automatic Control&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Journals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/p4perf4ce/typst-ieee-trans-template&quot;&gt;ieee-trans-typst&lt;/a&gt; - A template that mimic LaTeX IEEE Transaction template (&lt;code&gt;ieee-trans.cls&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Grants/Proposals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ntjess/typst-nsf-templates&quot;&gt;typst-nsf-templates&lt;/a&gt; - National Science Foundation (NSF) general template and outlines for popular proposal types.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Engineering&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/cirCeTZ&quot;&gt;circuitypst&lt;/a&gt; - A library for drawing electronic circuit schematics&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-bytefield&quot;&gt;typst-bytefield&lt;/a&gt; - A library for drawing (network) protocol headers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/oldrev/tids&quot;&gt;tids&lt;/a&gt; - A TI-style datasheet template for electronic component&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Plotting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;typst-cd&lt;/a&gt; - Proof of Concept for tikz-like commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johannes-wolf/typst-plot&quot;&gt;typst-plot&lt;/a&gt; - A library for plotting line charts (deprecated in favor of CeTZ)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pegacraft/typst-plotting&quot;&gt;typst-plotting&lt;/a&gt; - A library for drawing a variety of charts and plots like line charts, histograms, and pie charts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Posters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pncnmnp/typst-poster&quot;&gt;typst-poster&lt;/a&gt; - An academic poster template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jonaspleyer/peace-of-posters&quot;&gt;science-posters&lt;/a&gt; - Create academic posters in block style&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scripting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-oxifmt&quot;&gt;typst-oxifmt&lt;/a&gt; - Convenient Rust-like string formatting in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-tools4typst&quot;&gt;typst-tools4typst&lt;/a&gt; - Tools for package and template authors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Slides&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/diapo&quot;&gt;diapo&lt;/a&gt; - A minimal and simplistic presentation template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andreasKroepelin/polylux&quot;&gt;polylux&lt;/a&gt; - Create presentation slides in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marcothms/clean-polylux-typst&quot;&gt;clean-polylux-typst&lt;/a&gt; - A clean and dynamic polylux presentation slide template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-pinit&quot;&gt;pinit&lt;/a&gt; - Pin things as you like, especially useful for creating slides in typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/touying-typ/touying&quot;&gt;touying&lt;/a&gt; - A powerful package for creating presentation slides in Typst&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>dominikh/go-mode.el</title>
      <link>https://github.com/dominikh/go-mode.el</link>
      <description>&lt;p&gt;Emacs mode for the Go programming language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is go-mode, the Emacs mode for editing Go code.&lt;/p&gt; 
&lt;p&gt;It is a complete rewrite of the go-mode that shipped with Go 1.0.3 and before, and was part of Go 1.1 until Go 1.3. Beginning with Go 1.4, editor integration will not be part of the Go distribution anymore, making this repository the canonical place for go-mode.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;p&gt;In addition to normal features, such as fontification and indentation, and close integration with familiar Emacs functionality (for example syntax-based navigation like &lt;code&gt;beginning-of-defun&lt;/code&gt;), go-mode comes with the following extra features to provide an improved experience:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Integration with &lt;code&gt;gofmt&lt;/code&gt; by providing a command of the same name, and &lt;code&gt;gofmt-before-save&lt;/code&gt;, which can be used in a hook to format Go buffers before saving them.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Setting the &lt;code&gt;gofmt-command&lt;/code&gt; variable also allows using &lt;code&gt;goimports&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Setting the &lt;code&gt;gofmt-args&lt;/code&gt; variable with a list of arguments allows using e.g. &lt;code&gt;gofmt -s&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Integration with &lt;code&gt;godoc&lt;/code&gt; via the functions &lt;code&gt;godoc&lt;/code&gt; and &lt;code&gt;godoc-at-point&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Integration with the Playground&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;go-play-buffer&lt;/code&gt; and &lt;code&gt;go-play-region&lt;/code&gt; to send code to the Playground&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;go-download-play&lt;/code&gt; to download a Playground entry into a new buffer&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Managing imports&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A function for jumping to the file&#39;s imports (&lt;code&gt;go-goto-imports&lt;/code&gt; - &lt;code&gt;C-c C-f i&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;A function for adding imports, including tab completion (&lt;code&gt;go-import-add&lt;/code&gt;, bound to &lt;code&gt;C-c C-a&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;It is recommended that you use &lt;code&gt;goimports&lt;/code&gt; or the &lt;code&gt;organize-imports&lt;/code&gt; feature of &lt;code&gt;gopls&lt;/code&gt; to manage adding/removing/organizing imports automatically.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Integration with godef&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;godef-describe&lt;/code&gt; (&lt;code&gt;C-c C-d&lt;/code&gt;) to describe expressions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;godef-jump&lt;/code&gt; (&lt;code&gt;C-c C-j&lt;/code&gt;) and &lt;code&gt;godef-jump-other-window&lt;/code&gt; (&lt;code&gt;C-x 4 C-c C-j&lt;/code&gt;) to jump to declarations&lt;/li&gt; 
   &lt;li&gt;This requires you to install godef via &lt;code&gt;go install github.com/rogpeppe/godef@latest&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Basic support for imenu (functions and variables)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Built-in support for displaying code coverage as calculated by &lt;code&gt;go test&lt;/code&gt; (&lt;code&gt;go-coverage&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Several functions for jumping to and manipulating the individual parts of function signatures. These functions support anonymous functions, but are smart enough to skip them when required (e.g. when jumping to a method receiver or docstring.)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Jump to the argument list (&lt;code&gt;go-goto-arguments&lt;/code&gt; - &lt;code&gt;C-c C-f a&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the docstring, create it if it does not exist yet (&lt;code&gt;go-goto-docstring&lt;/code&gt; - &lt;code&gt;C-c C-f d&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;Jump to the function keyword (&lt;code&gt;go-goto-function&lt;/code&gt; - &lt;code&gt;C-c C-f f&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the function name (&lt;code&gt;go-goto-function-name&lt;/code&gt; - &lt;code&gt;C-c C-f n&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the return values (&lt;code&gt;go-goto-return-values&lt;/code&gt; - &lt;code&gt;C-c C-f r&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the method receiver, adding a pair of parentheses if no method receiver exists (&lt;code&gt;go-goto-method-receiver&lt;/code&gt; - &lt;code&gt;C-c C-f m&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;All of these functions accept a prefix argument (&lt;code&gt;C-u&lt;/code&gt;), causing them to skip anonymous functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;MELPA&lt;/h2&gt; 
&lt;p&gt;The recommended way of installing go-mode is via &lt;a href=&quot;http://www.emacswiki.org/emacs/ELPA&quot;&gt;ELPA&lt;/a&gt;, the Emacs package manager, and the &lt;a href=&quot;http://emacsredux.com/blog/2014/05/16/melpa-stable/&quot;&gt;MELPA Stable repository&lt;/a&gt;, which provides an up-to-date version of go-mode.&lt;/p&gt; 
&lt;p&gt;If you&#39;re not familiar with ELPA yet, consider reading &lt;a href=&quot;http://xahlee.info/emacs/emacs/emacs_package_system.html&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual&lt;/h2&gt; 
&lt;p&gt;To install go-mode manually, check out the &lt;code&gt;go-mode.el&lt;/code&gt; repository in a directory of your choice, add it to your load path and configure Emacs to automatically load it when opening a &lt;code&gt;.go&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &quot;/place/where/you/put/it/&quot;)
(autoload &#39;go-mode &quot;go-mode&quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\.go\\&#39;&quot; . go-mode))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Either evaluate the statements with &lt;code&gt;C-x C-e&lt;/code&gt;, or restart Emacs.&lt;/p&gt; 
&lt;h1&gt;Other extensions&lt;/h1&gt; 
&lt;p&gt;There are several third party extensions that can enhance the Go experience in Emacs.&lt;/p&gt; 
&lt;h2&gt;Gopls integration&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/golang/tools/raw/master/gopls/README.md&quot;&gt;Gopls&lt;/a&gt; is the official language server protocol (lsp) implementation provided by the Go team. It is intended to replace the existing third party tools for code formatting (gofmt), automatic imports (goimports), code navigation (godef/guru), type and function descriptions (godoc/godef), error checking, auto completion (gocode), variable and type renaming (rename), and more. Once gopls is stable the older tools will no longer be supported.&lt;/p&gt; 
&lt;p&gt;Gopls is a supported backend for &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt;. It will be used automatically by lsp-mode if &lt;code&gt;gopls&lt;/code&gt; is found in your PATH. You can install gopls via: &lt;code&gt;go install golang.org/x/tools/gopls@latest&lt;/code&gt;. To enable lsp-mode for go buffers:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(add-hook &#39;go-mode-hook &#39;lsp-deferred)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Syntax/error checking&lt;/h2&gt; 
&lt;p&gt;There are two ways of using flymake with Go:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dougm/goflymake&quot;&gt;goflymake&lt;/a&gt;, which internally uses &lt;code&gt;go build&lt;/code&gt; to capture all errors that a regular compilation would also produce&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://marmalade-repo.org/packages/flymake-go&quot;&gt;flymake-go&lt;/a&gt; for a more lightweight solution that only uses &lt;code&gt;gofmt&lt;/code&gt; and as such is only able to catch syntax errors. Unlike goflymake, however, it does not require an additional executable.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Additionally, there is &lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;flycheck&lt;/a&gt;, a modern replacement for flymake, which comes with built-in support for Go. In addition to using &lt;code&gt;go build&lt;/code&gt; or &lt;code&gt;gofmt&lt;/code&gt;, it also has support for &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; and &lt;code&gt;errcheck&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Auto completion&lt;/h2&gt; 
&lt;p&gt;For auto completion, take a look at &lt;a href=&quot;https://github.com/nsf/gocode&quot;&gt;gocode&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;eldoc&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/syohex/emacs-go-eldoc&quot;&gt;https://github.com/syohex/emacs-go-eldoc&lt;/a&gt; provides eldoc functionality for go-mode.&lt;/p&gt; 
&lt;h2&gt;Snippets&lt;/h2&gt; 
&lt;p&gt;I maintain a set of YASnippet snippets for go-mode at &lt;a href=&quot;https://github.com/dominikh/yasnippet-go&quot;&gt;https://github.com/dominikh/yasnippet-go&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Integration with errcheck&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dominikh/go-errcheck.el&quot;&gt;https://github.com/dominikh/go-errcheck.el&lt;/a&gt; provides integration with &lt;a href=&quot;https://github.com/kisielk/errcheck&quot;&gt;errcheck&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Stability&lt;/h1&gt; 
&lt;p&gt;go-mode.el has regular, tagged releases and is part of the MELPA Stable repository. These tagged releases are intended to provide a stable experience. APIs added in tagged releases will usually not be removed or changed in future releases.&lt;/p&gt; 
&lt;p&gt;Changes made on the master branch, which is tracked by the normal MELPA repository, however, are under active development. New APIs are experimental and may be changed or removed before the next release. Furthermore, there is a higher chance for bugs.&lt;/p&gt; 
&lt;p&gt;If you want a stable experience, use MELPA Stable. If you want cutting edge features, or &quot;beta-test&quot; future releases, use MELPA or the master branch.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>akermu/emacs-libvterm</title>
      <link>https://github.com/akermu/emacs-libvterm</link>
      <description>&lt;p&gt;Emacs libvterm integration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/vterm&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/vterm-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Emacs-libvterm (&lt;em&gt;vterm&lt;/em&gt;) is fully-fledged terminal emulator inside GNU Emacs based on &lt;a href=&quot;https://github.com/neovim/libvterm&quot;&gt;libvterm&lt;/a&gt;, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.&lt;/p&gt; 
&lt;h2&gt;Warning&lt;/h2&gt; 
&lt;p&gt;This package is in active development and, while being stable enough to be used as a daily-driver, it is currently in &lt;strong&gt;alpha&lt;/strong&gt; stage. This means that occasionally the public interface will change (for example names of options or functions). A list of recent breaking changes is in &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#breaking-changes&quot;&gt;appendix&lt;/a&gt;. Moreover, emacs-libvterm deals directly with some low-level operations, hence, bugs can lead to segmentation faults and crashes. If that happens, please &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/new&quot;&gt;report the problem&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Given that eshell, shell, and (ansi-)term are Emacs built-in, why should I use vterm?&lt;/h2&gt; 
&lt;p&gt;The short answer is: unparalleled performance and compatibility with standard command-line tools.&lt;/p&gt; 
&lt;p&gt;For the long answer, let us discuss the differences between &lt;code&gt;eshell&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;vterm&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;eshell&lt;/code&gt;: it is a shell completely implemented in Emacs Lisp. It is well-integrated in Emacs and it runs on Windows. It does not support command line tools that require terminal manipulation capabilities (e.g., &lt;code&gt;ncdu&lt;/code&gt;, &lt;code&gt;nmtui&lt;/code&gt;, ...).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shell&lt;/code&gt;: it interfaces with a standard shell (e.g., &lt;code&gt;bash&lt;/code&gt;). It reads an input from Emacs, sends it to the shell, and reports back the output from the shell. As such, like &lt;code&gt;eshell&lt;/code&gt;, it does not support interactive commands, especially those that directly handle how the output should be displayed (e.g., &lt;code&gt;htop&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;term&lt;/code&gt;: it is a terminal emulator written in elisp. &lt;code&gt;term&lt;/code&gt; runs a shell (similarly to other terminal emulators like Gnome Terminal) and programs can directly manipulate the output using escape codes. Hence, many interactive applications (like the one aforementioned) work with &lt;code&gt;term&lt;/code&gt;. However, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;ansi-term&lt;/code&gt; do not implement all the escapes codes needed, so some programs do not work properly. Moreover, &lt;code&gt;term&lt;/code&gt; has inferior performance compared to standalone terminals, especially with large bursts of output.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vterm&lt;/code&gt;: like &lt;code&gt;term&lt;/code&gt; it is a terminal emulator. Unlike &lt;code&gt;term&lt;/code&gt;, the core of &lt;code&gt;vterm&lt;/code&gt; is an external library written in C, &lt;code&gt;libvterm&lt;/code&gt;. For this reason, &lt;code&gt;vterm&lt;/code&gt; outperforms &lt;code&gt;term&lt;/code&gt; and has a nearly universal compatibility with terminal applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Vterm is not for you &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/12&quot;&gt;if you are using Windows&lt;/a&gt;, or if you cannot set up Emacs with support for modules. Otherwise, you should try vterm, as it provides a superior terminal experience in Emacs.&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; is like using Gnome Terminal inside Emacs: Vterm is fully-featured and fast, but is not as well integrated in Emacs as &lt;code&gt;eshell&lt;/code&gt; (yet), so some of the editing keybinding you are used to using may not work. For example, &lt;code&gt;evil-mode&lt;/code&gt; is currently not supported (though, users can enable VI emulation in their shells). This is because keys are sent directly to the shell. We are constantly working to improve this.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Before installing emacs-libvterm, you need to make sure you have installed&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;GNU Emacs (&amp;gt;= 25.1) with &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html&quot;&gt;module support&lt;/a&gt;. You can check that, by verifying that &lt;code&gt;module-file-suffix&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;cmake (&amp;gt;= 3.11)&lt;/li&gt; 
 &lt;li&gt;libtool-bin (related issues: &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/66&quot;&gt;#66&lt;/a&gt; &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/85#issuecomment-491845136&quot;&gt;#85&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;OPTIONAL: &lt;a href=&quot;https://github.com/Sbozzolo/libvterm-mirror.git&quot;&gt;libvterm&lt;/a&gt; (&amp;gt;= 0.2). This library can be found in the official repositories of most distributions (e.g., Arch, Debian, Fedora, Gentoo, openSUSE, Ubuntu). Typical names are &lt;code&gt;libvterm&lt;/code&gt; (Arch, Fedora, Gentoo, openSUSE), or &lt;code&gt;libvterm-dev&lt;/code&gt; (Debian, Ubuntu). If not available, &lt;code&gt;libvterm&lt;/code&gt; will be downloaded during the compilation process. Some distributions (e.g. Ubuntu &amp;lt; 20.04, Debian &amp;lt; 11) have versions of &lt;code&gt;libvterm&lt;/code&gt; that are too old. If you find compilation errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;, you should not use your system libvterm. See &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&quot;&gt;FAQ&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;From MELPA&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; is available on &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt;, and it can be installed as a normal package. If the requirements are satisfied (mainly, Emacs was built with support for modules), &lt;code&gt;vterm&lt;/code&gt; will compile the module the first time it is run. This is the recommended way to install &lt;code&gt;vterm&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can be install from MELPA with &lt;code&gt;use-package&lt;/code&gt; by adding the following lines to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package vterm
    :ensure t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To take full advantage of the capabilities of &lt;code&gt;vterm&lt;/code&gt;, you should configure your shell too. Read about this in the section &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&quot;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual installation&lt;/h2&gt; 
&lt;p&gt;Clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/akermu/emacs-libvterm.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, vterm will try to find if libvterm is installed. If it is not found, emacs-libvterm will download the latest version available of libvterm (from &lt;a href=&quot;https://github.com/neovim/libvterm&quot;&gt;here&lt;/a&gt;), compile it, and use it. If you always want to use the vendored version as opposed to the one on you system, set &lt;code&gt;USE_SYSTEM_LIBVTERM&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt;. To do this, change &lt;code&gt;cmake ..&lt;/code&gt; with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt; in the following instructions.&lt;/p&gt; 
&lt;p&gt;Build the module with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd emacs-libvterm
mkdir -p build
cd build
cmake ..
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And add this to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;load-path &quot;path/to/emacs-libvterm&quot;)
(require &#39;vterm)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package vterm
  :load-path  &quot;path/to/emacs-libvterm/&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;vterm and Ubuntu&lt;/h2&gt; 
&lt;h3&gt;20.04&lt;/h3&gt; 
&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu requires additional steps. The latest LTS version (20.04) ships without CMake installed and Emacs27 is not yet available from Ubuntu&#39;s package repository.&lt;/p&gt; 
&lt;p&gt;The basic steps for getting vterm to work on Ubuntu 20.04 are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure Emacs27 is installed&lt;/li&gt; 
 &lt;li&gt;Install cmake, libtool, and libtool-bin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a few options for installing Emacs27 on Ubuntu 20.04:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compile Emacs27 from source&lt;/li&gt; 
 &lt;li&gt;Install Emacs27 from Snap&lt;/li&gt; 
 &lt;li&gt;Install Emacs27 from Kevin Kelley&#39;s PPA&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In any case, if you have an older Emacs version you will need to purge it before proceeding:&lt;/p&gt; 
&lt;h4&gt;Purge Emacs&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt --purge remove emacs
sudo apt autoremove
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing Emacs27 from Kevin Kelley PPA&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo add-apt-repository ppa:kelleyk/emacs
sudo apt install emacs27
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;If you get an error about emacs27_common during the install process:&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Errors were encountered while processing:
 /tmp/apt-dpkg-install-RVK8CA/064-emacs27-common_27.1~1.git86d8d76aa3-kk2+20.04_all.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;run&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt --purge remove emacs-common
sudo apt --fix-broken install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing Emacs27 from Snap&lt;/h4&gt; 
&lt;p&gt;I hesitate to include SNAP here, because I ran into a number of GTK Theme parsing errors, and Fontconfig errors when I tested it, and reverted to installing from Kevin Kelley&#39;s PPA. YMMV&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo snap install emacs --classic
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install CMake and Libtool&lt;/h4&gt; 
&lt;p&gt;In Ubuntu 20.04 CMake (v3.16.3-1ubuntu1) and Libtool can be installed with&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install cmake
sudo apt install libtool
sudo apt install libtool-bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;18.04&lt;/h3&gt; 
&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu 18.04 requires additional steps. 18.04 ships with a version of CMake that is too old for &lt;code&gt;vterm&lt;/code&gt; and GNU Emacs is not compiled with support for dynamical module loading.&lt;/p&gt; 
&lt;p&gt;It is possible to install GNU Emacs with module support from Kevin Kelley&#39;s PPA. The binary in Ubuntu Emacs Lisp PPA is currently broken and leads to segmentation faults (see &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/185#issuecomment-562237077&quot;&gt;#185&lt;/a&gt;). In case Emacs is already on the system, you need to purge it before proceeding with the following commands.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo add-apt-repository ppa:kelleyk/emacs
sudo apt update
sudo apt-get install emacs26
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A way to install a recent version of CMake (&amp;gt;= 3.11) is with linuxbrew.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install cmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In some cases, &lt;code&gt;/bin/sh&lt;/code&gt; needs to be relinked to &lt;code&gt;/bin/bash&lt;/code&gt; for the compilation to work (see, &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/216#issuecomment-575934593&quot;&gt;#216&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Pull requests to improve support for Ubuntu are welcome (e.g., simplifying the installation).&lt;/p&gt; 
&lt;p&gt;Some releases of Ubuntu (e.g., 18.04) ship with a old version of libvterm that can lead to compilation errors. If you have this problem, see the &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&quot;&gt;FAQ&lt;/a&gt; for a solution.&lt;/p&gt; 
&lt;h2&gt;GNU Guix&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; and its dependencies are available in GNU Guix as &lt;a href=&quot;https://guix.gnu.org/packages/emacs-vterm-0-1.7d7381f/&quot;&gt;emacs-vterm&lt;/a&gt;. The package can be installed with &lt;code&gt;guix package -i emacs-vterm&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Shell-side configuration&lt;/h2&gt; 
&lt;p&gt;Some of the most useful features in &lt;code&gt;vterm&lt;/code&gt; (e.g., &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#directory-tracking-and-prompt-tracking&quot;&gt;directory-tracking and prompt-tracking&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#message-passing&quot;&gt;message passing&lt;/a&gt;) require shell-side configurations. The main goal of these additional functions is to enable the shell to send information to &lt;code&gt;vterm&lt;/code&gt; via properly escaped sequences. A function that helps in this task, &lt;code&gt;vterm_printf&lt;/code&gt;, is defined below. This function is widely used throughout this readme.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_printf() {
    if [ -n &quot;$TMUX&quot; ] \
        &amp;amp;&amp;amp; { [ &quot;${TERM%%-*}&quot; = &quot;tmux&quot; ] \
            || [ &quot;${TERM%%-*}&quot; = &quot;screen&quot; ]; }; then
        # Tell tmux to pass the escape sequences through
        printf &quot;\ePtmux;\e\e]%s\007\e\\&quot; &quot;$1&quot;
    elif [ &quot;${TERM%%-*}&quot; = &quot;screen&quot; ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf &quot;\eP\e]%s\007\e\\&quot; &quot;$1&quot;
    else
        printf &quot;\e]%s\e\\&quot; &quot;$1&quot;
    fi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This works also for &lt;code&gt;dash&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt; put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function vterm_printf;
    if begin; [  -n &quot;$TMUX&quot; ]  ; and  string match -q -r &quot;screen|tmux&quot; &quot;$TERM&quot;; end
        # tell tmux to pass the escape sequences through
        printf &quot;\ePtmux;\e\e]%s\007\e\\&quot; &quot;$argv&quot;
    else if string match -q -- &quot;screen*&quot; &quot;$TERM&quot;
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf &quot;\eP\e]%s\007\e\\&quot; &quot;$argv&quot;
    else
        printf &quot;\e]%s\e\\&quot; &quot;$argv&quot;
    end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Debugging and testing&lt;/h1&gt; 
&lt;p&gt;If you have successfully built the module, you can test it by executing the following command in the &lt;code&gt;build&lt;/code&gt; directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;h2&gt;&lt;code&gt;vterm&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Open a terminal in the current window.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-other-window&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Open a terminal in another window.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-copy-mode&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;When you enable &lt;code&gt;vterm-copy-mode&lt;/code&gt;, the terminal buffer behaves like a normal &lt;code&gt;read-only&lt;/code&gt; text buffer: you can search, copy text, etc. The default keybinding to toggle &lt;code&gt;vterm-copy-mode&lt;/code&gt; is &lt;code&gt;C-c C-t&lt;/code&gt;. When a region is selected, it is possible to copy the text and leave &lt;code&gt;vterm-copy-mode&lt;/code&gt; with the enter key.&lt;/p&gt; 
&lt;p&gt;If no region is selected when the enter key is pressed it will copy the current line from start to end. If &lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt; is true it will skip the prompt and not include it in the copy.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; does exactly what the name suggests: it clears the current buffer from the data that it is not currently visible. &lt;code&gt;vterm-clear-scrollback&lt;/code&gt; is bound to &lt;code&gt;C-c C-l&lt;/code&gt;. This function is typically used with the &lt;code&gt;clear&lt;/code&gt; function provided by the shell to clear both screen and scrollback. In order to achieve this behavior, you need to add a new shell alias.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;if [[ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]]; then
    alias clear=&#39;vterm_printf &quot;51;Evterm-clear-scrollback&quot;;tput clear&#39;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this in your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]; then
    clear() {
        vterm_printf &quot;51;Evterm-clear-scrollback&quot;;
        tput clear;
    }
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;if [ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]
    function clear
        vterm_printf &quot;51;Evterm-clear-scrollback&quot;;
        tput clear;
    end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These aliases take advantage of the fact that &lt;code&gt;vterm&lt;/code&gt; can execute &lt;code&gt;elisp&lt;/code&gt; commands, as explained below.&lt;/p&gt; 
&lt;p&gt;If it possible to automatically clear the scrollback when the screen is cleared by setting the variable &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt;: When &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt; is non nil, &lt;code&gt;C-l&lt;/code&gt; clears both the screen and the scrollback. When is nil, &lt;code&gt;C-l&lt;/code&gt; only clears the screen. The opposite behavior can be achieved by using the universal prefix (i.e., calling &lt;code&gt;C-u C-l&lt;/code&gt;).&lt;/p&gt; 
&lt;h1&gt;Customization&lt;/h1&gt; 
&lt;h2&gt;&lt;code&gt;vterm-shell&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Shell to run in a new vterm. It defaults to &lt;code&gt;$SHELL&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-environment&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;to add more environment variables there is the custom vterm-environment which has a similar format than the internal Emacs variable process-environment. You can check the documentation with C-h v process-environment for more details.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-term-environment-variable&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Value for the &lt;code&gt;TERM&lt;/code&gt; environment variable. It defaults to &lt;code&gt;xterm-256color&lt;/code&gt;. If &lt;a href=&quot;https://github.com/dieggsy/eterm-256color&quot;&gt;eterm-256color&lt;/a&gt; is installed, setting &lt;code&gt;vterm-term-environment-variable&lt;/code&gt; to &lt;code&gt;eterm-color&lt;/code&gt; improves the rendering of colors in some systems.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;If set to &lt;code&gt;t&lt;/code&gt;, buffers are killed when the associated process is terminated (for example, by logging out the shell). Keeping buffers around it is useful if you need to copy or manipulate the content.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-module-cmake-args&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Compilation flags and arguments to be given to CMake when compiling the module. This string is directly passed to CMake, so it uses the same syntax. At the moment, it main use is for compiling vterm using the system libvterm instead of the one downloaded from GitHub. You can find all the arguments and flags available with &lt;code&gt;cmake -LA&lt;/code&gt; in the build directory.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Controls whether or not to exclude the prompt when copying a line in &lt;code&gt;vterm-copy-mode&lt;/code&gt;. Using the universal prefix before calling &lt;code&gt;vterm-copy-mode-done&lt;/code&gt; will invert the value for that call, allowing you to temporarily override the setting. When a prompt is not found, the whole line is copied.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The variable &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt; determines whether to use the vterm prompt tracking, if false it use the regexp in &lt;code&gt;vterm-copy-prompt-regexp&lt;/code&gt; to search for the prompt.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-enable-manipulate-selection-data-by-osc52&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Vterm support copy text to Emacs kill ring and system clipboard by using OSC 52. See &lt;a href=&quot;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&quot;&gt;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&lt;/a&gt; for more info about OSC 52. For example: send &#39;blabla&#39; to kill ring: printf &quot;\033]52;c;$(printf &quot;%s&quot; &quot;blabla&quot; | base64)\a&quot;&lt;/p&gt; 
&lt;p&gt;tmux can share its copy buffer to terminals by supporting osc52(like iterm2 xterm), you can enable this feature for tmux by : set -g set-clipboard on #osc 52 copy paste share with iterm set -ga terminal-overrides &#39;,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39; set -ga terminal-overrides &#39;,screen*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39;&lt;/p&gt; 
&lt;p&gt;The clipboard querying/clearing functionality offered by OSC 52 is not implemented here, And for security reason, this feature is disabled by default.&quot;&lt;/p&gt; 
&lt;p&gt;This feature need the new way of handling strings with a struct &lt;code&gt;VTermStringFragment&lt;/code&gt; in libvterm. You&#39;d better compile emacs-libvterm with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt;. If you don&#39;t do that, when the content you want to copied is too long, it would be truncated by bug of libvterm.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-buffer-name-string&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;When &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is not nil, vterm renames automatically its own buffers with &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. This string can contain the character &lt;code&gt;%s&lt;/code&gt;, which is substituted with the &lt;em&gt;title&lt;/em&gt; (as defined by the shell, see below). A possible value for &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is &lt;code&gt;vterm %s&lt;/code&gt;, according to which all the vterm buffers will be named &quot;vterm TITLE&quot;.&lt;/p&gt; 
&lt;p&gt;This requires some shell-side configuration to print the title. For example to set the name &quot;HOSTNAME:PWD&quot;, use can you the following:&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd (){ print -Pn &quot;\e]2;%m:%2~\a&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;PROMPT_COMMAND=&quot;${PROMPT_COMMAND:+$PROMPT_COMMAND; }&quot;&#39;echo -ne &quot;\033]0;${HOSTNAME}:${PWD}\007&quot;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function fish_title
    hostname
    echo &quot;:&quot;
    prompt_pwd
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;http://tldp.org/HOWTO/Xterm-Title-4.html&quot;&gt;zsh and bash&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#programmable-title&quot;&gt;fish documentations&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-always-compile-module&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Vterm needs &lt;code&gt;vterm-module&lt;/code&gt; to work. This can be compiled externally, or &lt;code&gt;vterm&lt;/code&gt; will ask the user whether to build the module when &lt;code&gt;vterm&lt;/code&gt; is first called. To avoid this question and always compile the module, set &lt;code&gt;vterm-always-compile-module&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-copy-mode-remove-fake-newlines&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;When not-nil fake newlines are removed on entering copy mode. vterm inserts fake-newlines purely for rendering. When using &lt;code&gt;vterm-copy-mode&lt;/code&gt; these are in conflict with many emacs functions like isearch-forward. if this varialbe is not-nil the fake-newlines are removed on entering copy-mode and re-inserted on leaving copy mode. Also truncate-lines is set to t on entering copy-mode and set to nil on leaving.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-tramp-shells&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The shell that gets run in the vterm for tramp.&lt;/p&gt; 
&lt;p&gt;This has to be a list of pairs of the format: &lt;code&gt;(TRAMP-METHOD SHELL)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;TRAMP-METHOD&lt;/code&gt; is a method string as used by tramp (e.g., &lt;code&gt;&quot;ssh&quot;&lt;/code&gt;). Use t as &lt;code&gt;TRAMP-METHOD&lt;/code&gt; to specify a default shell for all methods. Specific methods always take precedence over &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Set SHELL to &lt;code&gt;&#39;login-shell&lt;/code&gt; to use the user&#39;s login shell on the remote host. The login-shell detection currently works for POSIX-compliant remote hosts that have the &lt;code&gt;getent&lt;/code&gt; command (regular GNU/Linux distros, *BSDs, but not MacOS X unfortunately). You can specify an additional second &lt;code&gt;SHELL&lt;/code&gt; command as a fallback that is used when the login-shell detection fails, e.g., &lt;code&gt;&#39;((&quot;ssh&quot; login-shell &quot;/bin/bash&quot;) ...)&lt;/code&gt; If no second &lt;code&gt;SHELL&lt;/code&gt; command is specified with &lt;code&gt;&#39;login-shell&lt;/code&gt;, vterm will fall back to tramp&#39;s shell.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usee the default login shell for all methods, except for docker. &lt;code&gt;&#39;((t login-shell) (&quot;docker&quot; &quot;/bin/sh&quot;))&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Use the default login shell for ssh and scp, fall back to &quot;/bin/bash&quot;. Use tramp&#39;s default shell for all other methods. &lt;code&gt;&#39;((&quot;ssh&quot; login-shell &quot;/bin/bash&quot;) (&quot;scp&quot; login-shell &quot;/bin/bash&quot;))&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Keybindings&lt;/h2&gt; 
&lt;p&gt;If you want a key to be sent to the terminal, bind it to &lt;code&gt;vterm--self-insert&lt;/code&gt;, or remove it from &lt;code&gt;vterm-mode-map&lt;/code&gt;. By default, &lt;code&gt;vterm.el&lt;/code&gt; binds most of the &lt;code&gt;C-&amp;lt;char&amp;gt;&lt;/code&gt; and &lt;code&gt;M-&amp;lt;char&amp;gt;&lt;/code&gt; keys, &lt;code&gt;&amp;lt;f1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;f12&amp;gt;&lt;/code&gt; and some special keys like &lt;code&gt;&amp;lt;backspace&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt;. Sending a keyboard interrupt is bound to &lt;code&gt;C-c C-c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to send a keypress that is already recognized by Emacs, such as &lt;code&gt;C-g&lt;/code&gt;, use the interactive function &lt;code&gt;vterm-send-next-key&lt;/code&gt;. This can be bound to a key in the &lt;code&gt;vterm-mode-map&lt;/code&gt; like &lt;code&gt;C-q&lt;/code&gt;, in which case pressing &lt;code&gt;C-q C-g&lt;/code&gt; will send a &lt;code&gt;C-g&lt;/code&gt; key to the terminal, and so on for other modified keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(define-key vterm-mode-map (kbd &quot;C-q&quot;) #&#39;vterm-send-next-key)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be useful for controlling an application running in the terminal, such as Emacs or Nano.&lt;/p&gt; 
&lt;h2&gt;Fonts&lt;/h2&gt; 
&lt;p&gt;You can change the font (the &lt;em&gt;face&lt;/em&gt;) used in a vterm with the following code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;vterm-mode-hook
          (lambda ()
            (set (make-local-variable &#39;buffer-face-mode-face) &#39;fixed-pitch)
                 (buffer-face-mode t)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where instead of &lt;code&gt;&#39;fixed-pitch&lt;/code&gt; you specify the face you want to use. The example reported here can be used to force vterm to use a mono-spaced font (the &lt;code&gt;fixed-pitch&lt;/code&gt; face). This is useful when your default font in Emacs is a proportional font.&lt;/p&gt; 
&lt;p&gt;In addition to that, you can disable some text properties (bold, underline, reverse video) setting the relative option to &lt;code&gt;t&lt;/code&gt; (&lt;code&gt;vterm-disable-bold&lt;/code&gt;, &lt;code&gt;vterm-disable-underline&lt;/code&gt;, or &lt;code&gt;vterm-disable-inverse-video&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;You can use another font for vterm buffer&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;vterm-mode-hook
          (lambda ()
               (set (make-local-variable &#39;buffer-face-mode-face) &#39;(:family &quot;IosevkaTerm Nerd Font&quot;))
               (buffer-face-mode t))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Blink cursor&lt;/h2&gt; 
&lt;p&gt;When &lt;code&gt;vterm-ignore-blink-cursor&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, vterm will ignore request from application to turn on or off cursor blink.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt;, cursor in any window may begin to blink or not blink because &lt;code&gt;blink-cursor-mode&lt;/code&gt; is a global minor mode in Emacs, you can use &lt;code&gt;M-x blink-cursor-mode&lt;/code&gt; to toggle.&lt;/p&gt; 
&lt;h2&gt;Colors&lt;/h2&gt; 
&lt;p&gt;Customize the following faces to your liking. It is possible to specify different colors for foreground and background via the &lt;code&gt;:foreground&lt;/code&gt; and &lt;code&gt;:background&lt;/code&gt; attributes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vterm-color-black&lt;/li&gt; 
 &lt;li&gt;vterm-color-red&lt;/li&gt; 
 &lt;li&gt;vterm-color-green&lt;/li&gt; 
 &lt;li&gt;vterm-color-yellow&lt;/li&gt; 
 &lt;li&gt;vterm-color-blue&lt;/li&gt; 
 &lt;li&gt;vterm-color-magenta&lt;/li&gt; 
 &lt;li&gt;vterm-color-cyan&lt;/li&gt; 
 &lt;li&gt;vterm-color-white&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-black&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-red&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-green&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-yellow&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-blue&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-magenta&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-cyan&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-white&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Directory tracking and Prompt tracking&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;directory tracking&lt;/em&gt;. If this feature is enabled, the default directory in Emacs and the current working directory in &lt;code&gt;vterm&lt;/code&gt; are synced. As a result, interactive functions that ask for a path or a file (e.g., &lt;code&gt;dired&lt;/code&gt; or &lt;code&gt;find-file&lt;/code&gt;) will do so starting from the current location.&lt;/p&gt; 
&lt;p&gt;And &lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;prompt tracking&lt;/em&gt;. If this feature is enabled, Emacs knows where the prompt ends, you needn&#39;t customize &lt;code&gt;term-prompt-regexp&lt;/code&gt; any more. Then you can use &lt;code&gt;vterm-next-prompt&lt;/code&gt; and &lt;code&gt;vterm-previous-prompt&lt;/code&gt; moving to end of next/previous prompt. The default keybinding is &lt;code&gt;C-c C-n&lt;/code&gt; and &lt;code&gt;C-c C-p&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;And &lt;code&gt;vterm-beginning-of-line&lt;/code&gt; would move the point to the first character after the shell prompt on this line. If the point is already there, move to the beginning of the line. The default keybinding is &lt;code&gt;C-a&lt;/code&gt; in &lt;code&gt;vterm-copy-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;And &lt;code&gt;vterm--at-prompt-p&lt;/code&gt; would check whether the cursor is at the point just after the shell prompt.&lt;/p&gt; 
&lt;p&gt;Directory tracking and Prompt tracking requires some configuration, as the shell has to be instructed to share the relevant information with Emacs. The following pieces of code assume that you have the function &lt;code&gt;vterm_printf&lt;/code&gt; as defined in section &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&quot;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this at the end of your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;vterm_prompt_end() {
    vterm_printf &quot;51;A$(whoami)@$(hostname):$(pwd)&quot;
}
setopt PROMPT_SUBST
PROMPT=$PROMPT&#39;%{$(vterm_prompt_end)%}&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this at the end of your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vterm_prompt_end(){
    vterm_printf &quot;51;A$(whoami)@$(hostname):$(pwd)&quot;
}
PS1=$PS1&#39;\[$(vterm_prompt_end)\]&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;, put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function vterm_prompt_end;
    vterm_printf &#39;51;A&#39;(whoami)&#39;@&#39;(hostname)&#39;:&#39;(pwd)
end
functions --copy fish_prompt vterm_old_fish_prompt
function fish_prompt --description &#39;Write out the prompt; do not replace this. Instead, put this at end of your file.&#39;
    # Remove the trailing newline from the original prompt. This is done
    # using the string builtin from fish, but to make sure any escape codes
    # are correctly interpreted, use %b for printf.
    printf &quot;%b&quot; (string join &quot;\n&quot; (vterm_old_fish_prompt))
    vterm_prompt_end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here we are using the function &lt;code&gt;vterm_printf&lt;/code&gt; that we have discussed above, so make sure that this function is defined in your configuration file.&lt;/p&gt; 
&lt;p&gt;Directory tracking works on remote servers too. In case the hostname of your remote machine does not match the actual hostname needed to connect to that server, change &lt;code&gt;$(hostname)&lt;/code&gt; with the correct one. For example, if the correct hostname is &lt;code&gt;foo&lt;/code&gt; and the username is &lt;code&gt;bar&lt;/code&gt;, you should have something like&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;HOSTNAME=foo
USER=baz
vterm_printf &quot;51;A$USER@$HOSTNAME:$(pwd)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Message passing&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can read and execute commands. At the moment, a command is passed by providing a specific escape sequence. For example, to evaluate&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(message &quot;Hello!&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;use&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;printf &quot;\e]51;Emessage \&quot;Hello\!\&quot;\e\\&quot;
# or
vterm_printf &quot;51;Emessage \&quot;Hello\!\&quot;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The commands that are understood are defined in the setting &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;As &lt;code&gt;split-string-and-unquote&lt;/code&gt; is used the parse the passed string, double quotes and backslashes need to be escaped via backslash. A convenient shell function to automate the substitution is&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_cmd() {
    local vterm_elisp
    vterm_elisp=&quot;&quot;
    while [ $# -gt 0 ]; do
        vterm_elisp=&quot;$vterm_elisp&quot;&quot;$(printf &#39;&quot;%s&quot; &#39; &quot;$(printf &quot;%s&quot; &quot;$1&quot; | sed -e &#39;s|\\|\\\\|g&#39; -e &#39;s|&quot;|\\&quot;|g&#39;)&quot;)&quot;
        shift
    done
    vterm_printf &quot;51;E$vterm_elisp&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function vterm_cmd --description &#39;Run an Emacs command among the ones been defined in vterm-eval-cmds.&#39;
    set -l vterm_elisp ()
    for arg in $argv
        set -a vterm_elisp (printf &#39;&quot;%s&quot; &#39; (string replace -a -r &#39;([\\\\&quot;])&#39; &#39;\\\\\\\\$1&#39; $arg))
    end
    vterm_printf &#39;51;E&#39;(string join &#39;&#39; $vterm_elisp)
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we can write shell functions to call the ones defined in &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;find_file() {
    vterm_cmd find-file &quot;$(realpath &quot;${@:-.}&quot;)&quot;
}

say() {
    vterm_cmd message &quot;%s&quot; &quot;$*&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or for &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function find_file
    set -q argv[1]; or set argv[1] &quot;.&quot;
    vterm_cmd find-file (realpath &quot;$argv&quot;)
end

function say
    vterm_cmd message &quot;%s&quot; &quot;$argv&quot;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This newly defined &lt;code&gt;find_file&lt;/code&gt; function can now be used inside &lt;code&gt;vterm&lt;/code&gt; as&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;find_file name_of_file_in_local_directory
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you call &lt;code&gt;find_file&lt;/code&gt; without specifying any file (you just execute &lt;code&gt;find_file&lt;/code&gt; in your shell), &lt;code&gt;dired&lt;/code&gt; will open with the current directory.&lt;/p&gt; 
&lt;p&gt;As an example, say you like having files opened below the current window. You could add the command to do it on the lisp side like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(push (list &quot;find-file-below&quot;
            (lambda (path)
              (if-let* ((buf (find-file-noselect path))
                        (window (display-buffer-below-selected buf nil)))
                  (select-window window)
                (message &quot;Failed to open file: %s&quot; path))))
      vterm-eval-cmds)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then add the command in your &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;open_file_below() {
    vterm_cmd find-file-below &quot;$(realpath &quot;${@:-.}&quot;)&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can open any file from inside your shell.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;open_file_below ~/Documents
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Shell-side configuration files&lt;/h2&gt; 
&lt;p&gt;The configurations described in earlier sections are combined in &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/etc/&quot;&gt;&lt;code&gt;etc/&lt;/code&gt;&lt;/a&gt;. These can be appended to or loaded into your user configuration file. Alternatively, they can be installed system-wide, for example in &lt;code&gt;/etc/bash/bashrc.d/&lt;/code&gt;, &lt;code&gt;/etc/profile.d/&lt;/code&gt; (for &lt;code&gt;zsh&lt;/code&gt;), or &lt;code&gt;/etc/fish/conf.d/&lt;/code&gt; for &lt;code&gt;fish&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When using vterm Emacs sets the environment variable INSIDE_EMACS in the subshell to ‘vterm’. Usually the programs check this variable to determine whether they are running inside Emacs.&lt;/p&gt; 
&lt;p&gt;Vterm also sets an extra variable EMACS_VTERM_PATH to the place where the vterm library is installed. This is very useful because when vterm is installed from melpa the Shell-side configuration files are in the EMACS_VTERM_PATH inside the /etc sub-directory. After a package update, the directory name changes, so, a code like this in your bashrc could be enough to load always the latest version of the file from the right location without coping any file manually.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;if [[ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]] \
    &amp;amp;&amp;amp; [[ -n ${EMACS_VTERM_PATH} ]] \
    &amp;amp;&amp;amp; [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
	source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Frequently Asked Questions and Problems&lt;/h2&gt; 
&lt;h3&gt;How can I increase the size of the scrollback?&lt;/h3&gt; 
&lt;p&gt;By default, the scrollback can contain up to 1000 lines per each vterm buffer. You can increase this up to 100000 by changing the variable &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. If you want to increase it further, you have to edit the file &lt;code&gt;vterm-module.h&lt;/code&gt;, change the variable &lt;code&gt;SB_MAX&lt;/code&gt;, and set the new value for &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. The potential maximum memory consumption of vterm buffers increases with &lt;code&gt;vterm-max-scrollback&lt;/code&gt;, so setting &lt;code&gt;SB_MAX&lt;/code&gt; to extreme values may lead to system instabilities and crashes.&lt;/p&gt; 
&lt;h3&gt;How can I automatically close vterm buffers when the process is terminated?&lt;/h3&gt; 
&lt;p&gt;There is an option for that: set &lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;The package does not compile, I have errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;.&lt;/h3&gt; 
&lt;p&gt;The version of &lt;code&gt;libvterm&lt;/code&gt; installed on your system is too old. You should let &lt;code&gt;emacs-libvterm&lt;/code&gt; download &lt;code&gt;libvterm&lt;/code&gt; for you. You can either uninstall your libvterm, or instruct Emacs to ignore the system libvterm. If you are compiling from Emacs, you can do this by setting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq vterm-module-cmake-args &quot;-DUSE_SYSTEM_LIBVTERM=no&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and compile again. If you are compiling with CMake, use the flag &lt;code&gt;-DUSE_SYSTEM_LIBVTERM=no&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;&amp;lt;C-backspace&amp;gt;&lt;/code&gt; doesn&#39;t kill previous word.&lt;/h3&gt; 
&lt;p&gt;This can be fixed by rebinding the key to what &lt;code&gt;C-w&lt;/code&gt; does:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(define-key vterm-mode-map (kbd &quot;&amp;lt;C-backspace&amp;gt;&quot;)
    (lambda () (interactive) (vterm-send-key (kbd &quot;C-w&quot;))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;counsel-yank-pop&lt;/code&gt; doesn&#39;t work.&lt;/h3&gt; 
&lt;p&gt;Add this piece of code to your configuration file to make &lt;code&gt;counsel&lt;/code&gt; use the correct function to yank in vterm buffers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun vterm-counsel-yank-pop-action (orig-fun &amp;amp;rest args)
  (if (equal major-mode &#39;vterm-mode)
      (let ((inhibit-read-only t)
            (yank-undo-function (lambda (_start _end) (vterm-undo))))
        (cl-letf (((symbol-function &#39;insert-for-yank)
               (lambda (str) (vterm-send-string str t))))
            (apply orig-fun args)))
    (apply orig-fun args)))

(advice-add &#39;counsel-yank-pop-action :around #&#39;vterm-counsel-yank-pop-action)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How can I get the local directory without shell-side configuration?&lt;/h3&gt; 
&lt;p&gt;We recommend that you set up shell-side configuration for reliable directory tracking. If you cannot do it, a possible workaround is the following.&lt;/p&gt; 
&lt;p&gt;On most GNU/Linux systems, you can read current directory from &lt;code&gt;/proc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun vterm-directory-sync ()
  &quot;Synchronize current working directory.&quot;
  (interactive)
  (when vterm--process
    (let* ((pid (process-id vterm--process))
           (dir (file-truename (format &quot;/proc/%d/cwd/&quot; pid))))
      (setq default-directory dir))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A possible application of this function is in combination with &lt;code&gt;find-file&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(advice-add #&#39;find-file :before #&#39;vterm-directory-sync)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method does not work on remote machines.&lt;/p&gt; 
&lt;h3&gt;How can I get the directory tracking in a more understandable way?&lt;/h3&gt; 
&lt;p&gt;If you looked at the recommended way to set-up directory tracking, you will have noticed that it requires printing obscure code like &lt;code&gt;\e]2;%m:%2~\a&lt;/code&gt; (unless you are using &lt;code&gt;fish&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;There is another way to achieve this behavior. Define a shell function, on a local host you can simply use&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_set_directory() {
    vterm_cmd update-pwd &quot;$PWD/&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On a remote one, use instead&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_set_directory() {
    vterm_cmd update-pwd &quot;/-:&quot;&quot;$USER&quot;&quot;@&quot;&quot;$HOSTNAME&quot;&quot;:&quot;&quot;$PWD/&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, for &lt;code&gt;zsh&lt;/code&gt;, add this function to the &lt;code&gt;chpwd&lt;/code&gt; hook:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd (){ vterm_set_directory }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, append it to the prompt:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;PROMPT_COMMAND=&quot;${PROMPT_COMMAND:+$PROMPT_COMMAND; }vterm_set_directory&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, add &lt;code&gt;update-pwd&lt;/code&gt; to the list of commands that Emacs is allowed to execute from vterm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;vterm-eval-cmds &#39;(&quot;update-pwd&quot; (lambda (path) (setq default-directory path))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;When evil-mode is enabled, the cursor moves back in normal state, and this messes directory tracking&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;evil-collection&lt;/code&gt; provides a solution for this problem. If you do not want to use &lt;code&gt;evil-collection&lt;/code&gt;, you can add the following code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun evil-collection-vterm-escape-stay ()
&quot;Go back to normal state but don&#39;t move
cursor backwards. Moving cursor backwards is the default vim behavior but it is
not appropriate in some cases like terminals.&quot;
(setq-local evil-move-cursor-back nil))

(add-hook &#39;vterm-mode-hook #&#39;evil-collection-vterm-escape-stay)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Related packages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jixiuf/vterm-toggle&quot;&gt;vterm-toggle&lt;/a&gt;: Toggles between a vterm and the current buffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/suonlight/multi-libvterm&quot;&gt;multi-libvterm&lt;/a&gt;: Multiterm for emacs-libvterm&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Appendix&lt;/h2&gt; 
&lt;h3&gt;Breaking changes&lt;/h3&gt; 
&lt;p&gt;Obsolete variables will be removed in version 0.1.&lt;/p&gt; 
&lt;h4&gt;August 2022&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-send-C-[a-z]&lt;/code&gt; &lt;code&gt;vterm-send-M-[a-z]&lt;/code&gt; &lt;code&gt;vterm-define-key&lt;/code&gt; &lt;code&gt;vterm-send-{up/down/left/right/prior/next/meta-dot/meta-comma/ctrl-slash}&lt;/code&gt; were obsolete, please use &lt;code&gt;vterm-send&lt;/code&gt; or &lt;code&gt;vterm-send-key&lt;/code&gt; or &lt;code&gt;vterm--self-insert&lt;/code&gt; instead.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;October 2020&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-disable-bold-font&lt;/code&gt; was renamed to &lt;code&gt;vterm-disable-bold&lt;/code&gt; to uniform it with the other similar options.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;July 2020&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-use-vterm-prompt&lt;/code&gt; was renamed to &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; is set to &lt;code&gt;t&lt;/code&gt; by default.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;April 2020&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; was renamed to &lt;code&gt;vterm-clear-scrollback-when-clearning&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vterm-set-title-functions&lt;/code&gt; was removed. In its place, there is a new custom option &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/vterm-buffer-name-string&quot;&gt;vterm-buffer-name-string&lt;/a&gt; for documentation.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>emacs-evil/evil</title>
      <link>https://github.com/emacs-evil/evil</link>
      <description>&lt;p&gt;The extensible vi layer for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png&quot; alt=&quot;An extensible vi layer for Emacs&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/emacs-evil/evil/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/emacs-evil/evil/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/evil&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/evil-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/evil&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/evil-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://elpa.nongnu.org/nongnu/evil.html&quot;&gt;&lt;img src=&quot;http://elpa.nongnu.org/nongnu/evil.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://evil.readthedocs.io/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/evil/badge/?version=latest&quot; alt=&quot;Documentation Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License: GPL v3&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Evil is an &lt;strong&gt;e&lt;/strong&gt;xtensible &lt;strong&gt;vi&lt;/strong&gt; &lt;strong&gt;l&lt;/strong&gt;ayer for &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;. It emulates the main features of &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;, and provides facilities for writing custom extensions. Also see our page on &lt;a href=&quot;http://emacswiki.org/emacs/Evil&quot;&gt;EmacsWiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el&quot;&gt;official documentation&lt;/a&gt; for installation instructions. We recommend using &lt;em&gt;package.el&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;As a quickstart, you can add the following code to your Emacs init file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Set up package.el to work with MELPA
(require &#39;package)
(add-to-list &#39;package-archives
             &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;))
(package-initialize)
(package-refresh-contents)

;; Download Evil
(unless (package-installed-p &#39;evil)
  (package-install &#39;evil))

;; Enable Evil
(require &#39;evil)
(evil-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Evil requires Emacs 24.1 or later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Evil requires any of the following for &lt;code&gt;C-r&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;undo-redo&lt;/code&gt; from Emacs 28&lt;/li&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://gitlab.com/tsc25/undo-tree&quot;&gt;undo-tree&lt;/a&gt; package (available via GNU ELPA)&lt;/li&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://codeberg.org/ideasman42/emacs-undo-fu&quot;&gt;undo-fu&lt;/a&gt; package (available via MELPA and NonGNU ELPA)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For the motions &lt;code&gt;g;&lt;/code&gt; &lt;code&gt;g,&lt;/code&gt; and for the last-change-register &lt;code&gt;.&lt;/code&gt;, Evil requires the &lt;a href=&quot;https://github.com/emacs-evil/goto-chg&quot;&gt;goto-chg.el&lt;/a&gt; package (available via MELPA and NonGNU ELPA), which provides the functions &lt;code&gt;goto-last-change&lt;/code&gt; and &lt;code&gt;goto-last-change-reverse&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Emacs 24.1 and 24.2 Evil also requires &lt;a href=&quot;https://elpa.gnu.org/packages/cl-lib.html&quot;&gt;cl-lib&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;The latest version of the documentation is readable online &lt;a href=&quot;https://evil.readthedocs.io/en/latest/index.html&quot;&gt;here&lt;/a&gt;. It is also available as &lt;a href=&quot;https://evil.readthedocs.io/_/downloads/en/stable/pdf/&quot;&gt;PDF&lt;/a&gt; and as &lt;a href=&quot;https://evil.readthedocs.io/_/downloads/en/stable/epub/&quot;&gt;EPUB&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Mailing list&lt;/h1&gt; 
&lt;p&gt;Evil is discussed at the &lt;a href=&quot;http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list&quot;&gt;gmane.emacs.vim-emulation&lt;/a&gt; mailing list.&lt;/p&gt; 
&lt;h1&gt;IRC&lt;/h1&gt; 
&lt;p&gt;Visit us on &lt;code&gt;irc.libera.chat #evil-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Contribution&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/emacs-evil/evil/raw/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines for issues and pull requests.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>radian-software/straight.el</title>
      <link>https://github.com/radian-software/straight.el</link>
      <description>&lt;p&gt;🍀 Next-generation, purely functional package manager for the Emacs hacker.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;straight.el&lt;/strong&gt;: next-generation, purely functional package manager for the &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; hacker.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Please check out the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#faq&quot;&gt;FAQ&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#news&quot;&gt;news&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/radian-software/straight.el&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/radian-software/straight.el.svg?sanitize=true&quot; alt=&quot;Gitter chat&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- longlines-start --&gt; 
&lt;!-- toc --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#guiding-principles&quot;&gt;Guiding principles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&quot;&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#install-packages&quot;&gt;Install packages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#but-what-about-my-fork-of-obscure-el-package&quot;&gt;But what about my fork of (obscure .el package)?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package&quot;&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#edit-packages-locally&quot;&gt;Edit packages locally&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#automatic-repository-management&quot;&gt;Automatic repository management&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#configuration-reproducibility&quot;&gt;Configuration reproducibility&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&quot;&gt;Conceptual overview&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#tldr&quot;&gt;TL;DR&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-is-a-package&quot;&gt;What is a package?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-packages-come-from&quot;&gt;Where do packages come from?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-this-look-like-on-disk&quot;&gt;What does this look like on disk?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-repositories-come-from&quot;&gt;Where do repositories come from?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-it-mean-to-load-a-package&quot;&gt;What does it mean to load a package?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-recipes-come-from&quot;&gt;Where do recipes come from?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-happens-when-i-call-straight-use-package&quot;&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-it-mean-to-register-a-package&quot;&gt;What does it mean to register a package?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-does-straightel-know-when-to-rebuild-packages&quot;&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-does-straightel-know-what-packages-are-installed&quot;&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-other-package-managers&quot;&gt;Comparison to other package managers&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#tldr-1&quot;&gt;TL;DR&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-packageel&quot;&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel&quot;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-packageel&quot;&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-notes&quot;&gt;Additional notes&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-quelpa&quot;&gt;Comparison to Quelpa&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-1&quot;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-quelpa&quot;&gt;Advantages of Quelpa&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-notes-1&quot;&gt;Additional notes&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-cask&quot;&gt;Comparison to Cask&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-2&quot;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-cask&quot;&gt;Advantages of Cask&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-el-get&quot;&gt;Comparison to el-get&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-3&quot;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-el-get&quot;&gt;Advantages of el-get&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-borg&quot;&gt;Comparison to Borg&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-4&quot;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-borg&quot;&gt;Advantages of Borg&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-the-manual-approach&quot;&gt;Comparison to the manual approach&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-5&quot;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-the-manual-approach&quot;&gt;Advantages of the manual approach&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#user-manual&quot;&gt;User manual&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#bootstrapping-straightel&quot;&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&quot;&gt;Installing packages programmatically&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-with-a-custom-recipe&quot;&gt;Installing with a custom recipe&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-arguments-to-straight-use-package&quot;&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#variants-of-straight-use-package&quot;&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-when-packages-are-built&quot;&gt;Customizing when packages are built&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#custom-or-manual-modification-detection&quot;&gt;Custom or manual modification detection&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#summary-of-options-for-package-modification-detection&quot;&gt;Summary of options for package modification detection&lt;/a&gt; 
        &lt;ul&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#find-at-startup&quot;&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#check-on-save&quot;&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#watch-files&quot;&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-built&quot;&gt;Customizing how packages are built&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#autoload-generation&quot;&gt;Autoload generation&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#byte-compilation&quot;&gt;Byte compilation&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#native-compilation&quot;&gt;Native compilation&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#symbolic-links&quot;&gt;Symbolic links&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-made-available&quot;&gt;Customizing how packages are made available&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#hooks-run-by-straight-use-package&quot;&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;The recipe format&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&quot;&gt;Version-control backends&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&quot;&gt;Git backend&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#deprecated-upstream-keyword&quot;&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&quot;&gt;Recipe lookup&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#updating-recipe-repositories&quot;&gt;Updating recipe repositories&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&quot;&gt;Customizing recipe repositories&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#gnu-elpa&quot;&gt;GNU ELPA&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#emacsmirror&quot;&gt;Emacsmirror&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#defining-new-recipe-repositories&quot;&gt;Defining new recipe repositories&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&quot;&gt;Overriding recipes&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&quot;&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&quot;&gt;Interactive usage&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&quot;&gt;Version control operations&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&quot;&gt;Lockfile management&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-profile-system&quot;&gt;The profile system&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#packages-and-the-init-file&quot;&gt;Packages and the init-file&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#using-straightel-to-reproduce-bugs&quot;&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#-in-other-packages&quot;&gt;... in other packages&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#-in-straightel-itself&quot;&gt;... in &lt;code&gt;straight.el&lt;/code&gt; itself&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#using-straightel-to-develop-packages&quot;&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-other-packages&quot;&gt;Integration with other packages&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&quot;&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#loading-packages-conditionally&quot;&gt;Loading packages conditionally&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-packageel&quot;&gt;&quot;Integration&quot; with &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-flycheck&quot;&gt;Integration with Flycheck&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-hydra&quot;&gt;Integration with Hydra&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#miscellaneous&quot;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&quot;&gt;Developer manual&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#low-level-functions&quot;&gt;Low-level functions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#trivia&quot;&gt;Trivia&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comments-and-docstrings&quot;&gt;Comments and docstrings&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#faq&quot;&gt;FAQ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#my-init-time-got-slower&quot;&gt;My init time got slower&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#could-not-find-package-in-recipe-repositories&quot;&gt;&quot;Could not find package in recipe repositories&quot;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-update-melpa-et-al&quot;&gt;How do I update MELPA et al.?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#my-use-package-form-isnt-working-properly&quot;&gt;My &lt;code&gt;use-package&lt;/code&gt; form isn&#39;t working properly&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-uninstall-a-package&quot;&gt;How do I uninstall a package?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-wrong-version-of-my-package-was-loaded&quot;&gt;The wrong version of my package was loaded&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#i-get-could-not-read-usernamepassword-errors&quot;&gt;I get &quot;could not read username/password&quot; errors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-pin-package-versions-or-use-only-tagged-releases&quot;&gt;How do I pin package versions or use only tagged releases?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-can-i-use-the-built-in-version-of-a-package&quot;&gt;How can I use the built-in version of a package?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#news&quot;&gt;News&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#jan-1-2021&quot;&gt;Jan 1, 2021&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#april-19-2020&quot;&gt;April 19, 2020&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- tocstop --&gt; 
&lt;!-- longlines-stop --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install Emacs packages listed on &lt;a href=&quot;http://melpa.org/#/&quot;&gt;MELPA&lt;/a&gt;, &lt;a href=&quot;https://elpa.gnu.org/&quot;&gt;GNU ELPA&lt;/a&gt;, or &lt;a href=&quot;https://emacsmirror.net/&quot;&gt;Emacsmirror&lt;/a&gt;, or provide your own recipes.&lt;/li&gt; 
 &lt;li&gt;Packages are cloned as Git (or other) repositories, not as opaque tarballs.&lt;/li&gt; 
 &lt;li&gt;Make changes to a package simply by editing its source code, no additional steps required. Contribute upstream just by pushing your changes.&lt;/li&gt; 
 &lt;li&gt;Powerful interactive workflows (with popups à la Magit) for performing bulk maintenance on the Git repositories for your packages.&lt;/li&gt; 
 &lt;li&gt;Save and load version lockfiles that ensure 100% reproducibility for your Emacs configuration. Package state is defined entirely by your init-file and (optional) lockfile, with no extra persistent data floating around.&lt;/li&gt; 
 &lt;li&gt;Specify package descriptions using a powerful format based on &lt;a href=&quot;https://github.com/melpa/melpa#recipe-format&quot;&gt;MELPA recipes&lt;/a&gt; (with a familiar but improved syntax).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; integration.&lt;/li&gt; 
 &lt;li&gt;Modular: you can install your packages manually and straight.el will load them for you. Or you can also have straight.el install your packages, while you provide the recipes explicitly. Or straight.el can also fetch recipes, if you want. Bulk repository management and package updates are also optional.&lt;/li&gt; 
 &lt;li&gt;Extensible APIs to add new recipe sources and version-control backends.&lt;/li&gt; 
 &lt;li&gt;The cleanest source code you&#39;ve ever seen. &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#comments-and-docstrings&quot;&gt;45%&lt;/a&gt; of &lt;code&gt;straight.el&lt;/code&gt; is comments and docstrings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; is a replacement for &lt;code&gt;package.el&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;use-package&lt;/code&gt;. &lt;code&gt;use-package&lt;/code&gt; can be used with either &lt;code&gt;package.el&lt;/code&gt; or &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Guiding principles&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Init-file and version lockfiles as the sole source of truth. No persistent state kept elsewhere.&lt;/li&gt; 
 &lt;li&gt;100% reproducible package management, accounting for changes in packages, recipe repositories, configuration, and the package manager itself.&lt;/li&gt; 
 &lt;li&gt;No support whatsoever for &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Edit packages by editing their code, no extra steps required. Allow for manual version control operations.&lt;/li&gt; 
 &lt;li&gt;Compatibility with MELPA, GNU ELPA, and Emacsmirror.&lt;/li&gt; 
 &lt;li&gt;Trivial to quickly try out a package without permanently installing it.&lt;/li&gt; 
 &lt;li&gt;Good for reproducing an issue with &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; supports a minimum version of Emacs 25.1, and works on macOS, Windows, and most flavors of Linux. You must install &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; in order to use &lt;code&gt;straight.el&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;First, place the following bootstrap code in your init-file:&lt;/p&gt; 
&lt;!-- longlines-start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        &quot;straight/repos/straight.el/bootstrap.el&quot;
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         &quot;https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el&quot;
         &#39;silent &#39;inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil &#39;nomessage))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(If &lt;code&gt;raw.githubusercontent.com&lt;/code&gt; is blocked by your ISP, try replacing the URL with &lt;code&gt;https://radian-software.github.io/straight.el/install.el&lt;/code&gt;. Or you can clone &lt;code&gt;straight.el&lt;/code&gt; manually to &lt;code&gt;~/.emacs.d/straight/repos/straight.el&lt;/code&gt;.)&lt;/p&gt; 
&lt;!-- longlines-stop --&gt; 
&lt;p&gt;Here are some variables you may be interested in (some of them must be set &lt;strong&gt;before&lt;/strong&gt; the bootstrap code runs, if they might affect how &lt;code&gt;straight.el&lt;/code&gt; itself is loaded):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&quot;&gt;&lt;code&gt;straight-repository-branch&lt;/code&gt;&lt;/a&gt; -- to get the latest version of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;code&gt;develop&lt;/code&gt; branch, rather than the default &lt;code&gt;master&lt;/code&gt; which is updated less frequently but which is ostensibly more stable.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-when-packages-are-built&quot;&gt;&lt;code&gt;straight-check-for-modifications&lt;/code&gt;&lt;/a&gt; -- to configure an alternate way for &lt;code&gt;straight.el&lt;/code&gt; to check for modifications made to package source code, rather than the default (which is 100% reliable, but has a minor cost to startup time).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&quot;&gt;&lt;code&gt;straight-use-package-by-default&lt;/code&gt;&lt;/a&gt; -- if you use &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, then this makes each &lt;code&gt;use-package&lt;/code&gt; form also invoke &lt;code&gt;straight.el&lt;/code&gt; to install the package, unless otherwise specified.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&quot;&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;&lt;/a&gt; -- by default, &lt;code&gt;straight.el&lt;/code&gt; clones over HTTPS. If you need packages from private Git repositories in your configuration, then you might want to use SSH instead.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight-base-dir&lt;/code&gt; -- by default, straight&#39;s main directory, containing its build files and package repos, is located in &lt;code&gt;user-emacs-directory&lt;/code&gt;. You can change the location of straight&#39;s base directory via this variable.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight-build-dir&lt;/code&gt; -- by default, the directory in which packages are built is located at &lt;code&gt;straight-base-dir&lt;/code&gt;/build. Changing this variable will change the name of that directory and the name of the build cache file (unless &lt;code&gt;straight-build-cache-fixed-name&lt;/code&gt; is non-nil).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight-use-version-specific-build-dir&lt;/code&gt; -- if non-nil, use an Emacs-version-specific &lt;code&gt;straight-build-dir&lt;/code&gt; directory to support running multiple versions of Emacs against the same &lt;code&gt;user-emacs-directory&lt;/code&gt;. There is a minor performance penalty on startup because &lt;code&gt;straight.el&lt;/code&gt; will not be byte-compiled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You should remove any code that relates to &lt;code&gt;package.el&lt;/code&gt;; for example, references to &lt;code&gt;package-initialize&lt;/code&gt;, &lt;code&gt;package-archives&lt;/code&gt;, and (if you&#39;re using &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;) &lt;code&gt;:ensure&lt;/code&gt; or &lt;code&gt;use-package-always-ensure&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Users of Emacs versions &amp;gt;= 27 will want to add:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq package-enable-at-startup nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to their &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html&quot;&gt;early init-file&lt;/a&gt; to prevent package.el loading packages prior to their init-file loading.&lt;/p&gt; 
&lt;p&gt;While it is technically possible to use both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; at the same time, there is no real reason to, and it might result in oddities like packages getting loaded more than once.&lt;/p&gt; 
&lt;h4&gt;Debugging&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Sometimes, in a corporate environment, &lt;code&gt;url-retrieve-synchronously&lt;/code&gt; may not work and &lt;code&gt;straight.el&lt;/code&gt; will be unable to download the installation script mentioned in the bootstrap snippet. In this case, you may simply clone this repository into &lt;code&gt;~/.emacs.d/straight/repos/straight.el&lt;/code&gt; and check out your desired revision/branch. The installation script is just a more convenient way of doing that automatically when necessary (and looking up the correct revision of &lt;code&gt;straight.el&lt;/code&gt; in your lockfile, if any).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On macOS, you may receive an error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Could not create connection to raw.githubusercontent.com:443
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is likely because you are using an ancient version of Emacs which has a broken TLS configuration. Upgrade with &lt;code&gt;brew upgrade emacs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install packages&lt;/h3&gt; 
&lt;p&gt;Out of the box, you can install any package listed on &lt;a href=&quot;http://melpa.org/#/&quot;&gt;MELPA&lt;/a&gt;, &lt;a href=&quot;https://elpa.gnu.org/&quot;&gt;GNU ELPA&lt;/a&gt;, or &lt;a href=&quot;https://emacsmirror.net/&quot;&gt;Emacsmirror&lt;/a&gt;, which is to say any package in existence. (Although MELPA is used as a package listing, packages are installed by cloning their Git repositories rather than by downloading tarballs like &lt;code&gt;package.el&lt;/code&gt; does.) To install a package temporarily (until you restart Emacs), run &lt;code&gt;M-x straight-use-package&lt;/code&gt; and select the package you want. To install a package permanently, place a call to &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;el-patch)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that installing a package will activate all of its autoloads, but it will not actually &lt;code&gt;require&lt;/code&gt; the features provided by the package. This means that you might need to use &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;autoload&lt;/code&gt; for some antiquated packages that do not properly declare their autoloads.&lt;/p&gt; 
&lt;p&gt;To learn more, see the documentation on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&quot;&gt;the package lifecycle&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;But what about my fork of (obscure .el package)?&lt;/h3&gt; 
&lt;p&gt;Instead of passing just a package name to &lt;code&gt;straight-use-package&lt;/code&gt;, you can pass a list (&quot;recipe&quot;). You can see the default recipe for any given package by running &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, the recipe for &lt;code&gt;el-patch&lt;/code&gt; is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(el-patch :type git :host github :repo &quot;radian-software/el-patch&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So, if you have forked &lt;code&gt;el-patch&lt;/code&gt; and you want to use your fork instead of the upstream, do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;(el-patch :type git :host github :repo &quot;your-name/el-patch&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In fact, &lt;code&gt;straight.el&lt;/code&gt; has explicit support for using a forked package, since this is so common:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;(el-patch :type git :host github :repo &quot;radian-software/el-patch&quot;
            :fork (:host github
                   :repo &quot;your-name/el-patch&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the above, &lt;code&gt;:type git&lt;/code&gt; may be omitted if you leave &lt;code&gt;straight-default-vc&lt;/code&gt; at its default value of &lt;code&gt;git&lt;/code&gt;. Parts of the &lt;code&gt;:fork&lt;/code&gt; keyword may be omitted as well. One common case is when your fork is on the same host and has the same name as the upstream repository. In this case, assuming &lt;code&gt;straight-host-usernames&lt;/code&gt; is set, specifying a fork is as simple as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;(el-patch :type git :host github :repo &quot;radian-software/el-patch&quot;
            :fork t))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; doesn&#39;t do any Git operations during startup unless it needs to clone a package from scratch. This is for performance. You can explicitly request for &lt;code&gt;straight.el&lt;/code&gt; to fix up the Git configuration after you change a package recipe, e.g. to add a fork. See &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#automatic-repository-management&quot;&gt;Automatic repository management&lt;/a&gt; below.&lt;/p&gt; 
&lt;p&gt;To learn more, see the documentation on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;the recipe format&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&quot;&gt;the Git backend&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; is a macro that provides convenient syntactic sugar for many common tasks related to installing and configuring Emacs packages. Of course, it does not actually install the packages, but instead defers to a package manager, like &lt;code&gt;straight.el&lt;/code&gt; (which comes with &lt;code&gt;use-package&lt;/code&gt; integration by default).&lt;/p&gt; 
&lt;p&gt;To use &lt;code&gt;use-package&lt;/code&gt;, first install it with &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;use-package)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now &lt;code&gt;use-package&lt;/code&gt; will use &lt;code&gt;straight.el&lt;/code&gt; to automatically install missing packages if you provide &lt;code&gt;:straight t&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package el-patch
  :straight t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can still provide a custom recipe for the package:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package el-patch
  :straight (el-patch :type git :host github :repo &quot;radian-software/el-patch&quot;
                      :fork (:host github
                             :repo &quot;your-name/el-patch&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;:straight&lt;/code&gt; keyword accepts backquoted forms. This makes it possible to dynamically compute part of the recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package el-patch
  :straight `(el-patch :type git
                       :repo ,(alist-get &#39;el-patch my-package-urls)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Specifying &lt;code&gt;:straight t&lt;/code&gt; is unnecessary if you set &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to a non-nil value. (Note that the variable &lt;code&gt;use-package-always-ensure&lt;/code&gt; is associated with &lt;code&gt;package.el&lt;/code&gt;, and you should not use it with &lt;code&gt;straight.el&lt;/code&gt;.)&lt;/p&gt; 
&lt;p&gt;To learn more, see the documentation on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&quot;&gt;&lt;code&gt;straight.el&lt;/code&gt;&#39;s &lt;code&gt;use-package&lt;/code&gt; integration&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Edit packages locally&lt;/h3&gt; 
&lt;p&gt;One of the biggest strengths of &lt;code&gt;straight.el&lt;/code&gt; is that editing packages locally is trivial. You literally just edit the files (&lt;code&gt;find-function&lt;/code&gt; and friends all work as you would expect). Packages will be automatically rebuilt if necessary when Emacs next starts up.&lt;/p&gt; 
&lt;p&gt;You can even commit your changes and push or pull to various remotes using Git. You have complete control over your packages&#39; Git repositories.&lt;/p&gt; 
&lt;p&gt;To learn more, see the documentation on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&quot;&gt;the package lifecycle&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Automatic repository management&lt;/h3&gt; 
&lt;p&gt;While being able to make arbitrary changes to your packages is very powerful, it can also get tiring to keep track of the all those changes. For this reason, &lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows to perform bulk operations on your packages.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To restore each package to its canonical state (a clean working directory with the main branch checked out, and the remotes set correctly), run &lt;code&gt;M-x straight-normalize-package&lt;/code&gt; or &lt;code&gt;M-x straight-normalize-all&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To fetch from each package&#39;s configured remote, run &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-fetch-all&lt;/code&gt;; to also fetch from the upstream for forked packages, supply a prefix argument.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To merge changes from each package&#39;s configured remote, run &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;; to also merge from the upstream for forked packages, supply a prefix argument.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To push all local changes to each package&#39;s configured remote, run &lt;code&gt;M-x straight-push-package&lt;/code&gt; or &lt;code&gt;M-x straight-push-all&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All of these commands are highly interactive and ask you before making any changes. At any point, you can stop and perform manual operations with Magit or other tools in a recursive edit.&lt;/p&gt; 
&lt;p&gt;To learn more, see the documentation on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&quot;&gt;bulk repository management&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Configuration reproducibility&lt;/h3&gt; 
&lt;p&gt;To save the currently checked out revisions of all of your packages, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. The resulting file (&lt;code&gt;~/.emacs.d/straight/versions/default.el&lt;/code&gt;), together with your init-file, perfectly define your package configuration. Keep your version lockfile checked into version control; when you install your Emacs configuration on another machine, the versions of packages specified in your lockfile will automatically be checked out after the packages are installed. You can manually revert all packages to the revisions specified in the lockfile by running &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To learn more, see the documentation on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&quot;&gt;version lockfiles&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Conceptual overview&lt;/h2&gt; 
&lt;p&gt;This section describes, at a high level, how the different mechanisms in &lt;code&gt;straight.el&lt;/code&gt; play together. This illustrates how &lt;code&gt;straight.el&lt;/code&gt; manages to accomplish all of its &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#guiding-principles&quot;&gt;guiding principles&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;TL;DR&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; operates by cloning Git repositories and then symlinking files into Emacs&#39; load path. The collection of symlinked files constitutes the package, which is defined by its recipe. The recipe also describes which local repository to link the files from, and how to clone that repository, if it is absent.&lt;/p&gt; 
&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, the recipe you provide is registered with &lt;code&gt;straight.el&lt;/code&gt; for future reference. Then the package&#39;s repository is cloned if it is absent, the package is rebuilt if its files have changed since the last build (as determined by &lt;code&gt;find(1)&lt;/code&gt;), and its autoloads are evaluated.&lt;/p&gt; 
&lt;p&gt;You can also provide only a package name, in which case the recipe will be looked up in one of several configurable recipe repositories, which are just packages themselves (albeit with the build step disabled).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines which packages are installed solely by how and when &lt;code&gt;straight-use-package&lt;/code&gt; is invoked in your init-file.&lt;/p&gt; 
&lt;h3&gt;What is a package?&lt;/h3&gt; 
&lt;p&gt;A &lt;em&gt;package&lt;/em&gt; is a collection of Emacs Lisp (and possibly other) files. The most common case is just a single &lt;code&gt;.el&lt;/code&gt; file, but some packages have many &lt;code&gt;.el&lt;/code&gt; files, and some even have a directory structure.&lt;/p&gt; 
&lt;p&gt;Note that a package is defined only as a collection of files. It doesn&#39;t necessarily correspond to a Git repository, or an entry on MELPA, or anything like that. Frequently there is a relationship between all of these concepts, but that relationship does not always have to be direct or one-to-one.&lt;/p&gt; 
&lt;p&gt;A package also has a name, which must be unique. This is the name that is used for the folder holding the package&#39;s files. It is frequently the same as the name of a Git repository, or an entry on MELPA, but again this does not have to be the case.&lt;/p&gt; 
&lt;h3&gt;Where do packages come from?&lt;/h3&gt; 
&lt;p&gt;If you really wanted all of your packages to be unambiguously defined, you could just copy and paste all of their files into version control. But that would defeat the purpose of using a package manager like &lt;code&gt;straight.el&lt;/code&gt;. In &lt;code&gt;straight.el&lt;/code&gt;, packages are defined by two sources of information:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a &lt;em&gt;local repository&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;em&gt;build recipe&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The local repository is just a directory containing some files. Of course, it also has a name, which may or may not be the same as the package&#39;s name. Frequently, the local repository is also a Git repository, but this is not necessary.&lt;/p&gt; 
&lt;p&gt;The build recipe is not a literal data structure. It is a concept that represents a certain subset of the package&#39;s recipe. Specifically, the &lt;code&gt;:files&lt;/code&gt;, &lt;code&gt;:local-repo&lt;/code&gt;, and &lt;code&gt;:build&lt;/code&gt; keywords.&lt;/p&gt; 
&lt;p&gt;To transform this &lt;em&gt;information&lt;/em&gt; into an actual package that Emacs can load, &lt;code&gt;straight.el&lt;/code&gt; &lt;em&gt;builds&lt;/em&gt; the package. This means that some symbolic links are created in the package&#39;s directory that point back into the local repository&#39;s directory. Exactly how these symlinks are created is determined by the &lt;code&gt;:files&lt;/code&gt; directive, and which local repository the symlinks point to is determined by the &lt;code&gt;:local-repo&lt;/code&gt; directive.&lt;/p&gt; 
&lt;p&gt;After the symlinks are created, the resulting files are byte-compiled, and their autoloads are generated and written into a file in the package&#39;s directory.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;:build nil&lt;/code&gt; is specified, however, this entire process is skipped. This mechanism is used for recipe repositories.&lt;/p&gt; 
&lt;h3&gt;What does this look like on disk?&lt;/h3&gt; 
&lt;p&gt;The local repositories are kept in &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, and the built packages are kept in &lt;code&gt;~/.emacs.d/straight/build&lt;/code&gt;. If you have initialized &lt;code&gt;straight.el&lt;/code&gt; and loaded package &lt;code&gt;el-patch&lt;/code&gt;, then your &lt;code&gt;~/.emacs.d/straight&lt;/code&gt; directory will look roughly like this (some irrelevant details have been omitted for pedagogical purposes):&lt;/p&gt; 
&lt;!-- longlines-start --&gt; 
&lt;pre&gt;&lt;code&gt;straight
├── build
│   ├── el-patch
│   │   ├── el-patch-autoloads.el
│   │   ├── el-patch.el -&amp;gt; ~/.emacs.d/straight/repos/el-patch/el-patch.el
│   │   └── el-patch.elc
│   └── straight
│       ├── straight-autoloads.el
│       ├── straight.el -&amp;gt; ~/.emacs.d/straight/repos/straight.el/straight.el
│       └── straight.elc
└── repos
    ├── el-patch
    │   ├── CHANGELOG.md
    │   ├── LICENSE.md
    │   ├── README.md
    │   └── el-patch.el
    └── straight.el
        ├── LICENSE.md
        ├── Makefile
        ├── README.md
        ├── bootstrap.el
        ├── install.el
        └── straight.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- longlines-stop --&gt; 
&lt;p&gt;As you can see, the package names are &lt;code&gt;el-patch&lt;/code&gt; and &lt;code&gt;straight&lt;/code&gt;. While &lt;code&gt;el-patch&lt;/code&gt; is built from a local repository of the same name, &lt;code&gt;straight&lt;/code&gt; is built from a local repository by the name &lt;code&gt;straight.el&lt;/code&gt;. Also note that only &lt;code&gt;.el&lt;/code&gt; files are symlinked, since only they are relevant to Emacs.&lt;/p&gt; 
&lt;h3&gt;Where do repositories come from?&lt;/h3&gt; 
&lt;p&gt;Local repositories provide a way to define packages without specifying the contents of all of their files explicitly. But that&#39;s not helpful without a higher-level way to define local repositories without specifying the contents of all of &lt;em&gt;their&lt;/em&gt; files. In &lt;code&gt;straight.el&lt;/code&gt;, local repositories are defined by two sources of information:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a &lt;em&gt;fetch recipe&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;the &lt;em&gt;version lockfiles&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The fetch recipe is, like the build recipe, a concept representing a certain subset of the package&#39;s overall recipe. The situation is more interesting here because &lt;code&gt;straight.el&lt;/code&gt; supports multiple version-control backends. The version-control backend specified by the fetch recipe is determined by the &lt;code&gt;:type&lt;/code&gt; directive (which defaults to &lt;code&gt;straight-default-vc&lt;/code&gt;). Each version-control backend then accepts some set of additional directives. For example, the &lt;code&gt;git&lt;/code&gt; backend accepts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:repo&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:host&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:branch&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:fork&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:protocol&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If a local repository is not present, then its fetch recipe describes how to obtain it. This is done using the &lt;code&gt;straight-vc-clone&lt;/code&gt; function, which delegates to one of the backend implementations of the &lt;code&gt;clone&lt;/code&gt; operation, according to &lt;code&gt;:type&lt;/code&gt;. (The option &lt;code&gt;:type built-in&lt;/code&gt; is a special case that results in all version-control operations for the package being ignored. You can also use &lt;code&gt;:type nil&lt;/code&gt; to accomplish the same, but with the difference that the package is still loaded from its specified &lt;code&gt;:local-repo&lt;/code&gt;.)&lt;/p&gt; 
&lt;p&gt;However, even with a particular repository source specified, there is still the question of which version of the repository to use. This is where the version lockfiles come in. When a local repository is cloned, the version lockfiles are searched to see if there is a particular commit specified for that local repository&#39;s name. If so, that commit is checked out. (For the &lt;code&gt;git&lt;/code&gt; backend, commits are 40-character strings representing SHA-1 hashes, but the representation of a commit identifier could be different across different backends.)&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;straight-freeze-versions&lt;/code&gt; and &lt;code&gt;straight-thaw-versions&lt;/code&gt; methods also use backend-delegating methods; in this case, they are &lt;code&gt;straight-vc-get-commit&lt;/code&gt; and &lt;code&gt;straight-vc-check-out-commit&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The fetch recipe and version lockfiles, together with the configuration options for &lt;code&gt;straight.el&lt;/code&gt;, precisely define the state of a local repository. Of course, you may make any changes you want to the local repository. But this information defines a &quot;canonical&quot; state that you may revert to at any time.&lt;/p&gt; 
&lt;p&gt;When this information is combined with the build recipe, &lt;code&gt;straight.el&lt;/code&gt; is able to construct canonical, universal versions of your Emacs packages that will be the same everywhere and forever.&lt;/p&gt; 
&lt;p&gt;Note that you do not have to provide fetch recipes or version lockfiles. You may manage your local repositories manually, if you wish, although this has obvious disadvantages in terms of repeatability and maintainability.&lt;/p&gt; 
&lt;h3&gt;What does it mean to load a package?&lt;/h3&gt; 
&lt;p&gt;A prerequisite to loading a package is making sure the package has been built. After that is done, loading the package means adding its directory to the load path and evaluating its autoloads file.&lt;/p&gt; 
&lt;p&gt;Adding the directory to the load path means that you can use &lt;code&gt;require&lt;/code&gt; to load the package&#39;s files. Note that &lt;code&gt;straight.el&lt;/code&gt; does not do this for you, since loading packages immediately is usually not necessary and it immensely slows down Emacs startup.&lt;/p&gt; 
&lt;p&gt;Evaluating the autoloads file means that calling the functions that are defined in the autoloads file will automatically &lt;code&gt;require&lt;/code&gt; the files that define those functions. All modern packages define their functions in autoloads and are designed to be loaded on-demand when those functions are called. Antiquated packages may need you to explicitly define autoloads, or to just &lt;code&gt;require&lt;/code&gt; the package right away.&lt;/p&gt; 
&lt;h3&gt;Where do recipes come from?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; does not require an actual recipe. You can just give it a package name, and it will look up the recipe. This is done using &lt;em&gt;recipe repositories&lt;/em&gt;. Recipe repositories are set up as a swappable backend system, much like the version-control backend system.&lt;/p&gt; 
&lt;p&gt;A recipe repository consists of four parts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a fetch recipe for the local repository (this will typically include &lt;code&gt;:build nil&lt;/code&gt;, since recipe repositories usually do not need to be built)&lt;/li&gt; 
 &lt;li&gt;a function that, provided the local repository is already available, returns a list of all packages that have recipes in the recipe repository&lt;/li&gt; 
 &lt;li&gt;a function that, given a package name, returns the recipe for that package, or nil if the recipe repository does not provide a recipe for the package&lt;/li&gt; 
 &lt;li&gt;an entry in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; indicating that the recipe provided actually corresponds to a recipe repository (otherwise it would just be a regular package)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that recipe repositories are implemented as regular packages! This means that all the usual package management operations work on them as well. It also means that you use &lt;code&gt;straight-use-package&lt;/code&gt; to register them (although typically you will provide arguments to &lt;code&gt;straight-use-package&lt;/code&gt; so that the recipe repository is only registered, and not cloned until it is needed; see &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-happens-when-i-call-straight-use-package&quot;&gt;the section on &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then each recipe repository in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; is checked for a recipe for that package. Once one is found, it is used. Otherwise, an error is signaled (unless the package is built-in to Emacs, according to &lt;code&gt;package.el&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; uses its own recipe format which is similar, but not identical, to the one used by MELPA (see &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;the section on the recipe format&lt;/a&gt; for information on the differences). The recipe repository backends abstract over the formatting differences in different recipe sources to translate recipes into the uniform format used by &lt;code&gt;straight.el&lt;/code&gt;. When you run &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, the translated recipe is what is returned.&lt;/p&gt; 
&lt;h3&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/h3&gt; 
&lt;p&gt;There are three actions that &lt;code&gt;straight-use-package&lt;/code&gt; can take:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Register a package&#39;s recipe with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Clone a package&#39;s local repository, if it is missing.&lt;/li&gt; 
 &lt;li&gt;Build a package, if it has been changed since the last time it was built, and load it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These actions must be performed in order. Depending on the arguments you pass to &lt;code&gt;straight-use-package&lt;/code&gt;, one, two, or all three may be performed.&lt;/p&gt; 
&lt;p&gt;The normal case is to do all three. The fetch recipe is only required if the local repository is actually missing, but the build recipe is always required.&lt;/p&gt; 
&lt;p&gt;Deferred installation can be accomplished by telling &lt;code&gt;straight-use-package&lt;/code&gt; to stop if the local repository is not already available. The deferred installation can be triggered by invoking &lt;code&gt;straight-use-package&lt;/code&gt; again, but telling it to go ahead and clone the repository (this is the default behavior). Because &lt;code&gt;straight-use-package&lt;/code&gt; already registered the package&#39;s recipe the first time, you don&#39;t have to provide it again.&lt;/p&gt; 
&lt;p&gt;In some extraordinary circumstances (such as when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapping its own installation), it may be desirable to clone a package&#39;s local repository if it is missing, but to stop before building and loading the package. This can also be done by &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;What does it mean to register a package?&lt;/h3&gt; 
&lt;p&gt;Package registration is the first action taken by &lt;code&gt;straight-use-package&lt;/code&gt;, before building and cloning. First, if only a package name was provided to &lt;code&gt;straight-use-package&lt;/code&gt;, a recipe is obtained from the configured recipe repositories. Next, the resulting recipe is recorded in various caches.&lt;/p&gt; 
&lt;p&gt;This is important, since it allows for several things to happen:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;if you later want to perform another operation on the package using &lt;code&gt;straight.el&lt;/code&gt;, you do not need to provide the recipe again&lt;/li&gt; 
 &lt;li&gt;if you use a custom recipe for Package A, and Package B requires Package A as a dependency, your custom recipe is remembered and re-used when Package A is used as a dependency, to avoid conflicts.&lt;/li&gt; 
 &lt;li&gt;when multiple packages are built from the same local repository, and you have specified a custom fetch recipe for one of those packages, &lt;code&gt;straight.el&lt;/code&gt; can intelligently merge that fetch recipe into the automatically retrieved recipes of dependencies, in order to avoid conflicts.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; knows which packages you have installed, if you want to perform interactive operations on them.&lt;/li&gt; 
 &lt;li&gt;if you accidentally provide two different recipes for the same package, &lt;code&gt;straight.el&lt;/code&gt; can issue a helpful warning, since this may lead to surprising behavior.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/h3&gt; 
&lt;p&gt;When you request for &lt;code&gt;straight.el&lt;/code&gt; to load a package (using &lt;code&gt;straight-use-package&lt;/code&gt;), it first checks if the package needs to be rebuilt. This means that some of the files in its local repository have been modified since the last time the package was built. &lt;code&gt;straight.el&lt;/code&gt; uses an optimized &lt;code&gt;find(1)&lt;/code&gt; command to check for package modifications, and it uses some caching mechanisms to perform bulk &lt;code&gt;find(1)&lt;/code&gt; operations on multiple packages, to speed up these checks (although it never performs optimizations that may result in erroneous behavior).&lt;/p&gt; 
&lt;p&gt;This check occurs during Emacs init, when your init-file makes calls to &lt;code&gt;straight-use-package&lt;/code&gt;. You may notice a significant delay on the first &lt;code&gt;straight-use-package&lt;/code&gt; call, because this is when &lt;code&gt;straight.el&lt;/code&gt; performs a bulk &lt;code&gt;find(1)&lt;/code&gt; call and caches the results for later usage (this speeds up init considerably). The total delay is likely to be on the order of 100ms for a double-digit number of packages.&lt;/p&gt; 
&lt;p&gt;The rebuild detection system is what allows for you to make changes to packages whenever you would like, without performing any additional operations.&lt;/p&gt; 
&lt;p&gt;(Packages are also rebuilt when their recipes change, of course.)&lt;/p&gt; 
&lt;h3&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; does not require you to declare a central list of packages anywhere, like Cask does. Instead, it determines what packages are to be loaded implicitly, by your invocations of &lt;code&gt;straight-use-package&lt;/code&gt; during Emacs initialization. Furthermore, &lt;code&gt;straight.el&lt;/code&gt; allows you to install packages after initialization using &lt;code&gt;M-x straight-use-package&lt;/code&gt; (or even by evaluating &lt;code&gt;straight-use-package&lt;/code&gt; forms). However, &lt;code&gt;straight.el&lt;/code&gt; still provides advanced features such as bulk package management and version locking. This creates some interesting challenges which other package managers do not have to deal with.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; solves these problems using a concept called &lt;em&gt;transactions&lt;/em&gt;. The operation of the transaction system is mostly transparent to the user, at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;. Basically, it provides a way for &lt;code&gt;straight.el&lt;/code&gt; to keep track of what happens within a single user operation (e.g. evaluate a buffer of &lt;code&gt;straight-use-package&lt;/code&gt; calls, or load the init-file).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; uses the transaction system to keep track of what packages you request in your init-file. If you invoke &lt;code&gt;straight-use-package&lt;/code&gt; interactively, then this invalidates that information, since you have now requested a package that is not in your init-file. For this reason, if you have invoked &lt;code&gt;straight-use-package&lt;/code&gt; interactively, running &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt; will prompt you to first reload your init-file.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note: reloading your init-file must have the effect of running all of the same &lt;code&gt;straight.el&lt;/code&gt;-related functions again. For example, if you bootstrap &lt;code&gt;straight.el&lt;/code&gt; in a sub-file that you only &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;load&lt;/code&gt;, then the reloading functionality will not work correctly and you may receive the message &lt;code&gt;Caches are still outdated; something is seriously wrong&lt;/code&gt;. See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/437&quot;&gt;#437&lt;/a&gt; for discussion.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Comparison to other package managers&lt;/h2&gt; 
&lt;p&gt;(Disclaimer: while I try to be as objective and comprehensive as possible here, I&#39;m obviously biased. Please submit corrections if I have unfairly disparaged your favorite package manager!)&lt;/p&gt; 
&lt;p&gt;There are many package managers for Emacs, ranging from simple scripts to download files from EmacsWiki to full-featured package management solutions like &lt;code&gt;straight.el&lt;/code&gt;. Here are the most feature-rich alternatives to &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&quot;&gt;&lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;: de facto standard, bundled with Emacs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/quelpa/quelpa&quot;&gt;Quelpa&lt;/a&gt;: allows you to use external sources like GitHub with &lt;code&gt;package.el&lt;/code&gt;. Essentially a local &lt;a href=&quot;http://melpa.org/#/&quot;&gt;MELPA&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cask/cask&quot;&gt;Cask&lt;/a&gt;: another &lt;code&gt;package.el&lt;/code&gt; wrapper. Specify your dependencies in a &lt;code&gt;Cask&lt;/code&gt; file; can be used for project management or an Emacs configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dimitri/el-get&quot;&gt;el-get&lt;/a&gt;: ridiculously OP in terms of how many different sources you can pull packages from (&lt;code&gt;package.el&lt;/code&gt;, every known VCS, distro package managers, &lt;code&gt;go get&lt;/code&gt;(!!)).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacscollective/borg&quot;&gt;Borg&lt;/a&gt;: assimilates packages as Git submodules into &lt;code&gt;.emacs.d&lt;/code&gt;, relying on &lt;a href=&quot;https://emacsmirror.net/&quot;&gt;Emacsmirror&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&quot;Screw package managers! I&#39;ll just handle it all myself!&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;TL;DR&lt;/h3&gt; 
&lt;p&gt;Here is a summary of the main differences in philosophy between the package managers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;code&gt;package.el&lt;/code&gt; if you want package management to be as easy as possible, and do not much care for installing packages from specific sources, keeping track of their versions, or doing local development on them.&lt;/li&gt; 
 &lt;li&gt;Use Quelpa if you like &lt;code&gt;package.el&lt;/code&gt; but really wish you could specify the sources of your packages.&lt;/li&gt; 
 &lt;li&gt;Use Cask if you like &lt;code&gt;package.el&lt;/code&gt; but wish it came with some project management tools, as well.&lt;/li&gt; 
 &lt;li&gt;Use el-get if you want to easily install packages from as many different sources as possible.&lt;/li&gt; 
 &lt;li&gt;Use Borg if you like a more lightweight approach to package management that leverages existing solutions, if contributing changes to packages upstream is important to you, and if using Git submodules isn&#39;t a deal-breaker.&lt;/li&gt; 
 &lt;li&gt;Use the manual approach if you need to contribute changes to a package that is versioned in something other than Git.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;straight.el&lt;/code&gt; if you like reproducibility in your Emacs configuration, you regularly contribute changes to packages upstream, or you are writing an Emacs configuration to be used by others.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And here is a brief list of the main reasons you might not want to use &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is largely unusable if you do not have Git installed, although it is still possible to use the package-building features if you manage your repositories manually (you also cannot use the magic bootstrap snippet, in that case). If you don&#39;t want to install Git, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt; or take the manual approach.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is not built in to Emacs. If you want something that will work right out of the box, you&#39;re stuck with &lt;code&gt;package.el&lt;/code&gt; or the manual approach.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; takes a minute or two to update all your packages, since it does not rely on a centralized server. If you want quick update checking, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide any user interface for package management. For that, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt;, el-get, Cask, or Borg (which expects you to use &lt;a href=&quot;https://github.com/emacscollective/epkg&quot;&gt;&lt;code&gt;epkg&lt;/code&gt;&lt;/a&gt; for browsing packages).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not currently support using only stable versions of packages (i.e. tagged revisions), although this is a &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/31&quot;&gt;planned feature&lt;/a&gt;. If this is important to you, you probably want to go with &lt;code&gt;package.el&lt;/code&gt; (with GNU ELPA and MELPA Stable), Cask, or Quelpa.&lt;/li&gt; 
 &lt;li&gt;If you don&#39;t like having to modify your init-file to do package management, then &lt;code&gt;straight.el&lt;/code&gt; is absolutely not for you. You want &lt;code&gt;package.el&lt;/code&gt;, Quelpa, el-get, or Borg.&lt;/li&gt; 
 &lt;li&gt;If you really want to contribute changes to packages that are not versioned in Git, then &lt;code&gt;straight.el&lt;/code&gt; will not help you. You&#39;ll have to manage the package&#39;s repository manually. Unfortunately, there is no existing package manager that supports both non-Git version-control systems and contributing changes upstream. You&#39;ll have to go with the manual approach.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide project management tools. It is a package manager. If you want project management tools, check out Cask.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is quite new and moving fast. Things might break. The other package managers can generally be ranked as follows, from most active to least active: el-get, Quelpa, Borg, Cask, &lt;code&gt;package.el&lt;/code&gt; (glacial).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; downloads pre-built packages from central servers using a special (undocumented?) HTTP protocol, while &lt;code&gt;straight.el&lt;/code&gt; clones Git (or other) repositories and builds packages locally.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to install a package from any branch of any Git repository. &lt;code&gt;package.el&lt;/code&gt; only allows you to install a package from a &lt;code&gt;package.el&lt;/code&gt;-compliant central server.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to check out any Git revision of any package. &lt;code&gt;package.el&lt;/code&gt; only allows you to install the latest version, and there is no way to downgrade.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports Emacsmirror, while &lt;code&gt;package.el&lt;/code&gt; does not.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. &lt;code&gt;package.el&lt;/code&gt; loads every package you ever installed at startup, even if some of those packages are no longer referenced by your init-file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. &lt;code&gt;package.el&lt;/code&gt; cannot provide reproducibility for the set of packages installed, the central servers they were installed from, or the versions in use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to &lt;code&gt;package.el&lt;/code&gt; packages, these changes cannot be version-controlled and they will be silently overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories, including contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support for specifying both an upstream and a fork for a package. Contributing changes upstream with &lt;code&gt;package.el&lt;/code&gt; is impossible.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. &lt;code&gt;package.el&lt;/code&gt; is unsuitable for minimal bug reproductions, since it automatically loads all of your packages on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. &lt;code&gt;package.el&lt;/code&gt; displays all messages, errors, and warnings that come from byte-compilation and autoload generation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; considers modifying the user&#39;s init-file extremely uncouth. &lt;code&gt;package.el&lt;/code&gt; aggressively inserts (via Customize) auto-generated code setting &lt;code&gt;package-selected-packages&lt;/code&gt; into the init-file whenever a package is installed. Furthermore, &lt;code&gt;package.el&lt;/code&gt; has a history of impolite treatment of user configuration, which I think says some things about the design: until Emacs 27.1 (when &lt;a href=&quot;https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=24acb31c04b4048b85311d794e600ecd7ce60d3b&quot;&gt;my patch to fix this issue&lt;/a&gt; was adopted after around 300 emails&#39; worth of squabbling on emacs-devel), it also inserted a call to the &lt;code&gt;package-initialize&lt;/code&gt; function into the init-file if it was not already present, with the officially recommended workaround &quot;comment it out if you don&#39;t want it, but don&#39;t get rid of it&quot;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. &lt;code&gt;package.el&lt;/code&gt; has no such concept.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is developed openly on GitHub, using a modern &lt;a href=&quot;https://github.com/radian-software/straight.el/issues&quot;&gt;issue tracker&lt;/a&gt; and continuous integration from GitHub Actions. It welcomes contributions of any type. &lt;code&gt;straight.el&lt;/code&gt; is licensed under the permissive MIT license and does not require a copyright assignment. &lt;code&gt;straight.el&lt;/code&gt; is developed actively and has explicit support for installing development versions of itself, as well as for contributing upstream changes. &lt;code&gt;package.el&lt;/code&gt; is maintained as a part of Emacs core, meaning that the contribution process is poorly documented and discouraging. Releases of &lt;code&gt;package.el&lt;/code&gt; coincide with releases of Emacs, which are infrequent and inflexible. There is no issue tracker specifically for &lt;code&gt;package.el&lt;/code&gt;, only the Emacs bug tracker and the emacs-devel mailing list. Contributing to &lt;code&gt;package.el&lt;/code&gt; requires a poorly-documented, cumbersome copyright assignment process and is done by submitting patches to an antiquated mailing list, unsupported by modern code review tooling or continuous integration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require that you have Git installed, since the central server deals with where the packages originally came from. &lt;code&gt;straight.el&lt;/code&gt; cannot be used at all without Git.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; is built in to Emacs and does not require additional configuration to get started with. &lt;code&gt;straight.el&lt;/code&gt; requires the use of a 10-line bootstrap snippet in your init-file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; can perform bulk package updates more quickly since it relies on central servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; has a user interface for package management that also displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for package management; any UI is provided by the user&#39;s &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require you to touch your init-file to install packages, while &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently install a package without an explicit reference to it in your init-file (although this may be considered an advantage, depending on your perspective).&lt;/li&gt; 
 &lt;li&gt;Using MELPA Stable, &lt;code&gt;package.el&lt;/code&gt; can install only stable versions of packages. By default, &lt;code&gt;package.el&lt;/code&gt; also installs only stable versions of packages from GNU ELPA. These modes of operation are unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/31&quot;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Additional notes&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; usually take approximately the same time to install packages, despite the fact that &lt;code&gt;straight.el&lt;/code&gt; is cloning entire Git repositories. This is because network latency and byte-compilation are the dominant factors.&lt;/li&gt; 
 &lt;li&gt;Some &lt;code&gt;package.el&lt;/code&gt; servers build packages from non-Git upstreams. &lt;code&gt;package.el&lt;/code&gt; can install these packages, while &lt;code&gt;straight.el&lt;/code&gt; cannot. However, since &lt;code&gt;package.el&lt;/code&gt; has no version-control support, this is more or less equivalent to installing those packages from the &lt;a href=&quot;https://emacsmirror.net/&quot;&gt;Emacsmirror&lt;/a&gt;, which &lt;code&gt;straight.el&lt;/code&gt; can do by default.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Comparison to Quelpa&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quelpa allows for fetching packages from arbitrary sources and building them into a format that can be installed by &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; has a philosophy which is fundamentally incompatible with &lt;code&gt;package.el&lt;/code&gt;, and non-compatibility with &lt;code&gt;package.el&lt;/code&gt; is one of its design goals.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with MELPA, GNU ELPA, and Emacsmirror, while Quelpa only has support for MELPA. To use GNU ELPA, you must drop down to &lt;code&gt;package.el&lt;/code&gt;. &lt;a href=&quot;https://emacsmirror.net/&quot;&gt;Emacsmirror&lt;/a&gt; is not supported by default, although it is easy to specify an Emacsmirror repository in a recipe. While Quelpa allows you to specify custom recipe folders, it does not have support for cloning these folders automatically from version control, nor for generating the recipes in any way other than copying them literally from files. &lt;code&gt;straight.el&lt;/code&gt; allows you full flexibility in this regard.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git revisions of packages. This process is more manual in Quelpa, as it requires placing the commit hash into the recipe, which disables updates.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it also loads every package you ever installed at startup, even if those packages are no longer referenced by your init-file. Furthermore, there is an additional caching layer, so that deleting a package from the &lt;code&gt;package.el&lt;/code&gt; interface and removing it from your init-file still does not actually delete it.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. Quelpa can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of MELPA saved anywhere.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to Quelpa packages, there are two places to do so: the built package, which is the default destination of &lt;code&gt;find-function&lt;/code&gt;, and the original repository. Changes to the former are not version-controlled and will be silently overwritten by &lt;code&gt;package.el&lt;/code&gt; operations, while changes to the latter will be silently overwritten by Quelpa operations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream repository and a fork for the same package. Quelpa does not have such a concept.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you complete control over how your repositories are managed, and the default behavior is to draw all packages versioned in a single repository from a single copy of that repository. Quelpa is hardcoded to require a separate repository for each package, so that installing Magit requires three copies of the Magit repository.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; builds packages using symlinks, meaning that &lt;code&gt;find-function&lt;/code&gt; works as expected. Quelpa builds packages by copying, a feature inherited from MELPA. This means that &lt;code&gt;find-function&lt;/code&gt; brings you to the built package, instead of the actual repository, which is not version-controlled and will be overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories. Quelpa allows this, but all local changes will be silently overridden whenever Quelpa performs an update.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it is also unsuitable for minimal bug reproductions, since it automatically loads all of your packages on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and warnings that come from byte-compilation and autoload generation. It also displays additional messages while cloning Git repositories, downloading files, and building packages from their repositories into &lt;code&gt;package.el&lt;/code&gt; format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not modify your init-file. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits the behavior of aggressively inserting a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file on any package management operation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Quelpa has no such concept.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of Quelpa&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quelpa supports all the version-control systems supported by MELPA, which is to say almost every commonly and uncommonly used VCS. &lt;code&gt;straight.el&lt;/code&gt; only supports Git, although it is designed to support other version-control backends.&lt;/li&gt; 
 &lt;li&gt;Quelpa allows for installing only stable versions of packages, from any source. This mode of operation is unsupported by &lt;code&gt;straight.el&lt;/code&gt;, although it is a &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/31&quot;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface for package management that also displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no such interface.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Additional notes&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; and Quelpa both allow you to manage your package&#39;s local repositories manually, if you wish.&lt;/li&gt; 
 &lt;li&gt;In principle, &lt;code&gt;straight.el&lt;/code&gt; and Quelpa have identical package installation times, since they are performing the same operations. In practice, Quelpa is slightly slower since it builds packages by copying rather than symlinking, and it clones multiple copies of the same Git repository when multiple packages are built from it.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; encourages you to keep a tight handle on your package versions by default. Quelpa encourages you to stick to the latest versions of your packages, and to upgrade them automatically.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Comparison to Cask&lt;/h3&gt; 
&lt;p&gt;I have not used Cask extensively, so please feel especially free to offer corrections for this section.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cask installs packages using the &lt;code&gt;package.el&lt;/code&gt; protocol, based on a &lt;code&gt;Cask&lt;/code&gt; file written in the Cask DSL. &lt;code&gt;straight.el&lt;/code&gt; eschews &lt;code&gt;package.el&lt;/code&gt; entirely, and clones packages from source based on how you invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file.&lt;/li&gt; 
 &lt;li&gt;Cask focuses more on being a build manager, like Maven or Leiningen, while &lt;code&gt;straight.el&lt;/code&gt; focuses &lt;em&gt;exclusively&lt;/em&gt; on being a package manager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with Emacsmirror, while Cask only supports &lt;code&gt;package.el&lt;/code&gt;-compliant repositories. However, it is easy to specify an Emacsmirror repository in a recipe. Cask does not support custom package sources. &lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, and Emacsmirror, and allows you to add any other sources you would like.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git revisions of packages. This process is more manual in Cask, as it requires placing the commit hash into the recipe, which disables updates.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it loads every package you ever installed at startup, even if some of those packages are no longer referenced by your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration implicitly by detecting how you call &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file and making the appropriate changes immediately. Cask requires manual intervention (for example, issuing a &lt;code&gt;cask install&lt;/code&gt; command when you have updated your &lt;code&gt;Cask&lt;/code&gt; file). However, both &lt;code&gt;straight.el&lt;/code&gt; and Cask can be considered declarative package managers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. Cask can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of Cask saved anywhere.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to Cask packages, these will not be version-controlled and they will be silently overwritten or shadowed when Cask performs an update.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories, including contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support for specifying both an upstream and a fork for a package. Contributing changes upstream with Cask is impossible.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Cask appears to be unsuitable for minimal bug reproductions, since there does not appear to be a straightforward way to load a single package, without loading all other packages configured in your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and warnings that come from byte-compilation and autoload generation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Cask has no such concept.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of Cask&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cask provides a useful toolbox of operations for project management, which are completely absent from &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it does not require that you have Git installed. (It does require Python, however.) &lt;code&gt;straight.el&lt;/code&gt; is mostly unusable without Git.&lt;/li&gt; 
 &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it can perform bulk package updates more quickly than &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface for package management that also displays package metadata.&lt;/li&gt; 
 &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, you can install packages without editing a file manually, although this rather defeats the entire purpose of using Cask instead of &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently install a package without an explicit reference to it in your init-file (although this may be considered an advantage, depending on your perspective).&lt;/li&gt; 
 &lt;li&gt;Using MELPA Stable, Cask can install only stable versions of packages. By default, Cask also installs only stable versions of packages from GNU ELPA. These modes of operation are unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/31&quot;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Cask supports more version-control systems than &lt;code&gt;straight.el&lt;/code&gt; (which only supports Git).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Comparison to el-get&lt;/h3&gt; 
&lt;p&gt;I have not used el-get extensively, so please feel especially free to offer corrections for this section.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Both el-get and &lt;code&gt;straight.el&lt;/code&gt; implement their own package management abstractions instead of delegating to &lt;code&gt;package.el&lt;/code&gt;. However: 
  &lt;ul&gt; 
   &lt;li&gt;el-get goes the route of adding as many package sources as possible (e.g. &lt;code&gt;package.el&lt;/code&gt;, many different version-control systems, various specific websites, and even system package managers) so that packages can be used very easily.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; only supports Git and in doing so is able to provide more advanced package management features.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. el-get has additional metadata stored outside the init-file, although specifying all packages in your init-file is a supported mode of operation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. el-get can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of el-get saved anywhere.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally, and conflicts during updates are presented to the user and resolved interactively. While it is possible to make local changes to el-get packages, the el-get manual warns that such changes may break the update mechanism.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream repository and a fork for the same package. el-get does not have such a concept.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operartions on your package&#39;s Git repositories. el-get allows this, but local changes will be overwritten when el-get performs an update.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows for performing bulk operations on your package&#39;s Git repositories. el-get only allows you to install, uninstall, and update packages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. el-get reports its progress verbosely.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. el-get has no such concept.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of el-get&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;el-get supports virtually all known version-control systems, as well as system package managers, EmacsWiki, arbitrary HTTP, and even &lt;code&gt;go get&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; supports only Git, although it does allow you to manage your local repositories manually if you would like.&lt;/li&gt; 
 &lt;li&gt;el-get has been around since 2010 and is on its fifth major version, whereas &lt;code&gt;straight.el&lt;/code&gt; was created in January 2017 and is only now approaching a 1.0 release. Clearly, el-get is more stable, although despite its recency &lt;code&gt;straight.el&lt;/code&gt; is already almost 50% of the size of el-get, by the line count. Both package managers are actively maintained.&lt;/li&gt; 
 &lt;li&gt;el-get has a recipe format which is several orders of magnitude more powerful than that of &lt;code&gt;straight.el&lt;/code&gt;, since it supports many more package sources that can be configured and since it allows for a more complex build process.&lt;/li&gt; 
 &lt;li&gt;el-get provides a number of features for running per-package initialization and setup code, including pulling that code from arbitrary sources. &lt;code&gt;straight.el&lt;/code&gt; does not support this and expects you to use a dedicated tool like &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; (with which integration is built in) for that purpose.&lt;/li&gt; 
 &lt;li&gt;el-get has a user interface for package management that also displays package metadata, similarly to &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for package management; any UI is provided by the user&#39;s &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Comparison to Borg&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Borg and &lt;code&gt;straight.el&lt;/code&gt; are perhaps the two most similar package managers on this list. The difference is that Borg is very minimal and expects you to complement it with other tools such as &lt;a href=&quot;https://magit.vc/&quot;&gt;Magit&lt;/a&gt;, &lt;a href=&quot;https://github.com/emacscollective/epkg&quot;&gt;epkg&lt;/a&gt;, &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/tarsius/auto-compile&quot;&gt;auto-compile&lt;/a&gt;. On the other hand, &lt;code&gt;straight.el&lt;/code&gt; aspires to be a one-stop package management solution, although it does not try to replace dedicated version-control packages (Magit) or dedicated package &lt;em&gt;configuration&lt;/em&gt; packages (&lt;code&gt;use-package&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;Borg uses Git submodules, while &lt;code&gt;straight.el&lt;/code&gt; uses independently managed Git repositories.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, Emacsmirror, and custom recipe sources. Borg only supports Emacsmirror and custom recipe sources. However, as the Emacsmirror is a near-complete superset of both GNU ELPA and MELPA, this does not necessarily mean you have access to more packages: it just means you benefit from the recipe maintenance efforts of the MELPA team and the Emacsmirror team, rather than only the latter.&lt;/li&gt; 
 &lt;li&gt;Borg, even when combined with related tools, do not allow for the kind of massive interactive repository management provided by &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides an API designed for other version-control backends to be added in future. Borg is inextricably tied to Git.&lt;/li&gt; 
 &lt;li&gt;The interface for Git submodules has a number of sharp edges.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides dependency management. This is a manual process in Borg.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides mechanisms for updating your packages. This is a manual process in Borg.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is configured solely by how you use in your init-file. Configuring Borg requires customizing &lt;code&gt;~/.emacs.d/.gitmodules&lt;/code&gt;, which means (for example) that you cannot generate recipes dynamically. (However, the handling of configuration is &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/95#issuecomment-316379495&quot;&gt;planned&lt;/a&gt; to be improved in a future release.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Borg has no such concept.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of Borg&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Borg does a heck of a lot less magic, so if you want a solution with simple implementation details, &lt;code&gt;straight.el&lt;/code&gt; may not be for you. (But see the developer manual and docstrings, first.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Comparison to the manual approach&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The manual approach is to download packages yourself and put them on your &lt;code&gt;load-path&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; is more or less what you get when you take the manual approach, think very hard about the best way to do everything, and then automate all of it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; figures out where to clone your packages from for you.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; byte-compiles your packages for you and generates their autoloads automatically.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to manually recompile and regenerate autoloads.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; keeps track of dependencies for you.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides tools to manage all your packages in bulk, which would otherwise be a long, tedious process.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to get reproducibility for your configuration without needing to keep all of your packages under version control.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; links packages into a separate build directories. Running packages directly from their repositories has a number of problems, including: 
  &lt;ul&gt; 
   &lt;li&gt;making it impossible to run only one package, if others are provided in the same repository.&lt;/li&gt; 
   &lt;li&gt;making your working directory dirty when the package author forgot to add their build artifacts like &lt;code&gt;*.elc&lt;/code&gt; and autoload files to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;instantly losing compatibility with MELPA recipes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; offers you a single entry point to install only a single package in isolation, for a minimal bug reproduction. With the manual approach this would be more complicated, especially if the package has dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to think about package management, since I already did all the thinking to figure how best to design everything.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advantages of the manual approach&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;No dependencies.&lt;/li&gt; 
 &lt;li&gt;You learn a lot, if you don&#39;t give up first.&lt;/li&gt; 
 &lt;li&gt;You might end up writing a package manager (case in point).&lt;/li&gt; 
 &lt;li&gt;This is the only way to deal with packages that have non-Git upstreams which you need to contribute changes to. (However, you can always use the manual approach for one package and &lt;code&gt;straight.el&lt;/code&gt; for the rest. Or you can just eschew &lt;code&gt;straight.el&lt;/code&gt;&#39;s version-control support for that package, and use it only for building the package.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User manual&lt;/h2&gt; 
&lt;p&gt;This section tells you everything you need to know about the user-facing features of &lt;code&gt;straight.el&lt;/code&gt;. For implementation details, see the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&quot;&gt;developer manual&lt;/a&gt;. It may also be helpful to get some perspective on the overarching concepts of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&quot;&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;In order to use &lt;code&gt;straight.el&lt;/code&gt;, you will need to somehow get it loaded into Emacs. (This is easy for &lt;code&gt;package.el&lt;/code&gt;, since &lt;code&gt;package.el&lt;/code&gt; is built in to Emacs. &lt;code&gt;straight.el&lt;/code&gt; must work a little harder.)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; comes with a file to do just this, &lt;code&gt;bootstrap.el&lt;/code&gt;. All you need to do is load that file. You can do this with &lt;code&gt;M-x load-file&lt;/code&gt; or by a call to &lt;code&gt;load&lt;/code&gt; in your init-file. However, there is an obvious shortcoming: &lt;code&gt;bootstrap.el&lt;/code&gt; will only be available once &lt;code&gt;straight.el&lt;/code&gt; is already installed.&lt;/p&gt; 
&lt;p&gt;You could just invoke &lt;code&gt;git clone&lt;/code&gt; from your init-file, if &lt;code&gt;straight.el&lt;/code&gt; is not installed, but then you would have to manually take care of selecting the correct branch, parsing your version lockfile to check out the right revision, and so on. Instead, you can just use this snippet, which uses a copious amount of magic to take care of all these details for you:&lt;/p&gt; 
&lt;!-- longlines-start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        &quot;straight/repos/straight.el/bootstrap.el&quot;
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         &quot;https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el&quot;
         &#39;silent &#39;inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil &#39;nomessage))
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- longlines-stop --&gt; 
&lt;p&gt;Despite the reference to &lt;code&gt;develop&lt;/code&gt;, this snippet actually installs from the &lt;code&gt;master&lt;/code&gt; branch by default, just like every other package. Furthermore, the correct revision of &lt;code&gt;straight.el&lt;/code&gt; is checked out, if you have one specified in your lockfile. Even better, you can &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&quot;&gt;override the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;, just like for any other package.&lt;/p&gt; 
&lt;h3&gt;Installing packages programmatically&lt;/h3&gt; 
&lt;p&gt;The primary entry point to &lt;code&gt;straight.el&lt;/code&gt; is the &lt;code&gt;straight-use-package&lt;/code&gt; function. It can be invoked interactively (for installing a package temporarily) or programmatically (for installing a package permanently). This section covers the programmatic usage; see &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&quot;&gt;later&lt;/a&gt; for interactive usage.&lt;/p&gt; 
&lt;p&gt;Here is the basic usage of &lt;code&gt;straight-use-package&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;el-patch)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will ensure that the package &lt;code&gt;el-patch&lt;/code&gt; is installed and loaded. (Note that &lt;code&gt;straight-use-package&lt;/code&gt; takes a symbol, not a string, for the name of the package.) Precisely, this is what happens:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If the local Git repository for &lt;code&gt;el-patch&lt;/code&gt; is not available, it is cloned, and the appropriate revision is checked out (if one is specified in your version lockfiles).&lt;/li&gt; 
 &lt;li&gt;If the local Git repository has been modified since the last time the package was built, it is rebuilt. This means: 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are symlinked into a separate directory to isolate them from other, irrelevant files.&lt;/li&gt; 
   &lt;li&gt;The main package file is checked for dependencies, which are installed recursively if necessary using &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are byte-compiled.&lt;/li&gt; 
   &lt;li&gt;Autoloads are extracted from the &lt;code&gt;.el&lt;/code&gt; files and saved into a separate file.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The package&#39;s directory is added to Emacs&#39; &lt;code&gt;load-path&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;The package&#39;s autoloads are evaluated.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Package authors should note that &lt;code&gt;straight.el&lt;/code&gt; checks for dependencies that are specified in the &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html&quot;&gt;&lt;code&gt;package.el&lt;/code&gt; format&lt;/a&gt;. To spare you reading that documentation, this is either a &lt;code&gt;Package-Requires&lt;/code&gt; header in &lt;code&gt;PACKAGENAME.el&lt;/code&gt;, or an argument to a &lt;code&gt;define-package&lt;/code&gt; invocation in &lt;code&gt;PACKAGENAME-pkg.el&lt;/code&gt;. Despite the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel&quot;&gt;many shortcomings&lt;/a&gt; of &lt;code&gt;package.el&lt;/code&gt;, it has done a good job of creating a standardized format for dependency declarations.&lt;/p&gt; 
&lt;p&gt;There is one exception to the above statement: not all entries specified in the &lt;code&gt;Package-Requires&lt;/code&gt; header necessarily correspond to packages. For example, specifying a minimum Emacs version for a package is done by depending on the &lt;code&gt;emacs&lt;/code&gt; pseudo-package. Such packages are simply ignored by &lt;code&gt;straight.el&lt;/code&gt;, using the variable &lt;code&gt;straight-built-in-pseudo-packages&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that loading a package does not entail invoking &lt;code&gt;require&lt;/code&gt; on any of its features. If you wish to actually load the files of the package, you need to do this separately. This is because most packages do not need to be loaded immediately, and are better served by the autoload system.&lt;/p&gt; 
&lt;h4&gt;Installing with a custom recipe&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; can also take a list instead of a symbol. In that case, the first member of the list is a symbol giving the package name, and the remainder of the list is a &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html&quot;&gt;property list&lt;/a&gt; providing information about how to install and build the package. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;(el-patch :type git :host github :repo &quot;radian-software/el-patch&quot;
            :fork (:host github
                   :repo &quot;your-name/el-patch&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then a recipe will be looked up by default (see the section on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&quot;&gt;recipe lookup&lt;/a&gt;). You can see the default recipe for a package by invoking &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&quot;&gt;&lt;code&gt;M-x straight-get-recipe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is non-nil, then you only need to specify the components of the recipe that you want to override. All other components will still be looked up in the default recipe. In the example above, we are only interested in changing the &lt;code&gt;:fork&lt;/code&gt; component. Therefore if &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is set, the recipe could be simplified as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;(el-patch :fork (:repo &quot;your-name/el-patch&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or even simpler:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;(el-patch :fork &quot;your-name/el-patch&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;:files&lt;/code&gt; keyword and all version control keywords support inheritance.&lt;/p&gt; 
&lt;p&gt;To learn more, see the section on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;the recipe format&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The full user-facing signature of &lt;code&gt;straight-use-package&lt;/code&gt; is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package PACKAGE-OR-RECIPE &amp;amp;optional NO-CLONE NO-BUILD)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As discussed &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&quot;&gt;previously&lt;/a&gt;, by default &lt;code&gt;straight-use-package&lt;/code&gt; will do three things:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Register the recipe provided with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Clone the package&#39;s local repository, if it is absent.&lt;/li&gt; 
 &lt;li&gt;Rebuild the package if necessary, and load it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By providing the optional arguments, you may cause processing to halt before all three of these tasks are completed. Specifically, providing &lt;code&gt;NO-CLONE&lt;/code&gt; causes processing to halt after registration but before cloning, and providing &lt;code&gt;NO-BUILD&lt;/code&gt; causes processing to halt after cloning (if necessary) but before building and loading.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; supports lazy-loading by means of a special value for &lt;code&gt;NO-CLONE&lt;/code&gt;, the symbol &lt;code&gt;lazy&lt;/code&gt;. If this symbol is passed, then processing will halt at the clone step, unless the package is already cloned. This means that the package is built and loaded if it is already installed, but otherwise installation is deferred until later. When you want to trigger the lazy installation, simply call &lt;code&gt;straight-use-package&lt;/code&gt; again, but without &lt;code&gt;NO-CLONE&lt;/code&gt;. (There is no need to pass the recipe again; see &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&quot;&gt;recipe lookup&lt;/a&gt;.)&lt;/p&gt; 
&lt;p&gt;You can also pass functions for &lt;code&gt;NO-CLONE&lt;/code&gt; or &lt;code&gt;NO-BUILD&lt;/code&gt;, which will be called with the package name as a string; their return values will then be used instead.&lt;/p&gt; 
&lt;p&gt;Note that if it makes no sense to build a package, then you should put &lt;code&gt;:build nil&lt;/code&gt; in its &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;recipe&lt;/a&gt;, rather than specifying &lt;code&gt;NO-BUILD&lt;/code&gt; every time you register it with &lt;code&gt;straight.el&lt;/code&gt;. (This is especially relevant when writing recipes for &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&quot;&gt;recipe repositories&lt;/a&gt;.)&lt;/p&gt; 
&lt;h4&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;For convenience, &lt;code&gt;straight.el&lt;/code&gt; provides some functions that wrap &lt;code&gt;straight-use-package&lt;/code&gt; with particular arguments, to cover all of the common cases. Each of these functions takes only a package name or recipe, and no additional arguments.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight-register-package&lt;/code&gt;: always stop after the registration step. This may be useful for specifying the recipe for an optional dependency (see &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&quot;&gt;recipe lookup&lt;/a&gt;, but see also &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&quot;&gt;recipe overrides&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight-use-package-no-build&lt;/code&gt;: always stop before the build step. This is used by &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&quot;&gt;&lt;code&gt;straight-freeze-versions&lt;/code&gt;&lt;/a&gt; to make sure packages are cloned, since building them is unnecessary for writing the lockfiles.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight-use-package-lazy&lt;/code&gt;: stop at the clone step if the package&#39;s local repository is not already cloned. This is used for lazy-loading.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Customizing when packages are built&lt;/h4&gt; 
&lt;p&gt;By default, when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapped during Emacs init, it uses a bulk &lt;code&gt;find(1)&lt;/code&gt; command to identify files that were changed since the last time a package depending on them was built. These packages are then rebuilt when they are requested via &lt;code&gt;straight-use-package&lt;/code&gt;. Normally, &lt;code&gt;straight.el&lt;/code&gt; will try to detect what sort of &lt;code&gt;find(1)&lt;/code&gt; program is installed, and issue the appropriate command. If it makes a mistake, then you can manually customize &lt;code&gt;straight-find-flavor&lt;/code&gt;. Alternately, you can install GNU find and customize the variable &lt;code&gt;straight-find-executable&lt;/code&gt; to point to it.&lt;/p&gt; 
&lt;p&gt;For about 100 packages on an SSD, calling &lt;code&gt;find(1)&lt;/code&gt; to detect modifications takes about 500ms. You can save this time by customizing &lt;code&gt;straight-check-for-modifications&lt;/code&gt;. This is a list of symbols which determines how &lt;code&gt;straight.el&lt;/code&gt; detects package modifications. The default value is &lt;code&gt;(find-at-startup find-when-checking)&lt;/code&gt;, which means that &lt;code&gt;find(1)&lt;/code&gt; is used to detect modifications at startup, and also when you invoke &lt;code&gt;M-x straight-check-package&lt;/code&gt; or &lt;code&gt;M-x straight-check-all&lt;/code&gt;. If you prefer to avoid this performance hit, or do not have &lt;code&gt;find(1)&lt;/code&gt; installed, then you can remove these symbols from the list. In that case, you will probably want to add either &lt;code&gt;check-on-save&lt;/code&gt; or &lt;code&gt;watch-files&lt;/code&gt; to the list.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;check-on-save&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to use &lt;code&gt;before-save-hook&lt;/code&gt; to detect package modifications as you make them (modifications made by the &lt;code&gt;straight.el&lt;/code&gt; repository management commands are also detected). This reduces init time, but modifications made outside of Emacs (or modifications that bypass &lt;code&gt;before-save-hook&lt;/code&gt;) are not detected. Pull requests extending the number of cases in which &lt;code&gt;straight.el&lt;/code&gt; is able to detect live modifications are welcome. Also, for the sake of efficiency, this form of modification checking is restricted to subdirectories of &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, so you must put your local repositories into that directory for it to work. (Pull requests to change this would be welcome.)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;watch-files&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to automatically invoke a filesystem watcher to detect modifications as they are made, inside or outside of Emacs. For this setting to work, you must have &lt;a href=&quot;https://www.python.org/&quot;&gt;&lt;code&gt;python3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/mattgreen/watchexec&quot;&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; installed on your &lt;code&gt;PATH&lt;/code&gt;. By default, the watcher persists after Emacs is closed. You can stop it manually by running &lt;code&gt;M-x straight-watcher-stop&lt;/code&gt;, and start it again by running &lt;code&gt;M-x straight-watcher-start&lt;/code&gt;. The watcher script is designed so that when one instance is started, all the others gracefully shut down, so you don&#39;t have to worry about accidentally ending up with more than one. There is nothing exciting in the process buffer for the watcher, but if you are interested in it then its name is given by &lt;code&gt;straight-watcher-process-buffer&lt;/code&gt;. (By default, the name has a leading space so that the buffer does not appear in the buffer list.)&lt;/p&gt; 
&lt;p&gt;There is probably no good reason to use both &lt;code&gt;check-on-save&lt;/code&gt; and &lt;code&gt;watch-files&lt;/code&gt; at the same time. Your configuration can dynamically switch between which one is used depending on &lt;code&gt;(executable-find &quot;watchexec&quot;)&lt;/code&gt; or similar.&lt;/p&gt; 
&lt;p&gt;If you prefer to eschew automatic package rebuilding entirely, you can just set &lt;code&gt;straight-check-for-modifications&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. In that case, packages will only be rebuilt when metadata (e.g. the recipe or the Emacs version) changes, or when you manually invoke &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt; or &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Regardless of your preferred setting for &lt;code&gt;straight-check-for-modifications&lt;/code&gt;, you should set it before the &lt;code&gt;straight.el&lt;/code&gt; bootstrap snippet is run, since hooks relating to this variable are set during bootstrap.&lt;/p&gt; 
&lt;p&gt;On Microsoft Windows, &lt;code&gt;find(1)&lt;/code&gt; is generally not available, so the default value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt; is instead &lt;code&gt;(check-on-save)&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Custom or manual modification detection&lt;/h5&gt; 
&lt;p&gt;You can also use the low-level functions for modification detection directly.&lt;/p&gt; 
&lt;p&gt;The function &lt;code&gt;straight-register-repo-modification&lt;/code&gt; takes a string (e.g. &lt;code&gt;&quot;straight.el&quot;&lt;/code&gt;) corresponding to the name of a local repository, and marks all packages from that local repository to be rebuilt at next Emacs startup. This function silently ignores local repositories which contain slashes, a limitation which might be removed in future.&lt;/p&gt; 
&lt;p&gt;The function &lt;code&gt;straight-register-file-modification&lt;/code&gt; takes no arguments and checks if the file visited by the current buffer (if any) is contained by any local repository. If so, it delegates to &lt;code&gt;straight-register-repo-modification&lt;/code&gt;. The &lt;code&gt;check-on-save&lt;/code&gt; value for &lt;code&gt;straight-check-for-modifications&lt;/code&gt; just adds &lt;code&gt;straight-register-file-modification&lt;/code&gt; to &lt;code&gt;before-save-hook&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Summary of options for package modification detection&lt;/h5&gt; 
&lt;h6&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/h6&gt; 
&lt;p&gt;Save build timestamps and run &lt;code&gt;find(1)&lt;/code&gt; at startup to detect changes&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Most reliable, never misses changes&lt;/li&gt; 
 &lt;li&gt;Requires &lt;code&gt;find(1)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Slows down startup&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/h6&gt; 
&lt;p&gt;Use &lt;code&gt;before-save-hook&lt;/code&gt; to detect changes&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;No external dependencies&lt;/li&gt; 
 &lt;li&gt;No startup delay&lt;/li&gt; 
 &lt;li&gt;No additional CPU or memory impact&lt;/li&gt; 
 &lt;li&gt;Doesn&#39;t catch changes made except via &lt;code&gt;save-file&lt;/code&gt; inside Emacs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/h6&gt; 
&lt;p&gt;Run filesystem watcher to detect changes&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Python 3 and Watchexec&lt;/li&gt; 
 &lt;li&gt;No startup delay&lt;/li&gt; 
 &lt;li&gt;Takes a few seconds to build virtualenv the first time&lt;/li&gt; 
 &lt;li&gt;Memory and CPU impact of running filesystem watcher&lt;/li&gt; 
 &lt;li&gt;Only misses changes if you make them after booting the system but before starting Emacs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h4&gt;Customizing how packages are built&lt;/h4&gt; 
&lt;p&gt;By specifying &lt;code&gt;:build nil&lt;/code&gt; in a package&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;recipe&lt;/a&gt;, you may prevent the package from being built at all. This is usually useful for recipe repositories which do not bundle executable Lisp code. (Make sure to use &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&quot;&gt;&lt;code&gt;straight-use-recipes&lt;/code&gt;&lt;/a&gt; for registering recipe repositories.)&lt;/p&gt; 
&lt;h5&gt;Autoload generation&lt;/h5&gt; 
&lt;p&gt;By specifying &lt;code&gt;:build (:not autoloads)&lt;/code&gt; in a package&#39;s recipe, you may prevent any autoloads provided by the package from being generated and loaded into Emacs. This is mostly useful if the package provides a large number of autoloads, you know you need only a few of them, and you wish to optimize your startup time (although this is almost certainly premature optimization unless you &lt;em&gt;really&lt;/em&gt; know what you&#39;re doing). You can also customize the variable &lt;code&gt;straight-disable-autoloads&lt;/code&gt; to effect this change on all recipes which do not explicitly disable autoloads via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; 
&lt;h5&gt;Byte compilation&lt;/h5&gt; 
&lt;p&gt;By specifying &lt;code&gt;:build (:not compile)&lt;/code&gt; in a package&#39;s recipe, you may inhibit byte-compilation. See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/357&quot;&gt;this issue&lt;/a&gt; for discussion of why this might be useful. You can also customize the variable &lt;code&gt;straight-disable-compile&lt;/code&gt; to effect this change on all recipes which do not explicitly disable byte-compilation via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; 
&lt;h5&gt;Native compilation&lt;/h5&gt; 
&lt;p&gt;Experimental support for native compilation of Emacs Lisp code can be enabled in the latest &lt;code&gt;master&lt;/code&gt; branch of the official Emacs repository (see &lt;a href=&quot;http://akrl.sdf.org/gccemacs.html&quot;&gt;gccemacs&lt;/a&gt;). When running on this version of Emacs, &lt;code&gt;straight.el&lt;/code&gt; will perform native compilation of packages.&lt;/p&gt; 
&lt;p&gt;By specifying a &lt;code&gt;:build (:not native-compile)&lt;/code&gt; in a package&#39;s recipe, you may inhibit native compilation. You can also customize the variable &lt;code&gt;straight-disable-native-compile&lt;/code&gt; to effect this change on all recipes which do not explicitly disable native-compilation via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; 
&lt;p&gt;Native compilation requires byte-compilation, so &lt;code&gt;:build (:not compile)&lt;/code&gt; and &lt;code&gt;straight-disable-compile&lt;/code&gt; will also disable native compilation.&lt;/p&gt; 
&lt;h5&gt;Symbolic links&lt;/h5&gt; 
&lt;p&gt;Usually, &lt;code&gt;straight.el&lt;/code&gt; uses symbolic links (&quot;symlinks&quot;) to make package files available from the build directory. This happens when &lt;code&gt;straight-use-symlinks&lt;/code&gt; is non-nil, the default. On Microsoft Windows, however, support for symlinks is not always available, so the default value of &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil on that platform. That causes copying to be used instead, and an advice is placed on &lt;code&gt;find-file&lt;/code&gt; to cause the copied files to act as symlinks if you try to edit them.&lt;/p&gt; 
&lt;p&gt;If you want to activate symlink-support on MS Windows 7, 8, or 10, you should ensure the following requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-symlinks&lt;/code&gt; has to be set to non-nil manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Your user-account needs to be assigned the right to create symbolic links. To do so, run &quot;secpol.msc&quot; and in &quot;Local Policies → User Rights Assignment&quot; assign the right to &quot;Create symbolic links&quot; to your user-account.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you have User Account Control (UAC) enabled and your user-account belongs to the the &lt;em&gt;Administrators&lt;/em&gt; group you&#39;ll need to run Emacs in elevated mode to be able to create symlinks (see &lt;a href=&quot;https://community.perforce.com/s/article/3472&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/29065060/3538165&quot;&gt;here&lt;/a&gt; and, for an official reference, section Access Token Changes &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb530410.aspx#vistauac_topic8&quot;&gt;in this document&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/&quot;&gt;Windows Creators Update&lt;/a&gt; supports symlink-creation without any special permission setup.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Customizing how packages are made available&lt;/h4&gt; 
&lt;p&gt;By setting the variable &lt;code&gt;straight-cache-autoloads&lt;/code&gt; to a non-nil value, you can cause &lt;code&gt;straight.el&lt;/code&gt; to cache the autoloads of all used packages in a single file on disk, and load them from there instead of from the individual package files if they are still up to date. This reduces the number of disk IO operations during startup from O(number of packages) to O(1), so it should improve performance. No other configuration should be necessary to make this work; however, you may wish to call &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&quot;&gt;&lt;code&gt;straight-prune-build&lt;/code&gt;&lt;/a&gt; occasionally, since otherwise this cache file may grow quite large over time.&lt;/p&gt; 
&lt;h4&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Currently, &lt;code&gt;straight-use-package&lt;/code&gt; supports four hooks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-post-clone-hook&lt;/code&gt;: The functions in this hook are run just after cloning a git repository. This allows users to automate custom configuration of Elisp Git repositories after they have been cloned. For example, the &lt;code&gt;user.email&lt;/code&gt; &lt;code&gt;git-config&lt;/code&gt; variable could be set on clone, to make upstream contributions more convenient for developers who use different email addresses for different repositories.&lt;/p&gt; &lt;p&gt;Each hook function is passed the following &lt;a href=&quot;https://www.emacswiki.org/emacs/KeywordArguments&quot;&gt;keyword arguments&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;:repo-dir&lt;/code&gt; - the local directory to which the repository was cloned&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:remote&lt;/code&gt; - the name of the remote from which the repository was cloned&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:url&lt;/code&gt; - the URL from which the repository was cloned&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:branch&lt;/code&gt; - the branch as specified by the recipe, if any, otherwise &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:depth&lt;/code&gt; - the clone depth as specified by the recipe or &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:commit&lt;/code&gt; - the specific commit which was requested via the lockfile, if any, otherwise &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Since keyword arguments are used, each function should be defined via &lt;code&gt;cl-defun&lt;/code&gt;, and &lt;code&gt;&amp;amp;key&lt;/code&gt; used at the front of the argument list.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-prepare-functions&lt;/code&gt;: The functions in this hook are run just before a package would be built, even if the package does not actually need to be rebuilt. They are passed the name of the package being (maybe) built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-pre-build-functions&lt;/code&gt;: The functions in this hook are run just before building a package (and only if the package needs to be built). They are passed the name of the package being built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-post-build-functions&lt;/code&gt;: The functions in this hook are run just after building a package (and only if the package needs to be built). They are passed the name of the package being built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The recipe format&lt;/h3&gt; 
&lt;p&gt;The general format for a &lt;code&gt;straight.el&lt;/code&gt; recipe is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package-name :keyword value :keyword value ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if you wish to pass a recipe to &lt;code&gt;straight-use-package&lt;/code&gt;, you will need to quote it. If you need to compute part of the recipe dynamically, use backquoting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
  `(el-patch :type git :repo ,(alist-get &#39;el-patch my-package-urls)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The supported keywords are &lt;em&gt;similar, but not identical&lt;/em&gt; to those used in MELPA recipes. There is a complete list below which you can compare with the &lt;a href=&quot;https://github.com/melpa/melpa#recipe-format&quot;&gt;MELPA documentation&lt;/a&gt;, but the main differences from the user&#39;s point of view are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;We use &lt;code&gt;:host&lt;/code&gt; instead of &lt;code&gt;:fetcher&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We only support Git recipes by default, although the system is extensible to other VCs to be added in the future or in user configurations. Thus the supported &lt;code&gt;:host&lt;/code&gt; values are:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; (any Git repository)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;sourcehut&lt;/code&gt;, &lt;code&gt;codeberg&lt;/code&gt;, or &lt;code&gt;bitbucket&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We support &lt;code&gt;:branch&lt;/code&gt;, but not &lt;code&gt;:commit&lt;/code&gt; or &lt;code&gt;:version-regexp&lt;/code&gt;. To lock a package to a specific commit, use a &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&quot;&gt;lockfile&lt;/a&gt;. See also &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/246&quot;&gt;#246&lt;/a&gt; for discussion of extensions to the recipe to support package pinning, which is a planned feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We support several additional keywords that affect how a package is built; see below.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;There are consistency and feature improvements to edge cases of the &lt;code&gt;:files&lt;/code&gt; keyword as documented in &lt;code&gt;straight-expand-files-directive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:includes&lt;/code&gt; indicates a package is a superset of another package.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is a comprehensive list of all keywords which have special meaning in a recipe (unknown keywords are ignored but preserved):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:local-repo&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is the name of the local repository that is used for the package. If a local repository by that name does not exist when you invoke &lt;code&gt;straight-use-package&lt;/code&gt;, one will be cloned according to the package&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&quot;&gt;version-control settings&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Multiple packages can use the same local repository. If so, then a change to the local repository will cause both packages to be rebuilt. Typically, if multiple packages are drawn from the same repository, both should specify a &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt; &lt;p&gt;If you do not provide &lt;code&gt;:local-repo&lt;/code&gt;, then it defaults to a value derived from the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&quot;&gt;version-control settings&lt;/a&gt;, or as a last resort the package name.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is a list specifying which files in a package&#39;s local repository need to be symlinked into its build directory, and how to arrange the symlinks. For most packages, the default value (&lt;code&gt;straight-default-files-directive&lt;/code&gt;) will suffice, and you do not need to specify anything.&lt;/p&gt; &lt;p&gt;If you do need to override the &lt;code&gt;:files&lt;/code&gt; directive (this happens most commonly when you are taking a single package from a repository that holds multiple packages), it is almost always sufficient to just specify a list of globs or filenames. All matching files will be linked into the top level of the package&#39;s build directory.&lt;/p&gt; &lt;p&gt;In spite of this, the &lt;code&gt;:files&lt;/code&gt; directive supports an almost comically powerful DSL (with nested excludes and everything!) that allows you full flexibility on how the links are made; see the docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for the full details.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:flavor&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If this is non-nil, then it changes the interpretation of the &lt;code&gt;:files&lt;/code&gt; directive for compatibility with an existing upstream recipe source. See the docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for details.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:build&lt;/code&gt; This specifies the steps taken on the files symlinked within a package&#39;s straight/build/PACKAGE directory. It may be any of the following values:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;nil, in which case nothing is done. This also prevents :pre/:post-build commands from running.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(example :build nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;t, runs the steps listed in &lt;code&gt;straight--build-default-steps&lt;/code&gt;. Note this ignores all &lt;code&gt;straight-disable-SYMBOL&lt;/code&gt; keywords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(example :build t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A list of steps. Each step is a symbol which represents a function named: &lt;code&gt;straight--build-SYMBOL&lt;/code&gt;. The function is passed the recipe as its sole argument. Steps are exectuted in the order they are listed. e.g.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(example :build (autoloads compile native-compile info))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A list which has &lt;code&gt;:not&lt;/code&gt; as its car and step symbols as its cdr. This eliminates the listed steps from the default steps. e.g. The following recipe will not be compiled or have its texinfo generated:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(example :build (:not compile info))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Steps may be disabled globally for recipes which do not explicilty declare their &lt;code&gt;:build&lt;/code&gt; via the defcustom variables named &lt;code&gt;straight--build-SYMBOL&lt;/code&gt;. e.g. The last example but for all recipes without a &lt;code&gt;:build&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq straight-disable-compile t
      straight-disable-info t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the absence of a &lt;code&gt;:build&lt;/code&gt; keyword, &lt;code&gt;straight--build-default-steps&lt;/code&gt; are run.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:pre-build&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies system commands and/or elisp to be evaluated before symlinking, and running a recipe&#39;s &lt;code&gt;:build&lt;/code&gt; steps.&lt;/p&gt; &lt;p&gt;Each command is either an elisp form to be evaluated or a list of strings to be executed in a shell context of the form:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(&quot;executable&quot; &quot;arg&quot;...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Commands are executed in the package&#39;s repository directory.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;:pre-build&lt;/code&gt; keyword&#39;s value may be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A single command&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A list of commands&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;nil, in which case no commands are executed.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;( example :type git :host github :repo &quot;user/example.el&quot;
    :pre-build (&quot;make&quot; &quot;all&quot;)))

(straight-use-package
 `( example :type git :host github :repo &quot;user/example.el&quot;
    :pre-build ,(pcase system-type
                  (`windows-nt &#39;(message &quot;This might take a while&quot;))
                  (_ &#39;((&quot;./configure&quot;) (&quot;make&quot;) (&quot;make&quot; &quot;install&quot;))))))

&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:post-build&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies system commands and/or elisp to be evaluated after the &lt;code&gt;:build&lt;/code&gt; steps are run.&lt;/p&gt; &lt;p&gt;Otherwise, it is identical to the &lt;code&gt;:pre-build&lt;/code&gt; keyword in terms of the values it accepts and how it is executed.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;( example :type git :host github :repo &quot;user/example.el&quot;
    :pre-build  ((&quot;./pre-build.sh&quot;) (message &quot;hi&quot;))
    :post-build ((&quot;./post-build.sh&quot;) (message &quot;bye&quot;))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies the version-control backend to use for cloning and managing the package&#39;s local repository. It defaults to the value of &lt;code&gt;straight-default-vc&lt;/code&gt;, which defaults to &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The only traditional version-control backend currently supported is &lt;code&gt;git&lt;/code&gt;, although more backends may be added.&lt;/p&gt; &lt;p&gt;As a special case, however, you may specify the value &lt;code&gt;built-in&lt;/code&gt;, which results in all version-control operations on the package being ignored. This allows you to tell &lt;code&gt;straight.el&lt;/code&gt; that a package has already been provided (for example, because a version of it is shipped by Emacs) and does not have a local repository which needs to be cloned, updated, and so on. Here is how you can tell &lt;code&gt;straight.el&lt;/code&gt; that you would like to use the Emacs-provided copy of Org, rather than cloning it from the upstream repository if another package declares it as a dependency:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;(org :type built-in))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;:type nil&lt;/code&gt;, which has the same effect as &lt;code&gt;:type &#39;built-in&lt;/code&gt;, except that the package is still loaded from its configured &lt;code&gt;:local-repo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:source&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Overrides &lt;code&gt;straight-recipe-repositories&lt;/code&gt; on a per-recipe basis. Its value may be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a symbol representing a recipe repository&lt;/li&gt; 
 &lt;li&gt;a list of such symbols The order of the symbols determines their precedence. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;(package :source melpa))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will search only the melpa recipe repository for package&#39;s recipe. While:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;(package :source (melpa gnu-elpa-mirror)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will search for package&#39;s recipe first in melpa. If it is not found there it will check gnu-elpa-mirror next.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;backend-specific keywords&lt;/p&gt; &lt;p&gt;Depending on the value of &lt;code&gt;:type&lt;/code&gt;, additional keywords (relevant to how the package&#39;s repository is cloned and managed) will be meaningful. See the next section.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;built-in&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; pseudo-backends do not take any other keywords.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:includes&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Informs &lt;code&gt;straight.el&lt;/code&gt; that a package is a superset of another package. For example &lt;code&gt;org-contrib&lt;/code&gt; includes &lt;code&gt;ol-vm&lt;/code&gt;. The following will prevent &lt;code&gt;straight.el&lt;/code&gt; from attempting to install &lt;code&gt;ol-vm&lt;/code&gt; after &lt;code&gt;org-contrib&lt;/code&gt; has been installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;(org-contrib :includes ol-vm))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Its value may also be a list of symbols indicating multiple packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;(example :includes (foo bar)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:inherit&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Overrides &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; on a per-recipe basis. If its value is non-nil, inheritance is enabled for the recipe. Otherwise it is not.&lt;/p&gt; 
&lt;h4&gt;Version-control backends&lt;/h4&gt; 
&lt;p&gt;Defining a version-control backend consists of declaring a number of functions named as &lt;code&gt;straight-vc-BACKEND-METHOD&lt;/code&gt;, where &lt;code&gt;BACKEND&lt;/code&gt; is the name of the version-control backend being defined and &lt;code&gt;METHOD&lt;/code&gt; is a backend API method. The relevant methods are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: given a recipe and a commit object, clone the repository and attempt to check out the given commit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: given a recipe and a commit object, return whether the commit can be checked out offline, i.e., without fetching from the remote.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: given a recipe, &quot;normalize&quot; the repository (this generally means reverting it to a standard state, such as a clean working directory, but does not entail checking out any particular commit).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: given a recipe, fetch the latest version from its configured remote, if one is specified.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: given a recipe, fetch the latest version from its configured upstream, if the package is forked.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: given a recipe, merge the latest version fetched from the configured remote, if any, to the local copy.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: given a recipe, merge the latest version fetched from the configured upstream, if the package is forked, to the local copy.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: given a recipe, push the current version of the repository to its configured remote, if one is specified.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: given a recipe and a commit object, attempt to check out that commit in the repository for that recipe.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: given a local repository name, return the commit object that is currently checked out, or nil if the local repository should not be included in a lockfile.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: given a recipe, return a good name for the local repository, or nil.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: return a list of keywords which are meaningful for this version-control backend.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Most of these methods are highly interactive: they don&#39;t actually do anything without prompting you to confirm it, and very often they will offer you a number of different options to proceed (including starting a recursive edit and allowing you to do whatever you would like).&lt;/p&gt; 
&lt;p&gt;Also, all of the methods in this section take &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&quot;&gt;&lt;code&gt;straight.el&lt;/code&gt;-style recipes&lt;/a&gt;; see the section on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&quot;&gt;defining VC backends&lt;/a&gt; in the developer manual for more details.&lt;/p&gt; 
&lt;h4&gt;Git backend&lt;/h4&gt; 
&lt;p&gt;These are the keywords meaningful for the &lt;code&gt;git&lt;/code&gt; backend:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt;: the clone URL for the Git repository.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:host&lt;/code&gt;: either nil or one of the symbols &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;bitbucket&lt;/code&gt;, &lt;code&gt;codeberg&lt;/code&gt;, or &lt;code&gt;sourcehut&lt;/code&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If nil, then &lt;code&gt;:repo&lt;/code&gt; should be a string which is the full URL of the target repository. For example:&lt;/li&gt; 
  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host nil :type git
  :repo &quot;http://myhost.tld/repo&quot;)
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If non-nil, then &lt;code&gt;:repo&lt;/code&gt; should be a string &quot;username/repo&quot;, and the URL is constructed automatically. For example:&lt;/li&gt; 
  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git
  :repo &quot;username/repo&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt;: the name of the branch used for primary development, as a string. If your version lockfiles do not specify a commit to check out when the repository is cloned, then this branch is checked out, if possible. This branch is also viewed as the &quot;primary&quot; branch for the purpose of normalization and interaction with the remote.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:remote&lt;/code&gt;: the name to use for the Git remote. If the package is forked, this name is used for the upstream remote.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;: if non-nil, then submodules are not cloned. This is particularly important for the Emacsmirror recipe repository, which contains every known Emacs package in existence as submodules.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:fork&lt;/code&gt;: the settings for a fork, if desired. This causes the &lt;code&gt;fetch-from-remote&lt;/code&gt; method to operate on the fork; you can use the &lt;code&gt;fetch-from-upstream&lt;/code&gt; method to operate on the upstream instead.&lt;/p&gt; &lt;p&gt;Note: the following section assumes &lt;code&gt;straight-host-usernames&lt;/code&gt; has a value of:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;&#39;((github    . &quot;githubUser&quot;)
  (gitlab    . &quot;gitlabUser&quot;)
  (codeberg  . &quot;codebergUser&quot;)
  (sourcehut . &quot;sourcehutUser&quot;)
  (bitbucket . &quot;bitbucketUser&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Its value may be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;t&lt;/code&gt;: Look up the username in &lt;code&gt;straight-host-usernames&lt;/code&gt;. Inherit the repository name from the upstream repository. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git :repo &quot;upstream/repo&quot;
  :fork t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;githubUser/repo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a string (optionally ending with &quot;/&quot;): Use the string as the username. Inherit repository name from the upstream repository. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git :repo &quot;upstream/repo&quot;
  :fork &quot;user&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/repo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a string starting with &quot;/&quot;: Look up the username in &lt;code&gt;straight-host-usernames&lt;/code&gt;. Use the string as the repository name. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git :repo &quot;upstream/repo&quot;
  :fork &quot;/renamed&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;githubUser/renamed&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a string with both the recipe and repository specified: Use string as the &lt;code&gt;:repo&lt;/code&gt; value for the fork. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git :repo &quot;upstream/repo&quot;
  :fork &quot;user/renamed&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/renamed&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a plist: The allowed keywords are &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, &lt;code&gt;:branch&lt;/code&gt;, and &lt;code&gt;:remote&lt;/code&gt;. The same rules as above apply for the &lt;code&gt;:repo&lt;/code&gt; string. Likewise, if the &lt;code&gt;:host&lt;/code&gt; is overridden and the &lt;code&gt;:repo&lt;/code&gt; does not provide the username, it is looked up in &lt;code&gt;straight-host-usernames&lt;/code&gt;. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git :repo &quot;upstream/repo&quot;
  :fork (:host gitlab))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;gitlabUser/repo&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git :repo &quot;upstream/repo&quot;
  :fork (:host gitlab :repo &quot;/renamed&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;gitlabUser/renamed&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;( :package &quot;package&quot; :host github :type git :repo &quot;upstream/repo&quot;
  :fork (:host gitlab :repo &quot;user&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/repo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:depth&lt;/code&gt;: either the symbol &lt;code&gt;full&lt;/code&gt; or an integer. If &lt;code&gt;full&lt;/code&gt;, then the repository is cloned with its whole history. If an integer &lt;code&gt;N&lt;/code&gt;, then the repository is cloned with the option &lt;code&gt;--depth N&lt;/code&gt;. This works even when a commit is specified (e.g. by version lockfiles). The default value is &lt;code&gt;full&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:protocol&lt;/code&gt;: If non-nil, force this protocol to be used when interacting with the remote repository. Takes the same values as &lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This section tells you how the &lt;code&gt;git&lt;/code&gt; backend, specifically, implements the version-control backend API:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: clones the repository, including submodules if &lt;code&gt;:nonrecursive&lt;/code&gt; is not provided. Checks out the commit specified in your revision lockfile, or the &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given), or &lt;code&gt;origin/HEAD&lt;/code&gt;. If a &lt;code&gt;:fork&lt;/code&gt; is specified, also fetches from the upstream.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: checks if the commit SHA is among the revisions that are present locally.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: verifies that remote URLs are set correctly, that no merge is in progress, that the worktree is clean, and that the primary &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given) is checked out.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: checks that remote URLs are set correctly, then fetches from the primary remote (the fork, if the package is forked).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: checks that remote URLs are set correctly, then fetches from the upstream remote. If the package is not a fork, does nothing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: performs normalization, then merges from the primary remote (the fork, if the package is forked) into the primary local &lt;code&gt;:branch&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: performs normalization, then merges from the upstream remote into the primary local &lt;code&gt;:branch&lt;/code&gt;. If the package is not a fork, does not attempt to merge.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: performs normalization, pulls from the primary remote if necessary, and then pushes if necessary. This operation acts on the fork, if the package is forked.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: verifies that no merge is in progress and that the worktree is clean, then resets the worktree to the specified commit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: returns HEAD as a 40-character string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: if &lt;code&gt;:host&lt;/code&gt; is non-nil, then &lt;code&gt;:repo&lt;/code&gt; will be of the form &quot;username/repository&quot;, and &quot;repository&quot; is used. Otherwise, if the URL is of the form &lt;code&gt;.../&amp;lt;something&amp;gt;.git&lt;/code&gt;, then &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; is used. Otherwise, nil is returned.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: see the list of keywords above.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can customize the following user options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;: the name to use for the primary remote, or the upstream remote if the package is forked. Defaults to &quot;origin&quot;. The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override the value of this variable on a per-repository basis.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-fork-name&lt;/code&gt;: the name to use for the fork remote, if the package is forked. Defaults to &quot;fork&quot;. The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override the value of this variable on a per-repository basis.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;: the default protocol to use for automatically generated URLs when &lt;code&gt;:host&lt;/code&gt; is non-nil. It can be either &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;ssh&lt;/code&gt;, and defaults to &lt;code&gt;https&lt;/code&gt; because this requires less work to set up.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-force-protocol&lt;/code&gt;: if this is non-nil, then HTTPS and SSH URLs are not treated as equivalent, so that bulk version-control operations will offer to re-set your remote URLs from HTTPS to SSH or vice versa, depending on the value of &lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;. This is nil by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-auto-fast-forward&lt;/code&gt;: if this is non-nil, pulling will quietly do fast-forward, to suppress asking for instructions on each package with updates, unless they&#39;re not trivial. Set to nil if you&#39;d prefer to inspect all changes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;: the default value for the &lt;code&gt;:depth&lt;/code&gt; keyword. It can be either the symbol &lt;code&gt;full&lt;/code&gt; or an integer, and defaults to &lt;code&gt;full&lt;/code&gt;. Setting this variable to a small integer will reduce the size of repositories. This variable affects all packages, even those whose versions are locked.&lt;/p&gt; &lt;p&gt;Please be careful with setting &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;, which may break some packages&#39; installing processes such as &lt;code&gt;elfeed&lt;/code&gt; that depend on &lt;code&gt;org&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; previously supported fork configuration in recipes using an &lt;code&gt;:upstream&lt;/code&gt; keyword rather than a &lt;code&gt;:fork&lt;/code&gt; keyword. For various reasons, this was more complex to handle, which is why the change was made. For backwards compatibility, the &lt;code&gt;:upstream&lt;/code&gt; keyword is still accepted, with the following behavior.&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;straight.el&lt;/code&gt; processes a recipe which uses the &lt;code&gt;:upstream&lt;/code&gt; keyword, it moves the &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, and &lt;code&gt;:branch&lt;/code&gt; keywords from that sub-plist to the top level, and moves those top-level keywords to a new &lt;code&gt;:fork&lt;/code&gt; sub-plist. Then it sets the top-level and &lt;code&gt;:fork&lt;/code&gt; sub-plist values of &lt;code&gt;:remote&lt;/code&gt; to the values of the deprecated variables &lt;code&gt;straight-vc-git-upstream-remote&lt;/code&gt; (defaults to &quot;upstream&quot;) and &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; (defaults to &quot;origin&quot;), respectively.&lt;/p&gt; 
&lt;p&gt;For backwards compatibility, if &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; differs from its default value of &quot;origin&quot;, then its value is used in place of &lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Recipe lookup&lt;/h3&gt; 
&lt;p&gt;If you only provide a symbol (package name) to &lt;code&gt;straight-use-package&lt;/code&gt;, then the recipe is looked up automatically. By default, &lt;a href=&quot;http://melpa.org/#/&quot;&gt;MELPA&lt;/a&gt;, &lt;a href=&quot;https://elpa.gnu.org/&quot;&gt;GNU ELPA&lt;/a&gt;, and &lt;a href=&quot;https://emacsmirror.net/&quot;&gt;Emacsmirror&lt;/a&gt; are searched for recipes, in that order. This means that one or more of them may need to be cloned. Recipe repositories are actually just the same as ordinary packages, except that their recipes specify &lt;code&gt;:build nil&lt;/code&gt;, so they are not symlinked or added to the &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that dependencies always use the default recipes, since the only information &lt;code&gt;straight.el&lt;/code&gt; gets about a package&#39;s dependencies are their names.&lt;/p&gt; 
&lt;p&gt;This leads to a few interesting questions regarding requesting a package multiple times. For example, you might need to load two features using &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; that are provided from the same package, or one of the packages you have installed is also requested as a dependency by another package. &lt;code&gt;straight.el&lt;/code&gt; uses a number of heuristics to try to make these interactions as intuitive and painless as possible:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The first time a package is registered with &lt;code&gt;straight.el&lt;/code&gt;, its recipe (either the recipe that you provided, or the one that was looked up from a recipe repository) is recorded. In future registration, if you just provide the package name to &lt;code&gt;straight-use-package&lt;/code&gt;, the existing recipe is reused.&lt;/p&gt; &lt;p&gt;Note, however: &lt;em&gt;if&lt;/em&gt; you want to use a custom recipe for a given package, you must load it &lt;em&gt;before&lt;/em&gt; all of its dependencies. Otherwise, the package will first be registered as a dependency, using the default recipe.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a package has already been registered with &lt;code&gt;straight.el&lt;/code&gt;, and you attempt to load it again with an explicit recipe which is different from the one previously registered, the new recipe is used but a warning is signalled.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you attempt to register a package which shares a &lt;code&gt;:local-repo&lt;/code&gt; (either by default, or due to explicit specification) with a previously registered package, and the two packages specify different values for their version-control keywords (see &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&quot;&gt;version-control backends&lt;/a&gt;), then the new recipe is used but a warning is signalled. If the repository was already cloned, this means the second recipe will have no effect.&lt;/p&gt; &lt;p&gt;But if the second recipe was fetched automatically from a recipe repository, all of its version-control keywords will be silently overwritten with the ones from the first recipe, to avoid conflicts (although if there are conflicts in other parts of the recipe, a warning will still be displayed).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Updating recipe repositories&lt;/h4&gt; 
&lt;p&gt;As mentioned in the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-recipes-come-from&quot;&gt;conceptual overview&lt;/a&gt;, recipe repositories are just regular packages, with some extra code to look up recipes in the relevant local repository.&lt;/p&gt; 
&lt;p&gt;This means that updating a recipe repository may be done the same way as updating a regular package, i.e. with &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&quot;&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;. A convenience command with interactive completion for recipe repositories, &lt;code&gt;straight-pull-recipe-repositories&lt;/code&gt;, is provided as well. You should use one of these if you find that a package isn&#39;t listed by &lt;code&gt;M-x straight-use-package&lt;/code&gt;—perhaps it was added recently.&lt;/p&gt; 
&lt;p&gt;Note that there is currently some potentially surprising behavior if you update all packages at once using &lt;code&gt;M-x straight-pull-all&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;, and this bulk update includes recipe repository updates: see &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/323&quot;&gt;#323&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Customizing recipe repositories&lt;/h4&gt; 
&lt;p&gt;The recipe repository system is designed to be extended. Firstly, you can control which recipe repositories are searched, and in what order of precedence, by customizing &lt;code&gt;straight-recipe-repositories&lt;/code&gt;. The default value is defined by the &lt;code&gt;straight-use-recipes&lt;/code&gt; declarations present in the file &lt;code&gt;bootstrap.el&lt;/code&gt; in the &lt;code&gt;straight.el&lt;/code&gt; version you are using, as customized by the user options you configure in your init-file before loading the bootstrap snippet. As of the time of this writing, with no custom user options set, that works out to be:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(org-elpa melpa gnu-elpa-mirror nongnu-elpa el-get emacsmirror-mirror)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;GNU ELPA&lt;/h5&gt; 
&lt;p&gt;You can customize the following user options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight-recipes-gnu-elpa-url&lt;/code&gt;: The Git URL to use for the &lt;code&gt;gnu-elpa&lt;/code&gt; recipe repository.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;: GNU ELPA uses a stupidly complex build system for no good reason, and it&#39;s unlikely to change any time soon. What this means for you is that you have to run the Elisp-powered Makefile of the GNU ELPA repository (which has a fatal bug last I checked, so you&#39;d have to patch it locally) &lt;em&gt;and&lt;/em&gt; have a full checkout of the Emacs source repository (more than 1GB) if you want all the packages to work correctly. To work around this problem, I maintain a &lt;a href=&quot;https://github.com/emacs-straight&quot;&gt;full mirror of GNU ELPA on GitHub&lt;/a&gt;. (The tooling used to maintain this mirror is located &lt;a href=&quot;https://github.com/radian-software/gnu-elpa-mirror&quot;&gt;here&lt;/a&gt;.) By default, &lt;code&gt;straight.el&lt;/code&gt; retrieves packages from this mirror instead of the source repository; this behavior is controlled by the value of &lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;. You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&quot;&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user option to nil causes the default value of &lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(org-elpa melpa gnu-elpa el-get emacsmirror)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Emacsmirror&lt;/h5&gt; 
&lt;p&gt;You can customize the following user option:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;straight-recipes-emacsmirror-use-mirror&lt;/code&gt;: Yes, there is also a mirror for Emacsmirror. This is because the &lt;a href=&quot;https://github.com/emacsmirror/epkgs&quot;&gt;epkgs&lt;/a&gt; repository contains a fair amount of metadata, which means it can take a little on the long side to clone with slow network connections (see &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/356&quot;&gt;#356&lt;/a&gt; and &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/700&quot;&gt;#700&lt;/a&gt;). My solution to this problem is to generate a new repository which contains the information that &lt;code&gt;straight.el&lt;/code&gt; needs but which is much smaller. By default, &lt;code&gt;straight.el&lt;/code&gt; uses the official &lt;a href=&quot;https://github.com/emacsmirror/epkgs&quot;&gt;epkgs&lt;/a&gt; repository to find packages on Emacsmirror, but you can tell it to use my mirror by configuring the value of this variable to non-nil. You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&quot;&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user option to non-nil causes the default value of &lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(org-elpa melpa gnu-elpa-mirror el-get emacsmirror-mirror)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Defining new recipe repositories&lt;/h5&gt; 
&lt;p&gt;To define a new recipe repository called &lt;code&gt;NAME&lt;/code&gt;, you should do the following things:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Define a function &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;, which takes a package name as a symbol and returns a recipe for that package if it is available, else nil. This is used for recipe lookup. This function may assume that the local repository for the recipe repository has already been cloned, and that &lt;code&gt;default-directory&lt;/code&gt; has been set to that local repository. This is used for recipe lookup during the course of &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the returned recipe is a backquoted list, it will be evaluated during &lt;code&gt;straight--convert-recipe&lt;/code&gt;. This is useful for specifying dynamic elements within the recipe such as system-specific build commands. For example, if &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; returns:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;&#39;`( package :type git :repo &quot;host/repo&quot;
    :pre-build ,(pcase system-type
                  (`berkeley-unix &#39;(&quot;gmake&quot;))
                  (_ &#39;(&quot;make&quot;)))
    :files (:defaults))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The recipe is converted to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package :type git :repo &quot;host/repo&quot;
 :pre-build (&quot;make&quot;)
 :files (:defaults))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;on a &lt;code&gt;gnu/linux&lt;/code&gt; system, and:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package :type git :repo &quot;host/repo&quot;
         :pre-build (&quot;gmake&quot;)
         :files (:defaults))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;on a &lt;code&gt;berkely-unix&lt;/code&gt; system.&lt;/p&gt; 
&lt;p&gt;The recipe could be read from a file in the recipe repository as well. In this case, the quote is &lt;em&gt;not&lt;/em&gt; included in the recipe, as &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; would make use of &lt;code&gt;read&lt;/code&gt;, which will return the literal Lisp object. For example, considering the following retrieval function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(defun straight-recipes-example-retrieve (name)
  (with-temp-buffer
    (insert-file-literally &quot;./recipes/example.recipe&quot;)
    (read (buffer-string))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The recipe from above could be stored in the file, &lt;code&gt;example.recipe&lt;/code&gt;, as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;`( package :type git :repo &quot;host/repo&quot;
   :pre-build ,(pcase system-type
                 (`berkeley-unix &#39;(&quot;gmake&quot;))
                 (_ &#39;(&quot;make&quot;)))
   :files (:defaults))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Define a function &lt;code&gt;straight-recipes-NAME-list&lt;/code&gt;, which takes no arguments and returns a list of strings representing packages for which recipes are available. It is permissible to return some strings for which recipes are actually not available, for performance reasons. However, this is discouraged. (The &lt;a href=&quot;http://melpa.org/#/&quot;&gt;MELPA&lt;/a&gt; backend uses this functionality, since all files in the &lt;code&gt;recipes&lt;/code&gt; directory are potentially recipes, but only the Git-based ones can actually be used.)&lt;/li&gt; 
 &lt;li&gt;(Optional) Define a function &lt;code&gt;straight-recipes-NAME-version&lt;/code&gt; which returns a non-nil value indicating the current version of the logic in your &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; function. Each time you change the logic, this version value must be changed. If this function is defined, then &lt;code&gt;straight.el&lt;/code&gt; automatically and transparently caches calls to &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; persistently, using your version value (and its detection of modifications to the recipe repository) to decide when to invalidate the cache.&lt;/li&gt; 
 &lt;li&gt;Call &lt;code&gt;straight-use-recipes&lt;/code&gt; with the recipe for your recipe repository. Make sure to include &lt;code&gt;:build nil&lt;/code&gt; in the recipe, unless you also want to use the recipe repository as an executable Emacs Lisp package. Alternatively, you can take the manual approach: 
  &lt;ul&gt; 
   &lt;li&gt;Call &lt;code&gt;straight-use-package-lazy&lt;/code&gt; with the recipe for your recipe repository.&lt;/li&gt; 
   &lt;li&gt;Add the symbol for your recipe repository&#39;s name (the car of the recipe you provided, that is) to &lt;code&gt;straight-recipe-repositories&lt;/code&gt;, at the appropriate place.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Overriding recipes&lt;/h3&gt; 
&lt;p&gt;You can always use &lt;code&gt;straight-register-package&lt;/code&gt; to specify a specific recipe for a package without cloning or building it, so that just in case that package is requested later (possibly as a dependency, or in somebody else&#39;s code) your recipe will be used instead of the default one. However, this does not help in the case that a specific recipe is passed to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Also, it is obviously impossible to call &lt;code&gt;straight-register-package&lt;/code&gt; before &lt;code&gt;straight.el&lt;/code&gt; has been loaded, so you can&#39;t use it to specify a custom recipe for &lt;code&gt;straight.el&lt;/code&gt; itself.&lt;/p&gt; 
&lt;p&gt;To remedy these difficulties, &lt;code&gt;straight.el&lt;/code&gt; provides a mechanism for specifically overriding the recipe for a particular package. You can use it by customizing &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, or by calling &lt;code&gt;straight-override-recipe&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt; is an association list from &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-profile-system&quot;&gt;profile names&lt;/a&gt; to &lt;em&gt;override alists&lt;/em&gt;. If you don&#39;t care about the profile system, you can just use a single override specification, with the profile name nil. Each override alist is just a list of recipes. Because the car of a recipe is just the package name as a symbol, this list of recipes is also an alist whose keys are recipe names and whose values are the plists for those recipes.&lt;/p&gt; 
&lt;p&gt;Even if an explicit recipe is supplied to &lt;code&gt;straight-use-package&lt;/code&gt;, the one given in &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will be used instead, if such a recipe is specified there.&lt;/p&gt; 
&lt;p&gt;For convenience, you may add to &lt;code&gt;straight-recipe-overrides&lt;/code&gt; by passing a recipe to &lt;code&gt;straight-override-recipe&lt;/code&gt;. This will register it in the override alist for the current profile. Note that if you do this, you will probably want to explicitly set &lt;code&gt;straight-recipe-overrides&lt;/code&gt; to nil before bootstrapping &lt;code&gt;straight.el&lt;/code&gt;. This will make it so that if you remove a call to &lt;code&gt;straight-override-recipe&lt;/code&gt; from your init-file and then reload it, the entry will actually be removed from &lt;code&gt;straight-recipe-overrides&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;As was briefly mentioned earlier, you can actually override the recipe of &lt;code&gt;straight.el&lt;/code&gt; itself using &lt;code&gt;straight-recipe-overrides&lt;/code&gt;! How does this work? Well, it&#39;s basically black magic. If you want the details, go read the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&quot;&gt;developer manual&lt;/a&gt;. All you need to know is that you can set &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, and it will magically work. The only caveat is that if you change the &lt;code&gt;:local-repo&lt;/code&gt; for &lt;code&gt;straight.el&lt;/code&gt;, then you will also need to adjust the value of &lt;code&gt;bootstrap-file&lt;/code&gt; in the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&quot;&gt;bootstrap snippet&lt;/a&gt; accordingly, since otherwise your init-file will not know where to find &lt;code&gt;straight.el&lt;/code&gt;. (You must use &lt;code&gt;straight-recipe-overrides&lt;/code&gt; instead of &lt;code&gt;straight-override-recipe&lt;/code&gt;, since the latter function definition hasn&#39;t been loaded yet before &lt;code&gt;straight.el&lt;/code&gt; is installed and bootstrapped.)&lt;/p&gt; 
&lt;p&gt;Here is the default recipe used for &lt;code&gt;straight.el&lt;/code&gt;, if you don&#39;t override it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight :type git :host github
          :repo ,(format &quot;%s/straight.el&quot; straight-repository-user)
          :files (&quot;straight*.el&quot;)
          :branch ,straight-repository-branch)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that even though the bootstrap snippet references the &lt;code&gt;develop&lt;/code&gt; branch of &lt;code&gt;straight.el&lt;/code&gt;, the default recipe installs from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If all you want to do is change which branch you are installing &lt;code&gt;straight.el&lt;/code&gt; from, simply customize the variable &lt;code&gt;straight-repository-branch&lt;/code&gt;, which is provided for this purpose. (Although using &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will work just as well, at least until the recipe happens to be changed upstream and your init-file isn&#39;t updated.)&lt;/p&gt; 
&lt;p&gt;Similarly, if all you want to do is switch to your own fork of &lt;code&gt;straight.el&lt;/code&gt; on GitHub, simply customize the variable &lt;code&gt;straight-repository-user&lt;/code&gt; to your GitHub username.&lt;/p&gt; 
&lt;p&gt;There is one minor caveat to the above discussion. If your fork makes changes to the way in which recipes are interpreted, then those changes will not be effective during the interpretation of your own recipe for &lt;code&gt;straight.el&lt;/code&gt;. If you wish for them to be, then you will have to follow the same procedure that is followed in &lt;code&gt;straight.el&lt;/code&gt; itself for making changes to recipe interpretation. These details are outlined in the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&quot;&gt;developer manual&lt;/a&gt;; see also &lt;code&gt;install.el&lt;/code&gt; for an explanation of this aspect of the bootstrap mechanism.&lt;/p&gt; 
&lt;h3&gt;Interactive usage&lt;/h3&gt; 
&lt;p&gt;The primary usage of &lt;code&gt;straight.el&lt;/code&gt; is expected to be in your init-file. For example, this is where you will need to put the bootstrap code as well as any packages that you always want to be installed. However, there are three important interactive uses of &lt;code&gt;straight.el&lt;/code&gt;: temporary installation of packages, various helpful utility functions, and &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&quot;&gt;version control operations&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install a package temporarily, run &lt;code&gt;M-x straight-use-package&lt;/code&gt;. All registered recipe repositories will be cloned, and you will be presented with a combined list of all recipes available from them. Simply select a package and it will be cloned, built, and loaded automatically. This does not affect future Emacs sessions.&lt;/p&gt; 
&lt;p&gt;If you provide a prefix argument to &lt;code&gt;M-x straight-use-package&lt;/code&gt;, then you are presented with a list of registered recipe repositories. After you select one, you are shown a list of recipes specifically from that recipe repository. This is helpful if you do not want to clone all registered recipe repositories, or you have a particular recipe repository in mind.&lt;/p&gt; 
&lt;p&gt;You can also call &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, which has the same interface as &lt;code&gt;M-x straight-use-package&lt;/code&gt;, except that instead of the package being cloned, built, and loaded, its recipe is copied to the kill ring. If you are writing a custom recipe, this may be helpful, because you may be able to reuse parts of the existing recipe, particularly the &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt; 
&lt;p&gt;Normally, packages are rebuilt automatically if needed, when Emacs restarts. If you for some reason want them to be rebuilt at another time, you can call &lt;code&gt;M-x straight-check-all&lt;/code&gt; to rebuild all packages that have been modified since their last build. Alternatively, use &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt; to unconditionally rebuild all packages. Note that this will probably take a while. There are also &lt;code&gt;M-x straight-check-package&lt;/code&gt; and &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt;, which allow you to select a particular package to check or rebuild.&lt;/p&gt; 
&lt;p&gt;Finally, you may use &lt;code&gt;M-x straight-prune-build&lt;/code&gt; in order to tell &lt;code&gt;straight.el&lt;/code&gt; to forget about any packages which were not registered since the last time you loaded your init-file. This may improve performance, although only slightly, and will clean up stale entries in the &lt;code&gt;build&lt;/code&gt; directory. You can call this function in your init-file if you really wish your filesystem to be as clean as possible, although it&#39;s not particularly recommended as the performance implications are uninvestigated. If you do call it in your init-file, be sure to only call it on a fully successful init; otherwise, an error during init will result in some packages&#39; build information being discarded, and they will need to be rebuilt next time.&lt;/p&gt; 
&lt;p&gt;If you have enabled &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-made-available&quot;&gt;autoloads caching&lt;/a&gt;, it is advisable to call &lt;code&gt;straight-prune-build&lt;/code&gt; occasionally, since otherwise the build cache may grow quite large over time.&lt;/p&gt; 
&lt;h4&gt;Version control operations&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a number of highly interactive workflows for managing your package&#39;s local repositories, using the configured &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&quot;&gt;version-control backends&lt;/a&gt;. They are as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-normalize-package&lt;/code&gt;: normalize a package&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-normalize-all&lt;/code&gt;: normalize all packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-fetch-package&lt;/code&gt;: fetch from a package&#39;s configured remote; with prefix argument, then for forks also fetch from the upstream&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt;: fetch from the configured remotes of a package and all of its dependencies (including the dependencies of its dependencies); with prefix argment, then for forks also fetch from the upstream&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-fetch-all&lt;/code&gt;: fetch from all packages&#39; configured remotes; with prefix argument, then for forks also fetch from the upstreams&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-merge-package&lt;/code&gt;: merge the latest version fetched from a package&#39;s configured remote into the local copy; with prefix argument, then for forks also merge from the upstream&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;: merge the latest versions fetched from the configured remotes of a package and all of its dependencies (including the dependencies of its dependencies); with prefix argment, then for forks also merge from the upstreams&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-merge-all&lt;/code&gt;: merge the latest versions fetched from each package&#39;s configured remote into its local copy; with prefix argument, then for forks also merge from the upstreams&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-pull-package-and-deps&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-pull-all&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-all&lt;/code&gt; and &lt;code&gt;M-x straight-merge-all&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-push-package&lt;/code&gt;: push a package to its remote, if necessary&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x straight-push-all&lt;/code&gt;: push all packages to their remotes, if necessary&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the sections on &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&quot;&gt;version-control backends&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&quot;&gt;Git backend&lt;/a&gt; in particular for more information about the meanings of these operations.&lt;/p&gt; 
&lt;h3&gt;Lockfile management&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration from two, and only two, sources: the contents of your init-file, and your version lockfiles (which are optional). Your init-file specifies the configuration of &lt;code&gt;straight.el&lt;/code&gt; (for example, the values of &lt;code&gt;straight-recipe-overrides&lt;/code&gt; and &lt;code&gt;straight-default-vc&lt;/code&gt;), the packages you want to use, and their recipes. Your version lockfiles specify the exact revisions of each package, recipe repository, and even &lt;code&gt;straight.el&lt;/code&gt; itself. Together, they lock down your Emacs configuration to a state of no uncertainty: perfect reproducibility.&lt;/p&gt; 
&lt;p&gt;To write the current revisions of all your packages into version lockfiles, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. This will first check that &lt;code&gt;straight.el&lt;/code&gt; has an up-to-date account of what packages are installed by your init-file, then ensure that all your local changes are pushed (remember, we are aiming for perfect reproducibility!). If you wish to bypass these checks, provide a prefix argument.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note: reloading your init-file must have the effect of running all of the same &lt;code&gt;straight.el&lt;/code&gt;-related functions again. For example, if you bootstrap &lt;code&gt;straight.el&lt;/code&gt; in a sub-file that you only &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;load&lt;/code&gt;, then the reloading functionality will not work correctly and you may receive the message &lt;code&gt;Caches are still outdated; something is seriously wrong&lt;/code&gt;. See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/437&quot;&gt;#437&lt;/a&gt; for discussion.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Version lockfiles are written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. By default, there will be one, called &lt;code&gt;default.el&lt;/code&gt;. It is recommended that you keep your version lockfiles under version control with the rest of your Emacs configuration. If you symlink your init-file into &lt;code&gt;~/.emacs.d&lt;/code&gt; from somewhere else, you should also make sure to symlink your version lockfiles into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. On a new machine, do this &lt;em&gt;before&lt;/em&gt; launching Emacs: that way, &lt;code&gt;straight.el&lt;/code&gt; can make sure to check out the specified revisions of each package when cloning them for the first time.&lt;/p&gt; 
&lt;p&gt;To install the versions of the packages specified in your version lockfiles, run &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;. Thawing will interactively check for local changes before checking out the relevant revisions, so don&#39;t worry about things getting overwritten.&lt;/p&gt; 
&lt;h4&gt;The profile system&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; has support for writing multiple version lockfiles, instead of just one. Why? Consider a large Emacs configuration such as &lt;a href=&quot;https://github.com/radian-software/radian&quot;&gt;Radian&lt;/a&gt;, &lt;a href=&quot;http://spacemacs.org/&quot;&gt;Spacemacs&lt;/a&gt;, or &lt;a href=&quot;https://github.com/bbatsov/prelude&quot;&gt;Prelude&lt;/a&gt;, which is used by many different people. There are two parts to the configuration that is actually loaded: the &quot;default&quot; part, and the local customizations that each user has added. Generally, these configurations have a mechanism for making local customizations without forking the entire project.&lt;/p&gt; 
&lt;p&gt;So Radian will have some set of packages that it requires, and my local customizations of Radian have some other set of packages that they require. In order for me to maintain Radian, I need to be able to separate Radian&#39;s packages (which go into a versions lockfile in the Radian repository) from my own local packages (which go into a versions lockfile in my own private local dotfiles repository). &lt;code&gt;straight.el&lt;/code&gt; provides this ability through the &lt;em&gt;profile system&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;The idea is that whenever a package is registered, either directly or as a dependency, it is associated with a given profile. Any given package can be associated with multiple profiles.&lt;/p&gt; 
&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, which profile the registered packages are associated with is determined by the value of &lt;code&gt;straight-current-profile&lt;/code&gt;, which defaults to nil. In Radian, for example, &lt;code&gt;straight-current-profile&lt;/code&gt; is bound to &lt;code&gt;radian&lt;/code&gt; while the Radian libraries are being loaded, and it is bound to &lt;code&gt;radian-local&lt;/code&gt; while the user&#39;s local customizations are being loaded. This results in Radian packages being associated with the &lt;code&gt;radian&lt;/code&gt; profile, and the user&#39;s local packages being associated with the &lt;code&gt;radian-local&lt;/code&gt; profile.&lt;/p&gt; 
&lt;p&gt;When you call &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;, one or more version lockfiles are written, according to the value of &lt;code&gt;straight-profiles&lt;/code&gt;. This variable is an association list whose keys are symbols naming profiles and whose values are filenames for the corresponding version lockfiles to be written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. You should make sure that each potential value of &lt;code&gt;straight-current-profile&lt;/code&gt; has a corresponding entry in &lt;code&gt;straight-profiles&lt;/code&gt;, since otherwise some packages might not be written into your lockfiles.&lt;/p&gt; 
&lt;p&gt;When customizing &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&quot;&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt;&lt;/a&gt;, note that if multiple profiles are set to override the same recipe, then the last one listed in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence. Similarly, when using &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;, if different lockfiles specify revisions for the same local repository, the last one in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence.&lt;/p&gt; 
&lt;h3&gt;Packages and the init-file&lt;/h3&gt; 
&lt;p&gt;Package managers like &lt;code&gt;package.el&lt;/code&gt; store mutable state outside your init-file, including the set of packages that are installed. &lt;code&gt;straight.el&lt;/code&gt; does not do this, so it has a rather different way of determining what packages are installed. To &lt;code&gt;straight.el&lt;/code&gt;, a package is part of your Emacs configuration if it is passed to &lt;code&gt;straight-use-package&lt;/code&gt; when your init-file is loaded.&lt;/p&gt; 
&lt;p&gt;Note that this means packages installed interactively (using &lt;code&gt;M-x straight-use-package&lt;/code&gt;) are not considered part of your Emacs configuration, since the invocation of &lt;code&gt;straight-use-package&lt;/code&gt; does not happen in your init-file.&lt;/p&gt; 
&lt;p&gt;This raises an interesting question: if you &lt;em&gt;add&lt;/em&gt; a package to your init-file, how can you convince &lt;code&gt;straight.el&lt;/code&gt; that it really is part of your init-file, and not just part of a temporary &lt;code&gt;straight-use-package&lt;/code&gt; form that you evaluated ad-hoc? The answer is simple: &lt;em&gt;reload your entire init-file&lt;/em&gt;. That way, &lt;code&gt;straight.el&lt;/code&gt; will see whether or not that package is registered during your init-file.&lt;/p&gt; 
&lt;p&gt;One might ask how &lt;code&gt;straight.el&lt;/code&gt; determines that you have finished loading your init-file. The answer is simple: &lt;code&gt;post-command-hook&lt;/code&gt; is used to execute code only after the current interactive operation has finished. The implementation of this concept is part of the &lt;em&gt;transaction system&lt;/em&gt; of &lt;code&gt;straight.el&lt;/code&gt;, and it is also used to amortize certain performance costs when many calls to &lt;code&gt;straight-use-package&lt;/code&gt; are made sequentially. However, since the transaction system (at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;) operates transparently, its details are relegated to the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&quot;&gt;developer manual&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/h3&gt; 
&lt;h4&gt;... in other packages&lt;/h4&gt; 
&lt;p&gt;One of the major reasons I wanted to write &lt;code&gt;straight.el&lt;/code&gt; was that existing package managers were not good for reproducing bugs. For instance, some of them would load all installed packages when the package manager was initialized! Obviously that is not acceptable for a &quot;minimal test case&quot;.&lt;/p&gt; 
&lt;p&gt;On the contrary, bootstrapping &lt;code&gt;straight.el&lt;/code&gt; does not load anything except for &lt;code&gt;straight.el&lt;/code&gt; itself (the default recipe repositories are registered, but not cloned until needed). You should normally be loading &lt;code&gt;straight.el&lt;/code&gt; by means of the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&quot;&gt;bootstrap snippet&lt;/a&gt;, but when you are in &lt;code&gt;emacs -Q&lt;/code&gt;, here is how you can initialize &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x load-file RET ~/.emacs.d/straight/repos/straight.el/bootstrap.el RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also do this from the command line, perhaps by creating an alias for it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ emacs -Q -l ~/.emacs.d/straight/repos/straight.el/bootstrap.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Let&#39;s say you are making a bug report for Projectile. To load just Projectile and all of its dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x straight-use-package RET projectile RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this will use the currently checked-out revisions of Projectile and all of its dependencies, so you should take note of those in order to make your bug report.&lt;/p&gt; 
&lt;h4&gt;... in &lt;code&gt;straight.el&lt;/code&gt; itself&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a macro, &lt;code&gt;straight-bug-report&lt;/code&gt;, to test &lt;code&gt;straight.el&lt;/code&gt; in a clean environment. If possible, please use this when creating bug reports.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight-bug-report&lt;/code&gt; accepts the following keyword value pairs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:pre-bootstrap (Form)...&lt;/code&gt; Forms evaluated before bootstrapping &lt;code&gt;straight.el&lt;/code&gt; e.g.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq straight-repository-branch &quot;develop&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;Note this example is already in the default bootstrapping code.
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:post-bootstrap (Form)...&lt;/code&gt; Forms evaluated in the testing environment after boostrapping. e.g.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;(example :type git :host github))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:interactive Boolean&lt;/code&gt; If nil, the subprocess will immediately exit after the test. Output will be printed to &lt;code&gt;straight-bug-report--process-buffer&lt;/code&gt; Otherwise, the subprocess will be interactive.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:preserve Boolean&lt;/code&gt; If t, the test directory is left in the directory stored in the variable `temporary-file-directory&#39;. Otherwise, it is immediately removed after the test is run.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:executable String&lt;/code&gt; Indicate the Emacs executable to launch. Defaults to &lt;code&gt;&quot;emacs&quot;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:raw Boolean&lt;/code&gt; If t, the raw process output is sent to &lt;code&gt;straight-bug-report--process-buffer&lt;/code&gt;. Otherwise, it is formatted as markdown for submitting as an issue.&quot;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-bug-report
  :pre-bootstrap
  (message &quot;before bootstrap&quot;)
  (message &quot;multiple forms allowed&quot;)
  :post-bootstrap
  (message &quot;after bootstrap&quot;)
  (message &quot;multiple forms allowed&quot;)
  (straight-use-package &#39;(my-broken-package))
  (message &quot;bye&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above will run your test in a clean environment and produce a buffer with information you can paste directly into the issue body.&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/h3&gt; 
&lt;p&gt;The workflow for developing a package using &lt;code&gt;straight.el&lt;/code&gt; is quite straightforward:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add the package to your configuration as usual, via a call to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;M-x find-function&lt;/code&gt; or a similar command to jump to the code you wish to edit.&lt;/li&gt; 
 &lt;li&gt;Edit the code.&lt;/li&gt; 
 &lt;li&gt;Either evaluate the edited code using &lt;code&gt;M-x eval-buffer&lt;/code&gt;, &lt;code&gt;M-x eval-defun&lt;/code&gt;, or a similar command, or just restart Emacs to pick up your changes.&lt;/li&gt; 
 &lt;li&gt;When you are satisfied with your changes, use &lt;a href=&quot;https://magit.vc/&quot;&gt;Magit&lt;/a&gt; or just Git directly in order to commit and possibly push them. I suggest using &lt;a href=&quot;https://github.com/magit/forge&quot;&gt;Forge&lt;/a&gt; to create pull requests directly from Emacs, with Magit integration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Integration with other packages&lt;/h3&gt; 
&lt;h4&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; installs a new keyword &lt;code&gt;:straight&lt;/code&gt; for &lt;code&gt;use-package&lt;/code&gt; which may be used to install packages via &lt;code&gt;straight.el&lt;/code&gt;. The algorithm is extremely simple. This:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package el-patch
  :straight t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;macroexpands (essentially) to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;el-patch)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package el-patch
  :straight (:host github :repo &quot;radian-software/el-patch&quot;
             :branch &quot;develop&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;becomes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package
 &#39;(el-patch :host github :repo &quot;radian-software/el-patch&quot;
            :branch &quot;develop&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the feature you are requiring with &lt;code&gt;use-package&lt;/code&gt; is different from the package name, you can provide a full recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package tex-site
  :straight (auctex :host github
                    :repo &quot;emacsmirror/auctex&quot;
                    :files (:defaults (:exclude &quot;*.el.in&quot;))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And you may also provide just the package name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package tex-site
  :straight auctex)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don&#39;t provide &lt;code&gt;:straight&lt;/code&gt;, then by default nothing happens. You may customize &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to make it so that &lt;code&gt;:straight t&lt;/code&gt; is assumed unless you explicitly override it with &lt;code&gt;:straight nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Previously, &lt;code&gt;straight.el&lt;/code&gt; used a different syntax for its &lt;code&gt;use-package&lt;/code&gt; integration. For backwards compatibility, you can use this syntax instead by customizing &lt;code&gt;straight-use-package-version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can disable &lt;code&gt;use-package&lt;/code&gt; integration entirely by customizing &lt;code&gt;straight-enable-use-package-integration&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Loading packages conditionally&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;use-package&lt;/code&gt; has various features intended to support code being executed conditionally for a package. For example, the &lt;code&gt;:when&lt;/code&gt; keyword lets you provide a form that will essentially disable the &lt;code&gt;use-package&lt;/code&gt; form if it evaluates to nil.&lt;/p&gt; 
&lt;p&gt;However, when using the &lt;code&gt;:straight&lt;/code&gt; keyword, either explicitly or via &lt;code&gt;straight-use-package-by-default&lt;/code&gt;, then &lt;code&gt;:when&lt;/code&gt; has no effect on it. &lt;code&gt;straight.el&lt;/code&gt; is invoked unconditionally. The reason for this behavior is that if you invoke &lt;code&gt;straight-use-package&lt;/code&gt; on a different set of packages during different init sessions, then your version lockfile would end up containing different sets of packages depending on which session you generated it in.&lt;/p&gt; 
&lt;p&gt;Currently, the officially recommended pattern for conditionally loading a package is the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(straight-register-package &#39;foobar)
(when some-condition
  (use-package foobar
    :straight t))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This ensures that the package is registered to &lt;code&gt;straight.el&lt;/code&gt;, so it will be cloned if absent, and will be added to the lockfile, but it will not be compiled or loaded unless the subsequent &lt;code&gt;use-package&lt;/code&gt; form is evaluated. You can also invoke &lt;code&gt;straight-register-package&lt;/code&gt; only in the case that &lt;code&gt;some-condition&lt;/code&gt; is nil; either way will produce the same result with roughly the same performance due to idempotency and caching.&lt;/p&gt; 
&lt;p&gt;If you do this for a lot of packages, it may be advisable to wrap it in a macro, as &lt;a href=&quot;https://github.com/radian-software/radian/raw/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L606-L619&quot;&gt;my own Emacs configuration Radian does&lt;/a&gt; in the macro &lt;code&gt;radian-use-package&lt;/code&gt;. It would be a good idea if &lt;code&gt;straight.el&lt;/code&gt; did this by default in its &lt;code&gt;use-package&lt;/code&gt; integration but this has not been implemented yet.&lt;/p&gt; 
&lt;p&gt;If you want to not even clone a package when it is disabled, you can also technically achieve it by simply making the entire &lt;code&gt;use-package&lt;/code&gt; form conditional, without using &lt;code&gt;straight-register-package&lt;/code&gt;. However, this is not recommended because it will cause the generated lockfile to be deterministic, so &lt;code&gt;straight.el&lt;/code&gt; will not be changed to make &lt;code&gt;:when&lt;/code&gt; act that way by default.&lt;/p&gt; 
&lt;p&gt;It would be desirable if you could clone a package conditionally without breaking the lockfile functionality; this is a hopefully planned future feature, but it needs design work.&lt;/p&gt; 
&lt;h4&gt;&quot;Integration&quot; with &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;By default, &lt;code&gt;package.el&lt;/code&gt; will automatically insert a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file as soon as Emacs starts, which is ridiculous. It will also do this when you perform any package management operation. A separate system inserts some &lt;code&gt;custom&lt;/code&gt; forms into your init-file when you install a package. &lt;code&gt;straight.el&lt;/code&gt; disables all of these &quot;features&quot; by setting &lt;code&gt;package-enable-at-startup&lt;/code&gt; to nil and enabling some advices. You can override this behavior by customizing &lt;code&gt;straight-enable-package-integration&lt;/code&gt;, however.&lt;/p&gt; 
&lt;p&gt;To help avoid you shooting yourself in the foot by using both &lt;code&gt;:ensure&lt;/code&gt; and &lt;code&gt;:straight&lt;/code&gt; at the same time in a &lt;code&gt;use-package&lt;/code&gt; form (which would cause the same package to be installed twice using two different package managers), &lt;code&gt;straight.el&lt;/code&gt; will helpfully disable &lt;code&gt;:ensure&lt;/code&gt; whenever you include &lt;code&gt;:straight&lt;/code&gt; in a &lt;code&gt;use-package&lt;/code&gt; form. See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/425&quot;&gt;#425&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Integration with Flycheck&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.flycheck.org/en/latest/&quot;&gt;Flycheck&lt;/a&gt; sometimes creates temporary files in order to perform syntax checking. This is a problem for &lt;code&gt;straight.el&lt;/code&gt; because creation of temporary files will cause &lt;code&gt;straight.el&lt;/code&gt; to think that you have modified a package when you actually have not. (You might ask why &lt;code&gt;straight.el&lt;/code&gt; cannot recognize temporary files and ignore them. The answer is that for eager modification checking, all we see is that the directory mtime for the repository has been updated, and there&#39;s no way to disambiguate between temporary file shenanigans versus if you, say, deleted a file.)&lt;/p&gt; 
&lt;p&gt;To work around the problem, a user option &lt;code&gt;straight-fix-flycheck&lt;/code&gt; is provided, disabled by default (for now). You can enable it &lt;em&gt;before&lt;/em&gt; loading &lt;code&gt;straight.el&lt;/code&gt;, and it will work around the Flycheck problem in the following way. When you first visit a buffer, any Flycheck checker that involves creation of temporary files will be inhibited automatically, although other checkers will still run. (In practice this means no byte-compilation errors for Emacs Lisp, but you still get Checkdoc errors.) However, after you make a change to the buffer (by typing, etc.) then all checkers will be re-enabled. This means that &lt;code&gt;straight.el&lt;/code&gt; won&#39;t think the package was modified unless you actually modify the buffer of a file inside it, which I think is a reasonable compromise.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/508&quot;&gt;#508&lt;/a&gt; for discussion.&lt;/p&gt; 
&lt;h4&gt;Integration with Hydra&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/abo-abo/hydra/wiki/straight.el&quot;&gt;the Hydra wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Miscellaneous&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; explains what it is doing in the echo area, like this:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;Looking for cider recipe → Cloning melpa...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your terminal does not support Unicode characters nicely, you can customize &lt;code&gt;straight-arrow&lt;/code&gt; to display something else for the arrow.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; reports process output the &lt;code&gt;*straight-process*&lt;/code&gt; buffer. You can customize the name of this buffer via the &lt;code&gt;straight-process-buffer&lt;/code&gt; user option. If you want to hide this buffer by default, consider adding a leading space to the name.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can prevent &lt;code&gt;straight.el&lt;/code&gt; from making any modifications to the filesystem (though it may still read) by customizing the user option &lt;code&gt;straight-safe-mode&lt;/code&gt; to non-nil. This may be useful for running tasks automatically in batch mode, to avoid multiple concurrent Emacs processes all making changes to the filesystem. For an example of how this feature may be used to safely implement asynchronous byte-compilation of the init-file on successful startup, see &lt;a href=&quot;https://github.com/radian-software/radian&quot;&gt;Radian&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Developer manual&lt;/h2&gt; 
&lt;p&gt;This section tells you about all the interesting implementation details and design decisions that power &lt;code&gt;straight.el&lt;/code&gt; behind the scenes. It assumes you have already read the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#user-manual&quot;&gt;user manual&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&quot;&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;More to be written here in future. See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/51&quot;&gt;#51&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Low-level functions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The function &lt;code&gt;straight-chase-emulated-symlink&lt;/code&gt; is provided in order for external packages to correctly handle the emulated symlinks created by &lt;code&gt;straight.el&lt;/code&gt; when &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil. See, for example, &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/520&quot;&gt;#520&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Trivia&lt;/h2&gt; 
&lt;p&gt;This section has random, (possibly) interesting tidbits about &lt;code&gt;straight.el&lt;/code&gt; that don&#39;t fit in the other sections.&lt;/p&gt; 
&lt;h3&gt;Comments and docstrings&lt;/h3&gt; 
&lt;p&gt;How did I get that statistic about the percentage of &lt;code&gt;straight.el&lt;/code&gt; that is comments and docstrings? Simple: by abusing the syntax highlighting.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(let ((lines (make-hash-table :test #&#39;equal)))
  (goto-char (point-min))
  (while (&amp;lt; (point) (point-max))
    (when (memq (face-at-point)
                &#39;(font-lock-comment-face
                  font-lock-doc-face))
      (puthash (line-number-at-pos) t lines))
    (forward-char))
  (* (/ (float (length (hash-table-keys lines)))
        (line-number-at-pos))
     100))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you will have to scroll through the entire buffer first, since &lt;code&gt;font-lock-mode&lt;/code&gt; computes syntax highlighting lazily.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please do! Development takes place on the &lt;code&gt;develop&lt;/code&gt; branch. You can switch to that branch with&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq straight-repository-branch &quot;develop&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and base your pull requests from it. If you have an outstanding pull request whose features you would like to use in your configuration, there is full support for defining &lt;code&gt;straight.el&lt;/code&gt; as coming from any branch in any fork:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq straight-repository-user &quot;my-github-username&quot;)
(setq straight-repository-branch &quot;feat/my-cool-feature&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For additional information, please see &lt;a href=&quot;https://github.com/radian-software/contributor-guide&quot;&gt;the contributor guide for my projects&lt;/a&gt;. Note that &lt;code&gt;straight.el&lt;/code&gt; has not yet had an initial release, so you don&#39;t have to worry about a changelog.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;My init time got slower&lt;/h3&gt; 
&lt;p&gt;Your first step should be to customize the value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt;. The best setting is &lt;code&gt;(watch-files find-when-checking)&lt;/code&gt;; this is not enabled by default because it is impolite to spawn persistent background processes without asking, and because you must install &lt;a href=&quot;https://www.python.org/&quot;&gt;Python 3&lt;/a&gt; and &lt;a href=&quot;https://github.com/mattgreen/watchexec&quot;&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; for it to work. If you can&#39;t stand the extra dependencies and background process, consider the setting &lt;code&gt;(check-on-save find-when-checking)&lt;/code&gt; instead, which is just as fast but won&#39;t catch package modifications unless they are made within Emacs via the &lt;code&gt;save-buffer&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;Even with lazy modification detection, as described above, &lt;code&gt;straight.el&lt;/code&gt; is not quite as fast as &lt;code&gt;package.el&lt;/code&gt; (by a few percentage points). There are some planned changes which will make &lt;code&gt;straight.el&lt;/code&gt; just as fast as &lt;code&gt;package.el&lt;/code&gt;, if not faster. See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/9&quot;&gt;#9&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&quot;Could not find package in recipe repositories&quot;&lt;/h3&gt; 
&lt;p&gt;Assuming that the package you&#39;re trying to install actually exists, you need to update your recipe repositories (most likely MELPA, possibly Emacsmirror). See the next FAQ entry. This is like running &lt;code&gt;package-refresh-contents&lt;/code&gt; under &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Another possibility is that you are providing &lt;code&gt;straight.el&lt;/code&gt; with a feature name rather than a package name. Features are what you load with &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;load&lt;/code&gt;, or find in files. For example, &lt;code&gt;org-agenda&lt;/code&gt; and &lt;code&gt;org-capture&lt;/code&gt; are features. Packages, on the other hand, can provide one or more features. They are what are listed on MELPA et al. or by &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;org-contrib&lt;/code&gt; are packages.&lt;/p&gt; 
&lt;p&gt;When you write &lt;code&gt;(use-package foo ...)&lt;/code&gt;, the &lt;code&gt;foo&lt;/code&gt; is a &lt;em&gt;feature&lt;/em&gt;, not a package. You can give a different package name &lt;code&gt;bar&lt;/code&gt; by saying &lt;code&gt;(use-package foo :straight bar)&lt;/code&gt;. And when you write &lt;code&gt;(straight-use-package &#39;bar)&lt;/code&gt;, the &lt;code&gt;bar&lt;/code&gt; is a &lt;em&gt;package&lt;/em&gt;, not a feature.&lt;/p&gt; 
&lt;h3&gt;How do I update MELPA et al.?&lt;/h3&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&quot;&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;, like for any other package. &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#updating-recipe-repositories&quot;&gt;Read more.&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;My &lt;code&gt;use-package&lt;/code&gt; form isn&#39;t working properly&lt;/h3&gt; 
&lt;p&gt;There are a number of common problems you might be encountering. Check out the following list to see if there is an easy fix.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure you&#39;re not using &lt;code&gt;:ensure&lt;/code&gt; or &lt;code&gt;use-package-always-ensure&lt;/code&gt;. Those are for &lt;code&gt;package.el&lt;/code&gt; and using them with &lt;code&gt;straight.el&lt;/code&gt; will produce weird results (namely both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; will be invoked for the same package).&lt;/li&gt; 
 &lt;li&gt;Make sure you know &lt;em&gt;both&lt;/em&gt; the name of the feature and the name of the package. These are usually the same but not always (packages may provide more than one feature, ...). You give &lt;code&gt;use-package&lt;/code&gt; the name of a &lt;em&gt;feature&lt;/em&gt;, not a package (despite the name of the macro). With &lt;code&gt;straight-use-package-by-default&lt;/code&gt; or with &lt;code&gt;:straight t&lt;/code&gt;, the default is to try installing a package by the same name as the feature. 
  &lt;ul&gt; 
   &lt;li&gt;If you don&#39;t actually need to install a package, then pass &lt;code&gt;:straight nil&lt;/code&gt; to override &lt;code&gt;straight-use-package-by-default&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;If the package name is different from the feature name, then pass &lt;code&gt;:straight &amp;lt;package-name&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;If the package or your configurations aren&#39;t being loaded, you probably have something wrong with your usage of &lt;code&gt;:init&lt;/code&gt; and &lt;code&gt;:config&lt;/code&gt;. By default, the behavior of &lt;code&gt;use-package&lt;/code&gt; is unusably inconsistent. You must set either &lt;code&gt;use-package-always-defer&lt;/code&gt; (override with &lt;code&gt;:demand t&lt;/code&gt;) or &lt;code&gt;use-package-always-demand&lt;/code&gt; (override with &lt;code&gt;:defer t&lt;/code&gt;) to set a default for whether evaluating a &lt;code&gt;use-package&lt;/code&gt; form will load the package and your configurations. 
  &lt;ul&gt; 
   &lt;li&gt;If you&#39;ve set a package to be deferred, you then need to make sure there&#39;s a way for it to get loaded when needed, for example by means of an autoload (either provided by the package, or set up automatically by &lt;code&gt;use-package&lt;/code&gt; via &lt;code&gt;:bind&lt;/code&gt;, or set up manually through &lt;code&gt;use-package&lt;/code&gt; via &lt;code&gt;:commands&lt;/code&gt;) or by an explicit &lt;code&gt;require&lt;/code&gt; in one of your custom commands.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I uninstall a package?&lt;/h3&gt; 
&lt;p&gt;My first question is: do you really need to uninstall the package? Under &lt;code&gt;package.el&lt;/code&gt;, every package on disk gets loaded into Emacs, whether you asked for it or not. However, under &lt;code&gt;straight.el&lt;/code&gt;, only the packages you explicitly mention in your init-file get loaded into Emacs. So the &lt;em&gt;only&lt;/em&gt; problem with leaving a package on disk is that it takes up a little bit of disk space. (But the advantage is if you decide you want to use that package again later then you won&#39;t have to redownload it.)&lt;/p&gt; 
&lt;p&gt;If you really want to uninstall a package, simply delete its local repository from &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt; or run the &lt;code&gt;straight-remove-unused-repos&lt;/code&gt; command.&lt;/p&gt; 
&lt;h3&gt;The wrong version of my package was loaded&lt;/h3&gt; 
&lt;p&gt;To explain this problem, let us consider a concrete example. In &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/355&quot;&gt;this issue&lt;/a&gt;, a user found that the code&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;company-lsp)
(straight-use-package &#39;eglot)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;sometimes resulted in runtime errors because an old version of Flymake was being used.&lt;/p&gt; 
&lt;p&gt;The root problem here is that you want the most recent version of Flymake to be installed by &lt;code&gt;straight.el&lt;/code&gt;, but Emacs also ships an older version, and that older version is getting loaded instead.&lt;/p&gt; 
&lt;p&gt;The older version will be loaded if &lt;code&gt;(require &#39;flymake)&lt;/code&gt; (or similar) is invoked before &lt;code&gt;straight.el&lt;/code&gt; has made Flymake available (by means of &lt;code&gt;(straight-use-package &#39;flymake)&lt;/code&gt; or similar). But why would &lt;code&gt;straight.el&lt;/code&gt; not make Flymake available?&lt;/p&gt; 
&lt;p&gt;The only way that &lt;code&gt;straight.el&lt;/code&gt; knows to make Flymake available is if either you manually invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, or if one of the packages that you request in your init-file declares Flymake as a dependency. Now, any package that uses Flymake ought to declare it as a dependency. Thus, there should be no way for a package to load the Emacs-provided version of Flymake. However, sometimes package authors overlook this problem (it does not always cause an error, and sometimes package authors do not test exhaustively enough).&lt;/p&gt; 
&lt;p&gt;In this case, the problem was that &lt;code&gt;company-lsp&lt;/code&gt; declared a dependency on &lt;code&gt;lsp-mode&lt;/code&gt;, and &lt;code&gt;lsp-mode&lt;/code&gt; used Flymake without declaring a dependency on &lt;code&gt;flymake&lt;/code&gt;. There are two ways to work around the problem:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Preferable) Fix &lt;code&gt;lsp-mode&lt;/code&gt; to declare a dependency on &lt;code&gt;flymake&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;(Workaround) Manually invoke &lt;code&gt;(straight-use-package &#39;flymake)&lt;/code&gt; before &lt;code&gt;(straight-use-package &#39;company-lsp)&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you test this yourself, you might find it difficult to reproduce the problem. That is because there is only an issue when Flymake is actually loaded, and this doesn&#39;t necessarily happen when invoking &lt;code&gt;(straight-use-package &#39;company-lsp)&lt;/code&gt; &lt;em&gt;unless&lt;/em&gt; &lt;code&gt;straight.el&lt;/code&gt; needs to rebuild the relevant packages (which includes byte-compilation, which sometimes means actually loading dependencies). Keep this in mind when testing.&lt;/p&gt; 
&lt;p&gt;This problem commonly occurs with Org, since (1) Org is popular, (2) Emacs ships an obsolete version of Org, (3) many users want to use the up-to-date version, and (4) Org breaks backwards compatibility frequently. To solve it, simply make sure that you invoke &lt;code&gt;(straight-use-package &#39;org)&lt;/code&gt; before running any code that could load Org, including installing any package that lists it as a dependency.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/236&quot;&gt;this issue&lt;/a&gt; for discussion about ways of mitigating the bad UX of this situation.&lt;/p&gt; 
&lt;h3&gt;I get &quot;could not read username/password&quot; errors&lt;/h3&gt; 
&lt;p&gt;This is because &lt;code&gt;straight.el&lt;/code&gt; is not currently able to detect when SSH or Git asks for your username and/or password/passphrase and then pipe that prompt through to the minibuffer (&lt;a href=&quot;https://github.com/radian-software/straight.el/issues/334&quot;&gt;#334&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;To work around the problem, set up &lt;a href=&quot;https://git-scm.com/docs/git-credential-cache&quot;&gt;git-credential-cache&lt;/a&gt; if you use HTTPS, and &lt;a href=&quot;https://www.ssh.com/ssh/agent&quot;&gt;ssh-agent&lt;/a&gt; if you use SSH. That way, you won&#39;t be prompted for your username/password. When setting up ssh-agent, be careful to make sure that the relevant environment variables get set in Emacs. This might be tricky since starting Emacs from the desktop (rather than from the command line) sometimes results in it not inheriting any environment variables from your shell.&lt;/p&gt; 
&lt;h3&gt;How do I pin package versions or use only tagged releases?&lt;/h3&gt; 
&lt;p&gt;This is a planned feature. In the meantime, contributors have proposed various workarounds. See &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/246&quot;&gt;#246&lt;/a&gt; and &lt;a href=&quot;https://github.com/radian-software/straight.el/issues/31&quot;&gt;#31&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;straight-x.el&lt;/code&gt; now contains an experimental solution. In order to use it you will need to add similar snippets to your Emacs configuration.&lt;/p&gt; 
&lt;p&gt;First you need to add a new profile to &lt;code&gt;straight-profiles&lt;/code&gt; which also needs to be the last profile in the list. This should be done before you bootstrap &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; Tell straight.el about the profiles we are going to be using.
(setq straight-profiles
      &#39;((nil . &quot;default.el&quot;)
        ;; Packages which are pinned to a specific commit.
        (pinned . &quot;pinned.el&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After straight&#39;s install procedure you will need to add &lt;code&gt;straight-x.el&lt;/code&gt; and load the required commands.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(autoload #&#39;straight-x-pull-all &quot;straight-x&quot;)
(autoload #&#39;straight-x-freeze-versions &quot;straight-x&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A variable called &lt;code&gt;straight-x-pinned-packages&lt;/code&gt; has been defined in &lt;code&gt;straight-x.el&lt;/code&gt; and will contain your list of pinned packages.&lt;/p&gt; 
&lt;p&gt;From now on, you can pin a package to a specific commit like in the following example which will pin &lt;code&gt;org-mode&lt;/code&gt; to the 9.2.3 release version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(let ((straight-current-profile &#39;pinned))
  (straight-use-package &#39;org)
  (straight-use-package &#39;org-contrib)
  ;; Pin org-mode version.
  (add-to-list &#39;straight-x-pinned-packages
               &#39;(&quot;org&quot; . &quot;924308a150ab82014b69c46c04d1ab71e874a2e6&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you invoke &lt;code&gt;straight-x-freeze-versions&lt;/code&gt; it will first write the default lockfile and then pinned lockfile which takes precedence over the default one if packages are thawed. &lt;code&gt;straight-x-pull-all&lt;/code&gt; will first invoke &lt;code&gt;straight-pull-all&lt;/code&gt; and then restore all pinned packages.&lt;/p&gt; 
&lt;p&gt;You might want to assign the following aliases for more convenience:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(defalias &#39;straight-pull-all #&#39;straight-x-pull-all)
(defalias &#39;straight-freeze-versions #&#39;straight-x-freeze-versions)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please keep in mind that this is only a temporary solution and experimental!&lt;/p&gt; 
&lt;h3&gt;How can I use the built-in version of a package?&lt;/h3&gt; 
&lt;p&gt;To tell &lt;code&gt;straight.el&lt;/code&gt; that you want to use the version of Org shipped with Emacs, rather than cloning the upstream repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;(org :type built-in))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;:type&lt;/code&gt; is a keyword for &lt;code&gt;straight.el&lt;/code&gt;, not for &lt;code&gt;use-package&lt;/code&gt;. If you are using &lt;code&gt;use-package&lt;/code&gt;, then use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org :straight (:type built-in))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;Read more.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;News&lt;/h2&gt; 
&lt;h3&gt;Jan 1, 2021&lt;/h3&gt; 
&lt;p&gt;Breaking change: The previous behavior of the &lt;code&gt;:build&lt;/code&gt; keyword is now associated with the &lt;code&gt;:pre-build&lt;/code&gt; keyword. &lt;code&gt;:build&lt;/code&gt; is now used to specify build steps (generating autoloads and texinfo, byte/native compilation, etc). For more information on both of these keywords see &lt;a href=&quot;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&quot;&gt;the recipe format&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The following customization variable names have changed:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-disable-byte-compilation&lt;/code&gt; is now &lt;code&gt;straight-disable-compile&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-disable-native-compilation&lt;/code&gt; is now &lt;code&gt;straight-disable-native-compile&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;April 19, 2020&lt;/h3&gt; 
&lt;p&gt;Shallow clones are now compatible with lockfiles, so you can safely set &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; and get massive savings on network bandwidth and disk space.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jwiegley/emacs-async</title>
      <link>https://github.com/jwiegley/emacs-async</link>
      <description>&lt;p&gt;Simple library for asynchronous processing in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&quot; alt=&quot;License GPL 3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.gnu.org/packages/async.html&quot;&gt;&lt;img src=&quot;https://elpa.gnu.org/packages/async.svg?sanitize=true&quot; alt=&quot;GNU ELPA&quot; title=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://melpa.org/#/async&quot;&gt;&lt;img src=&quot;http://melpa.org/packages/async-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; title=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://stable.melpa.org/#/async&quot;&gt;&lt;img src=&quot;http://stable.melpa.org/packages/async-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;emacs-async&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;async.el&lt;/code&gt; is a module for doing asynchronous processing in Emacs. Some async applications are provided as well with this package:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dired-async&lt;/li&gt; 
 &lt;li&gt;smtp-mail-async&lt;/li&gt; 
 &lt;li&gt;async-bytecomp&lt;/li&gt; 
 &lt;li&gt;async-package&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;p&gt;You can install emacs-async package from MELPA using package.el.&lt;/p&gt; 
&lt;p&gt;You can also install from sources, in this case you should install using make and make install to ensure emacs-async is installed in a standard load-path destination where other packages can find it easily when compiling.&lt;/p&gt; 
&lt;h2&gt;Install dired-async&lt;/h2&gt; 
&lt;p&gt;Add to your &lt;code&gt;.emacs.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(autoload &#39;dired-async-mode &quot;dired-async.el&quot; nil t)
(dired-async-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will allow you to run asynchronously the dired commands for copying, renaming and symlinking. If you are a &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt; user, this will allow you to copy, rename etc... asynchronously from &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;. Note that with &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt; you can disable this by running the copy, rename etc... commands with a prefix argument.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t want to make dired/helm asynchronous disable it with &lt;code&gt;dired-async-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; 
&lt;p&gt;Users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-async&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Authentication and user interaction&lt;/h2&gt; 
&lt;p&gt;Some authentications require user interaction, for example answering to a prompt, entering a passwords etc. Your async implementation should avoid any such user interaction, to avoid being stuck with a prompt you will not be able to answer to in the child emacs. For all what is remote (mails, tramp etc...) you have to let emacs manage your identification with &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/auth.html&quot;&gt;auth-sources&lt;/a&gt;, so that you do not have to enter a password.&lt;/p&gt; 
&lt;p&gt;Basically all you need is something like this in your init file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(use-package auth-source
  :no-require t
  :config (setq auth-sources &#39;(&quot;~/.authinfo.gpg&quot; &quot;~/.netrc&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And a &quot;~/.authinfo.gpg&quot; file containing entries such as&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;default port sudo login root password xxxxxxxx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;machine xxxxx port xxx login xxx password xxxxxxx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;for more specific hosts (smtp, mails etc...)&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/auth.html&quot;&gt;auth-sources manual&lt;/a&gt; for more infos.&lt;/p&gt; 
&lt;p&gt;However, when choosing the destination with completion (e.g. helm) and you have no &quot;.authinfo&quot; file or just no entry for this host, tramp will prompt for password and offer you to save it, if you answer &#39;yes&#39; you will be able to achieve you async operation as the child Emacs will use this just created &quot;.authinfo&quot; file, if you say &#39;no&#39;, your dired-async process will hang forever because child emacs is waiting for password.&lt;/p&gt; 
&lt;p&gt;NOTE: For all your async implementations in emacs-26+ versions that handle remote files (tramp), you will have to let-bind &lt;code&gt;async-quiet-switch&lt;/code&gt; to &lt;code&gt;-q&lt;/code&gt; to workaround a tramp bug that prevent &lt;code&gt;emacs -Q&lt;/code&gt; to use &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/auth.html&quot;&gt;auth-sources&lt;/a&gt; mechanism.&lt;/p&gt; 
&lt;h2&gt;Enable asynchronous compilation of your (M)elpa packages&lt;/h2&gt; 
&lt;p&gt;By default emacs package.el compile packages in its running emacs session. This is not a problem when installing a new package (which is not actually loaded in current emacs) but it may create errors and bad compilation when upgrading a package (old version of package is already loaded and running in current emacs). You can remedy to this by allowing async to compile your packages asynchronously, (helm and magit actually do this by default, so if you are using these packages they will compile asynchronously) to do this, add to your init file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(async-bytecomp-package-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can control which packages will compile async with &lt;code&gt;async-bytecomp-allowed-packages&lt;/code&gt;. Set it to &lt;code&gt;&#39;(all)&lt;/code&gt; to be sure you will compile all packages asynchronously.&lt;/p&gt; 
&lt;h2&gt;Install/upgrade packages asynchronously&lt;/h2&gt; 
&lt;p&gt;When using &lt;code&gt;async-bytecomp-package-mode&lt;/code&gt; only compilation is done async. To do all async (download and (re)install) the function &lt;code&gt;async-package-do-action&lt;/code&gt; is provided, it is used by Helm packages UI.&lt;/p&gt; 
&lt;h2&gt;Send mails asynchronously with smtp mail async&lt;/h2&gt; 
&lt;p&gt;To enable this feature, ensure smtpmail-async.el is loaded and use&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;(setq message-send-mail-function &#39;async-smtpmail-send-it)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;WARNINGS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When using recent emacs (25+) the network security manager maybe called interactively in child emacs and make &lt;code&gt;async-smtpmail-send-it&lt;/code&gt; fail, so be sure to send email once synchronously before using &lt;code&gt;async-smtpmail-send-it&lt;/code&gt; as your &lt;code&gt;message-send-mail-function&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You may loose your sent mail if your network is down, so ensure to queue your mails if so. you can do this automatically, see &lt;a href=&quot;https://github.com/jwiegley/emacs-async/issues/64&quot;&gt;issue #64&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Async usage&lt;/h1&gt; 
&lt;p&gt;The interface is intended to be very easy to use:&lt;/p&gt; 
&lt;h2&gt;async-start&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-start START-FUNC FINISH-FUNC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Execute START-FUNC (often a lambda) in a subordinate Emacs process. When done, the return value is passed to FINISH-FUNC. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-start
   ;; What to do in the child process
   (lambda ()
     (message &quot;This is a test&quot;)
     (sleep-for 3)
     222)

   ;; What to do when it finishes
   (lambda (result)
     (message &quot;Async process done, result should be 222: %s&quot; result)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If FINISH-FUNC is &lt;code&gt;nil&lt;/code&gt; or missing, a future is returned that can be inspected using &lt;code&gt;async-get&lt;/code&gt;, blocking until the value is ready. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(let ((proc (async-start
               ;; What to do in the child process
               (lambda ()
                 (message &quot;This is a test&quot;)
                 (sleep-for 3)
                 222))))

    (message &quot;I&#39;m going to do some work here&quot;) ;; ....

    (message &quot;Waiting on async process, result should be 222: %s&quot;
             (async-get proc)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don&#39;t want to use a callback, and you don&#39;t care about any return value from the child process, pass the &lt;code&gt;&#39;ignore&lt;/code&gt; symbol as the second argument (if you don&#39;t, and never call &lt;code&gt;async-get&lt;/code&gt;, it will leave &lt;code&gt;*emacs*&lt;/code&gt; process buffers hanging around):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-start
 (lambda ()
   (delete-file &quot;a remote file on a slow link&quot; nil))
 &#39;ignore)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Even when FINISH-FUNC is present, a future is still returned except that it yields no value (since the value is passed to FINISH-FUNC). Calling &lt;code&gt;async-get&lt;/code&gt; on such a future always returns &lt;code&gt;nil&lt;/code&gt;. It can still be useful, however, as an argument to &lt;code&gt;async-ready&lt;/code&gt; or &lt;code&gt;async-wait&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;async-start-process&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-start-process NAME PROGRAM FINISH-FUNC &amp;amp;rest PROGRAM-ARGS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start the executable PROGRAM asynchronously. See &lt;code&gt;async-start&lt;/code&gt;. PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the process object when done. If FINISH-FUNC is &lt;code&gt;nil&lt;/code&gt;, the future object will return the process object when the program is finished. Set DEFAULT-DIRECTORY to change PROGRAM&#39;s current working directory.&lt;/p&gt; 
&lt;h2&gt;async-get&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-get FUTURE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the value from an asynchronously called function when it is ready. FUTURE is returned by &lt;code&gt;async-start&lt;/code&gt; or &lt;code&gt;async-start-process&lt;/code&gt; when its FINISH-FUNC is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;async-ready&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-ready FUTURE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Query a FUTURE to see if its function&#39;s value is ready -- i.e., if no blocking would result from a call to &lt;code&gt;async-get&lt;/code&gt; on that FUTURE.&lt;/p&gt; 
&lt;h2&gt;async-wait&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-wait FUTURE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Wait for FUTURE to become ready.&lt;/p&gt; 
&lt;h2&gt;async-inject-variables&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-inject-variables INCLUDE-REGEXP &amp;amp;optional PREDICATE EXCLUDE-REGEXP
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Return a &lt;code&gt;setq&lt;/code&gt; form that replicates part of the calling environment. It sets the value for every variable matching INCLUDE-REGEXP and also PREDICATE. It will not perform injection for any variable matching EXCLUDE-REGEXP (if present). It is intended to be used as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-start
   `(lambda ()
      (require &#39;smtpmail)
      (with-temp-buffer
        (insert ,(buffer-substring-no-properties (point-min) (point-max)))
        ;; Pass in the variable environment for smtpmail
        ,(async-inject-variables &quot;\\`\\(smtpmail\\|\\(user-\\)?mail\\)-&quot;)
        (smtpmail-send-it)))
   &#39;ignore)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;async-let&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-let BINDINGS &amp;amp;rest FORMS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Allow to establish let bindings asynchronously. Each value of binding can refer to the symbols already bound in BINDINGS (like &lt;code&gt;let*&lt;/code&gt;). FORMS are executed once BINDINGS have been evaluated, but without blocking emacs.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-let ((x &quot;hello&quot;)
            (y &quot;world&quot;))
  (message &quot;%s %s&quot; x y))
  
(async-let ((x (* 5 2))
            (y (+ x 4))
            (z (+ x y)))
  (message &quot;%d + %d = %d&quot; x y z))

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if you bind something to nil and set it afterward in body, the evaluation of this binding will NOT be asynchronous, but will happen in you current emacs, blocking it if the evaluation of this value is sufficiently important, e.g:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-let ((x &quot;hello&quot;)
            (y &quot;world&quot;)
            z)
  (setq z (+ 1 2)) ;; Huge calculation of Z will block emacs.
  (message &quot;%s %s %d&quot; x y z))

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;IOW if the calculation of Z is huge and you want it asynchronous evaluate it in BINDINGS but not in FORMS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>syl20bnr/spacemacs</title>
      <link>https://github.com/syl20bnr/spacemacs</link>
      <description>&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&quot;top&quot; id=&quot;fork-destination-box&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Made with Spacemacs&quot; height=&quot;20&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/gplv3.png&quot; alt=&quot;GPLv3 Software&quot; align=&quot;right&quot; height=&quot;20&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.twitter.com/spacemacs&quot;&gt;&lt;img src=&quot;https://i.imgur.com/tXSoThF.png&quot; alt=&quot;Twitter&quot; align=&quot;right&quot; height=&quot;20&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- logo and links --&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&quot; alt=&quot;Spacemacs&quot;&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#core-pillars&quot;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&quot;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#screenshots&quot;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION.html&quot;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#achievements&quot;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;!-- badges --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/p4MddFu6Ag&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&quot;&gt;&lt;img src=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&quot; alt=&quot;elisp state&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&quot; alt=&quot;Merchandise&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&quot; alt=&quot;Recommend it&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you &lt;em&gt;don&#39;t&lt;/em&gt; have an existing Emacs setup and want to run Spacemacs as your configuration, and if you have all &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&quot;&gt;prerequisites&lt;/a&gt; installed, you can install Spacemacs with one line:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;HOME&lt;/code&gt; is not set in environment or in registry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $env:APPDATA/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you do have an existing Emacs configuration, look at the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&quot;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on &lt;em&gt;ergonomics&lt;/em&gt;, &lt;em&gt;mnemonics&lt;/em&gt; and &lt;em&gt;consistency&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; 
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; 
&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&quot; alt=&quot;spacemacs_python&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;SPC&lt;/kbd&gt; or &lt;kbd&gt;Alt-m&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organized in configuration layers following a set of &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions &lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/FAQ.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting Help&lt;/h1&gt; 
&lt;p&gt;If you need help, ask your questions in the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; 
&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&quot;https://irc.gitter.im/&quot;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; 
&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jack of Some&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&quot;&gt;Spacemacs tutorial videos&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;GDQuest&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&quot;&gt;Game Design oriented tutorials &lt;/a&gt; to Spacemacs.&lt;/li&gt; 
 &lt;li&gt;Practicalli&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=jMJ58Gcc1RI&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&quot;&gt;Clojure tutorials based on Spacemacs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Eivind Fonn&#39;s classic &lt;a href=&quot;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&quot;&gt;Spacemacs ABC&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;A package manager if the OS doesn&#39;t have one already.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs is an extension of a popular text editor called &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;. So you&#39;ll need Emacs installed first.&lt;/p&gt; &lt;p&gt;Spacemacs requires Emacs 28.2 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;git&lt;/a&gt; is required to download and update Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Tar, in particular &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt;, is required to install and update Emacs packages used by Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; The default font used by Spacemacs is &lt;a href=&quot;https://adobe-fonts.github.io/source-code-pro/&quot;&gt;Source Code Pro&lt;/a&gt;. You may customize your own font settings and choose another font. If you want to use this default font, it must be installed.&lt;/p&gt; &lt;p&gt;Spacemacs also uses fallback fonts to ensure certain Unicode symbols it uses symbols appear correctly. The fonts used are determined by the OS:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Linux: &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;Nanum Gothic&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;macOS: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/arial-unicode-ms&quot;&gt;Arial Unicode MS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Windows: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/ms-gothic&quot;&gt;MS Gothic&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/lucida-sans-unicode&quot;&gt;Lucida Sans Unicode&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If the mode-line doesn&#39;t look similar to the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&quot;&gt;picture at the top of this page&lt;/a&gt;, make sure you have the correct fallback font installed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Various commands in Spacemacs needs one of the following line searching program:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep (rg)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;The silver searcher (ag)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/monochromegane/the_platinum_searcher&quot;&gt;The platinum searcher (pt)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beyondgrep/ack3&quot;&gt;ack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU Grep&lt;/a&gt; or &lt;a href=&quot;https://man.openbsd.org/grep&quot;&gt;BSD Grep&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Grep is very slow but it&#39;s widely available on most systems and is used as an fallback option.&lt;/p&gt; &lt;p&gt;We strongly recommend &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; over other line searching programs, for its blazing fast speed. The following subsections helps you to install it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Most Linux distribution ships a package manager already and if this is the case you are all set for this step.&lt;/p&gt; &lt;p&gt;If it doesn&#39;t, you may need to build the softwares mentioned below from their sources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In most distributions, Emacs is installed via an &lt;code&gt;emacs&lt;/code&gt; package from the package manager.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; DO not install &lt;a href=&quot;https://www.xemacs.org&quot;&gt;XEmacs&lt;/a&gt; because it&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs with various &lt;a href=&quot;https://www.emacswiki.org/emacs/EmacsAndXEmacs&quot;&gt;subtle differences&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Some Linux distributions support only Emacs versions older than 28.2. In this case you should &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&quot;&gt;build it from source&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Git is already installed on your system. Otherwise, you should be able to install &lt;code&gt;git&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Tar is already installed on your system. Otherwise, you should be able to install &lt;code&gt;tar&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If Nerd Fonts and Nanum Gothic are available from your distribution&#39;s package manager, you should install it there.&lt;/p&gt; &lt;p&gt;Otherwise, the generic way to install it is:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Download the latest pre-built &lt;code&gt;TTF&lt;/code&gt; font from &lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro/releases/latest&quot;&gt;https://github.com/adobe-fonts/source-code-pro/releases/latest&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;https://fonts.google.com/specimen/Nanum+Gothic&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Extract the archive and move the font files to &lt;code&gt;~/.fonts&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Refresh font cache with:&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;fc-cache -fv
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If your distribution is listed &lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation=&quot;&gt;here&lt;/a&gt;, follow the instructions. Otherwise, you can download its pre-built binary or build it from source.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The most popular package manager on macOS is &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;, to install it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Several options exist for installing Emacs on macOS:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus&quot;&gt;Emacs Plus&lt;/a&gt; features &lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus#features-explained&quot;&gt;additional functionalities&lt;/a&gt; over base Emacs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap d12frosted/emacs-plus

# install latest stable release, with Spacemacs icon and native compilation
brew install emacs-plus --with-spacemacs-icon --with-native-comp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will require the latest version of Xcode Command Line tools, which can be downloaded from the &lt;a href=&quot;https://developer.apple.com/download/all/&quot;&gt;Apple Developer Portal&lt;/a&gt; or by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;softwareupdate --all --install --force
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/railwaycat/homebrew-emacsmacport&quot;&gt;Emacs Mac Port&lt;/a&gt; adds native GUI support to Emacs 28. And the full list of features is available &lt;a href=&quot;https://bitbucket.org/mituharu/emacs-mac/src/master/README-mac&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap railwaycat/emacsmacport
brew install emacs-mac
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://emacsformacosx.com/&quot;&gt;Emacs for Mac OS X&lt;/a&gt; is the binary build of GNU Emacs, &lt;em&gt;without&lt;/em&gt; any extra feature.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;macOS ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but there are reports of weird issues so we require &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install gnu-tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; To install Source Code Pro Font:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap homebrew/cask-fonts
brew install --cask font-source-code-pro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Arial Unicode MS is shipped with macOS v10.5 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; via &lt;code&gt;Homebrew&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;We recommend using wsl2 with wslg support especially with a pgtk build of emacs and wayland. For the installation please refer to the linux installation section. When running emacs within your wsl2 environment emacs will be handled like any other windows application.&lt;/p&gt; 
&lt;p&gt;If this is not possible you can fallback to a native windows installation, however note that this will create a lot of subtle bugs especially with tls which we will most likely not be able to help with.&lt;/p&gt; 
&lt;p&gt;If you need to follow that path we recommend to at least use a package manager like &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; to install the needed packages.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You can install &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; via PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
irm get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Emacs can be installed in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add extras
scoop install emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows 10 build 17063 and later ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but it&#39;s required to install &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead to avoid possible issues. Alternatively, if you are running an earlier version of Windows, Tar isn&#39;t installed. In either case, you can install GNU Tar via:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install Source Code Pro Font in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add KnotUntied_scoop-fonts https://github.com/KnotUntied/scoop-fonts
scoop install sourcecodepro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MS Gothic and Lucida Sans Unicode are shipped with Windows 2003 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;h2&gt;Default Install&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The default installation downloads Spacemacs to the &lt;code&gt;.emacs.d&lt;/code&gt; directory in your &lt;code&gt;HOME&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;But in the case of Windows, &lt;code&gt;HOME&lt;/code&gt; is not set out-of-box. We recommend you to set it as an environment variable, with the same value as environment variable &lt;code&gt;HOMEPATH&lt;/code&gt;, which usually looks like &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Since Spacemacs will now be downloaded at &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;, if it already exists it&#39;ll be overridden.&lt;/p&gt; &lt;p&gt;Also, if you have either &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; or &lt;code&gt;$HOME/.emacs&lt;/code&gt;, they will appear before Spacemacs in Emacs&#39;s initialization steps. Thus they must be renamed in order for Spacemacs to load correctly.&lt;/p&gt; &lt;p&gt;To backup/rename the aforementioned files/directory, in shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[ -d $HOME/.emacs.d ] &amp;amp;&amp;amp; mv $HOME/.emacs.d $HOME/.emacs.d.bak
[ -f $HOME/.emacs.el ] &amp;amp;&amp;amp; mv $HOME/.emacs.el .emacs.el.bak
[ -f $HOME/.emacs ] &amp;amp;&amp;amp; mv $HOME/.emacs $HOME/.emacs.bak
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;if( Test-Path -Path $HOME/.emacs.d )
{
    Rename-Item $HOME/.emacs.d $HOME/.emacs.d.bak
}
if( Test-Path -Path $HOME/.emacs.el )
{
    Rename-Item $HOME/.emacs.el $HOME/.emacs.el.bak
}
if( Test-Path -Path $HOME/.emacs )
{
    Rename-Item $HOME/.emacs $HOME/.emacs.bak
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now clone this repository with Git. The following work for both shell and PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you have a limited internet connection or limited speed:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch Emacs and Spacemacs will be loaded.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Alternative Install Location&lt;/h2&gt; 
&lt;p&gt;To install Spacemacs in a different location, we first need to introduce how Spacemacs is loaded:&lt;/p&gt; 
&lt;p&gt;When Emacs is started, it looks for the init file &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;in a deterministic way&lt;/a&gt;. The &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-install&quot;&gt;default installation&lt;/a&gt; exploits it by occupying &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt; and let Emacs use it as its init file.&lt;/p&gt; 
&lt;p&gt;In other word, in default installation, Emacs find and load &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt;, which is then responsible to load other files in &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to install Spacemacs to a different location, you need to make sure it&#39;s loaded by Emacs in one of its &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;init file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, if you&#39;ve cloned Spacemacs to &lt;code&gt;$HOME/Spacemacs&lt;/code&gt;, and if you use &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; as Emacs init file, then the following lines in &lt;code&gt;$HOME/.emacs.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; load Spacemacs&#39;s initialization file, &quot;~&quot; is equivalent to &quot;$HOME&quot;
(load-file &quot;~/Spacemacs/init.el&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;First Launch and Configuration&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;After cloning Spacemacs, the first time when you launch Emacs, Spacemacs will automatically install the essential packages it requires. This step is the bootstrap.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once the bootstrap packages are installed, Spacemacs checks whether you have an customization file &lt;code&gt;$HOME/.spacemacs&lt;/code&gt;, known as &lt;code&gt;dotspacemacs&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If it already exists, Spacemacs loads it as the configuration.&lt;/li&gt; 
   &lt;li&gt;Otherwise, you need to answer a few questions and Spacemacs will generate the &lt;code&gt;dotspacemacs&lt;/code&gt; file for you.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If you are new to Emacs and/or Spacemacs, it&#39;s fine to just accept the default choices. They can be changed in the &lt;code&gt;dotspacemacs&lt;/code&gt; file later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs will download and install remaining packages it will require, according to your &lt;code&gt;dotspacemacs&lt;/code&gt;. When the all the packages have been installed, restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dotspacemacs&lt;/code&gt; is the configuration file for Spacemacs, it&#39;s self explanatory and is written in Emacs Lisp. Read &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In case you want to store your &lt;code&gt;dotspacemacs&lt;/code&gt; at another location, say under &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First set the environment variable &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Move &lt;code&gt;$HOME/.spacemacs&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d/init.el&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In other word, set &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to the parent directory of your &lt;code&gt;dotspacemacs&lt;/code&gt;, and move &lt;code&gt;dotspacemacs&lt;/code&gt; to the said directory.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Spacemacs logo&lt;/h2&gt; 
&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&quot;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&quot;&gt;this .desktop file&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, by default &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For macOS users, you need to &lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;download the .icns version of the logo&lt;/a&gt; and simply &lt;a href=&quot;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&quot;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS, securely installing Emacs packages may fail. If this happens to you please update your OS and Emacs. If you are behind a company proxy please trust the company firewall cert. We do not longer support disabling https due to security reasons.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows)&lt;/em&gt; If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;From Properties select the Tab “Security”,&lt;/li&gt; 
   &lt;li&gt;Select the button “Advanced”,&lt;/li&gt; 
   &lt;li&gt;Select the Tab “Owner”&lt;/li&gt; 
   &lt;li&gt;Change the owner to your account name&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows&lt;/em&gt;) The period (dot) before a file or folder name means that it&#39;s a hidden file or folder. To show hidden files and folders:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Press the Windows key&lt;/li&gt; 
   &lt;li&gt;Type &lt;code&gt;File explorer options&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; 
   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Update&lt;/h1&gt; 
&lt;p&gt;Spacemacs relies solely on a rolling update scheme based on the latest changes available. To update Spacemacs, simply pull the latest changes from the &lt;code&gt;develop&lt;/code&gt; branch:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git pull --rebase
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;After updating Spacemacs, you should also check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button, or use the convenient keybinding &lt;kbd&gt;SPC f e U&lt;/kbd&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Upgrading from the deprecated &lt;code&gt;master&lt;/code&gt; branch&lt;/h2&gt; 
&lt;p&gt;If you are still on the old &lt;code&gt;master&lt;/code&gt; branch (i.e., if &lt;code&gt;git branch --show-current&lt;/code&gt; shows &lt;code&gt;master&lt;/code&gt; instead of &lt;code&gt;develop&lt;/code&gt;), you need to &lt;a href=&quot;https://practical.li/spacemacs/reference/switch-to-develop/&quot;&gt;upgrade to &lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; first.&lt;/p&gt; 
&lt;h1&gt;Quotes&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/ashnur&quot;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis
on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/deuill&quot;&gt;deuill&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Contributions&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; 
&lt;p&gt;Before contributing, be sure to consult the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Communities&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs.stackexchange.com/questions/tagged/spacemacs&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/spacemacs&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; 
&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/intellimacs&quot;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/spaceclipse&quot;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SpaceVim/SpaceVim&quot;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/VSpaceCode/VSpaceCode&quot;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the initialization and core files&lt;/li&gt; 
 &lt;li&gt;all the layer files&lt;/li&gt; 
 &lt;li&gt;the documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&quot;https://github.com/nashamri&quot;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; 
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; 
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&quot;https://salt.bountysource.com/teams/spacemacs&quot;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&quot;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you used Spacemacs in a project, and you want to show that fact, you can use the Spacemacs badge: &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Built with Spacemacs&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;https://spacemacs.org&quot;&amp;gt;&amp;lt;img alt=&quot;Built with Spacemacs&quot; src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-org&quot;&gt;[[https://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>purcell/emacs.d</title>
      <link>https://github.com/purcell/emacs.d</link>
      <description>&lt;p&gt;An Emacs configuration bundle with batteries included&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/purcell/emacs.d/actions&quot;&gt;&lt;img src=&quot;https://github.com/purcell/emacs.d/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.patreon.com/sanityinc&quot;&gt;&lt;img alt=&quot;Support me&quot; src=&quot;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;A reasonable Emacs config&lt;/h1&gt; 
&lt;p&gt;This is my emacs configuration tree, continually used and tweaked since 2000, and it may be a good starting point for other Emacs users, especially web developers. These days it&#39;s somewhat geared towards OS X, but it is known to also work on Linux and Windows.&lt;/p&gt; 
&lt;p&gt;Emacs itself comes with support for many programming languages. This config adds improved defaults and extended support for the following, listed in the approximate order of how much I use them, from most to least:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Haskell / Purescript / Elm / OCaml&lt;/li&gt; 
 &lt;li&gt;Ruby / Ruby on Rails&lt;/li&gt; 
 &lt;li&gt;SQL&lt;/li&gt; 
 &lt;li&gt;CSS / LESS / SASS / SCSS&lt;/li&gt; 
 &lt;li&gt;Javascript / Typescript&lt;/li&gt; 
 &lt;li&gt;HTML / HAML / Markdown / Textile / ERB&lt;/li&gt; 
 &lt;li&gt;Common Lisp (with Slime)&lt;/li&gt; 
 &lt;li&gt;Python&lt;/li&gt; 
 &lt;li&gt;Rust&lt;/li&gt; 
 &lt;li&gt;Clojure (with Cider and nRepl)&lt;/li&gt; 
 &lt;li&gt;PHP&lt;/li&gt; 
 &lt;li&gt;Erlang&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Included is a nice setup for in-buffer autocompletion with &lt;a href=&quot;https://github.com/minad/corfu&quot;&gt;corfu&lt;/a&gt;, and minibuffer completion using &lt;a href=&quot;https://github.com/minad/vertico&quot;&gt;vertico&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;flymake&lt;/code&gt; (re-using backends from &lt;a href=&quot;http://www.flycheck.org&quot;&gt;flycheck&lt;/a&gt;) is used to immediately highlight syntax errors in Ruby, Python, Javascript, Haskell and a number of other languages.&lt;/p&gt; 
&lt;p&gt;LSP support is provided using &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Various popular Emacs tools are included and configured here, such as &lt;code&gt;magit&lt;/code&gt;, &lt;code&gt;docker.el&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt;, &lt;code&gt;org-mode&lt;/code&gt; etc., but the focus is moderate&lt;/p&gt; 
&lt;h2&gt;Supported Emacs versions&lt;/h2&gt; 
&lt;p&gt;Use the latest released Emacs version available to you. The author typically uses the latest stable version.&lt;/p&gt; 
&lt;p&gt;The config should run on Emacs 27.1 or greater and is designed to degrade smoothly - see the CI build - but many enhancements may be unavailable if your Emacs is too old, and in general you should try to use the latest stable Emacs release like I do.&lt;/p&gt; 
&lt;h2&gt;Other requirements&lt;/h2&gt; 
&lt;p&gt;To make the most of the programming language-specific support in this config, further programs will likely be required, particularly those that flycheck or flymake use to provide on-the-fly syntax checking.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To install, clone this repo to &lt;code&gt;~/.emacs.d&lt;/code&gt;, i.e. ensure that the &lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/purcell/emacs.d.git ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Upon starting up Emacs for the first time, further third-party packages will be automatically downloaded and installed. If you encounter any errors at that stage, try restarting Emacs, and possibly running &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; before doing so.&lt;/p&gt; 
&lt;h2&gt;Updates&lt;/h2&gt; 
&lt;p&gt;Update the config with &lt;code&gt;git pull&lt;/code&gt;. You&#39;ll probably also want/need to update the third-party packages regularly too, because that&#39;s what I do, and the config assumes it:&lt;/p&gt; 
&lt;p&gt;&lt;kbd&gt;M-x package-list-packages&lt;/kbd&gt;, then &lt;kbd&gt;U&lt;/kbd&gt; followed by &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; 
&lt;p&gt;You should usually restart Emacs after pulling changes or updating packages so that they can take effect. Emacs should usually restore your working buffers when you restart due to this configuration&#39;s use of the &lt;code&gt;desktop&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; packages.&lt;/p&gt; 
&lt;h2&gt;Changing themes and adding your own customization&lt;/h2&gt; 
&lt;p&gt;To add your own customization, use &lt;kbd&gt;M-x customize&lt;/kbd&gt;, &lt;kbd&gt;M-x customize-themes&lt;/kbd&gt; etc. and/or create a file &lt;code&gt;~/.emacs.d/lisp/init-local.el&lt;/code&gt; which looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;... your code here ...

(provide &#39;init-local)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need initialisation code which executes earlier in the startup process, you can also create an &lt;code&gt;~/.emacs.d/lisp/init-preload-local.el&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;If you plan to customize things more extensively, you should probably just fork the repo and hack away at the config to make it your own! Remember to regularly merge in changes from this repo, so that your config remains compatible with the latest package and Emacs versions.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Please note that I cannot provide support for customised versions of this configuration.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Support / issues&lt;/h2&gt; 
&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version of this code, and that you have updated your packages to the most recent available versions (see &quot;Updates&quot; above). If you still experience problems, go ahead and &lt;a href=&quot;https://github.com/purcell/emacs.d&quot;&gt;file an issue on the github project&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;-Steve Purcell&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.patreon.com/sanityinc&quot;&gt;💝 Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://uk.linkedin.com/in/stevepurcell&quot;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.sanityinc.com/&quot;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs-helm/helm</title>
      <link>https://github.com/emacs-helm/helm</link>
      <description>&lt;p&gt;Emacs incremental completion and selection narrowing framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&quot; alt=&quot;License GPL 3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/helm&quot;&gt;&lt;img alt=&quot;MELPA&quot; src=&quot;https://melpa.org/packages/helm-badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/helm&quot;&gt;&lt;img alt=&quot;MELPA Stable&quot; src=&quot;https://stable.melpa.org/packages/helm-badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;Emacs-Helm&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://avatars3.githubusercontent.com/u/1541688?v=3&amp;amp;s=200&quot; alt=&quot;Emacs-helm&quot; title=&quot;&quot;&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;justify&quot;&gt; &lt;b&gt;Helm&lt;/b&gt; is an Emacs framework for incremental completions and narrowing selections. It provides an easy-to-use API for developers wishing to build their own Helm applications in Emacs, powerful search tools and dozens of already built-in commands providing completion to almost everything. It is a must-have for anyone using Emacs as a main work environment. Helm has been widely adopted by many Emacs power-users. It is available in Melpa and can be easily installed from the Emacs package manager. &lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://emacs-helm.github.io/helm/&quot;&gt;&lt;b&gt;Homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/emacs-helm/helm/releases&quot;&gt;&lt;b&gt;Downloads&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/emacs-helm/helm/wiki#install&quot;&gt;&lt;b&gt;Get started&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/emacs-helm/helm/wiki&quot;&gt;&lt;b&gt;Helm wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/emacs-helm/helm/wiki/FAQ&quot;&gt;&lt;b&gt;FAQ&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;center&quot;&gt; Helm in action browsing images&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/emacs-helm/helm/raw/master/images/screenshot002.png?raw=true&quot; alt=&quot;Emacs-helm grep ag&quot; title=&quot;&quot;&gt; &lt;/p&gt; 
&lt;p&gt;Maintainance of Helm is a lot of work please consider making a donation, thank you!&lt;/p&gt; 
&lt;a href=&quot;https://www.patreon.com/user?u=86324343&quot;&gt; &lt;img title=&quot;Donate monthly using Patreon&quot; alt=&quot;Donate monthly using Patreon&quot; style=&quot;height: 50px; width: auto;&quot; src=&quot;https://github.com/emacs-helm/helm/raw/master/images/patreon-25x.png?raw=true&quot;&gt;&lt;/a&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/emacs-helm&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&amp;amp;color=%23fe8e86&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sterlingg/json-snatcher</title>
      <link>https://github.com/Sterlingg/json-snatcher</link>
      <description>&lt;p&gt;Get the path to a JSON element in Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#json-snatcher.el&lt;/p&gt; 
&lt;p&gt;Say you&#39;re looking through a large JSON file, and see a value that you want to extract programmatically. This Emacs extension will allow you to snatch the path to this value.&lt;/p&gt; 
&lt;p&gt;Available on MELPA at &lt;a href=&quot;http://melpa.milkbox.net/#/json-snatcher&quot;&gt;http://melpa.milkbox.net/#/json-snatcher&lt;/a&gt; .&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;First include the package&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(require &#39;json-snatcher)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then add the following lines to your .emacs file, which sets a hotkey when editing JSON files in either js or js2 mode&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(defun js-mode-bindings ()
&quot;Sets a hotkey for using the json-snatcher plugin&quot;
	 (when (string-match  &quot;\\.json$&quot; (buffer-name))
        (local-set-key (kbd &quot;C-c C-g&quot;) &#39;jsons-print-path)))
(add-hook &#39;js-mode-hook &#39;js-mode-bindings)
(add-hook &#39;js2-mode-hook &#39;js-mode-bindings)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;Here&#39;s an example of the plugin at work&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/Sterlingg/json-snatcher/raw/master/Demo/demo.gif&quot; alt=&quot;Lights, Camera, Action!&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yoshiki/yaml-mode</title>
      <link>https://github.com/yoshiki/yaml-mode</link>
      <description>&lt;p&gt;The emacs major mode for editing files in the YAML data serialization format.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;RECRUITMENTS I have not used emacs and this library for a long time, so I recruit maintainers or collaborators for all yaml-mode users. If you are interested in maintaining or collaborating with this library, please contact me.&lt;/p&gt; 
&lt;p&gt;NAME yaml-mode - Simple major mode to edit YAML file for emacs&lt;/p&gt; 
&lt;p&gt;REQUIREMENTS Emacs 24.1&lt;/p&gt; 
&lt;p&gt;SYNOPSIS To install, just drop this file into a directory in your `load-path&#39; and (optionally) byte-compile it. To automatically handle files ending in &#39;.yml&#39;, add something like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(require &#39;yaml-mode)
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\.yml\\&#39;&quot; . yaml-mode))

to your .emacs file.

Unlike python-mode, this mode follows the Emacs convention of not
binding the ENTER key to `newline-and-indent&#39;.  To get this
behavior, add the key definition to `yaml-mode-hook&#39;:

(add-hook &#39;yaml-mode-hook
  &#39;(lambda ()
    (define-key yaml-mode-map &quot;\C-m&quot; &#39;newline-and-indent)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;DESCRIPTION yaml-mode is major mode for emacs.&lt;/p&gt; 
&lt;p&gt;INSTALL You can install yaml-mode typing below.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    % make
    % make install

    or

    % make PREFIX=/your/home/dir
    % make install PREFIX=/your/home/dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SETTING see SYNOPSIS.&lt;/p&gt; 
&lt;p&gt;AUTHOR Yoshiki Kurihara &lt;a href=&quot;mailto:kurihara@cpan.org&quot;&gt;kurihara@cpan.org&lt;/a&gt; Copyright (C) 2010 by Free Software Foundation, Inc.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;This file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This file is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>magnars/expand-region.el</title>
      <link>https://github.com/magnars/expand-region.el</link>
      <description>&lt;p&gt;Emacs extension to increase selected region by semantic units.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://travis-ci.org/magnars/expand-region.el&quot;&gt;&lt;img src=&quot;https://secure.travis-ci.org/magnars/expand-region.el.png&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/magnars/expand-region.el&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/magnars/expand-region.el/badge.svg?branch=master&amp;amp;service=github&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.gnu.org/packages/expand-region.html&quot;&gt;&lt;img src=&quot;https://elpa.gnu.org/packages/expand-region.svg?sanitize=true&quot; alt=&quot;GNU ELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/expand-region&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/expand-region-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/expand-region&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/expand-region-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;expand-region.el&lt;/h1&gt; 
&lt;p&gt;Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.&lt;/p&gt; 
&lt;p&gt;An example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(setq alphabet-start &quot;abc def&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the cursor at the &lt;code&gt;c&lt;/code&gt;, it starts by marking the entire word &lt;code&gt;abc&lt;/code&gt;, then expand to the contents of the quotes &lt;code&gt;abc def&lt;/code&gt;, then to the entire quote &lt;code&gt;&quot;abc def&quot;&lt;/code&gt;, then to the contents of the sexp &lt;code&gt;setq alphabet-start &quot;abc def&quot;&lt;/code&gt; and finally to the entire sexp.&lt;/p&gt; 
&lt;p&gt;You can set it up like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(require &#39;expand-region)
(global-set-key (kbd &quot;C-=&quot;) &#39;er/expand-region)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you expand too far, you can contract the region by pressing &lt;code&gt;-&lt;/code&gt; (minus key), or by prefixing the shortcut you defined with a negative argument: &lt;code&gt;C-- C-=&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Maintenance warning&lt;/h2&gt; 
&lt;p&gt;I use this package every day, and have been doing so for years. It just works. At least, it works for all my use cases. And if it breaks somehow, I fix it.&lt;/p&gt; 
&lt;p&gt;However, it has become painfully clear to me that I don&#39;t have time to fix problems I don&#39;t have. It&#39;s been years since I could keep pace with the issues and pull requests. Whenever I try, I keep getting feedback that my fix isn&#39;t good enough by some standard I don&#39;t particularly care about.&lt;/p&gt; 
&lt;p&gt;So, I have closed the issue tracker and the pull requests. I hope you can happily use this package, just like I do. If it doesn&#39;t work for you, then I&#39;m sorry. Thankfully Emacs is infinitely malleable, you can probably fix it yourself.&lt;/p&gt; 
&lt;p&gt;TLDR: &lt;em&gt;I am still maintaining this package&lt;/em&gt;, but I am no longer crowdsourcing a list of issues.&lt;/p&gt; 
&lt;h2&gt;Video&lt;/h2&gt; 
&lt;p&gt;You can &lt;a href=&quot;http://emacsrocks.com/e09.html&quot;&gt;watch an intro to expand-region at Emacs Rocks&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;I highly recommend installing expand-region through elpa.&lt;/p&gt; 
&lt;p&gt;It&#39;s available on &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x package-install expand-region
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Via &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;use-package&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(use-package expand-region
  :bind (&quot;C-=&quot; . er/expand-region))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Language support&lt;/h2&gt; 
&lt;p&gt;Expand region works fairly well with most languages, due to the general nature of the basic expansions:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;er/mark-word
er/mark-symbol
er/mark-symbol-with-prefix
er/mark-next-accessor
er/mark-method-call
er/mark-inside-quotes
er/mark-outside-quotes
er/mark-inside-pairs
er/mark-outside-pairs
er/mark-comment
er/mark-url
er/mark-email
er/mark-defun
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, most languages also will benefit from some specially crafted expansions. For instance, expand-region comes with these extra expansions for html-mode:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;er/mark-html-attribute
er/mark-inner-tag
er/mark-outer-tag
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add your own expansions to the languages of your choice simply by creating a function that looks around point to see if it&#39;s inside or looking at the construct you want to mark, and if so - mark it.&lt;/p&gt; 
&lt;p&gt;There&#39;s plenty of examples to look at in these files.&lt;/p&gt; 
&lt;p&gt;After you make your function, add it to a buffer-local version of the &lt;code&gt;er/try-expand-list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Let&#39;s say you want expand-region to also mark paragraphs and pages in text-mode. Incidentally Emacs already comes with &lt;code&gt;mark-paragraph&lt;/code&gt; and &lt;code&gt;mark-page&lt;/code&gt;. To add it to the try-list, do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(defun er/add-text-mode-expansions ()
  (make-variable-buffer-local &#39;er/try-expand-list)
  (setq er/try-expand-list (append
                            er/try-expand-list
                            &#39;(mark-paragraph
                              mark-page))))

(add-hook &#39;text-mode-hook &#39;er/add-text-mode-expansions)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add that to its own file, and add it to the &lt;code&gt;expand-region.el&lt;/code&gt;-file, where it says &quot;Mode-specific expansions&quot;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Badly written expansions might slow down expand-region dramatically. Remember to exit quickly before you start traversing the entire document looking for constructs to mark.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;If you make some nice expansions for your favorite mode, it would be great if you opened a pull-request. The repo is at:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://github.com/magnars/expand-region.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All changes must be accompanied by feature tests. They are written in &lt;a href=&quot;http://ecukes.info&quot;&gt;Ecukes&lt;/a&gt;, a Cucumber for Emacs.&lt;/p&gt; 
&lt;p&gt;To fetch the test dependencies, install &lt;a href=&quot;https://github.com/rejeep/cask.el&quot;&gt;cask&lt;/a&gt; if you haven&#39;t already, then:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd /path/to/expand-region
$ cask
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./run-tests.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If feature tests are missing for the mode you are changing, please make sure to add a set of basic tests around the functionality you&#39;re changing.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/joshwnj&quot;&gt;Josh Johnston&lt;/a&gt; contributed &lt;code&gt;er/contract-region&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lewang&quot;&gt;Le Wang&lt;/a&gt; contributed consistent handling of the mark ring, expanding into pairs/quotes just left of the cursor, and general code clean-up.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kidd&quot;&gt;Raimon Grau&lt;/a&gt; added support for when transient-mark-mode is off.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rolandwalker&quot;&gt;Roland Walker&lt;/a&gt; added option to copy the contents of the most recent action to a register, and some fixes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DamienCassou&quot;&gt;Damien Cassou&lt;/a&gt; added option to continue expanding/contracting with fast keys after initial expand.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/thisirs&quot;&gt;Sylvain Rousseau&lt;/a&gt; fixed loads of little annoyances.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ryantm&quot;&gt;Ryan Mulligan&lt;/a&gt; cleaned up a lot of byte compilation warnings.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LefterisJP&quot;&gt;Lefteris Karapetsas&lt;/a&gt; added subword-mode expansions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Language specific contributions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mbriggs&quot;&gt;Matt Briggs&lt;/a&gt;, &lt;a href=&quot;https://github.com/diasjorge&quot;&gt;Jorge Dias&lt;/a&gt; and &lt;a href=&quot;https://github.com/lewang&quot;&gt;Le Wang&lt;/a&gt; contributed Ruby expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gvol&quot;&gt;Ivan Andrus&lt;/a&gt;, &lt;a href=&quot;https://github.com/fgeller&quot;&gt;fgeller&lt;/a&gt;, &lt;a href=&quot;https://github.com/edmccard&quot;&gt;edmccard&lt;/a&gt; and &lt;a href=&quot;https://github.com/vmalloc&quot;&gt;Rotem Yaari&lt;/a&gt; contributed Python expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ffevotte&quot;&gt;François Févotte&lt;/a&gt; contributed C and C++ expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gvol&quot;&gt;Ivan Andrus&lt;/a&gt; contributed text-mode, LaTeX-mode and nxml-mode expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gleber&quot;&gt;Gleb Peregud&lt;/a&gt; contributed Erlang expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/markhepburn&quot;&gt;Mark Hepburn&lt;/a&gt; contributed Octave expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vmalloc&quot;&gt;Rotem Yaari&lt;/a&gt; also contributed an adapter for the region expansion in web-mode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gugod&quot;&gt;Kang-min Liu&lt;/a&gt; contributed Perl expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/algal&quot;&gt;Alexis Gallagher&lt;/a&gt; contributs Standard ML expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/titaniumbones&quot;&gt;Matt Price&lt;/a&gt; improved on org-mode expansions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/maksle&quot;&gt;Maksim Grinman&lt;/a&gt; added inner-quotes expansion for nxml-mode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AndreaOrru&quot;&gt;Andrea Orru&lt;/a&gt; added &lt;code&gt;expand-region-smart-cursor&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thanks!&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;h3&gt;From 0.11 to 0.12 (WIP)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Option &lt;code&gt;expand-region-subword-enabled&lt;/code&gt; to enable subword expansions&lt;/li&gt; 
 &lt;li&gt;Improve web-mode expansions (Renato F)&lt;/li&gt; 
 &lt;li&gt;Fixes for cc-mode expansions (Wilfred Hughes)&lt;/li&gt; 
 &lt;li&gt;Fixes for org-mode expansions (Wilfred Hughes)&lt;/li&gt; 
 &lt;li&gt;Fix unnecessary unfolding in org-mode&lt;/li&gt; 
 &lt;li&gt;Fix bug with transient-mark-mode (Russell Black)&lt;/li&gt; 
 &lt;li&gt;Fix problems with auto-loading (Philippe Vaucher, Wilfred Hughes)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From 0.10 to 0.11&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Option &lt;code&gt;expand-region-smart-cursor&lt;/code&gt; to keep cursor at beginning of region if it is there (Andrea Orru)&lt;/li&gt; 
 &lt;li&gt;Add subword-mode expansions (Lefteris Karapetsas)&lt;/li&gt; 
 &lt;li&gt;Improve enh-ruby-mode expansions (Ryan Davis)&lt;/li&gt; 
 &lt;li&gt;Improve nxml-mode expansions (Maksim Grinman)&lt;/li&gt; 
 &lt;li&gt;Improve org-mode expansions (Matt Price)&lt;/li&gt; 
 &lt;li&gt;Improve js-mode expansions&lt;/li&gt; 
 &lt;li&gt;Better performance&lt;/li&gt; 
 &lt;li&gt;Lots of bugfixes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From 0.9 to 0.10&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Smarter expansion of ruby heredoc contents (Steve Purcell)&lt;/li&gt; 
 &lt;li&gt;Add enh-ruby-mode expansions (Bradley Wright)&lt;/li&gt; 
 &lt;li&gt;Add basic expansion er/mark-defun&lt;/li&gt; 
 &lt;li&gt;Big cleanup of byte compilation warnings (Ryan Mulligan)&lt;/li&gt; 
 &lt;li&gt;Better performance&lt;/li&gt; 
 &lt;li&gt;Lots of bugfixes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From 0.8 to 0.9&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Improve org-, clojure-, python-, latex-, cc- and ruby-modes&lt;/li&gt; 
 &lt;li&gt;Add basic expansions: email and url&lt;/li&gt; 
 &lt;li&gt;Add sml-mode expansions (Alexis Gallagher)&lt;/li&gt; 
 &lt;li&gt;Add cperl-mode expansions (Kang-min Liu)&lt;/li&gt; 
 &lt;li&gt;Add octave-mode expansions (Mark Hepburn)&lt;/li&gt; 
 &lt;li&gt;Add web-mode expansions (Rotem Yaari)&lt;/li&gt; 
 &lt;li&gt;Use Carton for dev-dependencies&lt;/li&gt; 
 &lt;li&gt;Fix bad behavior in minibuffer (Sylvain Rousseau)&lt;/li&gt; 
 &lt;li&gt;More robust comment expansions&lt;/li&gt; 
 &lt;li&gt;Improve loading of expansions for all major modes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From 0.7 to 0.8&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Improve js-, ruby-, python- and latex-modes&lt;/li&gt; 
 &lt;li&gt;Support built-in javascript-mode&lt;/li&gt; 
 &lt;li&gt;Handle narrowed buffers correctly&lt;/li&gt; 
 &lt;li&gt;Include mode-specific expansions when autoloading&lt;/li&gt; 
 &lt;li&gt;Provide option to copy the contents of the most recent action to a register&lt;/li&gt; 
 &lt;li&gt;Add cc-mode specific expansions&lt;/li&gt; 
 &lt;li&gt;Add customization to turn off skipping whitespace when expanding&lt;/li&gt; 
 &lt;li&gt;Continue expanding/contracting with one key press (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2011-2019 Magnar Sveen&lt;/p&gt; 
&lt;p&gt;Author: Magnar Sveen &lt;a href=&quot;mailto:magnars@gmail.com&quot;&gt;magnars@gmail.com&lt;/a&gt; Keywords: marking region&lt;/p&gt; 
&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&quot;http://www.gnu.org/licenses/&quot;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs-lsp/lsp-mode</title>
      <link>https://github.com/emacs-lsp/lsp-mode</link>
      <description>&lt;p&gt;Emacs client/library for the Language Server Protocol&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; 
&lt;h2&gt;title: LSP Mode - Language Server Protocol support for Emacs description: Language Server Protocol support with multiples languages support for Emacs root_file: README.md&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/lsp-mode&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/lsp-mode-badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/lsp-mode&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/lsp-mode-badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/swuxy5AAgT&quot;&gt;&lt;img src=&quot;https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/emacs-lsp/lsp-mode/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/logo.png&quot; width=&quot;240&quot; align=&quot;right&quot;&gt; 
&lt;h1&gt;Language Server Protocol Support for Emacs&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/head.png&quot; alt=&quot;LSP mode&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode&quot;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/installation&quot;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/languages&quot;&gt;&lt;strong&gt;languages&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/settings/mode/&quot;&gt;&lt;strong&gt;settings&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/&quot;&gt;&lt;strong&gt;tutorials&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/troubleshooting&quot;&gt;&lt;strong&gt;troubleshooting&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/gallery&quot;&gt;&lt;strong&gt;screenshots&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/faq&quot;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;❤️&lt;/span&gt; &lt;strong&gt;Community Driven&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💎&lt;/span&gt; &lt;strong&gt;Fully featured&lt;/strong&gt; - supports &lt;strong&gt;all&lt;/strong&gt; features in Language Server Protocol v3.14.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;strong&gt;Fast&lt;/strong&gt; - see &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/performance&quot;&gt;performance section&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🌟&lt;/span&gt; &lt;strong&gt;Flexible&lt;/strong&gt; - choose between full-blown IDE with flashy UI or minimal distraction free.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;⚙&lt;/span&gt; &lt;strong&gt;Easy to configure&lt;/strong&gt; - works out of the box and automatically upgrades if additional packages are present.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Client for &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt; 
 &lt;li&gt;Real-time Diagnostics/linting via &lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;flycheck&lt;/a&gt; (recommended) or &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26 (requires flymake&amp;gt;=1.0.5)&lt;/li&gt; 
 &lt;li&gt;Code completion - &lt;code&gt;company-capf&lt;/code&gt; / &lt;code&gt;completion-at-point&lt;/code&gt; (note that &lt;a href=&quot;https://github.com/tigersoldier/company-lsp&quot;&gt;company-lsp&lt;/a&gt; is no longer supported).&lt;/li&gt; 
 &lt;li&gt;Hovers - using &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Code actions - via &lt;code&gt;lsp-execute-code-action&lt;/code&gt;, &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#code-actions-on-modeline&quot;&gt;modeline&lt;/a&gt; (recommended) or &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt; sideline.&lt;/li&gt; 
 &lt;li&gt;Code outline - using builtin &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&quot;&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Code navigation - using builtin &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&quot;&gt;xref&lt;/a&gt;, &lt;a href=&quot;https://github.com/emacs-lsp/lsp-treemacs&quot;&gt;lsp-treemacs&lt;/a&gt; tree views or &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt; peek functions.&lt;/li&gt; 
 &lt;li&gt;Code lens&lt;/li&gt; 
 &lt;li&gt;Symbol highlights&lt;/li&gt; 
 &lt;li&gt;Formatting&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#project-errors-on-modeline&quot;&gt;Project errors&lt;/a&gt; on modeline&lt;/li&gt; 
 &lt;li&gt;Debugger - &lt;a href=&quot;https://emacs-lsp.github.io/dap-mode/&quot;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#breadcrumb-on-headerline&quot;&gt;Breadcrumb on headerline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Helm integration - &lt;a href=&quot;https://github.com/emacs-lsp/helm-lsp/&quot;&gt;helm-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ivy integration - &lt;a href=&quot;https://github.com/emacs-lsp/lsp-ivy/&quot;&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Consult integration - &lt;a href=&quot;https://github.com/gagbo/consult-lsp&quot;&gt;consult-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Treemacs integration - &lt;a href=&quot;https://github.com/emacs-lsp/lsp-treemacs&quot;&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justbur/emacs-which-key/&quot;&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#iedit&quot;&gt;iedit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#dired&quot;&gt;dired&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#integrations&quot;&gt;ido&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Presentations/demos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/SystemCrafters&quot;&gt;System Crafters&lt;/a&gt; channel &lt;a href=&quot;https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN&quot;&gt;Emacs IDE Videos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skybert&quot;&gt;skybert&lt;/a&gt;&#39;s emacsconf &lt;a href=&quot;https://media.emacsconf.org/2019/19.html&quot;&gt;presentation&lt;/a&gt; (Java)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/thatwist&quot;&gt;thatwist&lt;/a&gt;&#39;s ScalaUA Conference &lt;a href=&quot;https://www.youtube.com/watch?v=x7ey0ifcqAg&amp;amp;feature=youtu.be&quot;&gt;presentation&lt;/a&gt; (Scala)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;See also&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacs-lsp/lsp-docker/&quot;&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sebastiencs/company-box/&quot;&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacs-lsp/dap-mode&quot;&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justbur/emacs-which-key/&quot;&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bbatsov/projectile/&quot;&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ubolonton/emacs-tree-sitter&quot;&gt;emacs-tree-sitter&lt;/a&gt; - Faster, fine-grained code highlighting via &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter&quot;&gt;tree-sitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://akrl.sdf.org/gccemacs.html&quot;&gt;gccemacs&lt;/a&gt; - modified Emacs capable of compiling and running Emacs Lisp as native code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Contributions are very much welcome!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Documentation for clients is generated from doc comments in the clients themselves (see &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-doc.el&quot;&gt;lsp-doc.el&lt;/a&gt;) and some metadata (see &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-clients.json&quot;&gt;lsp-clients.json&lt;/a&gt;) so please submit corrections accordingly.&lt;/p&gt; 
&lt;h2&gt;Support the project&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;emacs-lsp&lt;/code&gt; organization has more than &lt;strong&gt;20,000 lines of code&lt;/strong&gt;, to keep all of this working, we need to implement new features and help the community on a lot of issues.&lt;/p&gt; 
&lt;p&gt;You can help us keep going and improving it by &lt;strong&gt;&lt;a href=&quot;https://github.com/sponsors/emacs-lsp&quot;&gt;supporting the project&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/emacs-lsp&quot;&gt;&lt;img src=&quot;https://opencollective.com/emacs-lsp/tiers/backer.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Members&lt;/h3&gt; 
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt; 
&lt;table id=&quot;emacs-lsp-members&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/totbwf&quot;&gt; &lt;img src=&quot;https://github.com/totbwf.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;totbwf&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;totbwf&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; F# 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/brotzeit&quot;&gt; &lt;img src=&quot;https://github.com/brotzeit.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;brotzeit&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;brotzeit&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Rust 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/dsyzling&quot;&gt; &lt;img src=&quot;https://github.com/dsyzling.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;dsyzling&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;dsyzling&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Scala 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/kurnevsky&quot;&gt; &lt;img src=&quot;https://github.com/kurnevsky.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;kurnevsky&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kurnevsky&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Scala | Rust 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/seagle0128&quot;&gt; &lt;img src=&quot;https://github.com/seagle0128.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;seagle0128&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;seagle0128&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Go | Python MS 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/sebastiansturm&quot;&gt; &lt;img src=&quot;https://github.com/sebastiansturm.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;sebastiansturm&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;sebastiansturm&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core | C++ 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/vibhavp&quot;&gt; &lt;img src=&quot;https://github.com/vibhavp.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;vibhavp&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;vibhavp&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/yyoncho&quot;&gt; &lt;img src=&quot;https://github.com/yyoncho.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;yyoncho&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;yyoncho&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core | Java 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/ericdallo&quot;&gt; &lt;img src=&quot;https://github.com/ericdallo.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;ericdallo&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;ericdallo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Dart/Flutter | Clojure 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/danielmartin&quot;&gt; &lt;img src=&quot;https://github.com/danielmartin.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;danielmartin&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;danielmartin&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; C++ | Swift 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/kiennq&quot;&gt; &lt;img src=&quot;https://github.com/kiennq.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;kiennq&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kiennq&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; completions | pwsh 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/nbfalcon&quot;&gt; &lt;img src=&quot;https://github.com/nbfalcon.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;nbfalcon&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;nbfalcon&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core | iedit 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/psibi&quot;&gt; &lt;img src=&quot;https://github.com/psibi.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;psibi&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;psibi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; Terraform | Nix 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/razzmatazz&quot;&gt; &lt;img src=&quot;https://github.com/razzmatazz.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;razzmatazz&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;razzmatazz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; C# | F# 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/jcs090218&quot;&gt; &lt;img src=&quot;https://github.com/jcs090218.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;jcs090218&quot;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;jcs090218&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br&gt; lsp-mode core 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
  </channel>
</rss>
