<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Haskell Weekly Trending</title>
    <description>Weekly Trending of Haskell in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:44:22 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>PostgREST/postgrest</title>
      <link>https://github.com/PostgREST/postgrest</link>
      <description>&lt;p&gt;REST API for any Postgres database&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/postgrest.png&quot; alt=&quot;Logo&quot; title=&quot;Logo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.patreon.com/postgrest&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Donate-Patreon-orange.svg?colorB=F96854&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://postgrest.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&quot; alt=&quot;Docs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/postgrest/postgrest/&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/postgrest/postgrest.svg?sanitize=true&quot; alt=&quot;Docker Stars&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/PostgREST/postgrest/actions?query=branch%3Amain&quot;&gt;&lt;img src=&quot;https://github.com/postgrest/postgrest/actions/workflows/ci.yaml/badge.svg?branch=main&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codecov.io/gh/PostgREST/postgrest&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/postgrest/postgrest/main&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://hackage.haskell.org/package/postgrest&quot;&gt;&lt;img src=&quot;https://img.shields.io/hackage/v/postgrest.svg?label=hackage&quot; alt=&quot;Hackage docs&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;PostgREST serves a fully RESTful API from any existing PostgreSQL database. It provides a cleaner, more standards-compliant, faster API than you are likely to write from scratch.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;table align=&quot;center&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.cybertec-postgresql.com/en/?utm_source=postgrest.org&amp;amp;utm_medium=referral&amp;amp;utm_campaign=postgrest&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;296px&quot; src=&quot;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/cybertec.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://gnuhost.eu/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;296px&quot; src=&quot;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/gnuhost.png&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://neon.tech/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;296px&quot; src=&quot;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/neon.jpg&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://code.build/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;296px&quot; src=&quot;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/code-build.png&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://supabase.io?utm_source=postgrest%20backers&amp;amp;utm_medium=open%20source%20partner&amp;amp;utm_campaign=postgrest%20backers%20github&amp;amp;utm_term=homepage&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;296px&quot; src=&quot;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/supabase.png&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://tembo.io/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;296px&quot; src=&quot;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/tembo.png&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Big thanks to our sponsors! You can join them by supporting PostgREST on &lt;a href=&quot;https://www.patreon.com/postgrest&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the binary (&lt;a href=&quot;https://github.com/PostgREST/postgrest/releases/latest&quot;&gt;latest release&lt;/a&gt;) for your platform.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Invoke for help:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;postgrest --help
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;a href=&quot;http://postgrest.org&quot;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Latest documentation is at &lt;a href=&quot;http://postgrest.org&quot;&gt;postgrest.org&lt;/a&gt;. You can contribute to the docs in &lt;a href=&quot;https://github.com/PostgREST/postgrest/tree/main/docs&quot;&gt;PostgREST/postgrest/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;TLDR; subsecond response times for up to 2000 requests/sec on Heroku free tier. If you&#39;re used to servers written in interpreted languages, prepare to be pleasantly surprised by PostgREST performance.&lt;/p&gt; 
&lt;p&gt;Three factors contribute to the speed. First the server is written in &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; using the &lt;a href=&quot;http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks&quot;&gt;Warp&lt;/a&gt; HTTP server (aka a compiled language with lightweight threads). Next it delegates as much calculation as possible to the database including&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Serializing JSON responses directly in SQL&lt;/li&gt; 
 &lt;li&gt;Data validation&lt;/li&gt; 
 &lt;li&gt;Authorization&lt;/li&gt; 
 &lt;li&gt;Combined row counting and retrieval&lt;/li&gt; 
 &lt;li&gt;Data post in single command (&lt;code&gt;returning *&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Finally it uses the database efficiently with the &lt;a href=&quot;https://nikita-volkov.github.io/hasql-benchmarks/&quot;&gt;Hasql&lt;/a&gt; library by&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Keeping a pool of db connections&lt;/li&gt; 
 &lt;li&gt;Using the PostgreSQL binary protocol&lt;/li&gt; 
 &lt;li&gt;Being stateless to allow horizontal scaling&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;PostgREST &lt;a href=&quot;http://postgrest.org/en/stable/auth.html&quot;&gt;handles authentication&lt;/a&gt; (via JSON Web Tokens) and delegates authorization to the role information defined in the database. This ensures there is a single declarative source of truth for security. When dealing with the database the server assumes the identity of the currently authenticated user, and for the duration of the connection cannot do anything the user themselves couldn&#39;t. Other forms of authentication can be built on top of the JWT primitive. See the docs for more information.&lt;/p&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;A robust long-lived API needs the freedom to exist in multiple versions. PostgREST does versioning through database schemas. This allows you to expose tables and views without making the app brittle. Underlying tables can be superseded and hidden behind public facing views.&lt;/p&gt; 
&lt;h2&gt;Self-documentation&lt;/h2&gt; 
&lt;p&gt;PostgREST uses the &lt;a href=&quot;https://openapis.org/&quot;&gt;OpenAPI&lt;/a&gt; standard to generate up-to-date documentation for APIs. You can use a tool like &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;Swagger-UI&lt;/a&gt; to render interactive documentation for demo requests against the live API server.&lt;/p&gt; 
&lt;p&gt;This project uses HTTP to communicate other metadata as well. For instance the number of rows returned by an endpoint is reported by - and limited with - range headers. More about &lt;a href=&quot;http://begriffs.com/posts/2014-03-06-beyond-http-header-links.html&quot;&gt;that&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Data Integrity&lt;/h2&gt; 
&lt;p&gt;Rather than relying on an Object Relational Mapper and custom imperative coding, this system requires you put declarative constraints directly into your database. Hence no application can corrupt your data (including your API server).&lt;/p&gt; 
&lt;p&gt;The PostgREST exposes HTTP interface with safeguards to prevent surprises, such as enforcing idempotent PUT requests.&lt;/p&gt; 
&lt;p&gt;See examples of &lt;a href=&quot;http://www.tutorialspoint.com/postgresql/postgresql_constraints.htm&quot;&gt;PostgreSQL constraints&lt;/a&gt; and the &lt;a href=&quot;http://postgrest.org/en/stable/api.html&quot;&gt;API guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supporting development&lt;/h2&gt; 
&lt;p&gt;You can help PostgREST ongoing maintenance and development by making a regular donation through Patreon &lt;a href=&quot;https://www.patreon.com/postgrest&quot;&gt;https://www.patreon.com/postgrest&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Every donation will be spent on making PostgREST better for the whole community.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;The PostgREST organization is grateful to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The project &lt;a href=&quot;https://github.com/PostgREST/postgrest/raw/main/BACKERS.md&quot;&gt;sponsors and backers&lt;/a&gt; who support PostgREST&#39;s development.&lt;/li&gt; 
 &lt;li&gt;The project &lt;a href=&quot;https://github.com/PostgREST/postgrest/graphs/contributors&quot;&gt;contributors&lt;/a&gt; who have improved PostgREST immensely with their code and good judgement. See more details in the &lt;a href=&quot;https://github.com/PostgREST/postgrest/raw/main/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The cool logo came from &lt;a href=&quot;https://github.com/casalaina&quot;&gt;Mikey Casalaina&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NixOS/nixfmt</title>
      <link>https://github.com/NixOS/nixfmt</link>
      <description>&lt;p&gt;The official (but not yet stable) formatter for Nix code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;nixfmt&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is a formatter for Nix code, intended to easily apply a uniform style.&lt;/p&gt; 
&lt;p&gt;You are encouraged to test this out on your code and submit any undesirable formatting you find as an issue&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/NixOS/nixfmt/actions/workflows/main.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;State&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; will form the basis for the initial official standard Nix formatter, as established by &lt;a href=&quot;https://github.com/NixOS/rfcs/pull/166&quot;&gt;RFC 166&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The established standard Nix formatting differs considerably from the original one. Be aware of this if you track the main branch. Until the first new release the main branch should be considered &lt;strong&gt;very unstable&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;For more details, see the &lt;a href=&quot;https://github.com/NixOS/nixfmt/issues/153&quot;&gt;RFC implementation tracking issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation And Usage Instructions&lt;/h2&gt; 
&lt;h3&gt;nixpkgs/NixOS&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; was used as the basis for the official Nix formatter with a standardized formatting. The new formatting differs considerably from the original one. A recent nixfmt version is available as &lt;code&gt;pkgs.nixfmt-rfc-style&lt;/code&gt; in Nixpkgs. The formatting of this version differs considerably from the original nixfmt that was used as the basis for the standardised official formatter, which is also still available as &lt;code&gt;pkgs.nixfmt-classic&lt;/code&gt; for now, though unmaintained.&lt;/p&gt; 
&lt;p&gt;So installing this &lt;code&gt;nixfmt&lt;/code&gt; is as simple as adding to the system packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{ pkgs, ... }:

{
  environment.systemPackages = [ pkgs.nixfmt-rfc-style ];
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From the repository&lt;/h3&gt; 
&lt;p&gt;It&#39;s also possible to install &lt;code&gt;nixfmt&lt;/code&gt; directly from the repository using &lt;code&gt;nix-env&lt;/code&gt;. Also, updates are not done automatically (as it would with the system packages).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ nix-env -i -f https://github.com/NixOS/nixfmt/archive/master.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;nix fmt&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://nix.dev/manual/nix/latest/command-ref/new-cli/nix3-fmt&quot;&gt;nix fmt&lt;/a&gt; (which is a flakes-only feature) can be configured by adding the following to &lt;code&gt;flake.nix&lt;/code&gt; (assuming a &lt;code&gt;nixpkgs&lt;/code&gt; input exists):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  outputs =
    { nixpkgs, self }:
    {
      formatter.x86_64-linux = nixpkgs.legacyPackages.x86_64-linux.nixfmt-rfc-style;
    };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;treefmt&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/numtide/treefmt&quot;&gt;treefmt&lt;/a&gt; can be used to format repositories consisting of different languages with one command. A possible configuration for &lt;code&gt;nixfmt&lt;/code&gt; in &lt;code&gt;treefmt.toml&lt;/code&gt; looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[formatter.nixfmt-rfc-style]
command = &quot;nixfmt&quot;
includes = [&quot;*.nix&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;treefmt&lt;/code&gt; can be integrated into text editors and CI to ensure consistent formatting for all filetypes.&lt;/p&gt; 
&lt;h3&gt;treefmt-nix&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/numtide/treefmt-nix&quot;&gt;treefmt-nix&lt;/a&gt; automatically configures the correct packages and formatters using a Nix configuration and has native support for &lt;code&gt;nixfmt&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;# ...
treefmt-nix.mkWrapper nixpkgs {
  # ... other options ...
  programs.nixfmt-rfc-style.enable = true;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More information about configuration can be found in &lt;a href=&quot;https://github.com/numtide/treefmt-nix?tab=readme-ov-file#integration-into-nix&quot;&gt;the README&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;git-hooks.nix&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cachix/git-hooks.nix&quot;&gt;git-hooks.nix&lt;/a&gt; can automatically configure git hooks like &lt;code&gt;pre-commit&lt;/code&gt; using nix configuration and has native support for &lt;code&gt;nixfmt&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  pre-commit-check = nix-pre-commit-hooks.run {
    # ... other options ...
    hooks = {
      # ... other hooks ...
      nixfmt-rfc-style.enable = true;
    };
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;pre-commit&lt;/code&gt; tool&lt;/h3&gt; 
&lt;p&gt;If you have Nix files in a Git repo and you want to make sure that they’re formatted with &lt;code&gt;nixfmt&lt;/code&gt;, then you can use the &lt;code&gt;pre-commit&lt;/code&gt; tool from &lt;a href=&quot;https://pre-commit.com&quot;&gt;pre-commit.com&lt;/a&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure that you have the &lt;code&gt;pre-commit&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ pre-commit --version
pre-commit 3.7.1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure that you’re in your Git repo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ cd &amp;lt;path-to-git-repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure that the &lt;code&gt;pre-commit&lt;/code&gt; tool is installed as a Git pre-commit hook:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ pre-commit install
pre-commit installed at .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you don’t already have one, then create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add an entry for the &lt;code&gt;nixfmt&lt;/code&gt; hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;repos:
    - repo: https://github.com/NixOS/nixfmt
      rev: &amp;lt;version&amp;gt;
      hooks:
            - id: nixfmt
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to use a stable version of &lt;code&gt;nixfmt&lt;/code&gt;, then replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with a tag from this repo. If you want to use an unstable version of &lt;code&gt;nixfmt&lt;/code&gt;, then replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with a commit hash from this repo.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Try to commit a badly formatted Nix file in order to make sure that everything works.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] &lt;code&gt;nixfmt&lt;/code&gt;’s integration with the &lt;code&gt;pre-commit&lt;/code&gt; tool is relatively new. At the moment, none of the stable releases of &lt;code&gt;nixfmt&lt;/code&gt; can be used with the &lt;code&gt;pre-commit&lt;/code&gt; tool. You’ll have to use an unstable version for the time being.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;neovim + nixd&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local nvim_lsp = require(&quot;lspconfig&quot;)
nvim_lsp.nixd.setup({
   settings = {
      nixd = {
         formatting = {
            command = { &quot;nixfmt&quot; },
         },
      },
   },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; 
&lt;h3&gt;neovim + nil&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local nvim_lsp = require(&quot;lspconfig&quot;)
nvim_lsp.nil_ls.setup({
   settings = {
      [&#39;nil&#39;] = {
         formatting = {
            command = { &quot;nixfmt&quot; },
         },
      },
   },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; 
&lt;h3&gt;neovim + none-ls&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local null_ls = require(&quot;null-ls&quot;)
null_ls.setup({
    sources = {
        null_ls.builtins.formatting.nixfmt,
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; 
&lt;h3&gt;git mergetool&lt;/h3&gt; 
&lt;p&gt;Nixfmt provides a mode usable by &lt;a href=&quot;https://git-scm.com/docs/git-mergetool&quot;&gt;&lt;code&gt;git mergetool&lt;/code&gt;&lt;/a&gt; via &lt;code&gt;--mergetool&lt;/code&gt; that allows resolving formatting-related conflicts automatically in many cases.&lt;/p&gt; 
&lt;p&gt;It can be installed by any of these methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For only for the current repo, run: &lt;pre&gt;&lt;code&gt;git config mergetool.nixfmt.cmd &#39;nixfmt --mergetool &quot;$BASE&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot; &quot;$MERGED&quot;&#39;
git config mergetool.nixfmt.trustExitCode true
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;For all repos with a mutable config file, run &lt;pre&gt;&lt;code&gt;git config --global mergetool.nixfmt.cmd &#39;nixfmt --mergetool &quot;$BASE&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot; &quot;$MERGED&quot;&#39;
git config --global mergetool.nixfmt.trustExitCode true
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;For all repos with a NixOS-provided config file, add this to your &lt;code&gt;configuration.nix&lt;/code&gt;: &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;programs.git.config = {
  mergetool.nixfmt = {
    cmd = &quot;nixfmt --mergetool \&quot;$BASE\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$MERGED\&quot;&quot;;
    trustExitCode = true;
  };
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;For all repos with a home-manager-provided config file, add this to your &lt;code&gt;home.nix&lt;/code&gt;: &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;programs.git.extraConfig = {
  mergetool.nixfmt = {
    cmd = &quot;nixfmt --mergetool \&quot;$BASE\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$MERGED\&quot;&quot;;
    trustExitCode = true;
  };
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then, when &lt;code&gt;git merge&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt; fails, run&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git mergetool -t nixfmt .
# or, only for some specific files
git mergetool -t nixfmt FILE1 FILE2 FILE3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and some &lt;code&gt;.nix&lt;/code&gt; files will probably get merged automagically.&lt;/p&gt; 
&lt;p&gt;Note that files that &lt;code&gt;git&lt;/code&gt; merges successfully even before &lt;code&gt;git mergetool&lt;/code&gt; will be ignored by `git mergetool`.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t like the result, run&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git restore --merge .
# or, only for some specific files
git restore --merge FILE1 FILE2 FILE3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to return back to the unmerged state.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;With Nix&lt;/h3&gt; 
&lt;p&gt;Haskell dependencies will be built by Nix.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enter &lt;code&gt;nix-shell&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Without Nix&lt;/h3&gt; 
&lt;p&gt;Haskell dependencies will be built by Cabal.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nixfmt &amp;lt; input.nix&lt;/code&gt; – reads Nix code from &lt;code&gt;stdin&lt;/code&gt;, formats it, and outputs to &lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nixfmt file.nix&lt;/code&gt; – format the file in place&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About Serokell&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is maintained and funded with &lt;span&gt;❤️&lt;/span&gt; by &lt;a href=&quot;https://serokell.io/&quot;&gt;Serokell&lt;/a&gt;. The names and logo for Serokell are trademark of Serokell OÜ.&lt;/p&gt; 
&lt;p&gt;We love open source software! See &lt;a href=&quot;https://serokell.io/community?utm_source=github&quot;&gt;our other projects&lt;/a&gt; or &lt;a href=&quot;https://serokell.io/hire-us?utm_source=github&quot;&gt;hire us&lt;/a&gt; to design, develop and grow your idea!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IntersectMBO/cardano-node</title>
      <link>https://github.com/IntersectMBO/cardano-node</link>
      <description>&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/intersectmbo/cardano-node/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release-pre/intersectmbo/cardano-node.svg?style=for-the-badge&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/intersectmbo/cardano-node/actions/workflows/haskell.yml?query=branch%3Amaster&quot;&gt; &lt;img alt=&quot;GitHub Workflow Status (master)&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/intersectmbo/cardano-node/haskell.yml?branch=master&amp;amp;label=master&amp;amp;style=for-the-badge&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/intersectmbo/cardano-node/actions/workflows/haskell.yml?query=branch%3Anightly&quot;&gt; &lt;img alt=&quot;GitHub Workflow Status (nightly)&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/intersectmbo/cardano-node/haskell.yml?branch=nightly&amp;amp;label=nightly&amp;amp;style=for-the-badge&quot;&gt; &lt;/a&gt; &lt;/p&gt; .. contents:: Contents 
&lt;hr&gt; 
&lt;p&gt;Overview of the &lt;code&gt;cardano-node&lt;/code&gt; repository&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; 
&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://book.world.dev.cardano.org/environments.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Obtaining &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;Building from source&lt;/h1&gt; 
&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://developers.cardano.org/docs/get-started/cardano-node/installing-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;h1&gt;Executables&lt;/h1&gt; 
&lt;p&gt;You can download the hydra binaries of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt; from the &lt;code&gt;release notes &amp;lt;https://github.com/intersectmbo/cardano-node/releases&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;h2&gt;Running the node on Windows&lt;/h2&gt; 
&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Docker image&lt;/h1&gt; 
&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://github.com/IntersectMBO/cardano-node/pkgs/container/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker pull ghcr.io/intersectmbo/cardano-node:8.9.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;p&gt;Using &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;Command line summary: &lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; 
&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--start-as-non-producing-node] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--start-as-non-producing-node&lt;/code&gt; - Optional flag to disable block production on node start. If credentials flags are passed the node will start block producing, however with this flag the node will only start block producing on SIGHUP (see &lt;code&gt;here &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/dynamic-block-forging&amp;gt;&lt;/code&gt;_ for more details)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; (or a structurally equivalent &lt;code&gt;.json&lt;/code&gt;) file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/intersectmbo/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;Some of the more important settings are as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Scripts&lt;/h1&gt; 
&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Using &lt;code&gt;cardano-cli&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;&amp;lt;https://developers.cardano.org/docs/get-started/cardano-cli/get-started/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Command line options: &lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; 
&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; 
&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; 
&lt;h1&gt;Genesis generation&lt;/h1&gt; 
&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;https://github.com/input-output-hk/cardano-node-wiki/wiki/byron-genesis&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; 
&lt;h1&gt;Key operations&lt;/h1&gt; 
&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; 
&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; 
&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; 
&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; 
&lt;h2&gt;Delegate key migration&lt;/h2&gt; 
&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; 
&lt;h2&gt;Signing key queries&lt;/h2&gt; 
&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; 
&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; 
&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; 
&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; 
&lt;h1&gt;Transactions&lt;/h1&gt; 
&lt;h2&gt;Creation&lt;/h2&gt; 
&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;Submission&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; 
&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; 
&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; 
&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; 
&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; 
&lt;h1&gt;Local node queries&lt;/h1&gt; 
&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; 
&lt;h1&gt;Update proposals&lt;/h1&gt; 
&lt;h2&gt;Update proposal creation&lt;/h2&gt; 
&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; 
&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; 
&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; 
&lt;h2&gt;Update proposal submission&lt;/h2&gt; 
&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; 
&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; 
&lt;h1&gt;Update proposal voting&lt;/h1&gt; 
&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; 
&lt;p&gt;Byron vote creation:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; 
&lt;p&gt;Byron vote submission:&lt;/p&gt; 
&lt;p&gt;.. code-block:: console&lt;/p&gt; 
&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;GHCID&lt;/h2&gt; 
&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &quot;cabal repl exe:cardano-node --reorder-goals&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Note: When developing locally, for any package you are working on, in &lt;strong&gt;cabal.project&lt;/strong&gt; set, &lt;em&gt;ghc-options&lt;/em&gt; to &lt;code&gt;-Wwarn&lt;/code&gt; and set the &lt;code&gt;development&lt;/code&gt; flag, e.g.::&lt;/p&gt; 
&lt;p&gt;package cardano-node ghc-options: -Wwarn flags: +development&lt;/p&gt; 
&lt;p&gt;Otherwise GHC might complain about unused packages.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Native Tokens&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively. Note that users who do not need to create new assets (“token holders”) will be able to send and receive existing multi-asset tokens using a wallet such as Daedalus or Yoroi, and with no requirement to use any CLI commands.&lt;/p&gt; 
&lt;p&gt;To help you get started, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Ledger explanations: native tokens &amp;lt;https://cardano-ledger.readthedocs.io/en/latest/&amp;gt;&lt;/code&gt;_. Covers explainers about assets, tokens, token bundles, minting policies, comparison to ERC20, and minimum ada value requirements.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;A tutorial on how to get started with native tokens &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/02-getting-started&amp;gt;&lt;/code&gt;_. Explains how to create new currencies and assets, submit and send transactions containing multi-asset tokens, send and receive token bundles, manage your addresses and values.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Native tokens exercises &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/03-exercises&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To start, please ensure that you are familiar with setting up and operating the &lt;code&gt;Cardano node &amp;lt;https://github.com/intersectmbo/cardano-node&amp;gt;&lt;/code&gt;&lt;em&gt;. Alternatively, see instructions on how to &lt;code&gt;start your node &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/2_start_your_nodes&amp;gt;&lt;/code&gt;&lt;/em&gt; to submit the commands. You will not need to set up and start a full block producing node (&#39;stake pool&#39;), just a much simpler relay node. This node will need to connect to a Cardano network that is capable of processing native tokens (e.g., the native token pre-production environment (PPE), or the Cardano mainnet).&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;API Documentation&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://cardano-node.cardano.intersectmbo.org/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;cabal haddock-project --local --output=./haddocks&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Using the &lt;code&gt;cardano-node&lt;/code&gt; Haskell packages&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;If you want to use the &lt;code&gt;cardano-node&lt;/code&gt; Haskell packages from another project, you should use &lt;code&gt;CHaP &amp;lt;https://github.com/input-output-hk/cardano-haskell-packages&amp;gt;&lt;/code&gt;_ to get the packages defined in this repository. Please note that you may need to use any &lt;code&gt;source-repository-package&lt;/code&gt; stanzas defined in &lt;code&gt;cabal.project&lt;/code&gt;, although we will endeavour to keep these to an absolute minimum.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Style guide&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;The &lt;code&gt;style guide &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/Style-guide&amp;gt;&lt;/code&gt;_ for can be found on the &lt;code&gt;cardano-node repository&#39;s wiki &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Troubleshooting &lt;code&gt;cardano-node&lt;/code&gt; issues&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;For some troubleshooting help with building or running &lt;code&gt;cardano-node&lt;/code&gt;, the wiki has a &lt;code&gt;troubleshooting page &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/Troubleshooting&amp;gt;&lt;/code&gt;_ that documents some common gotchas.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>haskell/haskell-language-server</title>
      <link>https://github.com/haskell/haskell-language-server</link>
      <description>&lt;p&gt;Official haskell ide support via language server (LSP). Successor of ghcide &amp; haskell-ide-engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;haskell-language-server&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/haskell/haskell-language-server/master/docs/logos/logo-256.png&quot; alt=&quot;haskell-language-server&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/haskell/haskell-language-server/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/haskell/haskell-language-server.svg?sanitize=true&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hackage.haskell.org/package/haskell-language-server&quot;&gt;&lt;img src=&quot;https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell&quot; alt=&quot;Hackage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/haskell/haskell-language-server/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache2-green.svg?dummy&quot; alt=&quot;License Apache 2.0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/haskell/haskell-language-server/&quot;&gt;&lt;img src=&quot;https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg?sanitize=true&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;GitHub Testing Workflow&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml&quot;&gt;&lt;img src=&quot;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml/badge.svg?sanitize=true&quot; alt=&quot;GitHub Nix Workflow&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://matrix.to/#/%23haskell-language-server:matrix.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20matrix-brightgreen.svg?sanitize=true&quot; alt=&quot;matrix&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.codetriage.com/haskell/haskell-language-server&quot;&gt;&lt;img src=&quot;https://www.codetriage.com/haskell/haskell-language-server/badges/users.svg?sanitize=true&quot; alt=&quot;codetriage&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The official Haskell language server (LSP) implementation. Consult the &lt;a href=&quot;https://haskell-language-server.readthedocs.io/en/latest/&quot;&gt;project documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://haskell-language-server.readthedocs.io/en/latest/features.html&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://haskell-language-server.readthedocs.io/en/latest/installation.html&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://haskell-language-server.readthedocs.io/en/latest/support/ghc-version-support.html&quot;&gt;Supported GHC Versions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://haskell-language-server.readthedocs.io/en/latest/configuration.html&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://haskell-language-server.readthedocs.io/en/latest/troubleshooting.html&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://haskell-language-server.readthedocs.io/en/latest/contributing/index.html&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>koalaman/shellcheck</title>
      <link>https://github.com/koalaman/shellcheck</link>
      <description>&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; 
&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&quot; alt=&quot;Screenshot of a terminal showing problematic shell script lines highlighted&quot;&gt;&lt;/p&gt; 
&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&quot;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&quot;&gt;How to use&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&quot;&gt;On the web&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&quot;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&quot;&gt;In your editor&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&quot;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&quot;&gt;Installing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&quot;&gt;Compiling from source&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&quot;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&quot;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&quot;&gt;Running tests&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&quot;&gt;Gallery of bad code&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&quot;&gt;Quoting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&quot;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&quot;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&quot;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&quot;&gt;Style&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&quot;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&quot;&gt;Robustness&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&quot;&gt;Portability&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&quot;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&quot;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&quot;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&quot;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&quot;&gt;Copyright&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&quot;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; 
&lt;h3&gt;On the web&lt;/h3&gt; 
&lt;p&gt;Paste a shell script on &lt;a href=&quot;https://www.shellcheck.net&quot;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.shellcheck.net&quot;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; 
&lt;h3&gt;From your terminal&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; 
&lt;h3&gt;In your editor&lt;/h3&gt; 
&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vim, through &lt;a href=&quot;https://github.com/w0rp/ale&quot;&gt;ALE&lt;/a&gt;, &lt;a href=&quot;https://github.com/neomake/neomake&quot;&gt;Neomake&lt;/a&gt;, or &lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&quot; alt=&quot;Screenshot of Vim showing inlined shellcheck feedback&quot;&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Emacs, through &lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;Flycheck&lt;/a&gt; or &lt;a href=&quot;https://github.com/federicotdn/flymake-shellcheck&quot;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&quot; alt=&quot;Screenshot of emacs showing inlined shellcheck feedback&quot;&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-shellcheck&quot;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar Edit (former Atom), through &lt;a href=&quot;https://github.com/pulsar-cooperative/linter-shellcheck-pulsar&quot;&gt;linter-shellcheck-pulsar&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&quot;https://github.com/timonwong/vscode-shellcheck&quot;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&quot;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;In your build or test suites&lt;/h3&gt; 
&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; 
&lt;p&gt;For example, in a Makefile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot;&gt;check-scripts:
    # Fail if any of these files have warnings
    shellcheck myscripts/*.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;script:
  # Fail if any of these files have warnings
  - shellcheck myscripts/*.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.codacy.com/&quot;&gt;Codacy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.codefactor.io/&quot;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.codety.io/&quot;&gt;Codety&lt;/a&gt; via the &lt;a href=&quot;https://github.com/codetyio/codety-scanner&quot;&gt;Codety Scanner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&quot;https://circleci.com/orbs/registry/orb/circleci/shellcheck&quot;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://trunk.io/products/check&quot;&gt;Trunk Check&lt;/a&gt; (universal linter; &lt;a href=&quot;https://github.com/trunk-io/plugins/raw/bcbb361dcdbe4619af51ea7db474d7fb87540d20/.trunk/trunk.yaml#L32&quot;&gt;allows you to explicitly version your shellcheck install&lt;/a&gt;) via the &lt;a href=&quot;https://github.com/trunk-io/plugins/raw/main/linters/shellcheck/plugin.yaml&quot;&gt;shellcheck plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://coderabbit.ai/&quot;&gt;CodeRabbit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Most other services, including &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&quot;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&quot;&gt;binary release&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; 
&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/Integration&quot;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; 
&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cabal update
cabal install ShellCheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;stack update
stack install ShellCheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Debian based distros:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pacman -S shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or get the dependency free &lt;a href=&quot;https://aur.archlinux.org/packages/shellcheck-bin/&quot;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; 
&lt;p&gt;On Gentoo based distros:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On EPEL based distros:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release
sudo yum install ShellCheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora based distros:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;dnf install ShellCheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On FreeBSD:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with MacPorts:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo port install shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On OpenBSD:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pkg_add shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On openSUSE&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;zypper in ShellCheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or use OneClickInstall - &lt;a href=&quot;https://software.opensuse.org/package/ShellCheck&quot;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;On Solus:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;eopkg install shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows (via &lt;a href=&quot;https://chocolatey.org/packages/shellcheck&quot;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;C:\&amp;gt; choco install shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or Windows (via &lt;a href=&quot;https://github.com/microsoft/winget-pkgs&quot;&gt;winget&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;C:\&amp;gt; winget install --id koalaman.shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or Windows (via &lt;a href=&quot;http://scoop.sh&quot;&gt;scoop&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;C:\&amp;gt; scoop install shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From &lt;a href=&quot;https://anaconda.org/conda-forge/shellcheck&quot;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From Snap Store:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From Docker Hub:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --rm -v &quot;$PWD:/mnt&quot; koalaman/shellcheck:stable myscript
# Or :v0.4.7 for that version, or :latest for daily builds
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; 
&lt;p&gt;Using the &lt;a href=&quot;https://nixos.org/nix&quot;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nix-env -iA nixpkgs.shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using the &lt;a href=&quot;https://flox.dev/&quot;&gt;Flox package manager&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;flox install shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&quot;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&quot;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&quot;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.aarch64.tar.xz&quot;&gt;macOS, aarch64&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&quot;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&quot;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;or see the &lt;a href=&quot;https://github.com/koalaman/shellcheck/releases&quot;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&quot;https://github.com/koalaman/shellcheck/releases/tag/latest&quot;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; 
&lt;p&gt;There are currently no official binaries for Apple Silicon, but third party builds are available via &lt;a href=&quot;https://github.com/vscode-shellcheck/shellcheck-binaries/releases&quot;&gt;ShellCheck for Visual Studio Code&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1
sudo mv shellcheck.1 /usr/share/man/man1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;pre-commit&lt;/h3&gt; 
&lt;p&gt;To run ShellCheck via &lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;repos:
-   repo: https://github.com/koalaman/shellcheck-precommit
    rev: v0.7.2
    hooks:
    -   id: shellcheck
#       args: [&quot;--severity=warning&quot;]  # Optionally only show errors and warnings
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Travis CI&lt;/h3&gt; 
&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; 
&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; 
&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; 
&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;A simple installer may do something like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scversion=&quot;stable&quot; # or &quot;v0.4.7&quot;, or &quot;latest&quot;
wget -qO- &quot;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&quot; | tar -xJv
cp &quot;shellcheck-${scversion}/shellcheck&quot; /usr/bin/
shellcheck --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Compiling from source&lt;/h2&gt; 
&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; 
&lt;h3&gt;Installing Cabal&lt;/h3&gt; 
&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install cabal-install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&quot;https://www.haskell.org/platform/&quot;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cabal update
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cabal install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export PATH=&quot;$HOME/.cabal/bin:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ which shellcheck
~/.cabal/bin/shellcheck
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;chcp 65001
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;To run the unit test suite:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cabal test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Gallery of bad code&lt;/h2&gt; 
&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; 
&lt;h3&gt;Quoting&lt;/h3&gt; 
&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;echo $1                           # Unquoted variables
find . -name *.ogg                # Unquoted find/grep patterns
rm &quot;~/my file.txt&quot;                # Quoted tilde expansion
v=&#39;--verbose=&quot;true&quot;&#39;; cmd $v      # Literal quotes in variables
for f in &quot;*.ogg&quot;                  # Incorrectly quoted &#39;for&#39; loops
touch $@                          # Unquoted $@
echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe
echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;
echo &#39;Path is $PATH&#39;              # Variables in single quotes
trap &quot;echo Took ${SECONDS}s&quot; 0    # Prematurely expanded trap
unset var[i]                      # Array index treated as glob
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Conditionals&lt;/h3&gt; 
&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[[ n != 0 ]]                      # Constant test expressions
[[ -e *.mpg ]]                    # Existence checks of globs
[[ $foo==0 ]]                     # Always true due to missing spaces
[[ -n &quot;$foo &quot; ]]                  # Always true due to literals
[[ $foo =~ &quot;fo+&quot; ]]               # Quoted regex in =~
[ foo =~ re ]                     # Unsupported [ ] operators
[ $1 -eq &quot;shellcheck&quot; ]           # Numerical comparison of strings
[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]
[ grep -q foo file ]              # Command without $(..)
[[ &quot;$$file&quot; == *.jpg ]]           # Comparisons that can&#39;t succeed
(( 1 -lt 2 ))                     # Using test operators in ((..))
[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Frequently misused commands&lt;/h3&gt; 
&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts
find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec
sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo
time --format=%s sleep 10         # Passing time(1) flags to time builtin
while read h; do ssh &quot;$h&quot; uptime  # Commands eating while loop input
alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments
tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr
exec foo; echo &quot;Done!&quot;            # Misused &#39;exec&#39;
find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find
# find . -exec foo &amp;gt; bar \;       # Redirections in find
f() { whoami; }; sudo f           # External use of internal functions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; 
&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;var = 42                          # Spaces around = in assignments
$foo=42                           # $ in assignments
for $var in *; do ...             # $ in for loop variables
var$n=&quot;Hello&quot;                     # Wrong indirect assignment
echo ${var$n}                     # Wrong indirect reference
var=(1, 2, 3)                     # Comma separated arrays
array=( [index] = value )         # Incorrect index initialization
echo $var[14]                     # Missing {} in array references
echo &quot;Argument 10 is $10&quot;         # Positional parameter misreference
if $(myfunction); then ..; fi     # Wrapping commands in $()
else if othercondition; then ..   # Using &#39;else if&#39;
f; f() { echo &quot;hello world; }     # Using function before definition
[ false ]                         # &#39;false&#39; being true
if ( -f file )                    # Using (..) instead of test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Style&lt;/h3&gt; 
&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead
a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead
echo &quot;The time is `date`&quot;         # Use $() instead
cd dir; process *; cd ..;         # Use subshells instead
echo $[1+2]                       # Use standard $((..)) instead of old $[]
echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))
echo &quot;$(date)&quot;                    # Useless use of echo
cat file | grep foo               # Useless use of cat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data and typing errors&lt;/h3&gt; 
&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;args=&quot;$@&quot;                         # Assigning arrays to strings
files=(foo bar); echo &quot;$files&quot;    # Referencing arrays as strings
declare -A arr=(foo bar)          # Associative arrays without index
printf &quot;%s\n&quot; &quot;Arguments: $@.&quot;    # Concatenating strings and arrays
[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings
var=World; echo &quot;Hello &quot; var      # Unused lowercase variables
echo &quot;Hello $name&quot;                # Unassigned lowercase variables
cmd | read bar; echo $bar         # Assignments in subshells
cat foo | cp bar                  # Piping to commands that don&#39;t read
printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count
eval &quot;${array[@]}&quot;                # Lost word boundaries in array eval
for i in &quot;${x[@]}&quot;; do ${x[$i]}   # Using array value as key
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Robustness&lt;/h3&gt; 
&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf &quot;$STEAMROOT/&quot;*            # Catastrophic rm
touch ./-l; ls *                 # Globs that could become options
find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection
printf &quot;Hello $name&quot;             # Variables in printf format
for f in $(ls *.txt); do         # Iterating over ls output
export MYVAR=$(cmd)              # Masked exit codes
case $version in 2.*) :;; 2.6.*) # Shadowed case branches
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Portability&lt;/h3&gt; 
&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh
echo {1..10}                     # Works in ksh and bash, but not dash/sh
echo -n 42                       # Works in ksh, bash and dash, undefined in sh
expr match str regex             # Unportable alias for `expr str : regex`
trap &#39;exit 42&#39; sigint            # Unportable signal spec
cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator
read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files
foo-bar() { ..; }                # Undefined/unsupported function name
[ $UID = 0 ]                     # Variable undefined in dash/sh
local var=value                  # local is undefined in sh
time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Miscellaneous&lt;/h3&gt; 
&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]
PATH=&quot;$PATH:~/bin&quot;                # Literal tilde in $PATH
rm “file”                         # Unicode quotes
echo &quot;Hello world&quot;                # Carriage return / DOS line endings
echo hello \                      # Trailing spaces after \
var=42 echo $var                  # Expansion of inlined environment
!# bin/bash -x -e                 # Common shebang errors
echo $((n/180*100))               # Unnecessary loss of precision
ls *[:digit:].txt                 # Bad character class globs
sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input
var2=$var2                        # Variable assigned to itself
[ x$var = xval ]                  # Antiquated x-comparisons
ls() { ls -l &quot;$@&quot;; }              # Infinitely recursive wrapper
alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect
for x; do for x; do               # Nested loop uses same variable
while getopts &quot;a&quot; f; do case $f in &quot;b&quot;) # Unhandled getopts flags
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Testimonials&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;At first you&#39;re like &quot;shellcheck is awesome&quot; but then you&#39;re like &quot;wtf are we still using bash&quot;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Alexander Tarasikov, &lt;a href=&quot;https://twitter.com/astarasikov/status/568825996532707330&quot;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Ignoring issues&lt;/h2&gt; 
&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/Ignore&quot;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Reporting bugs&lt;/h2&gt; 
&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/issues&quot;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/DevGuide&quot;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; 
&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&quot;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Copyright 2012-2019, &lt;a href=&quot;https://github.com/koalaman/&quot;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; 
&lt;p&gt;Happy ShellChecking!&lt;/p&gt; 
&lt;h2&gt;Other Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The wiki has &lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/Checks&quot;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2221&quot;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&quot;https://github.com/mvdan/sh&quot;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>purescript/purescript</title>
      <link>https://github.com/purescript/purescript</link>
      <description>&lt;p&gt;A strongly-typed language that compiles to JavaScript&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://raw.githubusercontent.com/purescript/purescript/master/logo.png&quot; alt=&quot;PureScript&quot; width=&quot;392&quot;&gt; 
&lt;p&gt;A small strongly typed programming language with expressive types that compiles to JavaScript, written in and inspired by Haskell.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://hackage.haskell.org/package/purescript&quot;&gt;&lt;img src=&quot;https://img.shields.io/hackage/v/purescript.svg?sanitize=true&quot; alt=&quot;Hackage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/purescript/purescript/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/purescript/purescript/actions/workflows/ci.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Language info&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://purescript.org&quot;&gt;PureScript home&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/purescript/purescript/releases&quot;&gt;Releases &amp;amp; changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/purescript/purescript/raw/master/CONTRIBUTING.md&quot;&gt;Contributing to PureScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://book.purescript.org/&quot;&gt;PureScript book&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/purescript/documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://try.purescript.org&quot;&gt;Try PureScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://pursuit.purescript.org/&quot;&gt;Pursuit Package Index&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Help!&lt;/h2&gt; 
&lt;h3&gt;Community Spaces&lt;/h3&gt; 
&lt;p&gt;The following spaces are governed by the &lt;a href=&quot;https://github.com/purescript/governance/raw/master/CODE_OF_CONDUCT.md&quot;&gt;PureScript Community Code of Conduct&lt;/a&gt;. The majority of PureScript users use these spaces to discuss and collaborate on PureScript-related topics:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://purescript.org/chat&quot;&gt;PureScript Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discourse.purescript.org/&quot;&gt;PureScript Discourse&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Unaffiliated Spaces&lt;/h3&gt; 
&lt;p&gt;Some PureScript users also collaborate in the below spaces. These do not fall under the code of conduct linked above. They may have no code of conduct or one very different than the one linked above.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://matrix.to/#/%23purescript:matrix.org&quot;&gt;PureScript Matrix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/purescript&quot;&gt;PureScript on StackOverflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://libera.chat/&quot;&gt;The &lt;code&gt;#purescript&lt;/code&gt; channel on Libera.Chat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>hadolint/hadolint</title>
      <link>https://github.com/hadolint/hadolint</link>
      <description>&lt;p&gt;Dockerfile linter, validate inline bash, written in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell Dockerfile Linter&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/hadolint/hadolint/actions&quot;&gt;&lt;img src=&quot;https://github.com/hadolint/hadolint/workflows/Haskell%20Tests/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://tldrlegal.com/l/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPL--3-blue.svg?sanitize=true&quot; alt=&quot;GPL-3 licensed&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/hadolint/hadolint/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/hadolint/hadolint.svg?sanitize=true&quot; alt=&quot;GitHub release&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/hadolint/hadolint/total.svg?sanitize=true&quot; alt=&quot;GitHub downloads&quot;&gt; &lt;img align=&quot;right&quot; alt=&quot;pipecat&quot; width=&quot;150&quot; src=&quot;https://hadolint.github.io/hadolint/img/cat_container.png&quot;&gt;&lt;/p&gt; 
&lt;p&gt;A smarter Dockerfile linter that helps you build &lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&quot;&gt;best practice&lt;/a&gt; Docker images. The linter parses the Dockerfile into an AST and performs rules on top of the AST. It stands on the shoulders of &lt;a href=&quot;https://github.com/koalaman/shellcheck&quot;&gt;ShellCheck&lt;/a&gt; to lint the Bash code inside &lt;code&gt;RUN&lt;/code&gt; instructions.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hadolint.github.io/hadolint&quot;&gt;&lt;span&gt;🌐&lt;/span&gt; &lt;strong&gt;Check the online version on hadolint.github.io/hadolint&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;https://hadolint.github.io/hadolint&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/screenshot.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#how-to-use&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#cli&quot;&gt;CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#configure&quot;&gt;Configure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#non-posix-shells&quot;&gt;Non-Posix Shells&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#ignoring-rules&quot;&gt;Ignoring Rules&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#inline-ignores&quot;&gt;Inline ignores&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#global-ignores&quot;&gt;Global ignores&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#linting-labels&quot;&gt;Linting Labels&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#note-on-dealing-with-variables-in-labels&quot;&gt;Note on dealing with variables in labels&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#integrations&quot;&gt;Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#rules&quot;&gt;Rules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#develop&quot;&gt;Develop&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#repl&quot;&gt;REPL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#tests&quot;&gt;Tests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#ast&quot;&gt;AST&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#building-against-custom-libraries&quot;&gt;Building against custom libraries&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/#alternatives&quot;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;p&gt;You can run &lt;code&gt;hadolint&lt;/code&gt; locally to lint your Dockerfile.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hadolint &amp;lt;Dockerfile&amp;gt;
hadolint --ignore DL3003 --ignore DL3006 &amp;lt;Dockerfile&amp;gt; # exclude specific rules
hadolint --trusted-registry my-company.com:500 &amp;lt;Dockerfile&amp;gt; # Warn when using untrusted FROM images
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Docker comes to the rescue, providing an easy way how to run &lt;code&gt;hadolint&lt;/code&gt; on most platforms. Just pipe your &lt;code&gt;Dockerfile&lt;/code&gt; to &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -i hadolint/hadolint &amp;lt; Dockerfile
# OR
docker run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or using &lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;podman run --rm -i docker.io/hadolint/hadolint &amp;lt; Dockerfile
# OR
podman run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or using Windows PowerShell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;cat .\Dockerfile | docker run --rm -i hadolint/hadolint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;You can download prebuilt binaries for OSX, Windows and Linux from the latest &lt;a href=&quot;https://github.com/hadolint/hadolint/releases/latest&quot;&gt;release page&lt;/a&gt;. However, if this does not work for you, please fall back to container (Docker), &lt;code&gt;brew&lt;/code&gt; or source installation.&lt;/p&gt; 
&lt;p&gt;On OSX, you can use &lt;a href=&quot;https://brew.sh/&quot;&gt;brew&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install hadolint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows, you can use &lt;a href=&quot;https://github.com/lukesampson/scoop&quot;&gt;scoop&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;scoop install hadolint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On distributions that have &lt;code&gt;nix&lt;/code&gt; installed, you can use the &lt;code&gt;hadolint&lt;/code&gt; package to run ad-hoc shells or permanently install &lt;code&gt;hadolint&lt;/code&gt; into your environment.&lt;/p&gt; 
&lt;p&gt;As mentioned earlier, &lt;code&gt;hadolint&lt;/code&gt; is available as a container image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull hadolint/hadolint
# OR
docker pull ghcr.io/hadolint/hadolint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need a container with shell access, use the Debian or Alpine variants:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull hadolint/hadolint:latest-debian
# OR
docker pull hadolint/hadolint:latest-alpine
# OR
docker pull ghcr.io/hadolint/hadolint:latest-debian
# OR
docker pull ghcr.io/hadolint/hadolint:latest-alpine
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also build &lt;code&gt;hadolint&lt;/code&gt; locally. You need &lt;a href=&quot;https://www.haskell.org/downloads/&quot;&gt;Haskell&lt;/a&gt; and the &lt;a href=&quot;https://www.haskell.org/cabal/&quot;&gt;cabal&lt;/a&gt; build tool to build the binary.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/hadolint/hadolint \
  &amp;amp;&amp;amp; cd hadolint \
  &amp;amp;&amp;amp; cabal configure \
  &amp;amp;&amp;amp; cabal build \
  &amp;amp;&amp;amp; cabal install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want the &lt;a href=&quot;https://github.com/michaellzc/vscode-hadolint&quot;&gt;VS Code Hadolint&lt;/a&gt; extension to use Hadolint in a container, you can use the following &lt;a href=&quot;https://github.com/hadolint/hadolint/issues/691#issuecomment-932116329&quot;&gt;wrapper script&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
dockerfile=&quot;$1&quot;
shift
docker run --rm -i hadolint/hadolint hadolint &quot;$@&quot; - &amp;lt; &quot;$dockerfile&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;CLI&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hadolint --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;hadolint - Dockerfile Linter written in Haskell

Usage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...]
                [--file-path-in-report FILEPATHINREPORT] [--no-fail]
                [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE]
                [--warning RULECODE] [--info RULECODE] [--style RULECODE]
                [--ignore RULECODE]
                [--trusted-registry REGISTRY (e.g. docker.io)]
                [--require-label LABELSCHEMA (e.g. maintainer:text)]
                [--strict-labels] [--disable-ignore-pragma]
                [-t|--failure-threshold THRESHOLD]
  Lint Dockerfile for errors and best practices

Available options:
  -h,--help                Show this help text
  -v,--version             Show version
  -c,--config FILENAME     Path to the configuration file
  --file-path-in-report FILEPATHINREPORT
                           The file path referenced in the generated report.
                           This only applies for the &#39;checkstyle&#39; format and is
                           useful when running Hadolint with Docker to set the
                           correct file path.
  --no-fail                Don&#39;t exit with a failure status code when any rule
                           is violated
  --no-color               Don&#39;t colorize output
  -V,--verbose             Enables verbose logging of hadolint&#39;s output to
                           stderr
  -f,--format ARG          The output format for the results [tty | json |
                           checkstyle | codeclimate | gitlab_codeclimate | gnu |
                           codacy | sonarqube | sarif] (default: tty)
  --error RULECODE         Make the rule `RULECODE` have the level `error`
  --warning RULECODE       Make the rule `RULECODE` have the level `warning`
  --info RULECODE          Make the rule `RULECODE` have the level `info`
  --style RULECODE         Make the rule `RULECODE` have the level `style`
  --ignore RULECODE        A rule to ignore. If present, the ignore list in the
                           config file is ignored
  --trusted-registry REGISTRY (e.g. docker.io)
                           A docker registry to allow to appear in FROM
                           instructions
  --require-label LABELSCHEMA (e.g. maintainer:text)
                           The option --require-label=label:format makes
                           Hadolint check that the label `label` conforms to
                           format requirement `format`
  --strict-labels          Do not permit labels other than specified in
                           `label-schema`
  --disable-ignore-pragma  Disable inline ignore pragmas `# hadolint
                           ignore=DLxxxx`
  -t,--failure-threshold THRESHOLD
                           Exit with failure code only when rules with a
                           severity equal to or above THRESHOLD are violated.
                           Accepted values: [error | warning | info | style |
                           ignore | none] (default: info)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configure&lt;/h2&gt; 
&lt;p&gt;Configuration files can be used globally or per project. Hadolint looks for configuration files in the following locations or their platform specific equivalents in this order and uses the first one exclusively:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$PWD/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/hadolint.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.config/hadolint.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.hadolint/hadolint.yaml or $HOME/hadolint/config.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In windows, the &lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; environment variable is used instead of &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;. Config files can have either &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;yml&lt;/code&gt; extensions.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; full &lt;code&gt;yaml&lt;/code&gt; config file schema&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;failure-threshold: string               # name of threshold level (error | warning | info | style | ignore | none)
format: string                          # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy)
ignored: [string]                       # list of rules
label-schema:                           # See Linting Labels below for specific label-schema details
  author: string                        # Your name
  contact: string                       # email address
  created: timestamp                    # rfc3339 datetime
  version: string                       # semver
  documentation: string                 # url
  git-revision: string                  # hash
  license: string                       # spdx
no-color: boolean                       # true | false
no-fail: boolean                        # true | false
override:
  error: [string]                       # list of rules
  warning: [string]                     # list of rules
  info: [string]                        # list of rules
  style: [string]                       # list of rules
strict-labels: boolean                  # true | false
disable-ignore-pragma: boolean          # true | false
trustedRegistries: string | [string]    # registry or list of registries
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; supports specifying the ignored rules using a configuration file. The configuration file should be in &lt;code&gt;yaml&lt;/code&gt; format. This is one valid configuration file as an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;ignored:
  - DL3000
  - SC1010
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additionally, &lt;code&gt;hadolint&lt;/code&gt; can warn you when images from untrusted repositories are being used in Dockerfiles, you can append the &lt;code&gt;trustedRegistries&lt;/code&gt; keys to the configuration file, as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;ignored:
  - DL3000
  - SC1010

trustedRegistries:
  - docker.io
  - my-company.com:5000
  - &quot;*.gcr.io&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to override the severity of specific rules, you can do that too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;override:
  error:
    - DL3001
    - DL3002
  warning:
    - DL3042
    - DL3033
  info:
    - DL3032
  style:
    - DL3015
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;failure-threshold&lt;/code&gt; Exit with failure code only when rules with a severity above THRESHOLD are violated (Available in v2.6.0+)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;failure-threshold: info
override:
  warning:
    - DL3042
    - DL3033
  info:
    - DL3032
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additionally, you can pass a custom configuration file in the command line with the &lt;code&gt;--config&lt;/code&gt; option&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hadolint --config /path/to/config.yaml Dockerfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To pass a custom configuration file (using relative or absolute path) to a container, use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint &amp;lt; Dockerfile
# OR
docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml ghcr.io/hadolint/hadolint &amp;lt; Dockerfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to config files, Hadolint can be configured with environment variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;NO_COLOR=1                               # Set or unset. See https://no-color.org
HADOLINT_NOFAIL=1                        # Truthy value e.g. 1, true or yes
HADOLINT_VERBOSE=1                       # Truthy value e.g. 1, true or yes
HADOLINT_FORMAT=json                     # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy | sarif )
HADOLINT_FAILURE_THRESHOLD=info          # threshold level (error | warning | info | style | ignore | none)
HADOLINT_OVERRIDE_ERROR=DL3010,DL3020    # comma separated list of rule codes
HADOLINT_OVERRIDE_WARNING=DL3010,DL3020  # comma separated list of rule codes
HADOLINT_OVERRIDE_INFO=DL3010,DL3020     # comma separated list of rule codes
HADOLINT_OVERRIDE_STYLE=DL3010,DL3020    # comma separated list of rule codes
HADOLINT_IGNORE=DL3010,DL3020            # comma separated list of rule codes
HADOLINT_STRICT_LABELS=1                 # Truthy value e.g. 1, true or yes
HADOLINT_DISABLE_IGNORE_PRAGMA=1         # Truthy value e.g. 1, true or yes
HADOLINT_TRUSTED_REGISTRIES=docker.io    # comma separated list of registry urls
HADOLINT_REQUIRE_LABELS=maintainer:text  # comma separated list of label schema items
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Non-Posix Shells&lt;/h2&gt; 
&lt;p&gt;When using base images with non-posix shells as default (e.g. Windows based images) a special pragma &lt;code&gt;hadolint shell&lt;/code&gt; can specify which shell the base image uses, so that Hadolint can automatically ignore all shell-specific rules.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM mcr.microsoft.com/windows/servercore:ltsc2022
# hadolint shell=powershell
RUN Get-Process notepad | Stop-Process
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Ignoring Rules&lt;/h2&gt; 
&lt;h3&gt;Inline ignores&lt;/h3&gt; 
&lt;p&gt;It is also possible to ignore rules by adding a special comment directly above the Dockerfile statement for which you want to make an exception for. Such comments look like &lt;code&gt;# hadolint ignore=DL3001,SC1081&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;# hadolint ignore=DL3006
FROM ubuntu

# hadolint ignore=DL3003,SC1035
RUN cd /tmp &amp;amp;&amp;amp; echo &quot;hello!&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The comment &quot;inline ignores&quot; applies only to the statement following it.&lt;/p&gt; 
&lt;h3&gt;Global ignores&lt;/h3&gt; 
&lt;p&gt;Rules can also be ignored on a per-file basis using the global ignore pragma. It works just like inline ignores, except that it applies to the whole file instead of just the next line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;# hadolint global ignore=DL3003,DL3006,SC1035
FROM ubuntu

RUN cd /tmp &amp;amp;&amp;amp; echo &quot;foo&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Linting Labels&lt;/h2&gt; 
&lt;p&gt;Hadolint is able to check if specific labels are present and conform to a predefined label schema. First, a label schema must be defined either via the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hadolint --require-label author:text --require-label version:semver Dockerfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or via the config file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;label-schema:
  author: text
  contact: email
  created: rfc3339
  version: semver
  documentation: url
  git-revision: hash
  license: spdx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The value of a label can be either of &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;semver&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; or &lt;code&gt;rfc3339&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Schema&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;text&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Anything&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;rfc3339&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A time, formatted according to &lt;a href=&quot;https://www.ietf.org/rfc/rfc3339.txt&quot;&gt;RFC 3339&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;semver&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A &lt;a href=&quot;https://semver.org/&quot;&gt;semantic version&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;url&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A URI as described in &lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;hash&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Either a short or a long &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&quot;&gt;Git hash&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;spdx&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;An &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX license identifier&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;email&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;An email address conforming to &lt;a href=&quot;https://www.ietf.org/rfc/rfc5322.txt&quot;&gt;RFC 5322&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;By default, Hadolint ignores any label that is not specified in the label schema. To warn against such additional labels, turn on strict labels, using the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hadolint --strict-labels --require-label version:semver Dockerfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or the config file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;strict-labels: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When strict labels is enabled, but no label schema is specified, &lt;code&gt;hadolint&lt;/code&gt; will warn if any label is present.&lt;/p&gt; 
&lt;h3&gt;Note on dealing with variables in labels&lt;/h3&gt; 
&lt;p&gt;It is a common pattern to fill the value of a label not statically, but rather dynamically at build time by using a variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;FROM debian:buster
ARG VERSION=&quot;du-jour&quot;
LABEL version=&quot;${VERSION}&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To allow this, the label schema must specify &lt;code&gt;text&lt;/code&gt; as value for that label:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;label-schema:
  version: text
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;To get most of &lt;code&gt;hadolint&lt;/code&gt;, it is useful to integrate it as a check in your CI or into your editor, or as a pre-commit hook, to lint your &lt;code&gt;Dockerfile&lt;/code&gt; as you write it. See our &lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md&quot;&gt;Integration&lt;/a&gt; docs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#code-review&quot;&gt;Code Review Platform Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#continuous-integration&quot;&gt;Continuous Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#editors&quot;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#version-control&quot;&gt;Version Control Integrations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Rules&lt;/h2&gt; 
&lt;p&gt;An incomplete list of implemented rules. Click on the error code to get more detailed information.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Rules with the prefix &lt;code&gt;DL&lt;/code&gt; are from &lt;code&gt;hadolint&lt;/code&gt;. Have a look at &lt;code&gt;Rules.hs&lt;/code&gt; to find the implementation of the rules.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rules with the &lt;code&gt;SC&lt;/code&gt; prefix are from &lt;strong&gt;ShellCheck&lt;/strong&gt; (only the most common rules are listed, there are dozens more).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please &lt;a href=&quot;https://github.com/hadolint/hadolint/issues/new&quot;&gt;create an issue&lt;/a&gt; if you have an idea for a good rule.&lt;/p&gt; 
&lt;!--lint disable maximum-line-length--&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Rule&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Default Severity&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL1001&quot;&gt;DL1001&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Ignore&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Please refrain from using inline ignore pragmas &lt;code&gt;# hadolint ignore=DLxxxx&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3000&quot;&gt;DL3000&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use absolute WORKDIR.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3001&quot;&gt;DL3001&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;For some bash commands it makes no sense running them in a Docker container like ssh, vim, shutdown, service, ps, free, top, kill, mount, ifconfig.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3002&quot;&gt;DL3002&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Last user should not be root.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3003&quot;&gt;DL3003&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use WORKDIR to switch to a directory.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3004&quot;&gt;DL3004&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3006&quot;&gt;DL3006&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Always tag the version of an image explicitly.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3007&quot;&gt;DL3007&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3008&quot;&gt;DL3008&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Pin versions in &lt;code&gt;apt-get install&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3009&quot;&gt;DL3009&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Delete the apt-get lists after installing something.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3010&quot;&gt;DL3010&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use ADD for extracting archives into an image.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3011&quot;&gt;DL3011&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Valid UNIX ports range from 0 to 65535.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3012&quot;&gt;DL3012&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Multiple &lt;code&gt;HEALTHCHECK&lt;/code&gt; instructions.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3013&quot;&gt;DL3013&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Pin versions in pip.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3014&quot;&gt;DL3014&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3015&quot;&gt;DL3015&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Avoid additional packages by specifying &lt;code&gt;--no-install-recommends&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3016&quot;&gt;DL3016&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Pin versions in &lt;code&gt;npm&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3018&quot;&gt;DL3018&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Pin versions in &lt;code&gt;apk add&lt;/code&gt;. Instead of &lt;code&gt;apk add &amp;lt;package&amp;gt;&lt;/code&gt; use &lt;code&gt;apk add &amp;lt;package&amp;gt;=&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3019&quot;&gt;DL3019&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use the &lt;code&gt;--no-cache&lt;/code&gt; switch to avoid the need to use &lt;code&gt;--update&lt;/code&gt; and remove &lt;code&gt;/var/cache/apk/*&lt;/code&gt; when done installing packages.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3020&quot;&gt;DL3020&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use &lt;code&gt;COPY&lt;/code&gt; instead of &lt;code&gt;ADD&lt;/code&gt; for files and folders.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3021&quot;&gt;DL3021&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;COPY&lt;/code&gt; with more than 2 arguments requires the last argument to end with &lt;code&gt;/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3022&quot;&gt;DL3022&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;COPY --from&lt;/code&gt; should reference a previously defined &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3023&quot;&gt;DL3023&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;COPY --from&lt;/code&gt; cannot reference its own &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3024&quot;&gt;DL3024&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;FROM&lt;/code&gt; aliases (stage names) must be unique&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3025&quot;&gt;DL3025&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use arguments JSON notation for CMD and ENTRYPOINT arguments&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3026&quot;&gt;DL3026&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use only an allowed registry in the &lt;code&gt;FROM image&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3027&quot;&gt;DL3027&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Do not use &lt;code&gt;apt&lt;/code&gt; as it is meant to be an end-user tool, use &lt;code&gt;apt-get&lt;/code&gt; or &lt;code&gt;apt-cache&lt;/code&gt; instead&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3028&quot;&gt;DL3028&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Pin versions in gem install. Instead of &lt;code&gt;gem install &amp;lt;gem&amp;gt;&lt;/code&gt; use &lt;code&gt;gem install &amp;lt;gem&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3029&quot;&gt;DL3029&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Do not use --platform flag with FROM.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3030&quot;&gt;DL3030&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;yum install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3032&quot;&gt;DL3032&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;yum clean all&lt;/code&gt; missing after yum command.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3033&quot;&gt;DL3033&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Specify version with &lt;code&gt;yum install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3034&quot;&gt;DL3034&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Non-interactive switch missing from &lt;code&gt;zypper&lt;/code&gt; command: &lt;code&gt;zypper install -y&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3035&quot;&gt;DL3035&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Do not use &lt;code&gt;zypper dist-upgrade&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3036&quot;&gt;DL3036&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;zypper clean&lt;/code&gt; missing after zypper use.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3037&quot;&gt;DL3037&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Specify version with &lt;code&gt;zypper install -y &amp;lt;package&amp;gt;[=]&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3038&quot;&gt;DL3038&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3040&quot;&gt;DL3040&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;dnf clean all&lt;/code&gt; missing after dnf command.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3041&quot;&gt;DL3041&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Specify version with &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3042&quot;&gt;DL3042&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Avoid cache directory with &lt;code&gt;pip install --no-cache-dir &amp;lt;package&amp;gt;&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3043&quot;&gt;DL3043&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;ONBUILD&lt;/code&gt;, &lt;code&gt;FROM&lt;/code&gt; or &lt;code&gt;MAINTAINER&lt;/code&gt; triggered from within &lt;code&gt;ONBUILD&lt;/code&gt; instruction.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3044&quot;&gt;DL3044&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Do not refer to an environment variable within the same &lt;code&gt;ENV&lt;/code&gt; statement where it is defined.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3045&quot;&gt;DL3045&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;COPY&lt;/code&gt; to a relative destination without &lt;code&gt;WORKDIR&lt;/code&gt; set.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3046&quot;&gt;DL3046&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;useradd&lt;/code&gt; without flag &lt;code&gt;-l&lt;/code&gt; and high UID will result in excessively large Image.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3047&quot;&gt;DL3047&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;wget&lt;/code&gt; without flag &lt;code&gt;--progress&lt;/code&gt; will result in excessively bloated build logs when downloading larger files.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3048&quot;&gt;DL3048&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Style&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Invalid Label Key&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3049&quot;&gt;DL3049&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is missing.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3050&quot;&gt;DL3050&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Superfluous label(s) present.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3051&quot;&gt;DL3051&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is empty.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3052&quot;&gt;DL3052&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid URL.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3053&quot;&gt;DL3053&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid time format - must conform to RFC3339.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3054&quot;&gt;DL3054&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid SPDX license identifier.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3055&quot;&gt;DL3055&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid git hash.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3056&quot;&gt;DL3056&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; does not conform to semantic versioning.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3057&quot;&gt;DL3057&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Ignore&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; instruction missing.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3058&quot;&gt;DL3058&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid email format - must conform to RFC5322.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3059&quot;&gt;DL3059&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Multiple consecutive &lt;code&gt;RUN&lt;/code&gt; instructions. Consider consolidation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3060&quot;&gt;DL3060&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Info&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;yarn cache clean&lt;/code&gt; missing after &lt;code&gt;yarn install&lt;/code&gt; was run.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL3061&quot;&gt;DL3061&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Invalid instruction order. Dockerfile must begin with &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;ARG&lt;/code&gt; or comment.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL4000&quot;&gt;DL4000&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;MAINTAINER&lt;/code&gt; is deprecated.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL4001&quot;&gt;DL4001&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Either use Wget or Curl but not both.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL4003&quot;&gt;DL4003&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Multiple &lt;code&gt;CMD&lt;/code&gt; instructions found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL4004&quot;&gt;DL4004&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Error&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Multiple &lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL4005&quot;&gt;DL4005&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use &lt;code&gt;SHELL&lt;/code&gt; to change the default shell.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint/wiki/DL4006&quot;&gt;DL4006&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Warning&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Set the &lt;code&gt;SHELL&lt;/code&gt; option -o pipefail before &lt;code&gt;RUN&lt;/code&gt; with a pipe in it&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1000&quot;&gt;SC1000&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$&lt;/code&gt; is not used specially and should therefore be escaped.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1001&quot;&gt;SC1001&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This &lt;code&gt;\c&lt;/code&gt; will be a regular &lt;code&gt;&#39;c&#39;&lt;/code&gt; in this context.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1007&quot;&gt;SC1007&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Remove space after &lt;code&gt;=&lt;/code&gt; if trying to assign a value (or for empty string, use &lt;code&gt;var=&#39;&#39; ...&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1010&quot;&gt;SC1010&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use semicolon or linefeed before &lt;code&gt;done&lt;/code&gt; (or quote to make it literal).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1018&quot;&gt;SC1018&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This is a unicode non-breaking space. Delete it and retype as space.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1035&quot;&gt;SC1035&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;You need a space here&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1045&quot;&gt;SC1045&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;It&#39;s not &lt;code&gt;foo &amp;amp;; bar&lt;/code&gt;, just &lt;code&gt;foo &amp;amp; bar&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1065&quot;&gt;SC1065&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Trying to declare parameters? Don&#39;t. Use &lt;code&gt;()&lt;/code&gt; and refer to params as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1066&quot;&gt;SC1066&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Don&#39;t use $ on the left side of assignments.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1068&quot;&gt;SC1068&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Don&#39;t put spaces around the &lt;code&gt;=&lt;/code&gt; in assignments.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1077&quot;&gt;SC1077&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;For command expansion, the tick should slant left (` vs ´).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1078&quot;&gt;SC1078&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Did you forget to close this double-quoted string?&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1079&quot;&gt;SC1079&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This is actually an end quote, but due to next char, it looks suspect.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1081&quot;&gt;SC1081&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Scripts are case sensitive. Use &lt;code&gt;if&lt;/code&gt;, not &lt;code&gt;If&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1083&quot;&gt;SC1083&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This &lt;code&gt;{/}&lt;/code&gt; is literal. Check expression (missing &lt;code&gt;;/\n&lt;/code&gt;?) or quote it.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1086&quot;&gt;SC1086&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Don&#39;t use &lt;code&gt;$&lt;/code&gt; on the iterator name in for loops.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1087&quot;&gt;SC1087&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Braces are required when expanding arrays, as in &lt;code&gt;${array[idx]}&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1095&quot;&gt;SC1095&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;You need a space or linefeed between the function name and body.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1097&quot;&gt;SC1097&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Unexpected &lt;code&gt;==&lt;/code&gt;. For assignment, use &lt;code&gt;=&lt;/code&gt;. For comparison, use &lt;code&gt;[ .. ]&lt;/code&gt; or &lt;code&gt;[[ .. ]]&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1098&quot;&gt;SC1098&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Quote/escape special characters when using &lt;code&gt;eval&lt;/code&gt;, e.g. &lt;code&gt;eval &quot;a=(b)&quot;&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1099&quot;&gt;SC1099&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;You need a space before the &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2002&quot;&gt;SC2002&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Useless cat. Consider &lt;code&gt;cmd &amp;lt; file | ..&lt;/code&gt; or &lt;code&gt;cmd file | ..&lt;/code&gt; instead.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2015&quot;&gt;SC2015&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Note that &lt;code&gt;A &amp;amp;&amp;amp; B || C&lt;/code&gt; is not if-then-else. C may run when A is true.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2026&quot;&gt;SC2026&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This word is outside of quotes. Did you intend to &#39;nest &#39;&quot;&#39;single quotes&#39;&quot;&#39; instead&#39;?&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2028&quot;&gt;SC2028&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;echo&lt;/code&gt; won&#39;t expand escape sequences. Consider &lt;code&gt;printf&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2035&quot;&gt;SC2035&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use &lt;code&gt;./*glob*&lt;/code&gt; or &lt;code&gt;-- *glob*&lt;/code&gt; so names with dashes won&#39;t become options.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2039&quot;&gt;SC2039&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;In POSIX sh, something is undefined.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2046&quot;&gt;SC2046&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Quote this to prevent word splitting&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2086&quot;&gt;SC2086&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Double quote to prevent globbing and word splitting.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2140&quot;&gt;SC2140&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Word is in the form &lt;code&gt;&quot;A&quot;B&quot;C&quot;&lt;/code&gt; (B indicated). Did you mean &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; or &lt;code&gt;&quot;A\&quot;B\&quot;C&quot;&lt;/code&gt;?&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2154&quot;&gt;SC2154&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;var is referenced but not assigned.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2155&quot;&gt;SC2155&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Declare and assign separately to avoid masking return values.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC2164&quot;&gt;SC2164&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Use &lt;code&gt;cd ... || exit&lt;/code&gt; in case &lt;code&gt;cd&lt;/code&gt; fails.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!--lint enable maximum-line-length--&gt; 
&lt;h2&gt;Develop&lt;/h2&gt; 
&lt;p&gt;If you are an experienced Haskeller, we would be very grateful if you would tear our code apart in a review.&lt;/p&gt; 
&lt;p&gt;To compile, you will need a recent Haskell environment and &lt;code&gt;cabal-install&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Clone repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone --recursive git@github.com:hadolint/hadolint.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install dependencies and compile source&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cabal configure
cabal build
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(Optional) Install Hadolint on your system&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cabal install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;REPL&lt;/h3&gt; 
&lt;p&gt;The easiest way to try out the parser is using the REPL.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# start the repl
cabal repl
# overload strings to be able to use Text
:set -XOverloadedStrings
# import parser library
import Language.Docker
# parse instruction and look at AST representation
parseText &quot;FROM debian:jessie&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tests&lt;/h3&gt; 
&lt;p&gt;Compile with unit tests and run them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cabal configure --enable-tests
cabal build --enable-tests
cabal test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run integration tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./integration_test.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;AST&lt;/h3&gt; 
&lt;p&gt;Dockerfile syntax is fully described in the &lt;a href=&quot;http://docs.docker.com/engine/reference/builder/&quot;&gt;Dockerfile reference&lt;/a&gt;. Just take a look at &lt;a href=&quot;https://www.stackage.org/haddock/nightly-2022-11-15/language-docker-12.0.0/Language-Docker-Syntax.html&quot;&gt;Syntax.hs&lt;/a&gt; in the &lt;code&gt;language-docker&lt;/code&gt; project to see the AST definition.&lt;/p&gt; 
&lt;h3&gt;Building against custom libraries&lt;/h3&gt; 
&lt;p&gt;Hadolint uses many libraries to do the dirty work. In particular, language-docker is used to parse Dockerfiles and produce an AST which then can be analyzed. To build Hadolint against a custom version of such libraries, do the following. This example uses language-docker, but it would work with any other library as well.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;In the same directory (e.g. &lt;code&gt;/home/user/repos&lt;/code&gt;) clone Hadolint and language-docker git repositories&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /home/user/repos
git clone https://github.com/hadolint/hadolint.git
git clone https://github.com/hadolint/language-docker.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Make your modifications to language-docker&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the Hadolint repo, edit the &lt;code&gt;cabal.project&lt;/code&gt; file, such that the &lt;code&gt;packages&lt;/code&gt; property points to the other repo too&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;[...]
packages:
  .
  ../language-docker
[...]
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Recompile Hadolint and run the tests&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /home/user/repos/hadolint
cabal configure --enable-tests
cabal build --enable-tests
cabal test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;replicatedhq/&lt;a href=&quot;https://github.com/replicatedhq/dockerfilelint&quot;&gt;dockerfilelint&lt;/a&gt;, the other linter used by the &lt;a href=&quot;https://github.com/github/super-linter/raw/main/README.md#supported-linters&quot;&gt;super-linter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;RedCoolBeans/&lt;a href=&quot;https://github.com/RedCoolBeans/dockerlint/&quot;&gt;dockerlint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;projectatomic/&lt;a href=&quot;https://github.com/projectatomic/dockerfile_lint/&quot;&gt;dockerfile_lint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- References --&gt;</description>
    </item>
    
    <item>
      <title>maralorn/nix-output-monitor</title>
      <link>https://github.com/maralorn/nix-output-monitor</link>
      <description>&lt;p&gt;Pipe your nix-build output through the nix-output-monitor a.k.a nom to get additional information while building.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nix-output-monitor&lt;/h1&gt; 
&lt;p&gt;Pipe your nix-build output through the nix-output-monitor (aka nom) to get additional information while building.&lt;/p&gt; 
&lt;p&gt;While your build runs, nom will draw something like this at the bottom of your build log:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maralorn/nix-output-monitor/main/example-screenshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;(note that to reduce clutter nom only shows timers over 1s build or download time.)&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/nix-output-monitor/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/nix-output-monitor.svg?sanitize=true&quot; alt=&quot;Packaging status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;This was an experiment to write something fun and useful in Haskell, which proved to be useful to quite a lot of people. By now, nom is quite fully featured with support for nix v1 commands (e.g. &lt;code&gt;nix-build&lt;/code&gt;) and nix v2 command (e.g. &lt;code&gt;nix build&lt;/code&gt;). At this point it seems like I will maintain nom until better UX options for nix arrive.&lt;/p&gt; 
&lt;p&gt;You are free and &lt;strong&gt;very welcome to contribute feedback, issues or PRs&lt;/strong&gt;. Issues and pull requests can be opened at &lt;strong&gt;&lt;a href=&quot;https://github.com/maralorn/nix-output-monitor&quot;&gt;GitHub&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Source and releases&lt;/strong&gt; are available from &lt;strong&gt;&lt;a href=&quot;https://code.maralorn.de/maralorn/nix-output-monitor/releases&quot;&gt;code.maralorn.de&lt;/a&gt;&lt;/strong&gt;. Starting from version 2.1.0, nom follows the &lt;a href=&quot;https://semver&quot;&gt;SemVer&lt;/a&gt; versioning scheme. The versioning applies to the behavior of the executable. There are no stability guarantees for the library component in the cabal project.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If your question is not answered in this README you can ask it in &lt;a href=&quot;https://matrix.to/#/%23nix-output-monitor:maralorn.de&quot;&gt;#nix-output-monitor:maralorn.de&lt;/a&gt; on matrix or open an issue on github.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;nixpkgs: nom is in nixpkgs. Just install &lt;code&gt;pkgs.nix-output-monitor&lt;/code&gt; in the usual way. You might want to install it from nixos-unstable to get the newest version.&lt;/li&gt; 
 &lt;li&gt;cabal: Install &lt;code&gt;cabal-install&lt;/code&gt; and run &lt;code&gt;cabal install&lt;/code&gt; in the checked out repo.&lt;/li&gt; 
 &lt;li&gt;nix: or use &lt;code&gt;nix build&lt;/code&gt; or &lt;code&gt;nix-env&lt;/code&gt; or include the flake output of this repo in your nixos config.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Running&lt;/h2&gt; 
&lt;h3&gt;The Easy Way&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The displayed build tree might be incomplete with new-style commands like &lt;code&gt;nix build&lt;/code&gt; for nix versions &amp;lt;2.10.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;nom&lt;/code&gt; binary (starting from version 2.0) behaves as a &lt;code&gt;nix&lt;/code&gt; drop in, with much more colorful output, but &lt;strong&gt;only&lt;/strong&gt; for the following commands:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;nom build &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix build &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;br&gt; &lt;code&gt;nom shell &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix shell &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;br&gt; &lt;code&gt;nom develop &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix develop &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The latter two commands work by calling &lt;code&gt;nix shell&lt;/code&gt; or &lt;code&gt;nix develop&lt;/code&gt; twice, the first time with overridden &lt;code&gt;--run exit&lt;/code&gt; and monitoring the output, the second time passing output through to the user. This will incur a performance cost by doubling eval time.&lt;/p&gt; 
&lt;p&gt;Furthermore when called via the corresponding provided symlinks, nom is also a drop-in for the following commands:&lt;br&gt; &lt;code&gt;nom-build &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix-build &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;br&gt; &lt;code&gt;nom-shell &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix-shell &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All aliases internally use the json-based approach (see next section) and propagate error codes. If you want nom support for other nix commands please open an issue.&lt;/p&gt; 
&lt;h3&gt;The Flexible Way&lt;/h3&gt; 
&lt;h4&gt;JSON based&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;nix-build --log-format internal-json -v |&amp;amp; nom --json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Don‘t forget to redirect stderr. That&#39;s what the &lt;code&gt;&amp;amp;&lt;/code&gt;, does.&lt;/p&gt; 
&lt;h4&gt;Human readable log parsing&lt;/h4&gt; 
&lt;p&gt;It his highly recommended to always append &lt;code&gt;--log-format internal-json -v&lt;/code&gt; (or use the above mentioned aliases.) and call &lt;code&gt;nom&lt;/code&gt; with &lt;code&gt;--json&lt;/code&gt;. That will give you much more informative output.&lt;/p&gt; 
&lt;p&gt;If you are in a situation, where you can‘t use the json based nix output you can still use&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;nix-build |&amp;amp; nom
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Don‘t forget to redirect stderr. That&#39;s what the &lt;code&gt;&amp;amp;&lt;/code&gt;, does.&lt;/p&gt; 
&lt;p&gt;This has the advantage to also work with other commands like &lt;code&gt;nixos-rebuild&lt;/code&gt; or &lt;code&gt;home-manager&lt;/code&gt;, where it is not trivial to pass in the &lt;code&gt;--log-format internal-json -v&lt;/code&gt; flag. nom will pass everything it reads through, if it does not understand it. This makes it ideal to attach it to scripts which output more then just &lt;code&gt;nix&lt;/code&gt; output.&lt;/p&gt; 
&lt;h3&gt;Preserving Colored Text&lt;/h3&gt; 
&lt;p&gt;Colored text will work as expected in json-mode.&lt;/p&gt; 
&lt;p&gt;In human-readable log mode you can preserve the color of the redirected text by using the &lt;code&gt;unbuffer&lt;/code&gt; command from the &lt;code&gt;expect&lt;/code&gt; package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;unbuffer nix-build |&amp;amp; nom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Explanation&lt;/h2&gt; 
&lt;h3&gt;Legend&lt;/h3&gt; 
&lt;p&gt;Nom tries to convey information via symbols and colors&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;⏵&lt;/code&gt;, yellow: running builds&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;✔&lt;/code&gt;, green: completed builds&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;⏸&lt;/code&gt;, blue: planned builds&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;⚠&lt;/code&gt;, red: failed builds&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;↓ ⏵&lt;/code&gt;, yellow: running downloads&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;↑ ⏵&lt;/code&gt;, yellow: running uploads&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;↓ ✔&lt;/code&gt;, green: completed downloads&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;↑ ✔&lt;/code&gt;, green: completed uploads&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;↓ ⏸&lt;/code&gt;, blue: waiting downloads&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;∅&lt;/code&gt;: a moving average over past builds of this derivation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;⏱︎&lt;/code&gt;: running time&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;∑&lt;/code&gt;: a summary over all packages and hosts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you can‘t see all icons you maybe need another terminal font. I recommend any font from &lt;code&gt;pkgs.nerdfonts&lt;/code&gt; e.g. &lt;code&gt;&quot;JetBrainsMono Nerd Font&quot;&lt;/code&gt;. Also different terminals might work differently well. I recommend: &lt;code&gt;pkgs.foot&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;How to Read the Dependency Graph&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Every entry in the nom tree stands for one derivation.&lt;/li&gt; 
 &lt;li&gt;Children of a node are direct dependencies.&lt;/li&gt; 
 &lt;li&gt;nom will try to show you the most relevant part of the dependency tree, roughly aiming to fill a third of your terminal&lt;/li&gt; 
 &lt;li&gt;No build will be printed twice in the tree, it will only be shown for the lower most dependency.&lt;/li&gt; 
 &lt;li&gt;nom will do it’s best to print all running or failed builds, downloads and uploads, but it does not print every direct child of a node.&lt;/li&gt; 
 &lt;li&gt;Use the colors from above to read the summary&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Runs&lt;/h2&gt; 
&lt;p&gt;An example remote build: &lt;a href=&quot;https://asciinema.org/a/KwCh38ujQ9wusHw8kyW4KCMZo&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/KwCh38ujQ9wusHw8kyW4KCMZo.svg?sanitize=true&quot; alt=&quot;asciicast&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An example with a lot of downloads: &lt;a href=&quot;https://asciinema.org/a/7hJXH2iFLEkKxG1lL25lspqNn&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/7hJXH2iFLEkKxG1lL25lspqNn.svg?sanitize=true&quot; alt=&quot;asciicast&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Implementation&lt;/h2&gt; 
&lt;p&gt;Right now nom uses four sources of information:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The parsed nix-build output (json or human-readable)&lt;/li&gt; 
 &lt;li&gt;it checks if build results exist in the nix-store (only in human-readable mode)&lt;/li&gt; 
 &lt;li&gt;it queries &lt;code&gt;.drv&lt;/code&gt; files for information about the &lt;code&gt;out&lt;/code&gt; output path.&lt;/li&gt; 
 &lt;li&gt;It caches build times in &lt;code&gt;$XDG_CACHE_HOME/nix-output-monitor/build-reports.csv&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;This will fail in unexpected and expected ways.&lt;/li&gt; 
 &lt;li&gt;Luckily I don‘t think this program screws up anything more than your terminal.&lt;/li&gt; 
 &lt;li&gt;remote builds will sometimes be shown as running even when they are actually still waiting for uploads or downloads. This is how nix reports it.&lt;/li&gt; 
 &lt;li&gt;Terminal clearing and reprinting is brittle. It might fail with your terminal or terminal width. But at this point I‘ve invested some effort to make it usable.&lt;/li&gt; 
 &lt;li&gt;This program also makes assumptions like your nix-store is at &quot;/nix/store&quot;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;For human-readable log parsing mode:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;nix-output-monitor receives most it&#39;s information from parsing nix-build output. The parser might be too strict or too loose for use cases I didn‘t think of. Then &lt;strong&gt;the numbers displayed will be off&lt;/strong&gt;!&lt;/li&gt; 
 &lt;li&gt;nix-build does not show info when a download or upload is finished, so we currently cannot differentiate between started and completed downloads.&lt;/li&gt; 
 &lt;li&gt;For completed build detection we assume that every derivation has an output called &quot;out&quot;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>simonmichael/hledger</title>
      <link>https://github.com/simonmichael/hledger</link>
      <description>&lt;p&gt;Robust, fast, intuitive plain text accounting tool with CLI, TUI and web interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hledger&lt;/h1&gt; 
&lt;h2&gt;Robust, intuitive plain text accounting&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPLv3+-brightgreen.svg?sanitize=true&quot; alt=&quot;license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hackage.haskell.org/package/hledger&quot;&gt;&lt;img src=&quot;https://img.shields.io/hackage/v/hledger.svg?label=hackage&amp;amp;colorB=green&quot; alt=&quot;on hackage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://repology.org/metapackage/hledger&quot;&gt;&lt;img src=&quot;https://repology.org/badge/version-for-repo/stackage_nighly/hledger.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://repology.org/metapackage/hledger&quot;&gt;&lt;img src=&quot;https://repology.org/badge/version-for-repo/stackage_lts/hledger.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://bugs.hledger.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/simonmichael/hledger.svg?sanitize=true&quot; alt=&quot;github issues&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome! This is a brief intro to hledger. For a more detailed version, see the home page: &lt;strong&gt;&lt;a href=&quot;https://hledger.org&quot;&gt;https://hledger.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;hledger is lightweight, cross platform, multi-currency, double-entry accounting software. It lets you track money, investments, cryptocurrencies, invoices, time, inventory and more, in a safe, future-proof plain text data format with full version control and privacy.&lt;/p&gt; 
&lt;p&gt;hledger aims to help both computer experts and regular folks gain clarity in their finances and time management. Though the UIs are basic, hledger can model any accounting situation and provide precise, clear reports. It is reliable, quick, and backed by the highly supportive &lt;a href=&quot;https://plaintextaccounting.org&quot;&gt;Plain Text Accounting&lt;/a&gt; ecosystem. Using it is an excellent way to learn double entry accounting.&lt;/p&gt; 
&lt;p&gt;Compared to &lt;a href=&quot;https://plaintextaccounting.org/#software&quot;&gt;other PTA apps&lt;/a&gt;, hledger is actively maintained, with regular releases, and a strong focus on being easy to use and practical for everyday accounting.&lt;/p&gt; 
&lt;p&gt;More features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installs easily on unix, mac or windows&lt;/li&gt; 
 &lt;li&gt;Complete, built-in documentation in multiple formats, beginner videos, tutorials etc.&lt;/li&gt; 
 &lt;li&gt;Multiple UIs: command-line, terminal, web, mobile, editors/IDEs&lt;/li&gt; 
 &lt;li&gt;Good at importing and exporting CSV; also outputs text/HTML/JSON/SQL&lt;/li&gt; 
 &lt;li&gt;A robust, general, well-specified multi-currency accounting engine&lt;/li&gt; 
 &lt;li&gt;Fast, analysing 25k transactions per second on a macbook air m1&lt;/li&gt; 
 &lt;li&gt;Accurate to 255 decimal places&lt;/li&gt; 
 &lt;li&gt;Supports your preferred account names, currencies, number formats&lt;/li&gt; 
 &lt;li&gt;Inspired by and partly compatible with Ledger CLI; interconvertible with Beancount&lt;/li&gt; 
 &lt;li&gt;Scriptable by CLI, HTTP or API, with plenty of examples&lt;/li&gt; 
 &lt;li&gt;Clean Haskell codebase, continually improved since 2007, with $100 regression bounties&lt;/li&gt; 
 &lt;li&gt;Free software licensed under GPLv3+.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;I use hledger to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;track income and spending, sometimes with budgets&lt;/li&gt; 
 &lt;li&gt;see time reports by day/week/month/project&lt;/li&gt; 
 &lt;li&gt;track reimbursables, invoices and payments&lt;/li&gt; 
 &lt;li&gt;predict cashflow and account balances&lt;/li&gt; 
 &lt;li&gt;get accurate numbers for tax filing&lt;/li&gt; 
 &lt;li&gt;research past events&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here&#39;s an example of the journal file format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-journal&quot;&gt;2022-01-01 opening balances as of this date
    assets&lt;span&gt;🏦&lt;/span&gt;checking                $1000
    assets&lt;span&gt;🏦&lt;/span&gt;savings                 $2000
    assets:cash                          $100
    liabilities:creditcard               $-50
    equity:opening/closing balances

2022-01-15 market
    expenses:food             $50
    assets:cash              $-50

2022-02-01 GOODWORKS CORP
    assets&lt;span&gt;🏦&lt;/span&gt;checking           $1000
    income:salary                 $-1000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and some simple reports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;$ hledger bs
Balance Sheet 2022-02-15

                        || 2022-02-15 
========================++============
 Assets                 ||            
------------------------++------------
 assets&lt;span&gt;🏦&lt;/span&gt;checking   ||      $2000 
 assets&lt;span&gt;🏦&lt;/span&gt;savings    ||      $2000 
 assets:cash            ||        $50 
------------------------++------------
                        ||      $4050 
========================++============
 Liabilities            ||            
------------------------++------------
 liabilities:creditcard ||        $50 
------------------------++------------
                        ||        $50 
========================++============
 Net:                   ||      $4000 
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;$ hledger is --monthly                                            
Income Statement 2022-01-01..2022-02-28                                               
                                                                                      
               ||  Jan    Feb                                                         
===============++=============                                                        
 Revenues      ||                                                                     
---------------++-------------                                                        
 income:salary ||    0  $1000                                                         
---------------++-------------                                                        
               ||    0  $1000                                                         
===============++=============                                                        
 Expenses      ||                                                                     
---------------++-------------                                                        
 expenses:food ||  $50      0                                                         
---------------++-------------                                                        
               ||  $50      0                                                         
===============++=============                                                        
 Net:          || $-50  $1000                                                         
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More examples and screenshots: &lt;a href=&quot;https://hledger.org/#how-to-get-started&quot;&gt;https://hledger.org/#how-to-get-started&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Funding&lt;/h2&gt; 
&lt;p&gt;hledger is brought to you by &lt;a href=&quot;http://joyful.com&quot;&gt;Simon Michael&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/simonmichael/hledger/master/doc/CREDITS.md&quot;&gt;140+ contributors&lt;/a&gt;, and the generous financial sponsors below.&lt;/p&gt; 
&lt;p&gt;After enjoying some personal or organisational success with hledger, you might want to become one of them, to help support this work. It&#39;s easy! Please see &lt;a href=&quot;https://hledger.org/sponsor.html&quot;&gt;https://hledger.org/sponsor.html&lt;/a&gt; for details.&lt;/p&gt; 
&lt;!-- keep synced with sponsor.md: --&gt; 
&lt;h3&gt;Organisational sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/hledger/organization/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/0/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/1/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/2/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/3/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/4/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/5/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/6/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/7/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/8/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/9/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/10/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/10/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/11/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/11/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/12/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/12/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/13/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/13/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/14/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/14/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/15/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/15/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/16/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/16/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/17/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/17/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/18/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/18/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/19/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/19/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/20/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/20/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/21/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/21/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/22/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/22/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/23/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/23/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/24/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/24/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/25/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/25/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/26/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/26/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/27/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/27/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/28/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/28/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/29/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/29/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/organization/30/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/organization/30/avatar.svg?avatarHeight=200&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Individual sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/hledger/individual/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/0/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/1/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/2/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/3/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/4/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/5/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/6/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/7/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/8/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/9/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/10/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/10/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/11/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/11/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/12/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/12/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/13/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/13/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/14/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/14/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/15/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/15/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/16/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/16/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/17/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/17/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/18/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/18/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/19/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/19/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/20/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/20/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/21/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/21/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/22/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/22/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/23/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/23/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/24/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/24/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/25/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/25/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/26/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/26/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/27/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/27/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/28/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/28/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/29/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/29/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/30/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/30/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/31/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/31/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/32/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/32/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/33/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/33/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/34/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/34/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/35/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/35/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/36/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/36/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/37/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/37/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/38/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/38/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/39/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/39/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/40/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/40/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/41/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/41/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/42/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/42/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/43/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/43/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/44/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/44/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/45/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/45/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/46/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/46/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/47/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/47/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/48/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/48/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/49/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/49/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/hledger/individual/50/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/hledger/individual/50/avatar.svg?avatarHeight=100&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- (If your logo/avatar isn&#39;t appearing here, eg because you didn&#39;t use Open Collective, please [let me know](mailto:webmaster@hledger.org).) --&gt;</description>
    </item>
    
    <item>
      <title>jgm/pandoc</title>
      <link>https://github.com/jgm/pandoc</link>
      <description>&lt;p&gt;Universal markup converter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pandoc&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/jgm/pandoc/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/jgm/pandoc.svg?label=current+release&quot; alt=&quot;github release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hackage.haskell.org/package/pandoc&quot;&gt;&lt;img src=&quot;https://img.shields.io/hackage/v/pandoc.svg?label=hackage&quot; alt=&quot;hackage release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/pandoc&quot;&gt;&lt;img src=&quot;https://img.shields.io/homebrew/v/pandoc.svg?sanitize=true&quot; alt=&quot;homebrew&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.stackage.org/lts/package/pandoc&quot;&gt;&lt;img src=&quot;https://stackage.org/package/pandoc/badge/lts&quot; alt=&quot;stackage LTS package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/jgm/pandoc/actions&quot;&gt;&lt;img src=&quot;https://github.com/jgm/pandoc/workflows/CI%20tests/badge.svg?sanitize=true&quot; alt=&quot;CI tests&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPLv2+-lightgray.svg?sanitize=true&quot; alt=&quot;license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://groups.google.com/forum/#!forum/pandoc-discuss&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/pandoc-discuss-red.svg?style=social&quot; alt=&quot;pandoc-discuss on google groups&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;The universal markup converter&lt;/h2&gt; 
&lt;p&gt;Pandoc is a &lt;a href=&quot;https://haskell.org&quot;&gt;Haskell&lt;/a&gt; library for converting from one markup format to another, and a command-line tool that uses this library.&lt;/p&gt; 
&lt;p&gt;It can convert &lt;em&gt;from&lt;/em&gt;&lt;/p&gt; 
&lt;div id=&quot;input-formats&quot;&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&quot;https://ctan.org/pkg/bibtex&quot;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&quot;https://ctan.org/pkg/biblatex&quot;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;bits&lt;/code&gt; (&lt;a href=&quot;https://jats.nlm.nih.gov/extensions/bits/&quot;&gt;BITS&lt;/a&gt; XML, alias for &lt;code&gt;jats&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&quot;https://commonmark.org&quot;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&quot;https://commonmark.org&quot;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;creole&lt;/code&gt; (&lt;a href=&quot;http://www.wikicreole.org/wiki/Creole1.0&quot;&gt;Creole 1.0&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&quot;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&quot;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;csv&lt;/code&gt; (&lt;a href=&quot;https://tools.ietf.org/html/rfc4180&quot;&gt;CSV&lt;/a&gt; table)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;tsv&lt;/code&gt; (&lt;a href=&quot;https://www.iana.org/assignments/media-types/text/tab-separated-values&quot;&gt;TSV&lt;/a&gt; table)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;djot&lt;/code&gt; (&lt;a href=&quot;https://djot.net&quot;&gt;Djot markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; (&lt;a href=&quot;https://docbook.org&quot;&gt;DocBook&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Office_Open_XML&quot;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&quot;https://www.dokuwiki.org/dokuwiki&quot;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;endnotexml&lt;/code&gt; (&lt;a href=&quot;https://support.clarivate.com/Endnote/s/article/EndNote-XML-Document-Type-Definition&quot;&gt;EndNote XML bibliography&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; (&lt;a href=&quot;http://idpf.org/epub&quot;&gt;EPUB&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&quot;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&quot;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown/&quot;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&quot;https://pandoc.org/MANUAL.html#markdown-variants&quot;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&quot;https://pandoc.org/MANUAL.html#markdown-variants&quot;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&quot;https://www.haskell.org/haddock/doc/html/ch03s08.html&quot;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; (&lt;a href=&quot;https://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&quot;https://nbformat.readthedocs.io/en/latest/&quot;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (&lt;a href=&quot;https://jats.nlm.nih.gov&quot;&gt;JATS&lt;/a&gt; XML)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&quot;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&quot;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&quot;https://pandoc.org/MANUAL.html#pandocs-markdown&quot;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&quot;https://fletcherpenney.net/multimarkdown/&quot;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&quot;https://michelf.ca/projects/php-markdown/extra/&quot;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&quot;https://www.mediawiki.org/wiki/Help:Formatting&quot;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&quot;https://man.cx/groff_man(7)&quot;&gt;roff man&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;mdoc&lt;/code&gt; (&lt;a href=&quot;https://mandoc.bsd.lv/man/mdoc.7.html&quot;&gt;mdoc&lt;/a&gt; manual page markup)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&quot;https://amusewiki.org/library/manual&quot;&gt;Muse&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/OpenDocument&quot;&gt;OpenDocument text document&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&quot;http://dev.opml.org/spec2.html&quot;&gt;OPML&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&quot;https://orgmode.org&quot;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;pod&lt;/code&gt; (Perl’s &lt;a href=&quot;https://perldoc.perl.org/perlpod&quot;&gt;Plain Old Documentation&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;ris&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/RIS_(file_format)&quot;&gt;RIS&lt;/a&gt; bibliography)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Rich_Text_Format&quot;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&quot;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&quot;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;t2t&lt;/code&gt; (&lt;a href=&quot;https://txt2tags.org&quot;&gt;txt2tags&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&quot;https://textile-lang.com&quot;&gt;Textile&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;tikiwiki&lt;/code&gt; (&lt;a href=&quot;https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax&quot;&gt;TikiWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;twiki&lt;/code&gt; (&lt;a href=&quot;https://twiki.org/cgi-bin/view/TWiki/TextFormattingRules&quot;&gt;TWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;typst&lt;/code&gt; (&lt;a href=&quot;https://typst.app&quot;&gt;typst&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;vimwiki&lt;/code&gt; (&lt;a href=&quot;https://vimwiki.github.io&quot;&gt;Vimwiki&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;the path of a custom Lua reader, see &lt;a href=&quot;https://pandoc.org/MANUAL.html#custom-readers-and-writers&quot;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;p&gt;It can convert &lt;em&gt;to&lt;/em&gt;&lt;/p&gt; 
&lt;div id=&quot;output-formats&quot;&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;ansi&lt;/code&gt; (text with &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI escape codes&lt;/a&gt;, for terminal viewing)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;asciidoc&lt;/code&gt; (modern &lt;a href=&quot;https://asciidoc.org/&quot;&gt;AsciiDoc&lt;/a&gt; as interpreted by &lt;a href=&quot;https://asciidoctor.org/&quot;&gt;AsciiDoctor&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;asciidoc_legacy&lt;/code&gt; (&lt;a href=&quot;https://asciidoc.org/&quot;&gt;AsciiDoc&lt;/a&gt; as interpreted by &lt;a href=&quot;https://github.com/asciidoc-py/asciidoc-py&quot;&gt;&lt;code&gt;asciidoc-py&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;asciidoctor&lt;/code&gt; (deprecated synonym for &lt;code&gt;asciidoc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;beamer&lt;/code&gt; (&lt;a href=&quot;https://ctan.org/pkg/beamer&quot;&gt;LaTeX beamer&lt;/a&gt; slide show)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&quot;https://ctan.org/pkg/bibtex&quot;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&quot;https://ctan.org/pkg/biblatex&quot;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;chunkedhtml&lt;/code&gt; (zip archive of multiple linked HTML files)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&quot;https://commonmark.org&quot;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&quot;https://commonmark.org&quot;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;context&lt;/code&gt; (&lt;a href=&quot;https://www.contextgarden.net/&quot;&gt;ConTeXt&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&quot;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&quot;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;djot&lt;/code&gt; (&lt;a href=&quot;https://djot.net&quot;&gt;Djot markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; or &lt;code&gt;docbook4&lt;/code&gt; (&lt;a href=&quot;https://docbook.org&quot;&gt;DocBook&lt;/a&gt; 4)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;docbook5&lt;/code&gt; (DocBook 5)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Office_Open_XML&quot;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&quot;https://www.dokuwiki.org/dokuwiki&quot;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; or &lt;code&gt;epub3&lt;/code&gt; (&lt;a href=&quot;http://idpf.org/epub&quot;&gt;EPUB&lt;/a&gt; v3 book)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;epub2&lt;/code&gt; (EPUB v2)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&quot;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&quot;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown/&quot;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&quot;https://pandoc.org/MANUAL.html#markdown-variants&quot;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&quot;https://pandoc.org/MANUAL.html#markdown-variants&quot;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&quot;https://www.haskell.org/haddock/doc/html/ch03s08.html&quot;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; or &lt;code&gt;html5&lt;/code&gt; (&lt;a href=&quot;https://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;, i.e.&amp;nbsp;&lt;a href=&quot;https://html.spec.whatwg.org/&quot;&gt;HTML5&lt;/a&gt;/XHTML &lt;a href=&quot;https://www.w3.org/TR/html-polyglot/&quot;&gt;polyglot markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;html4&lt;/code&gt; (&lt;a href=&quot;https://www.w3.org/TR/xhtml1/&quot;&gt;XHTML&lt;/a&gt; 1.0 Transitional)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;icml&lt;/code&gt; (&lt;a href=&quot;https://manualzz.com/doc/9627253/adobe-indesign-cs6-idml-cookbook&quot;&gt;InDesign ICML&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&quot;https://nbformat.readthedocs.io/en/latest/&quot;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;jats_archiving&lt;/code&gt; (&lt;a href=&quot;https://jats.nlm.nih.gov&quot;&gt;JATS&lt;/a&gt; XML, Archiving and Interchange Tag Set)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;jats_articleauthoring&lt;/code&gt; (&lt;a href=&quot;https://jats.nlm.nih.gov&quot;&gt;JATS&lt;/a&gt; XML, Article Authoring Tag Set)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;jats_publishing&lt;/code&gt; (&lt;a href=&quot;https://jats.nlm.nih.gov&quot;&gt;JATS&lt;/a&gt; XML, Journal Publishing Tag Set)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (alias for &lt;code&gt;jats_archiving&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&quot;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&quot;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&quot;https://man.cx/groff_man(7)&quot;&gt;roff man&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&quot;https://pandoc.org/MANUAL.html#pandocs-markdown&quot;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&quot;https://fletcherpenney.net/multimarkdown/&quot;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&quot;https://michelf.ca/projects/php-markdown/extra/&quot;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;markua&lt;/code&gt; (&lt;a href=&quot;https://leanpub.com/markua/read&quot;&gt;Markua&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&quot;https://www.mediawiki.org/wiki/Help:Formatting&quot;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (&lt;a href=&quot;https://man.cx/groff_ms(7)&quot;&gt;roff ms&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&quot;https://amusewiki.org/library/manual&quot;&gt;Muse&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/OpenDocument&quot;&gt;OpenDocument text document&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&quot;http://dev.opml.org/spec2.html&quot;&gt;OPML&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;opendocument&lt;/code&gt; (&lt;a href=&quot;https://www.oasis-open.org/2021/06/16/opendocument-v1-3-oasis-standard-published/&quot;&gt;OpenDocument XML&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&quot;https://orgmode.org&quot;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;pdf&lt;/code&gt; (&lt;a href=&quot;https://www.adobe.com/pdf/&quot;&gt;PDF&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;plain&lt;/code&gt; (plain text)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;pptx&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_PowerPoint&quot;&gt;PowerPoint&lt;/a&gt; slide show)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&quot;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&quot;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Rich_Text_Format&quot;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;texinfo&lt;/code&gt; (&lt;a href=&quot;https://www.gnu.org/software/texinfo/&quot;&gt;GNU Texinfo&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&quot;https://textile-lang.com&quot;&gt;Textile&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;slideous&lt;/code&gt; (&lt;a href=&quot;https://goessner.net/articles/slideous/&quot;&gt;Slideous&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;slidy&lt;/code&gt; (&lt;a href=&quot;https://www.w3.org/Talks/Tools/Slidy2/&quot;&gt;Slidy&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;dzslides&lt;/code&gt; (&lt;a href=&quot;https://paulrouget.com/dzslides/&quot;&gt;DZSlides&lt;/a&gt; HTML5 + JavaScript slide show)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;revealjs&lt;/code&gt; (&lt;a href=&quot;https://revealjs.com/&quot;&gt;reveal.js&lt;/a&gt; HTML5 + JavaScript slide show)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;s5&lt;/code&gt; (&lt;a href=&quot;https://meyerweb.com/eric/tools/s5/&quot;&gt;S5&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;tei&lt;/code&gt; (&lt;a href=&quot;https://github.com/TEIC/TEI-Simple&quot;&gt;TEI Simple&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;typst&lt;/code&gt; (&lt;a href=&quot;https://typst.app&quot;&gt;typst&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;xwiki&lt;/code&gt; (&lt;a href=&quot;https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/&quot;&gt;XWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;zimwiki&lt;/code&gt; (&lt;a href=&quot;https://zim-wiki.org/manual/Help/Wiki_Syntax.html&quot;&gt;ZimWiki markup&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;the path of a custom Lua writer, see &lt;a href=&quot;https://pandoc.org/MANUAL.html#custom-readers-and-writers&quot;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;p&gt;Pandoc can also produce PDF output via LaTeX, Groff ms, or HTML.&lt;/p&gt; 
&lt;p&gt;Pandoc’s enhanced version of Markdown includes syntax for tables, definition lists, metadata blocks, footnotes, citations, math, and much more. See the User’s Manual below under &lt;a href=&quot;https://pandoc.org/MANUAL.html#pandocs-markdown&quot;&gt;Pandoc’s Markdown&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer. Users can also run custom pandoc filters to modify the intermediate AST (see the documentation for &lt;a href=&quot;https://pandoc.org/filters.html&quot;&gt;filters&lt;/a&gt; and &lt;a href=&quot;https://pandoc.org/lua-filters.html&quot;&gt;Lua filters&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Because pandoc’s intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. And some document elements, such as complex tables, may not fit into pandoc’s simple document model. While conversions from pandoc’s Markdown to all formats aspire to be perfect, conversions from formats more expressive than pandoc’s Markdown can be expected to be lossy.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;Here’s &lt;a href=&quot;https://raw.githubusercontent.com/jgm/pandoc/main/INSTALL.md&quot;&gt;how to install pandoc&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Pandoc’s website contains a full &lt;a href=&quot;https://pandoc.org/MANUAL.html&quot;&gt;User’s Guide&lt;/a&gt;. It is also available &lt;a href=&quot;https://raw.githubusercontent.com/jgm/pandoc/main/MANUAL.txt&quot;&gt;here&lt;/a&gt; as pandoc-flavored Markdown. The website also contains some &lt;a href=&quot;https://pandoc.org/demos.html&quot;&gt;examples of the use of pandoc&lt;/a&gt; and a limited &lt;a href=&quot;https://pandoc.org/try&quot;&gt;online demo&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Pull requests, bug reports, and feature requests are welcome. Please make sure to read &lt;a href=&quot;https://raw.githubusercontent.com/jgm/pandoc/main/CONTRIBUTING.md&quot;&gt;the contributor guidelines&lt;/a&gt; before opening a new issue.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;© 2006-2024 John MacFarlane (&lt;a href=&quot;mailto:jgm@berkeley.edu&quot;&gt;jgm@berkeley.edu&lt;/a&gt;). Released under the &lt;a href=&quot;https://www.gnu.org/licenses/old-licenses/gpl-2.0.html&quot; title=&quot;GNU General Public License&quot;&gt;GPL&lt;/a&gt;, version 2 or greater. This software carries no warranty of any kind. (See COPYRIGHT for full copyright and warranty notices.)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
