<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Weekly Trending</title>
    <description>Weekly Trending of Lua in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:45:43 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>iDvel/rime-ice</title>
      <link>https://github.com/iDvel/rime-ice</link>
      <description>&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL--3.0--only-34ad9b&quot; alt=&quot;License: GPL 3.0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/iDvel/rime-ice?filter=!nightly&quot; alt=&quot;GitHub Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/actions/workflows/release.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/iDvel/rime-ice/release.yml&quot; alt=&quot;GitHub Actions Workflow Status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/iDvel/rime-ice&quot; alt=&quot;GitHub Repo stars&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;a href=&quot;https://rime.im/&quot;&gt;Rime Input Method Engine / 中州韵输入法引擎&lt;/a&gt; 是一个跨平台的输入法算法框架。&lt;/p&gt; 
&lt;p&gt;这里是 Rime 的一份配置仓库，用户需要下载各平台对应的前端，并将此配置应用到配置目录。&lt;/p&gt; 
&lt;p&gt;雾凇拼音提供了一套开箱即用的完整配置，包含输入方案（全拼、常见双拼）、长期维护的开源词库及各项扩展功能。&lt;/p&gt; 
&lt;p&gt;详细介绍：&lt;a href=&quot;https://dvel.me/posts/rime-ice/&quot;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/133&quot;&gt;常见问题&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/CHANGELOG.md&quot;&gt;更新日志&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;基本套路&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; 
 &lt;li&gt;主要功能 
  &lt;ul&gt; 
   &lt;li&gt;轻量的英文输入，支持中英混输&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://dvel.me/posts/make-rime-en-better/&quot;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;拆字反查（&lt;kbd&gt;uU&lt;/kbd&gt;+拼音），拆字辅码（拼音+&lt;kbd&gt;`&lt;/kbd&gt;+拆字辅码）&lt;/li&gt; 
   &lt;li&gt;自整理的 Emoji&lt;/li&gt; 
   &lt;li&gt;以词定字（左右中括号：&lt;kbd&gt;[&lt;/kbd&gt;、&lt;kbd&gt;]&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;长词优先&lt;/li&gt; 
   &lt;li&gt;Unicode（&lt;kbd&gt;U&lt;/kbd&gt;+Unicode 码位）&lt;/li&gt; 
   &lt;li&gt;数字、人民币大写（&lt;kbd&gt;R&lt;/kbd&gt;+数字）&lt;/li&gt; 
   &lt;li&gt;日期、时间、星期（详见方案 &lt;code&gt;/date_translator&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;农历（转写：&lt;kbd&gt;N&lt;/kbd&gt;+八位数字；获取当前农历：全拼&lt;kbd&gt;nl&lt;/kbd&gt;，双拼&lt;kbd&gt;lunar&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;简易计算器（&lt;kbd&gt;cC&lt;/kbd&gt;+算式）&lt;/li&gt; 
   &lt;li&gt;常见错音错字提示&lt;/li&gt; 
   &lt;li&gt;置顶候选项（详见方案 &lt;code&gt;/pin_cand_filter&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;所有标点符号直接上屏&lt;/li&gt; 
   &lt;li&gt;特殊符号、字符输入（全拼&lt;kbd&gt;v&lt;/kbd&gt;+首字母缩写；双拼&lt;kbd&gt;V&lt;/kbd&gt;+首字母缩写）&lt;/li&gt; 
   &lt;li&gt;拼音纠错（模糊音）&lt;/li&gt; 
   &lt;li&gt;更多默认未启用的功能请参考 &lt;code&gt;lua/&lt;/code&gt; 及方案注释&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;简体字表、词库 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&quot;&gt;通用规范汉字表&lt;/a&gt;（by 中华人民共和国教育部）8K 常用汉字&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.unicode.org/Public/&quot;&gt;Unihan 字库&lt;/a&gt;（by Unicode lnc | &lt;a href=&quot;https://www.unicode.org/license.txt&quot;&gt;UNICODE LICENSE V3&lt;/a&gt;）40K 大字库， &lt;strong&gt;默认未启用&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D%E8%A1%A8&quot;&gt;现代汉语常用词表&lt;/a&gt;（by 中国国家语言文字工作委员会）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&quot;&gt;华宇野风词库&lt;/a&gt;（by 野风）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/rime-essay-simp&quot;&gt;简化字八股文&lt;/a&gt;（by rime | &lt;a href=&quot;https://github.com/rime/rime-essay-simp/raw/master/LICENSE&quot;&gt;LGPL&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/thunlp/THUOCL&quot;&gt;清华大学开源词库&lt;/a&gt;（by THUNLP | &lt;a href=&quot;https://github.com/thunlp/THUOCL/raw/master/LICENSE&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/download.html&quot;&gt;腾讯词向量&lt;/a&gt;（@Huandeep &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/24&quot;&gt;整理&lt;/a&gt; | by Tencent AI Lab | &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;词库修订 
  &lt;ul&gt; 
   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; 
   &lt;li&gt;全词库完成注音&lt;/li&gt; 
   &lt;li&gt;同义多音字注音&lt;/li&gt; 
   &lt;li&gt;参考 
    &lt;ul&gt; 
     &lt;li&gt;《现代汉语词典》&lt;/li&gt; 
     &lt;li&gt;《同义词词林》&lt;/li&gt; 
     &lt;li&gt;《新华成语大词典》&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;http://www.jiaodui.com/bbs/&quot;&gt;校对标准论坛&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Rime、Squirrel、Weasel 常用配置项的详尽注释&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;h2&gt;长期维护词库&lt;/h2&gt; 
&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; 
&lt;p&gt;主要维护的词库：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; 
 &lt;li&gt;Emoji&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; 
&lt;p&gt;欢迎在词库方面提 issue &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/666&quot;&gt;#666&lt;/a&gt; ，我会及时更新修正。&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;使用说明&lt;/h2&gt; 
&lt;h3&gt;选择和安装 RIME 前端&lt;/h3&gt; 
&lt;p&gt;要使用雾凇拼音默认提供的所有功能，请保证&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;您的 RIME 前端提供的 librime 版本 ≥ 1.8.5 且&lt;/li&gt; 
 &lt;li&gt;含有 librime-lua 依赖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以下是主流平台上的一些 RIME 前端安装建议。部分信息具有时效性，请以当下具体情况为准：&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;系统&lt;/th&gt; 
   &lt;th&gt;RIME 前端&lt;/th&gt; 
   &lt;th&gt;雾凇拼音版本要求&lt;/th&gt; 
   &lt;th&gt;备注&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx5-android/fcitx5-android/releases&quot;&gt;fcitx5-android&lt;/a&gt; + plugin.rime（小企鹅输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 0.0.8&lt;/td&gt; 
   &lt;td&gt;暂不支持九宫格&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/osfans/trime&quot;&gt;Trime&lt;/a&gt;（同文输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 3.2.11&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95/id6446617683&quot;&gt;Hamster&lt;/a&gt;（仓输入法）&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;闭源；有内购&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;ibus + &lt;a href=&quot;https://github.com/rime/ibus-rime&quot;&gt;ibus-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;fcitx5 + &lt;a href=&quot;https://github.com/fcitx/fcitx5-rime&quot;&gt;fcitx5-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/squirrel&quot;&gt;Squirrel&lt;/a&gt;（鼠须管）&lt;/td&gt; 
   &lt;td&gt;≥ 1.0.0&lt;/td&gt; 
   &lt;td&gt;0.16.0 - 0.18.0 版本请参考&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/1062&quot;&gt;🔗&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx-contrib/fcitx5-macos&quot;&gt;fcitx5-macos&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;支持&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/941&quot;&gt;卷轴模式&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/weasel&quot;&gt;Weasel&lt;/a&gt;（小狼毫）&lt;/td&gt; 
   &lt;td&gt;≥ 0.15.0&lt;/td&gt; 
   &lt;td&gt;0.14.3 可手动更新 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/197&quot;&gt;rime.dll&lt;/a&gt;（但不支持彩色 emoji）&lt;br&gt;Weasel 当下有兼容性问题，建议安装其他输入法备用&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Linux 依赖问题的具体解释请参考 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/840&quot;&gt;#840&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;雾凇拼音的部分配置可能要求更高的 librime 或者客户端版本，这些功能已在具体配置文件中注明。&lt;/p&gt; 
&lt;p&gt;以下安装方式，选择其一：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85&quot;&gt;手动安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#git-%E5%AE%89%E8%A3%85&quot;&gt;Git 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%B8%9C%E9%A3%8E%E7%A0%B4-plum&quot;&gt;东风破 plum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC&quot;&gt;自动部署脚本&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95-hamster&quot;&gt;仓输入法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#arch-linux&quot;&gt;Arch Linux&lt;/a&gt;（AUR）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;手动安装&lt;/h3&gt; 
&lt;p&gt;您可以将仓库打包下载，将所有文件复制粘贴到 RIME 前端的配置目录，重新部署。&lt;/p&gt; 
&lt;p&gt;只需要使用或者更新词库的话，可以手动粘贴覆盖 &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dicts&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; 三个文件夹。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] 雾凇拼音中多个文件可能与其他方案同名冲突，如果是新手想一键安装，建议备份原先配置，&lt;strong&gt;清空配置目录&lt;/strong&gt;再导入。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;单独使用词库注意事项：&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 下面包含了大写字母，这和配置有些许绑定，可以直接删除，详细说明：&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/356&quot;&gt;#356&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;您也可以前往 &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases&quot;&gt;Release&lt;/a&gt; 界面，下载特定版本的词典文件（具体描述见 Release 说明），覆盖配置目录的对应文件。&lt;/p&gt; 
&lt;h3&gt;Git 安装&lt;/h3&gt; 
&lt;p&gt;您如果熟悉 git 常用操作，可以使用 git clone 命令将本仓库克隆到对应前端的用户目录。由于本库提交历史较多且更改频繁，添加 &lt;code&gt;--depth&lt;/code&gt; 参数可以显著减少传输体积。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/iDvel/rime-ice.git Rime --depth 1

# 更新
cd Rime
git pull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 checkout 命令，您也可以实现更新部分文件的效果。&lt;/p&gt; 
&lt;h3&gt;东风破 &lt;a href=&quot;https://github.com/rime/plum&quot;&gt;plum&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;选择配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）来进行安装或更新。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;/plum/ 简易安装和使用教程&lt;/summary&gt; 
 &lt;hr&gt; 
 &lt;p&gt;安装 plum（仅需要执行一次）&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 请先安装 git 和 bash，并加入环境变量
# 请确保和 github.com 的连接稳定
cd ~
git clone https://github.com/rime/plum.git plum
# 卸载 plum 只需要删除 ~/plum 文件夹即可
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;更新 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install plum
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;使用 plum 安装「雾凇拼音」方案的韵书（recipe）&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;指定 RIME 前端为 fcitx5-rime&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
rime_frontend=fcitx5-rime bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;使用 plum 更新「雾凇拼音」的词库文件&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd ~/plum
bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr&gt; 
&lt;/details&gt; 
&lt;p&gt;词库配方只是更新具体词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。如果更新后部署时报错，可能是增、删、改了文件名，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; 
&lt;p&gt;℞ 安装或更新全部文件&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新所有词库文件（包含下面三个）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新拼音词库文件（ &lt;code&gt;cn_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新英文词库文件（ &lt;code&gt;en_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新 opencc （ &lt;code&gt;opencc/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;下面这个配方会在 &lt;code&gt;radical_pinyin.custom.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.custom.yaml&lt;/code&gt; 里将 &lt;code&gt;speller/algebra&lt;/code&gt; 修改为对应的双拼拼写，选择一个自己使用的双拼作为参数。&lt;/p&gt; 
&lt;p&gt;℞ 双拼补丁&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/config:schema=flypy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=double_pinyin
bash rime-install iDvel/rime-ice:others/recipes/config:schema=mspy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=sogou
bash rime-install iDvel/rime-ice:others/recipes/config:schema=abc
bash rime-install iDvel/rime-ice:others/recipes/config:schema=ziguang
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 下载特定版本的配置&lt;/p&gt; 
&lt;p&gt;在仓库后加 &lt;code&gt;@tag&lt;/code&gt; 即可，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bash rime-install iDvel/rime-ice@2024.05.21:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;仓输入法 &lt;a href=&quot;https://github.com/imfuxiao/Hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;参考 &lt;a href=&quot;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&quot;&gt;如何导入&quot;雾凇拼音输入方案&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;仓输入法目前已内置雾凇拼音，也可以通过【输入方案设置 - 右上角加号 - 方案下载 - 覆盖并部署】来更新雾凇拼音。&lt;/p&gt; 
&lt;p&gt;使用九宫格，需要同时启用九宫格方案（输入方案设置）和九宫格布局（键盘设置 - 键盘布局 - 中文 9 键）。&lt;/p&gt; 
&lt;h3&gt;自动部署脚本&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Mark24Code/rime-auto-deploy&quot;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; 一个自动部署脚本，集成了雾凇拼音，帮助无痛快速安装、部署 Rime 输入法（中州韵、小狼毫，鼠须管）以及部署配置。&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;使用 AUR helper 安装 &lt;a href=&quot;https://aur.archlinux.org/packages/rime-ice-git&quot;&gt;rime-ice-git&lt;/a&gt; 包即可。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# paru 默认会每次重新评估 pkgver，所以有新的提交时 paru 会自动更新，
# yay 默认未开启此功能，可以通过此命令开启
# yay -Y --devel --save

paru -S rime-ice-git
# yay -S rime-ice-git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;推荐使用&lt;a href=&quot;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&quot;&gt;补丁&lt;/a&gt;的方式启用。&lt;/p&gt; 
&lt;p&gt;参考下面的配置示例，修改对应输入法框架用户目录（见下）中的 &lt;code&gt;default.custom.yaml&lt;/code&gt; 文件&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iBus 为 &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fcitx5 为 &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;default.custom.yaml&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;patch:
  # 仅使用「雾凇拼音」的默认配置，配置此行即可
  __include: rime_ice_suggestion:/
  # 以下根据自己所需自行定义，仅做参考。
  # 针对对应处方的定制条目，请使用 &amp;lt;recipe&amp;gt;.custom.yaml 中配置，例如 rime_ice.custom.yaml
  __patch:
    key_binder/bindings/+:
      # 开启逗号句号翻页
      - { when: paging, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;感谢 ❤️&lt;/h2&gt; 
&lt;p&gt;特别感谢上文已经提及的词库、词典的作者、贡献者及整理者；特别感谢以及下列词库、方案、脚本的作者及贡献者（提及的均为 GitHub id）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@mozillazg 开发的汉字转拼音工具和数据库（MIT）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt&quot;&gt;melt_eng&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;） ：提供了部分（约 1000 条）英文词汇以及原始英文方案参考；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin&quot;&gt;部件拆字方案&lt;/a&gt;（@mirtlecn | &lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin/raw/master/LICENSE&quot;&gt;GPL 3.0&lt;/a&gt;）：提供的拆字反查和候选筛选插件；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&quot;&gt;长词优先插件&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;Unicode 插件&lt;/a&gt;（@shewer | &lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yanhuacuo/98wubi/raw/master/lua/number.lua&quot;&gt;数字、人民币大写插件&lt;/a&gt;（@98wubi）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/boomker/rime-fast-xhup&quot;&gt;农历插件&lt;/a&gt;（@boomker | &lt;a href=&quot;https://github.com/boomker/rime-fast-xhup/raw/master/LICENSE&quot;&gt;LGPL 3.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;未能在此处详述的、在本库源码注释中提及的项目及作者给予的帮助和参考&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Huandeep&quot;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/mirtlecn&quot;&gt;@Mirtle&lt;/a&gt; 完善的多个功能。&lt;/p&gt; 
&lt;p&gt;感谢所有贡献者。&lt;/p&gt; 
&lt;!-- 搜狗转 Rime：[lewangdev/scel2txt](https://github.com/lewangdev/scel2txt) --&gt; 
&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSourceSupport&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;赞助 ☕&lt;/h2&gt; 
&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&quot; alt=&quot;请 Dvel 吃个煎饼馃子&quot; width=&quot;600&quot;&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>overextended/ox_lib</title>
      <link>https://github.com/overextended/ox_lib</link>
      <description>&lt;p&gt;A FiveM resource and script library for Lua and JS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ox_lib&lt;/h1&gt; 
&lt;p&gt;A FiveM library and resource implementing reusable modules, methods, and UI elements.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/overextended/ox_lib/total?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/overextended/ox_lib/latest/total?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/overextended/ox_lib?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/overextended/ox_lib?logo=github&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://overextended.dev/ox_lib&quot;&gt;https://overextended.dev/ox_lib&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;💾 Download&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/overextended/ox_lib/releases/latest/download/ox_lib.zip&quot;&gt;https://github.com/overextended/ox_lib/releases/latest/download/ox_lib.zip&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;npm Package&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/@overextended/ox_lib&quot;&gt;https://www.npmjs.com/package/@overextended/ox_lib&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Lua Language Server&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sumneko.lua&quot;&gt;Lua Language Server&lt;/a&gt; to ease development with annotations, type checking, diagnostics, and more.&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=overextended.cfxlua-vscode&quot;&gt;cfxlua-vscode&lt;/a&gt; to add natives and cfxlua runtime declarations to LLS.&lt;/li&gt; 
 &lt;li&gt;You can load ox_lib into your global development environment by modifying workspace/user settings &quot;Lua.workspace.library&quot; with the resource path. 
  &lt;ul&gt; 
   &lt;li&gt;e.g. &quot;c:/fxserver/resources/ox_lib&quot;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mistweaverco/kulala.nvim</title>
      <link>https://github.com/mistweaverco/kulala.nvim</link>
      <description>&lt;p&gt;A minimal 🤏 HTTP-client 🐼 interface 🖥️ for Neovim ❤️.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/logo.svg?sanitize=true&quot; alt=&quot;Kulala Logo&quot;&gt;&lt;/p&gt; 
 &lt;h1&gt;kulala.nvim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/graphs/contributors&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/badge-made-with-love.svg?sanitize=true&quot; alt=&quot;Made with love&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/mistweaverco/kulala.nvim?style=for-the-badge&quot; alt=&quot;GitHub release (latest by date)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/QyVQmfY4Rt&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/badge-discord.svg?sanitize=true&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/requirements&quot;&gt;Requirements&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://neovim.getkulala.net/docs/usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://neovim.getkulala.net/docs/usage/http-file-spec&quot;&gt;HTTP File Spec&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;A minimal REST-Client Interface for Neovim.&lt;/p&gt; 
 &lt;p&gt;Kulala is swahili for &quot;rest&quot; or &quot;relax&quot;.&lt;/p&gt; 
 &lt;p&gt;It allows you to make HTTP requests from within Neovim.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/demo.gif&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Requires Neovim 0.10.0+ and cURL.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/requirements&quot;&gt;requirements&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Via &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lazy&quot;).setup({
  {
    &quot;mistweaverco/kulala.nvim&quot;,
    keys = {
      { &quot;&amp;lt;leader&amp;gt;Rs&quot;, desc = &quot;Send request&quot; },
      { &quot;&amp;lt;leader&amp;gt;Ra&quot;, desc = &quot;Send all requests&quot; },
      { &quot;&amp;lt;leader&amp;gt;Rb&quot;, desc = &quot;Open scratchpad&quot; },
    },
    ft = {&quot;http&quot;, &quot;rest&quot;},
    opts = {
      -- your configuration comes here
      global_keymaps = false,
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] &lt;code&gt;opts&lt;/code&gt; needs to be at least an empty table &lt;code&gt;{}&lt;/code&gt; and can&#39;t be completely omitted.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] By default global keymaps are disabled, change to &lt;code&gt;global_keymaps = true&lt;/code&gt; to get a complete set of key mappings for Kulala. Check the &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/keymaps&quot;&gt;keymaps documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See complete &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/configuration-options&quot;&gt;configuration options&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Honorable mentions&lt;/h2&gt; 
&lt;h3&gt;rest.nvim&lt;/h3&gt; 
&lt;p&gt;For getting this project started.&lt;/p&gt; 
&lt;p&gt;This project was heavily inspired by the idea of having a REST client in Neovim.&lt;/p&gt; 
&lt;p&gt;The actual state of &lt;a href=&quot;https://github.com/rest-nvim/rest.nvim&quot;&gt;rest.nvim&lt;/a&gt; as archived kicked off the development of kulala.nvim.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The project has been &lt;a href=&quot;https://github.com/rest-nvim/rest.nvim/issues/398#issue-2442747909&quot;&gt;un-archived&lt;/a&gt; again, so check it out if you&#39;re looking for an alternative.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;curl.nvim&lt;/h3&gt; 
&lt;p&gt;If you want a simple scratchpad for making HTTP requests, check out &lt;a href=&quot;https://github.com/oysandvik94/curl.nvim&quot;&gt;curl.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It&#39;s very different to this project, but it&#39;s a great tool for making HTTP requests from within Neovim and maybe just your cup of tea.&lt;/p&gt; 
&lt;h3&gt;httpbin.org&lt;/h3&gt; 
&lt;p&gt;For providing a great service for testing HTTP requests and making it in all the kulala examples.&lt;/p&gt; 
&lt;p&gt;Thanks for making it easy to test and develop this plugin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sindrets/diffview.nvim</title>
      <link>https://github.com/sindrets/diffview.nvim</link>
      <description>&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diffview.nvim&lt;/h1&gt; 
&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/131269942-e34100dd-cbb9-48fe-af31-6e518ce06e9e.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Vim&#39;s diff mode is pretty good, but there is no convenient way to quickly bring up all modified files in a diffsplit. This plugin aims to provide a simple, unified, single tabpage interface that lets you easily review all changed files for any git rev.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git ≥ 2.31.0 (for Git support)&lt;/li&gt; 
 &lt;li&gt;Mercurial ≥ 5.4.0 (for Mercurial support)&lt;/li&gt; 
 &lt;li&gt;Neovim ≥ 0.7.0 (with LuaJIT)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; (optional) For file icons&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager of choice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; Plug
Plug &#39;sindrets/diffview.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Packer
use &quot;sindrets/diffview.nvim&quot; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Merge Tool&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/188286293-13bbf0ab-3595-425d-ba4a-12f514c17eb6.png&quot; alt=&quot;merge tool showcase&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Opening a diff view during a merge or a rebase will list the conflicted files in their own section. When opening a conflicted file, it will open in a 3-way diff allowing you to resolve the merge conflicts with the context of the target branch&#39;s version, as well as the version from the branch which is being merged.&lt;/p&gt; 
&lt;p&gt;The 3-way diff is only the default layout for merge conflicts. There are multiple variations on this layout, a 4-way diff layout, and a single window layout available.&lt;/p&gt; 
&lt;p&gt;In addition to the normal &lt;code&gt;:h copy-diffs&lt;/code&gt; mappings, there are default mappings provided for jumping between conflict markers, obtaining a hunk directly from any of the diff buffers, and accepting any one, all, or none of the versions of a file given by a conflict region.&lt;/p&gt; 
&lt;p&gt;For more information on the merge tool, mappings, layouts and how to configure them, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-merge-tool&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-config-view.x.layout&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;File History&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/188331057-f9ec9a0d-8cda-4ff8-ac98-febcc7aa4010.png&quot; alt=&quot;file history showcase&quot;&gt;&lt;/p&gt; 
&lt;p&gt;The file history view allows you to list all the commits that affected a given set of paths, and view the changes made in a diff split. This is a porcelain interface for git-log, and supports a good number of its options. Things like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Filtering commits by grepping commit messages and commit authors.&lt;/li&gt; 
 &lt;li&gt;Tracing the line evolution of a given set of line ranges for multiple files.&lt;/li&gt; 
 &lt;li&gt;Only listing changes for a specific commit range, branch, or tag.&lt;/li&gt; 
 &lt;li&gt;Following file changes through renames.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get started by opening file history for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The current branch: &lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;The current file: &lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more info, see &lt;code&gt;:h :DiffviewFileHistory&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;:DiffviewOpen [git rev] [options] [ -- {paths...}]&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Calling &lt;code&gt;:DiffviewOpen&lt;/code&gt; with no args opens a new Diffview that compares against the current index. You can also provide any valid git rev to view only changes for that rev.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~4..HEAD~2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d^!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d..519b30e&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen origin/main...HEAD&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also provide additional paths to narrow down what files are shown:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2 -- lua/diffview plugin&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For information about additional &lt;code&gt;[options]&lt;/code&gt;, visit the &lt;a href=&quot;https://github.com/sindrets/diffview.nvim/raw/main/doc/diffview.txt&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additional commands for convenience:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewClose&lt;/code&gt;: Close the current diffview. You can also use &lt;code&gt;:tabclose&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewToggleFiles&lt;/code&gt;: Toggle the file panel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFocusFiles&lt;/code&gt;: Bring focus to the file panel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewRefresh&lt;/code&gt;: Update stats and entries in the file list of the current Diffview.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With a Diffview open and the default key bindings, you can cycle through changed files with &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;s-tab&amp;gt;&lt;/code&gt; (see configuration to change the key bindings).&lt;/p&gt; 
&lt;h4&gt;Staging&lt;/h4&gt; 
&lt;p&gt;You can stage individual hunks by editing any buffer that represents the index (after running &lt;code&gt;:DiffviewOpen&lt;/code&gt; with no &lt;code&gt;[git-rev]&lt;/code&gt; the entries under &quot;Changes&quot; will have the index buffer on the left side, and the entries under &quot;Staged changes&quot; will have it on the right side). Once you write to an index buffer the index will be updated.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;:[range]DiffviewFileHistory [paths] [options]&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Opens a new file history view that lists all commits that affected the given paths. This is a porcelain interface for git-log. Both &lt;code&gt;[paths]&lt;/code&gt; and &lt;code&gt;[options]&lt;/code&gt; may be specified in any order, even interchangeably.&lt;/p&gt; 
&lt;p&gt;If no &lt;code&gt;[paths]&lt;/code&gt; are given, defaults to the top-level of the working tree. The top-level will be inferred from the current buffer when possible, otherwise the cwd is used. Multiple &lt;code&gt;[paths]&lt;/code&gt; may be provided and git pathspec is supported.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;[range]&lt;/code&gt; is given, the file history view will trace the line evolution of the given range in the current file (for more info, see the &lt;code&gt;-L&lt;/code&gt; flag in the docs).&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/file.txt&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/directory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory include/this and/this :!but/not/this&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=origin..HEAD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=feat/example-branch&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:&#39;&amp;lt;,&#39;&amp;gt;DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;h3&gt;Familiarize Yourself With &lt;code&gt;:h diff-mode&lt;/code&gt;&lt;/h3&gt; 
 &lt;p&gt;This plugin assumes you&#39;re familiar with all the features already provided by nvim&#39;s builtin diff-mode. These features include:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Jumping between hunks (&lt;code&gt;:h jumpto-diffs&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;Applying the changes of a diff hunk from any of the diffed buffers (&lt;code&gt;:h copy-diffs&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;And more...&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Read the help page for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;br&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Additionally check out &lt;a href=&quot;https://raw.githubusercontent.com/sindrets/diffview.nvim/main/USAGE.md&quot;&gt;USAGE&lt;/a&gt; for examples of some more specific use-cases.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br&gt; 
&lt;hr&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt; &lt;/p&gt;
&lt;details&gt; 
 &lt;summary style=&quot;cursor: pointer&quot;&gt;&lt;b&gt;Example config with default values&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
local actions = require(&quot;diffview.actions&quot;)

require(&quot;diffview&quot;).setup({
  diff_binaries = false,    -- Show diffs for binaries
  enhanced_diff_hl = false, -- See |diffview-config-enhanced_diff_hl|
  git_cmd = { &quot;git&quot; },      -- The git executable followed by default args.
  hg_cmd = { &quot;hg&quot; },        -- The hg executable followed by default args.
  use_icons = true,         -- Requires nvim-web-devicons
  show_help_hints = true,   -- Show hints for how to open the help panel
  watch_index = true,       -- Update views and index buffers when the git index changes.
  icons = {                 -- Only applies when use_icons is true.
    folder_closed = &quot;&quot;,
    folder_open = &quot;&quot;,
  },
  signs = {
    fold_closed = &quot;&quot;,
    fold_open = &quot;&quot;,
    done = &quot;✓&quot;,
  },
  view = {
    -- Configure the layout and behavior of different types of views.
    -- Available layouts:
    --  &#39;diff1_plain&#39;
    --    |&#39;diff2_horizontal&#39;
    --    |&#39;diff2_vertical&#39;
    --    |&#39;diff3_horizontal&#39;
    --    |&#39;diff3_vertical&#39;
    --    |&#39;diff3_mixed&#39;
    --    |&#39;diff4_mixed&#39;
    -- For more info, see |diffview-config-view.x.layout|.
    default = {
      -- Config for changed files, and staged files in diff views.
      layout = &quot;diff2_horizontal&quot;,
      disable_diagnostics = false,  -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = false,          -- See |diffview-config-view.x.winbar_info|
    },
    merge_tool = {
      -- Config for conflicted files in diff views during a merge or rebase.
      layout = &quot;diff3_horizontal&quot;,
      disable_diagnostics = true,   -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = true,           -- See |diffview-config-view.x.winbar_info|
    },
    file_history = {
      -- Config for changed files in file history views.
      layout = &quot;diff2_horizontal&quot;,
      disable_diagnostics = false,  -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = false,          -- See |diffview-config-view.x.winbar_info|
    },
  },
  file_panel = {
    listing_style = &quot;tree&quot;,             -- One of &#39;list&#39; or &#39;tree&#39;
    tree_options = {                    -- Only applies when listing_style is &#39;tree&#39;
      flatten_dirs = true,              -- Flatten dirs that only contain one single dir
      folder_statuses = &quot;only_folded&quot;,  -- One of &#39;never&#39;, &#39;only_folded&#39; or &#39;always&#39;.
    },
    win_config = {                      -- See |diffview-config-win_config|
      position = &quot;left&quot;,
      width = 35,
      win_opts = {},
    },
  },
  file_history_panel = {
    log_options = {   -- See |diffview-config-log_options|
      git = {
        single_file = {
          diff_merges = &quot;combined&quot;,
        },
        multi_file = {
          diff_merges = &quot;first-parent&quot;,
        },
      },
      hg = {
        single_file = {},
        multi_file = {},
      },
    },
    win_config = {    -- See |diffview-config-win_config|
      position = &quot;bottom&quot;,
      height = 16,
      win_opts = {},
    },
  },
  commit_log_panel = {
    win_config = {},  -- See |diffview-config-win_config|
  },
  default_args = {    -- Default args prepended to the arg-list for the listed commands
    DiffviewOpen = {},
    DiffviewFileHistory = {},
  },
  hooks = {},         -- See |diffview-config-hooks|
  keymaps = {
    disable_defaults = false, -- Disable the default keymaps
    view = {
      -- The `view` bindings are active in the diff buffers, only when the current
      -- tabpage is a Diffview.
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,       actions.select_next_entry,              { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,     actions.select_prev_entry,              { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,          actions.select_first_entry,             { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,          actions.select_last_entry,              { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,          actions.goto_file_edit,                 { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,  actions.goto_file_split,                { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,     actions.goto_file_tab,                  { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,   actions.focus_files,                    { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,   actions.toggle_files,                   { desc = &quot;Toggle the file panel.&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,      actions.cycle_layout,                   { desc = &quot;Cycle through available layouts.&quot; } },
      { &quot;n&quot;, &quot;[x&quot;,          actions.prev_conflict,                  { desc = &quot;In the merge-tool: jump to the previous conflict&quot; } },
      { &quot;n&quot;, &quot;]x&quot;,          actions.next_conflict,                  { desc = &quot;In the merge-tool: jump to the next conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;co&quot;,  actions.conflict_choose(&quot;ours&quot;),        { desc = &quot;Choose the OURS version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;ct&quot;,  actions.conflict_choose(&quot;theirs&quot;),      { desc = &quot;Choose the THEIRS version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cb&quot;,  actions.conflict_choose(&quot;base&quot;),        { desc = &quot;Choose the BASE version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;ca&quot;,  actions.conflict_choose(&quot;all&quot;),         { desc = &quot;Choose all the versions of a conflict&quot; } },
      { &quot;n&quot;, &quot;dx&quot;,          actions.conflict_choose(&quot;none&quot;),        { desc = &quot;Delete the conflict region&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cO&quot;,  actions.conflict_choose_all(&quot;ours&quot;),    { desc = &quot;Choose the OURS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cT&quot;,  actions.conflict_choose_all(&quot;theirs&quot;),  { desc = &quot;Choose the THEIRS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cB&quot;,  actions.conflict_choose_all(&quot;base&quot;),    { desc = &quot;Choose the BASE version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cA&quot;,  actions.conflict_choose_all(&quot;all&quot;),     { desc = &quot;Choose all the versions of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;dX&quot;,          actions.conflict_choose_all(&quot;none&quot;),    { desc = &quot;Delete the conflict region for the whole file&quot; } },
    },
    diff1 = {
      -- Mappings in single window diff layouts
      { &quot;n&quot;, &quot;g?&quot;, actions.help({ &quot;view&quot;, &quot;diff1&quot; }), { desc = &quot;Open the help panel&quot; } },
    },
    diff2 = {
      -- Mappings in 2-way diff layouts
      { &quot;n&quot;, &quot;g?&quot;, actions.help({ &quot;view&quot;, &quot;diff2&quot; }), { desc = &quot;Open the help panel&quot; } },
    },
    diff3 = {
      -- Mappings in 3-way diff layouts
      { { &quot;n&quot;, &quot;x&quot; }, &quot;2do&quot;,  actions.diffget(&quot;ours&quot;),            { desc = &quot;Obtain the diff hunk from the OURS version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;3do&quot;,  actions.diffget(&quot;theirs&quot;),          { desc = &quot;Obtain the diff hunk from the THEIRS version of the file&quot; } },
      { &quot;n&quot;,          &quot;g?&quot;,   actions.help({ &quot;view&quot;, &quot;diff3&quot; }),  { desc = &quot;Open the help panel&quot; } },
    },
    diff4 = {
      -- Mappings in 4-way diff layouts
      { { &quot;n&quot;, &quot;x&quot; }, &quot;1do&quot;,  actions.diffget(&quot;base&quot;),            { desc = &quot;Obtain the diff hunk from the BASE version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;2do&quot;,  actions.diffget(&quot;ours&quot;),            { desc = &quot;Obtain the diff hunk from the OURS version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;3do&quot;,  actions.diffget(&quot;theirs&quot;),          { desc = &quot;Obtain the diff hunk from the THEIRS version of the file&quot; } },
      { &quot;n&quot;,          &quot;g?&quot;,   actions.help({ &quot;view&quot;, &quot;diff4&quot; }),  { desc = &quot;Open the help panel&quot; } },
    },
    file_panel = {
      { &quot;n&quot;, &quot;j&quot;,              actions.next_entry,                     { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;down&amp;gt;&quot;,         actions.next_entry,                     { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;k&quot;,              actions.prev_entry,                     { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;up&amp;gt;&quot;,           actions.prev_entry,                     { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;cr&amp;gt;&quot;,           actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;o&quot;,              actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;l&quot;,              actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;2-LeftMouse&amp;gt;&quot;,  actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;-&quot;,              actions.toggle_stage_entry,             { desc = &quot;Stage / unstage the selected entry&quot; } },
      { &quot;n&quot;, &quot;s&quot;,              actions.toggle_stage_entry,             { desc = &quot;Stage / unstage the selected entry&quot; } },
      { &quot;n&quot;, &quot;S&quot;,              actions.stage_all,                      { desc = &quot;Stage all entries&quot; } },
      { &quot;n&quot;, &quot;U&quot;,              actions.unstage_all,                    { desc = &quot;Unstage all entries&quot; } },
      { &quot;n&quot;, &quot;X&quot;,              actions.restore_entry,                  { desc = &quot;Restore entry to the state on the left side&quot; } },
      { &quot;n&quot;, &quot;L&quot;,              actions.open_commit_log,                { desc = &quot;Open the commit log panel&quot; } },
      { &quot;n&quot;, &quot;zo&quot;,             actions.open_fold,                      { desc = &quot;Expand fold&quot; } },
      { &quot;n&quot;, &quot;h&quot;,              actions.close_fold,                     { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;zc&quot;,             actions.close_fold,                     { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;za&quot;,             actions.toggle_fold,                    { desc = &quot;Toggle fold&quot; } },
      { &quot;n&quot;, &quot;zR&quot;,             actions.open_all_folds,                 { desc = &quot;Expand all folds&quot; } },
      { &quot;n&quot;, &quot;zM&quot;,             actions.close_all_folds,                { desc = &quot;Collapse all folds&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-b&amp;gt;&quot;,          actions.scroll_view(-0.25),             { desc = &quot;Scroll the view up&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-f&amp;gt;&quot;,          actions.scroll_view(0.25),              { desc = &quot;Scroll the view down&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,          actions.select_next_entry,              { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,        actions.select_prev_entry,              { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,             actions.select_first_entry,             { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,             actions.select_last_entry,              { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,             actions.goto_file_edit,                 { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,     actions.goto_file_split,                { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,        actions.goto_file_tab,                  { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;i&quot;,              actions.listing_style,                  { desc = &quot;Toggle between &#39;list&#39; and &#39;tree&#39; views&quot; } },
      { &quot;n&quot;, &quot;f&quot;,              actions.toggle_flatten_dirs,            { desc = &quot;Flatten empty subdirectories in tree listing style&quot; } },
      { &quot;n&quot;, &quot;R&quot;,              actions.refresh_files,                  { desc = &quot;Update stats and entries in the file list&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,      actions.focus_files,                    { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,      actions.toggle_files,                   { desc = &quot;Toggle the file panel&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,         actions.cycle_layout,                   { desc = &quot;Cycle available layouts&quot; } },
      { &quot;n&quot;, &quot;[x&quot;,             actions.prev_conflict,                  { desc = &quot;Go to the previous conflict&quot; } },
      { &quot;n&quot;, &quot;]x&quot;,             actions.next_conflict,                  { desc = &quot;Go to the next conflict&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,             actions.help(&quot;file_panel&quot;),             { desc = &quot;Open the help panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cO&quot;,     actions.conflict_choose_all(&quot;ours&quot;),    { desc = &quot;Choose the OURS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cT&quot;,     actions.conflict_choose_all(&quot;theirs&quot;),  { desc = &quot;Choose the THEIRS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cB&quot;,     actions.conflict_choose_all(&quot;base&quot;),    { desc = &quot;Choose the BASE version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cA&quot;,     actions.conflict_choose_all(&quot;all&quot;),     { desc = &quot;Choose all the versions of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;dX&quot;,             actions.conflict_choose_all(&quot;none&quot;),    { desc = &quot;Delete the conflict region for the whole file&quot; } },
    },
    file_history_panel = {
      { &quot;n&quot;, &quot;g!&quot;,            actions.options,                     { desc = &quot;Open the option panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-A-d&amp;gt;&quot;,       actions.open_in_diffview,            { desc = &quot;Open the entry under the cursor in a diffview&quot; } },
      { &quot;n&quot;, &quot;y&quot;,             actions.copy_hash,                   { desc = &quot;Copy the commit hash of the entry under the cursor&quot; } },
      { &quot;n&quot;, &quot;L&quot;,             actions.open_commit_log,             { desc = &quot;Show commit details&quot; } },
      { &quot;n&quot;, &quot;X&quot;,             actions.restore_entry,               { desc = &quot;Restore file to the state from the selected entry&quot; } },
      { &quot;n&quot;, &quot;zo&quot;,            actions.open_fold,                   { desc = &quot;Expand fold&quot; } },
      { &quot;n&quot;, &quot;zc&quot;,            actions.close_fold,                  { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;h&quot;,             actions.close_fold,                  { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;za&quot;,            actions.toggle_fold,                 { desc = &quot;Toggle fold&quot; } },
      { &quot;n&quot;, &quot;zR&quot;,            actions.open_all_folds,              { desc = &quot;Expand all folds&quot; } },
      { &quot;n&quot;, &quot;zM&quot;,            actions.close_all_folds,             { desc = &quot;Collapse all folds&quot; } },
      { &quot;n&quot;, &quot;j&quot;,             actions.next_entry,                  { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;down&amp;gt;&quot;,        actions.next_entry,                  { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;k&quot;,             actions.prev_entry,                  { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;up&amp;gt;&quot;,          actions.prev_entry,                  { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;cr&amp;gt;&quot;,          actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;o&quot;,             actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;l&quot;,             actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;2-LeftMouse&amp;gt;&quot;, actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-b&amp;gt;&quot;,         actions.scroll_view(-0.25),          { desc = &quot;Scroll the view up&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-f&amp;gt;&quot;,         actions.scroll_view(0.25),           { desc = &quot;Scroll the view down&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,         actions.select_next_entry,           { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,       actions.select_prev_entry,           { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,            actions.select_first_entry,          { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,            actions.select_last_entry,           { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,            actions.goto_file_edit,              { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,    actions.goto_file_split,             { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,       actions.goto_file_tab,               { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,     actions.focus_files,                 { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,     actions.toggle_files,                { desc = &quot;Toggle the file panel&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,        actions.cycle_layout,                { desc = &quot;Cycle available layouts&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,            actions.help(&quot;file_history_panel&quot;),  { desc = &quot;Open the help panel&quot; } },
    },
    option_panel = {
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;, actions.select_entry,          { desc = &quot;Change the current option&quot; } },
      { &quot;n&quot;, &quot;q&quot;,     actions.close,                 { desc = &quot;Close the panel&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,    actions.help(&quot;option_panel&quot;),  { desc = &quot;Open the help panel&quot; } },
    },
    help_panel = {
      { &quot;n&quot;, &quot;q&quot;,     actions.close,  { desc = &quot;Close help menu&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;esc&amp;gt;&quot;, actions.close,  { desc = &quot;Close help menu&quot; } },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h3&gt;Hooks&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; table allows you to define callbacks for various events emitted from Diffview. The available hooks are documented in detail in &lt;code&gt;:h diffview-config-hooks&lt;/code&gt;. The hook events are also available as User autocommands. See &lt;code&gt;:h diffview-user-autocmds&lt;/code&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hooks = {
  diff_buf_read = function(bufnr)
    -- Change local options in diff buffers
    vim.opt_local.wrap = false
    vim.opt_local.list = false
    vim.opt_local.colorcolumn = { 80 }
  end,
  view_opened = function(view)
    print(
      (&quot;A new %s was opened on tab page %d!&quot;)
      :format(view.class:name(), view.tabpage)
    )
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Keymaps&lt;/h3&gt; 
&lt;p&gt;The keymaps config is structured as a table with sub-tables for various different contexts where mappings can be declared. In these sub-tables key-value pairs are treated as the &lt;code&gt;{lhs}&lt;/code&gt; and &lt;code&gt;{rhs}&lt;/code&gt; of a normal mode mapping. These mappings all use the &lt;code&gt;:map-arguments&lt;/code&gt; &lt;code&gt;silent&lt;/code&gt;, &lt;code&gt;nowait&lt;/code&gt;, and &lt;code&gt;noremap&lt;/code&gt;. The implementation uses &lt;code&gt;vim.keymap.set()&lt;/code&gt;, so the &lt;code&gt;{rhs}&lt;/code&gt; can be either a vim command in the form of a string, or it can be a lua function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  view = {
    -- Vim command:
    [&quot;a&quot;] = &quot;&amp;lt;Cmd&amp;gt;echom &#39;foo&#39;&amp;lt;CR&amp;gt;&quot;,
    -- Lua function:
    [&quot;b&quot;] = function() print(&quot;bar&quot;) end,
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more control (i.e. mappings for other modes), you can also define index values as list-like tables containing the arguments for &lt;code&gt;vim.keymap.set()&lt;/code&gt;. This way you can also change all the &lt;code&gt;:map-arguments&lt;/code&gt; with the only exception being the &lt;code&gt;buffer&lt;/code&gt; field, as this will be overridden with the target buffer number:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;view = {
  -- Normal and visual mode mapping to vim command:
  { { &quot;n&quot;, &quot;v&quot; }, &quot;&amp;lt;leader&amp;gt;a&quot;, &quot;&amp;lt;Cmd&amp;gt;echom &#39;foo&#39;&amp;lt;CR&amp;gt;&quot;, { silent = true } },
  -- Visual mode mapping to lua function:
  { &quot;v&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;, function() print(&quot;bar&quot;) end, { nowait = true } },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To disable any single mapping without disabling them all, set its &lt;code&gt;{rhs}&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  view = {
    -- Disable the default normal mode mapping for `&amp;lt;tab&amp;gt;`:
    [&quot;&amp;lt;tab&amp;gt;&quot;] = false,
    -- Disable the default visual mode mapping for `gf`:
    { &quot;x&quot;, &quot;gf&quot;, false },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Most of the mapped file panel actions also work from the view if they are added to the view maps (and vice versa). The exception is for actions that only really make sense specifically in the file panel, such as &lt;code&gt;next_entry&lt;/code&gt;, &lt;code&gt;prev_entry&lt;/code&gt;. Actions such as &lt;code&gt;toggle_stage_entry&lt;/code&gt; and &lt;code&gt;restore_entry&lt;/code&gt; work just fine from the view. When invoked from the view, these will target the file currently open in the view rather than the file under the cursor in the file panel.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;For more details on how to set mappings for other modes, actions, and more see:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-config-keymaps&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-actions&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Restoring Files&lt;/h2&gt; 
&lt;p&gt;If the right side of the diff is showing the local state of a file, you can restore the file to the state from the left side of the diff (key binding &lt;code&gt;X&lt;/code&gt; from the file panel by default). The current state of the file is stored in the git object database, and a command is echoed that shows how to undo the change.&lt;/p&gt; 
&lt;h2&gt;Tips and FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hide untracked files:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -uno&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Exclude certain paths:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -- :!exclude/this :!and/this&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Run as if git was started in a specific directory:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -C/foo/bar/baz&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Diff the index against a git rev:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen HEAD~2 --cached&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Defaults to &lt;code&gt;HEAD&lt;/code&gt; if no rev is given.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q: How do I get the diagonal lines in place of deleted lines in diff-mode?&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A: Change your &lt;code&gt;:h &#39;fillchars&#39;&lt;/code&gt;: 
    &lt;ul&gt; 
     &lt;li&gt;(vimscript): &lt;code&gt;set fillchars+=diff:╱&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;(Lua): &lt;code&gt;vim.opt.fillchars:append { diff = &quot;╱&quot; }&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Note: whether or not the diagonal lines will line up nicely will depend on your terminal emulator. The terminal used in the screenshots is Kitty.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q: How do I jump between hunks in the diff?&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A: Use &lt;code&gt;[c&lt;/code&gt; and &lt;code&gt;]c&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:h jumpto-diffs&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim: set tw=80 --&gt;</description>
    </item>
    
    <item>
      <title>mfussenegger/nvim-dap</title>
      <link>https://github.com/mfussenegger/nvim-dap</link>
      <description>&lt;p&gt;Debug Adapter Protocol client implementation for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DAP (Debug Adapter Protocol)&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;nvim-dap&lt;/code&gt; is a Debug Adapter Protocol client implementation for &lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim&lt;/a&gt;. &lt;code&gt;nvim-dap&lt;/code&gt; allows you to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Launch an application to debug&lt;/li&gt; 
 &lt;li&gt;Attach to running applications and debug them&lt;/li&gt; 
 &lt;li&gt;Set breakpoints and step through code&lt;/li&gt; 
 &lt;li&gt;Inspect the state of the application&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/38700/124292938-669a7100-db56-11eb-93b8-77b66994fc8a.gif&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/mfussenegger/nvim-dap&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/mfussenegger/nvim-dap?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install nvim-dap like any other Neovim plugin: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git clone https://github.com/mfussenegger/nvim-dap.git ~/.config/nvim/pack/plugins/start/nvim-dap&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Or with &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Or with &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Generate the documentation for nvim-dap using &lt;code&gt;:helptags ALL&lt;/code&gt; or &lt;code&gt;:helptags &amp;lt;PATH-TO-PLUGIN/doc/&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported Neovim versions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Latest nightly&lt;/li&gt; 
 &lt;li&gt;0.10.x (Recommended)&lt;/li&gt; 
 &lt;li&gt;0.9.5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You&#39;ll need to install and configure a debug adapter per language. See&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&quot;&gt;:help dap.txt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;the &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&quot;&gt;Debug-Adapter Installation&lt;/a&gt; wiki&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:help dap-adapter&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:help dap-configuration&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;A typical debug flow consists of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Setting breakpoints via &lt;code&gt;:lua require&#39;dap&#39;.toggle_breakpoint()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Launching debug sessions and resuming execution via &lt;code&gt;:lua require&#39;dap&#39;.continue()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Stepping through code via &lt;code&gt;:lua require&#39;dap&#39;.step_over()&lt;/code&gt; and &lt;code&gt;:lua require&#39;dap&#39;.step_into()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Inspecting the state via the built-in REPL: &lt;code&gt;:lua require&#39;dap&#39;.repl.open()&lt;/code&gt; or using the widget UI (&lt;code&gt;:help dap-widgets&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&quot;&gt;:help dap.txt&lt;/a&gt;, &lt;code&gt;:help dap-mapping&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported languages&lt;/h2&gt; 
&lt;p&gt;In theory all of the languages for which a debug adapter exists should be supported.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/&quot;&gt;Available debug adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&quot;&gt;nvim-dap Debug-Adapter Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The Wiki is community maintained. If you got an adapter working that isn&#39;t listed yet, please extend the Wiki.&lt;/p&gt; 
&lt;p&gt;Some debug adapters have &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap/wiki/Extensions#language-specific-extensions&quot;&gt;language specific extensions&lt;/a&gt;. Using them over a manual configuration is recommended, as they&#39;re usually better maintained.&lt;/p&gt; 
&lt;p&gt;If the instructions in the wiki for a debug adapter are not working, consider that debug adapters may have made changes since the instructions were written. You may want to read the release notes of the debug adapters or try with an older version. Please update the wiki if you discover outdated examples.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Have a basic debugger in Neovim.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Extensibility and double as a DAP client library. This allows other plugins to extend the debugging experience. Either by improving the UI or by making it easier to debug parts of an application.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Examples of UI/UX extensions are &lt;a href=&quot;https://github.com/theHamsta/nvim-dap-virtual-text&quot;&gt;nvim-dap-virtual-text&lt;/a&gt; and &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Examples for language specific extensions include &lt;a href=&quot;https://github.com/mfussenegger/nvim-jdtls&quot;&gt;nvim-jdtls&lt;/a&gt; and &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap-python&quot;&gt;nvim-dap-python&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Extensions&lt;/h2&gt; 
&lt;p&gt;All known extensions are listed in the &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap/wiki/Extensions&quot;&gt;Wiki&lt;/a&gt;. The wiki is community maintained. Please add new extensions if you built one or if you discovered one that&#39;s not listed.&lt;/p&gt; 
&lt;h2&gt;Non-Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Debug adapter installations are out of scope. It&#39;s not the business of an editor plugin to re-invent a package manager. Use your system package manager. Use Nix. Use Ansible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nvim-lua/wishlist/issues/37#issuecomment-1023363686&quot;&gt;nvim-dapconfig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Vim support. It&#39;s not going to happen. Use &lt;a href=&quot;https://github.com/puremourning/vimspector&quot;&gt;vimspector&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/puremourning/vimspector&quot;&gt;vimspector&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Give concrete feedback about usability.&lt;/li&gt; 
 &lt;li&gt;Triage issues. Many of the problems people encounter are debug adapter specific.&lt;/li&gt; 
 &lt;li&gt;Improve upstream debug adapter documentation to make them more editor agnostic.&lt;/li&gt; 
 &lt;li&gt;Improve the Wiki. But please refrain from turning it into comprehensive debug adapter documentation that should go upstream.&lt;/li&gt; 
 &lt;li&gt;Write extensions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Before making direct code contributions, please create a discussion or issue to clarify whether the change is in scope of the nvim-dap core.&lt;/p&gt; 
&lt;p&gt;Please keep pull requests focused and don&#39;t change multiple things at the same time.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; launch debug adapter&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; attach to debug adapter&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; toggle breakpoints&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; breakpoints with conditions&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; logpoints&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; set exception breakpoints&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; step over, step into, step out&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; step back, reverse continue&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Goto&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; restart&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; stop&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; pause&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; evaluate expressions&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; REPL (incl. commands to show threads, frames and scopes)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>overextended/ox_inventory</title>
      <link>https://github.com/overextended/ox_inventory</link>
      <description>&lt;p&gt;Slot-based inventory with metadata.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ox_inventory&lt;/h1&gt; 
&lt;p&gt;A complete inventory system for FiveM, implementing items, weapons, shops, and more without any strict framework dependency.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/overextended/ox_inventory/total?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/overextended/ox_inventory/latest/total?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/overextended/ox_inventory?logo=github&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/overextended/ox_inventory?logo=github&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://overextended.dev/ox_inventory&quot;&gt;https://overextended.dev/ox_inventory&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;💾 Download&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/overextended/ox_inventory/releases/latest/download/ox_inventory.zip&quot;&gt;https://github.com/overextended/ox_inventory/releases/latest/download/ox_inventory.zip&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Supported frameworks&lt;/h2&gt; 
&lt;p&gt;We do not guarantee compatibility or support for third-party resources.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/overextended/ox_core&quot;&gt;ox_core&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/esx-framework/esx_core&quot;&gt;esx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Qbox-project/qbx_core&quot;&gt;qbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ND-Framework/ND_Core&quot;&gt;nd_core&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Server-side security ensures interactions with items, shops, and stashes are all validated.&lt;/li&gt; 
 &lt;li&gt;Logging for important events, such as purchases, item movement, and item creation or removal.&lt;/li&gt; 
 &lt;li&gt;Supports player-owned vehicles, licenses, and group systems implemented by frameworks.&lt;/li&gt; 
 &lt;li&gt;Fully synchronised, allowing multiple players to &lt;a href=&quot;https://user-images.githubusercontent.com/65407488/230926091-c0033732-d293-48c9-9d62-6f6ae0a8a488.mp4&quot;&gt;access the same inventory&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Items&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Inventory items are stored per-slot, with customisable metadata to support item uniqueness.&lt;/li&gt; 
 &lt;li&gt;Overrides default weapon-system with weapons as items.&lt;/li&gt; 
 &lt;li&gt;Weapon attachments and ammo system, including special ammo types.&lt;/li&gt; 
 &lt;li&gt;Durability, allowing items to be depleted or removed overtime.&lt;/li&gt; 
 &lt;li&gt;Internal item system provides secure and easy handling for item use effects.&lt;/li&gt; 
 &lt;li&gt;Compatibility with 3rd party framework item registration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Shops&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Restricted access based on groups and licenses.&lt;/li&gt; 
 &lt;li&gt;Support different currency for items (black money, poker chips, etc).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Stashes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Personal stashes, linking a stash with a specific identifier or creating per-player instances.&lt;/li&gt; 
 &lt;li&gt;Restricted access based on groups.&lt;/li&gt; 
 &lt;li&gt;Registration of new stashes from any resource.&lt;/li&gt; 
 &lt;li&gt;Containers allow access to stashes when using an item, like a paperbag or backpack.&lt;/li&gt; 
 &lt;li&gt;Access gloveboxes and trunks for any vehicle.&lt;/li&gt; 
 &lt;li&gt;Random item generation inside dumpsters and unowned vehicles.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright © 2024 Overextended &lt;a href=&quot;https://github.com/overextended&quot;&gt;https://github.com/overextended&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&quot;https://www.gnu.org/licenses/&quot;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ibhagwan/fzf-lua</title>
      <link>https://github.com/ibhagwan/fzf-lua</link>
      <description>&lt;p&gt;Improved fzf.vim written in lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;fzf &lt;span&gt;❤️&lt;/span&gt; lua&lt;/h1&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim-0.7-57A143?style=flat-square&amp;amp;logo=neovim&quot; alt=&quot;Neovim version&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#installation&quot;&gt;Installation&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#commands&quot;&gt;Commands&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&quot;&gt;Customization&lt;/a&gt; • &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/ibhagwan/fzf-lua/demo.gif&quot; alt=&quot;Demo&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;“because you can and you love fzf” - &lt;a href=&quot;https://github.com/junegunn&quot;&gt;@junegunn&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&quot;fzf changed my command life, it can change yours too, if you allow it&quot; - &lt;a href=&quot;https://github.com/ibhagwan&quot;&gt;@ibhagwan&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To quickly test this plugin without changing your configuration run (will run in its own sandbox with the default keybinds below):&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] it&#39;s good practice to first &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/scripts/mini.sh&quot;&gt;read the script&lt;/a&gt; before running &lt;code&gt;sh -c&lt;/code&gt; directly from the web&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sh -c &quot;$(curl -s https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/scripts/mini.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-\&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;grep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;live_grep&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;builtin commands&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F1&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;neovim help&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/ibhagwan/fzf-lua&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/ibhagwan/fzf-lua?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;ibhagwan/fzf-lua&quot;,
  -- optional for icon support
  dependencies = { &quot;nvim-tree/nvim-web-devicons&quot; },
  -- or if using mini.icons/mini.nvim
  -- dependencies = { &quot;echasnovski/mini.icons&quot; },
  opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Show dependencies&lt;/summary&gt; 
 &lt;h3&gt;Dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/releases&quot;&gt;&lt;code&gt;neovim&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.7.0&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.25&lt;/code&gt; or &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; binary installed&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; or &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Optional dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; - better &lt;code&gt;find&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; - better &lt;code&gt;grep&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt; - syntax highlighted previews when using fzf&#39;s native previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;delta&lt;/a&gt; - syntax highlighted git pager for git status previews&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; - for Debug Adapter Protocol (DAP) support&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; - for viewing treesitter context within the previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; or &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; - for rendering markdown files in the previewer&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Below are a few optional dependencies for viewing media files (which you need to configure in &lt;code&gt;previewer.builtin.extensions&lt;/code&gt;):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hpjansson/chafa&quot;&gt;chafa&lt;/a&gt; - terminal image previewer (recommended, supports most file formats)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/atanunq/viu&quot;&gt;viu&lt;/a&gt; - terminal image previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;ueberzugpp&lt;/a&gt; - terminal image previewer using X11/Wayland child windows, sixels, kitty and iterm2&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Windows Notes&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; is required for &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;git&lt;/a&gt; for Windows is required for &lt;code&gt;git&lt;/code&gt; (though installing &lt;code&gt;git-bash&lt;/code&gt;|&lt;code&gt;sh&lt;/code&gt; &lt;strong&gt;is not required&lt;/strong&gt;).&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Installation of dependencies (fzf, rg, fd, etc) is possible via &lt;a href=&quot;https://github.com/ScoopInstaller/Install&quot;&gt;scoop&lt;/a&gt;, &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; or &lt;a href=&quot;https://github.com/microsoft/winget-cli&quot;&gt;winget-cli&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Although almost everything works on Windows exactly as the *NIX/OSX check out the &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/README-Win.md&quot;&gt;Windows README&lt;/a&gt; for known issues and limitations.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Fzf-lua aims to be as plug and play as possible with sane defaults, you can run any fzf-lua command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files()
-- or using the `FzfLua` vim command:
:FzfLua files
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or with arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files({ cwd = &#39;~/.config&#39; })
-- or using the `FzfLua` vim command:
:FzfLua files cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Resume&lt;/h3&gt; 
&lt;p&gt;Resuming work from where you left off is as easy as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).resume()
-- or
:FzfLua resume
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, resuming work on a specific picker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files({ resume = true })
-- or
:FzfLua files resume=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] By default pressing esc or ctrl-c terminates the fzf process, as such resume is not perfect and is limited to resuming the picker/query and sometimes additional parameters such as regex in grep, etc, for a more complete resume use the &quot;hide&quot; profile, this will modify the esc bind to hide fzf-lua and keep the fzf process running in the background allowing &lt;code&gt;:FzfLua resume&lt;/code&gt; to restore the picker state entirely, including cursor position and selection. To configure hiding by default:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({
  &quot;hide&quot;,
  -- your other settings here 
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;LIST OF AVAILABLE COMMANDS BELOW&lt;/strong&gt; 👇&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Buffers and Files&lt;/summary&gt; 
 &lt;h3&gt;Buffers and Files&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; on a path&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oldfiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;opened files history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;blines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;treesitter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer treesitter symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tabs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open tabs&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;args&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;argument list&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Search&lt;/summary&gt; 
 &lt;h3&gt;Search&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search for a pattern with &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_last&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;run search again with the last pattern&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_project&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search all project lines (fzf.vim&#39;s &lt;code&gt;:Rg&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current buffer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current project&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep continue last search&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_glob&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live_grep with &lt;code&gt;rg --glob&lt;/code&gt; support&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;performant version of &lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tags&lt;/summary&gt; 
 &lt;h3&gt;Tags&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;btags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search buffer tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Git&lt;/summary&gt; 
 &lt;h3&gt;Git&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git ls-files&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_status&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_commits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (project)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_bcommits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_blame&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git blame (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_branches&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git branches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_stash&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git stash&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;LSP / Diagnostics&lt;/summary&gt; 
 &lt;h3&gt;LSP/Diagnostics&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_references&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;References&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_definitions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_declarations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Declarations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_typedefs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Type Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_implementations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Implementations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_live_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols (live query)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Incoming Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Outgoing Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_code_actions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Code Actions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_finder&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;All LSP locations, combined view&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Misc&lt;/summary&gt; 
 &lt;h3&gt;Misc&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;resume last command/query&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;builtin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;profiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua configuration profiles&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;helptags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;help tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;manpages&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;man pages&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;awesome_colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Awesome Neovim color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;highlights&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;highlight groups&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;command_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;command history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;search_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;marks&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:marks&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;jumps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:jumps&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;changes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:changes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;registers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:registers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tagstack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;autocmds&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:autocmd&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;nvim_options&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim options&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;keymaps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;key mappings&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;filetypes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;filetypes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;menus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;menus&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;spell_suggest&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;spelling suggestions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;packadd&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:packadd 
     &lt;package&gt;&lt;/package&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neovim API&lt;/summary&gt; 
 &lt;h3&gt;Neovim API&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;code&gt;:help vim.ui.select&lt;/code&gt; for more info&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;register_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;register fzf-lua as the UI interface for &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;deregister_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;de-register fzf-lua with &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;nvim-dap&lt;/summary&gt; 
 &lt;h3&gt;nvim-dap&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Requires &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run &lt;code&gt;nvim-dap&lt;/code&gt; builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_configurations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run debug configurations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_breakpoints&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,delete breakpoints&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_variables&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session variables&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_frames&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session jump to frame&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tmux&lt;/summary&gt; 
 &lt;h3&gt;tmux&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tmux_buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list tmux paste buffers&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Zoxide&lt;/summary&gt; 
 &lt;h3&gt;zoxide&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;zoxide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list recent directories&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Completion Functions&lt;/summary&gt; 
 &lt;h3&gt;Completion Functions&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_path&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete path under cursor (incl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_file&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete file under cursor (excl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_line&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (all open buffers)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_bline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (current buffer only)&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; to see detailed usage notes and a comprehensive list of yet more(!) available options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup{
  -- MISC GLOBAL SETUP OPTIONS, SEE BELOW
  -- fzf_bin = ...,
  winopts = { ...  },     -- UI Options
  keymap = { ...  },      -- Neovim keymaps / fzf binds
  actions = { ...  },     -- Fzf &quot;accept&quot; binds
  fzf_opts = { ...  },    -- Fzf CLI flags
  fzf_colors = { ...  },  -- Fzf `--color` specification
  hls = { ...  },         -- Highlights
  previewers = { ...  },  -- Previewers options
  -- SPECIFIC COMMAND/PICKER OPTIONS, SEE BELOW
  -- files = { ... },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;DEFAULT OPTIONS OF THE DIFFERENT CONFIG SECTIONS BELOW&lt;/strong&gt; 👇&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;globals&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- Use skim (or a speccific fzf binary/version) instead of fzf?
  -- fzf_bin = &#39;sk&#39;,
  -- Padding can help kitty term users with double-width icon rendering
  file_icon_padding = &#39;&#39;,
  -- Uncomment if your terminal/font does not support unicode character
  -- &#39;EN SPACE&#39; (U+2002), the below sets it to &#39;NBSP&#39; (U+00A0) instead
  -- nbsp = &#39;\xc2\xa0&#39;,
  -- Function override for opening the help window (default bound to `&amp;lt;F1&amp;gt;`)
  -- Override this function if you want to customize window config of the
  -- help window (location, width, border, etc.)
  help_open_win = vim.api.nvim_open_win,
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;winopts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;winopts = {
    -- split = &quot;belowright new&quot;,-- open in a split instead?
            -- &quot;belowright new&quot;  : split below
            -- &quot;aboveleft new&quot;   : split above
            -- &quot;belowright vnew&quot; : split right
            -- &quot;aboveleft vnew   : split left
    -- Only valid when using a float window
    -- (i.e. when &#39;split&#39; is not defined, default)
    height           = 0.85,            -- window height
    width            = 0.80,            -- window width
    row              = 0.35,            -- window row position (0=top, 1=bottom)
    col              = 0.50,            -- window col position (0=left, 1=right)
    -- border argument passthrough to nvim_open_win()
    border           = &quot;rounded&quot;,
    -- Backdrop opacity, 0 is fully opaque, 100 is fully transparent (i.e. disabled)
    backdrop         = 60,
    -- title         = &quot;Title&quot;,
    -- title_pos     = &quot;center&quot;,        -- &#39;left&#39;, &#39;center&#39; or &#39;right&#39;
    -- title_flags   = false,           -- uncomment to disable title flags
    fullscreen       = false,           -- start fullscreen?
    -- enable treesitter highlighting for the main fzf window will only have
    -- effect where grep like results are present, i.e. &quot;file:line:col:text&quot;
    -- due to highlight color collisions will also override `fzf_colors`
    -- set `fzf_colors=false` or `fzf_colors.hl=...` to override
    treesitter       = {
      enabled    = true,
      fzf_colors = { [&quot;hl&quot;] = &quot;-1:reverse&quot;, [&quot;hl+&quot;] = &quot;-1:reverse&quot; }
    },
    preview = {
      -- default     = &#39;bat&#39;,           -- override the default previewer?
                                        -- default uses the &#39;builtin&#39; previewer
      border         = &quot;rounded&quot;,       -- preview border: accepts both `nvim_open_win`
                                        -- and fzf values (e.g. &quot;border-top&quot;, &quot;none&quot;)
                                        -- native fzf previewers (bat/cat/git/etc)
                                        -- can also be set to `fun(winopts, metadata)`
      wrap           = false,           -- preview line wrap (fzf&#39;s &#39;wrap|nowrap&#39;)
      hidden         = false,           -- start preview hidden
      vertical       = &quot;down:45%&quot;,      -- up|down:size
      horizontal     = &quot;right:60%&quot;,     -- right|left:size
      layout         = &quot;flex&quot;,          -- horizontal|vertical|flex
      flip_columns   = 100,             -- #cols to switch to horizontal on flex
      -- Only used with the builtin previewer:
      title          = true,            -- preview border title (file/buf)?
      title_pos      = &quot;center&quot;,        -- left|center|right, title alignment
      scrollbar      = &quot;float&quot;,         -- `false` or string:&#39;float|border&#39;
                                        -- float:  in-window floating border
                                        -- border: in-border &quot;block&quot; marker
      scrolloff      = -1,              -- float scrollbar offset from right
                                        -- applies only when scrollbar = &#39;float&#39;
      delay          = 20,              -- delay(ms) displaying the preview
                                        -- prevents lag on fast scrolling
      winopts = {                       -- builtin previewer window options
        number            = true,
        relativenumber    = false,
        cursorline        = true,
        cursorlineopt     = &quot;both&quot;,
        cursorcolumn      = false,
        signcolumn        = &quot;no&quot;,
        list              = false,
        foldenable        = false,
        foldmethod        = &quot;manual&quot;,
      },
    },
    on_create = function()
      -- called once upon creation of the fzf main window
      -- can be used to add custom fzf-lua mappings, e.g:
      --   vim.keymap.set(&quot;t&quot;, &quot;&amp;lt;C-j&amp;gt;&quot;, &quot;&amp;lt;Down&amp;gt;&quot;, { silent = true, buffer = true })
    end,
    -- called once _after_ the fzf interface is closed
    -- on_close = function() ... end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;keymap&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;keymap = {
    -- Below are the default binds, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    builtin = {
      -- neovim `:tmap` mappings for the fzf win
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;&amp;lt;M-Esc&amp;gt;&quot;]     = &quot;hide&quot;,     -- hide fzf-lua, `:FzfLua resume` to continue
      [&quot;&amp;lt;F1&amp;gt;&quot;]        = &quot;toggle-help&quot;,
      [&quot;&amp;lt;F2&amp;gt;&quot;]        = &quot;toggle-fullscreen&quot;,
      -- Only valid with the &#39;builtin&#39; previewer
      [&quot;&amp;lt;F3&amp;gt;&quot;]        = &quot;toggle-preview-wrap&quot;,
      [&quot;&amp;lt;F4&amp;gt;&quot;]        = &quot;toggle-preview&quot;,
      -- Rotate preview clockwise/counter-clockwise
      [&quot;&amp;lt;F5&amp;gt;&quot;]        = &quot;toggle-preview-ccw&quot;,
      [&quot;&amp;lt;F6&amp;gt;&quot;]        = &quot;toggle-preview-cw&quot;,
      -- `ts-ctx` binds require `nvim-treesitter-context`
      [&quot;&amp;lt;F7&amp;gt;&quot;]        = &quot;toggle-preview-ts-ctx&quot;,
      [&quot;&amp;lt;F8&amp;gt;&quot;]        = &quot;preview-ts-ctx-dec&quot;,
      [&quot;&amp;lt;F9&amp;gt;&quot;]        = &quot;preview-ts-ctx-inc&quot;,
      [&quot;&amp;lt;S-Left&amp;gt;&quot;]    = &quot;preview-reset&quot;,
      [&quot;&amp;lt;S-down&amp;gt;&quot;]    = &quot;preview-page-down&quot;,
      [&quot;&amp;lt;S-up&amp;gt;&quot;]      = &quot;preview-page-up&quot;,
      [&quot;&amp;lt;M-S-down&amp;gt;&quot;]  = &quot;preview-down&quot;,
      [&quot;&amp;lt;M-S-up&amp;gt;&quot;]    = &quot;preview-up&quot;,
    },
    fzf = {
      -- fzf &#39;--bind=&#39; options
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;ctrl-z&quot;]      = &quot;abort&quot;,
      [&quot;ctrl-u&quot;]      = &quot;unix-line-discard&quot;,
      [&quot;ctrl-f&quot;]      = &quot;half-page-down&quot;,
      [&quot;ctrl-b&quot;]      = &quot;half-page-up&quot;,
      [&quot;ctrl-a&quot;]      = &quot;beginning-of-line&quot;,
      [&quot;ctrl-e&quot;]      = &quot;end-of-line&quot;,
      [&quot;alt-a&quot;]       = &quot;toggle-all&quot;,
      [&quot;alt-g&quot;]       = &quot;first&quot;,
      [&quot;alt-G&quot;]       = &quot;last&quot;,
      -- Only valid with fzf previewers (bat/cat/git/etc)
      [&quot;f3&quot;]          = &quot;toggle-preview-wrap&quot;,
      [&quot;f4&quot;]          = &quot;toggle-preview&quot;,
      [&quot;shift-down&quot;]  = &quot;preview-page-down&quot;,
      [&quot;shift-up&quot;]    = &quot;preview-page-up&quot;,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;actions&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local actions = require(&quot;fzf-lua&quot;).actions
actions = {
    -- Below are the default actions, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    files = {
      -- true,        -- uncomment to inherit all the below in your custom config
      -- Pickers inheriting these actions:
      --   files, git_files, git_status, grep, lsp, oldfiles, quickfix, loclist,
      --   tags, btags, args, buffers, tabs, lines, blines
      -- `file_edit_or_qf` opens a single selection or sends multiple selection to quickfix
      -- replace `enter` with `file_edit` to open all files/bufs whether single or multiple
      -- replace `enter` with `file_switch_or_edit` to attempt a switch in current tab first
      [&quot;enter&quot;]       = actions.file_edit_or_qf,
      [&quot;ctrl-s&quot;]      = actions.file_split,
      [&quot;ctrl-v&quot;]      = actions.file_vsplit,
      [&quot;ctrl-t&quot;]      = actions.file_tabedit,
      [&quot;alt-q&quot;]       = actions.file_sel_to_qf,
      [&quot;alt-Q&quot;]       = actions.file_sel_to_ll,
      [&quot;alt-i&quot;]       = actions.toggle_ignore,
      [&quot;alt-h&quot;]       = actions.toggle_hidden,
      [&quot;alt-f&quot;]       = actions.toggle_follow,
    },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_opts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf_opts = {
    -- options are sent as `&amp;lt;left&amp;gt;=&amp;lt;right&amp;gt;`
    -- set to `false` to remove a flag
    -- set to `true` for a no-value flag
    -- for raw args use `fzf_args` instead
    [&quot;--ansi&quot;]           = true,
    [&quot;--info&quot;]           = &quot;inline-right&quot;, -- fzf &amp;lt; v0.42 = &quot;inline&quot;
    [&quot;--height&quot;]         = &quot;100%&quot;,
    [&quot;--layout&quot;]         = &quot;reverse&quot;,
    [&quot;--border&quot;]         = &quot;none&quot;,
    [&quot;--highlight-line&quot;] = true,           -- fzf &amp;gt;= v0.53
  }

-- Only used when fzf_bin = &quot;fzf-tmux&quot;, by default opens as a
-- popup 80% width, 80% height (note `-p` requires tmux &amp;gt; 3.2)
-- and removes the sides margin added by `fzf-tmux` (fzf#3162)
-- for more options run `fzf-tmux --help`
-- NOTE: since fzf v0.53 / sk v0.15 it is recommended to use
-- native tmux integration by adding the below to `fzf_opts`
-- fzf_opts = { [&quot;--tmux&quot;] = &quot;center,80%,60%&quot; }
fzf_tmux_opts = { [&quot;-p&quot;] = &quot;80%,80%&quot;, [&quot;--margin&quot;] = &quot;0,0&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_colors&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#fzf-colors&quot;&gt;Fzf Colors&lt;/a&gt; section for more info.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- 
  -- Set fzf&#39;s terminal colorscheme (optional)
  --
  -- Set to `true` to automatically generate an fzf&#39;s colorscheme from
  -- Neovim&#39;s current colorscheme:
  -- fzf_colors       = true,
  -- 
  -- Building a custom colorscheme, has the below specifications:
  -- If rhs is of type &quot;string&quot; rhs will be passed raw, e.g.:
  --   `[&quot;fg&quot;] = &quot;underline&quot;` will be translated to `--color fg:underline`
  -- If rhs is of type &quot;table&quot;, the following convention is used:
  --   [1] &quot;what&quot; field to extract from the hlgroup, i.e &quot;fg&quot;, &quot;bg&quot;, etc.
  --   [2] Neovim highlight group(s), can be either &quot;string&quot; or &quot;table&quot;
  --       when type is &quot;table&quot; the first existing highlight group is used
  --   [3+] any additional fields are passed raw to fzf&#39;s command line args
  -- Example of a &quot;fully loaded&quot; color option:
  --   `[&quot;fg&quot;] = { &quot;fg&quot;, { &quot;NonExistentHl&quot;, &quot;Comment&quot; }, &quot;underline&quot;, &quot;bold&quot; }`
  -- Assuming `Comment.fg=#010101` the resulting fzf command line will be:
  --   `--color fg:#010101:underline:bold`
  -- NOTE: to pass raw arguments `fzf_opts[&quot;--color&quot;]` or `fzf_args`
  -- NOTE: below is an example, not the defaults:
  fzf_colors = {
      true,   -- inherit fzf colors that aren&#39;t specified below from
              -- the auto-generated theme similar to `fzf_colors=true`
      [&quot;fg&quot;]          = { &quot;fg&quot;, &quot;CursorLine&quot; },
      [&quot;bg&quot;]          = { &quot;bg&quot;, &quot;Normal&quot; },
      [&quot;hl&quot;]          = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;fg+&quot;]         = { &quot;fg&quot;, &quot;Normal&quot;, &quot;underline&quot; },
      [&quot;bg+&quot;]         = { &quot;bg&quot;, { &quot;CursorLine&quot;, &quot;Normal&quot; } },
      [&quot;hl+&quot;]         = { &quot;fg&quot;, &quot;Statement&quot; },
      [&quot;info&quot;]        = { &quot;fg&quot;, &quot;PreProc&quot; },
      [&quot;prompt&quot;]      = { &quot;fg&quot;, &quot;Conditional&quot; },
      [&quot;pointer&quot;]     = { &quot;fg&quot;, &quot;Exception&quot; },
      [&quot;marker&quot;]      = { &quot;fg&quot;, &quot;Keyword&quot; },
      [&quot;spinner&quot;]     = { &quot;fg&quot;, &quot;Label&quot; },
      [&quot;header&quot;]      = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;gutter&quot;]      = &quot;-1&quot;,
  },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;hls&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#highlights&quot;&gt;highlights&lt;/a&gt; section below for all available highlight groups.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hls = {
    normal = &quot;Normal&quot;          -- highlight group for normal fg/bg
    preview_normal = &quot;Normal&quot;  -- highlight group for preview fg/bg
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;previewers&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;previewers = {
    cat = {
      cmd             = &quot;cat&quot;,
      args            = &quot;-n&quot;,
    },
    bat = {
      cmd             = &quot;bat&quot;,
      args            = &quot;--color=always --style=numbers,changes&quot;,
    },
    head = {
      cmd             = &quot;head&quot;,
      args            = nil,
    },
    git_diff = {
      -- if required, use `{file}` for argument positioning
      -- e.g. `cmd_modified = &quot;git diff --color HEAD {file} | cut -c -30&quot;`
      cmd_deleted     = &quot;git diff --color HEAD --&quot;,
      cmd_modified    = &quot;git diff --color HEAD&quot;,
      cmd_untracked   = &quot;git diff --color --no-index /dev/null&quot;,
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;git.status.preview_pager&#39;
    },
    man = {
      -- NOTE: remove the `-c` flag when using man-db
      -- replace with `man -P cat %s | col -bx` on OSX
      cmd             = &quot;man -c %s | col -bx&quot;,
    },
    builtin = {
      syntax          = true,         -- preview syntax highlight?
      syntax_limit_l  = 0,            -- syntax limit (lines), 0=nolimit
      syntax_limit_b  = 1024*1024,    -- syntax limit (bytes), 0=nolimit
      limit_b         = 1024*1024*10, -- preview limit (bytes), 0=nolimit
      -- previewer treesitter options:
      -- enable specific filetypes with: `{ enabled = { &quot;lua&quot; } }
      -- exclude specific filetypes with: `{ disabled = { &quot;lua&quot; } }
      -- disable `nvim-treesitter-context` with `context = false`
      -- disable fully with: `treesitter = false` or `{ enabled = false }`
      treesitter      = {
        enabled = true,
        disabled = {},
        -- nvim-treesitter-context config options
        context = { max_lines = 1, trim_scope = &quot;inner&quot; }
      },
      -- By default, the main window dimensions are calculated as if the
      -- preview is visible, when hidden the main window will extend to
      -- full size. Set the below to &quot;extend&quot; to prevent the main window
      -- from being modified when toggling the preview.
      toggle_behavior = &quot;default&quot;,
      -- Title transform function, by default only displays the tail
      -- title_fnamemodify = function(s) vim.fn.fnamemodify(s, &quot;:t&quot;) end,
      -- preview extensions using a custom shell command:
      -- for example, use `viu` for image previews
      -- will do nothing if `viu` isn&#39;t executable
      extensions      = {
        -- neovim terminal only supports `viu` block output
        [&quot;png&quot;]       = { &quot;viu&quot;, &quot;-b&quot; },
        -- by default the filename is added as last argument
        -- if required, use `{file}` for argument positioning
        [&quot;svg&quot;]       = { &quot;chafa&quot;, &quot;{file}&quot; },
        [&quot;jpg&quot;]       = { &quot;ueberzug&quot; },
      },
      -- if using `ueberzug` in the above extensions map
      -- set the default image scaler, possible scalers:
      --   false (none), &quot;crop&quot;, &quot;distort&quot;, &quot;fit_contain&quot;,
      --   &quot;contain&quot;, &quot;forced_cover&quot;, &quot;cover&quot;
      -- https://github.com/seebye/ueberzug
      ueberzug_scaler = &quot;cover&quot;,
      -- Custom filetype autocmds aren&#39;t triggered on
      -- the preview buffer, define them here instead
      -- ext_ft_override = { [&quot;ksql&quot;] = &quot;sql&quot;, ... },
      -- render_markdown.nvim integration, enabled by default for markdown
      render_markdown = { enabled = true, filetypes = { [&quot;markdown&quot;] = true } },
    },
    -- Code Action previewers, default is &quot;codeaction&quot; (set via `lsp.code_actions.previewer`)
    -- &quot;codeaction_native&quot; uses fzf&#39;s native previewer, recommended when combined with git-delta
    codeaction = {
      -- options for vim.diff(): https://neovim.io/doc/user/lua.html#vim.diff()
      diff_opts = { ctxlen = 3 },
    },
    codeaction_native = {
      diff_opts = { ctxlen = 3 },
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;lsp.code_actions.preview_pager&#39;
      -- recommended styling for delta
      --pager = [[delta --width=$COLUMNS --hunk-header-style=&quot;omit&quot; --file-style=&quot;omit&quot;]],
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;picker options&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- use `defaults` (table or function) if you wish to set &quot;global-picker&quot; defaults
  -- for example, using &quot;mini.icons&quot; globally and open the quickfix list at the top
  --   defaults = {
  --     file_icons   = &quot;mini&quot;,
  --     copen        = &quot;topleft copen&quot;,
  --   },
  files = {
    -- previewer      = &quot;bat&quot;,          -- uncomment to override previewer
                                        -- (name from &#39;previewers&#39; table)
                                        -- set to &#39;false&#39; to disable
    prompt            = &#39;Files❯ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- path_shorten   = 1,              -- &#39;true&#39; or number, shorten path?
    -- Uncomment for custom vscode-like formatter where the filename is first:
    -- e.g. &quot;fzf-lua/previewer/fzf.lua&quot; =&amp;gt; &quot;fzf.lua previewer/fzf-lua&quot;
    -- formatter      = &quot;path.filename_first&quot;,
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `fd`:`rg`:`find`
    -- default options are controlled by &#39;fd|rg|find|_opts&#39;
    -- cmd            = &quot;rg --files&quot;,
    find_opts         = [[-type f \! -path &#39;*/.git/*&#39;]],
    rg_opts           = [[--color=never --hidden --files -g &quot;!.git&quot;]],
    fd_opts           = [[--color=never --hidden --type f --type l --exclude .git]],
    dir_opts          = [[/s/b/a:-d]],
    -- by default, cwd appears in the header only if {opts} contain a cwd
    -- parameter to a different folder than the current working directory
    -- uncomment if you wish to force display of the cwd as part of the
    -- query prompt string (fzf.vim style), header line or both
    -- cwd_header = true,
    cwd_prompt             = true,
    cwd_prompt_shorten_len = 32,        -- shorten prompt beyond this length
    cwd_prompt_shorten_val = 1,         -- shortened path parts length
    toggle_ignore_flag = &quot;--no-ignore&quot;, -- flag toggled in `actions.toggle_ignore`
    toggle_hidden_flag = &quot;--hidden&quot;,    -- flag toggled in `actions.toggle_hidden`
    toggle_follow_flag = &quot;-L&quot;,          -- flag toggled in `actions.toggle_follow`
    hidden             = true,          -- enable hidden files by default
    follow             = false,         -- do not follow symlinks by default
    no_ignore          = false,         -- respect &quot;.gitignore&quot;  by default
    actions = {
      -- inherits from &#39;actions.files&#39;, here we can override
      -- or set bind to &#39;false&#39; to disable a default action
      -- uncomment to override `actions.file_edit_or_qf`
      --   [&quot;enter&quot;]     = actions.file_edit,
      -- custom actions are available too
      --   [&quot;ctrl-y&quot;]    = function(selected) print(selected[1]) end,
    }
  },
  git = {
    files = {
      prompt        = &#39;GitFiles❯ &#39;,
      cmd           = &#39;git ls-files --exclude-standard&#39;,
      multiprocess  = true,           -- run command in a separate process
      git_icons     = true,           -- show git icons?
      file_icons    = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
      color_icons   = true,           -- colorize file|git icons
      -- force display the cwd header line regardless of your current working
      -- directory can also be used to hide the header when not wanted
      -- cwd_header = true
    },
    status = {
      prompt        = &#39;GitStatus❯ &#39;,
      cmd           = &quot;git -c color.status=false --no-optional-locks status --porcelain=v1 -u&quot;,
      multiprocess  = true,           -- run command in a separate process
      file_icons    = true,
      color_icons   = true,
      previewer     = &quot;git_diff&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        -- actions inherit from &#39;actions.files&#39; and merge
        [&quot;right&quot;]  = { fn = actions.git_unstage, reload = true },
        [&quot;left&quot;]   = { fn = actions.git_stage, reload = true },
        [&quot;ctrl-x&quot;] = { fn = actions.git_reset, reload = true },
      },
      -- If you wish to use a single stage|unstage toggle instead
      -- using &#39;ctrl-s&#39; modify the &#39;actions&#39; table as shown below
      -- actions = {
      --   [&quot;right&quot;]   = false,
      --   [&quot;left&quot;]    = false,
      --   [&quot;ctrl-x&quot;]  = { fn = actions.git_reset, reload = true },
      --   [&quot;ctrl-s&quot;]  = { fn = actions.git_stage_unstage, reload = true },
      -- },
    },
    commits = {
      prompt        = &#39;Commits❯ &#39;,
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot;]],
      preview       = &quot;git show --color {1}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_checkout,
        -- remove `exec_silent` or set to `false` to exit after yank
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    bcommits = {
      prompt        = &#39;BCommits❯ &#39;,
      -- default preview shows a git diff vs the previous commit
      -- if you prefer to see the entire commit you can use:
      --   git show --color {1} --rotate-to={file}
      --   {1}    : commit SHA (fzf field index expression)
      --   {file} : filepath placement within the commands
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_buf_edit,
        [&quot;ctrl-s&quot;]  = actions.git_buf_split,
        [&quot;ctrl-v&quot;]  = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;]  = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    blame = {
      prompt        = &quot;Blame&amp;gt; &quot;,
      cmd           = [[git blame --color-lines {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]  = actions.git_goto_line,
        [&quot;ctrl-s&quot;] = actions.git_buf_split,
        [&quot;ctrl-v&quot;] = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;] = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;] = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    branches = {
      prompt   = &#39;Branches❯ &#39;,
      cmd      = &quot;git branch --all --color&quot;,
      preview  = &quot;git log --graph --pretty=oneline --abbrev-commit --color {1}&quot;,
      remotes  = &quot;local&quot;, -- &quot;detach|local&quot;, switch behavior for remotes
      actions  = {
        [&quot;enter&quot;]   = actions.git_switch,
        [&quot;ctrl-x&quot;]  = { fn = actions.git_branch_del, reload = true },
        [&quot;ctrl-a&quot;]  = { fn = actions.git_branch_add, field_index = &quot;{q}&quot;, reload = true },
      },
      -- If you wish to add branch and switch immediately
      -- cmd_add  = { &quot;git&quot;, &quot;checkout&quot;, &quot;-b&quot; },
      cmd_add  = { &quot;git&quot;, &quot;branch&quot; },
      -- If you wish to delete unmerged branches add &quot;--force&quot;
      -- cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot;, &quot;--force&quot; },
      cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot; },
    },
    tags = {
      prompt   = &quot;Tags&amp;gt; &quot;,
      cmd      = [[git for-each-ref --color --sort=&quot;-taggerdate&quot; --format ]]
          .. [[&quot;%(color:yellow)%(refname:short)%(color:reset) ]]
          .. [[%(color:green)(%(taggerdate:relative))%(color:reset)]]
          .. [[ %(subject) %(color:blue)%(taggername)%(color:reset)&quot; refs/tags]],
      preview  = [[git log --graph --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {1}]],
      actions  = { [&quot;enter&quot;] = actions.git_checkout },
    },
    stash = {
      prompt          = &#39;Stash&amp;gt; &#39;,
      cmd             = &quot;git --no-pager stash list&quot;,
      preview         = &quot;git --no-pager stash show --patch --color {1}&quot;,
      actions = {
        [&quot;enter&quot;]     = actions.git_stash_apply,
        [&quot;ctrl-x&quot;]    = { fn = actions.git_stash_drop, reload = true },
      },
    },
    icons = {
      [&quot;M&quot;]           = { icon = &quot;M&quot;, color = &quot;yellow&quot; },
      [&quot;D&quot;]           = { icon = &quot;D&quot;, color = &quot;red&quot; },
      [&quot;A&quot;]           = { icon = &quot;A&quot;, color = &quot;green&quot; },
      [&quot;R&quot;]           = { icon = &quot;R&quot;, color = &quot;yellow&quot; },
      [&quot;C&quot;]           = { icon = &quot;C&quot;, color = &quot;yellow&quot; },
      [&quot;T&quot;]           = { icon = &quot;T&quot;, color = &quot;magenta&quot; },
      [&quot;?&quot;]           = { icon = &quot;?&quot;, color = &quot;magenta&quot; },
      -- override git icons?
      -- [&quot;M&quot;]        = { icon = &quot;★&quot;, color = &quot;red&quot; },
      -- [&quot;D&quot;]        = { icon = &quot;✗&quot;, color = &quot;red&quot; },
      -- [&quot;A&quot;]        = { icon = &quot;+&quot;, color = &quot;green&quot; },
    },
  },
  grep = {
    prompt            = &#39;Rg❯ &#39;,
    input_prompt      = &#39;Grep For❯ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `rg` over `grep`
    -- default options are controlled by &#39;rg|grep_opts&#39;
    -- cmd            = &quot;rg --vimgrep&quot;,
    grep_opts         = &quot;--binary-files=without-match --line-number --recursive --color=auto --perl-regexp -e&quot;,
    rg_opts           = &quot;--column --line-number --no-heading --color=always --smart-case --max-columns=4096 -e&quot;,
    hidden             = false,       -- disable hidden files by default
    follow             = false,       -- do not follow symlinks by default
    no_ignore          = false,       -- respect &quot;.gitignore&quot;  by default
    -- Uncomment to use the rg config file `$RIPGREP_CONFIG_PATH`
    -- RIPGREP_CONFIG_PATH = vim.env.RIPGREP_CONFIG_PATH
    --
    -- Set to &#39;true&#39; to always parse globs in both &#39;grep&#39; and &#39;live_grep&#39;
    -- search strings will be split using the &#39;glob_separator&#39; and translated
    -- to &#39;--iglob=&#39; arguments, requires &#39;rg&#39;
    -- can still be used when &#39;false&#39; by calling &#39;live_grep_glob&#39; directly
    rg_glob           = true,         -- default to glob parsing with `rg`
    glob_flag         = &quot;--iglob&quot;,    -- for case sensitive globs use &#39;--glob&#39;
    glob_separator    = &quot;%s%-%-&quot;,     -- query separator pattern (lua): &#39; --&#39;
    -- advanced usage: for custom argument parsing define
    -- &#39;rg_glob_fn&#39; to return a pair:
    --   first returned argument is the new search query
    --   second returned argument are additional rg flags
    -- rg_glob_fn = function(query, opts)
    --   ...
    --   return new_query, flags
    -- end,
    --
    -- Enable with narrow term width, split results to multiple lines
    -- NOTE: multiline requires fzf &amp;gt;= v0.53 and is ignored otherwise
    -- multiline      = 1,      -- Display as: PATH:LINE:COL\nTEXT
    -- multiline      = 2,      -- Display as: PATH:LINE:COL\nTEXT\n
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]      = { actions.grep_lgrep }
      -- uncomment to enable &#39;.gitignore&#39; toggle for grep
      -- [&quot;ctrl-r&quot;]   = { actions.toggle_ignore }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  args = {
    prompt            = &#39;Args❯ &#39;,
    files_only        = true,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions           = { [&quot;ctrl-x&quot;] = { fn = actions.arg_del, reload = true } },
  },
  oldfiles = {
    prompt            = &#39;History❯ &#39;,
    cwd_only          = false,
    stat_file         = true,         -- verify files exist on disk
    -- can also be a lua function, for example:
    -- stat_file = require(&quot;fzf-lua&quot;).utils.file_is_readable,
    -- stat_file = function() return true end,
    include_current_session = false,  -- include bufs from current session
  },
  buffers = {
    prompt            = &#39;Buffers❯ &#39;,
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    sort_lastused     = true,         -- sort buffers() by last used
    show_unloaded     = true,         -- show unloaded buffers
    cwd_only          = false,        -- buffers for the cwd only
    cwd               = nil,          -- buffers list for a given dir
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- by supplying a table of functions we&#39;re telling
      -- fzf-lua to not close the fzf window, this way we
      -- can resume the buffers picker on the same window
      -- eliminating an otherwise unaesthetic win &quot;flash&quot;
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    }
  },
  tabs = {
    prompt            = &#39;Tabs❯ &#39;,
    tab_title         = &quot;Tab&quot;,
    tab_marker        = &quot;&amp;lt;&amp;lt;&quot;,
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      [&quot;enter&quot;]       = actions.buf_switch,
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    },
    fzf_opts = {
      -- hide tabnr
      [&quot;--delimiter&quot;] = &quot;[\\):]&quot;,
      [&quot;--with-nth&quot;]  = &#39;2..&#39;,
    },
  },
  -- `blines` has the same defaults as `lines` aside from prompt and `show_bufname`
  lines = {
    prompt            = &#39;Lines❯ &#39;,
    file_icons        = true,
    show_bufname      = true,         -- display buffer name
    show_unloaded     = true,         -- show unloaded buffers
    show_unlisted     = false,        -- exclude &#39;help&#39; buffers
    no_term_buffers   = true,         -- exclude &#39;term&#39; buffers
    sort_lastused     = true,         -- sort by most recent
    winopts  = { treesitter = true }, -- enable TS highlights
    fzf_opts = {
      -- do not include bufnr in fuzzy matching
      -- tiebreak by line no.
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;1&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
      [&quot;--with-nth&quot;]  = &quot;2..&quot;,
      [&quot;--nth&quot;]       = &quot;4..&quot;,
    },
  },
  tags = {
    prompt                = &#39;Tags❯ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    multiprocess          = true,
    file_icons            = true,
    color_icons           = true,
    -- &#39;tags_live_grep&#39; options, `rg` prioritizes over `grep`
    rg_opts               = &quot;--no-heading --color=always --smart-case&quot;,
    grep_opts             = &quot;--color=auto --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]          = { actions.grep_lgrep }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  btags = {
    prompt                = &#39;BTags❯ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    ctags_autogen         = true,     -- dynamically generate ctags each call
    multiprocess          = true,
    file_icons            = false,
    rg_opts               = &quot;--color=never --no-heading&quot;,
    grep_opts             = &quot;--color=never --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    -- actions inherit from &#39;actions.files&#39;
  },
  colorschemes = {
    prompt            = &#39;Colorschemes❯ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    actions           = { [&quot;enter&quot;] = actions.colorscheme },
    winopts           = { height = 0.55, width = 0.30, },
    -- uncomment to ignore colorschemes names (lua patterns)
    -- ignore_patterns   = { &quot;^delek$&quot;, &quot;^blue$&quot; },
  },
  awesome_colorschemes = {
    prompt            = &#39;Colorschemes❯ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    max_threads       = 5,          -- max download/update threads
    winopts           = { row = 0, col = 0.99, width = 0.50 },
    fzf_opts          = {
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[:]&quot;,
      [&quot;--with-nth&quot;]  = &quot;3..&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
    },
    actions           = {
      [&quot;enter&quot;]   = actions.colorscheme,
      [&quot;ctrl-g&quot;]  = { fn = actions.toggle_bg, exec_silent = true },
      [&quot;ctrl-r&quot;]  = { fn = actions.cs_update, reload = true },
      [&quot;ctrl-x&quot;]  = { fn = actions.cs_delete, reload = true },
    },
  },
  keymaps = {
    prompt            = &quot;Keymaps&amp;gt; &quot;,
    winopts           = { preview = { layout = &quot;vertical&quot; } },
    fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;index&quot;, },
    -- by default, we ignore &amp;lt;Plug&amp;gt; and &amp;lt;SNR&amp;gt; mappings
    -- set `ignore_patterns = false` to disable filtering
    ignore_patterns   = { &quot;^&amp;lt;SNR&amp;gt;&quot;, &quot;^&amp;lt;Plug&amp;gt;&quot; },
    show_desc         = true,
    show_details      = true,
    actions           = {
      [&quot;enter&quot;]       = actions.keymap_apply,
      [&quot;ctrl-s&quot;]      = actions.keymap_split,
      [&quot;ctrl-v&quot;]      = actions.keymap_vsplit,
      [&quot;ctrl-t&quot;]      = actions.keymap_tabedit,
    },
  },
  nvim_options = {
    prompt            = &quot;Nvim Options&amp;gt; &quot;,
    separator         = &quot;│&quot;,  -- separator between option name and value
    color_values      = true, -- colorize boolean values
    actions           = {
      [&quot;enter&quot;]     = { fn = actions.nvim_opt_edit_local, reload = true },
      [&quot;alt-enter&quot;] = { fn = actions.nvim_opt_edit_global, reload = true },
    },
  },
  quickfix = {
    file_icons        = true,
    only_valid        = false, -- select among only the valid quickfix entries
  },
  quickfix_stack = {
    prompt = &quot;Quickfix Stack&amp;gt; &quot;,
    marker = &quot;&amp;gt;&quot;,                   -- current list marker
  },
  lsp = {
    prompt_postfix    = &#39;❯ &#39;,       -- will be appended to the LSP label
                                    -- to override use &#39;prompt&#39; instead
    cwd_only          = false,      -- LSP/diagnostics for cwd only?
    async_or_timeout  = 5000,       -- timeout(ms) or &#39;true&#39; for async calls
    file_icons        = true,
    git_icons         = false,
    jump1             = true,       -- skip the UI when result is a single entry
    jump1_action      = FzfLua.actions.file_edit
    -- The equivalent of using `includeDeclaration` in lsp buf calls, e.g:
    -- :lua vim.lsp.buf.references({includeDeclaration = false})
    includeDeclaration = true,      -- include current declaration in LSP context
    -- settings for &#39;lsp_{document|workspace|lsp_live_workspace}_symbols&#39;
    symbols = {
        -- lsp_query      = &quot;foo&quot;       -- query passed to the LSP directly
        -- query          = &quot;bar&quot;       -- query passed to fzf prompt for fuzzy matching
        async_or_timeout  = true,       -- symbols are async by default
        symbol_style      = 1,          -- style for document/workspace symbols
                                        -- false: disable,    1: icon+kind
                                        --     2: icon only,  3: kind only
                                        -- NOTE: icons are extracted from
                                        -- vim.lsp.protocol.CompletionItemKind
        -- icons for symbol kind
        -- see https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind
        -- see https://github.com/neovim/neovim/blob/829d92eca3d72a701adc6e6aa17ccd9fe2082479/runtime/lua/vim/lsp/protocol.lua#L117
        symbol_icons     = {
          File          = &quot;󰈙&quot;,
          Module        = &quot;&quot;,
          Namespace     = &quot;󰦮&quot;,
          Package       = &quot;&quot;,
          Class         = &quot;󰆧&quot;,
          Method        = &quot;󰊕&quot;,
          Property      = &quot;&quot;,
          Field         = &quot;&quot;,
          Constructor   = &quot;&quot;,
          Enum          = &quot;&quot;,
          Interface     = &quot;&quot;,
          Function      = &quot;󰊕&quot;,
          Variable      = &quot;󰀫&quot;,
          Constant      = &quot;󰏿&quot;,
          String        = &quot;&quot;,
          Number        = &quot;󰎠&quot;,
          Boolean       = &quot;󰨙&quot;,
          Array         = &quot;󱡠&quot;,
          Object        = &quot;&quot;,
          Key           = &quot;󰌋&quot;,
          Null          = &quot;󰟢&quot;,
          EnumMember    = &quot;&quot;,
          Struct        = &quot;󰆼&quot;,
          Event         = &quot;&quot;,
          Operator      = &quot;󰆕&quot;,
          TypeParameter = &quot;󰗴&quot;,
        },
        -- colorize using Treesitter &#39;@&#39; highlight groups (&quot;@function&quot;, etc).
        -- or &#39;false&#39; to disable highlighting
        symbol_hl         = function(s) return &quot;@&quot; .. s:lower() end,
        -- additional symbol formatting, works with or without style
        symbol_fmt        = function(s, opts) return &quot;[&quot; .. s .. &quot;]&quot; end,
        -- prefix child symbols. set to any string or `false` to disable
        child_prefix      = true,
        fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    },
    code_actions = {
        prompt            = &#39;Code Actions&amp;gt; &#39;,
        async_or_timeout  = 5000,
        -- when git-delta is installed use &quot;codeaction_native&quot; for beautiful diffs
        -- try it out with `:FzfLua lsp_code_actions previewer=codeaction_native`
        -- scroll up to `previewers.codeaction{_native}` for more previewer options
        previewer        = &quot;codeaction&quot;,
    },
    finder = {
        prompt      = &quot;LSP Finder&amp;gt; &quot;,
        file_icons  = true,
        color_icons = true,
        async       = true,         -- async by default
        silent      = true,         -- suppress &quot;not found&quot;
        separator   = &quot;| &quot;,         -- separator after provider prefix, `false` to disable
        includeDeclaration = true,  -- include current declaration in LSP context
        -- by default display all LSP locations
        -- to customize, duplicate table and delete unwanted providers
        providers   = {
            { &quot;references&quot;,      prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.blue(&quot;ref &quot;) },
            { &quot;definitions&quot;,     prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.green(&quot;def &quot;) },
            { &quot;declarations&quot;,    prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.magenta(&quot;decl&quot;) },
            { &quot;typedefs&quot;,        prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.red(&quot;tdef&quot;) },
            { &quot;implementations&quot;, prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.green(&quot;impl&quot;) },
            { &quot;incoming_calls&quot;,  prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.cyan(&quot;in  &quot;) },
            { &quot;outgoing_calls&quot;,  prefix = require(&quot;fzf-lua&quot;).utils.ansi_codes.yellow(&quot;out &quot;) },
        },
    }
  },
  diagnostics ={
    prompt            = &#39;Diagnostics❯ &#39;,
    cwd_only          = false,
    file_icons        = true,
    git_icons         = false,
    diag_icons        = true,
    diag_source       = true,   -- display diag source (e.g. [pycodestyle])
    icon_padding      = &#39;&#39;,     -- add padding for wide diagnostics signs
    multiline         = true,   -- concatenate multi-line diags into a single line
    -- severity_only:   keep any matching exact severity
    -- severity_limit:  keep any equal or more severe (lower)
    -- severity_bound:  keep any equal or less severe (higher)
  },
  marks = {
    marks = &quot;&quot;, -- filter vim marks with a lua pattern
    -- for example if you want to only show user defined marks
    -- you would set this option as %a this would match characters from [A-Za-z]
    -- or if you want to show only numbers you would set the pattern to %d (0-9).
  },
  complete_path = {
    cmd          = nil, -- default: auto detect fd|rg|find
    complete     = { [&quot;enter&quot;] = actions.complete },
    word_pattern = nil, -- default: &quot;[^%s\&quot;&#39;]*&quot;
  },
  complete_file = {
    cmd          = nil, -- default: auto detect rg|fd|find
    file_icons   = true,
    color_icons  = true,
    word_pattern = nil,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions      = { [&quot;enter&quot;] = actions.complete },
    -- previewer hidden by default
    winopts      = { preview = { hidden = true } },
  },
  zoxide = {
    cmd          = &quot;zoxide query --list --score&quot;,
    git_root     = false, -- auto-detect git root
    formatter    = &quot;path.dirname_first&quot;,
    fzf_opts     = {
      [&quot;--no-multi&quot;]  = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;4&quot;,
      [&quot;--tiebreak&quot;]  = &quot;end,index&quot;, -- prefer dirs ending with search term
      [&quot;--nth&quot;]       = &quot;2..&quot;,       -- exclude score from fuzzy matching
    },
    actions      = { enter = actions.cd }
  },
  -- uncomment to use fzf native previewers
  -- (instead of using a neovim floating window)
  -- manpages = { previewer = &quot;man_native&quot; },
  -- helptags = { previewer = &quot;help_native&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To experiment with different options without modifying the global config, options can be sent as inline parameters to the function calls. Expand below to see examples of inline customization and Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; for yet more examples.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR EXAMPLES OF INLINE CUSTOMIZATION&lt;/summary&gt; 
 &lt;h4&gt;Inline Customization&lt;/h4&gt; 
 &lt;p&gt;Different &lt;code&gt;fzf&lt;/code&gt; layout:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;fzf-lua&#39;).files({ fzf_opts = {[&#39;--layout&#39;] = &#39;reverse-list&#39;} })
-- Or via the vimL command
:FzfLua files fzf_opts.--layout=reverse-list
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;files&lt;/code&gt; with a different command and working directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.files({ prompt=&quot;LS&amp;gt; &quot;, cmd = &quot;ls&quot;, cwd=&quot;~/.config&quot; })
-- Or via the vimL command
:FzfLua files prompt=&quot;LS&amp;gt;\ &quot; cmd=ls cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;live_grep&lt;/code&gt; with &lt;code&gt;git grep&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.live_grep({ cmd = &quot;git grep --line-number --column --color=always&quot; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;code&gt;spell_suggest&lt;/code&gt; with non-default window size relative to cursor:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.spell_suggest({ winopts = { height=0.33, width=0.33, relative=&quot;cursor&quot; } })
-- Or via the vimL command
:FzfLua spell_suggest winopts={height=0.33,width=0.33,relative=cursor}
:FzfLua spell_suggest winopts={height=0.33,width=0.33} winopts.relative=cursor
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Profiles&lt;/h3&gt; 
&lt;p&gt;Conveniently, fzf-lua comes with a set of preconfigured profiles if you do not want to tinker with customization.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;:FzfLua profiles&lt;/code&gt; to experiment with the different profiles, once you&#39;ve found what you like and wish to make the profile persist, send a &lt;code&gt;string&lt;/code&gt; argument at the first index of the table sent to the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;code&gt;setup&lt;/code&gt; can be called multiple times for profile &quot;live&quot; switching, see &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/tree/main/lua/fzf-lua/profiles&quot;&gt;profiles&lt;/a&gt; page for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-native&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also start with a profile as &quot;baseline&quot; and customize it, for example, telescope defaults with &lt;code&gt;bat&lt;/code&gt; previewer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({&quot;telescope&quot;,winopts={preview={default=&quot;bat&quot;}}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Combining of profiles is also available by sending table instead of string as the first argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({{&quot;telescope&quot;,&quot;fzf-native&quot;},winopts={fullscreen=true}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Coming from fzf.vim?&lt;/h4&gt; 
&lt;p&gt;Easy! just use the &lt;code&gt;fzf-vim&lt;/code&gt; profile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-vim&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Using the &lt;code&gt;fzf-vim&lt;/code&gt; profile will automatically create &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s user commands (i.e. &lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;), if you wish to use a different profile you can create the same user commands by running &lt;code&gt;:FzfLua setup_fzfvim_cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE THE AVAILABLE PROFILES&lt;/summary&gt; 
 &lt;h4&gt;Available Profiles&lt;/h4&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Profile&lt;/th&gt; 
    &lt;th&gt;Details&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, uses neovim &quot;builtin&quot; buffer previewer and devicons (if available)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using title for picker info (default on neovim &amp;gt;= 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using prompt for picker info (default on neovim &amp;lt; 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;utilizes fzf&#39;s native previewing ability in the terminal where possible using &lt;code&gt;bat&lt;/code&gt; for previews&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-tmux&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and opens in a tmux popup (requires tmux &amp;gt; 3.2)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-vim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest to &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s defaults (+icons), also sets up user commands (&lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;, etc)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;max-perf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and disables icons globally for max performance&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest match to telescope defaults in look and feel and keybinds&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;uses &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; as an fzf alternative, (requires the &lt;code&gt;sk&lt;/code&gt; binary)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless and minimalistic seamless look &amp;amp; feel&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless-full&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless with description in window title (instead of prompt)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;border-fused&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;single border around both fzf and the previewer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;ivy&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;UI at bottom, similar to telescope&#39;s ivy layout&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;hide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;send fzf process to background instead of termination&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h3&gt;Extensibility&lt;/h3&gt; 
&lt;p&gt;Fzf-lua can be easily extended and customised for your own needs: have a look at a full list of examples and plugins browsing the 💡&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki/Advanced&quot;&gt;Wiki&lt;/a&gt; 💡&lt;/p&gt; 
&lt;p&gt;Have ideas for new pickers, plugins or extensions? Add it to the wiki, it&#39;s open edit!&lt;/p&gt; 
&lt;h3&gt;Insert-mode completion&lt;/h3&gt; 
&lt;p&gt;Fzf-lua comes with a set of completion functions for paths/files and lines from open buffers as well as custom completion, for example, set path/completion using &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;n&quot;, &quot;v&quot;, &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function() require(&quot;fzf-lua&quot;).complete_path() end,
  { silent = true, desc = &quot;Fuzzy complete path&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with a custom command and preview:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] only &lt;code&gt;complete_file&lt;/code&gt; supports a previewer as &lt;code&gt;complete_path&lt;/code&gt; mixes both files and directories.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function()
    require(&quot;fzf-lua&quot;).complete_file({
      cmd = &quot;rg --files&quot;,
      winopts = { preview = { hidden = true } }
    })
  end, { silent = true, desc = &quot;Fuzzy complete file&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR CUSTOM COMPLETION DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Custom Completion&lt;/h4&gt; 
 &lt;p&gt;Every fzf-lua function can be easily converted to a completion function by sending &lt;code&gt;complete = true&lt;/code&gt; in the options:&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;By default fzf-lua will insert the entry at the cursor location as if you used &lt;code&gt;p&lt;/code&gt; to paste the selected entry.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {complete = true})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Custom completion is possible using a custom completion callback, the example below will replace the text from the current cursor column with the selected entry:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {
  -- @param selected: the selected entry or entries
  -- @param opts: fzf-lua caller/provider options
  -- @param line: originating buffer completed line
  -- @param col: originating cursor column location
  -- @return newline: will replace the current buffer line
  -- @return newcol?: optional, sets the new cursor column
  complete = function(selected, opts, line, col)
    local newline = line:sub(1, col) .. selected[1]
    -- set cursor to EOL, since `nvim_win_set_cursor`
    -- is 0-based we have to lower the col value by 1
    return newline, #newline - 1
  end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Highlights&lt;/h3&gt; 
&lt;p&gt;Highlight groups can be easily customized either via the lua API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.api.nvim_set_hl(0, &quot;FzfLuaBorder&quot;, { link = &quot;FloatBorder&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or via &lt;code&gt;setup&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  hls = { border = &quot;FloatBorder&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or temporarily in the call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&#39;fzf-lua&#39;.files({ hls={preview_title=&quot;IncSearch&quot;} })
-- vimL equivalent
:FzfLua files hls.preview_title=IncSearch
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE AVAILABLE HIGHLIGHT GROUPS&lt;/summary&gt; 
 &lt;h4&gt;Highlight groups&lt;/h4&gt; 
 &lt;p&gt;FzfLua conveniently creates the below highlights, each hlgroup can be temporarily overridden by its corresponding &lt;code&gt;winopts&lt;/code&gt; option:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Highlight Group&lt;/th&gt; 
    &lt;th&gt;Default&lt;/th&gt; 
    &lt;th&gt;Override Via&lt;/th&gt; 
    &lt;th&gt;Notes&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitleFlags&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title_flags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title flags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBackdrop&lt;/td&gt; 
    &lt;td&gt;*bg=Black&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.backdrop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Backdrop color&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursor&lt;/td&gt; 
    &lt;td&gt;Cursor&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursor&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursor&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursorline&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLineNr&lt;/td&gt; 
    &lt;td&gt;CursorLineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorlinenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;CursorLineNr&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaSearch&lt;/td&gt; 
    &lt;td&gt;IncSearch&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.search&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview search matches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderEmpty&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderFull&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatEmpty&lt;/td&gt; 
    &lt;td&gt;PmenuSbar&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatFull&lt;/td&gt; 
    &lt;td&gt;PmenuThumb&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderBind&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_bind&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header keybind&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderText&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_text&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathColNr&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_colnr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path col nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathLineNr&lt;/td&gt; 
    &lt;td&gt;*LightGreen&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path line nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufName&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_name&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer name (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufId&lt;/td&gt; 
    &lt;td&gt;TabLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_id&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer ID (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufNr&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_nr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer number (&lt;code&gt;buffers,tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufLineNr&lt;/td&gt; 
    &lt;td&gt;LineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line nr (&lt;code&gt;lines,blines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagCur&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_cur&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagAlt&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_alt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabTitle&lt;/td&gt; 
    &lt;td&gt;*LightSkyBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab title (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabMarker&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab marker (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirIcon&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_icon&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Paths directory icon&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirPart&lt;/td&gt; 
    &lt;td&gt;Comment&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters directory hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFilePart&lt;/td&gt; 
    &lt;td&gt;@none&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.file_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters file hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLivePrompt&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&quot;live&quot; queries prompt text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLiveSym&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_sym&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;LSP live symbols query match&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg|bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfCursorLine&lt;/td&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg+|bg+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMatch&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.match&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;hl+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;border&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfScrollbar&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.scrollbar&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;scrollbar&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSeparator&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.separator&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;separator&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfGutter&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.gutter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;gutter&lt;/code&gt; (hl &lt;code&gt;bg&lt;/code&gt; is used)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfHeader&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.header&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfInfo&lt;/td&gt; 
    &lt;td&gt;NonText&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.info&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.pointer&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMarker&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;marker&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSpinner&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.spinner&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;spinner&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPrompt&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;prompt&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfQuery&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.query&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;sup&gt;&lt;sub&gt;*Not a highlight group, RGB color from &lt;code&gt;nvim_get_color_map&lt;/code&gt;&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR FZF COLORS DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Fzf Colors&lt;/h4&gt; 
 &lt;p&gt;Fzf&#39;s terminal colors are controlled by fzf&#39;s &lt;code&gt;--color&lt;/code&gt; flag which can be configured during setup via &lt;code&gt;fzf_colors&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to have fzf-lua automatically generate an fzf colorscheme from your current Neovim colorscheme:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({ fzf_colors = true })
-- Or in the direct call options
:lua require(&quot;fzf-lua&quot;).files({ fzf_colors = true })
:FzfLua files fzf_colors=true
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Customizing the fzf colorscheme (see &lt;code&gt;man fzf&lt;/code&gt; for all color options):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  fzf_colors = {
    -- First existing highlight group will be used
    -- values in 3rd+ index will be passed raw
    -- i.e:  `--color fg+:#010101:bold:underline`
    [&quot;fg+&quot;] = { &quot;fg&quot; , { &quot;Comment&quot;, &quot;Normal&quot; }, &quot;bold&quot;, &quot;underline&quot; },
    -- It is also possible to pass raw values directly
    [&quot;gutter&quot;] = &quot;-1&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Conveniently, fzf-lua can also be configured using fzf.vim&#39;s &lt;code&gt;g:fzf_colors&lt;/code&gt;, i.e:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Similarly, first existing highlight group will be used
:lua vim.g.fzf_colors = { [&quot;gutter&quot;] = { &quot;bg&quot;, &quot;DoesNotExist&quot;, &quot;IncSearch&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;However, the above doesn&#39;t allow combining both neovim highlights and raw args, if you&#39;re only using fzf-lua we can hijack &lt;code&gt;g:fzf_colors&lt;/code&gt; to accept fzf-lua style values (i.e. table at 2nd index and 3rd+ raw args):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.g.fzf_colors = { [&quot;fg+&quot;] = { &quot;fg&quot;, { &quot;ErrorMsg&quot; }, &quot;bold&quot;, &quot;underline&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Big thank you to all those I borrowed code/ideas from, I read so many configs and plugin codes that I probably forgot where I found some samples from so if I missed your name feel free to contact me and I&#39;ll add it below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/&quot;&gt;@junegunn&lt;/a&gt; for creating the magical &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; and &lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vijaymarupudi/&quot;&gt;@vijaymarupudi&lt;/a&gt; for the wonderful &lt;a href=&quot;https://github.com/vijaymarupudi/nvim-fzf&quot;&gt;nvim-fzf&lt;/a&gt; plugin which started this endeavour&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tjdevries/&quot;&gt;@tjdevries&lt;/a&gt; for too many great things to list here and borrowing code from &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;nvim-telescope&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lukas-reineke&quot;&gt;@lukas-reineke&lt;/a&gt; for inspiration after browsing &lt;a href=&quot;https://github.com/lukas-reineke/dotfiles&quot;&gt;dotfiles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindrets&quot;&gt;@sindrets&lt;/a&gt; for borrowing utilities from &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kevinhwang91&quot;&gt;@kevinhwang91&lt;/a&gt; for inspiring the builtin previewer code while using &lt;a href=&quot;https://github.com/kevinhwang91/nvim-bqf&quot;&gt;nvim-bqf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>CopilotC-Nvim/CopilotChat.nvim</title>
      <link>https://github.com/CopilotC-Nvim/CopilotChat.nvim</link>
      <description>&lt;p&gt;Chat with GitHub Copilot in Neovim&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Copilot Chat for Neovim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/CopilotC-Nvim/CopilotChat.nvim?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/CopilotC-Nvim/CopilotChat.nvim/ci.yml?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://copilotc-nvim.github.io/CopilotChat.nvim/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-up-green.svg?logo=vim&amp;amp;style=for-the-badge&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/#contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/all-contributors/CopilotC-Nvim/CopilotChat.nvim?color=ee8449&amp;amp;logo=github&amp;amp;label=contributors&amp;amp;style=for-the-badge&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/vy6hJsTWaZ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1200633211236122665?logo=discord&amp;amp;label=discord&amp;amp;style=for-the-badge&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim/shield?style=for-the-badge&quot; alt=&quot;Dotfyle&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/9ee30811-0fb8-4500-91f6-34ea6b26adea&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&quot;&gt;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;CopilotChat.nvim is a Neovim plugin that brings GitHub Copilot Chat capabilities directly into your editor. It provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🤖 GitHub Copilot Chat integration with official model and agent support (GPT-4o, Claude 3.7 Sonnet, Gemini 2.0 Flash, and more)&lt;/li&gt; 
 &lt;li&gt;💻 Rich workspace context powered by smart embeddings system&lt;/li&gt; 
 &lt;li&gt;🔒 Explicit context sharing - only sends what you specifically request, either as context or selection&lt;/li&gt; 
 &lt;li&gt;🔌 Modular provider architecture supporting both official and custom LLM backends (Ollama, LM Studio, Mistral.ai and more)&lt;/li&gt; 
 &lt;li&gt;📝 Interactive chat UI with completion, diffs and quickfix integration&lt;/li&gt; 
 &lt;li&gt;🎯 Powerful prompt system with composable templates and sticky prompts&lt;/li&gt; 
 &lt;li&gt;🔄 Extensible context providers for granular workspace understanding (buffers, files, git diffs, URLs, and more)&lt;/li&gt; 
 &lt;li&gt;⚡ Efficient token usage with tiktoken optimization&lt;/li&gt; 
 &lt;li&gt;📜 Intelligent chat memory management with automatic summarization to handle lengthy conversations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Requirements&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim 0.10.0+&lt;/a&gt; - Older versions are not officially supported&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;curl&lt;/a&gt; - Version 8.0.0+ recommended for best compatibility&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/settings/copilot&quot;&gt;Copilot chat in the IDE&lt;/a&gt; enabled in GitHub settings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] For Neovim &amp;lt; 0.11.0, add &lt;code&gt;noinsert&lt;/code&gt; or &lt;code&gt;noselect&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; otherwise chat autocompletion will not work. For best autocompletion experience, also add &lt;code&gt;popup&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; (even on Neovim 0.11.0+).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Optional Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gptlang/lua-tiktoken&quot;&gt;tiktoken_core&lt;/a&gt; - For accurate token counting&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Arch Linux: Install &lt;a href=&quot;https://aur.archlinux.org/packages/luajit-tiktoken-bin&quot;&gt;&lt;code&gt;luajit-tiktoken-bin&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://aur.archlinux.org/packages/lua51-tiktoken-bin&quot;&gt;&lt;code&gt;lua51-tiktoken-bin&lt;/code&gt;&lt;/a&gt; from AUR&lt;/li&gt; 
   &lt;li&gt;Via luarocks: &lt;code&gt;sudo luarocks install --lua-version 5.1 tiktoken_core&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Manual: Download from &lt;a href=&quot;https://github.com/gptlang/lua-tiktoken/releases&quot;&gt;lua-tiktoken releases&lt;/a&gt; and save as &lt;code&gt;tiktoken_core.so&lt;/code&gt; in your Lua path&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; - For git diff context features&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; - For improved search performance&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://lynx.invisible-island.net/&quot;&gt;lynx&lt;/a&gt; - For improved URL context features&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integration with pickers&lt;/h2&gt; 
&lt;p&gt;For various plugin pickers to work correctly, you need to replace &lt;code&gt;vim.ui.select&lt;/code&gt; with your desired picker (as the default &lt;code&gt;vim.ui.select&lt;/code&gt; is very basic). Here are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua?tab=readme-ov-file#neovim-api&quot;&gt;fzf-lua&lt;/a&gt; - call &lt;code&gt;require(&#39;fzf-lua&#39;).register_ui_select()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope-ui-select.nvim?tab=readme-ov-file#telescope-setup-and-configuration&quot;&gt;telescope&lt;/a&gt; - setup &lt;code&gt;telescope-ui-select.nvim&lt;/code&gt; plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md#%EF%B8%8F-config&quot;&gt;snacks.picker&lt;/a&gt; - enable &lt;code&gt;ui_select&lt;/code&gt; config&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick/raw/main/lua/mini/pick.lua#L1229&quot;&gt;mini.pick&lt;/a&gt; - set &lt;code&gt;vim.ui.select = require(&#39;mini.pick&#39;).ui_select&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Plugin features that use picker:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt; - for selecting prompts&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt; - for selecting models&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:CopilotChatAgents&lt;/code&gt; - for selecting agents&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;#&amp;lt;context&amp;gt;:&amp;lt;input&amp;gt;&lt;/code&gt; - for selecting context input&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;CopilotC-Nvim/CopilotChat.nvim&quot;,
    dependencies = {
      { &quot;github/copilot.vim&quot; }, -- or zbirenbaum/copilot.lua
      { &quot;nvim-lua/plenary.nvim&quot;, branch = &quot;master&quot; }, -- for curl, log and async functions
    },
    build = &quot;make tiktoken&quot;, -- Only on MacOS or Linux
    opts = {
      -- See Configuration section for options
    },
    -- See Commands section for default commands if you want to lazy load on them
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/jellydn&quot;&gt;@jellydn&lt;/a&gt; for &lt;a href=&quot;https://github.com/jellydn/lazy-nvim-ide/raw/main/lua/plugins/extras/copilot-chat-v2.lua&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Similar to the lazy setup, you can use the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call plug#begin()
Plug &#39;github/copilot.vim&#39;
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;CopilotC-Nvim/CopilotChat.nvim&#39;
call plug#end()

lua &amp;lt;&amp;lt; EOF
require(&quot;CopilotChat&quot;).setup {
  -- See Configuration section for options
}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Put the files in the right place&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;mkdir -p ~/.config/nvim/pack/copilotchat/start
cd ~/.config/nvim/pack/copilotchat/start

git clone https://github.com/github/copilot.vim
git clone https://github.com/nvim-lua/plenary.nvim

git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Add to your configuration (e.g. &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;CopilotChat&quot;).setup {
  -- See Configuration section for options
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/deathbeam&quot;&gt;@deathbeam&lt;/a&gt; for &lt;a href=&quot;https://github.com/deathbeam/dotfiles/raw/master/nvim/.config/nvim/lua/config/copilot.lua&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;Commands are used to control the chat interface:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat &amp;lt;input&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat with optional input&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatOpen&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatClose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatStop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stop current output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatSave &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Save chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatLoad &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select prompt templates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatAgents&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available agents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use specific prompt template&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Key Mappings&lt;/h2&gt; 
&lt;p&gt;Default mappings in the chat interface:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Insert&lt;/th&gt; 
   &lt;th&gt;Normal&lt;/th&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Trigger/accept completion menu for tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset and clear the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Submit the current prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grr&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle sticky prompt for line under cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grx&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear all sticky prompts in prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Accept nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gj&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Jump to section of nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqa&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all answers from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all diffs from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yank nearest diff to register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show diff between source and nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gi&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show info about current chat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show current chat context&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show help message&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The mappings can be customized by setting the &lt;code&gt;mappings&lt;/code&gt; table in your configuration. Each mapping can have:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;normal&lt;/code&gt;: Key for normal mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;insert&lt;/code&gt;: Key for insert mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to change the submit prompt mapping or show_diff full diff option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    mappings = {
      submit_prompt = {
        normal = &#39;&amp;lt;Leader&amp;gt;s&#39;,
        insert = &#39;&amp;lt;C-s&amp;gt;&#39;
      }
      show_diff = {
        full_diff = true
      }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Prompts&lt;/h2&gt; 
&lt;h3&gt;Predefined Prompts&lt;/h3&gt; 
&lt;p&gt;Predefined prompt templates for common tasks. Reference them with &lt;code&gt;/PromptName&lt;/code&gt; in chat, use &lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt; or &lt;code&gt;:CopilotChatPrompts&lt;/code&gt; to select them:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Explain&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write an explanation for the selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Review&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Review the selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Fix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Rewrite the code with bug fixes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Optimize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Optimize code for performance and readability&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Docs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add documentation comments to the code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Tests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generate tests for the code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Commit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write commit message using commitizen convention&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Define your own prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    MyCustomPrompt = {
      prompt = &#39;Explain how it works.&#39;,
      system_prompt = &#39;You are very good at explaining stuff&#39;,
      mapping = &#39;&amp;lt;leader&amp;gt;ccmc&#39;,
      description = &#39;My custom prompt description&#39;,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;System Prompts&lt;/h3&gt; 
&lt;p&gt;System prompts define the AI model&#39;s behavior. Reference them with &lt;code&gt;/PROMPT_NAME&lt;/code&gt; in chat:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_BASE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;All prompts should be built on top of this&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_INSTRUCTIONS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Base instructions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_EXPLAIN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds coding tutor behavior&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;COPILOT_REVIEW&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Adds code review behavior with diagnostics&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Define your own system prompts in the configuration (similar to &lt;code&gt;prompts&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    Yarrr = {
      system_prompt = &#39;You are fascinated by pirates, so please respond in pirate speak.&#39;,
    },
    NiceInstructions = {
      system_prompt = &#39;You are a nice coding tutor, so please respond in a friendly and helpful manner.&#39; .. require(&#39;CopilotChat.config.prompts&#39;).COPILOT_BASE.system_prompt,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sticky Prompts&lt;/h3&gt; 
&lt;p&gt;Sticky prompts persist across chat sessions. They&#39;re useful for maintaining context or agent selection. They work as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Prefix text with &lt;code&gt;&amp;gt; &lt;/code&gt; using markdown blockquote syntax&lt;/li&gt; 
 &lt;li&gt;The prompt will be copied at the start of every new chat prompt&lt;/li&gt; 
 &lt;li&gt;Edit sticky prompts freely while maintaining the &lt;code&gt;&amp;gt; &lt;/code&gt; prefix&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; #files
&amp;gt; List all files in the workspace

&amp;gt; @models Using Mistral-small
&amp;gt; What is 1 + 11
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also set default sticky prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  sticky = {
    &#39;@models Using Mistral-small&#39;,
    &#39;#files&#39;,
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Models and Agents&lt;/h2&gt; 
&lt;h3&gt;Models&lt;/h3&gt; 
&lt;p&gt;You can control which AI model to use in three ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;List available models with &lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Set model in prompt with &lt;code&gt;$model_name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configure default model via &lt;code&gt;model&lt;/code&gt; config key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For supported models, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/copilot/using-github-copilot/ai-models/changing-the-ai-model-for-copilot-chat#ai-models-for-copilot-chat&quot;&gt;Copilot Chat Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marketplace/models&quot;&gt;GitHub Marketplace Models&lt;/a&gt; (experimental, limited usage)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Agents&lt;/h3&gt; 
&lt;p&gt;Agents determine the AI assistant&#39;s capabilities. Control agents in three ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;List available agents with &lt;code&gt;:CopilotChatAgents&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Set agent in prompt with &lt;code&gt;@agent_name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configure default agent via &lt;code&gt;agent&lt;/code&gt; config key&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The default &quot;noop&quot; agent is &lt;code&gt;none&lt;/code&gt;. For more information:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/copilot/using-github-copilot/using-extensions-to-integrate-external-tools-with-copilot-chat&quot;&gt;Extension Agents Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marketplace?type=apps&amp;amp;copilot_app=true&quot;&gt;Available Agents&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contexts&lt;/h2&gt; 
&lt;p&gt;Contexts provide additional information to the chat. Add context using &lt;code&gt;#context_name[:input]&lt;/code&gt; syntax:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Context&lt;/th&gt; 
   &lt;th&gt;Input Support&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (number)&lt;/td&gt; 
   &lt;td&gt;Current or specified buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (type)&lt;/td&gt; 
   &lt;td&gt;All buffers content (listed/all)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (path)&lt;/td&gt; 
   &lt;td&gt;Content of specified file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (glob)&lt;/td&gt; 
   &lt;td&gt;Workspace files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;filenames&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (glob)&lt;/td&gt; 
   &lt;td&gt;Workspace file names&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;git&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (ref)&lt;/td&gt; 
   &lt;td&gt;Git diff (unstaged/staged/commit)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (url)&lt;/td&gt; 
   &lt;td&gt;Content from URL&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;register&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (name)&lt;/td&gt; 
   &lt;td&gt;Content of vim register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Quickfix list file contents&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;✓ (command)&lt;/td&gt; 
   &lt;td&gt;Output of shell command&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] The AI is aware of these context providers and may request additional context if needed by asking you to input a specific context command like &lt;code&gt;#file:path/to/file.js&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; #buffer
&amp;gt; #buffer:2
&amp;gt; #files:\*.lua
&amp;gt; #filenames
&amp;gt; #git:staged
&amp;gt; #url:https://example.com
&amp;gt; #system:`ls -la | grep lua`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Define your own contexts in the configuration with input handling and resolution:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  contexts = {
    birthday = {
      input = function(callback)
        vim.ui.select({ &#39;user&#39;, &#39;napoleon&#39; }, {
          prompt = &#39;Select birthday&amp;gt; &#39;,
        }, callback)
      end,
      resolve = function(input)
        return {
          {
            content = input .. &#39; birthday info&#39;,
            filename = input .. &#39;_birthday&#39;,
            filetype = &#39;text&#39;,
          }
        }
      end
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Contexts&lt;/h3&gt; 
&lt;p&gt;For external contexts, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/contexts&quot;&gt;contexts discussion page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Selections&lt;/h2&gt; 
&lt;p&gt;Selections determine the source content for chat interactions.&lt;/p&gt; 
&lt;p&gt;Available selections are located in &lt;code&gt;local select = require(&quot;CopilotChat.select&quot;)&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Selection&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;visual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current visual selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;line&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Current line content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;unnamed&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Unnamed register (last deleted/changed/yanked content)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You can set a default selection in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Default uses visual selection or falls back to buffer
  selection = function(source)
    return select.visual(source) or select.buffer(source)
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Providers&lt;/h2&gt; 
&lt;p&gt;Providers are modules that implement integration with different AI providers.&lt;/p&gt; 
&lt;h3&gt;Built-in Providers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot&lt;/code&gt; - Default GitHub Copilot provider used for chat&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;github_models&lt;/code&gt; - Provider for GitHub Marketplace models&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;copilot_embeddings&lt;/code&gt; - Provider for Copilot embeddings, not standalone&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Provider Interface&lt;/h3&gt; 
&lt;p&gt;Custom providers can implement these methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Optional: Disable provider
  disabled?: boolean,

  -- Optional: Embeddings provider name or function
  embed?: string|function,

  -- Optional: Get extra request headers with optional expiration time
  get_headers?(): table&amp;lt;string,string&amp;gt;, number?,

  -- Optional: Get API endpoint URL
  get_url?(opts: CopilotChat.Provider.options): string,

  -- Optional: Prepare request input
  prepare_input?(inputs: table&amp;lt;CopilotChat.Provider.input&amp;gt;, opts: CopilotChat.Provider.options): table,

  -- Optional: Prepare response output
  prepare_output?(output: table, opts: CopilotChat.Provider.options): CopilotChat.Provider.output,

  -- Optional: Get available models
  get_models?(headers: table): table&amp;lt;CopilotChat.Provider.model&amp;gt;,

  -- Optional: Get available agents
  get_agents?(headers: table): table&amp;lt;CopilotChat.Provider.agent&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Providers&lt;/h3&gt; 
&lt;p&gt;For external providers (Ollama, LM Studio, Mistral.ai), see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/providers&quot;&gt;providers discussion page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;h2&gt;Default Configuration&lt;/h2&gt; 
&lt;p&gt;Below are all available configuration options with their default values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{

  -- Shared config starts here (can be passed to functions at runtime and configured via setup function)

  system_prompt = &#39;COPILOT_INSTRUCTIONS&#39;, -- System prompt to use (can be specified manually in prompt via /).

  model = &#39;gpt-4o&#39;, -- Default model to use, see &#39;:CopilotChatModels&#39; for available models (can be specified manually in prompt via $).
  agent = &#39;copilot&#39;, -- Default agent to use, see &#39;:CopilotChatAgents&#39; for available agents (can be specified manually in prompt via @).
  context = nil, -- Default context or array of contexts to use (can be specified manually in prompt via #).
  sticky = nil, -- Default sticky prompt or array of sticky prompts to use at start of every new chat.

  temperature = 0.1, -- GPT result temperature
  headless = false, -- Do not write to chat buffer and use history (useful for using custom processing)
  stream = nil, -- Function called when receiving stream updates (returned string is appended to the chat buffer)
  callback = nil, -- Function called when full response is received (retuned string is stored to history)
  remember_as_sticky = true, -- Remember model/agent/context as sticky prompts when asking questions

  -- default selection
  -- see select.lua for implementation
  selection = function(source)
    return select.visual(source) or select.buffer(source)
  end,

  -- default window options
  window = {
    layout = &#39;vertical&#39;, -- &#39;vertical&#39;, &#39;horizontal&#39;, &#39;float&#39;, &#39;replace&#39;
    width = 0.5, -- fractional width of parent, or absolute width in columns when &amp;gt; 1
    height = 0.5, -- fractional height of parent, or absolute height in rows when &amp;gt; 1
    -- Options below only apply to floating windows
    relative = &#39;editor&#39;, -- &#39;editor&#39;, &#39;win&#39;, &#39;cursor&#39;, &#39;mouse&#39;
    border = &#39;single&#39;, -- &#39;none&#39;, single&#39;, &#39;double&#39;, &#39;rounded&#39;, &#39;solid&#39;, &#39;shadow&#39;
    row = nil, -- row position of the window, default is centered
    col = nil, -- column position of the window, default is centered
    title = &#39;Copilot Chat&#39;, -- title of chat window
    footer = nil, -- footer of chat window
    zindex = 1, -- determines if window is on top or below other floating windows
  },

  show_help = true, -- Shows help message as virtual lines when waiting for user input
  highlight_selection = true, -- Highlight selection
  highlight_headers = true, -- Highlight headers in chat, disable if using markdown renderers (like render-markdown.nvim)
  references_display = &#39;virtual&#39;, -- &#39;virtual&#39;, &#39;write&#39;, Display references in chat as virtual text or write to buffer
  auto_follow_cursor = true, -- Auto-follow cursor in chat
  auto_insert_mode = false, -- Automatically enter insert mode when opening window and on new prompt
  insert_at_end = false, -- Move cursor to end of buffer when inserting text
  clear_chat_on_new_prompt = false, -- Clears chat on every new prompt

  -- Static config starts here (can be configured only via setup function)

  debug = false, -- Enable debug logging (same as &#39;log_level = &#39;debug&#39;)
  log_level = &#39;info&#39;, -- Log level to use, &#39;trace&#39;, &#39;debug&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;error&#39;, &#39;fatal&#39;
  proxy = nil, -- [protocol://]host[:port] Use this proxy
  allow_insecure = false, -- Allow insecure server connections

  chat_autocomplete = true, -- Enable chat autocompletion (when disabled, requires manual `mappings.complete` trigger)

  log_path = vim.fn.stdpath(&#39;state&#39;) .. &#39;/CopilotChat.log&#39;, -- Default path to log file
  history_path = vim.fn.stdpath(&#39;data&#39;) .. &#39;/copilotchat_history&#39;, -- Default path to stored history

  question_header = &#39;# User &#39;, -- Header to use for user questions
  answer_header = &#39;# Copilot &#39;, -- Header to use for AI answers
  error_header = &#39;# Error &#39;, -- Header to use for errors
  separator = &#39;───&#39;, -- Separator to use in chat

  -- default providers
  -- see config/providers.lua for implementation
  providers = {
    copilot = {
    },
    github_models = {
    },
    copilot_embeddings = {
    },
  }

  -- default contexts
  -- see config/contexts.lua for implementation
  contexts = {
    buffer = {
    },
    buffers = {
    },
    file = {
    },
    files = {
    },
    git = {
    },
    url = {
    },
    register = {
    },
    quickfix = {
    },
    system = {
    }
  },

  -- default prompts
  -- see config/prompts.lua for implementation
  prompts = {
    Explain = {
      prompt = &#39;Write an explanation for the selected code as paragraphs of text.&#39;,
      system_prompt = &#39;COPILOT_EXPLAIN&#39;,
    },
    Review = {
      prompt = &#39;Review the selected code.&#39;,
      system_prompt = &#39;COPILOT_REVIEW&#39;,
    },
    Fix = {
      prompt = &#39;There is a problem in this code. Identify the issues and rewrite the code with fixes. Explain what was wrong and how your changes address the problems.&#39;,
    },
    Optimize = {
      prompt = &#39;Optimize the selected code to improve performance and readability. Explain your optimization strategy and the benefits of your changes.&#39;,
    },
    Docs = {
      prompt = &#39;Please add documentation comments to the selected code.&#39;,
    },
    Tests = {
      prompt = &#39;Please generate tests for my code.&#39;,
    },
    Commit = {
      prompt = &#39;Write commit message for the change with commitizen convention. Keep the title under 50 characters and wrap message at 72 characters. Format as a gitcommit code block.&#39;,
      context = &#39;git:staged&#39;,
    },
  },

  -- default mappings
  -- see config/mappings.lua for implementation
  mappings = {
    complete = {
      insert = &#39;&amp;lt;Tab&amp;gt;&#39;,
    },
    close = {
      normal = &#39;q&#39;,
      insert = &#39;&amp;lt;C-c&amp;gt;&#39;,
    },
    reset = {
      normal = &#39;&amp;lt;C-l&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-l&amp;gt;&#39;,
    },
    submit_prompt = {
      normal = &#39;&amp;lt;CR&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-s&amp;gt;&#39;,
    },
    toggle_sticky = {
      normal = &#39;grr&#39;,
    },
    clear_stickies = {
      normal = &#39;grx&#39;,
    },
    accept_diff = {
      normal = &#39;&amp;lt;C-y&amp;gt;&#39;,
      insert = &#39;&amp;lt;C-y&amp;gt;&#39;,
    },
    jump_to_diff = {
      normal = &#39;gj&#39;,
    },
    quickfix_answers = {
      normal = &#39;gqa&#39;,
    },
    quickfix_diffs = {
      normal = &#39;gqd&#39;,
    },
    yank_diff = {
      normal = &#39;gy&#39;,
      register = &#39;&quot;&#39;, -- Default register to use for yanking
    },
    show_diff = {
      normal = &#39;gd&#39;,
      full_diff = false, -- Show full diff instead of unified diff when showing diff window
    },
    show_info = {
      normal = &#39;gi&#39;,
    },
    show_context = {
      normal = &#39;gc&#39;,
    },
    show_help = {
      normal = &#39;gh&#39;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customizing Buffers&lt;/h2&gt; 
&lt;p&gt;Types of copilot buffers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot-chat&lt;/code&gt; - Main chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;copilot-overlay&lt;/code&gt; - Overlay buffers (e.g. help, info, diff)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can set local options for plugin buffers like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;BufEnter&#39;, {
    pattern = &#39;copilot-*&#39;,
    callback = function()
        -- Set buffer-local options
        vim.opt_local.relativenumber = false
        vim.opt_local.number = false
        vim.opt_local.conceallevel = 0
    end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customizing Highlights&lt;/h2&gt; 
&lt;p&gt;Types of copilot highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHeader&lt;/code&gt; - Header highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSeparator&lt;/code&gt; - Separator highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatStatus&lt;/code&gt; - Status and spinner in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHelp&lt;/code&gt; - Help messages in chat buffer (help, references)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSelection&lt;/code&gt; - Selection highlight in source buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatKeyword&lt;/code&gt; - Keyword highlight in chat buffer (e.g. prompts, contexts)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatInput&lt;/code&gt; - Input highlight in chat buffer (for contexts)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;API Reference&lt;/h1&gt; 
&lt;h2&gt;Core&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local chat = require(&quot;CopilotChat&quot;)

-- Basic Chat Functions
chat.ask(prompt, config)      -- Ask a question with optional config
chat.response()               -- Get the last response text
chat.resolve_prompt()         -- Resolve prompt references
chat.resolve_context()        -- Resolve context embeddings (WARN: async, requires plenary.async.run)
chat.resolve_agent()          -- Resolve agent from prompt (WARN: async, requires plenary.async.run)
chat.resolve_model()          -- Resolve model from prompt (WARN: async, requires plenary.async.run)

-- Window Management
chat.open(config)             -- Open chat window with optional config
chat.close()                  -- Close chat window
chat.toggle(config)           -- Toggle chat window visibility with optional config
chat.reset()                  -- Reset the chat
chat.stop()                   -- Stop current output

-- Source Management
chat.get_source()             -- Get the current source buffer and window
chat.set_source(winnr)        -- Set the source window

-- Selection Management
chat.get_selection()                                   -- Get the current selection
chat.set_selection(bufnr, start_line, end_line, clear) -- Set or clear selection

-- Prompt &amp;amp; Context Management
chat.select_prompt(config)    -- Open prompt selector with optional config
chat.select_model()           -- Open model selector
chat.select_agent()           -- Open agent selector
chat.prompts()                -- Get all available prompts

-- Completion
chat.trigger_complete()       -- Trigger completion in chat window
chat.complete_info()          -- Get completion info for custom providers
chat.complete_items()         -- Get completion items (WARN: async, requires plenary.async.run)

-- History Management
chat.save(name, history_path) -- Save chat history
chat.load(name, history_path) -- Load chat history

-- Configuration
chat.setup(config)            -- Update configuration
chat.log_level(level)         -- Set log level (debug, info, etc.)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Chat Window&lt;/h2&gt; 
&lt;p&gt;You can also access the chat window UI methods through the &lt;code&gt;chat.chat&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local window = require(&quot;CopilotChat&quot;).chat

-- Chat UI State
window:visible()             -- Check if chat window is visible
window:focused()             -- Check if chat window is focused

-- Content Management
window:get_prompt()          -- Get current prompt from chat window
window:set_prompt(prompt)    -- Set prompt in chat window
window:add_sticky(sticky)    -- Add sticky prompt to chat window
window:append(text)          -- Append text to chat window
window:clear()               -- Clear chat window content
window:finish()              -- Finish writing to chat window

-- Navigation
window:follow()              -- Move cursor to end of chat content
window:focus()               -- Focus the chat window

-- Advanced Features
window:get_closest_section() -- Get section closest to cursor
window:get_closest_block()   -- Get code block closest to cursor
window:overlay(opts)         -- Show overlay with specified options
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Open chat, ask a question and handle response
require(&quot;CopilotChat&quot;).open()
require(&quot;CopilotChat&quot;).ask(&quot;Explain this code&quot;, {
  callback = function(response)
    vim.notify(&quot;Got response: &quot; .. response:sub(1, 50) .. &quot;...&quot;)
    return response
  end,
  context = &quot;buffer&quot;
})

-- Save and load chat history
require(&quot;CopilotChat&quot;).save(&quot;my_debugging_session&quot;)
require(&quot;CopilotChat&quot;).load(&quot;my_debugging_session&quot;)

-- Use custom context and model
require(&quot;CopilotChat&quot;).ask(&quot;How can I optimize this?&quot;, {
  model = &quot;gpt-4o&quot;,
  context = {&quot;buffer&quot;, &quot;git:staged&quot;}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more examples, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/wiki/Examples-and-Tips&quot;&gt;examples wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;To set up the environment:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
cd CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Install development dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install pre-commit hooks
make install-pre-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create your feature branch&lt;/li&gt; 
 &lt;li&gt;Make your changes&lt;/li&gt; 
 &lt;li&gt;Run tests and lint checks&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gptlang&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/121417512?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;gptlang&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;gptlang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://productsway.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/870029?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dung Duc Huynh (Kaka)&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dung Duc Huynh (Kaka)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qoobes.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/58834655?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahmed Haracic&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ahmed Haracic&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=qoobes&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://youtube.com/@ziontee113&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/102876811?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Trí Thiện Nguyễn&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Trí Thiện Nguyễn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ziontee113&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Cassius0924&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62874592?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;He Zhizhou&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;He Zhizhou&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Cassius0924&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/guruprakashrajakkannu/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9963717?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Guruprakash Rajakkannu&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Guruprakash Rajakkannu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rguruprakash&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kristofka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/140354?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;kristofka&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;kristofka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kristofka&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PostCyberPunk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/134976996?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;PostCyberPunk&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;PostCyberPunk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PostCyberPunk&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ktns&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1302759?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Katsuhiko Nishimra&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Katsuhiko Nishimra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ktns&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/errnoh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/373946?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Erno Hopearuoho&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Erno Hopearuoho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=errnoh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shaungarwood&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4156525?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shaun Garwood&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shaun Garwood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=shaungarwood&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/neutrinoA4&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/122616073?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;neutrinoA4&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;neutrinoA4&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/banjocat&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3247309?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jack Muratore&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jack Muratore&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=banjocat&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AdrielVelazquez&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3443378?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Adriel Velazquez&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adriel Velazquez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/deathbeam&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5115805?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomas Slusny&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tomas Slusny&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://nisalvd.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30633436?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nisal&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nisal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nisalVD&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.gaardhus.dk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46934916?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tobias Gårdhus&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tobias Gårdhus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gaardhus&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.patreon.com/PetrDlouhy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/156755?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Petr Dlouhý&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Petr Dlouhý&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PetrDlouhy&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.dylanmadisetti.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2689338?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dylan Madisetti&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dylan Madisetti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dmadisetti&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/aweis89&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5186956?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaron Weisberg&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aaron Weisberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tlacuilose&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65783495?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jose Tlacuilo&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jose Tlacuilo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://kevintraver.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/196406?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kevin Traver&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kevin Traver&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/D7ry&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/92609548?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;dTry&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;dTry&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=D7ry&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://blog.ornew.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19766770?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Arata Furukawa&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Arata Furukawa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ornew&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lingjie00&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64540764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ling&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ling&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lingjie00&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/frolvanya&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/59515280?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ivan Frolov&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ivan Frolov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=frolvanya&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.folkelemaitre.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/292349?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Folke Lemaitre&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Folke Lemaitre&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/GitMurf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64155612?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;GitMurf&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;GitMurf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=GitMurf&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://dimalip.in&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6877858?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dmitrii Lipin&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dmitrii Lipin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=festeh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nvimer.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/41784264?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;jinzhongjia&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;jinzhongjia&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jinzhongjia&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/guill&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3157454?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;guill&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;guill&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=guill&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sjonpaulbrown-cc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/81941908?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sjon-Paul Brown&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sjon-Paul Brown&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=sjonpaulbrown-cc&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/renxzen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13023797?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Renzo Mondragón&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Renzo Mondragón&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/fjchen7&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10106636?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;fjchen7&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;fjchen7&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=fjchen7&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/radwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/184065?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Radosław Woźniak&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Radosław Woźniak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=radwo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/JakubPecenka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/87969308?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JakubPecenka&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JakubPecenka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=JakubPecenka&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/thomastthai&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16532581?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;thomastthai&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;thomastthai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=thomastthai&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://lisk.in/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/300342?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomáš Janoušek&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tomáš Janoušek&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=liskin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Moriango&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43554061?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Toddneal Stallworth&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Toddneal Stallworth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Moriango&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/taketwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1241736?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sergey Alexandrov&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sergey Alexandrov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=taketwo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lemeb&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7331643?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Léopold Mebazaa&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Léopold Mebazaa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lemeb&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://atko.space&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14937572?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JunKi Jin&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JunKi Jin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=atkodev&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/abdennourzahaf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62243290?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;abdennourzahaf&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;abdennourzahaf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=abdennourzahaf&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/josiahdenton&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44758384?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Josiah&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Josiah&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=josiahdenton&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tku137&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3052212?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tony Fischer&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tony Fischer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qiita.com/program3152019&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64008205?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kohei Wada&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kohei Wada&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Kohei-Wada&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://zags.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/79172513?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sebastian Yaghoubi&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sebastian Yaghoubi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=syaghoubi00&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/johncming&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11719334?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;johncming&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;johncming&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=johncming&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dzonatan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5166666?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rokas Brazdžionis&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rokas Brazdžionis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dzonatan&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/unlimitedsola&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3632663?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sola&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sola&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ThisIsMani&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/84711804?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mani Chandra&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mani Chandra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ThisIsMani&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; 
&lt;h1&gt;Stargazers&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg?variant=adaptive&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NeogitOrg/neogit</title>
      <link>https://github.com/NeogitOrg/neogit</link>
      <description>&lt;p&gt;An interactive and powerful Git interface for Neovim, inspired by Magit&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   &lt;img src=&quot;https://github.com/NeogitOrg/neogit/assets/7228095/7684545f-47b5-40e2-aedd-ccf56e0553f4&quot; width=&quot;400px&quot;&gt;
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;h1&gt;Neogit&lt;/h1&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;strong&gt;A git interface for &lt;a href=&quot;https://neovim.io&quot;&gt;Neovim&lt;/a&gt;, inspired by &lt;a href=&quot;https://magit.vc&quot;&gt;Magit&lt;/a&gt;.&lt;/strong&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;p&gt;&lt;a href=&quot;http://www.lua.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&quot; alt=&quot;Lua&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://neovim.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim%200.10+-green.svg?style=for-the-badge&amp;amp;logo=neovim&quot; alt=&quot;Neovim&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/MIT-yellow.svg?style=for-the-badge&quot; alt=&quot;MIT&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/NeogitOrg/neogit&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/NeogitOrg/neogit/shield?style=for-the-badge&quot;&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/NeogitOrg/neogit/assets/7228095/d964cbb4-a557-4e97-ac5b-ea571a001f5c&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Here&#39;s an example spec for &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;Lazy&lt;/a&gt;, but you&#39;re free to use whichever plugin manager suits you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;NeogitOrg/neogit&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,         -- required
    &quot;sindrets/diffview.nvim&quot;,        -- optional - Diff integration

    -- Only one of these is needed.
    &quot;nvim-telescope/telescope.nvim&quot;, -- optional
    &quot;ibhagwan/fzf-lua&quot;,              -- optional
    &quot;echasnovski/mini.pick&quot;,         -- optional
  },
  config = true
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re not using lazy, you&#39;ll need to require and setup the plugin like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- init.lua
local neogit = require(&#39;neogit&#39;)
neogit.setup {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch will always be compatible with the latest &lt;strong&gt;stable&lt;/strong&gt; release of Neovim, and usually with the latest &lt;strong&gt;nightly&lt;/strong&gt; build as well.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;You can configure neogit by running the &lt;code&gt;neogit.setup()&lt;/code&gt; function, passing a table as the argument.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default Config&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local neogit = require(&quot;neogit&quot;)

neogit.setup {
  -- Hides the hints at the top of the status buffer
  disable_hint = false,
  -- Disables changing the buffer highlights based on where the cursor is.
  disable_context_highlighting = false,
  -- Disables signs for sections/items/hunks
  disable_signs = false,
  -- Offer to force push when branches diverge
  prompt_force_push = true,
  -- Changes what mode the Commit Editor starts in. `true` will leave nvim in normal mode, `false` will change nvim to
  -- insert mode, and `&quot;auto&quot;` will change nvim to insert mode IF the commit message is empty, otherwise leaving it in
  -- normal mode.
  disable_insert_on_commit = &quot;auto&quot;,
  -- When enabled, will watch the `.git/` directory for changes and refresh the status buffer in response to filesystem
  -- events.
  filewatcher = {
    interval = 1000,
    enabled = true,
  },
  -- &quot;ascii&quot;   is the graph the git CLI generates
  -- &quot;unicode&quot; is the graph like https://github.com/rbong/vim-flog
  -- &quot;kitty&quot;   is the graph like https://github.com/isakbm/gitgraph.nvim - use https://github.com/rbong/flog-symbols if you don&#39;t use Kitty
  graph_style = &quot;ascii&quot;,
  -- Show relative date by default. When set, use `strftime` to display dates
  commit_date_format = nil,
  log_date_format = nil,
  -- Show message with spinning animation when a git command is running.
  process_spinner = false,
  -- Used to generate URL&#39;s for branch popup action &quot;pull request&quot;.
  git_services = {
    [&quot;github.com&quot;] = &quot;https://github.com/${owner}/${repository}/compare/${branch_name}?expand=1&quot;,
    [&quot;bitbucket.org&quot;] = &quot;https://bitbucket.org/${owner}/${repository}/pull-requests/new?source=${branch_name}&amp;amp;t=1&quot;,
    [&quot;gitlab.com&quot;] = &quot;https://gitlab.com/${owner}/${repository}/merge_requests/new?merge_request[source_branch]=${branch_name}&quot;,
    [&quot;azure.com&quot;] = &quot;https://dev.azure.com/${owner}/_git/${repository}/pullrequestcreate?sourceRef=${branch_name}&amp;amp;targetRef=${target}&quot;,
  },
  -- Allows a different telescope sorter. Defaults to &#39;fuzzy_with_index_bias&#39;. The example below will use the native fzf
  -- sorter instead. By default, this function returns `nil`.
  telescope_sorter = function()
    return require(&quot;telescope&quot;).extensions.fzf.native_fzf_sorter()
  end,
  -- Persist the values of switches/options within and across sessions
  remember_settings = true,
  -- Scope persisted settings on a per-project basis
  use_per_project_settings = true,
  -- Table of settings to never persist. Uses format &quot;Filetype--cli-value&quot;
  ignored_settings = {
    &quot;NeogitPushPopup--force-with-lease&quot;,
    &quot;NeogitPushPopup--force&quot;,
    &quot;NeogitPullPopup--rebase&quot;,
    &quot;NeogitCommitPopup--allow-empty&quot;,
    &quot;NeogitRevertPopup--no-edit&quot;,
  },
  -- Configure highlight group features
  highlight = {
    italic = true,
    bold = true,
    underline = true
  },
  -- Set to false if you want to be responsible for creating _ALL_ keymappings
  use_default_keymaps = true,
  -- Neogit refreshes its internal state after specific events, which can be expensive depending on the repository size.
  -- Disabling `auto_refresh` will make it so you have to manually refresh the status after you open it.
  auto_refresh = true,
  -- Value used for `--sort` option for `git branch` command
  -- By default, branches will be sorted by commit date descending
  -- Flag description: https://git-scm.com/docs/git-branch#Documentation/git-branch.txt---sortltkeygt
  -- Sorting keys: https://git-scm.com/docs/git-for-each-ref#_options
  sort_branches = &quot;-committerdate&quot;,
  -- Default for new branch name prompts
  initial_branch_name = &quot;&quot;,
  -- Change the default way of opening neogit
  kind = &quot;tab&quot;,
  -- Disable line numbers
  disable_line_numbers = true,
  -- Disable relative line numbers
  disable_relative_line_numbers = true,
  -- The time after which an output console is shown for slow running commands
  console_timeout = 2000,
  -- Automatically show console if a command takes more than console_timeout milliseconds
  auto_show_console = true,
  -- Automatically close the console if the process exits with a 0 (success) status
  auto_close_console = true,
  notification_icon = &quot;󰊢&quot;,
  status = {
    show_head_commit_hash = true,
    recent_commit_count = 10,
    HEAD_padding = 10,
    HEAD_folded = false,
    mode_padding = 3,
    mode_text = {
      M = &quot;modified&quot;,
      N = &quot;new file&quot;,
      A = &quot;added&quot;,
      D = &quot;deleted&quot;,
      C = &quot;copied&quot;,
      U = &quot;updated&quot;,
      R = &quot;renamed&quot;,
      DD = &quot;unmerged&quot;,
      AU = &quot;unmerged&quot;,
      UD = &quot;unmerged&quot;,
      UA = &quot;unmerged&quot;,
      DU = &quot;unmerged&quot;,
      AA = &quot;unmerged&quot;,
      UU = &quot;unmerged&quot;,
      [&quot;?&quot;] = &quot;&quot;,
    },
  },
  commit_editor = {
    kind = &quot;tab&quot;,
    show_staged_diff = true,
    -- Accepted values:
    -- &quot;split&quot; to show the staged diff below the commit editor
    -- &quot;vsplit&quot; to show it to the right
    -- &quot;split_above&quot; Like :top split
    -- &quot;vsplit_left&quot; like :vsplit, but open to the left
    -- &quot;auto&quot; &quot;vsplit&quot; if window would have 80 cols, otherwise &quot;split&quot;
    staged_diff_split_kind = &quot;split&quot;,
    spell_check = true,
  },
  commit_select_view = {
    kind = &quot;tab&quot;,
  },
  commit_view = {
    kind = &quot;vsplit&quot;,
    verify_commit = vim.fn.executable(&quot;gpg&quot;) == 1, -- Can be set to true or false, otherwise we try to find the binary
  },
  log_view = {
    kind = &quot;tab&quot;,
  },
  rebase_editor = {
    kind = &quot;auto&quot;,
  },
  reflog_view = {
    kind = &quot;tab&quot;,
  },
  merge_editor = {
    kind = &quot;auto&quot;,
  },
  description_editor = {
    kind = &quot;auto&quot;,
  },
  tag_editor = {
    kind = &quot;auto&quot;,
  },
  preview_buffer = {
    kind = &quot;floating_console&quot;,
  },
  popup = {
    kind = &quot;split&quot;,
  },
  stash = {
    kind = &quot;tab&quot;,
  },
  refs_view = {
    kind = &quot;tab&quot;,
  },
  signs = {
    -- { CLOSED, OPENED }
    hunk = { &quot;&quot;, &quot;&quot; },
    item = { &quot;&amp;gt;&quot;, &quot;v&quot; },
    section = { &quot;&amp;gt;&quot;, &quot;v&quot; },
  },
  -- Each Integration is auto-detected through plugin presence, however, it can be disabled by setting to `false`
  integrations = {
    -- If enabled, use telescope for menu selection rather than vim.ui.select.
    -- Allows multi-select and some things that vim.ui.select doesn&#39;t.
    telescope = nil,
    -- Neogit only provides inline diffs. If you want a more traditional way to look at diffs, you can use `diffview`.
    -- The diffview integration enables the diff popup.
    --
    -- Requires you to have `sindrets/diffview.nvim` installed.
    diffview = nil,

    -- If enabled, uses fzf-lua for menu selection. If the telescope integration
    -- is also selected then telescope is used instead
    -- Requires you to have `ibhagwan/fzf-lua` installed.
    fzf_lua = nil,

    -- If enabled, uses mini.pick for menu selection. If the telescope integration
    -- is also selected then telescope is used instead
    -- Requires you to have `echasnovski/mini.pick` installed.
    mini_pick = nil,
  },
  sections = {
    -- Reverting/Cherry Picking
    sequencer = {
      folded = false,
      hidden = false,
    },
    untracked = {
      folded = false,
      hidden = false,
    },
    unstaged = {
      folded = false,
      hidden = false,
    },
    staged = {
      folded = false,
      hidden = false,
    },
    stashes = {
      folded = true,
      hidden = false,
    },
    unpulled_upstream = {
      folded = true,
      hidden = false,
    },
    unmerged_upstream = {
      folded = false,
      hidden = false,
    },
    unpulled_pushRemote = {
      folded = true,
      hidden = false,
    },
    unmerged_pushRemote = {
      folded = false,
      hidden = false,
    },
    recent = {
      folded = true,
      hidden = false,
    },
    rebase = {
      folded = true,
      hidden = false,
    },
  },
  mappings = {
    commit_editor = {
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
      [&quot;&amp;lt;m-p&amp;gt;&quot;] = &quot;PrevMessage&quot;,
      [&quot;&amp;lt;m-n&amp;gt;&quot;] = &quot;NextMessage&quot;,
      [&quot;&amp;lt;m-r&amp;gt;&quot;] = &quot;ResetMessage&quot;,
    },
    commit_editor_I = {
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
    },
    rebase_editor = {
      [&quot;p&quot;] = &quot;Pick&quot;,
      [&quot;r&quot;] = &quot;Reword&quot;,
      [&quot;e&quot;] = &quot;Edit&quot;,
      [&quot;s&quot;] = &quot;Squash&quot;,
      [&quot;f&quot;] = &quot;Fixup&quot;,
      [&quot;x&quot;] = &quot;Execute&quot;,
      [&quot;d&quot;] = &quot;Drop&quot;,
      [&quot;b&quot;] = &quot;Break&quot;,
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;OpenCommit&quot;,
      [&quot;gk&quot;] = &quot;MoveUp&quot;,
      [&quot;gj&quot;] = &quot;MoveDown&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
      [&quot;[c&quot;] = &quot;OpenOrScrollUp&quot;,
      [&quot;]c&quot;] = &quot;OpenOrScrollDown&quot;,
    },
    rebase_editor_I = {
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
    },
    finder = {
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;Select&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;c-n&amp;gt;&quot;] = &quot;Next&quot;,
      [&quot;&amp;lt;c-p&amp;gt;&quot;] = &quot;Previous&quot;,
      [&quot;&amp;lt;down&amp;gt;&quot;] = &quot;Next&quot;,
      [&quot;&amp;lt;up&amp;gt;&quot;] = &quot;Previous&quot;,
      [&quot;&amp;lt;tab&amp;gt;&quot;] = &quot;InsertCompletion&quot;,
      [&quot;&amp;lt;space&amp;gt;&quot;] = &quot;MultiselectToggleNext&quot;,
      [&quot;&amp;lt;s-space&amp;gt;&quot;] = &quot;MultiselectTogglePrevious&quot;,
      [&quot;&amp;lt;c-j&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;ScrollWheelDown&amp;gt;&quot;] = &quot;ScrollWheelDown&quot;,
      [&quot;&amp;lt;ScrollWheelUp&amp;gt;&quot;] = &quot;ScrollWheelUp&quot;,
      [&quot;&amp;lt;ScrollWheelLeft&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;ScrollWheelRight&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;LeftMouse&amp;gt;&quot;] = &quot;MouseClick&quot;,
      [&quot;&amp;lt;2-LeftMouse&amp;gt;&quot;] = &quot;NOP&quot;,
    },
    -- Setting any of these to `false` will disable the mapping.
    popup = {
      [&quot;?&quot;] = &quot;HelpPopup&quot;,
      [&quot;A&quot;] = &quot;CherryPickPopup&quot;,
      [&quot;d&quot;] = &quot;DiffPopup&quot;,
      [&quot;M&quot;] = &quot;RemotePopup&quot;,
      [&quot;P&quot;] = &quot;PushPopup&quot;,
      [&quot;X&quot;] = &quot;ResetPopup&quot;,
      [&quot;Z&quot;] = &quot;StashPopup&quot;,
      [&quot;i&quot;] = &quot;IgnorePopup&quot;,
      [&quot;t&quot;] = &quot;TagPopup&quot;,
      [&quot;b&quot;] = &quot;BranchPopup&quot;,
      [&quot;B&quot;] = &quot;BisectPopup&quot;,
      [&quot;w&quot;] = &quot;WorktreePopup&quot;,
      [&quot;c&quot;] = &quot;CommitPopup&quot;,
      [&quot;f&quot;] = &quot;FetchPopup&quot;,
      [&quot;l&quot;] = &quot;LogPopup&quot;,
      [&quot;m&quot;] = &quot;MergePopup&quot;,
      [&quot;p&quot;] = &quot;PullPopup&quot;,
      [&quot;r&quot;] = &quot;RebasePopup&quot;,
      [&quot;v&quot;] = &quot;RevertPopup&quot;,
    },
    status = {
      [&quot;j&quot;] = &quot;MoveDown&quot;,
      [&quot;k&quot;] = &quot;MoveUp&quot;,
      [&quot;o&quot;] = &quot;OpenTree&quot;,
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;I&quot;] = &quot;InitRepo&quot;,
      [&quot;1&quot;] = &quot;Depth1&quot;,
      [&quot;2&quot;] = &quot;Depth2&quot;,
      [&quot;3&quot;] = &quot;Depth3&quot;,
      [&quot;4&quot;] = &quot;Depth4&quot;,
      [&quot;Q&quot;] = &quot;Command&quot;,
      [&quot;&amp;lt;tab&amp;gt;&quot;] = &quot;Toggle&quot;,
      [&quot;x&quot;] = &quot;Discard&quot;,
      [&quot;s&quot;] = &quot;Stage&quot;,
      [&quot;S&quot;] = &quot;StageUnstaged&quot;,
      [&quot;&amp;lt;c-s&amp;gt;&quot;] = &quot;StageAll&quot;,
      [&quot;u&quot;] = &quot;Unstage&quot;,
      [&quot;K&quot;] = &quot;Untrack&quot;,
      [&quot;U&quot;] = &quot;UnstageStaged&quot;,
      [&quot;y&quot;] = &quot;ShowRefs&quot;,
      [&quot;$&quot;] = &quot;CommandHistory&quot;,
      [&quot;Y&quot;] = &quot;YankSelected&quot;,
      [&quot;&amp;lt;c-r&amp;gt;&quot;] = &quot;RefreshBuffer&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;GoToFile&quot;,
      [&quot;&amp;lt;s-cr&amp;gt;&quot;] = &quot;PeekFile&quot;,
      [&quot;&amp;lt;c-v&amp;gt;&quot;] = &quot;VSplitOpen&quot;,
      [&quot;&amp;lt;c-x&amp;gt;&quot;] = &quot;SplitOpen&quot;,
      [&quot;&amp;lt;c-t&amp;gt;&quot;] = &quot;TabOpen&quot;,
      [&quot;{&quot;] = &quot;GoToPreviousHunkHeader&quot;,
      [&quot;}&quot;] = &quot;GoToNextHunkHeader&quot;,
      [&quot;[c&quot;] = &quot;OpenOrScrollUp&quot;,
      [&quot;]c&quot;] = &quot;OpenOrScrollDown&quot;,
      [&quot;&amp;lt;c-k&amp;gt;&quot;] = &quot;PeekUp&quot;,
      [&quot;&amp;lt;c-j&amp;gt;&quot;] = &quot;PeekDown&quot;,
      [&quot;&amp;lt;c-n&amp;gt;&quot;] = &quot;NextSection&quot;,
      [&quot;&amp;lt;c-p&amp;gt;&quot;] = &quot;PreviousSection&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;You can either open Neogit by using the &lt;code&gt;Neogit&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:Neogit             &quot; Open the status buffer in a new tab
:Neogit cwd=&amp;lt;cwd&amp;gt;   &quot; Use a different repository path
:Neogit cwd=%:p:h   &quot; Uses the repository of the current file
:Neogit kind=&amp;lt;kind&amp;gt; &quot; Open specified popup directly
:Neogit commit      &quot; Open commit popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or using the lua api:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local neogit = require(&#39;neogit&#39;)

-- open using defaults
neogit.open()

-- open a specific popup
neogit.open({ &quot;commit&quot; })

-- open as a split
neogit.open({ kind = &quot;split&quot; })

-- open with different project
neogit.open({ cwd = &quot;~&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;kind&lt;/code&gt; option can be one of the following values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tab&lt;/code&gt; (default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_above&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_above_all&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_below&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_below_all&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vsplit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;floating&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;auto&lt;/code&gt; (&lt;code&gt;vsplit&lt;/code&gt; if window would have 80 cols, otherwise &lt;code&gt;split&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Popups&lt;/h2&gt; 
&lt;p&gt;The following popup menus are available from all buffers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bisect&lt;/li&gt; 
 &lt;li&gt;Branch + Branch Config&lt;/li&gt; 
 &lt;li&gt;Cherry Pick&lt;/li&gt; 
 &lt;li&gt;Commit&lt;/li&gt; 
 &lt;li&gt;Diff&lt;/li&gt; 
 &lt;li&gt;Fetch&lt;/li&gt; 
 &lt;li&gt;Ignore&lt;/li&gt; 
 &lt;li&gt;Log&lt;/li&gt; 
 &lt;li&gt;Merge&lt;/li&gt; 
 &lt;li&gt;Pull&lt;/li&gt; 
 &lt;li&gt;Push&lt;/li&gt; 
 &lt;li&gt;Rebase&lt;/li&gt; 
 &lt;li&gt;Remote + Remote Config&lt;/li&gt; 
 &lt;li&gt;Reset&lt;/li&gt; 
 &lt;li&gt;Revert&lt;/li&gt; 
 &lt;li&gt;Stash&lt;/li&gt; 
 &lt;li&gt;Tag&lt;/li&gt; 
 &lt;li&gt;Worktree&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Many popups will use whatever is currently under the cursor or selected as input for an action. For example, to cherry-pick a range of commits from the log view, a linewise visual selection can be made, and using either &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;pick&lt;/code&gt; from the cherry-pick menu will use the selection.&lt;/p&gt; 
&lt;p&gt;This works for just about everything that has an object-ID in git, and if you find one that you think &lt;em&gt;should&lt;/em&gt; work but doesn&#39;t, open an issue :)&lt;/p&gt; 
&lt;h2&gt;Highlight Groups&lt;/h2&gt; 
&lt;p&gt;See the built-in documentation for a comprehensive list of highlight groups. If your theme doesn&#39;t style a particular group, we&#39;ll try our best to do a nice job.&lt;/p&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;Neogit emits the following events:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Event&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Event Data&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitStatusRefreshed&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Status has been reloaded&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitCommitComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Commit has been created&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitPushComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Push has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitPullComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pull has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitFetchComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetch has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchCreate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was created, starting from &lt;code&gt;base&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, base: string? }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchDelete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was deleted&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchCheckout&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was checked out&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was reset to a commit/branch&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, resetting_to: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchRename&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was renamed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, new_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitRebase&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A rebase finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commit: string, status: &quot;ok&quot;|&quot;conflict&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A branch was reset to a certain commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commit: string, mode: &quot;soft&quot;|&quot;mixed&quot;|&quot;hard&quot;|&quot;keep&quot;|&quot;index&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitTagCreate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A tag was placed on a certain commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ name: string, ref: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitTagDelete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A tag was removed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitCherryPick&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;One or more commits were cherry-picked&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commits: string[] }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitMerge&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A merge finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch: string, args = string[], status: &quot;ok&quot;|&quot;conflict&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitStash&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A stash finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ success: boolean }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;Neogit follows semantic versioning.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/NeogitOrg/neogit/raw/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kolja&quot;&gt;kolja&lt;/a&gt; for the Neogit Logo&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; for the &quot;kitty&quot; git graph renderer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rbong/vim-flog&quot;&gt;vim-flog&lt;/a&gt; for the &quot;unicode&quot; git graph renderer&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>neovim/nvim-lspconfig</title>
      <link>https://github.com/neovim/nvim-lspconfig</link>
      <description>&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; 
&lt;p&gt;nvim-lspconfig is a &quot;data only&quot; repo, providing basic, default &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;Nvim LSP client&lt;/a&gt; configurations for various LSP servers.&lt;/p&gt; 
&lt;p&gt;View the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;documentation for all configs&lt;/a&gt; or &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; 
&lt;h2&gt;Important ⚠️&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you found a bug in the Nvim LSP functionality (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;These configs are &lt;strong&gt;best-effort and supported by the community.&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&quot;&gt;contributions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repo only provides &lt;em&gt;configurations&lt;/em&gt;. Its programmatic API is deprecated and should not be used externally. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/issues/28479&quot;&gt;Work is planned&lt;/a&gt; to selectively upstream the &quot;framework&quot; parts (&lt;em&gt;not&lt;/em&gt; the configs) of nvim-lspconfig, to Nvim core, and deprecate them in nvim-lspconfig.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neovim/nvim-lspconfig&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Nvim 0.9 above. Update Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; 
 &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &quot;packages&quot; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or use a 3rd-party plugin manager (consult the documentation for your plugin manager).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install a language server, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&quot;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g pyright
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add the language server setup to your init.lua. &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&#39;lspconfig&#39;.pyright.setup{}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure your project/workspace contains a root marker which matches the server requirements specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Read &lt;code&gt;:help lspconfig&lt;/code&gt; for details. Read &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter when calling &lt;code&gt;setup()&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Nvim sets some default options and mappings when a buffer attaches to LSP (see &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;&lt;code&gt;:help lsp-config&lt;/code&gt;&lt;/a&gt;). In particular:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/tagsrch.html#tag-function&quot;&gt;&lt;code&gt;&#39;tagfunc&#39;&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Enables &quot;go to definition&quot; capabilities using &lt;a href=&quot;https://neovim.io/doc/user/tagsrch.html#CTRL-%5D&quot;&gt;&lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt;&lt;/a&gt; and other &lt;a href=&quot;https://neovim.io/doc/user/tagsrch.html#tag-commands&quot;&gt;tag commands&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;omnifunc&#39;&quot;&gt;&lt;code&gt;&#39;omnifunc&#39;&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Enables (manual) omni mode completion with &lt;code&gt;&amp;lt;C-X&amp;gt;&amp;lt;C-O&amp;gt;&lt;/code&gt; in Insert mode. For &lt;em&gt;auto&lt;/em&gt;completion, an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&quot;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;formatexpr&#39;&quot;&gt;&lt;code&gt;&#39;formatexpr&#39;&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Enables LSP formatting with &lt;a href=&quot;https://neovim.io/doc/user/change.html#gq&quot;&gt;&lt;code&gt;gq&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;K&lt;/code&gt; maps to &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.hover()&quot;&gt;&lt;code&gt;vim.lsp.buf.hover()&lt;/code&gt;&lt;/a&gt; in Normal mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[d&lt;/code&gt; and &lt;code&gt;]d&lt;/code&gt; map to &lt;code&gt;vim.diagnostic.goto_prev()&lt;/code&gt; and &lt;code&gt;vim.diagnostic.goto_next()&lt;/code&gt;, respectively.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-W&amp;gt;d&lt;/code&gt; maps to &lt;code&gt;vim.diagnostic.open_float()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Further customization can be achieved using the &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspAttach&quot;&gt;&lt;code&gt;LspAttach&lt;/code&gt;&lt;/a&gt; autocommand event. The &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspAttach&quot;&gt;&lt;code&gt;LspDetach&lt;/code&gt;&lt;/a&gt; autocommand event can be used to &quot;cleanup&quot; mappings if a buffer becomes detached from an LSP server. See &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspAttach&quot;&gt;&lt;code&gt;:h LspAttach&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#LspDetach&quot;&gt;&lt;code&gt;:h LspDetach&lt;/code&gt;&lt;/a&gt; for details and examples. See &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-buf&quot;&gt;&lt;code&gt;:h lsp-buf&lt;/code&gt;&lt;/a&gt; for details on other LSP functions.&lt;/p&gt; 
&lt;p&gt;Additional configuration options can be provided for each LSP server by passing arguments to the &lt;code&gt;setup&lt;/code&gt; function. See &lt;code&gt;:h lspconfig-setup&lt;/code&gt; for details. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lspconfig = require(&#39;lspconfig&#39;)
lspconfig.rust_analyzer.setup {
  -- Server-specific settings. See `:help lspconfig-setup`
  settings = {
    [&#39;rust-analyzer&#39;] = {},
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s Lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/li&gt; 
 &lt;li&gt;Missing filetype plugins. Certain languages are not detecting by Vim/Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/li&gt; 
 &lt;li&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;doc/configs.md&lt;/a&gt; or the source for the list of root directories.&lt;/li&gt; 
 &lt;li&gt;You must pass &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.set_log_level(&quot;debug&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:LspLog
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (deprecated alias to &lt;code&gt;:che lspconfig&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt; ...]&lt;/code&gt; Stops the given server(s). Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt; ...]&lt;/code&gt; Restarts the given client(s), and attempts to reattach to all previously attached buffers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If a language server is missing from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a new file at &lt;code&gt;lua/lspconfig/configs/SERVER_NAME.lua&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Copy an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/configs/&quot;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/configs/texlab.lua&quot;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&quot;https://app.element.io/#/room/%23neovim:matrix.org&quot;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Release process&lt;/h3&gt; 
&lt;p&gt;To publish a release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and push a new &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tags&quot;&gt;tag&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;After pushing the tag, a &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&quot;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; 
&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ｜ AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;AI Gateway&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot;&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot;&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway – Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/LazyVim</title>
      <link>https://github.com/LazyVim/LazyVim</link>
      <description>&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&quot;&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;Install&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io/configuration&quot;&gt;Configure&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot;&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;💤 lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔥 Transform your Neovim into a full-fledged IDE&lt;/li&gt; 
 &lt;li&gt;💤 Easily customize and extend your config with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚀 Blazingly fast&lt;/li&gt; 
 &lt;li&gt;🧹 Sane default settings for options, autocmds, and keymaps&lt;/li&gt; 
 &lt;li&gt;📦 Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.9.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; compiler for &lt;code&gt;nvim-treesitter&lt;/code&gt;. See &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter#requirements&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Try it with Docker&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;
  apk add git lazygit fzf curl neovim ripgrep alpine-sdk --update
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  cd ~/.config/nvim
  nvim
&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Install the &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf ~/.config/nvim/.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;p&gt;There&#39;s a great video created by &lt;a href=&quot;https://github.com/elijahmanor&quot;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N93cTbtLCIM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&quot; alt=&quot;Watch the video&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dusty-phillips&quot;&gt;@dusty-phillips&lt;/a&gt; wrote a comprehensive book called &lt;a href=&quot;https://lazyvim-ambitious-devs.phillips.codes&quot;&gt;LazyVim for Ambitious Developers&lt;/a&gt; available for free online.&lt;/p&gt; 
&lt;h2&gt;📂 File Structure&lt;/h2&gt; 
&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&quot;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;
~/.config/nvim
├── lua
│&amp;nbsp;&amp;nbsp; ├── config
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── lazy.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── options.lua
│&amp;nbsp;&amp;nbsp; └── plugins
│&amp;nbsp;&amp;nbsp;     ├── spec1.lua
│&amp;nbsp;&amp;nbsp;     ├── **
│&amp;nbsp;&amp;nbsp;     └── spec2.lua
└── init.lua
&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>m4xshen/hardtime.nvim</title>
      <link>https://github.com/m4xshen/hardtime.nvim</link>
      <description>&lt;p&gt;Establish good command workflow and quit bad habit&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; hardtime.nvim &lt;/h1&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;div&gt;
  Establish good command workflow and quit bad habit.
 &lt;/div&gt;
 &lt;br&gt; 
 &lt;img src=&quot;https://github.com/m4xshen/hardtime.nvim/assets/74842863/117a8d30-64ba-4ca9-8414-5c493cbe8a70&quot; width=&quot;700&quot;&gt; 
&lt;/div&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Block repeated keys within a period of time&lt;/li&gt; 
 &lt;li&gt;Print hints about better commands eg: Use &lt;code&gt;ci&quot;&lt;/code&gt; instead of &lt;code&gt;di&quot;i&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Customizable options for restricted keys, disabled keys, etc.&lt;/li&gt; 
 &lt;li&gt;Get report for your most common bad habits for improvement&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Recommended workflow:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Avoid using the mouse and arrow keys if they are not at the home row of your keyboard.&lt;/li&gt; 
 &lt;li&gt;Use relative jump (eg: &lt;code&gt;5j&lt;/code&gt; &lt;code&gt;12-&lt;/code&gt;) for vertical movement within the screen.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;CTRL-U&lt;/code&gt; &lt;code&gt;CTRL-D&lt;/code&gt; &lt;code&gt;CTRL-B&lt;/code&gt; &lt;code&gt;CTRL-F&lt;/code&gt; &lt;code&gt;gg&lt;/code&gt; &lt;code&gt;G&lt;/code&gt; for vertical movement outside the screen.&lt;/li&gt; 
 &lt;li&gt;Use word-motion (&lt;code&gt;w&lt;/code&gt; &lt;code&gt;W&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;B&lt;/code&gt; &lt;code&gt;e&lt;/code&gt; &lt;code&gt;E&lt;/code&gt; &lt;code&gt;ge&lt;/code&gt; &lt;code&gt;gE&lt;/code&gt;) for short-distance horizontal movement.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;f&lt;/code&gt; &lt;code&gt;F&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;$&lt;/code&gt; for medium to long-distance horizontal movement.&lt;/li&gt; 
 &lt;li&gt;Use operator + motion/text-object (eg: &lt;code&gt;ci{&lt;/code&gt; &lt;code&gt;y5j&lt;/code&gt; &lt;code&gt;dap&lt;/code&gt;) whenever possible.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;%&lt;/code&gt; and square bracket commands (see &lt;code&gt;:h [&lt;/code&gt;) to jump between brackets.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Learn more in this &lt;a href=&quot;https://m4xshen.dev/posts/vim-command-workflow/&quot;&gt;blog post&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚡ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.10.0&quot;&gt;v0.10.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install via your favorite package manager.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- lazy.nvim
{
   &quot;m4xshen/hardtime.nvim&quot;,
   dependencies = { &quot;MunifTanjim/nui.nvim&quot; },
   opts = {}
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Setup the plugin in your &lt;code&gt;init.lua&lt;/code&gt;. This step is not needed with lazy.nvim if &lt;code&gt;opts&lt;/code&gt; is set as above.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;hardtime&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to see the hint messages in insert and visual mode, set the &lt;code&gt;&#39;showmode&#39;&lt;/code&gt; to false.&lt;/p&gt; 
&lt;p&gt;But if you want to see both the hint message and current mode you can setup with one of the following methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Display the mode on status line and set &lt;code&gt;&#39;showmode&#39;&lt;/code&gt; to false. You can do this with some statusline plugin such as lualine.nvim.&lt;/li&gt; 
 &lt;li&gt;Set the &lt;code&gt;&#39;cmdheight&#39;&lt;/code&gt; to 2 so that the hint message won&#39;t be replaced by mode message.&lt;/li&gt; 
 &lt;li&gt;Use nvim-notify to display hint messages on the right top corner instead of commandline.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;p&gt;hardtime.nvim is enabled by default. You can change its state with the following commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:Hardtime enable&lt;/code&gt; enable hardtime.nvim&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:Hardtime disable&lt;/code&gt; disable hardtime.nvim&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:Hardtime toggle&lt;/code&gt; toggle hardtime.nvim&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can view the most frequently seen hints with &lt;code&gt;:Hardtime report&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Your log file is at &lt;code&gt;~/.local/state/nvim/hardtime.nvim.log&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;🔧 Configuration&lt;/h2&gt; 
&lt;p&gt;You can pass your config table into the &lt;code&gt;setup()&lt;/code&gt; function or &lt;code&gt;opts&lt;/code&gt; if you use lazy.nvim.&lt;/p&gt; 
&lt;p&gt;If the option is a boolean, number, or array, your value will overwrite the default configuration.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Add &quot;oil&quot; to the disabled_filetypes
disabled_filetypes = { &quot;qf&quot;, &quot;netrw&quot;, &quot;NvimTree&quot;, &quot;lazy&quot;, &quot;mason&quot;, &quot;oil&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the option is a table with a &lt;code&gt;key = value&lt;/code&gt; pair, your value will overwrite the default if the key exists, and the pair will be appended to the default configuration if the key doesn&#39;t exist. You can set &lt;code&gt;key = {}&lt;/code&gt; to remove the default key-value pair.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Remove &amp;lt;Up&amp;gt; keys and append &amp;lt;Space&amp;gt; to the disabled_keys
disabled_keys = {
   [&quot;&amp;lt;Up&amp;gt;&quot;] = {},
   [&quot;&amp;lt;Space&amp;gt;&quot;] = { &quot;n&quot;, &quot;x&quot; },
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Options&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option Name&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Default Value&lt;/th&gt; 
   &lt;th&gt;Meaning&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;max_time&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum time (in milliseconds) to consider key presses as repeated.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;max_count&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum count of repeated key presses allowed within the &lt;code&gt;max_time&lt;/code&gt; period.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;disable_mouse&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Disable mouse support.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable hint messages for better commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;notification&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable notification messages for restricted and disabled keys.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allow_different_key&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow different keys to reset the count.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Whether the plugin is enabled by default or not.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;resetting_keys&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;table of strings/table pair&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&quot;&gt;See Config&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Keys in what modes that reset the count.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;restricted_keys&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;table of strings/table pair&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&quot;&gt;See Config&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Keys in what modes triggering the count mechanism.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;restriction_mode&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string (&lt;code&gt;&quot;block&quot; or &quot;hint&quot;&lt;/code&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&quot;block&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;The behavior when &lt;code&gt;restricted_keys&lt;/code&gt; trigger count mechanism.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;disabled_keys&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;table of strings/table pair&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&quot;&gt;See Config&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Keys in what modes are disabled.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;disabled_filetypes&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;table of strings&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&quot;&gt;See Config&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hardtime.nvim&lt;/code&gt; is disabled under these filetypes.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;hints&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;table&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&quot;&gt;See Config&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;key&lt;/code&gt; is a string pattern you want to match, &lt;code&gt;value&lt;/code&gt; is a table of hint message and pattern length. Learn more about &lt;a href=&quot;https://www.lua.org/pil/20.2.html&quot;&gt;Lua string pattern&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;callback&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;function(text)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;callback&lt;/code&gt; function can be used to override the default notification behavior.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;force_exit_insert_mode&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable forcing exit Insert mode if user is inactive in Insert mode.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;max_insert_idle_ms&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;number&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;5000&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum amount of idle time, in milliseconds, allowed in Insert mode.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ui&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;table of strings/table pair&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&quot;&gt;See Config&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;An option to customize the popup for the &lt;code&gt;Hardtime report&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;&lt;code&gt;hints&lt;/code&gt; example&lt;/h3&gt; 
&lt;p&gt;These are two default hints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hints = {
   [&quot;k%^&quot;] = {
      message = function()
         return &quot;Use - instead of k^&quot; -- return the hint message you want to display
      end,
      length = 2, -- the length of actual key strokes that matches this pattern
   },
   [&quot;d[tTfF].i&quot;] = { -- this matches d + {t/T/f/F} + {any character} + i
      message = function(keys) -- keys is a string of key strokes that matches the pattern
         return &quot;Use &quot; .. &quot;c&quot; .. keys:sub(2, 3) .. &quot; instead of &quot; .. keys
         -- example: Use ct( instead of dt(i
      end,
      length = 4,
   },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check out some examples of custom hint in &lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/discussions/categories/custom-hints&quot;&gt;discussion&lt;/a&gt;!&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&quot;&gt;Default config&lt;/a&gt;&lt;/h3&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;🦾 Contributing&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/raw/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;👥 Contributors&lt;/h2&gt; 
&lt;a href=&quot;https://github.com/m4xshen/hardtime.nvim/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=m4xshen/hardtime.nvim&quot;&gt; &lt;/a&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>MathIsFun0/Cryptid</title>
      <link>https://github.com/MathIsFun0/Cryptid</link>
      <description>&lt;p&gt;An unbalanced Balatro mod&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cryptid&lt;/h1&gt; 
&lt;p&gt;An unbalanced Balatro mod.&lt;/p&gt; 
&lt;p&gt;Note: Cryptid requires &lt;a href=&quot;https://github.com/Steamopollys/Steamodded/archive/refs/heads/main.zip&quot;&gt;Steamodded &lt;strong&gt;1.0.0~BETA-0314c&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/MathIsFun0/Talisman/releases/latest&quot;&gt;Talisman&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Cryptid currently adds: &lt;img src=&quot;https://github.com/user-attachments/assets/4a06c3ba-6df4-48af-a3b3-fdba4dd3125d&quot; alt=&quot;image&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/2bf58a78-7af9-45c5-930f-f8ac988c2126&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://discord.gg/cryptid&quot;&gt;Official Discord&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aUr0gXE77rk&quot;&gt;Video Installation Guide&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;Frequently asked questions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Credit to @jenwalter666 for creating this FAQ (forwarded from Cryptid Discord)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;General&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;My game is crashing on startup/something doesn&#39;t appear to be loading!&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Make sure everything is properly installed. For Talisman, the folder that contains Talisman should be named &lt;code&gt;Talisman&lt;/code&gt;. If you&#39;ve downloaded the source code from GitHub (by clicking on [Code] and then [Download ZIP]), the folder within the ZIP may be called &lt;code&gt;Talisman-main&lt;/code&gt;, which will cause a problem. Simply rename the folder(s) so that the &lt;code&gt;-main&lt;/code&gt; part of the name is removed, so that the folder is just called &lt;code&gt;Talisman&lt;/code&gt;. Whenever you are manually updating Talisman or Cryptid, or any other mod for that matter, it&#39;s a good approach to instead delete the contents of the folder, then install the contents of the folder from the ZIP into the existing folder to avoid having to constantly rename the folder over and over. For automatic updates, try using the &lt;a href=&quot;https://discord.com/channels/1264429948970733782/1268911536638787625&quot;&gt;automatic update script&lt;/a&gt;. It could also be that Steamodded is out of date, sometimes mods may use features of a new version that&#39;s absent in an older version, but don&#39;t change the version that they ask for. You can grab the latest Steamodded by &lt;a href=&quot;https://github.com/Steamopollys/Steamodded/archive/refs/heads/main.zip&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;I can&#39;t see any new jokers/content!&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you&#39;ve installed everything correctly, but no new jokers, blinds, etc. are ingame, check the Mods list by clicking on [MODS] in the main menu, and look for Cryptid/Talisman. If they show up red, that means there&#39;s a problem. Hover over the mod icon (which should be an exclamation mark) to see what said problem is. It could be an outdated dependency in most cases.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;What&#39;s up with all the &quot;M&quot; jokers/references to Jolly Joker?&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&quot;M&quot; is a reference to an incident in the official Balatro Discord where a user named mjiojio was spamming the letter &quot;m&quot; in various channels. When asked what their least favourite joker was, they answered with Jolly Joker, and that&#39;s how the &quot;M&quot; joke became a thing!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;There&#39;s some content in the mod I don&#39;t like! Is there any way to remove them?&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can disable some features of the mod by opening your Settings, going over to the Spectral Pack tab, clicking [Cryptid], then checking/unchecking what you want. You can also enable/disable certain music tracks. If you&#39;re a streamer, consider disabling the Jimball music for your safety!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;I&#39;m hitting infinity very often, is there any way to raise the limit of the scoring system?&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Talisman may be configured to be on &lt;strong&gt;BigNum&lt;/strong&gt; mode, which has a maximum limit of ee308. You can make the limit virtually disappear by changing it to &lt;strong&gt;OmegaNum&lt;/strong&gt;, which can handle e10##1000. You can configure it the same way; going into Settings, then the Spectral Pack tab, then Talisman. Be careful; if you have a saved run that was on a different number system, you won&#39;t be able to load it (unless if you switch back)!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;I&#39;ve experienced a crash/bug!&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Be sure to give us as much information about the bug/crash as possible. A way to reproduce the bug/crash is also especially useful information to help us fix it. Remember; just saying you&#39;re crashing doesn&#39;t tell us anything. We need to know the details!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;How can I disable a specific boss blind/joker/etc.?&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Let&#39;s use Blinds as an example.&lt;/p&gt; 
&lt;p&gt;In your Balatro mods folder, navigate to &lt;code&gt;\Cryptid\Items&lt;/code&gt; and find &lt;code&gt;Blinds.lua&lt;/code&gt;. (Different types of items will be contained in different Lua files in this folder.)&lt;/p&gt; 
&lt;p&gt;Towards the end of the file, there&#39;s an array named &lt;code&gt;items_togo&lt;/code&gt;, near line 1230. You can disable specific Blinds by deleting the relevant lines here. These settings will take effect on a restart. Most other files will have a similar items array near the bottom of the file that you can modify to remove specific things from Cryptid. This system will be changed to be in-game before Cryptid 0.6.0.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lewis6991/gitsigns.nvim</title>
      <link>https://github.com/lewis6991/gitsigns.nvim</link>
      <description>&lt;p&gt;Git integration for buffers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitsigns.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/lewis6991/gitsigns.nvim/actions/workflows/ci.yml/badge.svg?branch=main&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/lewis6991/gitsigns.nvim&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&quot; alt=&quot;License: MIT&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/gitsigns-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/gitsigns-nvim/community.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim/shield&quot; alt=&quot;Dotfyle&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Deep buffer integration for Git&lt;/p&gt; 
&lt;h2&gt;👀 Preview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Hunk Actions&lt;/th&gt; 
   &lt;th&gt;Line Blame&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_actions.gif&quot; width=&quot;450em&quot;&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_blame.gif&quot; width=&quot;450em&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Signs&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Adds signs to the sign column to indicate added, changed, and deleted lines.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/e49ea0bf-c427-41fb-a67f-77c2d413a7cf&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Supports different signs for staged changes.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/28a3e286-96fa-478c-93a3-8028f9bd7123&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Add counts to signs.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d007b924-6811-44ea-b936-d8da4dc00b68&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Hunk Actions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Stage/unstage hunks with &lt;code&gt;:Gitsigns stage_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Reset hunks with &lt;code&gt;:Gitsigns reset_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Also works on partial hunks in visual mode.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks inline with &lt;code&gt;:Gitsigns preview_hunk_inline&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/60acd664-f4a8-4737-ba65-969f1efa7971&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks in popup with &lt;code&gt;:Gitsigns preview_hunk&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d2a9b801-5857-4054-80a8-195d111f4e8c&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Navigate between hunks with &lt;code&gt;:Gitsigns nav_hunk next/prev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Blame&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Show blame of current buffer using &lt;code&gt;:Gitsigns blame&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7d881e94-6e16-4f98-a526-7e785b11acf9&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in popup with &lt;code&gt;:Gitsigns blame_line&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/03ff7557-b538-4cd1-9478-f893bf7e616e&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in virtual text.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/0c79e880-6a6d-4c3f-aa62-33f734725cfd&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ current_line_blame = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_current_line_blame&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Diff&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Change the revision for the signs with &lt;code&gt;:Gitsigns change_base &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show the diff of the current buffer with the index or any revision with &lt;code&gt;:Gitsigns diffthis &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show intra-line word-diff in the buffer.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/409a1f91-5cee-404b-8b12-66b7db3ecac7&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ word_diff = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_word_diff&lt;/code&gt;.&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show hunks Quickfix/Location List&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Set the quickfix/location list with changes with &lt;code&gt;:Gitsign setqflist/setloclist&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/c17001a5-b9cf-4a00-9891-5b130c0b4745&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;Can show hunks for:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;whole repository (&lt;code&gt;target=all&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;attached buffers (&lt;code&gt;target=attached&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;a specific buffer (&lt;code&gt;target=[integer]&lt;/code&gt;).&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Text Object&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Select hunks as a text object.&lt;/li&gt; 
  &lt;li&gt;Can use &lt;code&gt;vim.keymap.set({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, &#39;&amp;lt;Cmd&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Status Line Integration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Use &lt;code&gt;b:gitsigns_status&lt;/code&gt; or &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt;. &lt;code&gt;b:gitsigns_status&lt;/code&gt; is formatted using &lt;code&gt;config.status_formatter&lt;/code&gt;. &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt; is a dictionary with the keys &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;removed&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;set statusline+=%{get(b:,&#39;gitsigns_status&#39;,&#39;&#39;)}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For the current branch use the variable &lt;code&gt;b:gitsigns_head&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show different revisions of buffers&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use &lt;code&gt;:Gitsigns show &amp;lt;REVISION&amp;gt;&lt;/code&gt; to &lt;code&gt;:edit&lt;/code&gt; the current buffer at &lt;code&gt;&amp;lt;REVISION&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;📋 Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= 0.9.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If your version of Neovim is too old, then you can use a past &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;release&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If you are running a development version of Neovim (aka &lt;code&gt;master&lt;/code&gt;), then breakage may occur if your build is behind latest.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Newish version of git. Older versions may not work with some features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🛠️ Installation &amp;amp; Usage&lt;/h2&gt; 
&lt;p&gt;Install using your package manager of choice.&lt;/p&gt; 
&lt;p&gt;For recommended setup with all batteries included:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Configuration can be passed to the setup function. Here is an example with most of the default settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup {
  signs = {
    add          = { text = &#39;┃&#39; },
    change       = { text = &#39;┃&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‾&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;┆&#39; },
  },
  signs_staged = {
    add          = { text = &#39;┃&#39; },
    change       = { text = &#39;┃&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‾&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;┆&#39; },
  },
  signs_staged_enable = true,
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    follow_files = true
  },
  auto_attach = true,
  attach_to_untracked = false,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = &#39;eol&#39;, -- &#39;eol&#39; | &#39;overlay&#39; | &#39;right_align&#39;
    delay = 1000,
    ignore_whitespace = false,
    virt_text_priority = 100,
    use_focus = true,
  },
  current_line_blame_formatter = &#39;&amp;lt;author&amp;gt;, &amp;lt;author_time:%R&amp;gt; - &amp;lt;summary&amp;gt;&#39;,
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    border = &#39;single&#39;,
    style = &#39;minimal&#39;,
    relative = &#39;cursor&#39;,
    row = 0,
    col = 1
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For information on configuring Neovim via lua please see &lt;a href=&quot;https://neovim.io/doc/user/lua-guide.html&quot;&gt;nvim-lua-guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;🎹 Keymaps&lt;/h3&gt; 
&lt;p&gt;Gitsigns provides an &lt;code&gt;on_attach&lt;/code&gt; callback which can be used to setup buffer mappings.&lt;/p&gt; 
&lt;p&gt;Here is a suggested example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup{
  ...
  on_attach = function(bufnr)
    local gitsigns = require(&#39;gitsigns&#39;)

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map(&#39;n&#39;, &#39;]c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;]c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;next&#39;)
      end
    end)

    map(&#39;n&#39;, &#39;[c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;[c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;prev&#39;)
      end
    end)

    -- Actions
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, gitsigns.stage_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, gitsigns.reset_hunk)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, function()
      gitsigns.stage_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, function()
      gitsigns.reset_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, gitsigns.stage_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, gitsigns.reset_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, gitsigns.preview_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hi&#39;, gitsigns.preview_hunk_inline)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, function()
      gitsigns.blame_line({ full = true })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, gitsigns.diffthis)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, function()
      gitsigns.diffthis(&#39;~&#39;)
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hQ&#39;, function() gitsigns.setqflist(&#39;all&#39;) end)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hq&#39;, gitsigns.setqflist)

    -- Toggles
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, gitsigns.toggle_current_line_blame)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;td&#39;, gitsigns.toggle_deleted)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tw&#39;, gitsigns.toggle_word_diff)

    -- Text object
    map({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, gitsigns.select_hunk)
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔗 Plugin Integrations&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When viewing revisions of a file (via &lt;code&gt;:0Gclog&lt;/code&gt; for example), Gitsigns will attach to the fugitive buffer with the base set to the commit immediately before the commit of that revision. This means the signs placed in the buffer reflect the changes introduced by that revision of the file.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;If installed and enabled (via &lt;code&gt;config.trouble&lt;/code&gt;; defaults to true if installed), &lt;code&gt;:Gitsigns setqflist&lt;/code&gt; or &lt;code&gt;:Gitsigns setloclist&lt;/code&gt; will open Trouble instead of Neovim&#39;s built-in quickfix or location list windows.&lt;/p&gt; 
&lt;h2&gt;🚫 Non-Goals&lt;/h2&gt; 
&lt;h3&gt;Implement every feature in &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;This plugin is actively developed and by one of the most well regarded vim plugin developers. Gitsigns will only implement features of this plugin if: it is simple, or, the technologies leveraged by Gitsigns (LuaJIT, Libuv, Neovim&#39;s API, etc) can provide a better experience.&lt;/p&gt; 
&lt;h3&gt;Support for other VCS&lt;/h3&gt; 
&lt;p&gt;There aren&#39;t any active developers of this plugin who use other kinds of VCS, so adding support for them isn&#39;t feasible. However a well written PR with a commitment of future support could change this.&lt;/p&gt; 
&lt;h2&gt;🔌 Similar plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.diff&quot;&gt;mini.diff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neoclide/coc-git&quot;&gt;coc-git&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- links --&gt;</description>
    </item>
    
    <item>
      <title>nvim-neo-tree/neo-tree.nvim</title>
      <link>https://github.com/nvim-neo-tree/neo-tree.nvim</link>
      <description>&lt;p&gt;Neovim plugin to manage the file system and other tree like structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neo-tree.nvim&lt;/h1&gt; 
&lt;p&gt;Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once!&lt;/p&gt; 
&lt;h3&gt;Neo-tree filesystem as Sidebar:&lt;/h3&gt; 
&lt;p&gt;This screenshot shows Neo-tree opened in the traditional sidebar layout:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-right-aligned-symbols.png&quot; alt=&quot;Neo-tree file system sidebar&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Neo-tree filesystem Netrw Style&lt;/h3&gt; 
&lt;p&gt;The below screenshot shows Neo-tree opened &quot;netrw style&quot; (&lt;code&gt;:Neotree position=current&lt;/code&gt;). When opened in this way, there is more room so the extra detail columns can be shown. This screenshot also shows how the contents can be sorted on any column. In this example, we are sorted on &quot;Size&quot; descending:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-file-details-and-sort.png&quot; alt=&quot;Neo-tree file system details&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Breaking Changes BAD &lt;span&gt;💣&lt;/span&gt; &lt;span&gt;👿&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#what-is-a-breaking-change&quot;&gt;What is a Breaking Change?&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Changelog#30&quot;&gt;Changelog 3.0&lt;/a&gt; for breaking changes and deprecations in 3.0.&lt;/p&gt; 
&lt;h3&gt;User Experience GOOD &lt;span&gt;🙂&lt;/span&gt; &lt;span&gt;👍&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in (neo)vim sidebars. I can&#39;t stand glitchy behavior, and neither should you!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neo-tree won&#39;t let other buffers take over its window.&lt;/li&gt; 
 &lt;li&gt;Neo-tree won&#39;t leave its window scrolled to the last line when there is plenty of room to display the whole tree.&lt;/li&gt; 
 &lt;li&gt;Neo-tree does not need to be manually refreshed (set &lt;code&gt;use_libuv_file_watcher=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree can intelligently follow the current file (set &lt;code&gt;follow_current_file.enabled=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree is thoughtful about maintaining or setting focus on the right node&lt;/li&gt; 
 &lt;li&gt;Neo-tree windows in different tabs are completely separate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;respect_gitignore&lt;/code&gt; actually works!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Neo-tree is smooth, efficient, stable, and pays attention to the little details. If you find anything janky, wanky, broken, or unintuitive, please open an issue so we can fix it.&lt;/p&gt; 
&lt;h2&gt;Minimal Quickstart&lt;/h2&gt; 
&lt;h4&gt;Minimal Example for Lazy:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- not strictly required, but recommended
    &quot;MunifTanjim/nui.nvim&quot;,
    -- {&quot;3rd/image.nvim&quot;, opts = {}}, -- Optional image support in preview window: See `# Preview Mode` for more information
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Minimal Example for Packer:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use({
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  requires = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- not strictly required, but recommended
    &quot;MunifTanjim/nui.nvim&quot;,
    -- &quot;3rd/image.nvim&quot;, -- Optional image support in preview window: See `# Preview Mode` for more information
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After installing, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Press &lt;code&gt;?&lt;/code&gt; in the Neo-tree window to view the list of mappings.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h4&gt;Longer Example for lazy.nvim:&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt; Click to view longer example for lazy.nvim &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  -- If you want neo-tree&#39;s file operations to work with LSP (updating imports, etc.), you can use a plugin like
  -- https://github.com/antosha417/nvim-lsp-file-operations:
  -- {
  --   &quot;antosha417/nvim-lsp-file-operations&quot;,
  --   dependencies = {
  --     &quot;nvim-lua/plenary.nvim&quot;,
  --     &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  --   },
  --   config = function()
  --     require(&quot;lsp-file-operations&quot;).setup()
  --   end,
  -- },
  {
    &quot;nvim-neo-tree/neo-tree.nvim&quot;,
    branch = &quot;v3.x&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;nvim-tree/nvim-web-devicons&quot;, -- not strictly required, but recommended
      &quot;MunifTanjim/nui.nvim&quot;,
      -- {&quot;3rd/image.nvim&quot;, opts = {}}, -- Optional image support in preview window: See `# Preview Mode` for more information
      {
        &quot;s1n7ax/nvim-window-picker&quot;, -- for open_with_window_picker keymaps
        version = &quot;2.*&quot;,
        config = function()
          require(&quot;window-picker&quot;).setup({
            filter_rules = {
              include_current_win = false,
              autoselect_one = true,
              -- filter using buffer options
              bo = {
                -- if the file type is one of following, the window will be ignored
                filetype = { &quot;neo-tree&quot;, &quot;neo-tree-popup&quot;, &quot;notify&quot; },
                -- if the buffer type is one of following, the window will be ignored
                buftype = { &quot;terminal&quot;, &quot;quickfix&quot; },
              },
            },
          })
        end,
      },
    },
    config = function()
      -- If you want icons for diagnostic errors, you&#39;ll need to define them somewhere:
      vim.fn.sign_define(&quot;DiagnosticSignError&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignError&quot; })
      vim.fn.sign_define(&quot;DiagnosticSignWarn&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignWarn&quot; })
      vim.fn.sign_define(&quot;DiagnosticSignInfo&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignInfo&quot; })
      vim.fn.sign_define(&quot;DiagnosticSignHint&quot;, { text = &quot;󰌵&quot;, texthl = &quot;DiagnosticSignHint&quot; })

      require(&quot;neo-tree&quot;).setup({
        close_if_last_window = false, -- Close Neo-tree if it is the last window left in the tab
        popup_border_style = &quot;rounded&quot;,
        enable_git_status = true,
        enable_diagnostics = true,
        open_files_do_not_replace_types = { &quot;terminal&quot;, &quot;trouble&quot;, &quot;qf&quot; }, -- when opening files, do not use windows containing these filetypes or buftypes
        open_files_using_relative_paths = false,
        sort_case_insensitive = false, -- used when sorting files and directories in the tree
        sort_function = nil, -- use a custom function for sorting files and directories in the tree
        -- sort_function = function (a,b)
        --       if a.type == b.type then
        --           return a.path &amp;gt; b.path
        --       else
        --           return a.type &amp;gt; b.type
        --       end
        --   end , -- this sorts files and directories descendantly
        default_component_configs = {
          container = {
            enable_character_fade = true,
          },
          indent = {
            indent_size = 2,
            padding = 1, -- extra padding on left hand side
            -- indent guides
            with_markers = true,
            indent_marker = &quot;│&quot;,
            last_indent_marker = &quot;└&quot;,
            highlight = &quot;NeoTreeIndentMarker&quot;,
            -- expander config, needed for nesting files
            with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders
            expander_collapsed = &quot;&quot;,
            expander_expanded = &quot;&quot;,
            expander_highlight = &quot;NeoTreeExpander&quot;,
          },
          icon = {
            folder_closed = &quot;&quot;,
            folder_open = &quot;&quot;,
            folder_empty = &quot;󰜌&quot;,
            provider = function(icon, node, state) -- default icon provider utilizes nvim-web-devicons if available
              if node.type == &quot;file&quot; or node.type == &quot;terminal&quot; then
                local success, web_devicons = pcall(require, &quot;nvim-web-devicons&quot;)
                local name = node.type == &quot;terminal&quot; and &quot;terminal&quot; or node.name
                if success then
                  local devicon, hl = web_devicons.get_icon(name)
                  icon.text = devicon or icon.text
                  icon.highlight = hl or icon.highlight
                end
              end
            end,
            -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there
            -- then these will never be used.
            default = &quot;*&quot;,
            highlight = &quot;NeoTreeFileIcon&quot;,
          },
          modified = {
            symbol = &quot;[+]&quot;,
            highlight = &quot;NeoTreeModified&quot;,
          },
          name = {
            trailing_slash = false,
            use_git_status_colors = true,
            highlight = &quot;NeoTreeFileName&quot;,
          },
          git_status = {
            symbols = {
              -- Change type
              added = &quot;&quot;, -- or &quot;✚&quot;, but this is redundant info if you use git_status_colors on the name
              modified = &quot;&quot;, -- or &quot;&quot;, but this is redundant info if you use git_status_colors on the name
              deleted = &quot;✖&quot;, -- this can only be used in the git_status source
              renamed = &quot;󰁕&quot;, -- this can only be used in the git_status source
              -- Status type
              untracked = &quot;&quot;,
              ignored = &quot;&quot;,
              unstaged = &quot;󰄱&quot;,
              staged = &quot;&quot;,
              conflict = &quot;&quot;,
            },
          },
          -- If you don&#39;t want to use these columns, you can set `enabled = false` for each of them individually
          file_size = {
            enabled = true,
            width = 12, -- width of the column
            required_width = 64, -- min width of window required to show this column
          },
          type = {
            enabled = true,
            width = 10, -- width of the column
            required_width = 122, -- min width of window required to show this column
          },
          last_modified = {
            enabled = true,
            width = 20, -- width of the column
            required_width = 88, -- min width of window required to show this column
          },
          created = {
            enabled = true,
            width = 20, -- width of the column
            required_width = 110, -- min width of window required to show this column
          },
          symlink_target = {
            enabled = false,
          },
        },
        -- A list of functions, each representing a global custom command
        -- that will be available in all sources (if not overridden in `opts[source_name].commands`)
        -- see `:h neo-tree-custom-commands-global`
        commands = {},
        window = {
          position = &quot;left&quot;,
          width = 40,
          mapping_options = {
            noremap = true,
            nowait = true,
          },
          mappings = {
            [&quot;&amp;lt;space&amp;gt;&quot;] = {
              &quot;toggle_node&quot;,
              nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use
            },
            [&quot;&amp;lt;2-LeftMouse&amp;gt;&quot;] = &quot;open&quot;,
            [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open&quot;,
            [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;cancel&quot;, -- close preview or floating neo-tree window
            [&quot;P&quot;] = { &quot;toggle_preview&quot;, config = { use_float = true, use_image_nvim = true } },
            -- Read `# Preview Mode` for more information
            [&quot;l&quot;] = &quot;focus_preview&quot;,
            [&quot;S&quot;] = &quot;open_split&quot;,
            [&quot;s&quot;] = &quot;open_vsplit&quot;,
            -- [&quot;S&quot;] = &quot;split_with_window_picker&quot;,
            -- [&quot;s&quot;] = &quot;vsplit_with_window_picker&quot;,
            [&quot;t&quot;] = &quot;open_tabnew&quot;,
            -- [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open_drop&quot;,
            -- [&quot;t&quot;] = &quot;open_tab_drop&quot;,
            [&quot;w&quot;] = &quot;open_with_window_picker&quot;,
            --[&quot;P&quot;] = &quot;toggle_preview&quot;, -- enter preview mode, which shows the current node without focusing
            [&quot;C&quot;] = &quot;close_node&quot;,
            -- [&#39;C&#39;] = &#39;close_all_subnodes&#39;,
            [&quot;z&quot;] = &quot;close_all_nodes&quot;,
            --[&quot;Z&quot;] = &quot;expand_all_nodes&quot;,
            [&quot;a&quot;] = {
              &quot;add&quot;,
              -- this command supports BASH style brace expansion (&quot;x{a,b,c}&quot; -&amp;gt; xa,xb,xc). see `:h neo-tree-file-actions` for details
              -- some commands may take optional config options, see `:h neo-tree-mappings` for details
              config = {
                show_path = &quot;none&quot;, -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
              },
            },
            [&quot;A&quot;] = &quot;add_directory&quot;, -- also accepts the optional config.show_path option like &quot;add&quot;. this also supports BASH style brace expansion.
            [&quot;d&quot;] = &quot;delete&quot;,
            [&quot;r&quot;] = &quot;rename&quot;,
            [&quot;b&quot;] = &quot;rename_basename&quot;,
            [&quot;y&quot;] = &quot;copy_to_clipboard&quot;,
            [&quot;x&quot;] = &quot;cut_to_clipboard&quot;,
            [&quot;p&quot;] = &quot;paste_from_clipboard&quot;,
            [&quot;c&quot;] = &quot;copy&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;:
            -- [&quot;c&quot;] = {
            --  &quot;copy&quot;,
            --  config = {
            --    show_path = &quot;none&quot; -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
            --  }
            --}
            [&quot;m&quot;] = &quot;move&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;.
            [&quot;q&quot;] = &quot;close_window&quot;,
            [&quot;R&quot;] = &quot;refresh&quot;,
            [&quot;?&quot;] = &quot;show_help&quot;,
            [&quot;&amp;lt;&quot;] = &quot;prev_source&quot;,
            [&quot;&amp;gt;&quot;] = &quot;next_source&quot;,
            [&quot;i&quot;] = &quot;show_file_details&quot;,
            -- [&quot;i&quot;] = {
            --   &quot;show_file_details&quot;,
            --   -- format strings of the timestamps shown for date created and last modified (see `:h os.date()`)
            --   -- both options accept a string or a function that takes in the date in seconds and returns a string to display
            --   -- config = {
            --   --   created_format = &quot;%Y-%m-%d %I:%M %p&quot;,
            --   --   modified_format = &quot;relative&quot;, -- equivalent to the line below
            --   --   modified_format = function(seconds) return require(&#39;neo-tree.utils&#39;).relative_date(seconds) end
            --   -- }
            -- },
          },
        },
        nesting_rules = {},
        filesystem = {
          filtered_items = {
            visible = false, -- when true, they will just be displayed differently than normal items
            hide_dotfiles = true,
            hide_gitignored = true,
            hide_hidden = true, -- only works on Windows for hidden files/directories
            hide_by_name = {
              --&quot;node_modules&quot;
            },
            hide_by_pattern = { -- uses glob style patterns
              --&quot;*.meta&quot;,
              --&quot;*/src/*/tsconfig.json&quot;,
            },
            always_show = { -- remains visible even if other settings would normally hide it
              --&quot;.gitignored&quot;,
            },
            always_show_by_pattern = { -- uses glob style patterns
              --&quot;.env*&quot;,
            },
            never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show
              --&quot;.DS_Store&quot;,
              --&quot;thumbs.db&quot;
            },
            never_show_by_pattern = { -- uses glob style patterns
              --&quot;.null-ls_*&quot;,
            },
          },
          follow_current_file = {
            enabled = false, -- This will find and focus the file in the active buffer every time
            --               -- the current file is changed while the tree is open.
            leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
          },
          group_empty_dirs = false, -- when true, empty folders will be grouped together
          hijack_netrw_behavior = &quot;open_default&quot;, -- netrw disabled, opening a directory opens neo-tree
          -- in whatever position is specified in window.position
          -- &quot;open_current&quot;,  -- netrw disabled, opening a directory opens within the
          -- window like netrw would, regardless of window.position
          -- &quot;disabled&quot;,    -- netrw left alone, neo-tree does not handle opening dirs
          use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes
          -- instead of relying on nvim autocmd events.
          window = {
            mappings = {
              [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
              [&quot;.&quot;] = &quot;set_root&quot;,
              [&quot;H&quot;] = &quot;toggle_hidden&quot;,
              [&quot;/&quot;] = &quot;fuzzy_finder&quot;,
              [&quot;D&quot;] = &quot;fuzzy_finder_directory&quot;,
              [&quot;#&quot;] = &quot;fuzzy_sorter&quot;, -- fuzzy sorting using the fzy algorithm
              -- [&quot;D&quot;] = &quot;fuzzy_sorter_directory&quot;,
              [&quot;f&quot;] = &quot;filter_on_submit&quot;,
              [&quot;&amp;lt;c-x&amp;gt;&quot;] = &quot;clear_filter&quot;,
              [&quot;[g&quot;] = &quot;prev_git_modified&quot;,
              [&quot;]g&quot;] = &quot;next_git_modified&quot;,
              [&quot;o&quot;] = {
                &quot;show_help&quot;,
                nowait = false,
                config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
              },
              [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
              [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
              [&quot;og&quot;] = { &quot;order_by_git_status&quot;, nowait = false },
              [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
              [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
              [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
              [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
              -- [&#39;&amp;lt;key&amp;gt;&#39;] = function(state) ... end,
            },
            fuzzy_finder_mappings = { -- define keymaps for filter popup window in fuzzy_finder_mode
              [&quot;&amp;lt;down&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
              [&quot;&amp;lt;C-n&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
              [&quot;&amp;lt;up&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
              [&quot;&amp;lt;C-p&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
              [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;close&quot;,
              -- [&#39;&amp;lt;key&amp;gt;&#39;] = function(state, scroll_padding) ... end,
            },
          },

          commands = {}, -- Add a custom command or override a global one using the same function name
        },
        buffers = {
          follow_current_file = {
            enabled = true, -- This will find and focus the file in the active buffer every time
            --              -- the current file is changed while the tree is open.
            leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
          },
          group_empty_dirs = true, -- when true, empty folders will be grouped together
          show_unloaded = true,
          window = {
            mappings = {
              [&quot;d&quot;] = &quot;buffer_delete&quot;,
              [&quot;bd&quot;] = &quot;buffer_delete&quot;,
              [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
              [&quot;.&quot;] = &quot;set_root&quot;,
              [&quot;o&quot;] = {
                &quot;show_help&quot;,
                nowait = false,
                config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
              },
              [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
              [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
              [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
              [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
              [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
              [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
            },
          },
        },
        git_status = {
          window = {
            position = &quot;float&quot;,
            mappings = {
              [&quot;A&quot;] = &quot;git_add_all&quot;,
              [&quot;gu&quot;] = &quot;git_unstage_file&quot;,
              [&quot;ga&quot;] = &quot;git_add_file&quot;,
              [&quot;gr&quot;] = &quot;git_revert_file&quot;,
              [&quot;gc&quot;] = &quot;git_commit&quot;,
              [&quot;gp&quot;] = &quot;git_push&quot;,
              [&quot;gg&quot;] = &quot;git_commit_and_push&quot;,
              [&quot;o&quot;] = {
                &quot;show_help&quot;,
                nowait = false,
                config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
              },
              [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
              [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
              [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
              [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
              [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
              [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
            },
          },
        },
      })

      vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;, &quot;&amp;lt;Cmd&amp;gt;Neotree reveal&amp;lt;CR&amp;gt;&quot;)
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;em&gt;The above configuration is not everything that can be changed, it&#39;s just the parts you might want to change first.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree&lt;/code&gt; for full documentation. You can also preview that online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/neo-tree.txt&quot;&gt;doc/neo-tree.txt&lt;/a&gt;, although it&#39;s best viewed within vim.&lt;/p&gt; 
&lt;p&gt;To see all of the default config options with commentary, you can view it online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt;. You can also paste it into a buffer after installing Neo-tree by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:lua require(&quot;neo-tree&quot;).paste_default_config()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;The &lt;code&gt;:Neotree&lt;/code&gt; Command&lt;/h2&gt; 
&lt;p&gt;The single &lt;code&gt;:Neotree&lt;/code&gt; command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, &quot;revealing&quot; the currently active file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree filesystem reveal right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree source=filesystem reveal=true position=right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will open the filesystem source on the left hand side and focus it, if you are using the default config.&lt;/p&gt; 
&lt;h3&gt;Tab Completion&lt;/h3&gt; 
&lt;p&gt;Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Arguments&lt;/h3&gt; 
&lt;p&gt;Here is the full list of arguments you can use:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;action&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to do. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;focus&lt;/td&gt; 
   &lt;td&gt;Show and/or switch focus to the specified Neotree window. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;show&lt;/td&gt; 
   &lt;td&gt;Show the window, but keep focus on your current window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the window(s) specified. Can be combined with &quot;position&quot; and/or &quot;source&quot; to specify which window(s) to close.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;source&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to show. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filesystem&lt;/td&gt; 
   &lt;td&gt;Show a file browser. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;Show a list of currently open buffers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;git_status&lt;/td&gt; 
   &lt;td&gt;Show the output of &lt;code&gt;git status&lt;/code&gt; in a tree layout.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;last&lt;/td&gt; 
   &lt;td&gt;Equivalent to the last source used&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Where to show it, can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;left&lt;/td&gt; 
   &lt;td&gt;Open as left hand sidebar. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;right&lt;/td&gt; 
   &lt;td&gt;Open as right hand sidebar.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;top&lt;/td&gt; 
   &lt;td&gt;Open as top window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bottom&lt;/td&gt; 
   &lt;td&gt;Open as bottom window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;float&lt;/td&gt; 
   &lt;td&gt;Open as floating window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;current&lt;/td&gt; 
   &lt;td&gt;Open within the current window, like netrw or vinegar would.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;toggle&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this means that the window will be closed if it is already open.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don&#39;t need the full dir=/path. You may use any value that can be passed to the &#39;expand&#39; function, such as &lt;code&gt;%:p:h:h&lt;/code&gt; to specify two directories up from the current file. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree ./relative/path
:Neotree /home/user/relative/path
:Neotree dir=/home/user/relative/path
:Neotree position=current dir=relative/path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;git_base&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The base that is used to calculate the git status for each dir/file. By default it uses &lt;code&gt;HEAD&lt;/code&gt;, so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to &lt;code&gt;main&lt;/code&gt;. It will show all changes that happened on the feature branch and main since you branched off.&lt;/p&gt; 
&lt;p&gt;Any git ref, commit, tag, or sha will work.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree main
:Neotree v1.0
:Neotree git_base=8fe34be
:Neotree git_base=HEAD
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;reveal_file&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A path to a file to reveal. This supersedes the &quot;reveal&quot; flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like &quot;dir&quot;, you can pass any value that can be passed to the &#39;expand&#39; function. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree reveal_file=/home/user/my/file.text
:Neotree position=current dir=%:p:h:h reveal_file=%:p
:Neotree current %:p:h:h %:p
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nnoremap gd :Neotree float reveal_file=&amp;lt;cfile&amp;gt; reveal_force_cwd&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal_force_cwd&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies &quot;reveal&quot;, so you do not need to specify both.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;selector&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. When you specifically set this to false (&lt;code&gt;selector=false&lt;/code&gt;) neo-tree will disable the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#source-selector&quot;&gt;source selector&lt;/a&gt; for that neo-tree instance. Otherwise, the source selector will depend on what you specified in the configuration (&lt;code&gt;config.source_selector.{winbar,statusline}&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-commands&lt;/code&gt; for details and a full listing of available arguments.&lt;/p&gt; 
&lt;h3&gt;File Nesting&lt;/h3&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-file-nesting&lt;/code&gt; for more details about file nesting.&lt;/p&gt; 
&lt;h3&gt;Netrw Hijack&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;:edit .
:[v]split .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;code&gt;&quot;filesystem.window.position&quot;&lt;/code&gt; is set to &lt;code&gt;&quot;current&quot;&lt;/code&gt;, or if you have specified &lt;code&gt;filesystem.hijack_netrw_behavior = &quot;open_current&quot;&lt;/code&gt;, then any command that would open a directory will open neo-tree in the specified window.&lt;/p&gt; 
&lt;h2&gt;Sources&lt;/h2&gt; 
&lt;p&gt;Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items.&lt;/p&gt; 
&lt;h3&gt;filesystem&lt;/h3&gt; 
&lt;p&gt;The default source is &lt;code&gt;filesystem&lt;/code&gt;, which displays your files and folders. This is the default source in commands when none is specified.&lt;/p&gt; 
&lt;p&gt;This source can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Browse the filesystem&lt;/li&gt; 
 &lt;li&gt;Control the current working directory of nvim&lt;/li&gt; 
 &lt;li&gt;Add/Copy/Delete/Move/Rename files and directories&lt;/li&gt; 
 &lt;li&gt;Search the filesystem&lt;/li&gt; 
 &lt;li&gt;Monitor git status and lsp diagnostics for the current working directory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;buffers&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-buffers.png&quot; alt=&quot;Neo-tree buffers&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Another available source is &lt;code&gt;buffers&lt;/code&gt;, which displays your open buffers. This is the same list you would see from &lt;code&gt;:ls&lt;/code&gt;. To show with the &lt;code&gt;buffers&lt;/code&gt; list, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree buffers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;git_status&lt;/h3&gt; 
&lt;p&gt;This view take the results of the &lt;code&gt;git status&lt;/code&gt; command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing.&lt;/p&gt; 
&lt;p&gt;The screenshot below shows the result of &lt;code&gt;:Neotree float git_status&lt;/code&gt; while the filesystem is open in a sidebar:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-git_status.png&quot; alt=&quot;Neo-tree git_status&quot;&gt;&lt;/p&gt; 
&lt;p&gt;You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree float git_status git_base=main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;document_symbols&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/neo-tree-document-symbols.png&quot; alt=&quot;Neo-tree document_symbols&quot;&gt; The document_symbols source lists the symbols in the current document obtained by the LSP request &quot;textDocument/documentSymbols&quot;. It currently supports the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; UI: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Display all symbols in the current file with symbol kinds&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Symbols nesting&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Configurable kinds&#39; name and icon&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Auto-refresh symbol list 
    &lt;ul&gt; 
     &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Follow cursor&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Commands 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jump to symbols, open symbol in split,... (&lt;code&gt;open_split&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Rename symbols (&lt;code&gt;rename&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Preview symbol (&lt;code&gt;preview&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Hover docs&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Call hierarchy&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; LSP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; LSP Support&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; LSP server selection (ignore, allow_only, use first, use all, etc.)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; CoC Support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See #879 for the tracking issue of these features.&lt;/p&gt; 
&lt;p&gt;This source is currently experimental, so in order to use it, you need to first add &lt;code&gt;&quot;document_symbols&quot;&lt;/code&gt; to &lt;code&gt;config.sources&lt;/code&gt; and open it with the command&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree document_symbols
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Sources&lt;/h3&gt; 
&lt;p&gt;There are more sources available as extensions that are managed outside of this repository. See the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/External-Sources&quot;&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Source Selector&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-source-selector.png&quot; alt=&quot;Neo-tree source selector&quot;&gt;&lt;/p&gt; 
&lt;p&gt;You can enable a clickable source selector in either the winbar (requires neovim 0.8+) or the statusline. To do so, set one of these options to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;    require(&quot;neo-tree&quot;).setup({
        source_selector = {
            winbar = false,
            statusline = false
        }
    })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many configuration options to change the style of these tabs. See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Preview Mode&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neo-tree-preview-mode&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Preview mode will temporarily show whatever file the cursor is on without switching focus from the Neo-tree window. By default, files will be previewed in a new floating window. This can also be configured to automatically choose an existing split by configuring the command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neo-tree&quot;).setup({
  window = {
    mappings = {
      [&quot;P&quot;] = {
        &quot;toggle_preview&quot;,
        config = {
          use_float = false,
          -- use_image_nvim = true,
          -- title = &#39;Neo-tree Preview&#39;,
        },
      },
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Anything that causes Neo-tree to lose focus will end preview mode. When &lt;code&gt;use_float = false&lt;/code&gt;, the window that was taken over by preview mode will revert back to whatever was shown in that window before preview mode began.&lt;/p&gt; 
&lt;p&gt;You can choose a custom title for the floating window by setting the &lt;code&gt;title&lt;/code&gt; option in its config.&lt;/p&gt; 
&lt;p&gt;If you want to work with the floating preview mode window in autocmds or other custom code, the window will have the &lt;code&gt;neo-tree-preview&lt;/code&gt; filetype.&lt;/p&gt; 
&lt;p&gt;When preview mode is not using floats, the window will have the window local variable &lt;code&gt;neo_tree_preview&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; to indicate that it is being used as a preview window. You can refer to this in statusline and winbar configs to mark a window as being used as a preview.&lt;/p&gt; 
&lt;h4&gt;Image Support in Preview Mode&lt;/h4&gt; 
&lt;p&gt;If you have &lt;a href=&quot;https://github.com/3rd/image.nvim&quot;&gt;3rd/image.nvim&lt;/a&gt; installed, preview mode supports image rendering by default using kitty graphics protocol or ueberzug (&lt;a href=&quot;https://user-images.githubusercontent.com/41065736/277180763-b7152637-f310-43a5-b8c3-4bcba135629d.mp4&quot;&gt;Video&lt;/a&gt;). However, if you do not want this feature, you can disable it by changing the option &lt;code&gt;use_image_nvim = false&lt;/code&gt; in the mappings config mentioned above.&lt;/p&gt; 
&lt;h2&gt;Configuration and Customization&lt;/h2&gt; 
&lt;p&gt;This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones.&lt;/p&gt; 
&lt;p&gt;Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component.&lt;/p&gt; 
&lt;p&gt;Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the &lt;code&gt;before_render&lt;/code&gt; event, create a component to display it, and reference that component in the renderer for the &lt;code&gt;file&lt;/code&gt; and/or &lt;code&gt;directory&lt;/code&gt; type.&lt;/p&gt; 
&lt;p&gt;Details on how to configure everything is in the help file at &lt;code&gt;:h neo-tree-configuration&lt;/code&gt; or online at &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/raw/main/doc/neo-tree.txt&quot;&gt;neo-tree.txt&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Recipes for customizations can be found on the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes&quot;&gt;wiki&lt;/a&gt;. Recipes include things like adding a component to show the &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;Harpoon&lt;/a&gt; index for files, or responding to the &lt;code&gt;&quot;file_opened&quot;&lt;/code&gt; event to auto clear the search when you open a file.&lt;/p&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;p&gt;There are many tree plugins for (Neo)vim, so why make another one? Well, I wanted something that was:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Easy to maintain and enhance.&lt;/li&gt; 
 &lt;li&gt;Stable.&lt;/li&gt; 
 &lt;li&gt;Easy to customize.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Easy to maintain and enhance&lt;/h3&gt; 
&lt;p&gt;This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with.&lt;/p&gt; 
&lt;p&gt;One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, &lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvm&lt;/a&gt;. Building upon shared libraries will go a long way in making neo-tree easy to maintain.&lt;/p&gt; 
&lt;h3&gt;Stable&lt;/h3&gt; 
&lt;p&gt;This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the &lt;strong&gt;main&lt;/strong&gt; branch is for contributors and those that always want bleeding edge. There will be branches for &lt;strong&gt;v1.x&lt;/strong&gt;, &lt;strong&gt;v2.x&lt;/strong&gt;, etc which will receive updates after a short testing period in &lt;strong&gt;main&lt;/strong&gt;. You should be safe to follow those branches and be sure your tree won&#39;t break in an update. There will also be tags for each release pushed to those branches named &lt;strong&gt;v1.1&lt;/strong&gt;, &lt;strong&gt;v1.2&lt;/strong&gt;, etc. If stability is critical to you, or a bug accidentally makes it into &lt;strong&gt;v3.x&lt;/strong&gt;, you can use those tags instead. It&#39;s possible we may backport bug fixes to those tags, but no guarantees on that.&lt;/p&gt; 
&lt;p&gt;There will never be a breaking change within a major version (1.x, 2.x, etc.) If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version.&lt;/p&gt; 
&lt;h3&gt;Easy to Customize&lt;/h3&gt; 
&lt;p&gt;Neo-tree follows in the spirit of plugins like &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function.&lt;/p&gt; 
&lt;h2&gt;What is a Breaking Change?&lt;/h2&gt; 
&lt;p&gt;As of v1.30, a breaking change is defined as anything that &lt;em&gt;changes&lt;/em&gt; existing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vim commands (&lt;code&gt;:Neotree&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;configuration options that are passed into the &lt;code&gt;setup()&lt;/code&gt; function&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NeoTree*&lt;/code&gt; highlight groups&lt;/li&gt; 
 &lt;li&gt;lua functions exported in the following modules that are not prefixed with &lt;code&gt;_&lt;/code&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.events&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.sources.manager&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.sources.*&lt;/code&gt; (init.lua files)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.sources.*.commands&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.ui.renderer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;neo-tree.utils&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it.&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Contributions are encouraged. Please see &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;p&gt;First and foremost, this project is a community endeavor and would not survive without the constant stream of features and bug fixes that comes from that community. There have been many valued contributors, but a few have stepped up to become maintainers that generously donate their time to guide the project, help out others, and manage the issues. The current list of maintainers are:&lt;/p&gt; 
&lt;p&gt;(in alphabetical order)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@cseickel&lt;/li&gt; 
 &lt;li&gt;@miversen33&lt;/li&gt; 
 &lt;li&gt;@nhat-vo&lt;/li&gt; 
 &lt;li&gt;@pysan3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Projects&lt;/h3&gt; 
&lt;p&gt;This project relies upon these two excellent libraries:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; for all UI components, including the tree!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt; for backend utilities, such as scanning the filesystem.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The design is heavily inspired by these excellent plugins:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Everything I know about writing a tree control in lua, I learned from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MagicDuck/grug-far.nvim</title>
      <link>https://github.com/MagicDuck/grug-far.nvim</link>
      <description>&lt;p&gt;Find And Replace plugin for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;grug-far.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;ind &lt;strong&gt;A&lt;/strong&gt;nd &lt;strong&gt;R&lt;/strong&gt;eplace plugin for neovim&lt;/p&gt; 
&lt;img width=&quot;500&quot; alt=&quot;image&quot; src=&quot;https://github.com/MagicDuck/grug-far.nvim/assets/95201/770900e2-36c6-488c-9117-5fcb514454cb&quot;&gt; 
&lt;p&gt;Grug find! Grug replace! Grug happy!&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search using the &lt;strong&gt;full power&lt;/strong&gt; of &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ast-grep&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Replace using almost the &lt;strong&gt;full power&lt;/strong&gt; of &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ast-grep&lt;/code&gt;. For example, for &lt;code&gt;rg&lt;/code&gt;, some flags such as &lt;code&gt;--binary&lt;/code&gt; and &lt;code&gt;--json&lt;/code&gt;, etc. are &lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/engine/ripgrep/blacklistedReplaceFlags.lua&quot;&gt;blacklisted&lt;/a&gt; in order to prevent unexpected output. The UI will warn you and prevent replace when using such flags.&lt;/li&gt; 
 &lt;li&gt;Automatic debounced search or manual search on leaving insert mode (and normal mode changes)&lt;/li&gt; 
 &lt;li&gt;Open search results in quickfix list&lt;/li&gt; 
 &lt;li&gt;Goto file/line/column of match when pressing &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; in normal mode on lines in the results output (keybind configurable).&lt;/li&gt; 
 &lt;li&gt;Inline edit result lines and sync them back to their originating file locations using a configurable keybinding.&lt;/li&gt; 
 &lt;li&gt;Manual/auto-save search history and reload&lt;/li&gt; 
 &lt;li&gt;Syntax highlighted search results&lt;/li&gt; 
 &lt;li&gt;Search results folding&lt;/li&gt; 
 &lt;li&gt;Multiline search &amp;amp; replace&lt;/li&gt; 
 &lt;li&gt;Search/Replace within buffer range denoted by visual selection&lt;/li&gt; 
 &lt;li&gt;&quot;Preview&quot; result source while &quot;scrolling&quot; through results&lt;/li&gt; 
 &lt;li&gt;Replace using lua interpreted replacement for each match&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Searching:&lt;/h4&gt; 
&lt;img width=&quot;1263&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/7851bc37-bd88-473d-a09a-1510088e074c&quot;&gt; 
&lt;h4&gt;Replacing:&lt;/h4&gt; 
&lt;img width=&quot;1260&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/c8edd521-9321-4e83-a4ce-e3d98ac1b346&quot;&gt; 
&lt;details&gt; 
 &lt;summary&gt;More screenshots:&lt;/summary&gt; 
 &lt;h4&gt;Rg teaching you its ways&lt;/h4&gt; 
 &lt;img width=&quot;1258&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/c59da414-2836-4e1c-93cd-9ac4568c819c&quot;&gt; 
 &lt;h4&gt;Help:&lt;/h4&gt; 
 &lt;img width=&quot;1252&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/5da63e72-f768-46e7-a807-b26c6f44c42c&quot;&gt; 
 &lt;h4&gt;Searching within buffer range&lt;/h4&gt; 
 &lt;img width=&quot;2500&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/497e8024-4823-4331-92ac-d78cdae332f0&quot;&gt; 
 &lt;h4&gt;History:&lt;/h4&gt; 
 &lt;img width=&quot;1252&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/ee96bea6-62bc-4c39-b924-e5d42e70196a&quot;&gt; 
 &lt;h4&gt;Ast-grep multiline search and replace:&lt;/h4&gt; 
 &lt;img width=&quot;1254&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/1f07c536-ef41-476f-9a15-7f0715c0579c&quot;&gt; 
 &lt;h4&gt;Ast-grep debug-query&lt;/h4&gt; 
 &lt;img width=&quot;1251&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/20fab223-56b6-42ff-825b-0df3c0e8d625&quot;&gt; 
 &lt;h4&gt;Ripgrep with lua interpreted replacement&lt;/h4&gt; 
 &lt;img width=&quot;1259&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/e2b9ca48-e0cc-49d1-b048-5042f40b774b&quot;&gt; 
 &lt;h4&gt;Ast-grep with vimscript interpreted replacement&lt;/h4&gt; 
 &lt;img width=&quot;1257&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/34eebeda-4e29-4fed-a751-eac3f879425c&quot;&gt; 
 &lt;h4&gt;Ast-grep rules&lt;/h4&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/123c5c3e-85c1-45d3-89a1-167dc3376b62&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Video&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;linkarzu&lt;/em&gt; has kindly made a video which shows off some of the features in action (don&#39;t forget to thank him for his hard work by liking if you found it helpful):&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AK1TSwJrB3k&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/AK1TSwJrB3k/0.jpg&quot; alt=&quot;linkarzu youtube video&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🤔 Philosophy&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;em&gt;strives for reduced mental overhead.&lt;/em&gt; All actions you can take and as much help as possible is in your face (some configurable). Grug often forget how to do capture groups or which flag does what.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;transparency.&lt;/em&gt; Does not try to hide away the underlying tool. For instance, error messages from &lt;code&gt;rg&lt;/code&gt; are shown as they are actually quite friendly when you mess up your regex. You can gradually learn &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ast-grep&lt;/code&gt; flags or use existing knowledge from running it in the CLI. You can even input the &lt;code&gt;--help&lt;/code&gt; flag to see the full &lt;code&gt;rg&lt;/code&gt; help or the &lt;code&gt;--debug-query=ast&lt;/code&gt; flag to debug your &lt;code&gt;ast-grep&lt;/code&gt; query. Grug like!&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;reuse muscle memory.&lt;/em&gt; Does not try to block any type of buffer edits, such as deleting lines, etc. It&#39;s very easy to get such things wrong and when you do, Grug becomes unable to modify text in the middle of writing a large regex. Grug mad!! Only ensures graceful recovery in order to preserve basic UI integrity (possible due to the magic of extmarks). Recovery should be simple undo away.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;uniformity.&lt;/em&gt; only uses one tool for both search and applying replace to keep things consistent. For example, does not combine &lt;code&gt;rg&lt;/code&gt; with other tools like &lt;code&gt;sed&lt;/code&gt;, even though &lt;code&gt;rg&lt;/code&gt; does not support replacement directly. One should not have to worry about compatibility differences when writing regexes. Additionally it opens the door to use many fancy &lt;code&gt;rg&lt;/code&gt; flags such as different regex engine that would not be possible in a mixed environment. There is currently one small exception for this due to the fact that &lt;code&gt;ast-grep&lt;/code&gt; does not currently support something like a &lt;code&gt;--glob&lt;/code&gt; flag, so we have to filter files through &lt;code&gt;rg&lt;/code&gt;, but hopefully that can be rectified in the future.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.10.0&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;BurntSushi/ripgrep&lt;/a&gt; &amp;gt;= 14 recommended&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ast-grep.github.io&quot;&gt;ast-grep&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; if you would like to use the &lt;code&gt;ast-grep&lt;/code&gt; search engine. ersion &amp;gt;= &lt;code&gt;0.36&lt;/code&gt; recommended.&lt;/li&gt; 
 &lt;li&gt;either &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; or &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; for file icons support &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Run &lt;code&gt;:checkhealth grug-far&lt;/code&gt; if you see unexpected issues.&lt;/p&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  {
    &#39;MagicDuck/grug-far.nvim&#39;,
    config = function()
      -- optional setup call to override plugin options
      -- alternatively you can set options with vim.g.grug_far = { ... }
      require(&#39;grug-far&#39;).setup({
        -- options, see Configuration section below
        -- there are no required options atm
        -- engine = &#39;ripgrep&#39; is default, but &#39;astgrep&#39; or &#39;astgrep-rules&#39; can
        -- be specified
      });
    end
  },

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;grug-far.nvim&lt;/strong&gt; comes with the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/opts.lua&quot;&gt;default options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/highlights.lua&quot;&gt;highlights&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note on the key mappings&lt;/strong&gt;: By default, grug-far, will use &lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt; for it&#39;s keymaps as that is the vim recommended way for plugins. See &lt;a href=&quot;https://learnvimscriptthehardway.stevelosh.com/chapters/11.html#local-leader&quot;&gt;https://learnvimscriptthehardway.stevelosh.com/chapters/11.html#local-leader&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;So to use that, make sure you have &lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt; configured. For example, to use &lt;code&gt;,&lt;/code&gt; as the local leader:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;vim.g.maplocalleader = &#39;,&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;h3&gt;Opening and editing&lt;/h3&gt; 
&lt;p&gt;You can open a new &lt;em&gt;grug-far.nvim&lt;/em&gt; vertical split buffer with the &lt;code&gt;:GrugFar&lt;/code&gt; command. Note that command supports the typical &lt;code&gt;command-modifiers&lt;/code&gt; like &lt;code&gt;botright&lt;/code&gt;, &lt;code&gt;aboveleft&lt;/code&gt;, etc. and visual ranges. In visual mode, the command will pre-fill the search string with the current visual selection. Note that if you would like to search and replace &lt;em&gt;within&lt;/em&gt; the visual selection range, you should use &lt;code&gt;:GrugFarWithin&lt;/code&gt; instead.&lt;/p&gt; 
&lt;p&gt;Possibly best to map a keybind to it for easy triggering. Since it&#39;s &lt;em&gt;just a buffer&lt;/em&gt;, you can edit in it as you see fit. The UI will try to guide you along and recover gracefully if you do things like &lt;code&gt;ggVGd&lt;/code&gt; (delete all lines). Ultimately it leaves the power in your hands, and in any case recovery is just a few &lt;code&gt;u&lt;/code&gt; taps away.&lt;/p&gt; 
&lt;p&gt;You can create multiple such buffers with potentially different searches, which will reflect in each buffer&#39;s title (configurable). The buffers should be visible in the buffers list if you need to toggle to them.&lt;/p&gt; 
&lt;h3&gt;Searching and replacing&lt;/h3&gt; 
&lt;p&gt;Search and replace is accomplished by simply typing text on appropriately marked lines. Search will happen in a debounced manner as you type. In the options, you can also specify a minimum number of characters that one has to enter before search is triggered. You can also specify a files filter to narrow down your search and more ripgrep flags to refine it further. Error messages from ripgrep when entering invalid flags and so on are displayed to guide you along.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; When replacing matches with the empty string, you will be prompted to confirm, as the change is not visible in the results area due to UI considering it just a search. If you would like to see the actual replacement in the results area, add &lt;code&gt;--replace=&lt;/code&gt; to the flags.&lt;/p&gt; 
&lt;h3&gt;Replacing each match with the result of an interpreted script&lt;/h3&gt; 
&lt;p&gt;Some situations require the power of arbitrary code executed for each search to determine the proper replacements. In those cases, you can use the &lt;code&gt;Swap Replacement Interpreter&lt;/code&gt; action to switch to a desired replacement interpreter, such as &lt;code&gt;lua&lt;/code&gt; or &lt;code&gt;vimscript&lt;/code&gt;. For example with the &lt;code&gt;lua&lt;/code&gt; interpreter, this will allow you to write multi-line lua code, essentially the body of a lua function, in the &lt;code&gt;Replace:&lt;/code&gt; input.&lt;/p&gt; 
&lt;p&gt;You can use &lt;code&gt;match&lt;/code&gt; to refer to each match and need to &lt;code&gt;return&lt;/code&gt; the value you want to be the replacement. In the case of the &lt;code&gt;astgrep&lt;/code&gt; engine, you will also have access to the meta variables by accessing them through the &lt;code&gt;vars&lt;/code&gt; table. e.g. &lt;code&gt;$A&lt;/code&gt; is referred to by &lt;code&gt;vars.A&lt;/code&gt;, &lt;code&gt;$$$ARGS&lt;/code&gt; is referred to by &lt;code&gt;vars.ARGS&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;It is a similar situation for the &lt;code&gt;vimscript&lt;/code&gt; interpreter.&lt;/p&gt; 
&lt;h3&gt;Syncing results lines back to originating files&lt;/h3&gt; 
&lt;p&gt;It is possible to sync the text of the lines in the results area back to their originating files. There are 3 types of actions that can accomplish this operation:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;Sync Line&lt;/code&gt; - syncs current line&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Sync All&lt;/code&gt; - syncs all lines&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Apply Next&lt;/code&gt;/&lt;code&gt;Apply Prev&lt;/code&gt; - syncs current line/diff and smartly deletes it from the result buffer&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;A sync will happen only if a line has changed in some way compared to the source file, so if there&#39;s either a replacement taking place or you have manually edited it.&lt;/p&gt; 
&lt;p&gt;Deleting result lines will cause them to be excluded from being synced by &lt;code&gt;Sync All&lt;/code&gt; action. This can be a nice way to refine a replacement in some situations if you want to exclude a particular file or some particular matches.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; sync is only supported by &lt;code&gt;ripgrep&lt;/code&gt; engine. The following explanation is &lt;code&gt;ripgrep&lt;/code&gt; engine specific:&lt;/p&gt; 
&lt;p&gt;If you don&#39;t edit the results list, &lt;code&gt;Sync All&lt;/code&gt; and &lt;code&gt;Replace&lt;/code&gt; have equivalent outcomes, except for one case. When you do multi-line replace with &lt;code&gt;--multiline&lt;/code&gt; and &lt;code&gt;--multiline-dot-all&lt;/code&gt; flags, sync won&#39;t work so you have to use replace. Essentially the difference it that &lt;code&gt;Replace&lt;/code&gt; runs &lt;code&gt;rg --replace=... --passthrough&lt;/code&gt; on each file and does not depend at all on what&#39;s in the results area. &lt;code&gt;Sync All&lt;/code&gt; does a line by line sync based on what&#39;s in the results area.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; changing the &lt;code&gt;&amp;lt;line-number&amp;gt;:&amp;lt;column&amp;gt;:&lt;/code&gt; prefix of result lines will disable sync for that line&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; sync is disabled when doing multiline replacement (&lt;code&gt;--multiline&lt;/code&gt; flag)&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if you would like sync to work when doing a replacement with empty string, please add &lt;code&gt;--replace=&lt;/code&gt; to the flags.&lt;/p&gt; 
&lt;h3&gt;Going to / Opening / Previewing Result Location&lt;/h3&gt; 
&lt;p&gt;When the cursor is placed on a result file path, you can go to that file by pressing &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; in normal mode (&lt;code&gt;Goto&lt;/code&gt; action default keybind). When it&#39;s placed over a result match line, you will be taken to the file/line/column of the match. By default, the file buffer is opened in the last window you were in before opening grug-far, which is typically the other vertical split.&lt;/p&gt; 
&lt;p&gt;If you would like to do the same thing, but have the cursor stay in place, you can use the &lt;code&gt;Open&lt;/code&gt; action instead.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; for both &lt;code&gt;Goto&lt;/code&gt; and &lt;code&gt;Open&lt;/code&gt; actions, if a &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; is entered beforehand, the location corresponding to &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; result line is used instead of the current cursor line. You can set the option &lt;code&gt;resultLocation.showNumberLabel = true&lt;/code&gt; if you would like to have a visual indication of the &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to smoothly &lt;code&gt;Open&lt;/code&gt; each result location in sequence, you can use the &lt;code&gt;Open Next&lt;/code&gt; and &lt;code&gt;Open Prev&lt;/code&gt; actions.&lt;/p&gt; 
&lt;p&gt;If you would like to keep the buffers layout, you can use the &lt;code&gt;Preview&lt;/code&gt; action instead, which will open location in a floating window.&lt;/p&gt; 
&lt;h3&gt;Opening result lines in quickfix list&lt;/h3&gt; 
&lt;p&gt;Result lines can be opened in the quickfix list. Deleting result lines will cause them not to be included.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; changing the &lt;code&gt;&amp;lt;line-number&amp;gt;:&amp;lt;column&amp;gt;:&lt;/code&gt; prefix of result lines will remove lines from consideration&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; quickfix list is disabled when doing multiline replacement (&lt;code&gt;--multiline&lt;/code&gt; flag)&lt;/p&gt; 
&lt;h3&gt;History&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;grug-far&lt;/strong&gt; can keep track of your search history. This is done either by manually adding a history entry with &lt;code&gt;History Add&lt;/code&gt; action or automatically on certain successful actions like &lt;code&gt;Replace&lt;/code&gt; and &lt;code&gt;Sync All&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When you would like to pick one of your history entries to reuse, you can use the &lt;code&gt;History Open&lt;/code&gt; action to open the search history as a buffer. From there you can pick an entry that will be auto-filled in.&lt;/p&gt; 
&lt;p&gt;Note that you can edit the history buffer and save just like any other buffer if you need to do some cleanup. The format of a history entry looks like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;optional comment, e.g. My special search&amp;gt;
Engine: &amp;lt;astgrep|astgrep-rules|ripgrep&amp;gt;(|lua)?
Search: &amp;lt;text&amp;gt;
Replace: &amp;lt;text&amp;gt;
Files Filter: &amp;lt;text&amp;gt;
Flags: &amp;lt;text&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; can span multiple line with the aid of a &quot;continuation prefix&quot; (&lt;code&gt;| &lt;/code&gt;). e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Replace: something
| additional replace text
| more replace text
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that some engines might use other inputs. For example, &lt;code&gt;astgrep-rules&lt;/code&gt; uses &lt;code&gt;Rules&lt;/code&gt; instead of &lt;code&gt;Search&lt;/code&gt; and does not have &lt;code&gt;Replace&lt;/code&gt;. History entries are separated by one or more empty lines.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;strong&gt;grug-far&lt;/strong&gt; will ignore lines that do not start with the prefixes above&lt;/p&gt; 
&lt;h3&gt;Seeing the full search command&lt;/h3&gt; 
&lt;p&gt;Sometimes, mostly for debug purposes, it&#39;s useful to see the full CLI command that gets executed on search. You can toggle that on with the &lt;code&gt;Toggle Show rg Command&lt;/code&gt; action, and the command will appear as the first thing in the search results area.&lt;/p&gt; 
&lt;p&gt;The command is shell-escaped, so you can copy and execute it in a shell manually if you need to.&lt;/p&gt; 
&lt;h3&gt;Aborting&lt;/h3&gt; 
&lt;p&gt;If you inadvertently launched a wrong search/sync/replace, you can abort early using the &lt;code&gt;Abort&lt;/code&gt; action.&lt;/p&gt; 
&lt;h3&gt;Swapping search engine&lt;/h3&gt; 
&lt;p&gt;You can swap search engines with the &lt;code&gt;Swap Engine&lt;/code&gt; action. Currently &lt;code&gt;ripgrep&lt;/code&gt; (default), &lt;code&gt;astgrep&lt;/code&gt;, and &lt;code&gt;astgrep-rules&lt;/code&gt; are supported.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ripgrep&lt;/code&gt; uses the &lt;code&gt;rg&lt;/code&gt; CLI command to search and replace. See &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep docs&lt;/a&gt; for more information about CLI options and regex syntax.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;astgrep&lt;/code&gt; and &lt;code&gt;astgrep-rules&lt;/code&gt; are two different interfaces to the &lt;code&gt;sg&lt;/code&gt; CLI command. &lt;code&gt;astgrep&lt;/code&gt; is limited to single &lt;a href=&quot;https://ast-grep.github.io/guide/pattern-syntax.html&quot;&gt;patterns&lt;/a&gt;, with &lt;code&gt;astgrep run --pattern=&amp;lt;your_search_string&amp;gt;&lt;/code&gt;. &lt;code&gt;astgrep-rules&lt;/code&gt; takes YAML input to define &lt;a href=&quot;https://ast-grep.github.io/guide/rule-config.html&quot;&gt;rules&lt;/a&gt;, run with &lt;code&gt;sg scan --inline-rules=&amp;lt;your_rules_yaml&amp;gt;&lt;/code&gt;, which is more verbose but more powerful. See &lt;a href=&quot;https://ast-grep.github.io/guide/introduction.html&quot;&gt;ast-grep docs&lt;/a&gt; for more information. grug-far will attempt to pre-populate reasonable YAML boilerplate when selecting the &lt;code&gt;astgrep-rules&lt;/code&gt; engine. If you&#39;ve been working on a pattern with &lt;code&gt;astgrep&lt;/code&gt;, then swap engine to &lt;code&gt;astgrep-rules&lt;/code&gt;, grug-far will include your existing pattern in the rule so you can build on it from there.&lt;/p&gt; 
&lt;h3&gt;Closing&lt;/h3&gt; 
&lt;p&gt;When you are done, it is recommended to close the buffer with the configured keybinding (see Configuration section above) or just &lt;code&gt;:bd&lt;/code&gt; in order to save on resources as some search results can be quite beefy in size. The advantage of using the &lt;code&gt;Close&lt;/code&gt; action as opposed to just &lt;code&gt;:bd&lt;/code&gt; is that it will ask you to confirm if there is a replace/sync in progress, as those would be aborted.&lt;/p&gt; 
&lt;h3&gt;Filetype&lt;/h3&gt; 
&lt;p&gt;Note that &lt;em&gt;grug-far.nvim&lt;/em&gt; buffers will have &lt;code&gt;filetype=grug-far&lt;/code&gt;, history buffers will have &lt;code&gt;filetype=grug-far-history&lt;/code&gt; and help will have &lt;code&gt;filetype=grug-far-help&lt;/code&gt; if you need filter/exclude them in any situations. Excluding seems to be necessary with copilot at the time of writing this.&lt;/p&gt; 
&lt;h3&gt;⚒️ Lua API&lt;/h3&gt; 
&lt;p&gt;For more control, you can programmatically open a grug-far buffer like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;require(&#39;grug-far&#39;).open(opts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the above is called while in visual mode, it will pre-fill current visual selection as search text. (note, this will also set &lt;code&gt;--fixed-strings&lt;/code&gt; flag as selection can contain special characters)&lt;/p&gt; 
&lt;p&gt;Note that if you want to pre-fill current visual selection from command mode, you would have to use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:lua require(&#39;grug-far&#39;).with_visual_selection(opts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(command mode is the only case where this is necessary in order to force using the visual selection)&lt;/p&gt; 
&lt;p&gt;where &lt;code&gt;opts&lt;/code&gt; will be merged with and override the global plugin options configured at setup time.&lt;/p&gt; 
&lt;p&gt;See here for all the available &lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/lua/grug-far/opts.lua&quot;&gt;options&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For more API, see &lt;a href=&quot;https://raw.githubusercontent.com/MagicDuck/grug-far.nvim/main/doc/grug-far.txt&quot;&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;🥪 Cookbook&lt;/h3&gt; 
&lt;h4&gt;Launch with the current word under the cursor as the search string&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ prefills = { search = vim.fn.expand(&quot;&amp;lt;cword&amp;gt;&quot;) } })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch with ast-grep engine&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ engine = &#39;astgrep&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch as a transient buffer which is both unlisted and fully deletes itself when not in use&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ transient = true })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch, limiting search/replace to current file&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).open({ prefills = { paths = vim.fn.expand(&quot;%&quot;) } })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch with the current visual selection, searching only current file&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:&amp;lt;C-u&amp;gt;lua require(&#39;grug-far&#39;).with_visual_selection({ prefills = { paths = vim.fn.expand(&quot;%&quot;) } })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Launch, limiting search to the current buffer visual selection range&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:GrugFarWithin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or as a keymap if you want to go fully lua:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &#39;n&#39;, &#39;x&#39; }, &#39;&amp;lt;leader&amp;gt;si&#39;, function()
  require(&#39;grug-far&#39;).open({ visualSelectionUsage = &#39;operate-within-range&#39; })
end, { desc = &#39;grug-far: Search within range&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Toggle visibility of a particular instance and set title to a fixed string&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&#39;grug-far&#39;).toggle_instance({ instanceName=&quot;far&quot;, staticTitle=&quot;Find and Replace&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Create a buffer local keybinding to toggle --fixed-strings flag&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;FileType&#39;, {
  group =  vim.api.nvim_create_augroup(&#39;my-grug-far-custom-keybinds&#39;, { clear = true }),
  pattern = { &#39;grug-far&#39; },
  callback = function()
    vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;localleader&amp;gt;w&#39;, function()
      local state = unpack(require(&#39;grug-far&#39;).toggle_flags({ &#39;--fixed-strings&#39; }))
      vim.notify(&#39;grug-far: toggled --fixed-strings &#39; .. (state and &#39;ON&#39; or &#39;OFF&#39;))
    end, { buffer = true })
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Create a buffer local keybinding to open a result location and immediately close grug-far.nvim&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;FileType&#39;, {
  group = vim.api.nvim_create_augroup(&#39;grug-far-keybindings&#39;, { clear = true }),
  pattern = { &#39;grug-far&#39; },
  callback = function()
    vim.api.nvim_buf_set_keymap(0, &#39;n&#39;, &#39;&amp;lt;C-enter&amp;gt;&#39;, &#39;&amp;lt;localleader&amp;gt;o&amp;lt;localleader&amp;gt;c&#39;, {})
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(where &lt;code&gt;&amp;lt;localleader&amp;gt;o&lt;/code&gt; and &lt;code&gt;&amp;lt;localleader&amp;gt;c&lt;/code&gt; are the default keybindings for Open and Close actions. You will need to change them if you set them to something different)&lt;/p&gt; 
&lt;h4&gt;Create a buffer local keybinding to jump back to Search input&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&#39;FileType&#39;, {
  group = vim.api.nvim_create_augroup(&#39;grug-far-keymap&#39;, { clear = true }),
  pattern = { &#39;grug-far&#39; },
  callback = function()
    -- jump back to search input by hitting left arrow in normal mode:
    vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;left&amp;gt;&#39;, function()
      vim.api.nvim_win_set_cursor(vim.fn.bufwinid(0), { 2, 0 })
    end, { buffer = true })
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Add neo-tree integration to open search limited to focused directory or file&lt;/h4&gt; 
&lt;p&gt;Create a hotkey &lt;code&gt;z&lt;/code&gt; in &lt;code&gt;neo-tree&lt;/code&gt; that will create/open a named instance of grug-far with the current directory of the file or directory in focus. On the second trigger, path of the grug-far instance will be updated, leaving other fields intact.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neo tree lazy plugin setup&lt;/summary&gt; 
 &lt;p&gt;Small video of it in action: &lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim/issues/165#issuecomment-2257439367&quot;&gt;https://github.com/MagicDuck/grug-far.nvim/issues/165#issuecomment-2257439367&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  dependencies = &quot;nvim-tree/nvim-web-devicons&quot;,
  config = function()
    local function open_grug_far(prefills)
      local grug_far = require(&quot;grug-far&quot;)

      if not grug_far.has_instance(&quot;explorer&quot;) then
        grug_far.open({ instanceName = &quot;explorer&quot; })
      else
        grug_far.open_instance(&quot;explorer&quot;)
      end
      -- doing it seperately because multiple paths doesn&#39;t open work when passed with open
      -- updating the prefills without clearing the search and other fields
      grug_far.update_instance_prefills(&quot;explorer&quot;, prefills, false)
    end
    require(&quot;neo-tree&quot;).setup {
      commands = {
        -- create a new neo-tree command
        grug_far_replace = function(state)
          local node = state.tree:get_node()
          local prefills = {
            -- also escape the paths if space is there
            -- if you want files to be selected, use &#39;:p&#39; only, see filename-modifiers
            paths = node.type == &quot;directory&quot; and vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:p&quot;))
        or vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:h&quot;)),
          }
          open_grug_far(prefills)
        end,
        -- https://github.com/nvim-neo-tree/neo-tree.nvim/blob/fbb631e818f48591d0c3a590817003d36d0de691/doc/neo-tree.txt#L535
        grug_far_replace_visual = function(state, selected_nodes, callback)
          local paths = {}
          for _, node in pairs(selected_nodes) do
            -- also escape the paths if space is there
            -- if you want files to be selected, use &#39;:p&#39; only, see filename-modifiers
            local path = node.type == &quot;directory&quot; and vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:p&quot;))
        or vim.fn.fnameescape(vim.fn.fnamemodify(node:get_id(), &quot;:h&quot;))
            table.insert(paths, path)
          end
          local prefills = { paths = table.concat(paths, &quot;\n&quot;) }
          open_grug_far(prefills)
        end,
      },
      window = {
        mappings = {
          -- map our new command to z
          z = &quot;grug_far_replace&quot;,
        },
      },
      -- rest of your config
    }
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Add oil.nvim integration to open search limited to focused directory&lt;/h4&gt; 
&lt;p&gt;Create a hotkey &lt;code&gt;gs&lt;/code&gt; in &lt;code&gt;oil.nvim&lt;/code&gt; that will create/open a named instance of grug-far with the current directory in focus. On the second trigger, path of the grug-far instance will be updated, leaving other fields intact.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Oil explorer lazy plugin setup&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;stevearc/oil.nvim&quot;,
  config = function()
    local oil = require &quot;oil&quot;
    oil.setup {
      keymaps = {
        -- create a new mapping, gs, to search and replace in the current directory
        gs = {
          callback = function()
            -- get the current directory
            local prefills = { paths = oil.get_current_dir() }

            local grug_far = require &quot;grug-far&quot;
            -- instance check
            if not grug_far.has_instance &quot;explorer&quot; then
              grug_far.open {
                instanceName = &quot;explorer&quot;,
                prefills = prefills,
                staticTitle = &quot;Find and Replace from Explorer&quot;,
              }
            else
              grug_far.open_instance &quot;explorer&quot;
              -- updating the prefills without clearing the search and other fields
              grug_far.update_instance_prefills(&quot;explorer&quot;, prefills, false)
            end
          end,
          desc = &quot;oil: Search in directory&quot;,
        },
      },
      -- rest of your config
    }
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Add mini.files integration to open search limited to focused directory&lt;/h4&gt; 
&lt;p&gt;Create a hotkey &lt;code&gt;gs&lt;/code&gt; in &lt;code&gt;mini.files&lt;/code&gt; that will create/open a named instance of grug-far with the current directory in focus. On the second trigger, the path of the grug-far instance will be updated, leaving other fields intact.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;MiniFiles explorer lazy plugin setup&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;echasnovski/mini.files&quot;,
  config = function()
    local MiniFiles = require &quot;mini.files&quot;

    MiniFiles.setup({
      -- your config
    })

    
    local files_grug_far_replace = function(path)
      -- works only if cursor is on the valid file system entry
      local cur_entry_path = MiniFiles.get_fs_entry().path
      local prefills = { paths = vim.fs.dirname(cur_entry_path) }

      local grug_far = require &quot;grug-far&quot;

      -- instance check
      if not grug_far.has_instance &quot;explorer&quot; then
        grug_far.open {
          instanceName = &quot;explorer&quot;,
          prefills = prefills,
          staticTitle = &quot;Find and Replace from Explorer&quot;,
        }
      else
        grug_far.open_instance &quot;explorer&quot;
        -- updating the prefills without crealing the search and other fields
        grug_far.update_instance_prefills(&quot;explorer&quot;, prefills, false)
      end
    end

    vim.api.nvim_create_autocmd(&quot;User&quot;, {
      pattern = &quot;MiniFilesBufferCreate&quot;,
      callback = function(args)
        vim.keymap.set(&quot;n&quot;, &quot;gs&quot;, files_grug_far_replace, { buffer = args.data.buf_id, desc = &quot;Search in directory&quot; })
      end,
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;❓ Q&amp;amp;A&lt;/h2&gt; 
&lt;h4&gt;1. Getting RPC[Error] ... Document for URI could not be found: file:///.../Grug%20FAR%20-%20...&lt;/h4&gt; 
&lt;p&gt;Chances are that you are using copilot.nvim and the fix is to exclude &lt;code&gt;grug-far&lt;/code&gt; file types in copilot config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;filetypes = {
  [&quot;grug-far&quot;] = false,
  [&quot;grug-far-history&quot;] = false,
  [&quot;grug-far-help&quot;] = false,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;📦 Similar Plugins / Inspiration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-pack/nvim-spectre&quot;&gt;nvim-spectre&lt;/a&gt;: the OG find and replace in a buffer plugin, great inspiration!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt;: lifted &lt;code&gt;rg&lt;/code&gt; healthcheck from there :P&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;: used their beautiful &lt;code&gt;README.md&lt;/code&gt; as a template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/m00qek/plugin-template.nvim/tree/main&quot;&gt;plugin-template.nvim&lt;/a&gt;: super handy template, this plugin is based on it!&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>yetone/avante.nvim</title>
      <link>https://github.com/yetone/avante.nvim</link>
      <description>&lt;p&gt;Use your Neovim like using Cursor AI IDE!&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img alt=&quot;logo&quot; width=&quot;120&quot; src=&quot;https://github.com/user-attachments/assets/2e2f2a58-2b28-4d11-afd1-87b65612b2de&quot;&gt; 
 &lt;h1&gt;avante.nvim&lt;/h1&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://neovim.io/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=Neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&quot; alt=&quot;Neovim: v0.10+&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/lua.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/lua.yaml?style=flat-square&amp;amp;logo=lua&amp;amp;logoColor=c7c7c7&amp;amp;label=Lua+CI&amp;amp;labelColor=1E40AF&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Lua CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/rust.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/rust.yaml?style=flat-square&amp;amp;logo=rust&amp;amp;logoColor=ffffff&amp;amp;label=Rust+CI&amp;amp;labelColor=BC826A&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Rust CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/python.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/python.yaml?style=flat-square&amp;amp;logo=python&amp;amp;logoColor=ffffff&amp;amp;label=Python+CI&amp;amp;labelColor=3672A5&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Python CI status&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://discord.gg/QfnEFEdSjz&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/1302530866362323016?style=flat-square&amp;amp;logo=discord&amp;amp;label=Discord&amp;amp;logoColor=ffffff&amp;amp;labelColor=7376CF&amp;amp;color=268165&quot; alt=&quot;Discord&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://dotfyle.com/plugins/yetone/avante.nvim&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/yetone/avante.nvim/shield?style=flat-square&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;avante.nvim&lt;/strong&gt; is a Neovim plugin designed to emulate the behaviour of the &lt;a href=&quot;https://www.cursor.com&quot;&gt;Cursor&lt;/a&gt; AI IDE. It provides users with AI-driven code suggestions and the ability to apply these recommendations directly to their source files with minimal effort.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;🥰 This project is undergoing rapid iterations, and many exciting features will be added successively. Stay tuned!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&quot;&gt;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&quot;&gt;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsorship ❤️&lt;/h2&gt; 
&lt;p&gt;If you like this project, please consider supporting me on Patreon, as it helps me to continue maintaining and improving it:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://patreon.com/yetone&quot;&gt;Sponsor me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;AI-Powered Code Assistance&lt;/strong&gt;: Interact with AI to ask questions about your current code file and receive intelligent suggestions for improvement or modification.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;One-Click Application&lt;/strong&gt;: Quickly apply the AI&#39;s suggested changes to your source code with a single command, streamlining the editing process and saving time.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;For building binary if you wish to build from source, then &lt;code&gt;cargo&lt;/code&gt; is required. Otherwise &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; will be used to get prebuilt binary from GitHub.&lt;/p&gt; 
&lt;details open&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; (recommended)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;yetone/avante.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  version = false, -- Set this to &quot;*&quot; to always pull the latest release version, or set it to false to update to the latest code changes.
  opts = {
    -- add any opts here
    -- for example
    provider = &quot;openai&quot;,
    openai = {
      endpoint = &quot;https://api.openai.com/v1&quot;,
      model = &quot;gpt-4o&quot;, -- your desired model (or use gpt-4o, etc.)
      timeout = 30000, -- timeout in milliseconds
      temperature = 0, -- adjust if needed
      max_tokens = 4096,
      -- reasoning_effort = &quot;high&quot; -- only supported for reasoning models (o1, etc.)
    },
  },
  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  build = &quot;make&quot;,
  -- build = &quot;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false&quot; -- for windows
  dependencies = {
    &quot;nvim-treesitter/nvim-treesitter&quot;,
    &quot;stevearc/dressing.nvim&quot;,
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    --- The below dependencies are optional,
    &quot;echasnovski/mini.pick&quot;, -- for file_selector provider mini.pick
    &quot;nvim-telescope/telescope.nvim&quot;, -- for file_selector provider telescope
    &quot;hrsh7th/nvim-cmp&quot;, -- autocompletion for avante commands and mentions
    &quot;ibhagwan/fzf-lua&quot;, -- for file_selector provider fzf
    &quot;nvim-tree/nvim-web-devicons&quot;, -- or echasnovski/mini.icons
    &quot;zbirenbaum/copilot.lua&quot;, -- for providers=&#39;copilot&#39;
    {
      -- support for image pasting
      &quot;HakonHarnes/img-clip.nvim&quot;,
      event = &quot;VeryLazy&quot;,
      opts = {
        -- recommended settings
        default = {
          embed_image_as_base64 = false,
          prompt_for_file_name = false,
          drag_and_drop = {
            insert_mode = true,
          },
          -- required for Windows users
          use_absolute_path = true,
        },
      },
    },
    {
      -- Make sure to set this up properly if you have lazy=true
      &#39;MeanderingProgrammer/render-markdown.nvim&#39;,
      opts = {
        file_types = { &quot;markdown&quot;, &quot;Avante&quot; },
      },
      ft = { &quot;markdown&quot;, &quot;Avante&quot; },
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;vim-plug&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
&quot; Deps
Plug &#39;nvim-treesitter/nvim-treesitter&#39;
Plug &#39;stevearc/dressing.nvim&#39;
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;MunifTanjim/nui.nvim&#39;
Plug &#39;MeanderingProgrammer/render-markdown.nvim&#39;

&quot; Optional deps
Plug &#39;hrsh7th/nvim-cmp&#39;
Plug &#39;nvim-tree/nvim-web-devicons&#39; &quot;or Plug &#39;echasnovski/mini.icons&#39;
Plug &#39;HakonHarnes/img-clip.nvim&#39;
Plug &#39;zbirenbaum/copilot.lua&#39;

&quot; Yay, pass source=true if you want to build from source
Plug &#39;yetone/avante.nvim&#39;, { &#39;branch&#39;: &#39;main&#39;, &#39;do&#39;: &#39;make&#39; }
autocmd! User avante.nvim lua &amp;lt;&amp;lt; EOF
require(&#39;avante&#39;).setup()
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.deps&quot;&gt;mini.deps&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local add, later, now = MiniDeps.add, MiniDeps.later, MiniDeps.now

add({
  source = &#39;yetone/avante.nvim&#39;,
  monitor = &#39;main&#39;,
  depends = {
    &#39;nvim-treesitter/nvim-treesitter&#39;,
    &#39;stevearc/dressing.nvim&#39;,
    &#39;nvim-lua/plenary.nvim&#39;,
    &#39;MunifTanjim/nui.nvim&#39;,
    &#39;echasnovski/mini.icons&#39;
  },
  hooks = { post_checkout = function() vim.cmd(&#39;make&#39;) end }
})
--- optional
add({ source = &#39;hrsh7th/nvim-cmp&#39; })
add({ source = &#39;zbirenbaum/copilot.lua&#39; })
add({ source = &#39;HakonHarnes/img-clip.nvim&#39; })
add({ source = &#39;MeanderingProgrammer/render-markdown.nvim&#39; })

later(function() require(&#39;render-markdown&#39;).setup({...}) end)
later(function()
  require(&#39;img-clip&#39;).setup({...}) -- config img-clip
  require(&quot;copilot&quot;).setup({...}) -- setup copilot to your liking
  require(&quot;avante&quot;).setup({...}) -- config for avante.nvim
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;Packer&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
  -- Required plugins
  use &#39;nvim-treesitter/nvim-treesitter&#39;
  use &#39;stevearc/dressing.nvim&#39;
  use &#39;nvim-lua/plenary.nvim&#39;
  use &#39;MunifTanjim/nui.nvim&#39;
  use &#39;MeanderingProgrammer/render-markdown.nvim&#39;

  -- Optional dependencies
  use &#39;hrsh7th/nvim-cmp&#39;
  use &#39;nvim-tree/nvim-web-devicons&#39; -- or use &#39;echasnovski/mini.icons&#39;
  use &#39;HakonHarnes/img-clip.nvim&#39;
  use &#39;zbirenbaum/copilot.lua&#39;

  -- Avante.nvim with build process
  use {
    &#39;yetone/avante.nvim&#39;,
    branch = &#39;main&#39;,
    run = &#39;make&#39;,
    config = function()
      require(&#39;avante&#39;).setup()
    end
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/nix-community/home-manager&quot;&gt;Home Manager&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;programs.neovim = {
  plugins = [
    {
      plugin = pkgs.vimPlugins.avante-nvim;
      type = &quot;lua&quot;;
      config = &#39;&#39;require(&quot;avante&quot;).setup()&#39;&#39; # or builtins.readFile ./plugins/avante.lua;
    }
  ];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://nix-community.github.io/nixvim/plugins/avante/index.html&quot;&gt;Nixvim&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;  plugins.avante.enable = true;
  plugins.avante.settings = {
    # setup options here
  };
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- deps:
require(&#39;cmp&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;img-clip&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;copilot&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;render-markdown&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;avante&#39;).setup ({
  -- Your config here!
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;avante.nvim&lt;/code&gt; is currently only compatible with Neovim 0.10.1 or later. Please ensure that your Neovim version meets these requirements before proceeding.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;When loading the plugin synchronously, we recommend &lt;code&gt;require&lt;/code&gt;ing it sometime after your colorscheme.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Recommended &lt;strong&gt;Neovim&lt;/strong&gt; options:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- views can only be fully collapsed with the global statusline
vim.opt.laststatus = 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Any rendering plugins that support markdown should work with Avante as long as you add the supported filetype &lt;code&gt;Avante&lt;/code&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175&quot;&gt;https://github.com/yetone/avante.nvim/issues/175&lt;/a&gt; and &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175#issuecomment-2313749363&quot;&gt;this comment&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Default setup configuration&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/config.lua&quot;&gt;config.lua#L9&lt;/a&gt; for the full config&lt;/em&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  ---@alias Provider &quot;claude&quot; | &quot;openai&quot; | &quot;azure&quot; | &quot;gemini&quot; | &quot;cohere&quot; | &quot;copilot&quot; | string
  provider = &quot;claude&quot;, -- The provider used in Aider mode or in the planning phase of Cursor Planning Mode
  -- WARNING: Since auto-suggestions are a high-frequency operation and therefore expensive,
  -- currently designating it as `copilot` provider is dangerous because: https://github.com/yetone/avante.nvim/issues/1048
  -- Of course, you can reduce the request frequency by increasing `suggestion.debounce`.
  auto_suggestions_provider = &quot;claude&quot;,
  cursor_applying_provider = nil, -- The provider used in the applying phase of Cursor Planning Mode, defaults to nil, when nil uses Config.provider as the provider for the applying phase
  claude = {
    endpoint = &quot;https://api.anthropic.com&quot;,
    model = &quot;claude-3-5-sonnet-20241022&quot;,
    temperature = 0,
    max_tokens = 4096,
  },
  ---Specify the special dual_boost mode
  ---1. enabled: Whether to enable dual_boost mode. Default to false.
  ---2. first_provider: The first provider to generate response. Default to &quot;openai&quot;.
  ---3. second_provider: The second provider to generate response. Default to &quot;claude&quot;.
  ---4. prompt: The prompt to generate response based on the two reference outputs.
  ---5. timeout: Timeout in milliseconds. Default to 60000.
  ---How it works:
  --- When dual_boost is enabled, avante will generate two responses from the first_provider and second_provider respectively. Then use the response from the first_provider as provider1_output and the response from the second_provider as provider2_output. Finally, avante will generate a response based on the prompt and the two reference outputs, with the default Provider as normal.
  ---Note: This is an experimental feature and may not work as expected.
  dual_boost = {
    enabled = false,
    first_provider = &quot;openai&quot;,
    second_provider = &quot;claude&quot;,
    prompt = &quot;Based on the two reference outputs below, generate a response that incorporates elements from both but reflects your own judgment and unique perspective. Do not provide any explanation, just give the response directly. Reference Output 1: [{{provider1_output}}], Reference Output 2: [{{provider2_output}}]&quot;,
    timeout = 60000, -- Timeout in milliseconds
  },
  behaviour = {
    auto_suggestions = false, -- Experimental stage
    auto_set_highlight_group = true,
    auto_set_keymaps = true,
    auto_apply_diff_after_generation = false,
    support_paste_from_clipboard = false,
    minimize_diff = true, -- Whether to remove unchanged lines when applying a code block
    enable_token_counting = true, -- Whether to enable token counting. Default to true.
    enable_cursor_planning_mode = false, -- Whether to enable Cursor Planning Mode. Default to false.
  },
  mappings = {
    --- @class AvanteConflictMappings
    diff = {
      ours = &quot;co&quot;,
      theirs = &quot;ct&quot;,
      all_theirs = &quot;ca&quot;,
      both = &quot;cb&quot;,
      cursor = &quot;cc&quot;,
      next = &quot;]x&quot;,
      prev = &quot;[x&quot;,
    },
    suggestion = {
      accept = &quot;&amp;lt;M-l&amp;gt;&quot;,
      next = &quot;&amp;lt;M-]&amp;gt;&quot;,
      prev = &quot;&amp;lt;M-[&amp;gt;&quot;,
      dismiss = &quot;&amp;lt;C-]&amp;gt;&quot;,
    },
    jump = {
      next = &quot;]]&quot;,
      prev = &quot;[[&quot;,
    },
    submit = {
      normal = &quot;&amp;lt;CR&amp;gt;&quot;,
      insert = &quot;&amp;lt;C-s&amp;gt;&quot;,
    },
    sidebar = {
      apply_all = &quot;A&quot;,
      apply_cursor = &quot;a&quot;,
      retry_user_request = &quot;r&quot;,
      edit_user_request = &quot;e&quot;,
      switch_windows = &quot;&amp;lt;Tab&amp;gt;&quot;,
      reverse_switch_windows = &quot;&amp;lt;S-Tab&amp;gt;&quot;,
      remove_file = &quot;d&quot;,
      add_file = &quot;@&quot;,
      close = { &quot;&amp;lt;Esc&amp;gt;&quot;, &quot;q&quot; },
      close_from_input = nil, -- e.g., { normal = &quot;&amp;lt;Esc&amp;gt;&quot;, insert = &quot;&amp;lt;C-d&amp;gt;&quot; }
    },
  },
  hints = { enabled = true },
  windows = {
    ---@type &quot;right&quot; | &quot;left&quot; | &quot;top&quot; | &quot;bottom&quot;
    position = &quot;right&quot;, -- the position of the sidebar
    wrap = true, -- similar to vim.o.wrap
    width = 30, -- default % based on available width
    sidebar_header = {
      enabled = true, -- true, false to enable/disable the header
      align = &quot;center&quot;, -- left, center, right for title
      rounded = true,
    },
    input = {
      prefix = &quot;&amp;gt; &quot;,
      height = 8, -- Height of the input window in vertical layout
    },
    edit = {
      border = &quot;rounded&quot;,
      start_insert = true, -- Start insert mode when opening the edit window
    },
    ask = {
      floating = false, -- Open the &#39;AvanteAsk&#39; prompt in a floating window
      start_insert = true, -- Start insert mode when opening the ask window
      border = &quot;rounded&quot;,
      ---@type &quot;ours&quot; | &quot;theirs&quot;
      focus_on_apply = &quot;ours&quot;, -- which diff to focus after applying
    },
  },
  highlights = {
    ---@type AvanteConflictHighlights
    diff = {
      current = &quot;DiffText&quot;,
      incoming = &quot;DiffAdd&quot;,
    },
  },
  --- @class AvanteConflictUserConfig
  diff = {
    autojump = true,
    ---@type string | fun(): any
    list_opener = &quot;copen&quot;,
    --- Override the &#39;timeoutlen&#39; setting while hovering over a diff (see :help timeoutlen).
    --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`.
    --- Disable by setting to -1.
    override_timeoutlen = 500,
  },
  suggestion = {
    debounce = 600,
    throttle = 600,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Blink.cmp users&lt;/h2&gt; 
&lt;p&gt;For blink cmp users (nvim-cmp alternative) view below instruction for configuration This is achieved by emulating nvim-cmp using blink.compat or you can use &lt;a href=&quot;https://github.com/Kaiser-Yang/blink-cmp-avante&quot;&gt;Kaiser-Yang/blink-cmp-avante&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      file_selector = {
        --- @alias FileSelectorProvider &quot;native&quot; | &quot;fzf&quot; | &quot;mini.pick&quot; | &quot;snacks&quot; | &quot;telescope&quot; | string | fun(params: avante.file_selector.IParams|nil): nil
        provider = &quot;fzf&quot;,
        -- Options override for custom providers
        provider_opts = {},
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To create a customized file_selector, you can specify a customized function to launch a picker to select items and pass the selected items to the &lt;code&gt;handler&lt;/code&gt; callback.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      file_selector = {
        ---@param params avante.file_selector.IParams
        provider = function(params)
          local filepaths = params.filepaths ---@type string[]
          local title = params.title ---@type string
          local handler = params.handler ---@type fun(selected_filepaths: string[]|nil): nil

          -- Launch your customized picker with the items built from `filepaths`, then in the `on_confirm` callback,
          -- pass the selected items (convert back to file paths) to the `handler` function.

          local items = __your_items_formatter__(filepaths)
          __your_picker__({
            items = items,
            on_cancel = function()
              handler(nil)
            end,
            on_confirm = function(selected_items)
              local selected_filepaths = {}
              for _, item in ipairs(selected_items) do
                table.insert(selected_filepaths, item.filepath)
              end
              handler(selected_filepaths)
            end
          })
        end,
        ---below is optional
        provider_opts = {
          ---@param params avante.file_selector.opts.IGetFilepathsParams
          get_filepaths = function(params)
            local cwd = params.cwd ---@type string
            local selected_filepaths = params.selected_filepaths ---@type string[]
            local cmd = string.format(&quot;fd --base-directory &#39;%s&#39; --hidden&quot;, vim.fn.fnameescape(cwd))
            local output = vim.fn.system(cmd)
            local filepaths = vim.split(output, &quot;\n&quot;, { trimempty = true })
            return vim
              .iter(filepaths)
              :filter(function(filepath)
                return not vim.tbl_contains(selected_filepaths, filepath)
              end)
              :totable()
          end
        }
        end
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Choose a selector other that native, the default as that currently has an issue For lazyvim users copy the full config for blink.cmp from the website or extend the options&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      compat = {
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For other users just add a custom provider&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      default = {
        ...
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      providers = {
        avante_commands = {
          name = &quot;avante_commands&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 90, -- show at a higher priority than lsp
          opts = {},
        },
        avante_files = {
          name = &quot;avante_files&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 100, -- show at a higher priority than lsp
          opts = {},
        },
        avante_mentions = {
          name = &quot;avante_mentions&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 1000, -- show at a higher priority than lsp
          opts = {},
        }
        ...
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Given its early stage, &lt;code&gt;avante.nvim&lt;/code&gt; currently supports the following basic functionalities:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;Avante will only support Claude, and OpenAI (and its variants including azure)out-of-the-box due to its high code quality generation. For all OpenAI-compatible providers, see &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki/Custom-providers&quot;&gt;wiki&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;del&gt;Due to the poor performance of other models, avante.nvim only recommends using the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;All features can only be guaranteed to work properly on the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;We do not accept changes to the code or prompts to accommodate other models. Otherwise, it will greatly increase our maintenance costs.&lt;/del&gt; &amp;gt; &lt;del&gt;We hope everyone can understand. Thank you!&lt;/del&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;Since avante.nvim now supports &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor planning mode&lt;/a&gt;, the above statement is no longer valid! avante.nvim now supports most models! If you encounter issues with normal usage, please try enabling &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor planning mode&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;For most consistency between neovim session, it is recommended to set the environment variables in your shell file. By default, &lt;code&gt;Avante&lt;/code&gt; will prompt you at startup to input the API key for the provider you have selected.&lt;/p&gt; 
 &lt;p&gt;For Claude:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export ANTHROPIC_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Azure OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export AZURE_OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Amazon Bedrock:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export BEDROCK_KEYS=aws_access_key_id,aws_secret_access_key,aws_region[,aws_session_token]

&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: The aws_session_token is optional and only needed when using temporary AWS credentials&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open a code file in Neovim.&lt;/li&gt; 
 &lt;li&gt;Use the &lt;code&gt;:AvanteAsk&lt;/code&gt; command to query the AI about the code.&lt;/li&gt; 
 &lt;li&gt;Review the AI&#39;s suggestions.&lt;/li&gt; 
 &lt;li&gt;Apply the recommended changes directly to your code with a simple command or key binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The plugin is still under active development, and both its functionality and interface are subject to significant changes. Expect some rough edges and instability as the project evolves.&lt;/p&gt; 
&lt;h2&gt;Key Bindings&lt;/h2&gt; 
&lt;p&gt;The following key bindings are available for use with &lt;code&gt;avante.nvim&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key Binding&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;show sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;toggle sidebar visibility&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;refresh sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;switch sidebar focus&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;?&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;select model&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;edit selected blocks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose ours&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose all theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;0&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose none&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose both&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to previous conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to next conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;jump to previous codeblocks (results window)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;jump to next codeblocks (results windows)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;If you are using &lt;code&gt;lazy.nvim&lt;/code&gt;, then all keymap here will be safely set, meaning if &lt;code&gt;&amp;lt;leader&amp;gt;aa&lt;/code&gt; is already binded, then avante.nvim won&#39;t bind this mapping. In this case, user will be responsible for setting up their own. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki#keymaps-and-api-i-guess&quot;&gt;notes on keymaps&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Neotree shortcut&lt;/h3&gt; 
&lt;p&gt;In the neotree sidebar, you can also add a new keyboard shortcut to quickly add &lt;code&gt;file/folder&lt;/code&gt; to &lt;code&gt;Avante Selected Files&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neotree configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &#39;nvim-neo-tree/neo-tree.nvim&#39;,
    config = function()
      require(&#39;neo-tree&#39;).setup({
        filesystem = {
          commands = {
            avante_add_files = function(state)
              local node = state.tree:get_node()
              local filepath = node:get_id()
              local relative_path = require(&#39;avante.utils&#39;).relative_path(filepath)

              local sidebar = require(&#39;avante&#39;).get()

              local open = sidebar:is_open()
              -- ensure avante sidebar is open
              if not open then
                require(&#39;avante.api&#39;).ask()
                sidebar = require(&#39;avante&#39;).get()
              end

              sidebar.file_selector:add_selected_file(relative_path)

              -- remove neo tree buffer
              if not open then
                sidebar.file_selector:remove_selected_file(&#39;neo-tree filesystem [1]&#39;)
              end
            end,
          },
          window = {
            mappings = {
              [&#39;oa&#39;] = &#39;avante_add_files&#39;,
            },
          },
        },
      })
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Examples&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk [question] [position]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Ask AI about your code. Optional &lt;code&gt;position&lt;/code&gt; set window position and &lt;code&gt;ask&lt;/code&gt; enable/disable direct asking mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk position=right Refactor this code here&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteBuild&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Build dependencies for the project&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteChat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Start a chat session with AI about your codebase. Default is &lt;code&gt;ask&lt;/code&gt;=false&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteClear&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear the chat history&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteEdit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Edit the selected code blocks&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteFocus&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch focus to/from the sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteRefresh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Refresh all Avante windows&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteSwitchProvider&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch AI provider (e.g. openai)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteShowRepoMap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show repo map for project&#39;s structure&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle the Avante sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show model list&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Highlight Groups&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteTitle&lt;/td&gt; 
   &lt;td&gt;Title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteSubtitle&lt;/td&gt; 
   &lt;td&gt;Selected code title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedSubtitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteThirdTitle&lt;/td&gt; 
   &lt;td&gt;Prompt title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedThirdTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrent&lt;/td&gt; 
   &lt;td&gt;Current conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.current&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncoming&lt;/td&gt; 
   &lt;td&gt;Incoming conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.incoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrentLabel&lt;/td&gt; 
   &lt;td&gt;Current conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictCurrent&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncomingLabel&lt;/td&gt; 
   &lt;td&gt;Incoming conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictIncoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvantePopupHint&lt;/td&gt; 
   &lt;td&gt;Usage hints in popup menus&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteInlineHint&lt;/td&gt; 
   &lt;td&gt;The end-of-line hint displayed in visual mode&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/highlights.lua&quot;&gt;highlights.lua&lt;/a&gt; for more information&lt;/p&gt; 
&lt;h2&gt;Ollama&lt;/h2&gt; 
&lt;p&gt;ollama is a first-class provider for avante.nvim. You can use it by setting &lt;code&gt;provider = &quot;ollama&quot;&lt;/code&gt; in the configuration, and set the &lt;code&gt;model&lt;/code&gt; field in &lt;code&gt;ollama&lt;/code&gt; to the model you want to use. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;provider = &quot;ollama&quot;,
ollama = {
  model = &quot;qwq:32b&quot;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you use ollama, the code planning effect may not be ideal, so it is strongly recommended that you enable &lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/cursor-planning-mode.md&quot;&gt;cursor-planning-mode&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom providers&lt;/h2&gt; 
&lt;p&gt;Avante provides a set of default providers, but users can also create their own providers.&lt;/p&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki/Custom-providers&quot;&gt;Custom Providers&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Cursor planning mode&lt;/h2&gt; 
&lt;p&gt;Because avante.nvim has always used Aider’s method for planning applying, but its prompts are very picky with models and require ones like claude-3.5-sonnet or gpt-4o to work properly.&lt;/p&gt; 
&lt;p&gt;Therefore, I have adopted Cursor’s method to implement planning applying. For details on the implementation, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&quot;&gt;cursor-planning-mode.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;RAG Service&lt;/h2&gt; 
&lt;p&gt;Avante provides a RAG service, which is a tool for obtaining the required context for the AI to generate the codes. By default, it is not enabled. You can enable it this way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rag_service = {
  enabled = false, -- Enables the RAG service
  host_mount = os.getenv(&quot;HOME&quot;), -- Host mount path for the rag service
  provider = &quot;openai&quot;, -- The provider to use for RAG service (e.g. openai or ollama)
  llm_model = &quot;&quot;, -- The LLM model to use for RAG service
  embed_model = &quot;&quot;, -- The embedding model to use for RAG service
  endpoint = &quot;https://api.openai.com/v1&quot;, -- The API endpoint for RAG service
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;openai&lt;/code&gt;, then you need to set the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable!&lt;/p&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, you need to set the endpoint to &lt;code&gt;http://localhost:11434&lt;/code&gt; (note there is no &lt;code&gt;/v1&lt;/code&gt; at the end) or any address of your own ollama server.&lt;/p&gt; 
&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, when &lt;code&gt;llm_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;llama3&lt;/code&gt;, and when &lt;code&gt;embed_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;nomic-embed-text&lt;/code&gt;. Please make sure these models are available in your ollama server.&lt;/p&gt; 
&lt;p&gt;Additionally, RAG Service also depends on Docker! (For macOS users, OrbStack is recommended as a Docker alternative).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;host_mount&lt;/code&gt; is the path that will be mounted to the container, and the default is the home directory. The mount is required for the RAG service to access the files in the host machine. It is up to the user to decide if you want to mount the whole &lt;code&gt;/&lt;/code&gt; directory, just the project directory, or the home directory. If you plan using avante and RAG event for projects stored outside your home directory, you will need to set the &lt;code&gt;host_mount&lt;/code&gt; to the root directory of your file system.&lt;/p&gt; 
&lt;p&gt;The mount will be read only.&lt;/p&gt; 
&lt;p&gt;After changing the rag_service configuration, you need to manually delete the rag_service container to ensure the new configuration is used: &lt;code&gt;docker rm -fv avante-rag-service&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Web Search Engines&lt;/h2&gt; 
&lt;p&gt;Avante&#39;s tools include some web search engines, currently support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tavily.com/&quot;&gt;Tavily&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://serpapi.com/&quot;&gt;SerpApi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.searchapi.io/&quot;&gt;SearchAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google&#39;s &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;Programmable Search Engine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.kagi.com/kagi/api/search.html&quot;&gt;Kagi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api-dashboard.search.brave.com/app/documentation/web-search/get-started&quot;&gt;Brave Search&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The default is Tavily, and can be changed through configuring &lt;code&gt;Config.web_search_engine.provider&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;web_search_engine = {
  provider = &quot;tavily&quot;, -- tavily, serpapi, searchapi, google or kagi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Environment variables required for providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tavily: &lt;code&gt;TAVILY_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SerpApi: &lt;code&gt;SERPAPI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SearchAPI: &lt;code&gt;SEARCHAPI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Google: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_ENGINE_ID&lt;/code&gt; as the &lt;a href=&quot;https://programmablesearchengine.google.com&quot;&gt;search engine&lt;/a&gt; ID&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Kagi: &lt;code&gt;KAGI_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://kagi.com/settings?p=api&quot;&gt;API Token&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brave Search: &lt;code&gt;BRAVE_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://api-dashboard.search.brave.com/app/keys&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disable Tools&lt;/h2&gt; 
&lt;p&gt;Avante enables tools by default, but some LLM models do not support tools. You can disable tools by setting &lt;code&gt;disable_tools = true&lt;/code&gt; for the provider. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  claude = {
    endpoint = &quot;https://api.anthropic.com&quot;,
    model = &quot;claude-3-5-sonnet-20241022&quot;,
    timeout = 30000, -- Timeout in milliseconds
    temperature = 0,
    max_tokens = 4096,
    disable_tools = true, -- disable tools!
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you want to ban some tools to avoid its usage (like Claude 3.7 overusing the python tool) you can disable just specific tools&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  disabled_tools = { &quot;python&quot; },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tool list&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;rag_search, python, git_diff, git_commit, list_files, search_files, search_keyword, read_file_toplevel_symbols, read_file, create_file, rename_file, delete_file, create_dir, rename_dir, delete_dir, bash, web_search, fetch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom Tools&lt;/h2&gt; 
&lt;p&gt;Avante allows you to define custom tools that can be used by the AI during code generation and analysis. These tools can execute shell commands, run scripts, or perform any custom logic you need.&lt;/p&gt; 
&lt;h3&gt;Example: Go Test Runner&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Here&#39;s an example of a custom tool that runs Go unit tests:&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  custom_tools = {
    {
      name = &quot;run_go_tests&quot;,  -- Unique name for the tool
      description = &quot;Run Go unit tests and return results&quot;,  -- Description shown to AI
      command = &quot;go test -v ./...&quot;,  -- Shell command to execute
      param = {  -- Input parameters (optional)
        type = &quot;table&quot;,
        fields = {
          {
            name = &quot;target&quot;,
            description = &quot;Package or directory to test (e.g. &#39;./pkg/...&#39; or &#39;./internal/pkg&#39;)&quot;,
            type = &quot;string&quot;,
            optional = true,
          },
        },
      },
      returns = {  -- Expected return values
        {
          name = &quot;result&quot;,
          description = &quot;Result of the fetch&quot;,
          type = &quot;string&quot;,
        },
        {
          name = &quot;error&quot;,
          description = &quot;Error message if the fetch was not successful&quot;,
          type = &quot;string&quot;,
          optional = true,
        },
      },
      func = function(params, on_log, on_complete)  -- Custom function to execute
        local target = params.target or &quot;./...&quot;
        return vim.fn.system(string.format(&quot;go test -v %s&quot;, target))
      end,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;MCP&lt;/h2&gt; 
&lt;p&gt;Now you can integrate MCP functionality for Avante through &lt;code&gt;mcphub.nvim&lt;/code&gt;. For detailed documentation, please refer to &lt;a href=&quot;https://github.com/ravitemer/mcphub.nvim#avante-integration&quot;&gt;mcphub.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Custom prompts&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;avante.nvim&lt;/code&gt; provides three different modes to interact with: &lt;code&gt;planning&lt;/code&gt;, &lt;code&gt;editing&lt;/code&gt;, and &lt;code&gt;suggesting&lt;/code&gt;, followed with three different prompts per mode.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on sidebar&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;editing&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).edit()&lt;/code&gt; on selection codeblock&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;suggesting&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).get_suggestion():suggest()&lt;/code&gt; on Tab flow.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cursor-planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on Tab flow, but only when cursor planning mode is enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Users can customize the system prompts via &lt;code&gt;Config.system_prompt&lt;/code&gt;. We recommend calling this in a custom Autocmds depending on your need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;User&quot;, {
  pattern = &quot;ToggleMyPrompt&quot;,
  callback = function() require(&quot;avante.config&quot;).override({system_prompt = &quot;MY CUSTOM SYSTEM PROMPT&quot;}) end,
})

vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;am&quot;, function() vim.api.nvim_exec_autocmds(&quot;User&quot;, { pattern = &quot;ToggleMyPrompt&quot; }) end, { desc = &quot;avante: toggle my prompt&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If one wish to custom prompts for each mode, &lt;code&gt;avante.nvim&lt;/code&gt; will check for project root based on the given buffer whether it contains the following patterns: &lt;code&gt;*.{mode}.avanterules&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The rules for root hierarchy:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;lsp workspace folders&lt;/li&gt; 
 &lt;li&gt;lsp root_dir&lt;/li&gt; 
 &lt;li&gt;root pattern of filename of the current buffer&lt;/li&gt; 
 &lt;li&gt;root pattern of cwd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example folder structure for custom prompt&lt;/summary&gt; 
 &lt;p&gt;If you have the following structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;.
├── .git/
├── typescript.planning.avanterules
├── snippets.editing.avanterules
├── suggesting.avanterules
└── src/

&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;typescript.planning.avanterules&lt;/code&gt; will be used for &lt;code&gt;planning&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;snippets.editing.avanterules&lt;/code&gt; will be used for &lt;code&gt;editing&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;suggesting.avanterules&lt;/code&gt; will be used for &lt;code&gt;suggesting&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;*.avanterules&lt;/code&gt; is a jinja template file, in which will be rendered using &lt;a href=&quot;https://github.com/mitsuhiko/minijinja&quot;&gt;minijinja&lt;/a&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates&quot;&gt;templates&lt;/a&gt; for example on how to extend current templates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;TODOs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with current file&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Apply diff patch&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Slash commands&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Edit the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Smart Tab (Cursor Flow)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with project (You can use &lt;code&gt;@codebase&lt;/code&gt; to chat with the whole project)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chat with selected files&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Tool use&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; MCP&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Better codebase indexing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced AI Interactions&lt;/strong&gt;: Improve the depth of AI analysis and recommendations for more complex coding scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LSP + Tree-sitter + LLM Integration&lt;/strong&gt;: Integrate with LSP and Tree-sitter and LLM to provide more accurate and powerful code suggestions and analysis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to avante.nvim are welcome! If you&#39;re interested in helping out, please feel free to submit pull requests or open issues. Before contributing, ensure that your code has been thoroughly tested.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki&quot;&gt;wiki&lt;/a&gt; for more recipes and tricks.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;We would like to express our heartfelt gratitude to the contributors of the following open-source projects, whose code has provided invaluable inspiration and reference for the development of avante.nvim:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Nvim Plugin&lt;/th&gt; 
   &lt;th&gt;License&lt;/th&gt; 
   &lt;th&gt;Functionality&lt;/th&gt; 
   &lt;th&gt;Location&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/akinsho/git-conflict.nvim&quot;&gt;git-conflict.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;No License&lt;/td&gt; 
   &lt;td&gt;Diff comparison functionality&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/diff.lua&quot;&gt;lua/avante/diff.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jackMort/ChatGPT.nvim&quot;&gt;ChatGPT.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Calculation of tokens count&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/utils/tokens.lua&quot;&gt;lua/avante/utils/tokens.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HakonHarnes/img-clip.nvim&quot;&gt;img-clip.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Clipboard image support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/clipboard.lua&quot;&gt;lua/avante/clipboard.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot.lua&quot;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Copilot support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/copilot.lua&quot;&gt;lua/avante/providers/copilot.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HiPhish/jinja.vim&quot;&gt;jinja.vim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Template filetype support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/syntax/jinja.vim&quot;&gt;syntax/jinja.vim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim&quot;&gt;codecompanion.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Secrets logic support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/init.lua&quot;&gt;lua/avante/providers/init.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/paul-gauthier/aider&quot;&gt;aider&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Planning mode user prompt&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates/planning.avanterules&quot;&gt;lua/avante/templates/planning.avanterules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The high quality and ingenuity of these projects&#39; source code have been immensely beneficial throughout our development process. We extend our sincere thanks and respect to the authors and contributors of these projects. It is the selfless dedication of the open-source community that drives projects like avante.nvim forward.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Star History&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://star-history.com/#yetone/avante.nvim&amp;amp;Date&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&amp;amp;theme=dark&quot;&gt; 
   &lt;img alt=&quot;NebulaGraph Data Intelligence Suite(ngdi)&quot; src=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&quot;&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
