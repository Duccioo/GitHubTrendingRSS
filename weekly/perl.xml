<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Perl Weekly Trending</title>
    <description>Weekly Trending of Perl in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:49:19 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>holzschu/a-shell</title>
      <link>https://github.com/holzschu/a-shell</link>
      <description>&lt;p&gt;A terminal for iOS, with multiple windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;a-shell: A terminal for iOS, with multiple windows&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Platform-iOS%2014.0+-lightgrey.svg?sanitize=true&quot; alt=&quot;Platform: iOS&quot;&gt; &lt;a href=&quot;https://twitter.com/a_Shell_iOS&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Twitter-@a__Shell__iOS-blue.svg?style=flat&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/cvYnZm69Gy&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/935519150305050644?color=5865f2&amp;amp;label=Discord&amp;amp;style=flat&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;The goal in this project is to provide a simple Unix-like terminal on iOS. It uses &lt;a href=&quot;https://github.com/holzschu/ios_system/&quot;&gt;ios_system&lt;/a&gt; for command interpretation, and includes all commands from the &lt;a href=&quot;https://github.com/holzschu/ios_system/&quot;&gt;ios_system&lt;/a&gt; ecosystem (nslookup, whois, python3, lua, pdflatex, lualatex...)&lt;/p&gt; 
&lt;p&gt;The project uses iPadOS 13 ability to create and manage multiple windows. Each window has its own context, appearance, command history and current directory. &lt;code&gt;newWindow&lt;/code&gt; opens a new window, &lt;code&gt;exit&lt;/code&gt; closes the current window.&lt;/p&gt; 
&lt;p&gt;For help, type &lt;code&gt;help&lt;/code&gt; in the command line. &lt;code&gt;help -l&lt;/code&gt; lists all the available commands. &lt;code&gt;help -l | grep command&lt;/code&gt; will tell you if your favorite command is already installed.&lt;/p&gt; 
&lt;p&gt;You can change the appearance of a-Shell using &lt;code&gt;config&lt;/code&gt;. It lets you change the font, the font size, the background color, the text color and the cursor color and shape. Each window can have its own appearance. &lt;code&gt;config -p&lt;/code&gt; will make the settings for the current window permanent, that is used for all future windows. With &lt;code&gt;config -t&lt;/code&gt; you can also configure the toolbar.&lt;/p&gt; 
&lt;p&gt;When opening a new window, a-Shell executes the file &lt;code&gt;.profile&lt;/code&gt; if it exists. You can use this mechanism to customize further, e.g. have custom environment variables or cleanup temporary files.&lt;/p&gt; 
&lt;p&gt;For more tips on how to use a-Shell, see &lt;a href=&quot;https://bianshen00009.gitbook.io/a-guide-to-a-shell/&quot;&gt;the document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AppStore&lt;/h2&gt; 
&lt;p&gt;a-Shell is now &lt;a href=&quot;https://holzschu.github.io/a-Shell_iOS/&quot;&gt;available on the AppStore&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;How to compile it?&lt;/h2&gt; 
&lt;p&gt;If you want to compile the project yourself, you will need the following steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;download the entire project and its sub-modules: &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;download all the xcFrameworks: &lt;code&gt;downloadFrameworks.sh&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;this will download the standard Apple frameworks (in &lt;code&gt;xcfs/.build/artefacts/xcfs&lt;/code&gt;, with checksum control).&lt;/li&gt; 
   &lt;li&gt;There are too many Python frameworks (more than 2000) for automatic download. You can either remove them from the &quot;Embed&quot; step in the project, or compile them: 
    &lt;ul&gt; 
     &lt;li&gt;You&#39;ll need the Xcode command line tools, if you don&#39;t already have them: &lt;code&gt;sudo xcode-select --install&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;You also need the OpenSSL libraries (libssl and libcrypto), XQuartz (freetype), and Node.js (npm) for macOS (we provide the versions for iOS and simulator).&lt;/li&gt; 
     &lt;li&gt;change directory to &lt;code&gt;cpython&lt;/code&gt;: &lt;code&gt;cd cpython&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;build Python 3.11 and all the associated libraries / frameworks: &lt;code&gt;sh ./downloadAndCompile.sh&lt;/code&gt; (this step takes several hours on a 2GHz i5 MBP, YMMV).&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;a-Shell now runs on the devices. a-Shell mini can run on the devices and the simulator.&lt;/p&gt; 
&lt;p&gt;Because Python 3.x uses functions that are only available on the iOS 14 SDK, I&#39;ve set the minimum iOS version to 14.0. It also reduces the size of the binaries, so &lt;code&gt;ios_system&lt;/code&gt; and the other frameworks have the same settings. If you need to run it on an iOS 13 device, you&#39;ll have to recompile most frameworks.&lt;/p&gt; 
&lt;h2&gt;Home directory&lt;/h2&gt; 
&lt;p&gt;In iOS, you cannot write in the &lt;code&gt;~&lt;/code&gt; directory, only in &lt;code&gt;~/Documents/&lt;/code&gt;, &lt;code&gt;~/Library/&lt;/code&gt; and &lt;code&gt;~/tmp&lt;/code&gt;. Most Unix programs assume the configuration files are in &lt;code&gt;$HOME&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;So a-Shell changes several environment variables so that they point to &lt;code&gt;~/Documents&lt;/code&gt;. Type &lt;code&gt;env&lt;/code&gt; to see them.&lt;/p&gt; 
&lt;p&gt;Most configuration files (Python packages, TeX files, Clang SDK...) are in &lt;code&gt;~/Library&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Sandbox and Bookmarks&lt;/h2&gt; 
&lt;p&gt;a-Shell uses iOS 13 ability to access directories in other Apps sandbox. Type &lt;code&gt;pickFolder&lt;/code&gt; to access a directory inside another App. Once you have selected a directory, you can do pretty much anything you want here, so be careful.&lt;/p&gt; 
&lt;p&gt;All the directories you access with &lt;code&gt;pickFolder&lt;/code&gt; are bookmarked, so you can return to them later without &lt;code&gt;pickFolder&lt;/code&gt;. You can also bookmark the current directory with &lt;code&gt;bookmark&lt;/code&gt;. &lt;code&gt;showmarks&lt;/code&gt; will list all the existing bookmarks, &lt;code&gt;jump mark&lt;/code&gt; and &lt;code&gt;cd ~mark&lt;/code&gt; will change the current directory to this specific bookmark, &lt;code&gt;renamemark&lt;/code&gt; will let you change the name of a specific bookmark and &lt;code&gt;deletemark&lt;/code&gt; will delete a bookmark.&lt;/p&gt; 
&lt;p&gt;A user-configurable option in Settings lets you use the commands &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; instead or as well.&lt;/p&gt; 
&lt;p&gt;If you are lost, &lt;code&gt;cd&lt;/code&gt; will always bring you back to &lt;code&gt;~/Documents/&lt;/code&gt;. &lt;code&gt;cd -&lt;/code&gt; will change to the previous directory.&lt;/p&gt; 
&lt;h2&gt;Shortcuts&lt;/h2&gt; 
&lt;p&gt;a-Shell is compatible with Apple Shortcuts, giving users full control of the Shell. You can write complex Shortcuts to download, process and release files using a-Shell commands. There are three shortcuts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Execute Command&lt;/code&gt;, which takes a list of commands and executes them in order. The input can also be a file or a text node, in which case the commands inside the node are executed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Put File&lt;/code&gt; and &lt;code&gt;Get File&lt;/code&gt; are used to transfer files to and from a-Shell.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Shortcuts can be executed either &quot;In Extension&quot; or &quot;In App&quot;. &quot;In Extension&quot; means the shortcut runs in a lightweight version of the App, without no graphical user interface. It is good for light commands that do not require configuration files or system libraries (mkdir, nslookup, whois, touch, cat, echo...). &quot;In App&quot; opens the main application to execute the shortcut. It has access to all the commands, but will take longer. Once a shortcut has opened the App, you can return to the Shortcuts app by calling the command &lt;code&gt;open shortcuts://&lt;/code&gt;. The default behaviour is to try to run the commands &quot;in Extension&quot; as much as possible, based on the content of the commands. You can force a specific shortcut to run &quot;in App&quot; or &quot;in Extension&quot;, with the warning that it won&#39;t always work.&lt;/p&gt; 
&lt;p&gt;Both kind of shortcuts run by default in the same specific directory, &lt;code&gt;$SHORTCUTS&lt;/code&gt; or &lt;code&gt;~shortcuts&lt;/code&gt;. Of course, since you can run the commands &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;jump&lt;/code&gt; in a shortcut, you can pretty much go anywhere.&lt;/p&gt; 
&lt;h2&gt;Programming / add more commands:&lt;/h2&gt; 
&lt;p&gt;a-Shell has several programming languages installed: Python, Lua, JS, C, C++ and TeX.&lt;/p&gt; 
&lt;p&gt;For C and C++, you compile your programs with &lt;code&gt;clang program.c&lt;/code&gt; and it produces a webAssembly file. You can then execute it with &lt;code&gt;wasm a.out&lt;/code&gt;. You can also link multiple object files together, make a static library with &lt;code&gt;ar&lt;/code&gt;, etc. Once you are satisfied with your program, if you move it to a directory in the &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;~/Documents/bin&lt;/code&gt;) and rename it &lt;code&gt;program.wasm&lt;/code&gt;, it will be executed if you type &lt;code&gt;program&lt;/code&gt; on the command line.&lt;/p&gt; 
&lt;p&gt;You can also cross-compile programs on your main computer using our specific &lt;a href=&quot;https://github.com/holzschu/wasi-sdk&quot;&gt;WASI-sdk&lt;/a&gt;, and transfer the WebAssembly file to your iPad or iPhone.&lt;/p&gt; 
&lt;p&gt;Precompiled WebAssembly commands specific for a-Shell are available here: &lt;a href=&quot;https://github.com/holzschu/a-Shell-commands&quot;&gt;https://github.com/holzschu/a-Shell-commands&lt;/a&gt; These include &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, &lt;code&gt;xz&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt;... You install them on your iPad by downloading them and placing them in the &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We have the limitations of WebAssembly: no sockets, no forks, no interactive user input (piping input from other commands with &lt;code&gt;command | wasm program.wasm&lt;/code&gt; works fine).&lt;/p&gt; 
&lt;p&gt;For Python, you can install more packages with &lt;code&gt;pip install packagename&lt;/code&gt;, but only if they are pure Python. The C compiler is not yet able to produce dynamic libraries that could be used by Python.&lt;/p&gt; 
&lt;p&gt;TeX files are not installed by default. Type any TeX command and the system will prompt you to download them. Same with LuaTeX files.&lt;/p&gt; 
&lt;h2&gt;VoiceOver&lt;/h2&gt; 
&lt;p&gt;If you enable VoiceOver in Settings, a-Shell will work with VoiceOver: reading commands as you type them, reading the result, letting you read the screen with your finger...&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DGFiP/Test-Compta-Demat</title>
      <link>https://github.com/DGFiP/Test-Compta-Demat</link>
      <description>&lt;p&gt;Ce logiciel permet de contrôler le respect des normes des fichiers d&#39;écritures comptables (FEC) conformément aux dispositions de l&#39;article A.47 A-1 du livre des procédures fiscales.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Test-Compta-Demat&lt;/h1&gt; 
&lt;p&gt;Copyright 2014 Direction Générale des Finances Publiques - France&lt;/p&gt; 
&lt;p&gt;Ce logiciel permet de contrôler le respect des normes des fichiers d&#39;écritures comptables (FEC) conformément aux dispositions de l&#39;article A.47 A-1 du livre des procédures fiscales.&lt;/p&gt; 
&lt;p&gt;Ce logiciel est régi par la licence CeCILL V2.1 soumise au droit français et respectant les principes de diffusion des logiciels libres. Vous pouvez utiliser, modifier et/ou redistribuer ce programme sous les conditions de la licence CeCILL V2.1 telle que diffusée par le CEA, le CNRS et l&#39;INRIA sur le site &quot;&lt;a href=&quot;http://www.cecill.info&quot;&gt;http://www.cecill.info&lt;/a&gt;&quot;.&lt;/p&gt; 
&lt;h1&gt;Récupération des sources du programme&lt;/h1&gt; 
&lt;p&gt;Pour les visualiser se rendre dans le dossier src/. Les sources utilisées sont disponibles pour adaptation sur des environnements différents. Pour cela, cloner le dépôt git (cf doc de git).&lt;/p&gt; 
&lt;h1&gt;Récupération des distributions Windows&lt;/h1&gt; 
&lt;p&gt;Le programme est disponible sous la forme d&#39;une distribution exécutable livrée dans une archive autoextractive.&lt;/p&gt; 
&lt;h2&gt;Version windows 32 bits&lt;/h2&gt; 
&lt;p&gt;Cliquer sur release pour voir les exécutables windows puis cliquer sur le bouton vert qui correspond à la version windows (x86.exe) pour le télécharger.&lt;/p&gt; 
&lt;h2&gt;Version spécifique pour windows 64 bits :&lt;/h2&gt; 
&lt;p&gt;Cliquer sur release pour voir les exécutables windows puis cliquer sur le bouton vert qui correspond à la version windows en 64 bits (x86_64.exe) pour le télécharger.&lt;/p&gt; 
&lt;h1&gt;Documentations&lt;/h1&gt; 
&lt;p&gt;voir le contenu du dossier doc : pour visualiser un pdf, il faut le télécharger (cliquer sur View Raw) puis ouvrir le fichier téléchargé.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trinityrnaseq/trinityrnaseq</title>
      <link>https://github.com/trinityrnaseq/trinityrnaseq</link>
      <description>&lt;p&gt;Trinity RNA-Seq de novo transcriptome assembly&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;trinityrnaseq&lt;/h1&gt; 
&lt;p&gt;Trinity RNA-Seq de novo transcriptome assembly see the Trinity &lt;a href=&quot;https://github.com/trinityrnaseq/trinityrnaseq/wiki&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We encourage you to contribute to Trinity! Please check out the &lt;a href=&quot;https://github.com/trinityrnaseq/trinityrnaseq/wiki/Contributing&quot;&gt;Contributing&lt;/a&gt; for the guidelines.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>major/MySQLTuner-perl</title>
      <link>https://github.com/major/MySQLTuner-perl</link>
      <description>&lt;p&gt;MySQLTuner is a script written in Perl that will assist you with your MySQL configuration and make recommendations for increased performance and stability.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/major/MySQLTuner-perl/raw/master/mtlogo.png&quot; alt=&quot;MySQLTuner-perl&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/jmrenouard&quot;&gt;&lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot; alt=&quot;&amp;quot;Buy Us A Coffee&amp;quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://opensource.box.com/badges&quot;&gt;&lt;img src=&quot;http://opensource.box.com/badges/active.svg?sanitize=true&quot; alt=&quot;Project Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/anuraghazra/github-readme-stats/&quot;&gt;&lt;img src=&quot;https://github.com/anuraghazra/github-readme-stats/workflows/Test/badge.svg?sanitize=true&quot; alt=&quot;Test Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/major/MySQLTuner-perl&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/major/MySQLTuner-perl.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/major/MySQLTuner-perl&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/major/MySQLTuner-perl.svg?sanitize=true&quot; alt=&quot;Percentage of open issues&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/GPL-3.0/&quot;&gt;&lt;img src=&quot;https://badges.frapsoft.com/os/gpl/gpl.png?v=103&quot; alt=&quot;GPL License&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; is a script written in Perl that allows you to review a MySQL installation quickly and make adjustments to increase performance and stability. The current configuration variables and status data is retrieved and presented in a brief format along with some basic performance suggestions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; supports ~300 indicators for MySQL/MariaDB/Percona Server in this latest version.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; is actively maintained supporting many configurations such as &lt;a href=&quot;http://galeracluster.com/&quot;&gt;Galera Cluster&lt;/a&gt;, &lt;a href=&quot;https://www.percona.com/software/mysql-database/percona-tokudb&quot;&gt;TokuDB&lt;/a&gt;, &lt;a href=&quot;https://github.com/mysql/mysql-sys&quot;&gt;Performance schema&lt;/a&gt;, Linux OS metrics, &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html&quot;&gt;InnoDB&lt;/a&gt;, &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html&quot;&gt;MyISAM&lt;/a&gt;, &lt;a href=&quot;https://mariadb.com/kb/en/mariadb/aria/&quot;&gt;Aria&lt;/a&gt;, ...&lt;/p&gt; 
&lt;p&gt;You can find more details on these indicators here: &lt;a href=&quot;https://github.com/major/MySQLTuner-perl/raw/master/INTERNALS.md&quot;&gt;Indicators description&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/major/MySQLTuner-perl/raw/master/mysqltuner.png&quot; alt=&quot;MysqlTuner&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;MySQLTuner needs you&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; needs contributors for documentation, code and feedback:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please join us on our issue tracker at &lt;a href=&quot;https://github.com/major/MySQLTuner-perl/issues&quot;&gt;GitHub tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Contribution guide is available following &lt;a href=&quot;https://github.com/major/MySQLTuner-perl/raw/master/CONTRIBUTING.md&quot;&gt;MySQLTuner contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Star &lt;strong&gt;MySQLTuner project&lt;/strong&gt; at &lt;a href=&quot;https://github.com/major/MySQLTuner-perl&quot;&gt;MySQLTuner Git Hub Project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Paid support for LightPath here: &lt;a href=&quot;https://raw.githubusercontent.com/major/MySQLTuner-perl/master/jmrenouard@lightpath.fr&quot;&gt;jmrenouard@lightpath.fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Paid support for Releem available here: &lt;a href=&quot;https://releem.com/&quot;&gt;Releem App&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://github-readme-stats.vercel.app/api?username=anuraghazra&amp;amp;show_icons=true&amp;amp;theme=radical&quot; alt=&quot;Anurag&#39;s GitHub stats&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/major/MySQLTuner-perl&quot;&gt;&lt;img src=&quot;https://starchart.cc/major/MySQLTuner-perl.svg?sanitize=true&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Compatibility&lt;/h1&gt; 
&lt;p&gt;Test result are available here for LTS only:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MySQL (full support)&lt;/li&gt; 
 &lt;li&gt;Percona Server (full support)&lt;/li&gt; 
 &lt;li&gt;MariaDB (full support)&lt;/li&gt; 
 &lt;li&gt;Galera replication (full support)&lt;/li&gt; 
 &lt;li&gt;Percona XtraDB cluster (full support)&lt;/li&gt; 
 &lt;li&gt;MySQL Replication (partial support, no test environment)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://raw.githubusercontent.com/major/MySQLTuner-perl/master/endoflife.date&quot;&gt;endoflife.date&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Refer to &lt;a href=&quot;https://github.com/major/MySQLTuner-perl/raw/master/mariadb_support.md&quot;&gt;MariaDB Supported versions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Refer to &lt;a href=&quot;https://github.com/major/MySQLTuner-perl/raw/master/mysql_support.md&quot;&gt;MySQL Supported versions&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Windows Support is partial&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows is now supported at this time&lt;/li&gt; 
 &lt;li&gt;Successfully run MySQLtuner across WSL2 (Windows Subsystem Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/&quot;&gt;https://docs.microsoft.com/en-us/windows/wsl/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;UNSUPPORTED ENVIRONMENTS - NEED HELP WITH THAT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cloud based is not supported at this time (Help wanted! GCP, AWS, Azure support requested)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Unsupported storage engines: PRs welcome&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;NDB is not supported feel free to create a Pull Request&lt;/li&gt; 
 &lt;li&gt;Archive&lt;/li&gt; 
 &lt;li&gt;Spider&lt;/li&gt; 
 &lt;li&gt;ColummStore&lt;/li&gt; 
 &lt;li&gt;Connect&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Unmaintenained stuff from MySQL or MariaDB:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;MyISAM is too old and no longer active&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;RockDB is not maintained anymore&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;TokuDB is not maintained anymore&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;XtraDB is not maintained anymore&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CVE vulnerabilities detection support from &lt;a href=&quot;https://cve.mitre.org&quot;&gt;https://cve.mitre.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;MINIMAL REQUIREMENTS&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perl 5.6 or later (with &lt;a href=&quot;http://search.cpan.org/~dapm/perl-5.14.4/pod/perldoc.pod&quot;&gt;perl-doc&lt;/a&gt; package)&lt;/li&gt; 
 &lt;li&gt;Unix/Linux based operating system (tested on Linux, BSD variants, and Solaris variants)&lt;/li&gt; 
 &lt;li&gt;Unrestricted read access to the MySQL server OS root access recommended for MySQL &amp;lt; 5.1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It is &lt;strong&gt;important&lt;/strong&gt; for you to fully understand each change you make to a MySQL database server. If you don&#39;t understand portions of the script&#39;s output, or if you don&#39;t understand the recommendations, &lt;strong&gt;you should consult&lt;/strong&gt; a knowledgeable DBA or system administrator that you trust. &lt;strong&gt;Always&lt;/strong&gt; test your changes on staging environments, and always keep in mind that improvements in one area can &lt;strong&gt;adversely affect&lt;/strong&gt; MySQL in other areas.&lt;/p&gt; 
&lt;p&gt;It&#39;s &lt;strong&gt;also important&lt;/strong&gt; to wait at least 24 hours of uptime to get accurate results. In fact, running &lt;strong&gt;mysqltuner&lt;/strong&gt; on a fresh restarted server is completely useless.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Also review the FAQ section below.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Security recommendations&lt;/h2&gt; 
&lt;p&gt;Hi directadmin user! We detected that you run mysqltuner with da_admin&#39;s credentials taken from &lt;code&gt;/usr/local/directadmin/conf/my.cnf&lt;/code&gt;, which might bring to a password discovery! Read link for more details &lt;a href=&quot;https://github.com/major/MySQLTuner-perl/issues/289&quot;&gt;Issue #289&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What is MySQLTuner checking exactly ?&lt;/h2&gt; 
&lt;p&gt;All checks done by &lt;strong&gt;MySQLTuner&lt;/strong&gt; are documented in &lt;a href=&quot;https://github.com/major/MySQLTuner-perl/raw/master/INTERNALS.md&quot;&gt;MySQLTuner Internals&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;h2&gt;Download/Installation&lt;/h2&gt; 
&lt;p&gt;Choose one of these methods:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Script direct download (the simplest and shortest method):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget http://mysqltuner.pl/ -O mysqltuner.pl
wget https://raw.githubusercontent.com/major/MySQLTuner-perl/master/basic_passwords.txt -O basic_passwords.txt
wget https://raw.githubusercontent.com/major/MySQLTuner-perl/master/vulnerabilities.csv -O vulnerabilities.csv
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;You can download the entire repository by using &lt;code&gt;git clone&lt;/code&gt; or &lt;code&gt;git clone --depth 1 -b master&lt;/code&gt; followed by the cloning URL above.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Optional Sysschema installation for MySQL 5.6&lt;/h2&gt; 
&lt;p&gt;Sysschema is installed by default under MySQL 5.7 and MySQL 8 from Oracle. By default, on MySQL 5.6/5.7/8, performance schema is enabled. For previous MySQL 5.6 version, you can follow this command to create a new database sys containing very useful view on Performance schema:&lt;/p&gt; 
&lt;h2&gt;Sysschema for MySQL old version&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl &quot;https://codeload.github.com/mysql/mysql-sys/zip/master&quot; &amp;gt; sysschema.zip
# check zip file
unzip -l sysschema.zip
unzip sysschema.zip
cd mysql-sys-master
mysql -uroot -p &amp;lt; sys_56.sql
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sysschema for MariaDB old version&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl &quot;https://github.com/FromDual/mariadb-sys/archive/refs/heads/master.zip&quot; &amp;gt; sysschema.zip
# check zip file
unzip -l sysschema.zip
unzip sysschema.zip
cd mariadb-sys-master
mysql -u root -p &amp;lt; ./sys_10.sql
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Performance schema setup&lt;/h2&gt; 
&lt;p&gt;By default, performance_schema is enabled and sysschema is installed on latest version.&lt;/p&gt; 
&lt;p&gt;By default, on MariaDB, performance schema is disabled (MariaDB&amp;lt;10.6).&lt;/p&gt; 
&lt;p&gt;Consider activating performance schema across your my.cnf configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[mysqld]
performance_schema = on
performance-schema-consumer-events-statements-history-long = ON
performance-schema-consumer-events-statements-history = ON
performance-schema-consumer-events-statements-current = ON
performance-schema-consumer-events-stages-current=ON
performance-schema-consumer-events-stages-history=ON
performance-schema-consumer-events-stages-history-long=ON
performance-schema-consumer-events-transactions-current=ON
performance-schema-consumer-events-transactions-history=ON
performance-schema-consumer-events-transactions-history-long=ON
performance-schema-consumer-events-waits-current=ON
performance-schema-consumer-events-waits-history=ON
performance-schema-consumer-events-waits-history-long=ON
performance-schema-instrument=&#39;%=ON&#39;
max-digest-length=2048
performance-schema-max-digest-length=2018
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sysschema installation for MariaDB &amp;lt; 10.6&lt;/h2&gt; 
&lt;p&gt;Sysschema is not installed by default under MariaDB prior to 10.6 &lt;a href=&quot;https://mariadb.com/kb/en/sys-schema/&quot;&gt;MariaDB sys&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can follow this command to create a new database sys containing a useful view on Performance schema:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl &quot;https://codeload.github.com/FromDual/mariadb-sys/zip/master&quot; &amp;gt; mariadb-sys.zip
# check zip file
unzip -l mariadb-sys.zip
unzip mariadb-sys.zip
cd mariadb-sys-master/
mysql -u root -p &amp;lt; ./sys_10.sql
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Errors &amp;amp; solutions for performance schema installation&lt;/h2&gt; 
&lt;h2&gt;ERROR 1054 (42S22) at line 78 in file: &#39;./views/p_s/metrics_56.sql&#39;: Unknown column &#39;STATUS&#39; in &#39;field list&#39;&lt;/h2&gt; 
&lt;p&gt;This error can be safely ignored Consider using a recent MySQL/MariaDB version to avoid this kind of issue during sysschema installation&lt;/p&gt; 
&lt;p&gt;In recent versions, sysschema is installed and integrated by default as sys schema (SHOW DATABASES)&lt;/p&gt; 
&lt;h2&gt;ERROR at line 21: Failed to open file &#39;./tables/sys_config_data_10.sql -- ported&#39;, error: 2 Have a look at #452 solution given by @ericx&lt;/h2&gt; 
&lt;p&gt;Fixing sysctl configuration (/etc/sysctl.conf)&lt;/p&gt; 
&lt;p&gt;-- It is a system wide setting and not a database setting: &lt;a href=&quot;https://www.kernel.org/doc/html/latest/admin-guide/sysctl/fs.html#id1&quot;&gt;Linux FS Kernel settings&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can check its values via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /proc/sys/fs/aio-*
65536
2305
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, to set the aio-max-nr value, add the following line to the /etc/sysctl.conf file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;fs.aio-max-nr = 1048576
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To activate the new setting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sysctl -p /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Specific usage&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Minimal usage locally&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --host 127.0.0.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you can add the execute bit (&lt;code&gt;chmod +x mysqltuner.pl&lt;/code&gt;) so you can execute it without calling Perl directly.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Minimal usage remotely&lt;/p&gt; 
&lt;p&gt;In previous version, --forcemem shoud be set manually, in order to be able to run an MySQLTuner analysis&lt;/p&gt; 
&lt;p&gt;Since 2.1.10, memory and swap are defined to 1Gb by default.&lt;/p&gt; 
&lt;p&gt;If you want a more accurate value according to your remote server, feel free to setup --forcemem and --forceswap to real RAM value&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --host targetDNS_IP --user admin_user --pass admin_password
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Enable maximum output information around MySQL/MariaDb without debugging&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --verbose
perl mysqltuner.pl --buffers --dbstat --idxstat --sysstat --pfstat --tbstat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Enable CVE vulnerabilities check for your MariaDB or MySQL version&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --cvefile=vulnerabilities.csv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Write your result in a file with information displayed&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --outputfile /tmp/result_mysqltuner.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Write your result in a file &lt;strong&gt;without outputting information&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --silent --outputfile /tmp/result_mysqltuner.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Using template model to customize your reporting file based on &lt;a href=&quot;https://metacpan.org/pod/Text::Template&quot;&gt;Text::Template&lt;/a&gt; syntax.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --silent --reportfile /tmp/result_mysqltuner.txt --template=/tmp/mymodel.tmpl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: &lt;a href=&quot;https://metacpan.org/pod/Text::Template&quot;&gt;Text::Template&lt;/a&gt; module is mandatory for &lt;code&gt;--reportfile&lt;/code&gt; and/or &lt;code&gt;--template&lt;/code&gt; options, because this module is needed to generate appropriate output based on a text template.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Dumping all information_schema and sysschema views as csv file into results subdirectory&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --verbose --dumpdir=./result
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Enable debugging information&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Update MySQLTuner and data files (password and cve) if needed&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --checkversion --updateversion
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;HTML reports based on Python Jinja2&lt;/h2&gt; 
&lt;p&gt;HTML generation is based on Python/Jinja2&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;HTML generation Procedure&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generate mysqltuner.pl report using JSON format (--json)&lt;/li&gt; 
 &lt;li&gt;Generate HTML report using j2 python tools&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Jinja2 Templates are located under templates sub directory&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A basic example is called basic.html.j2&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation Python j2&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python -mvenv j2
source ./j2/bin/activate
(j2) pip install j2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Using Html report generation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --verbose --json &amp;gt; reports.json
cat reports.json  j2 -f json MySQLTuner-perl/templates/basic.html.j2 &amp;gt; variables.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;perl mysqltuner.pl --verbose --json | j2 -f json MySQLTuner-perl/templates/basic.html.j2 &amp;gt; variables.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;HTML reports based on AHA&lt;/h2&gt; 
&lt;p&gt;HTML generation is based on AHA&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;HTML generation Procedure&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generate mysqltuner.pl report using standard text reports&lt;/li&gt; 
 &lt;li&gt;Generate HTML report using aha&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Installation Aha&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Follow instructions from Github repo&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/theZiz/aha&quot;&gt;GitHub AHA main repository&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using AHA Html report generation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --verbose --color &amp;gt; reports.txt
aha --black --title &quot;MySQLTuner&quot; -f &quot;reports.txt&quot; &amp;gt; &quot;reports.html&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --verbose --color | aha --black --title &quot;MySQLTuner&quot; &amp;gt; reports.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Question: What are the prerequisites for running MySQL tuner ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Before running MySQL tuner, you should have the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A MySQL server installation&lt;/li&gt; 
 &lt;li&gt;Perl installed on your system&lt;/li&gt; 
 &lt;li&gt;Administrative access to your MySQL server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Question: Can MySQL tuner make changes to my configuration automatically ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt;, MySQL tuner only provides recommendations. It does not make any changes to your configuration files automatically. It is up to the user to review the suggestions and implement them as needed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: How often should I run MySQL tuner ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is recommended to run MySQL tuner periodically, especially after significant changes to your MySQL server or its workload.&lt;/p&gt; 
&lt;p&gt;For optimal results, run the script after your server has been running for at least 24 hours to gather sufficient performance data.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: How do I interpret the results from MySQL tuner ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MySQL tuner provides output in the form of suggestions and warnings.&lt;/p&gt; 
&lt;p&gt;Review each recommendation and consider implementing the changes in your MySQL configuration file (usually &#39;my.cnf&#39; or &#39;my.ini&#39;).&lt;/p&gt; 
&lt;p&gt;Be cautious when making changes and always backup your configuration file before making any modifications.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: Can MySQL tuner cause harm to my database or server ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;While MySQL tuner itself will not make any changes to your server, blindly implementing its recommendations without understanding the impact can cause issues.&lt;/p&gt; 
&lt;p&gt;Always ensure you understand the implications of each suggestion before applying it to your server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: Can I use MySQL tuner for optimizing other database systems like PostgreSQL or SQL Server ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MySQL tuner is specifically designed for MySQL servers. To optimize other database systems, you would need to use tools designed for those systems, such as pgTune for PostgreSQL or SQL Server&#39;s built-in performance tools.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: Does MySQL tuner support MariaDB and Percona Server ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Yes, MySQL tuner supports MariaDB and Percona Server since they are derivatives of MySQL and share a similar architecture. The script can analyze and provide recommendations for these systems as well.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: What should I do if I need help with MySQL tuner or have questions about the recommendations ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you need help with MySQL tuner or have questions about the recommendations provided by the script, you can consult the MySQL tuner documentation, seek advice from online forums, or consult a MySQL expert.&lt;/p&gt; 
&lt;p&gt;Be cautious when implementing changes to ensure the stability and performance of your server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: Will MySQLTuner fix my slow MySQL server ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt; MySQLTuner is a read only script. It won&#39;t write to any configuration files, change the status of any daemons. It will give you an overview of your server&#39;s performance and make some basic recommendations for improvements that you can make after it completes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: Can I fire my DBA now?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MySQLTuner will not replace your DBA in any form or fashion.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If your DBA constantly takes your parking spot and steals your lunch from the fridge, then you may want to consider it - but that&#39;s your call.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: Why does MySQLTuner keep asking me the login credentials for MySQL over and over?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The script will try its best to log in via any means possible. It will check for ~/.my.cnf files, Plesk password files, and empty password root logins. If none of those are available, then you&#39;ll be prompted for a password. If you&#39;d like the script to run in an automated fashion without user intervention, then create a .my.cnf file in your home directory which contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[client]
user=someusername
password=thatuserspassword
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once you create it, make sure it&#39;s owned by your user and the mode on the file is 0600. This should prevent the prying eyes from getting your database login credentials under normal conditions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Question: Is there another way to secure credentials on latest MySQL and MariaDB distributions ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You could use mysql_config_editor utilities.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;	$ mysql_config_editor set --login-path=client --user=someusername --password --host=localhost
	Enter password: ********
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After which, &lt;code&gt;~/.mylogin.cnf&lt;/code&gt; will be created with the appropriate access.&lt;/p&gt; 
&lt;p&gt;To get information about stored credentials, use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$mysql_config_editor print
[client]
user = someusername
password = *****
host = localhost
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Question: What&#39;s minimum privileges needed by a specific mysqltuner user in database ?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; mysql&amp;gt;GRANT SELECT, PROCESS,EXECUTE, REPLICATION CLIENT,
 SHOW DATABASES,SHOW VIEW
 ON *.*
 TO &#39;mysqltuner&#39;@&#39;localhost&#39; identified by pwd1234;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Question: It&#39;s not working on my OS! What gives?!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;These kinds of things are bound to happen. Here are the details I need from you to investigate the issue:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OS and OS version&lt;/li&gt; 
 &lt;li&gt;Architecture (x86, x86_64, IA64, Commodore 64)&lt;/li&gt; 
 &lt;li&gt;Exact MySQL version&lt;/li&gt; 
 &lt;li&gt;Where you obtained your MySQL version (OS package, source, etc)&lt;/li&gt; 
 &lt;li&gt;The full text of the error&lt;/li&gt; 
 &lt;li&gt;A copy of SHOW VARIABLES and SHOW GLOBAL STATUS output (if possible)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Question: How to perform CVE vulnerability checks?&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download vulnerabilities.csv from this repository.&lt;/li&gt; 
 &lt;li&gt;use option --cvefile to perform CVE checks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Question: How to use mysqltuner from a remote host?&lt;/strong&gt; Thanks to &lt;a href=&quot;http://dba.stackexchange.com/users/877/rolandomysqldba&quot;&gt;@rolandomysqldba&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You will still have to connect like a mysql client:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Connection and Authentication&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--host &amp;lt;hostname&amp;gt; Connect to a remote host to perform tests (default: localhost)
--socket &amp;lt;socket&amp;gt; Use a different socket for a local connection
--port &amp;lt;port&amp;gt;     Port to use for connection (default: 3306)
--user &amp;lt;username&amp;gt; Username to use for authentication
--pass &amp;lt;password&amp;gt; Password to use for authentication
--defaults-file &amp;lt;path&amp;gt; defaults file for credentials
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since you are using a remote host, use parameters to supply values from the OS&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--forcemem &amp;lt;size&amp;gt;  Amount of RAM installed in megabytes
--forceswap &amp;lt;size&amp;gt; Amount of swap memory configured in megabytes
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You may have to contact your remote SysAdmin to ask how much RAM and swap you have&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the database has too many tables, or very large table, use this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--skipsize           Don&#39;t enumerate tables and their types/sizes (default: on)
                     (Recommended for servers with many tables)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Question: Can I install this project using homebrew on Apple Macintosh?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Yes! &lt;code&gt;brew install mysqltuner&lt;/code&gt; can be used to install this application using &lt;a href=&quot;https://brew.sh/&quot;&gt;homebrew&lt;/a&gt; on Apple Macintosh.&lt;/p&gt; 
&lt;h2&gt;MySQLTuner and Vagrant&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; contains following Vagrant configurations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fedora Core 30 / Docker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Vagrant File&lt;/strong&gt; is stored in Vagrant subdirectory.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow following step after vagrant installation: $ vagrant up&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; contains a Vagrant configurations for test purpose and development&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install VirtualBox and Vagrant 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Clone repository 
  &lt;ul&gt; 
   &lt;li&gt;git clone &lt;a href=&quot;https://github.com/major/MySQLTuner-perl.git&quot;&gt;https://github.com/major/MySQLTuner-perl.git&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install Vagrant plugins vagrant-hostmanager and vagrant-vbguest 
  &lt;ul&gt; 
   &lt;li&gt;vagrant plugin install vagrant-hostmanager&lt;/li&gt; 
   &lt;li&gt;vagrant plugin install vagrant-vbguest&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add Fedora Core 30 box for official Fedora Download Website 
  &lt;ul&gt; 
   &lt;li&gt;vagrant box add --name generic/fedora30&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Create a data directory 
  &lt;ul&gt; 
   &lt;li&gt;mkdir data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;setup test environments&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;$ sh build/createTestEnvs.sh

$ source build/bashrc
$ mysql_percona80 sakila
sakila&amp;gt; ...

$ docker images
mariadb                  10.1                fc612450e1f1        12 days ago         352MB
mariadb                  10.2                027b7c57b8c6        12 days ago         340MB
mariadb                  10.3                47dff68107c4        12 days ago         343MB
mariadb                  10.4                92495405fc36        12 days ago         356MB
mysql                    5.6                 95e0fc47b096        2 weeks ago         257MB
mysql                    5.7                 383867b75fd2        2 weeks ago         373MB
mysql                    8.0                 b8fd9553f1f0        2 weeks ago         445MB
percona/percona-server   5.7                 ddd245ed3496        5 weeks ago         585MB
percona/percona-server   5.6                 ed0a36e0cf1b        6 weeks ago         421MB
percona/percona-server   8.0                 390ae97d57c6        6 weeks ago         697MB
mariadb                  5.5                 c7bf316a4325        4 months ago        352MB
mariadb                  10.0                d1bde56970c6        4 months ago        353MB
mysql                    5.5                 d404d78aa797        4 months ago        205MB

$ docker ps
CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                               NAMES
da2be9b050c9        mariadb:5.5                  &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:5311-&amp;gt;3306/tcp              mariadb55
5deca25d5ac8        mariadb:10.0                 &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:5310-&amp;gt;3306/tcp              mariadb100
73aaeb37e2c2        mariadb:10.1                 &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:5309-&amp;gt;3306/tcp              mariadb101
72ffa77e01ec        mariadb:10.2                 &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:5308-&amp;gt;3306/tcp              mariadb102
f5996f2041df        mariadb:10.3                 &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:5307-&amp;gt;3306/tcp              mariadb103
4890c52372bb        mariadb:10.4                 &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:5306-&amp;gt;3306/tcp              mariadb104
6b9dc078e921        percona/percona-server:5.6   &quot;/docker-entrypoint.…&quot;   7 hours ago         Up 7 hours          0.0.0.0:4308-&amp;gt;3306/tcp              percona56
3a4c7c826d4c        percona/percona-server:5.7   &quot;/docker-entrypoint.…&quot;   7 hours ago         Up 7 hours          0.0.0.0:4307-&amp;gt;3306/tcp              percona57
3dda408c91b0        percona/percona-server:8.0   &quot;/docker-entrypoint.…&quot;   7 hours ago         Up 7 hours          33060/tcp, 0.0.0.0:4306-&amp;gt;3306/tcp   percona80
600a4e7e9dcd        mysql:5.5                    &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:3309-&amp;gt;3306/tcp              mysql55
4bbe54342e5d        mysql:5.6                    &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:3308-&amp;gt;3306/tcp              mysql56
a49783249a11        mysql:5.7                    &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          33060/tcp, 0.0.0.0:3307-&amp;gt;3306/tcp   mysql57
d985820667c2        mysql:8.0                    &quot;docker-entrypoint.s…&quot;   7 hours ago         Up 7 hours          0.0.0.0:3306-&amp;gt;3306/tcp, 33060/tcp   mysql 8    0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributions welcome !&lt;/h2&gt; 
&lt;p&gt;How to contribute using Pull Request ? Follow this guide : &lt;a href=&quot;https://opensource.com/article/19/7/create-pull-request-github&quot;&gt;Pull request creation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Simple steps to create a pull request:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fork this Github project&lt;/li&gt; 
 &lt;li&gt;Clone it to your local system&lt;/li&gt; 
 &lt;li&gt;Make a new branch&lt;/li&gt; 
 &lt;li&gt;Make your changes&lt;/li&gt; 
 &lt;li&gt;Push it back to your repo&lt;/li&gt; 
 &lt;li&gt;Click the Compare &amp;amp; pull request button&lt;/li&gt; 
 &lt;li&gt;Click Create pull request to open a new pull request&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tseemann/prokka</title>
      <link>https://github.com/tseemann/prokka</link>
      <description>&lt;p&gt;⚡ ♒ Rapid prokaryotic genome annotation&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/tseemann/prokka&quot;&gt;&lt;img src=&quot;https://travis-ci.org/tseemann/prokka.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License: GPL v3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://doi.org/10.1093/bioinformatics/btu153&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.1093/bioinformatics/btu153.svg?sanitize=true&quot; alt=&quot;DOI:10.1093/bioinformatics/btu153&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/Language-Perl_5-steelblue.svg?sanitize=true&quot; alt=&quot;Don&#39;t judge me&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Prokka: rapid prokaryotic genome annotation&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Whole genome annotation is the process of identifying features of interest in a set of genomic DNA sequences, and labelling them with useful information. Prokka is a software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Bioconda&lt;/h3&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://conda.io/docs/install/quick.html&quot;&gt;Conda&lt;/a&gt; you can use the &lt;a href=&quot;https://bioconda.github.io/&quot;&gt;Bioconda channel&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;conda install -c conda-forge -c bioconda -c defaults prokka
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Brew&lt;/h3&gt; 
&lt;p&gt;If you are using the &lt;a href=&quot;http://brew.sh/&quot;&gt;MacOS Brew&lt;/a&gt; or &lt;a href=&quot;http://brew.sh/linuxbrew/&quot;&gt;LinuxBrew&lt;/a&gt; packaging system:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install brewsci/bio/prokka
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;Maintained by &lt;a href=&quot;https://hub.docker.com/u/staphb&quot;&gt;https://hub.docker.com/u/staphb&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
docker pull staphb/prokka:latest
docker run staphb/prokka:latest prokka -h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Singularity&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;singularity build prokka.sif docker://staphb/prokka:latest
singularity exec prokka.sif prokka -h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ubuntu/Debian/Mint&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-get install libdatetime-perl libxml-simple-perl libdigest-md5-perl git default-jre bioperl
sudo cpan Bio::Perl
git clone https://github.com/tseemann/prokka.git $HOME/prokka
$HOME/prokka/bin/prokka --setupdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Centos/Fedora/RHEL&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;sudo yum install git perl-Time-Piece perl-XML-Simple perl-Digest-MD5 perl-App-cpanminus git java perl-CPAN perl-Module-Build
sudo cpanm Bio::Perl
git clone https://github.com/tseemann/prokka.git $HOME/prokka
$HOME/prokka/bin/prokka --setupdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MacOS&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;sudo cpan Time::Piece XML::Simple Digest::MD5 Bio::Perl
git clone https://github.com/tseemann/prokka.git $HOME/prokka
$HOME/prokka/bin/prokka --setupdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Test&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Type &lt;code&gt;prokka&lt;/code&gt; and it should output its help screen.&lt;/li&gt; 
 &lt;li&gt;Type &lt;code&gt;prokka --version&lt;/code&gt; and you should see an output like &lt;code&gt;prokka 1.x&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Type &lt;code&gt;prokka --listdb&lt;/code&gt; and it will show you what databases it has installed to use.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Invoking Prokka&lt;/h2&gt; 
&lt;h3&gt;Beginner&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Vanilla (but with free toppings)
% prokka contigs.fa

# Look for a folder called PROKKA_yyyymmdd (today&#39;s date) and look at stats
% cat PROKKA_yyyymmdd/*.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Moderate&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Choose the names of the output files
% prokka --outdir mydir --prefix mygenome contigs.fa

# Visualize it in Artemis
% art mydir/mygenome.gff
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Specialist&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Have curated genomes I want to use to annotate from
% prokka --proteins MG1655.gbk --outdir mutant --prefix K12_mut contigs.fa

# Look at tabular features
% less -S mutant/K12_mut.tsv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Expert&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# It&#39;s not just for bacteria, people
% prokka --kingdom Archaea --outdir mydir --genus Pyrococcus --locustag PYCC

# Search for your favourite gene
% exonerate --bestn 1 zetatoxin.fasta mydir/PYCC_06072012.faa | less
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Wizard&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Watch and learn
% prokka --outdir mydir --locustag EHEC --proteins NewToxins.faa --evalue 0.001 --gram neg --addgenes contigs.fa

# Check to see if anything went really wrong
% less mydir/EHEC_06072012.err

# Add final details using Sequin
% sequin mydir/EHEC_0607201.sqn
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NCBI Genbank submitter&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Register your BioProject (e.g. PRJNA123456) and your locus_tag prefix (e.g. EHEC) first!
% prokka --compliant --centre UoN --outdir PRJNA123456 --locustag EHEC --prefix EHEC-Chr1 contigs.fa

# Check to see if anything went really wrong
% less PRJNA123456/EHEC-Chr1.err

# Add final details using Sequin
% sequin PRJNA123456/EHEC-Chr1.sqn
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;European Nucleotide Archive (ENA) submitter&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Register your BioProject (e.g. PRJEB12345) and your locus_tag (e.g. EHEC) prefix first!
% prokka --compliant --centre UoN --outdir PRJEB12345 --locustag EHEC --prefix EHEC-Chr1 contigs.fa

# Check to see if anything went really wrong
% less PRJNA123456/EHEC-Chr1.err

# Install and run Sanger Pathogen group&#39;s Prokka GFF3 to EMBL converter
# available from https://github.com/sanger-pathogens/gff3toembl
# Find the closest NCBI taxonomy id (e.g. 562 for Escherichia coli)
% gff3_to_embl -i &quot;Submitter, A.&quot; \
    -m &quot;Escherichia coli EHEC annotated using Prokka.&quot; \
    -g linear -c PROK -n 11 -f PRJEB12345/EHEC-Chr1.embl \
    &quot;Escherichia coli&quot; 562 PRJEB12345 &quot;Escherichia coli strain EHEC&quot; PRJEB12345/EHEC-Chr1.gff

# Download and run the latest EMBL validator prior to submitting the EMBL flat file
# from http://central.maven.org/maven2/uk/ac/ebi/ena/sequence/embl-api-validator/
# which at the time of writing is v1.1.129
% curl -L -O http://central.maven.org/maven2/uk/ac/ebi/ena/sequence/embl-api-validator/1.1.129/embl-api-validator-1.1.129.jar
% java -jar embl-api-validator-1.1.129.jar -r PRJEB12345/EHEC-Chr1.embl

# Compress the file ready to upload to ENA, and calculate MD5 checksum
% gzip PRJEB12345/EHEC-Chr1.embl
% md5sum PRJEB12345/EHEC-Chr1.embl.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Crazy Person&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# No stinking Perl script is going to control me
% prokka \
        --outdir $HOME/genomes/Ec_POO247 --force \
        --prefix Ec_POO247 --addgenes --locustag ECPOOp \
        --increment 10 --gffver 2 --centre CDC  --compliant \
        --genus Escherichia --species coli --strain POO247 --plasmid pECPOO247 \
        --kingdom Bacteria --gcode 11 --usegenus \
        --proteins /opt/prokka/db/trusted/Ecocyc-17.6 \
        --evalue 1e-9 --rfam \
        plasmid-closed.fna
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Output Files&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Extension&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.gff&lt;/td&gt; 
   &lt;td&gt;This is the master annotation in GFF3 format, containing both sequences and annotations. It can be viewed directly in Artemis or IGV.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.gbk&lt;/td&gt; 
   &lt;td&gt;This is a standard Genbank file derived from the master .gff. If the input to prokka was a multi-FASTA, then this will be a multi-Genbank, with one record for each sequence.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.fna&lt;/td&gt; 
   &lt;td&gt;Nucleotide FASTA file of the input contig sequences.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.faa&lt;/td&gt; 
   &lt;td&gt;Protein FASTA file of the translated CDS sequences.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.ffn&lt;/td&gt; 
   &lt;td&gt;Nucleotide FASTA file of all the prediction transcripts (CDS, rRNA, tRNA, tmRNA, misc_RNA)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.sqn&lt;/td&gt; 
   &lt;td&gt;An ASN1 format &quot;Sequin&quot; file for submission to Genbank. It needs to be edited to set the correct taxonomy, authors, related publication etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.fsa&lt;/td&gt; 
   &lt;td&gt;Nucleotide FASTA file of the input contig sequences, used by &quot;tbl2asn&quot; to create the .sqn file. It is mostly the same as the .fna file, but with extra Sequin tags in the sequence description lines.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.tbl&lt;/td&gt; 
   &lt;td&gt;Feature Table file, used by &quot;tbl2asn&quot; to create the .sqn file.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.err&lt;/td&gt; 
   &lt;td&gt;Unacceptable annotations - the NCBI discrepancy report.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.log&lt;/td&gt; 
   &lt;td&gt;Contains all the output that Prokka produced during its run. This is a record of what settings you used, even if the --quiet option was enabled.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.txt&lt;/td&gt; 
   &lt;td&gt;Statistics relating to the annotated features found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.tsv&lt;/td&gt; 
   &lt;td&gt;Tab-separated file of all features: locus_tag,ftype,len_bp,gene,EC_number,COG,product&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Command line options&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;General:
  --help            This help
  --version         Print version and exit
  --citation        Print citation for referencing Prokka
  --quiet           No screen output (default OFF)
  --debug           Debug mode: keep all temporary files (default OFF)
Setup:
  --listdb          List all configured databases
  --setupdb         Index all installed databases
  --cleandb         Remove all database indices
  --depends         List all software dependencies
Outputs:
  --outdir [X]      Output folder [auto] (default &#39;&#39;)
  --force           Force overwriting existing output folder (default OFF)
  --prefix [X]      Filename output prefix [auto] (default &#39;&#39;)
  --addgenes        Add &#39;gene&#39; features for each &#39;CDS&#39; feature (default OFF)
  --locustag [X]    Locus tag prefix (default &#39;PROKKA&#39;)
  --increment [N]   Locus tag counter increment (default &#39;1&#39;)
  --gffver [N]      GFF version (default &#39;3&#39;)
  --compliant       Force Genbank/ENA/DDJB compliance: --genes --mincontiglen 200 --centre XXX (default OFF)
  --centre [X]      Sequencing centre ID. (default &#39;&#39;)
Organism details:
  --genus [X]       Genus name (default &#39;Genus&#39;)
  --species [X]     Species name (default &#39;species&#39;)
  --strain [X]      Strain name (default &#39;strain&#39;)
  --plasmid [X]     Plasmid name or identifier (default &#39;&#39;)
Annotations:
  --kingdom [X]     Annotation mode: Archaea|Bacteria|Mitochondria|Viruses (default &#39;Bacteria&#39;)
  --gcode [N]       Genetic code / Translation table (set if --kingdom is set) (default &#39;0&#39;)
  --prodigaltf [X]  Prodigal training file (default &#39;&#39;)
  --gram [X]        Gram: -/neg +/pos (default &#39;&#39;)
  --usegenus        Use genus-specific BLAST databases (needs --genus) (default OFF)
  --proteins [X]    Fasta file of trusted proteins to first annotate from (default &#39;&#39;)
  --hmms [X]        Trusted HMM to first annotate from (default &#39;&#39;)
  --metagenome      Improve gene predictions for highly fragmented genomes (default OFF)
  --rawproduct      Do not clean up /product annotation (default OFF)
Computation:
  --fast            Fast mode - skip CDS /product searching (default OFF)
  --cpus [N]        Number of CPUs to use [0=all] (default &#39;8&#39;)
  --mincontiglen [N] Minimum contig size [NCBI needs 200] (default &#39;1&#39;)
  --evalue [n.n]    Similarity e-value cut-off (default &#39;1e-06&#39;)
  --rfam            Enable searching for ncRNAs with Infernal+Rfam (SLOW!) (default &#39;0&#39;)
  --norrna          Don&#39;t run rRNA search (default OFF)
  --notrna          Don&#39;t run tRNA search (default OFF)
  --rnammer         Prefer RNAmmer over Barrnap for rRNA prediction (default OFF)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option: --proteins&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;--proteins&lt;/code&gt; option is recommended when you have good quality reference genomes and want to ensure gene naming is consistent. Some species use specific terminology which will be often lost if you rely on the default Swiss-Prot database included with Prokka.&lt;/p&gt; 
&lt;p&gt;If you have Genbank or Protein FASTA file(s) that you want to annotate genes from as the first priority, use the &lt;code&gt;--proteins myfile.gbk&lt;/code&gt;. Please make sure it has a recognisable file extension like &lt;code&gt;.gb&lt;/code&gt; or &lt;code&gt;.gbk&lt;/code&gt; or auto-detect will fail. The use of Genbank is recommended over FASTA, because it will provide &lt;code&gt;/gene&lt;/code&gt; and &lt;code&gt;/EC_number&lt;/code&gt; annotations that a typical &lt;code&gt;.faa&lt;/code&gt; file will not provide, unless you have specially formatted it for Prokka.&lt;/p&gt; 
&lt;h3&gt;Option: --prodigaltf&lt;/h3&gt; 
&lt;p&gt;Instead of letting &lt;code&gt;prodigal&lt;/code&gt; train its gene model on the contigs you provide, you can pre-train it on some good closed reference genomes first using the &lt;code&gt;prodigal -t&lt;/code&gt; option. Once you&#39;ve done that, provide &lt;code&gt;prokka&lt;/code&gt; the training file using the &lt;code&gt;--prodgialtf&lt;/code&gt; option.&lt;/p&gt; 
&lt;h3&gt;Option: --rawproduct&lt;/h3&gt; 
&lt;p&gt;Prokka annotates proteins by using sequence similarity to other proteins in its database, or the databases the user provides via &lt;code&gt;--proteins&lt;/code&gt;. By default, Prokka tries to &quot;cleans&quot; the &lt;code&gt;/product&lt;/code&gt; names to ensure they are compliant with Genbank/ENA conventions. Some of the main things it does is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;set vague names to &lt;code&gt;hypothetical protein&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;consistifies terms like &lt;code&gt;possible&lt;/code&gt;, &lt;code&gt;probable&lt;/code&gt;, &lt;code&gt;predicted&lt;/code&gt;, ... to &lt;code&gt;putative&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;removes EC, COG and locus_tag identifiers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Full details can be found in the &lt;code&gt;cleanup_product()&lt;/code&gt; function in the &lt;code&gt;prokka&lt;/code&gt; script. If you feel your annotations are being ruined, try using the &lt;code&gt;--rawproduct&lt;/code&gt; option, and please &lt;a href=&quot;https://github.com/tseemann/prokka/issues/&quot;&gt;file an issue&lt;/a&gt; if you find an example of where it is &quot;behaving badly&quot; and I will fix it.&lt;/p&gt; 
&lt;h2&gt;Databases&lt;/h2&gt; 
&lt;h3&gt;The Core (BLAST+) Databases&lt;/h3&gt; 
&lt;p&gt;Prokka uses a variety of databases when trying to assign function to the predicted CDS features. It takes a hierarchical approach to make it fast.&lt;br&gt; A small, core set of well characterized proteins are first searched using BLAST+. This combination of small database and fast search typically completes about 70% of the workload. Then a series of slower but more sensitive HMM databases are searched using HMMER3.&lt;/p&gt; 
&lt;p&gt;The three core databases, applied in order, are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://isfinder.biotoul.fr/&quot;&gt;ISfinder&lt;/a&gt;: Only the tranposase (protein) sequences; the whole transposon is not annotated.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/bioproject/313047&quot;&gt;NCBI Bacterial Antimicrobial Resistance Reference Gene Database&lt;/a&gt;: Antimicrobial resistance genes curated by NCBI.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.uniprot.org/uniprot/?query=reviewed:yes&quot;&gt;UniProtKB (SwissProt)&lt;/a&gt;: For each &lt;code&gt;--kingdom&lt;/code&gt; we include curated proteins with evidence that (i) from Bacteria (or Archaea or Viruses); (ii) not be &quot;Fragment&quot; entries; and (iii) have an evidence level (&quot;PE&quot;) of 2 or lower, which corresponds to experimental mRNA or proteomics evidence.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Making a Core Databases&lt;/h4&gt; 
&lt;p&gt;If you want to modify these core databases, the included script &lt;code&gt;prokka-uniprot_to_fasta_db&lt;/code&gt;, along with the official &lt;code&gt;uniprot_sprot.dat&lt;/code&gt;, can be used to generate a new database to put in &lt;code&gt;/opt/prokka/db/kingdom/&lt;/code&gt;. If you add new ones, the command &lt;code&gt;prokka --listdb&lt;/code&gt; will show you whether it has been detected properly.&lt;/p&gt; 
&lt;h4&gt;The Genus Databases&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This is no longer recommended. Please use &lt;code&gt;--proteins&lt;/code&gt; instead.&lt;/p&gt; 
&lt;p&gt;If you enable &lt;code&gt;--usegenus&lt;/code&gt; and also provide a Genus via &lt;code&gt;--genus&lt;/code&gt; then it will first use a BLAST database which is Genus specific. Prokka comes with a set of databases for the most common Bacterial genera; type prokka &lt;code&gt;--listdb&lt;/code&gt; to see what they are.&lt;/p&gt; 
&lt;h4&gt;Adding a Genus Databases&lt;/h4&gt; 
&lt;p&gt;If you have a set of Genbank files and want to create a new Genus database, Prokka comes with a tool called &lt;code&gt;prokka-genbank_to_fasta_db&lt;/code&gt; to help. For example, if you had four annotated &quot;Coccus&quot; genomes, you could do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% prokka-genbank_to_fasta_db Coccus1.gbk Coccus2.gbk Coccus3.gbk Coccus4.gbk &amp;gt; Coccus.faa
% cd-hit -i Coccus.faa -o Coccus -T 0 -M 0 -g 1 -s 0.8 -c 0.9
% rm -fv Coccus.faa Coccus.bak.clstr Coccus.clstr
% makeblastdb -dbtype prot -in Coccus
% mv Coccus.p* /path/to/prokka/db/genus/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The HMM Databases&lt;/h3&gt; 
&lt;p&gt;Prokka comes with a bunch of HMM libraries for HMMER3. They are mostly Bacteria-specific. They are searched after the core and genus databases. You can add more simply by putting them in &lt;code&gt;/opt/prokka/db/hmm&lt;/code&gt;. Type &lt;code&gt;prokka --listdb&lt;/code&gt; to confirm they are recognised.&lt;/p&gt; 
&lt;h3&gt;FASTA database format&lt;/h3&gt; 
&lt;p&gt;Prokka understands two annotation tag formats, a plain one and a detailed one.&lt;/p&gt; 
&lt;p&gt;The plain one is a standard FASTA-like line with the ID after the &lt;code&gt;&amp;gt;&lt;/code&gt; sign, and the protein &lt;code&gt;/product&lt;/code&gt; after the ID (the &quot;description&quot; part of the line):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt;SeqID product
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The detailed one consists of a special encoded three-part description line. The parts are the &lt;code&gt;/EC_number&lt;/code&gt;, the &lt;code&gt;/gene&lt;/code&gt; code, then the &lt;code&gt;/product&lt;/code&gt; - and they are separated by a special &quot;~~~&quot; sequence:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt;SeqID EC_number~~~gene~~~product~~~COG
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here are some examples. Note that not all parts need to be present, but the &quot;~~~&quot; should still be there:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt;YP_492693.1 2.1.1.48~~~ermC~~~rRNA adenine N-6-methyltransferase~~~COG1234
MNEKNIKHSQNFITSKHNIDKIMTNIRLNEHDNIFEIGSGKGHFTLELVQRCNFVTAIEI
DHKLCKTTENKLVDHDNFQVLNKDILQFKFPKNQSYKIFGNIPYNISTDIIRKIVF*
&amp;gt;YP_492697.1 ~~~traB~~~transfer complex protein TraB~~~
MIKKFSLTTVYVAFLSIVLSNITLGAENPGPKIEQGLQQVQTFLTGLIVAVGICAGVWIV
LKKLPGIDDPMVKNEMFRGVGMVLAGVAVGAALVWLVPWVYNLFQ*
&amp;gt;YP_492694.1 ~~~~~~transposase~~~
MNYFRYKQFNKDVITVAVGYYLRYALSYRDISEILRGRGVNVHHSTVYRWVQEYAPILYQ
QSINTAKNTLKGIECIYALYKKNRRSLQIYGFSPCHEISIMLAS*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The same description lines apply to HMM models, except the &quot;NAME&quot; and &quot;DESC&quot; fields are used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NAME  PRK00001
ACC   PRK00001
DESC  2.1.1.48~~~ermC~~~rRNA adenine N-6-methyltransferase~~~COG1234
LENG  284
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where does the name &quot;Prokka&quot; come from?&lt;/strong&gt;&lt;br&gt; Prokka is a contraction of &quot;prokaryotic annotation&quot;. It&#39;s also relatively unique within Google, and also rhymes with a native Australian marsupial called the quokka.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can I annotate by eukaryote genome with Prokka?&lt;/strong&gt;&lt;br&gt; No. Prokka is specifically designed for Bacteria, Archaea and Viruses. It can&#39;t handle multi-exon gene models; I would recommend using MAKER 2 for that purpose.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why does Prokka keeps on crashing when it gets to the &quot;tbl2asn&quot; stage?&lt;/strong&gt;&lt;br&gt; It seems that the tbl2asn program from NCBI &quot;expires&quot; after 6-12 months, and refuses to run. Unfortunately you need to install a newer version which you can download from &lt;a href=&quot;http://www.ncbi.nlm.nih.gov/genbank/tbl2asn2/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;The hmmscan step seems to hang and do nothing?&lt;/strong&gt;&lt;br&gt; The problem here is GNU Parallel. It seems the Debian package for hmmer has modified it to require the &lt;code&gt;--gnu&lt;/code&gt; option to behave in the &#39;default&#39; way. There is no clear reason for this. The only way to restore normal behaviour is to edit the prokka script and change &lt;code&gt;parallel&lt;/code&gt; to &lt;code&gt;parallel --gnu&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why does prokka fail when it gets to hmmscan?&lt;/strong&gt;&lt;br&gt; Unfortunately HMMER keeps changing its database format, and they aren&#39;t upward compatible. If you upgraded HMMER (from 3.0 to 3.1 say) then you need to &quot;re-press&quot; the files. This can be done as follows:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;cd /path/to/prokka/db/hmm
mkdir new
for D in *.hmm ; do hmmconvert $D &amp;gt; new/$D ; done
cd new
for D in *.hmm ; do hmmpress $D ; done
mv * ..
rmdir new
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why can&#39;t I load Prokka .GBK files into Mauve?&lt;/strong&gt;&lt;br&gt; Mauve uses BioJava to parse GenBank files, and it is very picky about Genbank files. It does not like long contig names, like those from Velvet or Spades. One solution is to use &lt;code&gt;--centre XXX&lt;/code&gt; in Prokka and it will rename all your contigs to be NCBI (and Mauve) compliant. It does not like the ACCESSION and VERSION strings that Prokka produces via the &quot;tbl2asn&quot; tool. The following Unix command will fix them: &lt;code&gt;egrep -v &#39;^(ACCESSION|VERSION)&#39; prokka.gbk &amp;gt; mauve.gbk&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;How can I make my GFF not have the contig sequences in it?&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sed &#39;/^##FASTA/Q&#39; prokka.gff &amp;gt; nosequence.gff
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Bugs&lt;/h2&gt; 
&lt;p&gt;Submit problems or requests to the &lt;a href=&quot;https://github.com/tseemann/prokka/issues&quot;&gt;Issue Tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Changes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/tseemann/prokka/releases&quot;&gt;release notes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://raw.githubusercontent.com/tseemann/prokka/master/doc/ChangeLog.txt&quot;&gt;ChangeLog.txt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Look at the &lt;a href=&quot;https://github.com/tseemann/prokka/commits/master&quot;&gt;Github commits&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;Seemann T.&lt;br&gt; &lt;em&gt;Prokka: rapid prokaryotic genome annotation&lt;/em&gt;&lt;br&gt; &lt;strong&gt;Bioinformatics&lt;/strong&gt; 2014 Jul 15;30(14):2068-9. &lt;a href=&quot;http://www.ncbi.nlm.nih.gov/pubmed/24642063&quot;&gt;PMID:24642063&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;h3&gt;Mandatory&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;BioPerl&lt;/strong&gt;&lt;br&gt; Used for input/output of various file formats&lt;br&gt; &lt;em&gt;Stajich et al, The Bioperl toolkit: Perl modules for the life sciences. Genome Res. 2002 Oct;12(10):1611-8.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;GNU Parallel&lt;/strong&gt;&lt;br&gt; A shell tool for executing jobs in parallel using one or more computers&lt;br&gt; &lt;em&gt;O. Tange, GNU Parallel - The Command-Line Power Tool, ;login: The USENIX Magazine, Feb 2011:42-47.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;BLAST+&lt;/strong&gt;&lt;br&gt; Used for similarity searching against protein sequence libraries&lt;br&gt; &lt;em&gt;Camacho C et al. BLAST+: architecture and applications. BMC Bioinformatics. 2009 Dec 15;10:421.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Prodigal&lt;/strong&gt;&lt;br&gt; Finds protein-coding features (CDS)&lt;br&gt; &lt;em&gt;Hyatt D et al. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinformatics. 2010 Mar 8;11:119.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;TBL2ASN&lt;/strong&gt; Prepare sequence records for Genbank submission &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/genbank/tbl2asn2/&quot;&gt;Tbl2asn home page&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Recommended&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Aragorn&lt;/strong&gt;&lt;br&gt; Finds transfer RNA features (tRNA)&lt;br&gt; &lt;em&gt;Laslett D, Canback B. ARAGORN, a program to detect tRNA genes and tmRNA genes in nucleotide sequences. Nucleic Acids Res. 2004 Jan 2;32(1):11-6.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Barrnap&lt;/strong&gt;&lt;br&gt; Used to predict ribosomal RNA features (rRNA). My licence-free replacement for RNAmmmer.&lt;br&gt; &lt;em&gt;Manuscript under preparation.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;HMMER3&lt;/strong&gt;&lt;br&gt; Used for similarity searching against protein family profiles&lt;br&gt; &lt;em&gt;Finn RD et al. HMMER web server: interactive sequence similarity searching. Nucleic Acids Res. 2011 Jul;39(Web Server issue):W29-37.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Optional&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;minced&lt;/strong&gt;&lt;br&gt; Finds CRISPR arrays &lt;a href=&quot;https://github.com/ctSkennerton/minced&quot;&gt;Minced home page&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;RNAmmer&lt;/strong&gt;&lt;br&gt; Finds ribosomal RNA features (rRNA)&lt;br&gt; &lt;em&gt;Lagesen K et al. RNAmmer: consistent and rapid annotation of ribosomal RNA genes. Nucleic Acids Res. 2007;35(9):3100-8.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;SignalP&lt;/strong&gt;&lt;br&gt; Finds signal peptide features in CDS (sig_peptide)&lt;br&gt; &lt;em&gt;Petersen TN et al. SignalP 4.0: discriminating signal peptides from transmembrane regions. Nat Methods. 2011 Sep 29;8(10):785-6.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infernal&lt;/strong&gt;&lt;br&gt; Used for similarity searching against ncRNA family profiles&lt;br&gt; &lt;em&gt;D. L. Kolbe, S. R. Eddy. Fast Filtering for RNA Homology Search. Bioinformatics, 27:3102-3109, 2011.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Licence&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tseemann/prokka/master/doc/LICENSE.Prokka&quot;&gt;GPL v3&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Torsten Seemann&lt;/li&gt; 
 &lt;li&gt;Web: &lt;a href=&quot;https://tseemann.github.io/&quot;&gt;https://tseemann.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/torstenseemann&quot;&gt;@torstenseemann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blog: &lt;a href=&quot;https://thegenomefactory.blogspot.com/&quot;&gt;The Genome Factory&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ocpi/ocpi</title>
      <link>https://github.com/ocpi/ocpi</link>
      <description>&lt;p&gt;The Open Charge Point Interface (OCPI) allows for a scalable, automated roaming setup between Charge Point Operators and e-Mobility Service Providers. It supports authorisation, charge point information exchange (incl transaction events), charge detail record exchange and finally, the exchange of smart-charging commands between parties.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repository contains the OCPI specification, latest release: &lt;a href=&quot;https://evroaming.org/app/uploads/2021/11/OCPI-2.2.1.pdf&quot;&gt;&lt;code&gt;OCPI 2.2.1&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The branch with the latest fixes to the 2.2.1 documentation is &lt;a href=&quot;https://github.com/ocpi/ocpi/tree/release-2.2.1-bugfixes&quot;&gt;&lt;code&gt;release-2.2.1-bugfixes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;-The branch with the latest fixes to the 2.2 documentation is &lt;a href=&quot;https://github.com/ocpi/ocpi/tree/release-2.2-bugfixes&quot;&gt;&lt;code&gt;release-2.2-bugfixes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The branch with the latest fixes to the 2.1.1 documentation is &lt;a href=&quot;https://github.com/ocpi/ocpi/tree/release-2.1.1-bugfixes&quot;&gt;&lt;code&gt;release-2.1.1-bugfixes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch always contains the latest official release.&lt;/p&gt; 
&lt;p&gt;Development of the next version of OCPI, new functionality, is done in the &lt;a href=&quot;https://github.com/ocpi/ocpi-3/&quot;&gt;ocpi-3 repository&lt;/a&gt;, which is only accessible to Contributors of the &lt;a href=&quot;https://evroaming.org/how-to-join/&quot;&gt;EV Roaming Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/version_history.asciidoc&quot;&gt;&lt;strong&gt;Version History&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/introduction.asciidoc&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/terminology.asciidoc&quot;&gt;Terminology and Definitions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/topology.asciidoc&quot;&gt;Supported Topologies&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Protocol Meta Information&lt;/strong&gt;, describes the connections between the parties&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/transport_and_format.asciidoc&quot;&gt;Transport and Format&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/status_codes.asciidoc&quot;&gt;Status codes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/version_information_endpoint.asciidoc&quot;&gt;Version information endpoint&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/credentials.asciidoc&quot;&gt;Credentials &amp;amp; registration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Overview of Modules&lt;/strong&gt;, each section describes one module.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_locations.asciidoc&quot;&gt;Locations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_sessions.asciidoc&quot;&gt;Sessions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_cdrs.asciidoc&quot;&gt;CDRs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_tariffs.asciidoc&quot;&gt;Tariffs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_tokens.asciidoc&quot;&gt;Tokens&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_commands.asciidoc&quot;&gt;Commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_charging_profiles.asciidoc&quot;&gt;Charging Profiles&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_hub_client_info.asciidoc&quot;&gt;Hub Client Info&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generic Types&lt;/strong&gt;, describing all data types that are used by multiple objects&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/types.asciidoc&quot;&gt;Types&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/changelog.asciidoc&quot;&gt;&lt;strong&gt;Changelog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Current versions&lt;/h3&gt; 
&lt;h4&gt;Release 2.2.1&lt;/h4&gt; 
&lt;p&gt;Only minor changes, but breaking compatibility with 2.2 in order to support signed data exchange so that parties using OCPI can comply with consumer protection legislation. A more detailed overview is inside &lt;a href=&quot;https://evroaming.org/app/uploads/2021/11/OCPI-2.2.1.pdf&quot;&gt;the specification document itself&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Release 2.2-d2&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for Hubs 
  &lt;ul&gt; 
   &lt;li&gt;Message routing headers&lt;/li&gt; 
   &lt;li&gt;Hub Client Info&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Support Platforms with multiple/different roles, additional roles&lt;/li&gt; 
 &lt;li&gt;Charging Profiles&lt;/li&gt; 
 &lt;li&gt;based Smart Charging&lt;/li&gt; 
 &lt;li&gt;Improvements: 
  &lt;ul&gt; 
   &lt;li&gt;CDRs: Credit CDRs, VAT, Calibration law/Eichrecht support, Session_id, AuthorizationReference, CdrLocation, CdrToken&lt;/li&gt; 
   &lt;li&gt;Sessions: VAT, CdrToken, How to add a Charging Period&lt;/li&gt; 
   &lt;li&gt;Tariffs: Tariff types, Min/Max price, reservation tariff, Much more examples&lt;/li&gt; 
   &lt;li&gt;Locations: Multiple Tariffs, Lost of small improvements&lt;/li&gt; 
   &lt;li&gt;Tokens: Group_id, energy contract&lt;/li&gt; 
   &lt;li&gt;Commands: Cancel Reservation added&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;fixes some bugs of 2.1.1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Release 2.1.1-d2&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Improvements from rel. 2.0&lt;/li&gt; 
 &lt;li&gt;Chargepoint commands&lt;/li&gt; 
 &lt;li&gt;realtime authorization&lt;/li&gt; 
 &lt;li&gt;fixes some bugs of 2.1 (2.1 is now deprecated)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Release 2.0&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Charge Point Exchange Static &amp;amp; Dynamic (with tariffing covering only start/kWh/time)&lt;/li&gt; 
 &lt;li&gt;Authorization &amp;amp; token data exchange&lt;/li&gt; 
 &lt;li&gt;Tariffing&lt;/li&gt; 
 &lt;li&gt;Session Info exchange (cdr &amp;amp; ndr)&lt;/li&gt; 
 &lt;li&gt;Registration (How to connect) &amp;amp; Security&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Planned releases&lt;/h3&gt; 
&lt;h4&gt;Release 3.0&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;ISO 15118 Plug&amp;amp;Charge&lt;/li&gt; 
 &lt;li&gt;Eichrecht support&lt;/li&gt; 
 &lt;li&gt;Performance improvements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building Process&lt;/h2&gt; 
&lt;p&gt;The OCPI Build Process has been improved. OCPI 2.0/2.1.1 was in markdown format, and diagrams where Plantuml.&lt;/p&gt; 
&lt;p&gt;For OCPI 2.2, the text of OCPI has been converted to asciidoc. Asciidoc is easier to format the output, and chapter numbering and internal links are much easier to work with.&lt;/p&gt; 
&lt;p&gt;The Plantuml is no longer converted to PNG images, but the SVG, making them much better readable, and even searchable in the PDF.&lt;/p&gt; 
&lt;p&gt;In OCPI 2.0 and 2.1.1, the JSON examples contained a lot of mistakes, where outdated compared to the text, or not even valid JSON. To prevent issues with the examples in the specification, the examples are not placed in separate JSON files. At the moment, the JSON files are check if they are valid JSON.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;1 Dec 2014 &lt;a href=&quot;https://raw.githubusercontent.com/ocpi/ocpi/master/releases/old/OCPI-Draftv4.pdf&quot;&gt;Draft v4&lt;/a&gt; is published 17 June 2015 [Draft v5] is moved to a new branch that will be used as a reference as the OCPI specifications are being redefined and the specifications are restructured in different files, a file per chapter&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>glpi-project/glpi-agent</title>
      <link>https://github.com/glpi-project/glpi-agent</link>
      <description>&lt;p&gt;GLPI Agent&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/glpi-project/glpi-agent/develop/share/html/logo.png&quot; alt=&quot;GLPI Agent&quot; width=&quot;32&quot; height=&quot;32&quot;&gt; GLPI Agent&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/glpi-project/glpi-agent/actions/workflows/glpi-agent-ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/glpi-project/glpi-agent/actions/workflows/glpi-agent-ci.yml/badge.svg?sanitize=true&quot; alt=&quot;GLPI Agent CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/glpi-project/glpi-agent/actions/workflows/glpi-agent-packaging.yml&quot;&gt;&lt;img src=&quot;https://github.com/glpi-project/glpi-agent/actions/workflows/glpi-agent-packaging.yml/badge.svg?sanitize=true&quot; alt=&quot;GLPI Agent Packaging&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/glpi-project/glpi-agent/develop/#download&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/glpi-project/glpi-agent/total.svg?sanitize=true&quot; alt=&quot;Github All Releases&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/GLPI_PROJECT&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/GLPI_PROJECT.svg?style=social&amp;amp;label=Follow&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Summary&lt;/h2&gt; 
&lt;p&gt;The GLPI Agent is a generic management agent. It can perform a certain number of tasks, according to its own execution plan, or on behalf of a GLPI server acting as a control point.&lt;/p&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;p&gt;This agent is based on a fork of &lt;a href=&quot;https://github.com/fusioninventory/fusioninventory-agent&quot;&gt;FusionInventory agent&lt;/a&gt; and so works mainly like FusionInventory agent. It introduces new features and a new protocol to communicate directly with a GLPI server and its native inventory feature. Anyway it also keeps the compatibility with &lt;a href=&quot;https://github.com/fusioninventory/fusioninventory-for-glpi&quot;&gt;FusionInventory for GLPI plugin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release: See &lt;a href=&quot;https://github.com/glpi-project/glpi-agent/releases&quot;&gt;our github releases&lt;/a&gt; for official win32, MacOSX &amp;amp; linux packages.&lt;/li&gt; 
 &lt;li&gt;Development builds: 
  &lt;ul&gt; 
   &lt;li&gt;nightly builds for last &#39;develop&#39; branch commits: &lt;a href=&quot;http://nightly.glpi-project.org/glpi-agent&quot;&gt;GLPI-Agent nightly builds&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;with a github account, you can also access artifacts for any other branches supporting &lt;a href=&quot;https://github.com/glpi-project/glpi-agent/actions/workflows/glpi-agent-packaging.yml?query=is%3Asuccess+event%3Apush+-branch%3Adevelop&quot;&gt;&quot;GLPI Agent Packaging&quot; workflow&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The GLPI Agent has its &lt;a href=&quot;https://github.com/glpi-project/doc-agent&quot;&gt;dedicated documentation project&lt;/a&gt; where any contribution will also be appreciated.&lt;/p&gt; 
&lt;p&gt;The documentation itself is &lt;a href=&quot;https://glpi-agent.readthedocs.io/&quot;&gt;readable online&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://glpi-agent.readthedocs.io/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/glpi-agent/badge/?version=latest&quot; alt=&quot;Documentation Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;h3&gt;Core&lt;/h3&gt; 
&lt;p&gt;Minimum perl version: 5.8&lt;/p&gt; 
&lt;p&gt;Mandatory Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;File::Which&lt;/li&gt; 
 &lt;li&gt;LWP::UserAgent&lt;/li&gt; 
 &lt;li&gt;Net::IP&lt;/li&gt; 
 &lt;li&gt;Text::Template&lt;/li&gt; 
 &lt;li&gt;UNIVERSAL::require&lt;/li&gt; 
 &lt;li&gt;XML::LibXML&lt;/li&gt; 
 &lt;li&gt;Cpanel::JSON::XS&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compress::Zlib, for message compression&lt;/li&gt; 
 &lt;li&gt;HTTP::Daemon, for web interface&lt;/li&gt; 
 &lt;li&gt;IO::Socket::SSL, for HTTPS support&lt;/li&gt; 
 &lt;li&gt;LWP::Protocol::https, for HTTPS support&lt;/li&gt; 
 &lt;li&gt;Proc::Daemon, for daemon mode (Unix only)&lt;/li&gt; 
 &lt;li&gt;Proc::PID::File, for daemon mode (Unix only)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Inventory task&lt;/h3&gt; 
&lt;p&gt;Optional Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Net::CUPS, for printers detection&lt;/li&gt; 
 &lt;li&gt;Parse::EDID, for EDID data parsing&lt;/li&gt; 
 &lt;li&gt;DateTime, for reliable timezone name extraction&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional programs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;dmidecode, for DMI data retrieval&lt;/li&gt; 
 &lt;li&gt;lspci, for PCI bus scanning&lt;/li&gt; 
 &lt;li&gt;hdparm, for additional disk drive info retrieval&lt;/li&gt; 
 &lt;li&gt;monitor-get-edid-using-vbe, monitor-get-edid or get-edid, for EDID data access&lt;/li&gt; 
 &lt;li&gt;ssh-keyscan, for host SSH public key retrieval&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Network discovery tasks&lt;/h3&gt; 
&lt;p&gt;Mandatory Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thread::Queue&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Net::NBName, for NetBios method support&lt;/li&gt; 
 &lt;li&gt;Net::SNMP, for SNMP method support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional programs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;arp, for arp table lookup method support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Network inventory tasks&lt;/h3&gt; 
&lt;p&gt;Mandatory Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Net::SNMP&lt;/li&gt; 
 &lt;li&gt;Thread::Queue&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Crypt::DES, for SNMPv3 support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Wake on LAN task&lt;/h3&gt; 
&lt;p&gt;Optional Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Net::Write::Layer2, for ethernet method support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Deploy task&lt;/h3&gt; 
&lt;p&gt;Mandatory Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Digest::SHA&lt;/li&gt; 
 &lt;li&gt;File::Copy::Recursive&lt;/li&gt; 
 &lt;li&gt;Cpanel::JSON::XS&lt;/li&gt; 
 &lt;li&gt;URI::Escape&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mandatory Perl modules for P2P Support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Net::Ping&lt;/li&gt; 
 &lt;li&gt;Parallel::ForkManager&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MSI Packaging&lt;/h3&gt; 
&lt;p&gt;Tools:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/glpi-project/dmidecode&quot;&gt;dmidecode&lt;/a&gt; modified to be built with mingw32&lt;/li&gt; 
 &lt;li&gt;hdparm&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.7-zip.org/&quot;&gt;7zip&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mandatory Perl modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perl::Dist::Strawberry&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MacOSX Packaging&lt;/h3&gt; 
&lt;p&gt;Tools:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/glpi-project/dmidecode/tree/macosx&quot;&gt;dmidecode&lt;/a&gt; modified to be built on macosx&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/munki/munki-pkg&quot;&gt;munkipkg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Xcode&lt;/li&gt; 
 &lt;li&gt;productbuild&lt;/li&gt; 
 &lt;li&gt;hdiutil&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Public databases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pci.ids&lt;/li&gt; 
 &lt;li&gt;Usb.ids&lt;/li&gt; 
 &lt;li&gt;SysObject.ids: &lt;a href=&quot;https://github.com/glpi-project/sysobject.ids&quot;&gt;sysobject.ids&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Related contribs&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/glpi-project/glpi-agent/develop/CONTRIB.md&quot;&gt;CONTRIB&lt;/a&gt; to find references to GLPI Agent related scritps/files&lt;/p&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;p&gt;Project websites:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;main site: &lt;a href=&quot;https://glpi-project.org/&quot;&gt;https://glpi-project.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;forum: &lt;a href=&quot;https://forum.glpi-project.org/&quot;&gt;https://forum.glpi-project.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;github: &lt;a href=&quot;http://github.com/glpi-project/glpi-agent&quot;&gt;http://github.com/glpi-project/glpi-agent&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Project Telegram channel:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/glpien&quot;&gt;https://t.me/glpien&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please report any issues on project &lt;a href=&quot;https://github.com/glpi-project/glpi-agent/issues&quot;&gt;github issue tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Active authors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Guillaume Bougard &lt;a href=&quot;mailto:gbougard@teclib.com&quot;&gt;gbougard@teclib.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Copyright 2006-2010 &lt;a href=&quot;https://www.ocsinventory-ng.org/&quot;&gt;OCS Inventory contributors&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Copyright 2010-2019 &lt;a href=&quot;https://fusioninventory.org&quot;&gt;FusionInventory Team&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Copyright 2011-2021 &lt;a href=&quot;https://www.teclib-edition.com/&quot;&gt;Teclib Editions&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v2-blue.svg?sanitize=true&quot; alt=&quot;License: GPL v2&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This software is licensed under the terms of GPLv2+, see LICENSE file for details.&lt;/p&gt; 
&lt;h2&gt;Additional pieces of software&lt;/h2&gt; 
&lt;p&gt;The glpi-injector script is based on fusioninventory-injector script:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;author: Pascal Danek&lt;/li&gt; 
 &lt;li&gt;copyright: 2005 Pascal Danek&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;GLPI::Agent::Task::Inventory::Vmsystem contains code from imvirt:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;url: &lt;a href=&quot;http://micky.ibh.net/~liske/imvirt.html&quot;&gt;http://micky.ibh.net/~liske/imvirt.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;author: Thomas Liske &lt;a href=&quot;mailto:liske@ibh.de&quot;&gt;liske@ibh.de&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;copyright: 2008 IBH IT-Service GmbH &lt;a href=&quot;http://www.ibh.de/&quot;&gt;http://www.ibh.de/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;License: GPLv2+&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>AlDanial/cloc</title>
      <link>https://github.com/AlDanial/cloc</link>
      <description>&lt;p&gt;cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&quot;___top&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;cloc&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Count Lines of Code&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.&lt;/p&gt; 
&lt;p&gt;Latest release: v2.04 (Jan. 31, 2025)&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/version-2.04-blue.svg?sanitize=true&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/AlDanial/cloc/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/AlDanial/cloc.svg?sanitize=true&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://doi.org/10.5281/zenodo.42029482&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/doi/10.5281/zenodo.42029482.svg?sanitize=true&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/AlDanial/cloc/network/members&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/forks/AlDanial/cloc.svg?sanitize=true&quot; alt=&quot;Forks&quot;&gt;&lt;/a&gt; &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/AlDanial/cloc/total.svg?sanitize=true&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc moved to GitHub in September 2015 after being hosted at &lt;a href=&quot;http://cloc.sourceforge.net/&quot;&gt;http://cloc.sourceforge.net/&lt;/a&gt; since August 2006.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#quick-start-&quot;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#overview-&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AlDanial/cloc/releases/latest&quot;&gt;Download&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#install-via-package-manager&quot;&gt;Install via package manager&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#stable-release&quot;&gt;Stable release&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#development-version&quot;&gt;Development version&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#license-&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#why-use-cloc-&quot;&gt;Why Use cloc?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#other-counters-&quot;&gt;Other Counters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#building-a-windows-executable-&quot;&gt;Building a Windows Executable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#basic-use-&quot;&gt;Basic Use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#options-&quot;&gt;Options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#recognized-languages-&quot;&gt;Recognized Languages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#how-it-works-&quot;&gt;How it Works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#advanced-use-&quot;&gt;Advanced Use&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#remove-comments-from-source-code-&quot;&gt;Remove Comments from Source Code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#work-with-compressed-archives-&quot;&gt;Work with Compressed Archives&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#differences-&quot;&gt;Differences&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#create-custom-language-definitions-&quot;&gt;Create Custom Language Definitions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#combine-reports-&quot;&gt;Combine Reports&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#sql-&quot;&gt;SQL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#custom-column-output-&quot;&gt;Custom Column Output&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#wrapping-cloc-in-other-scripts-&quot;&gt;Wrapping cloc in other scripts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#git-and-UTF8-pathnames-&quot;&gt;git and UTF8 pathnames&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#third-generation-language-scale-factors-&quot;&gt;Third Generation Language Scale Factors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#optionstxt-configuration-file-&quot;&gt;options.txt configuration file&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#java-programmatic-interface-&quot;&gt;Java Programmatic Interface&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#complex-regular-subexpression-recursion-limit-&quot;&gt;Complex regular subexpression recursion limit &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#limitations-&quot;&gt;Limitations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#requesting-support-for-additional-languages-&quot;&gt;Requesting Support for Additional Languages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#reporting-problems-&quot;&gt;Reporting Problems&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#citation-&quot;&gt;Citation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#acknowledgments-&quot;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#copyright-&quot;&gt;Copyright&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a name=&quot;Quick_Start&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Quick Start ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Step 1: Download cloc (several methods, see below) or run cloc&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#run-via-docker&quot;&gt;docker image&lt;/a&gt;. The Windows executable has no requirements. The source version of cloc requires a Perl interpreter, and the Docker version of cloc requires a Docker installation.&lt;/p&gt; 
&lt;p&gt;Step 2: Open a terminal (&lt;code&gt;cmd.exe&lt;/code&gt; on Windows).&lt;/p&gt; 
&lt;p&gt;Step 3: Invoke cloc to count your source files, directories, archives, or git commits. The executable name differs depending on whether you use the development source version (&lt;code&gt;cloc&lt;/code&gt;), source for a released version (&lt;code&gt;cloc-2.04.pl&lt;/code&gt;) or a Windows executable (&lt;code&gt;cloc-2.04.exe&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;On this page, &lt;code&gt;cloc&lt;/code&gt; is the generic term used to refer to any of these.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/IncludeSecurity&quot;&gt;Include Security&lt;/a&gt; has a &lt;a href=&quot;https://www.youtube.com/watch?v=eRLTkDMsCqs&quot;&gt;YouTube video&lt;/a&gt; showing the steps in action.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;a file&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; cloc hello.c
       1 text file.
       1 unique file.
       0 files ignored.

https://github.com/AlDanial/cloc v 1.65  T=0.04 s (28.3 files/s, 340.0 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
C                                1              0              7              5
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;a directory&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; cloc gcc-5.2.0/gcc/c
      16 text files.
      15 unique files.
       3 files ignored.

https://github.com/AlDanial/cloc v 1.65  T=0.23 s (57.1 files/s, 188914.0 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
C                               10           4680           6621          30812
C/C++ Header                     3             99            286            496
-------------------------------------------------------------------------------
SUM:                            13           4779           6907          31308
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;an archive&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;We&#39;ll pull cloc&#39;s source zip file from GitHub, then count the contents:&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; wget https://github.com/AlDanial/cloc/archive/master.zip

prompt&amp;gt; cloc master.zip
https://github.com/AlDanial/cloc v 1.65  T=0.07 s (26.8 files/s, 141370.3 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Perl                             2            725           1103           8713
-------------------------------------------------------------------------------
SUM:                             2            725           1103           8713
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;a git repository, using a specific commit&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This example uses code from &lt;a href=&quot;https://pypi.python.org/pypi/pudb&quot;&gt;PuDB&lt;/a&gt;, a fantastic Python debugger.&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; git clone https://github.com/inducer/pudb.git

prompt&amp;gt; cd pudb

prompt&amp;gt; cloc 6be804e07a5db
      48 text files.
      41 unique files.                              
       8 files ignored.

github.com/AlDanial/cloc v 1.99  T=0.04 s (1054.9 files/s, 189646.8 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                          28           1519            728           4659
reStructuredText                 6            102             20            203
YAML                             2              9              2             75
Bourne Shell                     3              6              0             17
Text                             1              0              0             11
make                             1              4              6             10
-------------------------------------------------------------------------------
SUM:                            41           1640            756           4975
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;each subdirectory of a particular directory&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Say you have a directory with three different git-managed projects, Project0, Project1, and Project2. You can use your shell&#39;s looping capability to count the code in each. This example uses bash (scroll down for cmd.exe example):&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; for d in ./*/ ; do (cd &quot;$d&quot; &amp;amp;&amp;amp; echo &quot;$d&quot; &amp;amp;&amp;amp; cloc --vcs git); done
./Project0/
7 text files.
       7 unique files.
       1 file ignored.

github.com/AlDanial/cloc v 1.71  T=0.02 s (390.2 files/s, 25687.6 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
D                                4             61             32            251
Markdown                         1              9              0             38
make                             1              0              0              4
-------------------------------------------------------------------------------
SUM:                             6             70             32            293
-------------------------------------------------------------------------------
./Project1/
       7 text files.
       7 unique files.
       0 files ignored.

github.com/AlDanial/cloc v 1.71  T=0.02 s (293.0 files/s, 52107.1 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Go                               7            165            282            798
-------------------------------------------------------------------------------
SUM:                             7            165            282            798
-------------------------------------------------------------------------------
./Project2/
      49 text files.
      47 unique files.
      13 files ignored.

github.com/AlDanial/cloc v 1.71  T=0.10 s (399.5 files/s, 70409.4 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                          33           1226           1026           3017
C                                4            327            337            888
Markdown                         1             11              0             28
YAML                             1              0              2             12
-------------------------------------------------------------------------------
SUM:                            39           1564           1365           3945
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;each subdirectory of a particular directory (Windows/cmd.exe)&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
for /D %I in (.\*) do cd %I &amp;amp;&amp;amp; cloc --vcs git &amp;amp;&amp;amp; cd ..
&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Overview&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Overview ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;cloc counts blank lines, comment lines, and physical lines of source code in &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#Languages&quot;&gt;many programming languages&lt;/a&gt;. Given two versions of a code base, cloc can compute differences in blank, comment, and source lines. It is written entirely in Perl with no dependencies outside the standard distribution of Perl v5.6 and higher (code from some external modules is &lt;a href=&quot;https://github.com/AlDanial/cloc#regexp_common&quot;&gt;embedded within cloc&lt;/a&gt;) and so is quite portable. cloc is known to run on many flavors of Linux, FreeBSD, NetBSD, OpenBSD, macOS, AIX, HP-UX, Solaris, IRIX, z/OS, and Windows. (To run the Perl source version of cloc on Windows one needs &lt;a href=&quot;http://www.activestate.com/activeperl&quot;&gt;ActiveState Perl&lt;/a&gt; 5.6.1 or higher, &lt;a href=&quot;http://strawberryperl.com/&quot;&gt;Strawberry Perl&lt;/a&gt;, Windows Subsystem for Linux, &lt;a href=&quot;http://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt;, &lt;a href=&quot;http://mobaxterm.mobatek.net/&quot;&gt;MobaXTerm&lt;/a&gt; with the Perl plug-in installed, or a mingw environment and terminal such as provided by &lt;a href=&quot;https://gitforwindows.org/&quot;&gt;Git for Windows&lt;/a&gt;. Alternatively one can use the Windows binary of cloc generated with &lt;a href=&quot;http://search.cpan.org/~rschupp/PAR-Packer-1.019/lib/pp.pm&quot;&gt;PAR::Packer&lt;/a&gt; to run on Windows computers that have neither Perl nor Cygwin.)&lt;/p&gt; 
&lt;p&gt;In addition to counting code in individual text files, directories, and git repositories, cloc can also count code in archive files such as &lt;code&gt;.tar&lt;/code&gt; (including compressed versions), &lt;code&gt;.zip&lt;/code&gt;, Python wheel &lt;code&gt;.whl&lt;/code&gt;, Jupyter notebook &lt;code&gt;.ipynb&lt;/code&gt;, source RPMs &lt;code&gt;.rpm&lt;/code&gt; or &lt;code&gt;.src&lt;/code&gt; (requires &lt;code&gt;rpm2cpio&lt;/code&gt;), and Debian &lt;code&gt;.deb&lt;/code&gt; files (requires &lt;code&gt;dpkg-deb&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;cloc contains code from David Wheeler&#39;s &lt;a href=&quot;http://www.dwheeler.com/sloccount/&quot;&gt;SLOCCount&lt;/a&gt;, Damian Conway and Abigail&#39;s Perl module &lt;a href=&quot;http://search.cpan.org/%7Eabigail/Regexp-Common-2.120/lib/Regexp/Common.pm&quot;&gt;Regexp::Common&lt;/a&gt;, Sean M. Burke&#39;s Perl module &lt;a href=&quot;http://search.cpan.org/%7Esburke/Win32-Autoglob-1.01/Autoglob.pm&quot;&gt;Win32::Autoglob&lt;/a&gt;, and Tye McQueen&#39;s Perl module &lt;a href=&quot;http://search.cpan.org/%7Etyemq/Algorithm-Diff-1.1902/lib/Algorithm/Diff.pm&quot;&gt;Algorithm::Diff&lt;/a&gt;. Language scale factors were derived from Mayes Consulting, LLC web site &lt;a href=&quot;http://softwareestimator.com/IndustryData2.htm&quot;&gt;http://softwareestimator.com/IndustryData2.htm&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;New releases nominally appear every six months. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a name=&quot;Docker&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Run via docker&lt;/h2&gt; 
&lt;p&gt;These docker commands count lines of code in and below the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;docker run --rm -v $PWD:/tmp aldanial/cloc .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run via docker on git-bash&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;docker run --rm -v &quot;/$(pwd -W)&quot;:/tmp aldanial/cloc .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install via package manager&lt;/h2&gt; 
&lt;p&gt;Depending your operating system, one of these installation methods may work for you (all but the last two entries for Windows require a Perl interpreter):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install -g cloc              # https://www.npmjs.com/package/cloc
sudo apt install cloc            # Debian, Ubuntu
sudo yum install cloc            # Red Hat, Fedora
sudo dnf install cloc            # Fedora 22 or later
sudo pacman -S cloc              # Arch
yay -S cloc-git                  # Arch AUR (latest git version)
sudo emerge -av dev-util/cloc    # Gentoo https://packages.gentoo.org/packages/dev-util/cloc
sudo apk add cloc                # Alpine Linux
doas pkg_add cloc                # OpenBSD
sudo pkg install cloc            # FreeBSD
sudo port install cloc           # macOS with MacPorts
brew install cloc                # macOS with Homebrew
winget install AlDanial.Cloc     # Windows with winget (might not work, ref https://github.com/AlDanial/cloc/issues/849)
choco install cloc               # Windows with Chocolatey
scoop install cloc               # Windows with Scoop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I don&#39;t control any of these packages. If you encounter a bug in cloc using one of the above packages, try with cloc pulled from the latest stable release here on GitHub (link follows below) before submitting a problem report. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Stable&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Stable release&lt;/h2&gt; 
&lt;p&gt;Download the latest released cloc source file, for example &lt;code&gt;cloc-2.04.pl&lt;/code&gt;, or the Windows executable &lt;code&gt;cloc-2.04.exe&lt;/code&gt; from &lt;a href=&quot;https://github.com/AlDanial/cloc/releases/latest&quot;&gt;https://github.com/AlDanial/cloc/releases/latest&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a name=&quot;Dev&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development version&lt;/h2&gt; 
&lt;p&gt;Download the cloc source code at &lt;a href=&quot;https://github.com/AlDanial/cloc/raw/master/cloc&quot;&gt;https://github.com/AlDanial/cloc/raw/master/cloc&lt;/a&gt; and save it as the file &lt;code&gt;cloc&lt;/code&gt; (or &lt;code&gt;cloc.pl&lt;/code&gt;, or whatever executable name you wish). The next step depends on the operating system you&#39;re using.&lt;/p&gt; 
&lt;h3&gt;On Unix-like systems, including macOS&lt;/h3&gt; 
&lt;p&gt;In a terminal, go to the download directory and make the cloc file executable, then give it a test run. For example&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;» cd ~/Downloads
» chmod +x cloc
» ./cloc --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For future use, move the file to a more convenient directory in your &lt;code&gt;PATH&lt;/code&gt; such as &lt;code&gt;/usr/local/bin&lt;/code&gt; or &lt;code&gt;~/bin&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;On Windows&lt;/h3&gt; 
&lt;p&gt;You&#39;ll need a Perl interpreter such as &lt;a href=&quot;http://strawberryperl.com/&quot;&gt;Strawberry Perl&lt;/a&gt; installed to run the source version of cloc. After downloading the cloc source file, open a command prompt or PowerShell window, navigate to the download directory (&lt;code&gt;C:\TEMP&lt;/code&gt; in the example below), then test cloc with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;cd C:\TEMP&amp;gt;
C:TEMP\&amp;gt; perl cloc --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;License ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;cloc is licensed under the &lt;a href=&quot;http://www.gnu.org/licenses/gpl-2.0.html&quot;&gt;GNU General Public License, v 2&lt;/a&gt;, excluding portions which are copied from other sources. Code copied from the Regexp::Common, Win32::Autoglob, and Algorithm::Diff Perl modules is subject to the &lt;a href=&quot;https://opensource.org/license/artistic-2-0&quot;&gt;Artistic License&lt;/a&gt;. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;why_use&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Why Use cloc? ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;cloc has many features that make it easy to use, thorough, extensible, and portable:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Exists as a single, self-contained file that requires minimal installation effort---just download the file and run it.&lt;/li&gt; 
 &lt;li&gt;Can read language comment definitions from a file and thus potentially work with computer languages that do not yet exist.&lt;/li&gt; 
 &lt;li&gt;Allows results from multiple runs to be summed together by language and by project.&lt;/li&gt; 
 &lt;li&gt;Can produce results in a variety of formats: plain text, Markdown, SQL, JSON, XML, YAML, comma separated values.&lt;/li&gt; 
 &lt;li&gt;Can count code within compressed archives (tar balls, Zip files, Java .ear files).&lt;/li&gt; 
 &lt;li&gt;Has numerous troubleshooting options.&lt;/li&gt; 
 &lt;li&gt;Handles file and directory names with spaces and other unusual characters.&lt;/li&gt; 
 &lt;li&gt;Has no dependencies outside the standard Perl distribution.&lt;/li&gt; 
 &lt;li&gt;Runs on Linux, FreeBSD, NetBSD, OpenBSD, macOS, AIX, HP-UX, Solaris, IRIX, and z/OS systems that have Perl 5.6 or higher. The source version runs on Windows with either ActiveState Perl, Strawberry Perl, Cygwin, or MobaXTerm+Perl plugin. Alternatively on Windows one can run the Windows binary which has no dependencies. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;a name=&quot;Other_Counters&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Other Counters ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;If cloc does not suit your needs here are other freely available counters to consider:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cgag/loc/&quot;&gt;loc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JoaoDanielRufino/gcloc&quot;&gt;gcloc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hhatto/gocloc/&quot;&gt;gocloc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/blackducksoftware/ohcount/&quot;&gt;Ohcount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/boyter/scc/&quot;&gt;scc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://code.google.com/archive/p/sclc/&quot;&gt;sclc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.dwheeler.com/sloccount/&quot;&gt;SLOCCount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.sonarsource.org/&quot;&gt;Sonar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Aaronepower/tokei/&quot;&gt;tokei&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://csse.usc.edu/ucc_new/wordpress/&quot;&gt;Unified Code Count&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other references:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;QSM&#39;s &lt;a href=&quot;http://www.qsm.com/CodeCounters.html&quot;&gt;directory&lt;/a&gt; of code counting tools.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Source_lines_of_code&quot;&gt;Wikipedia entry&lt;/a&gt; for source code line counts. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;&lt;a name=&quot;regexp_common&quot;&gt;Regexp::Common, Digest::MD5, Win32::Autoglob, Algorithm::Diff&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Although cloc does not need Perl modules outside those found in the standard distribution, cloc does rely on a few external modules. Code from three of these external modules--Regexp::Common, Win32::Autoglob, and Algorithm::Diff--is embedded within cloc. A fourth module, Digest::MD5, is used only if it is available. If cloc finds Regexp::Common or Algorithm::Diff installed locally it will use those installation. If it doesn&#39;t, cloc will install the parts of Regexp::Common and/or Algorithm:Diff it needs to temporary directories that are created at the start of a cloc run then removed when the run is complete. The necessary code from Regexp::Common v2.120 and Algorithm::Diff v1.1902 are embedded within the cloc source code (see subroutines &lt;code&gt;Install_Regexp_Common()&lt;/code&gt; and &lt;code&gt;Install_Algorithm_Diff()&lt;/code&gt; ). Only three lines are needed from Win32::Autoglob and these are included directly in cloc.&lt;/p&gt; 
&lt;p&gt;Additionally, cloc will use Digest::MD5 to validate uniqueness among equally-sized input files if Digest::MD5 is installed locally.&lt;/p&gt; 
&lt;p&gt;A parallel processing option, &lt;tt&gt;--processes=&lt;i&gt;N&lt;/i&gt;&lt;/tt&gt;, was introduced with cloc version 1.76 to enable faster runs on multi-core machines. However, to use it, one must have the module Parallel::ForkManager installed. This module does not work reliably on Windows so parallel processing will only work on Unix-like operating systems.&lt;/p&gt; 
&lt;p&gt;The Windows binary is built on a computer that has both Regexp::Common and Digest::MD5 installed locally. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;building_exe&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Building a Windows Executable ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;h4&gt;Create your own executable&lt;/h4&gt; 
&lt;p&gt;The most robust option for creating a Windows executable of cloc is to use &lt;a href=&quot;http://www.activestate.com/perl-dev-kit&quot;&gt;ActiveState&#39;s Perl Development Kit&lt;/a&gt;. It includes a utility, &lt;code&gt;perlapp&lt;/code&gt;, which can build stand-alone Windows, Mac, and Linux binaries of Perl source code.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.indigostar.com/perl2exe/&quot;&gt;perl2exe&lt;/a&gt; will also do the trick. If you do have &lt;code&gt;perl2exe&lt;/code&gt;, modify lines 84-87 in the cloc source code for a minor code modification that is necessary to make a cloc Windows executable.&lt;/p&gt; 
&lt;p&gt;Otherwise, to build a Windows executable with &lt;code&gt;pp&lt;/code&gt; from &lt;code&gt;PAR::Packer&lt;/code&gt;, first install a Windows-based Perl distribution (for example Strawberry Perl or ActivePerl) following their instructions. Next, open a command prompt, aka a DOS window and install the PAR::Packer module. Finally, invoke the newly installed &lt;code&gt;pp&lt;/code&gt; command with the cloc source code to create an &lt;code&gt;.exe&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;
C:&amp;gt; cpan -i Digest::MD5
C:&amp;gt; cpan -i Regexp::Common
C:&amp;gt; cpan -i Algorithm::Diff
C:&amp;gt; cpan -i PAR::Packer
C:&amp;gt; cpan -i Win32::LongPath
C:&amp;gt; pp -M Win32::LongPath -M Encode::Unicode -M Digest::MD5 -c -x -o cloc-2.04.exe cloc-2.04.pl
&lt;/pre&gt; 
&lt;p&gt;A variation on the instructions above is if you installed the portable version of Strawberry Perl, you will need to run &lt;code&gt;portableshell.bat&lt;/code&gt; first to properly set up your environment.&lt;/p&gt; 
&lt;p&gt;The Windows executable in the Releases section, &lt;tt&gt;cloc-2.04.exe&lt;/tt&gt;, was built on a 64 bit Windows 10 computer using &lt;a href=&quot;http://strawberryperl.com/&quot;&gt;Strawberry Perl&lt;/a&gt; 5.30.2 and &lt;a href=&quot;http://search.cpan.org/~rschupp/PAR-Packer-1.050/lib/pp.pm&quot;&gt;PAR::Packer&lt;/a&gt; to build the &lt;code&gt;.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Is the Windows executable safe to run? Does it have malware?&lt;/h4&gt; 
&lt;p&gt;Ideally, no one would need the Windows executable because they have a Perl interpreter installed on their machines and can run the cloc source file. On centrally-managed corporate Windows machines, however, this this may be difficult or impossible.&lt;/p&gt; 
&lt;p&gt;The Windows executable distributed with cloc is provided as a best-effort of a virus and malware-free &lt;code&gt;.exe&lt;/code&gt;. You are encouraged to run your own virus scanners against the executable and also check sites such &lt;a href=&quot;https://www.virustotal.com/&quot;&gt;https://www.virustotal.com/&lt;/a&gt; . The entries for recent versions are:&lt;/p&gt; 
&lt;p&gt;cloc-2.04.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/89cda0038bf4e13c6c13ebc1e60bec4dfad362e69ac8a5b8e2d5ebe3020359e1&quot;&gt;https://www.virustotal.com/gui/file/89cda0038bf4e13c6c13ebc1e60bec4dfad362e69ac8a5b8e2d5ebe3020359e1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-2.02-winget.exe: (includes &lt;a href=&quot;https://github.com/AlDanial/cloc/pull/850&quot;&gt;PR 850&lt;/a&gt; to allow &lt;a href=&quot;https://github.com/AlDanial/cloc/issues/849&quot;&gt;running from a symlink on Windows&lt;/a&gt;) &lt;a href=&quot;https://www.virustotal.com/gui/file/be033061e091fea48a5bc9e8964cee0416ddd5b34bd5226a1c9aa4b30bdba66a?nocache=1&quot;&gt;https://www.virustotal.com/gui/file/be033061e091fea48a5bc9e8964cee0416ddd5b34bd5226a1c9aa4b30bdba66a?nocache=1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-2.02.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/369ed76125f7399cd582d169adf39a2e08ae5066031fea0cc8b2836ea50e7ce2?nocache=1&quot;&gt;https://www.virustotal.com/gui/file/369ed76125f7399cd582d169adf39a2e08ae5066031fea0cc8b2836ea50e7ce2?nocache=1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-2.00.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/7a234ef0cb495de1b5776acf88c5554e2bab1fb02725a5fb85756a6db3121c1f&quot;&gt;https://www.virustotal.com/gui/file/7a234ef0cb495de1b5776acf88c5554e2bab1fb02725a5fb85756a6db3121c1f&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.98.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/88615d193ec8c06f7ceec3cc1d661088af997798d87ddff331d9e9f9128a6782?nocache=1&quot;&gt;https://www.virustotal.com/gui/file/88615d193ec8c06f7ceec3cc1d661088af997798d87ddff331d9e9f9128a6782?nocache=1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.96.1.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/00b1c9dbbfb920dabd374418e1b86d2c24b8cd2b8705aeb956dee910d0d75d45?nocache=1&quot;&gt;https://www.virustotal.com/gui/file/00b1c9dbbfb920dabd374418e1b86d2c24b8cd2b8705aeb956dee910d0d75d45?nocache=1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.96.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/54bf5f46fbaba7949c4eb2d4837b03c774c0ba587448a5bad9b8efc0222b1583?nocache=1&quot;&gt;https://www.virustotal.com/gui/file/54bf5f46fbaba7949c4eb2d4837b03c774c0ba587448a5bad9b8efc0222b1583?nocache=1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.94.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/b48a6002fb75fa66ec5d0c05a5c4d51f2ad22b5b025b7eb4e3945d18419c0952?nocache=1&quot;&gt;https://www.virustotal.com/gui/file/b48a6002fb75fa66ec5d0c05a5c4d51f2ad22b5b025b7eb4e3945d18419c0952?nocache=1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.92.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/2668fcf8609c431e8934fe9e1866bc620c58d198c4eb262f1d3ef31ef4a690f7&quot;&gt;https://www.virustotal.com/gui/file/2668fcf8609c431e8934fe9e1866bc620c58d198c4eb262f1d3ef31ef4a690f7&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.90.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/d655caae55486f9bac39f7e3c7b7553bcfcfe2b88914c79bfc328055f22b8a37/detection&quot;&gt;https://www.virustotal.com/gui/file/d655caae55486f9bac39f7e3c7b7553bcfcfe2b88914c79bfc328055f22b8a37/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.88.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/97d5d2631d1cccdbfd99267ab8a4cf5968816bbe52c0f9324e72e768857f642d/detection&quot;&gt;https://www.virustotal.com/gui/file/97d5d2631d1cccdbfd99267ab8a4cf5968816bbe52c0f9324e72e768857f642d/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.86.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/1b2e189df1834411b34534db446330d1c379b4bc008af3042ee9ade818c6a1c8/detection&quot;&gt;https://www.virustotal.com/gui/file/1b2e189df1834411b34534db446330d1c379b4bc008af3042ee9ade818c6a1c8/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.84.exe: &lt;a href=&quot;https://www.virustotal.com/gui/file/e73d490c1e4ae2f50ee174005614029b4fa2610dcb76988714839d7be68479af/detection&quot;&gt;https://www.virustotal.com/gui/file/e73d490c1e4ae2f50ee174005614029b4fa2610dcb76988714839d7be68479af/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.82.exe: &lt;a href=&quot;https://www.virustotal.com/#/file/2e5fb443fdefd776d7b6b136a25e5ee2048991e735042897dbd0bf92efb16563/detection&quot;&gt;https://www.virustotal.com/#/file/2e5fb443fdefd776d7b6b136a25e5ee2048991e735042897dbd0bf92efb16563/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.80.exe: &lt;a href=&quot;https://www.virustotal.com/#/file/9e547b01c946aa818ffad43b9ebaf05d3da08ed6ca876ef2b6847be3bf1cf8be/detection&quot;&gt;https://www.virustotal.com/#/file/9e547b01c946aa818ffad43b9ebaf05d3da08ed6ca876ef2b6847be3bf1cf8be/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.78.exe: &lt;a href=&quot;https://www.virustotal.com/#/file/256ade3df82fa92febf2553853ed1106d96c604794606e86efd00d55664dd44f/detection&quot;&gt;https://www.virustotal.com/#/file/256ade3df82fa92febf2553853ed1106d96c604794606e86efd00d55664dd44f/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.76.exe: &lt;a href=&quot;https://www.virustotal.com/#/url/c1b9b9fe909f91429f95d41e9a9928ab7c58b21351b3acd4249def2a61acd39d/detection&quot;&gt;https://www.virustotal.com/#/url/c1b9b9fe909f91429f95d41e9a9928ab7c58b21351b3acd4249def2a61acd39d/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc-1.74_x86.exe: &lt;a href=&quot;https://www.virustotal.com/#/file/b73dece71f6d3199d90d55db53a588e1393c8dbf84231a7e1be2ce3c5a0ec75b/detection&quot;&gt;https://www.virustotal.com/#/file/b73dece71f6d3199d90d55db53a588e1393c8dbf84231a7e1be2ce3c5a0ec75b/detection&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc 1.72 exe: &lt;a href=&quot;https://www.virustotal.com/en/url/8fd2af5cd972f648d7a2d7917bc202492012484c3a6f0b48c8fd60a8d395c98c/analysis/&quot;&gt;https://www.virustotal.com/en/url/8fd2af5cd972f648d7a2d7917bc202492012484c3a6f0b48c8fd60a8d395c98c/analysis/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc 1.70 exe: &lt;a href=&quot;https://www.virustotal.com/en/url/63edef209099a93aa0be1a220dc7c4c7ed045064d801e6d5daa84ee624fc0b4a/analysis/&quot;&gt;https://www.virustotal.com/en/url/63edef209099a93aa0be1a220dc7c4c7ed045064d801e6d5daa84ee624fc0b4a/analysis/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc 1.68 exe: &lt;a href=&quot;https://www.virustotal.com/en/file/c484fc58615fc3b0d5569b9063ec1532980281c3155e4a19099b11ef1c24443b/analysis/&quot;&gt;https://www.virustotal.com/en/file/c484fc58615fc3b0d5569b9063ec1532980281c3155e4a19099b11ef1c24443b/analysis/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;cloc 1.66 exe: &lt;a href=&quot;https://www.virustotal.com/en/file/54d6662e59b04be793dd10fa5e5edf7747cf0c0cc32f71eb67a3cf8e7a171d81/analysis/1453601367/&quot;&gt;https://www.virustotal.com/en/file/54d6662e59b04be793dd10fa5e5edf7747cf0c0cc32f71eb67a3cf8e7a171d81/analysis/1453601367/&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Why is the Windows executable so large?&lt;/h4&gt; 
&lt;p&gt;Windows executables of cloc versions 1.60 and earlier, created with perl2exe as noted above, are about 1.6 MB, while versions 1.62 and 1.54, created with &lt;code&gt;PAR::Packer&lt;/code&gt;, are 11 MB. Version 1.66, built with a newer version of &lt;code&gt;PAR::Packer&lt;/code&gt;, is about 5.5 MB. Why are the &lt;code&gt;PAR::Packer&lt;/code&gt;, executables so much larger than those built with perl2exe? My theory is that perl2exe uses smarter tree pruning logic than &lt;code&gt;PAR::Packer&lt;/code&gt;, but that&#39;s pure speculation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Basic_Use&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Basic Use ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;cloc is a command line program that takes file, directory, and/or archive names as inputs. Here&#39;s an example of running cloc against the Perl v5.22.0 source distribution:&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; cloc perl-5.22.0.tar.gz
    5605 text files.
    5386 unique files.
    2176 files ignored.

https://github.com/AlDanial/cloc v 1.65  T=25.49 s (134.7 files/s, 51980.3 lines/s)
-----------------------------------------------------------------------------------
Language                         files          blank        comment           code
-----------------------------------------------------------------------------------
Perl                              2892         136396         184362         536445
C                                  130          24676          33684         155648
C/C++ Header                       148           9766          16569         147858
Bourne Shell                       112           4044           6796          42668
Pascal                               8            458           1603           8592
XML                                 33            142              0           2410
YAML                                49             20             15           2078
C++                                 10            313            277           2033
make                                 4            426            488           1986
Prolog                              12            438              2           1146
JSON                                14              1              0           1037
yacc                                 1             85             76            998
Windows Message File                 1            102             11            489
DOS Batch                           14             92             41            389
Windows Resource File                3             10              0             85
D                                    1              5              7              8
Lisp                                 2              0              3              4
-----------------------------------------------------------------------------------
SUM:                              3434         176974         243934         903874
-----------------------------------------------------------------------------------

&lt;/pre&gt; 
&lt;p&gt;To run cloc on Windows computers, open up a command (aka DOS) window and invoke cloc.exe from the command line there. Alternatively, try ClocViewer, the GUI wrapper around cloc found at &lt;a href=&quot;https://github.com/Roemer/ClocViewer&quot;&gt;https://github.com/Roemer/ClocViewer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://github.com/jmensch1/codeflower&quot;&gt;https://github.com/jmensch1/codeflower&lt;/a&gt; for a graphical rendering of cloc results. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Options&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Options ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;pre&gt;
prompt&amp;gt; cloc --help

Usage: cloc [options] &amp;lt;file(s)/dir(s)/git hash(es)&amp;gt; | &amp;lt;set 1&amp;gt; &amp;lt;set 2&amp;gt; | &amp;lt;report files&amp;gt;

 Count, or compute differences of, physical lines of source code in the
 given files (may be archives such as compressed tarballs or zip files,
 or git commit hashes or branch names) and/or recursively below the
 given directories.

 Input Options
   --extract-with=&amp;lt;cmd&amp;gt;      This option is only needed if cloc is unable
                             to figure out how to extract the contents of
                             the input file(s) by itself.
                             Use &amp;lt;cmd&amp;gt; to extract binary archive files (e.g.:
                             .tar.gz, .zip, .Z).  Use the literal &#39;&amp;gt;FILE&amp;lt;&#39; as
                             a stand-in for the actual file(s) to be
                             extracted.  For example, to count lines of code
                             in the input files
                                gcc-4.2.tar.gz  perl-5.8.8.tar.gz
                             on Unix use
                               --extract-with=&#39;gzip -dc &amp;gt;FILE&amp;lt; | tar xf -&#39;
                             or, if you have GNU tar,
                               --extract-with=&#39;tar zxf &amp;gt;FILE&amp;lt;&#39;
                             and on Windows use, for example:
                               --extract-with=&quot;\&quot;c:\Program Files\WinZip\WinZip32.exe\&quot; -e -o &amp;gt;FILE&amp;lt; .&quot;
                             (if WinZip is installed there).
   --list-file=&amp;lt;file&amp;gt;        Take the list of file and/or directory names to
                             process from &amp;lt;file&amp;gt;, which has one file/directory
                             name per line.  Only exact matches are counted;
                             relative path names will be resolved starting from
                             the directory where cloc is invoked.  Set &amp;lt;file&amp;gt;
                             to - to read file names from a STDIN pipe.
                             See also --exclude-list-file.
   --diff-list-file=&amp;lt;file&amp;gt;   Take the pairs of file names to be diff&#39;ed from
                             &amp;lt;file&amp;gt;, whose format matches the output of
                             --diff-alignment.  (Run with that option to
                             see a sample.)  The language identifier at the
                             end of each line is ignored.  This enables --diff
                             mode and bypasses file pair alignment logic.
   --vcs=&amp;lt;VCS&amp;gt;               Invoke a system call to &amp;lt;VCS&amp;gt; to obtain a list of
                             files to work on.  If &amp;lt;VCS&amp;gt; is &#39;git&#39;, then will
                             invoke &#39;git ls-files&#39; to get a file list and
                             &#39;git submodule status&#39; to get a list of submodules
                             whose contents will be ignored.  See also --git
                             which accepts git commit hashes and branch names.
                             If &amp;lt;VCS&amp;gt; is &#39;svn&#39; then will invoke &#39;svn list -R&#39;.
                             The primary benefit is that cloc will then skip
                             files explicitly excluded by the versioning tool
                             in question, ie, those in .gitignore or have the
                             svn:ignore property.
                             Alternatively &amp;lt;VCS&amp;gt; may be any system command
                             that generates a list of files.
                             Note:  cloc must be in a directory which can read
                             the files as they are returned by &amp;lt;VCS&amp;gt;.  cloc will
                             not download files from remote repositories.
                             &#39;svn list -R&#39; may refer to a remote repository
                             to obtain file names (and therefore may require
                             authentication to the remote repository), but
                             the files themselves must be local.
                             Setting &amp;lt;VCS&amp;gt; to &#39;auto&#39; selects between &#39;git&#39;
                             and &#39;svn&#39; (or neither) depending on the presence
                             of a .git or .svn subdirectory below the directory
                             where cloc is invoked.
   --unicode                 Check binary files to see if they contain Unicode
                             expanded ASCII text.  This causes performance to
                             drop noticeably.

 Processing Options
   --autoconf                Count .in files (as processed by GNU autoconf) of
                             recognized languages.  See also --no-autogen.
   --by-file                 Report results for every source file encountered.
   --by-file-by-lang         Report results for every source file encountered
                             in addition to reporting by language.
   --config &amp;lt;file&amp;gt;           Read command line switches from &amp;lt;file&amp;gt; instead of
                             the default location of /home/al/.config/cloc/options.txt.
                             The file should contain one switch, along with
                             arguments (if any), per line.  Blank lines and lines
                             beginning with &#39;#&#39; are skipped.  Options given on
                             the command line take priority over entries read from
                             the file.
   --count-and-diff &amp;lt;set1&amp;gt; &amp;lt;set2&amp;gt;
                             First perform direct code counts of source file(s)
                             of &amp;lt;set1&amp;gt; and &amp;lt;set2&amp;gt; separately, then perform a diff
                             of these.  Inputs may be pairs of files, directories,
                             or archives.  If --out or --report-file is given,
                             three output files will be created, one for each
                             of the two counts and one for the diff.  See also
                             --diff, --diff-alignment, --diff-timeout,
                             --ignore-case, --ignore-whitespace.
   --diff &amp;lt;set1&amp;gt; &amp;lt;set2&amp;gt;      Compute differences in code and comments between
                             source file(s) of &amp;lt;set1&amp;gt; and &amp;lt;set2&amp;gt;.  The inputs
                             may be any mix of files, directories, archives,
                             or git commit hashes.  Use --diff-alignment to
                             generate a list showing which file pairs where
                             compared.  When comparing git branches, only files
                             which have changed in either commit are compared.
                             See also --git, --count-and-diff, --diff-alignment,
                             --diff-list-file, --diff-timeout, --ignore-case,
                             --ignore-whitespace.
   --diff-timeout &amp;lt;N&amp;gt;        Ignore files which take more than &amp;lt;N&amp;gt; seconds
                             to process.  Default is 10 seconds.  Setting &amp;lt;N&amp;gt;
                             to 0 allows unlimited time.  (Large files with many
                             repeated lines can cause Algorithm::Diff::sdiff()
                             to take hours.) See also --timeout.
   --docstring-as-code       cloc considers docstrings to be comments, but this is
                             not always correct as docstrings represent regular
                             strings when they appear on the right hand side of an
                             assignment or as function arguments.  This switch
                             forces docstrings to be counted as code.
   --follow-links            [Unix only] Follow symbolic links to directories
                             (sym links to files are always followed).
                             See also --stat.
   --force-lang=&amp;lt;lang&amp;gt;[,&amp;lt;ext&amp;gt;]
                             Process all files that have a &amp;lt;ext&amp;gt; extension
                             with the counter for language &amp;lt;lang&amp;gt;.  For
                             example, to count all .f files with the
                             Fortran 90 counter (which expects files to
                             end with .f90) instead of the default Fortran 77
                             counter, use
                               --force-lang=&quot;Fortran 90,f&quot;
                             If &amp;lt;ext&amp;gt; is omitted, every file will be counted
                             with the &amp;lt;lang&amp;gt; counter.  This option can be
                             specified multiple times (but that is only
                             useful when &amp;lt;ext&amp;gt; is given each time).
                             See also --script-lang, --lang-no-ext.
   --force-lang-def=&amp;lt;file&amp;gt;   Load language processing filters from &amp;lt;file&amp;gt;,
                             then use these filters instead of the built-in
                             filters.  Note:  languages which map to the same
                             file extension (for example:
                             MATLAB/Mathematica/Objective-C/MUMPS/Mercury;
                             Pascal/PHP; Lisp/OpenCL; Lisp/Julia; Perl/Prolog)
                             will be ignored as these require additional
                             processing that is not expressed in language
                             definition files.  Use --read-lang-def to define
                             new language filters without replacing built-in
                             filters (see also --write-lang-def,
                             --write-lang-def-incl-dup).
   --git                     Forces the inputs to be interpreted as git targets
                             (commit hashes, branch names, et cetera) if these
                             are not first identified as file or directory
                             names.  This option overrides the --vcs=git logic
                             if this is given; in other words, --git gets its
                             list of files to work on directly from git using
                             the hash or branch name rather than from
                             &#39;git ls-files&#39;.  This option can be used with
                             --diff to perform line count diffs between git
                             commits, or between a git commit and a file,
                             directory, or archive.  Use -v/--verbose to see
                             the git system commands cloc issues.
   --git-diff-rel            Same as --git --diff, or just --diff if the inputs
                             are recognized as git targets.  Only files which
                             have changed in either commit are compared.
   --git-diff-all            Git diff strategy #2:  compare all files in the
                             repository between the two commits.
   --ignore-whitespace       Ignore horizontal white space when comparing files
                             with --diff.  See also --ignore-case.
   --ignore-case             Ignore changes in case within file contents;
                             consider upper- and lowercase letters equivalent
                             when comparing files with --diff.  See also
                             --ignore-whitespace.
   --ignore-case-ext         Ignore case of file name extensions.  This will
                             cause problems counting some languages
                             (specifically, .c and .C are associated with C and
                             C++; this switch would count .C files as C rather
                             than C++ on *nix operating systems).  File name
                             case insensitivity is always true on Windows.
   --lang-no-ext=&amp;lt;lang&amp;gt;      Count files without extensions using the &amp;lt;lang&amp;gt;
                             counter.  This option overrides internal logic
                             for files without extensions (where such files
                             are checked against known scripting languages
                             by examining the first line for #!).  See also
                             --force-lang, --script-lang.
   --max-file-size=&amp;lt;MB&amp;gt;      Skip files larger than &amp;lt;MB&amp;gt; megabytes when
                             traversing directories.  By default, &amp;lt;MB&amp;gt;=100.
                             cloc&#39;s memory requirement is roughly twenty times
                             larger than the largest file so running with
                             files larger than 100 MB on a computer with less
                             than 2 GB of memory will cause problems.
                             Note:  this check does not apply to files
                             explicitly passed as command line arguments.
   --no-autogen[=list]       Ignore files generated by code-production systems
                             such as GNU autoconf.  To see a list of these files
                             (then exit), run with --no-autogen list
                             See also --autoconf.
   --original-dir            [Only effective in combination with
                             --strip-comments]  Write the stripped files
                             to the same directory as the original files.
   --read-binary-files       Process binary files in addition to text files.
                             This is usually a bad idea and should only be
                             attempted with text files that have embedded
                             binary data.
   --read-lang-def=&amp;lt;file&amp;gt;    Load new language processing filters from &amp;lt;file&amp;gt;
                             and merge them with those already known to cloc.
                             If &amp;lt;file&amp;gt; defines a language cloc already knows
                             about, cloc&#39;s definition will take precedence.
                             Use --force-lang-def to over-ride cloc&#39;s
                             definitions (see also --write-lang-def,
                             --write-lang-def-incl-dup).
   --script-lang=&amp;lt;lang&amp;gt;,&amp;lt;s&amp;gt;  Process all files that invoke &amp;lt;s&amp;gt; as a #!
                             scripting language with the counter for language
                             &amp;lt;lang&amp;gt;.  For example, files that begin with
                                #!/usr/local/bin/perl5.8.8
                             will be counted with the Perl counter by using
                                --script-lang=Perl,perl5.8.8
                             The language name is case insensitive but the
                             name of the script language executable, &amp;lt;s&amp;gt;,
                             must have the right case.  This option can be
                             specified multiple times.  See also --force-lang,
                             --lang-no-ext.
   --sdir=&amp;lt;dir&amp;gt;              Use &amp;lt;dir&amp;gt; as the scratch directory instead of
                             letting File::Temp chose the location.  Files
                             written to this location are not removed at
                             the end of the run (as they are with File::Temp).
   --skip-uniqueness         Skip the file uniqueness check.  This will give
                             a performance boost at the expense of counting
                             files with identical contents multiple times
                             (if such duplicates exist).
   --stat                    Some file systems (AFS, CD-ROM, FAT, HPFS, SMB)
                             do not have directory &#39;nlink&#39; counts that match
                             the number of its subdirectories.  Consequently
                             cloc may undercount or completely skip the
                             contents of such file systems.  This switch forces
                             File::Find to stat directories to obtain the
                             correct count.  File search speed will decrease.
                             See also --follow-links.
   --stdin-name=&amp;lt;file&amp;gt;       Give a file name to use to determine the language
                             for standard input.  (Use - as the input name to
                             receive source code via STDIN.)
   --strip-comments=&amp;lt;ext&amp;gt;    For each file processed, write to the current
                             directory a version of the file which has blank
                             and commented lines removed (in-line comments
                             persist).  The name of each stripped file is the
                             original file name with .&amp;lt;ext&amp;gt; appended to it.
                             It is written to the current directory unless
                             --original-dir is on.
   --strip-str-comments      Replace comment markers embedded in strings with
                             &#39;xx&#39;.  This attempts to work around a limitation
                             in Regexp::Common::Comment where comment markers
                             embedded in strings are seen as actual comment
                             markers and not strings, often resulting in a
                             &#39;Complex regular subexpression recursion limit&#39;
                             warning and incorrect counts.  There are two
                             disadvantages to using this switch:  1/code count
                             performance drops, and 2/code generated with
                             --strip-comments will contain different strings
                             where ever embedded comments are found.
   --sum-reports             Input arguments are report files previously
                             created with the --report-file option in plain
                             format (eg. not JSON, YAML, XML, or SQL).
                             Makes a cumulative set of results containing the
                             sum of data from the individual report files.
   --timeout &amp;lt;N&amp;gt;             Ignore files which take more than &amp;lt;N&amp;gt; seconds
                             to process at any of the language&#39;s filter stages.
                             The default maximum number of seconds spent on a
                             filter stage is the number of lines in the file
                             divided by one thousand.  Setting &amp;lt;N&amp;gt; to 0 allows
                             unlimited time.  See also --diff-timeout.
   --processes=NUM           [Available only on systems with a recent version
                             of the Parallel::ForkManager module.  Not
                             available on Windows.] Sets the maximum number of
                             cores that cloc uses.  The default value of 0
                             disables multiprocessing.
   --unix                    Override the operating system autodetection
                             logic and run in UNIX mode.  See also
                             --windows, --show-os.
   --use-sloccount           If SLOCCount is installed, use its compiled
                             executables c_count, java_count, pascal_count,
                             php_count, and xml_count instead of cloc&#39;s
                             counters.  SLOCCount&#39;s compiled counters are
                             substantially faster than cloc&#39;s and may give
                             a performance improvement when counting projects
                             with large files.  However, these cloc-specific
                             features will not be available: --diff,
                             --count-and-diff, --strip-comments, --unicode.
   --windows                 Override the operating system autodetection
                             logic and run in Microsoft Windows mode.
                             See also --unix, --show-os.

 Filter Options
   --include-content=&amp;lt;regex&amp;gt; Only count files containing text that matches the
                             given regular expression.
   --exclude-content=&amp;lt;regex&amp;gt; Exclude files containing text that matches the given
                             regular expression.
   --exclude-dir=&amp;lt;D1&amp;gt;[,D2,]  Exclude the given comma separated directories
                             D1, D2, D3, et cetera, from being scanned.  For
                             example  --exclude-dir=.cache,test  will skip
                             all files and subdirectories that have /.cache/
                             or /test/ as their parent directory.
                             Directories named .bzr, .cvs, .hg, .git, .svn,
                             and .snapshot are always excluded.
                             This option only works with individual directory
                             names so including file path separators is not
                             allowed.  Use --fullpath and --not-match-d=&amp;lt;regex&amp;gt;
                             to supply a regex matching multiple subdirectories.
   --exclude-ext=&amp;lt;ext1&amp;gt;[,&amp;lt;ext2&amp;gt;[...]]
                             Do not count files having the given file name
                             extensions.
   --exclude-lang=&amp;lt;L1&amp;gt;[,L2[...]]
                             Exclude the given comma separated languages
                             L1, L2, L3, et cetera, from being counted.
   --exclude-list-file=&amp;lt;file&amp;gt;  Ignore files and/or directories whose names
                             appear in &amp;lt;file&amp;gt;.  &amp;lt;file&amp;gt; should have one file
                             name per line.  Only exact matches are ignored;
                             relative path names will be resolved starting from
                             the directory where cloc is invoked.
                             See also --list-file.
   --fullpath                Modifies the behavior of --match-f, --not-match-f,
                             and --not-match-d to include the file&#39;s path
                             in the regex, not just the file&#39;s basename.
                             (This does not expand each file to include its
                             absolute path, instead it uses as much of
                             the path as is passed in to cloc.)
                             Note:  --match-d always looks at the full
                             path and therefore is unaffected by --fullpath.
   --include-ext=&amp;lt;ext1&amp;gt;[,ext2[...]]
                             Count only languages having the given comma
                             separated file extensions.  Use --show-ext to
                             see the recognized extensions.
   --include-lang=&amp;lt;L1&amp;gt;[,L2[...]]
                             Count only the given comma separated languages
                             L1, L2, L3, et cetera.  Use --show-lang to see
                             the list of recognized languages.
   --match-d=&amp;lt;regex&amp;gt;         Only count files in directories matching the Perl
                             regex.  For example
                               --match-d=&#39;/(src|include)/&#39;
                             only counts files in directories containing
                             /src/ or /include/.  Unlike --not-match-d,
                             --match-f, and --not-match-f, --match-d always
                             compares the fully qualified path against the
                             regex.
   --not-match-d=&amp;lt;regex&amp;gt;     Count all files except those in directories
                             matching the Perl regex.  Only the trailing
                             directory name is compared, for example, when
                             counting in /usr/local/lib, only &#39;lib&#39; is
                             compared to the regex.
                             Add --fullpath to compare parent directories to
                             the regex.
                             Do not include file path separators at the
                             beginning or end of the regex.
   --match-f=&amp;lt;regex&amp;gt;         Only count files whose basenames match the Perl
                             regex.  For example
                               --match-f=&#39;^[Ww]idget&#39;
                             only counts files that start with Widget or widget.
                             Add --fullpath to include parent directories
                             in the regex instead of just the basename.
   --not-match-f=&amp;lt;regex&amp;gt;     Count all files except those whose basenames
                             match the Perl regex.  Add --fullpath to include
                             parent directories in the regex instead of just
                             the basename.
   --skip-archive=&amp;lt;regex&amp;gt;    Ignore files that end with the given Perl regular
                             expression.  For example, if given
                               --skip-archive=&#39;(zip|tar(.(gz|Z|bz2|xz|7z))?)&#39;
                             the code will skip files that end with .zip,
                             .tar, .tar.gz, .tar.Z, .tar.bz2, .tar.xz, and
                             .tar.7z.
   --skip-win-hidden         On Windows, ignore hidden files.

 Debug Options
   --categorized=&amp;lt;file&amp;gt;      Save file sizes in bytes, identified languages
                             and names of categorized files to &amp;lt;file&amp;gt;.
   --counted=&amp;lt;file&amp;gt;          Save names of processed source files to &amp;lt;file&amp;gt;.
   --diff-alignment=&amp;lt;file&amp;gt;   Write to &amp;lt;file&amp;gt; a list of files and file pairs
                             showing which files were added, removed, and/or
                             compared during a run with --diff.  This switch
                             forces the --diff mode on.
   --explain=&amp;lt;lang&amp;gt;          Print the filters used to remove comments for
                             language &amp;lt;lang&amp;gt; and exit.  In some cases the
                             filters refer to Perl subroutines rather than
                             regular expressions.  An examination of the
                             source code may be needed for further explanation.
   --help                    Print this usage information and exit.
   --found=&amp;lt;file&amp;gt;            Save names of every file found to &amp;lt;file&amp;gt;.
   --ignored=&amp;lt;file&amp;gt;          Save names of ignored files and the reason they
                             were ignored to &amp;lt;file&amp;gt;.
   --print-filter-stages     Print processed source code before and after
                             each filter is applied.
   --show-ext[=&amp;lt;ext&amp;gt;]        Print information about all known (or just the
                             given) file extensions and exit.
   --show-lang[=&amp;lt;lang&amp;gt;]      Print information about all known (or just the
                             given) languages and exit.
   --show-os                 Print the value of the operating system mode
                             and exit.  See also --unix, --windows.
   -v[=&amp;lt;n&amp;gt;]                  Verbose switch (optional numeric value).
   -verbose[=&amp;lt;n&amp;gt;]            Long form of -v.
   --version                 Print the version of this program and exit.
   --write-lang-def=&amp;lt;file&amp;gt;   Writes to &amp;lt;file&amp;gt; the language processing filters
                             then exits.  Useful as a first step to creating
                             custom language definitions. Note: languages which
                             map to the same file extension will be excluded.
                             (See also --force-lang-def, --read-lang-def).
   --write-lang-def-incl-dup=&amp;lt;file&amp;gt;
                             Same as --write-lang-def, but includes duplicated
                             extensions.  This generates a problematic language
                             definition file because cloc will refuse to use
                             it until duplicates are removed.

 Output Options
   --3                       Print third-generation language output.
                             (This option can cause report summation to fail
                             if some reports were produced with this option
                             while others were produced without it.)
   --by-percent  X           Instead of comment and blank line counts, show
                             these values as percentages based on the value
                             of X in the denominator:
                                X = &#39;c&#39;   -&amp;gt; # lines of code
                                X = &#39;cm&#39;  -&amp;gt; # lines of code + comments
                                X = &#39;cb&#39;  -&amp;gt; # lines of code + blanks
                                X = &#39;cmb&#39; -&amp;gt; # lines of code + comments + blanks
                             For example, if using method &#39;c&#39; and your code
                             has twice as many lines of comments as lines
                             of code, the value in the comment column will
                             be 200%.  The code column remains a line count.
   --csv                     Write the results as comma separated values.
   --csv-delimiter=&amp;lt;C&amp;gt;       Use the character &amp;lt;C&amp;gt; as the delimiter for comma
                             separated files instead of ,.  This switch forces --csv to be on.
   --file-encoding=&amp;lt;E&amp;gt;       Write output files using the &amp;lt;E&amp;gt; encoding instead of
                             the default ASCII (&amp;lt;E&amp;gt; = &#39;UTF-7&#39;).  Examples: &#39;UTF-16&#39;,
                             &#39;euc-kr&#39;, &#39;iso-8859-16&#39;.  Known encodings can be
                             printed with
                               perl -MEncode -e &#39;print join(&quot;\n&quot;, Encode-&amp;gt;encodings(&quot;:all&quot;)), &quot;\n&quot;&#39;
   --hide-rate               Do not show line and file processing rates in the
                             output header. This makes output deterministic.
   --json                    Write the results as JavaScript Object Notation
                             (JSON) formatted output.
   --md                      Write the results as Markdown-formatted text.
   --out=&amp;lt;file&amp;gt;              Synonym for --report-file=&amp;lt;file&amp;gt;.
   --progress-rate=&amp;lt;n&amp;gt;       Show progress update after every &amp;lt;n&amp;gt; files are
                             processed (default &amp;lt;n&amp;gt;=100).  Set &amp;lt;n&amp;gt; to 0 to
                             suppress progress output (useful when redirecting
                             output to STDOUT).
   --quiet                   Suppress all information messages except for
                             the final report.
   --report-file=&amp;lt;file&amp;gt;      Write the results to &amp;lt;file&amp;gt; instead of STDOUT.
   --sql=&amp;lt;file&amp;gt;              Write results as SQL create and insert statements
                             which can be read by a database program such as
                             SQLite.  If &amp;lt;file&amp;gt; is -, output is sent to STDOUT.
   --sql-append              Append SQL insert statements to the file specified
                             by --sql and do not generate table creation
                             statements.  Only valid with the --sql option.
   --sql-project=&amp;lt;name&amp;gt;      Use &amp;lt;name&amp;gt; as the project identifier for the
                             current run.  Only valid with the --sql option.
   --sql-style=&amp;lt;style&amp;gt;       Write SQL statements in the given style instead
                             of the default SQLite format.  Styles include
                             &#39;Oracle&#39; and &#39;Named_Columns&#39;.
   --sum-one                 For plain text reports, show the SUM: output line
                             even if only one input file is processed.
   --xml                     Write the results in XML.
   --xsl=&amp;lt;file&amp;gt;              Reference &amp;lt;file&amp;gt; as an XSL stylesheet within
                             the XML output.  If &amp;lt;file&amp;gt; is 1 (numeric one),
                             writes a default stylesheet, cloc.xsl (or
                             cloc-diff.xsl if --diff is also given).
                             This switch forces --xml on.
   --yaml                    Write the results in YAML.
&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Languages&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Recognized Languages ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;pre&gt;
prompt&amp;gt; cloc --show-lang

ABAP                       (abap)
ActionScript               (as)
Ada                        (ada, adb, ads, pad)
ADSO/IDSM                  (adso)
Agda                       (agda, lagda)
AMPLE                      (ample, dofile, startup)
AnsProlog                  (lp)
Ant                        (build.xml, build.xml)
ANTLR Grammar              (g, g4)
Apex Class                 (cls)
Apex Trigger               (trigger)
APL                        (apl, apla, aplc, aplf, apli, apln, aplo, dyalog, dyapp, mipage)
AppleScript                (applescript)
Arduino Sketch             (ino)
ArkTs                      (ets)
Arturo                     (art)
AsciiDoc                   (adoc, asciidoc)
ASP                        (asa, ashx, asp, axd)
ASP.NET                    (asax, ascx, asmx, aspx, master, sitemap, webinfo)
AspectJ                    (aj)
Assembly                   (a51, asm, nasm, S, s)
Astro                      (astro)
Asymptote                  (asy)
AutoHotkey                 (ahk, ahkl)
awk                        (auk, awk, gawk, mawk, nawk)
Bazel                      (BUILD)
BizTalk Orchestration      (odx)
BizTalk Pipeline           (btp)
Blade                      (blade, blade.php)
Bourne Again Shell         (bash)
Bourne Shell               (sh)
BrightScript               (brs)
builder                    (xml.builder)
C                          (c, cats, ec, idc, pgc)
C Shell                    (csh, tcsh)
C#                         (cs)
C# Designer                (designer.cs)
C++                        (C, c++, c++m, cc, ccm, CPP, cpp, cppm, cxx, cxxm, h++, inl, ipp, ixx, pcc, tcc, tpp)
C/C++ Header               (H, h, hh, hpp, hxx)
Cairo                      (cairo)
Cake Build Script          (cake)
Carbon                     (carbon)
CCS                        (ccs)
Chapel                     (chpl)
Circom                     (circom)
Clean                      (dcl, icl)
Clojure                    (boot, cl2, clj, cljs.hl, cljscm, cljx, hic, riemann.config)
ClojureC                   (cljc)
ClojureScript              (cljs)
CMake                      (cmake, cmake.in, CMakeLists.txt)
COBOL                      (CBL, cbl, ccp, COB, cob, cobol, cpy)
CoCoA 5                    (c5, cocoa5, cocoa5server, cpkg5)
CoffeeScript               (_coffee, cakefile, cjsx, coffee, iced)
ColdFusion                 (cfm, cfml)
ColdFusion CFScript        (cfc)
Constraint Grammar         (cg3, rlx)
Containerfile              (Containerfile)
Coq                        (v)
Crystal                    (cr)
CSON                       (cson)
CSS                        (css)
CSV                        (csv)
Cucumber                   (feature)
CUDA                       (cu, cuh)
Cython                     (pxd, pxi, pyx)
D                          (d)
Dafny                      (dfy)
DAL                        (da)
Dart                       (dart)
Delphi Form                (dfm)
DenizenScript              (dsc)
Derw                       (derw)
dhall                      (dhall)
DIET                       (dt)
diff                       (diff, patch)
DITA                       (dita)
Dockerfile                 (Dockerfile, dockerfile)
DOORS Extension Language   (dxl)
DOS Batch                  (BAT, bat, BTM, btm, CMD, cmd)
Drools                     (drl)
DTD                        (dtd)
dtrace                     (d)
ECPP                       (ecpp)
EEx                        (eex)
EJS                        (ejs)
Elixir                     (ex, exs)
Elm                        (elm)
Embedded Crystal           (ecr)
ERB                        (ERB, erb)
Erlang                     (app.src, emakefile, erl, hrl, rebar.config, rebar.config.lock, rebar.lock, xrl, yrl)
Expect                     (exp)
F#                         (fsi, fs, fs)
F# Script                  (fsx)
Fennel                     (fnl)
Finite State Language      (fsl, jssm)
Fish Shell                 (fish)
Flatbuffers                (fbs)
Focus                      (focexec)
Forth                      (4th, e4, f83, fb, forth, fpm, fr, frt, ft, fth, rx, fs, f, for)
Fortran 77                 (F, F77, f77, FOR, FTN, ftn, pfo, f, for)
Fortran 90                 (F90, f90)
Fortran 95                 (F95, f95)
Freemarker Template        (ftl)
Futhark                    (fut)
FXML                       (fxml)
GDScript                   (gd)
Gencat NLS                 (msg)
Glade                      (glade, ui)
Gleam                      (gleam)
Glimmer JavaScript         (gjs)
Glimmer TypeScript         (gts)
GLSL                       (comp, fp, frag, frg, fsh, fshader, geo, geom, glsl, glslv, gshader, tesc, tese, vert, vrx, vsh, vshader)
Go                         (go, ʕ◔ϖ◔ʔ)
Godot Resource             (tres)
Godot Scene                (tscn)
Godot Shaders              (gdshader)
Gradle                     (gradle, gradle.kts)
Grails                     (gsp)
GraphQL                    (gql, graphql, graphqls)
Groovy                     (gant, groovy, grt, gtpl, gvy, jenkinsfile)
Haml                       (haml, haml.deface)
Handlebars                 (handlebars, hbs)
Harbour                    (hb)
Hare                       (ha)
Haskell                    (hs, hsc, lhs)
Haxe                       (hx, hxsl)
HCL                        (hcl, nomad, tf, tfvars)
HLSL                       (cg, cginc, fxh, hlsl, hlsli, shader)
HolyC                      (HC)
Hoon                       (hoon)
HTML                       (htm, html, html.hl, xht)
HTML EEx                   (heex)
IDL                        (dlm, idl, pro)
Idris                      (idr)
Igor Pro                   (ipf)
Imba                       (imba)
INI                        (buildozer.spec, editorconfig, ini, lektorproject, prefs)
InstallShield              (ism)
IPL                        (ipl)
Jai                        (jai)
Janet                      (janet)
Java                       (java)
JavaScript                 (_js, bones, cjs, es6, jake, jakefile, js, jsb, jscad, jsfl, jsm, jss, mjs, njs, pac, sjs, ssjs, xsjs, xsjslib)
JavaServer Faces           (jsf)
JCL                        (jcl)
Jinja Template             (j2, jinja, jinja2)
JSON                       (arcconfig, avsc, composer.lock, geojson, gltf, har, htmlhintrc, json, json-tmlanguage, jsonl, mcmeta, mcmod.info, tern-config, tern-project, tfstate, tfstate.backup, topojson, watchmanconfig, webapp, webmanifest, yyp)
JSON5                      (json5)
JSP                        (jsp, jspf)
JSX                        (jsx)
Julia                      (jl)
Juniper Junos              (junos)
Jupyter Notebook           (ipynb)
Kermit                     (ksc)
Korn Shell                 (ksh)
Kotlin                     (kt, ktm, kts)
kvlang                     (kv)
Lean                       (hlean, lean)
Lem                        (lem)
LESS                       (less)
lex                        (l, lex)
LFE                        (lfe)
Linker Script              (ld)
liquid                     (liquid)
Lisp                       (asd, el, lisp, lsp, cl, jl)
Literate Idris             (lidr)
LiveLink OScript           (oscript)
LLVM IR                    (ll)
Logos                      (x, xm)
Logtalk                    (lgt, logtalk)
Lua                        (lua, nse, p8, pd_lua, rbxs, wlua)
Luau                       (luau)
m4                         (ac, m4)
make                       (am, Gnumakefile, gnumakefile, Makefile, makefile, mk)
Mako                       (mako, mao)
Markdown                   (contents.lr, markdown, md, mdown, mdwn, mdx, mkd, mkdn, mkdown, ronn, workbook)
Mathematica                (cdf, ma, mathematica, mt, nbp, wl, wlt, m)
MATLAB                     (m)
Maven                      (pom, pom.xml)
Meson                      (meson.build)
Metal                      (metal)
Modelica                   (mo)
Modula3                    (i3, ig, m3, mg)
Mojo                       (mojo, 🔥)
Mojom                      (mojom)
MoonBit                    (mbt, mbti, mbtx, mbty)
MSBuild script             (btproj, csproj, msbuild, vcproj, wdproj, wixproj)
MUMPS                      (mps, m)
Mustache                   (mustache)
MXML                       (mxml)
NAnt script                (build)
NASTRAN DMAP               (dmap)
Nemerle                    (n)
NetLogo                    (nlogo, nls)
Nickel                     (ncl)
Nim                        (nim, nim.cfg, nimble, nimrod, nims)
Nix                        (nix)
Nunjucks                   (njk)
Objective-C                (m)
Objective-C++              (mm)
OCaml                      (eliom, eliomi, ml, ml4, mli, mll, mly)
Odin                       (odin)
OpenCL                     (cl)
OpenSCAD                   (scad)
Oracle Forms               (fmt)
Oracle PL/SQL              (bod, fnc, prc, spc, trg)
Oracle Reports             (rex)
P4                         (p4)
Pascal                     (dpr, lpr, pas, pascal)
Pascal/Pawn                (p)
Pascal/Puppet              (pp)
Patran Command Language    (pcl, ses)
Pawn                       (pawn, pwn)
PEG                        (peg)
peg.js                     (pegjs)
peggy                      (peggy)
Perl                       (ack, al, cpanfile, makefile.pl, perl, ph, plh, plx, pm, psgi, rexfile, pl, p6)
Pest                       (pest)
PHP                        (aw, ctp, phakefile, php, php3, php4, php5, php_cs, php_cs.dist, phps, phpt, phtml)
PHP/Pascal/Fortran/Pawn    (inc)
Pig Latin                  (pig)
PL/I                       (pl1)
PL/M                       (lit, plm)
PlantUML                   (iuml, plantuml, pu, puml, wsd)
PO File                    (po)
Pony                       (pony)
PowerBuilder               (pbt, sra, srf, srm, srs, sru, srw)
PowerShell                 (ps1, psd1, psm1)
Prisma Schema              (prisma)
Processing                 (pde)
ProGuard                   (pro)
Prolog                     (P, prolog, yap, pl, p6, pro)
Properties                 (properties)
Protocol Buffers           (proto)
PRQL                       (prql)
Pug                        (jade, pug)
PureScript                 (purs)
Python                     (buck, build.bazel, gclient, gyp, gypi, lmi, py, py3, pyde, pyi, pyp, pyt, pyw, sconscript, sconstruct, snakefile, tac, workspace, wscript, wsgi, xpy)
QML                        (qbs, qml)
Qt                         (ui)
Qt Linguist                (ts)
Qt Project                 (pro)
R                          (expr-dist, R, r, rd, rprofile, rsx)
Racket                     (rkt, rktd, rktl, scrbl)
Raku                       (pm6, raku, rakumod)
Raku/Prolog                (P6, p6)
RAML                       (raml)
RapydScript                (pyj)
Razor                      (cshtml, razor)
ReasonML                   (re, rei)
ReScript                   (res, resi)
reStructuredText           (rest, rest.txt, rst, rst.txt)
Rexx                       (pprx, rexx)
Ring                       (rform, rh, ring)
Rmd                        (Rmd)
RobotFramework             (robot)
Ruby                       (appraisals, berksfile, brewfile, builder, buildfile, capfile, dangerfile, deliverfile, eye, fastfile, gemfile, gemfile.lock, gemspec, god, guardfile, irbrc, jarfile, jbuilder, mavenfile, mspec, podfile, podspec, pryrc, puppetfile, rabl, rake, rb, rbuild, rbw, rbx, ru, snapfile, thor, thorfile, vagrantfile, watchr)
Ruby HTML                  (rhtml)
Rust                       (rs, rs.in)
SaltStack                  (sls)
SAS                        (sas)
Sass                       (sass)
Scala                      (kojo, sbt, scala)
Scheme                     (sc, sch, scm, sld, sps, ss, sls)
SCSS                       (scss)
sed                        (sed)
SKILL                      (il)
SKILL++                    (ils)
Slice                      (ice)
Slim                       (slim)
Slint                      (slint)
Smalltalk                  (st, cs)
Smarty                     (smarty, tpl)
Snakemake                  (rules, smk)
Softbridge Basic           (SBL, sbl)
Solidity                   (sol)
SparForte                  (sp)
Specman e                  (e)
SQL                        (cql, mysql, psql, SQL, sql, tab, udf, viw)
SQL Data                   (data.sql)
SQL Stored Procedure       (spc.sql, spoc.sql, sproc.sql, udf.sql)
Squirrel                   (nut)
Standard ML                (fun, sig, sml)
Starlark                   (bazel, bzl)
Stata                      (ado, DO, do, doh, ihlp, mata, matah, sthlp)
Stylus                     (styl)
SugarSS                    (sss)
Svelte                     (svelte)
SVG                        (SVG, svg)
Swift                      (swift)
SWIG                       (i)
TableGen                   (td)
Tcl/Tk                     (itk, tcl, tk)
TEAL                       (teal)
Teamcenter met             (met)
Teamcenter mth             (mth)
Templ                      (templ)
TeX                        (aux, bbx, bib, bst, cbx, dtx, ins, lbx, ltx, mkii, mkiv, mkvi, sty, tex, cls)
Text                       (text, txt)
Thrift                     (thrift)
TITAN Project File Information (tpd)
Titanium Style Sheet       (tss)
TLA+                       (tla)
TNSDL                      (cii, cin, in1, in2, in3, in4, inf, interface, rou, sdl, sdt, spd, ssc, sst)
TOML                       (toml)
tspeg                      (jspeg, tspeg)
TTCN                       (ttcn, ttcn2, ttcn3, ttcnpp)
Twig                       (twig)
TypeScript                 (mts, tsx, ts)
Typst                      (typ)
Umka                       (um)
Unity-Prefab               (mat, prefab)
Vala                       (vala)
Vala Header                (vapi)
VB for Applications        (VBA, vba)
Velocity Template Language (vm)
Verilog-SystemVerilog      (sv, svh, v)
VHDL                       (VHD, vhd, VHDL, vhdl, vhf, vhi, vho, vhs, vht, vhw)
vim script                 (vim)
Visual Basic               (BAS, bas, ctl, dsr, frm, FRX, frx, VBHTML, vbhtml, vbp, vbw, cls)
Visual Basic .NET          (VB, vb, vbproj)
Visual Basic Script        (VBS, vbs)
Visual Fox Pro             (SCA, sca)
Visual Studio Solution     (sln)
Visualforce Component      (component)
Visualforce Page           (page)
Vuejs Component            (vue)
Vyper                      (vy)
Web Services Description   (wsdl)
WebAssembly                (wast, wat)
WGSL                       (wgsl)
Windows Message File       (mc)
Windows Module Definition  (def)
Windows Resource File      (rc, rc2)
WiX include                (wxi)
WiX source                 (wxs)
WiX string localization    (wxl)
WXML                       (wxml)
WXSS                       (wxss)
X++                        (xpo)
XAML                       (xaml)
xBase                      (prg, prw)
xBase Header               (ch)
XHTML                      (xhtml)
XMI                        (XMI, xmi)
XML                        (adml, admx, ant, app.config, axml, builds, ccproj, ccxml, classpath, clixml, cproject, cscfg, csdef, csl, ct, depproj, ditamap, ditaval, dll.config, dotsettings, filters, fsproj, gmx, grxml, iml, ivy, jelly, jsproj, kml, launch, mdpolicy, mjml, natvis, ndproj, nproj, nuget.config, nuspec, odd, osm, packages.config, pkgproj, plist, proj, project, props, ps1xml, psc1, pt, rdf, resx, rss, scxml, settings.stylecop, sfproj, shproj, srdf, storyboard, sttheme, sublime-snippet, targets, tmcommand, tml, tmlanguage, tmpreferences, tmsnippet, tmtheme, urdf, ux, vcxproj, vsixmanifest, vssettings, vstemplate, vxml, web.config, web.debug.config, web.release.config, wsf, x3d, xacro, xib, xlf, xliff, XML, xml, xml.dist, xproj, xspec, xul, zcml)
XQuery                     (xq, xql, xqm, xquery, xqy)
XSD                        (XSD, xsd)
XSLT                       (XSL, xsl, XSLT, xslt)
Xtend                      (xtend)
yacc                       (y, yacc)
YAML                       (clang-format, clang-tidy, gemrc, glide.lock, mir, reek, rviz, sublime-syntax, syntax, yaml, yaml-tmlanguage, yml, yml.mysql)
Yang                       (yang)
Zig                        (zig)
zsh                        (zsh)
&lt;/pre&gt; 
&lt;p&gt;The above list can be customized by reading language definitions from a file with the &lt;code&gt;--read-lang-def&lt;/code&gt; or &lt;code&gt;--force-lang-def&lt;/code&gt; options.&lt;/p&gt; 
&lt;p&gt;These file extensions map to multiple languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cj&lt;/code&gt; files could be Clojure or Cangjie&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cl&lt;/code&gt; files could be Lisp or OpenCL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cls&lt;/code&gt; files could be Visual Basic, TeX or Apex Class&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cs&lt;/code&gt; files could be C# or Smalltalk&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;d&lt;/code&gt; files could be D or dtrace&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;f&lt;/code&gt; files could be Fortran 77 or Forth&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fnc&lt;/code&gt; files could be Oracle PL or SQL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;for&lt;/code&gt; files could be Fortran 77 or Forth&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fs&lt;/code&gt; files could be F# or Forth&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;inc&lt;/code&gt; files could be PHP or Pascal&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;itk&lt;/code&gt; files could be Tcl or Tk&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jl&lt;/code&gt; files could be Lisp or Julia&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lit&lt;/code&gt; files could be PL or M&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;m&lt;/code&gt; files could be MATLAB, Mathematica, Objective-C, MUMPS or Mercury&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;p6&lt;/code&gt; files could be Perl or Prolog&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pl&lt;/code&gt; files could be Perl or Prolog&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PL&lt;/code&gt; files could be Perl or Prolog&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pp&lt;/code&gt; files could be Pascal or Puppet&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pro&lt;/code&gt; files could be IDL, Qt Project, Prolog or ProGuard&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ts&lt;/code&gt; files could be TypeScript or Qt Linguist&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ui&lt;/code&gt; files could be Qt or Glade&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;v&lt;/code&gt; files could be Verilog-SystemVerilog or Coq&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;cloc has subroutines that attempt to identify the correct language based on the file&#39;s contents for these special cases. Language identification accuracy is a function of how much code the file contains; .m files with just one or two lines for example, seldom have enough information to correctly distinguish between MATLAB, Mercury, MUMPS, or Objective-C.&lt;/p&gt; 
&lt;p&gt;Languages with file extension collisions are difficult to customize with &lt;code&gt;--read-lang-def&lt;/code&gt; or &lt;code&gt;--force-lang-def&lt;/code&gt; as they have no mechanism to identify languages with common extensions. In this situation one must modify the cloc source code. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;How_it_works&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;How It Works ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;cloc&#39;s method of operation resembles SLOCCount&#39;s: First, create a list of files to consider. Next, attempt to determine whether or not found files contain recognized computer language source code. Finally, for files identified as source files, invoke language-specific routines to count the number of source lines.&lt;/p&gt; 
&lt;p&gt;A more detailed description:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;If the input file is an archive (such as a .tar.gz or .zip file), create a temporary directory and expand the archive there using a system call to an appropriate underlying utility (tar, bzip2, unzip, etc) then add this temporary directory as one of the inputs. (This works more reliably on Unix than on Windows.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use File::Find to recursively descend the input directories and make a list of candidate file names. Ignore binary and zero-sized files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the files in the candidate list have unique contents (first by comparing file sizes, then, for similarly sized files, compare MD5 hashes of the file contents with Digest::MD5). For each set of identical files, remove all but the first copy, as determined by a lexical sort, of identical files from the set. The removed files are not included in the report. (The &lt;code&gt;--skip-uniqueness&lt;/code&gt; switch disables the uniqueness tests and forces all copies of files to be included in the report.) See also the &lt;code&gt;--ignored=&lt;/code&gt; switch to see which files were ignored and why.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scan the candidate file list for file extensions which cloc associates with programming languages (see the &lt;code&gt;--show-lang&lt;/code&gt; and &lt;code&gt;--show-ext&lt;/code&gt; options). Files which match are classified as containing source code for that language. Each file without an extension is opened and its first line read to see if it is a Unix shell script (anything that begins with #!). If it is shell script, the file is classified by that scripting language (if the language is recognized). If the file does not have a recognized extension or is not a recognized scripting language, the file is ignored.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;All remaining files in the candidate list should now be source files for known programming languages. For each of these files:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Read the entire file into memory.&lt;/li&gt; 
   &lt;li&gt;Count the number of lines (= L&lt;sub&gt;original&lt;/sub&gt;).&lt;/li&gt; 
   &lt;li&gt;Remove blank lines, then count again (= L&lt;sub&gt;non_blank&lt;/sub&gt;).&lt;/li&gt; 
   &lt;li&gt;Loop over the comment filters defined for this language. (For example, C++ has two filters: (1) remove lines that start with optional whitespace followed by // and (2) remove text between /* and */) Apply each filter to the code to remove comments. Count the left over lines (= L&lt;sub&gt;code&lt;/sub&gt;).&lt;/li&gt; 
   &lt;li&gt;Save the counts for this language: 
    &lt;ul&gt; 
     &lt;li&gt;blank lines = L&lt;sub&gt;original&lt;/sub&gt; - L&lt;sub&gt;non_blank&lt;/sub&gt;&lt;/li&gt; 
     &lt;li&gt;comment lines = L&lt;sub&gt;non_blank&lt;/sub&gt; - L&lt;sub&gt;code&lt;/sub&gt;&lt;/li&gt; 
     &lt;li&gt;code lines = L&lt;sub&gt;code&lt;/sub&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The options modify the algorithm slightly. The &lt;code&gt;--read-lang-def&lt;/code&gt; option for example allows the user to read definitions of comment filters, known file extensions, and known scripting languages from a file. The code for this option is processed between Steps 2 and 3. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Advanced_Use&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Advanced Use ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;strip_comments&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Remove Comments from Source Code ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;How can you tell if cloc correctly identifies comments? One way to convince yourself cloc is doing the right thing is to use its &lt;code&gt;--strip-comments&lt;/code&gt; option to remove comments and blank lines from files, then compare the stripped-down files to originals.&lt;/p&gt; 
&lt;p&gt;Let&#39;s try this out with the SQLite amalgamation, a C file containing all code needed to build the SQLite library along with a header file:&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; tar zxf sqlite-amalgamation-3.5.6.tar.gz
prompt&amp;gt; cd sqlite-3.5.6/
prompt&amp;gt; cloc --strip-comments=nc sqlite.c
       1 text file.
       1 unique file.
Wrote sqlite3.c.nc
       0 files ignored.

http://cloc.sourceforge.net v 1.03  T=1.0 s (1.0 files/s, 82895.0 lines/s)
-------------------------------------------------------------------------------
Language          files     blank   comment      code    scale   3rd gen. equiv
-------------------------------------------------------------------------------
C                     1      5167     26827     50901 x   0.77 =       39193.77
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;The extension argument given to --strip-comments is arbitrary; here nc was used as an abbreviation for &quot;no comments&quot;.&lt;/p&gt; 
&lt;p&gt;cloc removed over 31,000 lines from the file:&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; wc -l sqlite3.c sqlite3.c.nc
  82895 sqlite3.c
  50901 sqlite3.c.nc
 133796 total
prompt&amp;gt; echo &quot;82895 - 50901&quot; | bc
31994
&lt;/pre&gt; 
&lt;p&gt;We can now compare the original file, sqlite3.c and the one stripped of comments, sqlite3.c.nc with tools like diff or vimdiff and see what exactly cloc considered comments and blank lines. A rigorous proof that the stripped-down file contains the same C code as the original is to compile these files and compare checksums of the resulting object files.&lt;/p&gt; 
&lt;p&gt;First, the original source file:&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; gcc -c sqlite3.c
prompt&amp;gt; md5sum sqlite3.o
cce5f1a2ea27c7e44b2e1047e2588b49  sqlite3.o
&lt;/pre&gt; 
&lt;p&gt;Next, the version without comments:&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; mv sqlite3.c.nc sqlite3.c
prompt&amp;gt; gcc -c sqlite3.c
prompt&amp;gt; md5sum sqlite3.o
cce5f1a2ea27c7e44b2e1047e2588b49  sqlite3.o
&lt;/pre&gt; 
&lt;p&gt;cloc removed over 31,000 lines of comments and blanks but did not modify the source code in any significant way since the resulting object file matches the original. &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;compressed_arch&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Work with Compressed Archives ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Versions of cloc before v1.07 required an &lt;code&gt;--extract-with=CMD&lt;/code&gt; option to tell cloc how to expand an archive file. Beginning with v1.07 this is extraction is attempted automatically. At the moment the automatic extraction method works reasonably well on Unix-type OS&#39;s for the following file types: &lt;code&gt;.tar.gz&lt;/code&gt;, &lt;code&gt;.tar.bz2&lt;/code&gt;, &lt;code&gt;.tar.xz&lt;/code&gt;, &lt;code&gt;.tgz&lt;/code&gt;, &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.ear&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt;. Some of these extensions work on Windows if one has WinZip installed in the default location (&lt;code&gt;C:\Program Files\WinZip\WinZip32.exe&lt;/code&gt;). Additionally, with newer versions of WinZip, the [http://www.winzip.com/downcl.htm](command line add-on) is needed for correct operation; in this case one would invoke cloc with something like &lt;br&gt;&lt;/p&gt; 
&lt;pre&gt;
 --extract-with=&quot;\&quot;c:\Program Files\WinZip\wzunzip\&quot; -e -o &amp;gt;FILE&amp;lt; .&quot;
 
&lt;/pre&gt; 
&lt;p&gt;Ref. &lt;a href=&quot;http://sourceforge.net/projects/cloc/forums/forum/600963/topic/4021070?message=8938196&quot;&gt;http://sourceforge.net/projects/cloc/forums/forum/600963/topic/4021070?message=8938196&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In situations where the automatic extraction fails, one can try the &lt;code&gt;--extract-with=CMD&lt;/code&gt; option to count lines of code within tar files, Zip files, or other compressed archives for which one has an extraction tool. cloc takes the user-provided extraction command and expands the archive to a temporary directory (created with File::Temp), counts the lines of code in the temporary directory, then removes that directory. While not especially helpful when dealing with a single compressed archive (after all, if you&#39;re going to type the extraction command anyway why not just manually expand the archive?) this option is handy for working with several archives at once.&lt;/p&gt; 
&lt;p&gt;For example, say you have the following source tarballs on a Unix machine&lt;br&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;perl-5.8.5.tar.gz
Python-2.4.2.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and you want to count all the code within them. The command would be&lt;/p&gt; 
&lt;pre&gt;
cloc --extract-with=&#39;gzip -dc &amp;gt;FILE&amp;lt; | tar xf -&#39; perl-5.8.5.tar.gz Python-2.4.2.tar.gz
&lt;/pre&gt; 
&lt;p&gt;If that Unix machine has GNU tar (which can uncompress and extract in one step) the command can be shortened to&lt;/p&gt; 
&lt;pre&gt;
cloc --extract-with=&#39;tar zxf &amp;gt;FILE&amp;lt;&#39; perl-5.8.5.tar.gz Python-2.4.2.tar.gz
&lt;/pre&gt; 
&lt;p&gt;On a Windows computer with WinZip installed in &lt;code&gt;c:\Program Files\WinZip&lt;/code&gt; the command would look like&lt;/p&gt; 
&lt;pre&gt;
cloc.exe --extract-with=&quot;\&quot;c:\Program Files\WinZip\WinZip32.exe\&quot; -e -o &amp;gt;FILE&amp;lt; .&quot; perl-5.8.5.tar.gz Python-2.4.2.tar.gz
&lt;/pre&gt; 
&lt;p&gt;Java &lt;code&gt;.ear&lt;/code&gt; files are Zip files that contain additional Zip files. cloc can handle nested compressed archives without difficulty--provided all such files are compressed and archived in the same way. Examples of counting a Java &lt;code&gt;.ear&lt;/code&gt; file in Unix and Windows:&lt;/p&gt; 
&lt;pre&gt;
&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --extract-with=&quot;unzip -d . &amp;gt;FILE&amp;lt; &quot; Project.ear
&lt;i&gt;DOS&amp;gt;&lt;/i&gt; cloc.exe --extract-with=&quot;\&quot;c:\Program Files\WinZip\WinZip32.exe\&quot; -e -o &amp;gt;FILE&amp;lt; .&quot; Project.ear
&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;diff&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Differences ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;--diff&lt;/code&gt; switch allows one to measure the relative change in source code and comments between two versions of a file, directory, or archive. Differences reveal much more than absolute code counts of two file versions. For example, say a source file has 100 lines and its developer delivers a newer version with 102 lines. Did the developer add two comment lines, or delete seventeen source lines and add fourteen source lines and five comment lines, or did the developer do a complete rewrite, discarding all 100 original lines and adding 102 lines of all new source? The diff option tells how many lines of source were added, removed, modified or stayed the same, and how many lines of comments were added, removed, modified or stayed the same.&lt;/p&gt; 
&lt;p&gt;Differences in blank lines are handled much more coarsely because these are stripped by cloc early on. Unless a file pair is identical, cloc will report only differences in absolute counts of blank lines. In other words, one can expect to see only entries for &#39;added&#39; if the second file has more blanks than the first, and &#39;removed&#39; if the situation is reversed. The entry for &#39;same&#39; will be non-zero only when the two files are identical.&lt;/p&gt; 
&lt;p&gt;In addition to file pairs, one can give cloc pairs of directories, or pairs of file archives, or a file archive and a directory. cloc will try to align file pairs within the directories or archives and compare diffs for each pair. For example, to see what changed between GCC 4.4.0 and 4.5.0 one could do&lt;/p&gt; 
&lt;pre&gt;
cloc --diff gcc-4.4.0.tar.bz2  gcc-4.5.0.tar.bz2
&lt;/pre&gt; 
&lt;p&gt;Be prepared to wait a while for the results though; the &lt;code&gt;--diff&lt;/code&gt; option runs much more slowly than an absolute code count.&lt;/p&gt; 
&lt;p&gt;To see how cloc aligns files between the two archives, use the &lt;code&gt;--diff-alignment&lt;/code&gt; option&lt;/p&gt; 
&lt;pre&gt;
cloc --diff-alignment=align.txt gcc-4.4.0.tar.bz2  gcc-4.5.0.tar.bz2
&lt;/pre&gt; 
&lt;p&gt;to produce the file &lt;code&gt;align.txt&lt;/code&gt; which shows the file pairs as well as files added and deleted. The symbols &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; before each file pair indicate if the files are identical (&lt;code&gt;==&lt;/code&gt;) or if they have different content (&lt;code&gt;!=&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Here&#39;s sample output showing the difference between the Python 2.6.6 and 2.7 releases:&lt;/p&gt; 
&lt;pre&gt;&lt;i&gt;prompt&amp;gt;&lt;/i&gt; cloc --diff Python-2.7.9.tgz Python-2.7.10.tar.xz
    4315 text files.
    4313 text files.s
    2173 files ignored.

4 errors:
Diff error, exceeded timeout:  /tmp/8ToGAnB9Y1/Python-2.7.9/Mac/Modules/qt/_Qtmodule.c
Diff error, exceeded timeout:  /tmp/M6ldvsGaoq/Python-2.7.10/Mac/Modules/qt/_Qtmodule.c
Diff error (quoted comments?):  /tmp/8ToGAnB9Y1/Python-2.7.9/Mac/Modules/qd/qdsupport.py
Diff error (quoted comments?):  /tmp/M6ldvsGaoq/Python-2.7.10/Mac/Modules/qd/qdsupport.py

https://github.com/AlDanial/cloc v 1.65  T=298.59 s (0.0 files/s, 0.0 lines/s)
-----------------------------------------------------------------------------
Language                   files          blank        comment           code
-----------------------------------------------------------------------------
Visual Basic
 same                          2              0              1             12
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
make
 same                         11              0            340           2952
 modified                      1              0              0              1
 added                         0              0              0              0
 removed                       0              0              0              0
diff
 same                          1              0             87            105
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
CSS
 same                          0              0             19            327
 modified                      1              0              0              1
 added                         0              0              0              0
 removed                       0              0              0              0
Objective-C
 same                          7              0             61            635
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
NAnt script
 same                          2              0              0             30
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
XML
 same                          3              0              2             72
 modified                      1              0              0              1
 added                         0              0              0              1
 removed                       0              1              0              0
Windows Resource File
 same                          3              0             56            206
 modified                      1              0              0              1
 added                         0              0              0              0
 removed                       0              0              0              0
Expect
 same                          6              0            161            565
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
HTML
 same                         14              0             11           2344
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
vim script
 same                          1              0              7            106
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
C++
 same                          2              0             18            128
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
Windows Module Definition
 same                          7              0            187           2080
 modified                      2              0              0              0
 added                         0              0              0              1
 removed                       0              1              0              2
Prolog
 same                          1              0              0             24
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
Javascript
 same                          3              0             49            229
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
Assembly
 same                         51              0           6794          12298
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
Bourne Shell
 same                         41              0           7698          45024
 modified                      1              0              0              3
 added                         0             13              2             64
 removed                       0              0              0              0
DOS Batch
 same                         29              0            107            494
 modified                      1              0              0              9
 added                         0              1              0              3
 removed                       0              0              0              0
MSBuild script
 same                         77              0              3          38910
 modified                      0              0              0              0
 added                         0              0              0              0
 removed                       0              0              0              0
Python
 same                       1947              0         109012         430335
 modified                    192              0             94            950
 added                         2            323            283           2532
 removed                       2             55             58            646
m4
 same                         18              0            191          15352
 modified                      1              0              0              2
 added                         1             31              0            205
 removed                       0              0              0              0
C
 same                        505              0          37439         347837
 modified                     45              0             13            218
 added                         0             90             33            795
 removed                       0              9              2            148
C/C++ Header
 same                        255              0          10361          66635
 modified                      5              0              5              7
 added                         0              1              3            300
 removed                       0              0              0              0
---------------------------------------------------------------------
SUM:
 same                       2986              0         172604         966700
 modified                    251              0            112           1193
 added                         3            459            321           3901
 removed                       2             66             60            796
---------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;A pair of errors occurred. The first pair was caused by timing out when computing diffs of the file &lt;code&gt;Python-X/Mac/Modules/qt/_Qtmodule.c&lt;/code&gt; in each Python version. This file has &amp;gt; 26,000 lines of C code and takes more than 10 seconds--the default maximum duration for diff&#39;ing a single file--on my slow computer. (Note: this refers to performing differences with the &lt;code&gt;sdiff()&lt;/code&gt; function in the Perl &lt;code&gt;Algorithm::Diff&lt;/code&gt; module, not the command line &lt;code&gt;diff&lt;/code&gt; utility.) This error can be overcome by raising the time to, say, 20 seconds with &lt;code&gt;--diff-timeout 20&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The second error is more problematic. The files &lt;code&gt;Python-X/Mac/Modules/qd/qdsupport.py&lt;/code&gt; include Python docstring (text between pairs of triple quotes) containing C comments. cloc treats docstrings as comments and handles them by first converting them to C comments, then using the C comment removing regular expression. Nested C comments yield erroneous results however.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;custom_lang&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Create Custom Language Definitions ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;cloc can write its language comment definitions to a file or can read comment definitions from a file, overriding the built-in definitions. This can be useful when you want to use cloc to count lines of a language not yet included, to change association of file extensions to languages, or to modify the way existing languages are counted.&lt;/p&gt; 
&lt;p&gt;The easiest way to create a custom language definition file is to make cloc write its definitions to a file, then modify that file:&lt;/p&gt; 
&lt;pre&gt;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --write-lang-def=my_definitions.txt
&lt;/pre&gt; 
&lt;p&gt;creates the file &lt;code&gt;my_definitions.txt&lt;/code&gt; which can be modified then read back in with either the &lt;code&gt;--read-lang-def&lt;/code&gt; or &lt;code&gt;--force-lang-def&lt;/code&gt; option. The difference between the options is former merges language definitions from the given file in with cloc&#39;s internal definitions with cloc&#39;s taking precedence if there are overlaps. The &lt;code&gt;--force-lang-def&lt;/code&gt; option, on the other hand, replaces cloc&#39;s definitions completely. This option has a disadvantage in preventing cloc from counting &lt;a class=&quot;u&quot; href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#extcollision&quot; name=&quot;extcollision&quot;&gt; languages whose extensions map to multiple languages &lt;/a&gt; as these languages require additional logic that is not easily expressed in a definitions file.&lt;/p&gt; 
&lt;pre&gt;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --read-lang-def=my_definitions.txt  &lt;i&gt;file1 file2 dir1 ...&lt;/i&gt;
&lt;/pre&gt; 
&lt;p&gt;Each language entry has four parts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The language name starting in column 1.&lt;/li&gt; 
 &lt;li&gt;One or more comment &lt;em&gt;filters&lt;/em&gt; starting in column 5.&lt;/li&gt; 
 &lt;li&gt;One or more filename extensions starting in column 5.&lt;/li&gt; 
 &lt;li&gt;A 3rd generation scale factor starting in column 5. This entry must be provided but its value is not important unless you want to compare your language to a hypothetical third generation programming language.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A filter defines a method to remove comment text from the source file. For example the entry for C++ looks like this&lt;/p&gt; 
&lt;pre&gt;C++
    filter call_regexp_common C++
    filter remove_inline //.*$
    extension C
    extension c++
    extension cc
    extension cpp
    extension cxx
    extension pcc
    3rd_gen_scale 1.51
    end_of_line_continuation \\$
&lt;/pre&gt; 
&lt;p&gt;C++ has two filters: first, remove lines matching Regexp::Common&#39;s C++ comment regex. The second filter using remove_inline is currently unused. Its intent is to identify lines with both code and comments and it may be implemented in the future.&lt;/p&gt; 
&lt;p&gt;A more complete discussion of the different filter options may appear here in the future. The output of cloc&#39;s &lt;code&gt;--write-lang-def&lt;/code&gt; option should provide enough examples for motivated individuals to modify or extend cloc&#39;s language definitions.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;combine_reports&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Combine Reports ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;If you manage multiple software projects you might be interested in seeing line counts by project, not just by language. Say you manage three software projects called MariaDB, PostgreSQL, and SQLite. The teams responsible for each of these projects run cloc on their source code and provide you with the output. For example, the MariaDB team does&lt;/p&gt; 
&lt;pre&gt;cloc --out mariadb-10.1.txt mariadb-server-10.1.zip&lt;/pre&gt; 
&lt;p&gt;and provides you with the file &lt;code&gt;mariadb-10.1.txt&lt;/code&gt;. The contents of the three files you get are&lt;/p&gt; 
&lt;pre&gt;
&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat mariadb-10.1.txt
https://github.com/AlDanial/cloc v 1.65  T=45.36 s (110.5 files/s, 66411.4 lines/s)
-----------------------------------------------------------------------------------
Language                         files          blank        comment           code
-----------------------------------------------------------------------------------
C++                               1613         225338         290077         983026
C                                  853          62442          73017         715018
C/C++ Header                      1327          48300         114577         209394
Bourne Shell                       256          10224          10810          61943
Perl                               147          10342           8305          35562
Pascal                             107           4907           5237          32541
HTML                                56            195              6          16489
Javascript                           5           3309           3019          15540
m4                                  30           1599            359          14215
CMake                              190           1919           4097          12206
XML                                 35            648             56           5210
Ruby                                59            619            184           4998
Puppet                              10              0              1           3848
make                               134            724            360           3631
SQL                                 23            306            377           3405
Python                              34            371            122           2545
Bourne Again Shell                  27            299            380           1604
Windows Module Definition           37             27             13           1211
lex                                  4            394            166            991
yacc                                 2            152             64            810
DOS Batch                           19             89             82            700
Prolog                               1              9             40            448
RobotFramework                       1              0              0            441
CSS                                  2             33            155            393
JSON                                 5              0              0            359
dtrace                               9             59            179            306
Windows Resource File               10             61             89            250
Assembly                             2             70            284            237
WiX source                           1             18             10            155
Visual Basic                         6              0              0             88
YAML                                 2              4              4             65
PHP                                  1             11              2             24
SKILL                                1              8             15             16
sed                                  2              0              0             16
Windows Message File                 1              2              8              6
diff                                 1              1              4              4
D                                    1              4             11              4
-----------------------------------------------------------------------------------
SUM:                              5014         372484         512110        2127699
-----------------------------------------------------------------------------------

&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat sqlite-3081101.txt
https://github.com/AlDanial/cloc v 1.65  T=1.22 s (3.3 files/s, 143783.6 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
C                                2          11059          53924         101454
C/C++ Header                     2            211           6630           1546
-------------------------------------------------------------------------------
SUM:                             4          11270          60554         103000
-------------------------------------------------------------------------------

&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat postgresql-9.4.4.txt
https://github.com/AlDanial/cloc v 1.65  T=22.46 s (172.0 files/s, 96721.6 lines/s)
-----------------------------------------------------------------------------------
Language                         files          blank        comment           code
-----------------------------------------------------------------------------------
HTML                              1254           3725              0         785991
C                                 1139         139289         244045         736519
C/C++ Header                       667          12277          32488          57014
SQL                                410          13400           8745          51926
yacc                                 8           3163           2669          28491
Bourne Shell                        41           2647           2440          17170
Perl                                81           1702           1308           9456
lex                                  9            792           1631           4285
make                               205           1525           1554           4114
m4                                  12            218             25           1642
Windows Module Definition           13              4             17           1152
XSLT                                 5             76             55            294
DOS Batch                            7             29             30             92
CSS                                  1             20              7             69
Assembly                             3             17             38             69
D                                    1             14             14             66
Windows Resource File                3              4              0             62
Lisp                                 1              1              1             16
sed                                  1              1              7             15
Python                               1              5              0             13
Bourne Again Shell                   1              8              6             10
Windows Message File                 1              0              0              5
-----------------------------------------------------------------------------------
SUM:                              3864         178917         295080        1698471
-----------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;While these three files are interesting, you also want to see the combined counts from all projects. That can be done with cloc&#39;s &lt;code&gt;--sum_reports&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;
&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --sum-reports --out=databases mariadb-10.1.txt  sqlite-3081101.txt  postgresql-9.4.4.txt
Wrote databases.lang
Wrote databases.file
&lt;/pre&gt; 
&lt;p&gt;The report combination produces two output files, one for sums by programming language (&lt;code&gt;databases.lang&lt;/code&gt;) and one by project (&lt;code&gt;databases.file&lt;/code&gt;). Their contents are&lt;/p&gt; 
&lt;pre&gt;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat databases.lang
https://github.com/AlDanial/cloc v 1.65
--------------------------------------------------------------------------------
Language                      files          blank        comment           code
--------------------------------------------------------------------------------
C                              1994         212790         370986        1552991
C++                            1613         225338         290077         983026
HTML                           1310           3920              6         802480
C/C++ Header                   1996          60788         153695         267954
Bourne Shell                    297          12871          13250          79113
SQL                             433          13706           9122          55331
Perl                            228          12044           9613          45018
Pascal                          107           4907           5237          32541
yacc                             10           3315           2733          29301
m4                               42           1817            384          15857
Javascript                        5           3309           3019          15540
CMake                           190           1919           4097          12206
make                            339           2249           1914           7745
lex                              13           1186           1797           5276
XML                              35            648             56           5210
Ruby                             59            619            184           4998
Puppet                           10              0              1           3848
Python                           35            376            122           2558
Windows Module Definition        50             31             30           2363
Bourne Again Shell               28            307            386           1614
DOS Batch                        26            118            112            792
CSS                               3             53            162            462
Prolog                            1              9             40            448
RobotFramework                    1              0              0            441
JSON                              5              0              0            359
Windows Resource File            13             65             89            312
Assembly                          5             87            322            306
dtrace                            9             59            179            306
XSLT                              5             76             55            294
WiX source                        1             18             10            155
Visual Basic                      6              0              0             88
D                                 2             18             25             70
YAML                              2              4              4             65
sed                               3              1              7             31
PHP                               1             11              2             24
SKILL                             1              8             15             16
Lisp                              1              1              1             16
Windows Message File              2              2              8             11
diff                              1              1              4              4
--------------------------------------------------------------------------------
SUM:                           8882         562671         867744        3929170
--------------------------------------------------------------------------------

&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat databases.file
----------------------------------------------------------------------------------
File                            files          blank        comment           code
----------------------------------------------------------------------------------
mariadb-10.1.txt                 5014         372484         512110        2127699
postgresql-9.4.4.txt             3864         178917         295080        1698471
sqlite-3081101.txt                  4          11270          60554         103000
----------------------------------------------------------------------------------
SUM:                             8882         562671         867744        3929170
----------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;Report files themselves can be summed together. Say you also manage development of Perl and Python and you want to keep track of those line counts separately from your database projects. First create reports for Perl and Python separately:&lt;/p&gt; 
&lt;pre&gt;
cloc --out perl-5.22.0.txt   perl-5.22.0.tar.gz
cloc --out python-2.7.10.txt Python-2.7.10.tar.xz
&lt;/pre&gt; 
&lt;p&gt;then sum these together with&lt;/p&gt; 
&lt;pre&gt;
&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --sum-reports --out script_lang perl-5.22.0.txt python-2.7.10.txt
Wrote script_lang.lang
Wrote script_lang.file

&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat script_lang.lang
https://github.com/AlDanial/cloc v 1.65
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Perl                          2892         136396         184362         536445
C                              680          75566          71211         531203
Python                        2141          89642         109524         434015
C/C++ Header                   408          16433          26938         214800
Bourne Shell                   154          11088          14496          87759
MSBuild script                  77              0              3          38910
m4                              20           1604            191          15559
Assembly                        51           3775           6794          12298
Pascal                           8            458           1603           8592
make                            16            897            828           4939
XML                             37            198              2           2484
HTML                            14            393             11           2344
C++                             12            338            295           2161
Windows Module Definition        9            171            187           2081
YAML                            49             20             15           2078
Prolog                          12            438              2           1146
JSON                            14              1              0           1037
yacc                             1             85             76            998
DOS Batch                       44            199            148            895
Objective-C                      7             98             61            635
Expect                           6            104            161            565
Windows Message File             1            102             11            489
CSS                              1             98             19            328
Windows Resource File            7             55             56            292
Javascript                       3             31             49            229
vim script                       1             36              7            106
diff                             1             17             87            105
NAnt script                      2              1              0             30
IDL                              1              0              0             24
Visual Basic                     2              1              1             12
D                                1              5              7              8
Lisp                             2              0              3              4
-------------------------------------------------------------------------------
SUM:                          6674         338250         417148        1902571
-------------------------------------------------------------------------------

&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat script_lang.file
-------------------------------------------------------------------------------
File                         files          blank        comment           code
-------------------------------------------------------------------------------
python-2.7.10.txt             3240         161276         173214         998697
perl-5.22.0.txt               3434         176974         243934         903874
-------------------------------------------------------------------------------
SUM:                          6674         338250         417148        1902571
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;Finally, combine the combination files:&lt;/p&gt; 
&lt;pre&gt;
&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --sum-reports --report_file=everything databases.lang script_lang.lang
Wrote everything.lang
Wrote everything.file

&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat everything.lang
https://github.com/AlDanial/cloc v 1.65
---------------------------------------------------------------------------------
Language                       files          blank        comment           code
---------------------------------------------------------------------------------
C                               2674         288356         442197        2084194
C++                             1625         225676         290372         985187
HTML                            1324           4313             17         804824
Perl                            3120         148440         193975         581463
C/C++ Header                    2404          77221         180633         482754
Python                          2176          90018         109646         436573
Bourne Shell                     451          23959          27746         166872
SQL                              433          13706           9122          55331
Pascal                           115           5365           6840          41133
MSBuild script                    77              0              3          38910
m4                                62           3421            575          31416
yacc                              11           3400           2809          30299
Javascript                         8           3340           3068          15769
make                             355           3146           2742          12684
Assembly                          56           3862           7116          12604
CMake                            190           1919           4097          12206
XML                               72            846             58           7694
lex                               13           1186           1797           5276
Ruby                              59            619            184           4998
Windows Module Definition         59            202            217           4444
Puppet                            10              0              1           3848
YAML                              51             24             19           2143
DOS Batch                         70            317            260           1687
Bourne Again Shell                28            307            386           1614
Prolog                            13            447             42           1594
JSON                              19              1              0           1396
CSS                                4            151            181            790
Objective-C                        7             98             61            635
Windows Resource File             20            120            145            604
Expect                             6            104            161            565
Windows Message File               3            104             19            500
RobotFramework                     1              0              0            441
dtrace                             9             59            179            306
XSLT                               5             76             55            294
WiX source                         1             18             10            155
diff                               2             18             91            109
vim script                         1             36              7            106
Visual Basic                       8              1              1            100
D                                  3             23             32             78
sed                                3              1              7             31
NAnt script                        2              1              0             30
IDL                                1              0              0             24
PHP                                1             11              2             24
Lisp                               3              1              4             20
SKILL                              1              8             15             16
---------------------------------------------------------------------------------
SUM:                           15556         900921        1284892        5831741
---------------------------------------------------------------------------------

&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat everything.file
-------------------------------------------------------------------------------
File                         files          blank        comment           code
-------------------------------------------------------------------------------
databases.lang                8882         562671         867744        3929170
script_lang.lang              6674         338250         417148        1902571
-------------------------------------------------------------------------------
SUM:                         15556         900921        1284892        5831741
-------------------------------------------------------------------------------
&lt;/pre&gt; 
&lt;p&gt;One limitation of the &lt;code&gt;--sum-reports&lt;/code&gt; feature is that the individual counts must be saved in the plain text format. Counts saved as XML, JSON, YAML, or SQL will produce errors if used in a summation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;sql&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;SQL ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Cloc can write results in the form of SQL table create and insert statements for use with relational database programs such as SQLite, MySQL, PostgreSQL, Oracle, or Microsoft SQL. Once the code count information is in a database, the information can be interrogated and displayed in interesting ways.&lt;/p&gt; 
&lt;p&gt;A database created from cloc SQL output has two tables, &lt;strong&gt;metadata&lt;/strong&gt; and &lt;strong&gt;t&lt;/strong&gt;:&lt;/p&gt; 
&lt;p&gt;Table &lt;strong&gt;metadata&lt;/strong&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Field&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;id&lt;/td&gt; 
   &lt;td&gt;integer primary key&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;timestamp&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;project&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;elapsed_s&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Table &lt;strong&gt;t&lt;/strong&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Field&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;project&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;language&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;file&lt;/td&gt; 
   &lt;td&gt;text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nBlank&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nComment&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nCode&lt;/td&gt; 
   &lt;td&gt;integer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nScaled&lt;/td&gt; 
   &lt;td&gt;real&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;foreign key (id)&lt;/td&gt; 
   &lt;td&gt;references metadata (id)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The &lt;strong&gt;metadata&lt;/strong&gt; table contains information about when the cloc run was made. Run time is stored two ways: as Unix epoch seconds in &lt;code&gt;id&lt;/code&gt; and as an ISO 8601 formatted text string in the local time zone (for example &lt;code&gt;2024-03-01 14:19:41&lt;/code&gt;) in &lt;code&gt;timestamp&lt;/code&gt;. The &lt;code&gt;--sql-append&lt;/code&gt; switch allows one to combine many runs in a single database; each run adds a row to the metadata table. The code count information resides in table &lt;strong&gt;t&lt;/strong&gt;. The &lt;code&gt;id&lt;/code&gt; key makes it easy to associate a run&#39;s code count with its metadata.&lt;/p&gt; 
&lt;p&gt;Let&#39;s repeat the code count examples of Perl, Python, SQLite, MySQL and PostgreSQL tarballs shown in the &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#combine_reports&quot;&gt;Combine Reports&lt;/a&gt; example above, this time using the SQL output options and the &lt;a href=&quot;http://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; database engine.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;--sql&lt;/code&gt; switch tells cloc to generate output in the form of SQL table &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; commands. The switch takes an argument of a file name to write these SQL statements into, or, if the argument is 1 (numeric one), streams output to STDOUT. Since the SQLite command line program, &lt;code&gt;sqlite3&lt;/code&gt;, can read commands from STDIN, we can dispense with storing SQL statements to a file and use &lt;code&gt;--sql 1&lt;/code&gt; to pipe data directly into the SQLite executable:&lt;/p&gt; 
&lt;pre&gt;
cloc --sql 1 --sql-project mariadb mariadb-server-10.1.zip | sqlite3 code.db
&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--sql-project mariadb&lt;/code&gt; part is optional; there&#39;s no need to specify a project name when working with just one code base. However, since we&#39;ll be adding code counts from four other tarballs, we&#39;ll only be able to identify data by input source if we supply a project name for each run.&lt;/p&gt; 
&lt;p&gt;Now that we have a database we will need to pass in the &lt;code&gt;--sql-append&lt;/code&gt; switch to tell cloc not to wipe out this database but instead add more data:&lt;/p&gt; 
&lt;pre&gt;
cloc --sql 1 --sql-project postgresql --sql-append postgresql-9.4.4.tar.bz2        | sqlite3 code.db
cloc --sql 1 --sql-project sqlite     --sql-append sqlite-amalgamation-3081101.zip | sqlite3 code.db
cloc --sql 1 --sql-project python     --sql-append Python-2.7.10.tar.xz            | sqlite3 code.db
cloc --sql 1 --sql-project perl       --sql-append perl-5.22.0.tar.gz              | sqlite3 code.db
&lt;/pre&gt; 
&lt;p&gt;Now the fun begins--we have a database, &lt;code&gt;code.db&lt;/code&gt;, with lots of information about the five projects and can query it for all manner of interesting facts.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Which is the longest file over all projects?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project,file,nBlank+nComment+nCode as nL from t
                                 where nL = (select max(nBlank+nComment+nCode) from t)&#39;

sqlite|sqlite-amalgamation-3081101/sqlite3.c|161623
&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt;&#39;s default output format leaves a bit to be desired. We can add an option to the program&#39;s rc file, &lt;code&gt;~/.sqliterc&lt;/code&gt;, to show column headers:&lt;/p&gt; 
&lt;pre&gt;
  .header on
&lt;/pre&gt; 
&lt;p&gt;One might be tempted to also include&lt;/p&gt; 
&lt;pre&gt;
  .mode column
&lt;/pre&gt; 
&lt;p&gt;in &lt;code&gt;~/.sqliterc&lt;/code&gt; but this causes problems when the output has more than one row since the widths of entries in the first row govern the maximum width for all subsequent rows. Often this leads to truncated output--not at all desirable. One option is to write a custom SQLite output formatter such as &lt;code&gt;sqlite_formatter&lt;/code&gt;, included with cloc.&lt;/p&gt; 
&lt;p&gt;To use it, simply pass &lt;code&gt;sqlite3&lt;/code&gt;&#39;s STDOUT into &lt;code&gt;sqlite_formatter&lt;/code&gt; via a pipe:&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project,file,nBlank+nComment+nCode as nL from t
                         where nL = (select max(nBlank+nComment+nCode) from t)&#39; | ./sqlite_formatter
  &lt;font color=&quot;darkgreen&quot;&gt;
  -- Loading resources from ~/.sqliterc
  Project File                                  nL
  _______ _____________________________________ ______
  sqlite  sqlite-amalgamation-3081101/sqlite3.c 161623
  &lt;/font&gt;
&lt;/pre&gt; 
&lt;p&gt;If the &quot;Project File&quot; line doesn&#39;t appear, add &lt;code&gt;.header on&lt;/code&gt; to your &lt;code&gt;~/.sqliterc&lt;/code&gt; file as explained above.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;What is the longest file over all projects?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project,file,nBlank+nComment+nCode as nL from t
                         where nL = (select max(nBlank+nComment+nCode) from t)&#39; | sqlite_formatter

Project File                                  nL
_______ _____________________________________ ______
sqlite  sqlite-amalgamation-3081101/sqlite3.c 161623
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;What is the longest file in each project?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project,file,max(nBlank+nComment+nCode) as nL from t
                          group by project order by nL;&#39; | sqlite_formatter

Project    File                                                             nL
__________ ________________________________________________________________ ______
python     Python-2.7.10/Mac/Modules/qt/_Qtmodule.c                          28091
postgresql postgresql-9.4.4/src/interfaces/ecpg/preproc/preproc.c            54623
mariadb    server-10.1/storage/mroonga/vendor/groonga/lib/nfkc.c             80246
perl       perl-5.22.0/cpan/Locale-Codes/lib/Locale/Codes/Language_Codes.pm 100747
sqlite     sqlite-amalgamation-3081101/sqlite3.c                            161623
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Which files in each project have the most code lines?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project,file,max(nCode) as nL from t
                         group by project order by nL desc;&#39; | sqlite_formatter

Project    File                                                             nL
__________ ________________________________________________________________ ______
perl       perl-5.22.0/cpan/Locale-Codes/lib/Locale/Codes/Language_Codes.pm 100735
sqlite     sqlite-amalgamation-3081101/sqlite3.c                             97469
mariadb    server-10.1/storage/mroonga/vendor/groonga/lib/nfkc.c             80221
postgresql postgresql-9.4.4/src/interfaces/ecpg/preproc/preproc.c            45297
python     Python-2.7.10/Mac/Modules/qt/_Qtmodule.c                          26705
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Which C source files with more than 300 lines have a comment ratio below 1%?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project, file, nCode, nComment,
                         (100.0*nComment)/(nComment+nCode) as comment_ratio from t
                         where language=&quot;C&quot; and nCode &amp;gt; 300 and
                         comment_ratio &amp;lt; 1 order by comment_ratio;&#39; | sqlite_formatter

Project    File                                                                                            nCode nComment comment_ratio
__________ _______________________________________________________________________________________________ _____ ________ __________________
mariadb    server-10.1/storage/mroonga/vendor/groonga/lib/nfkc.c                                           80221       14 0.0174487443135789
python     Python-2.7.10/Python/graminit.c                                                                  2175        1 0.0459558823529412
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_turkish.c                            2095        1 0.0477099236641221
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_french.c                             1211        1 0.0825082508250825
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_french.c                        1201        1 0.0831946755407654
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_hungarian.c                          1182        1 0.084530853761623
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_hungarian.c                     1178        1 0.0848176420695505
mariadb    server-10.1/strings/ctype-eucjpms.c                                                             67466       60 0.0888546633889169
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_english.c                            1072        1 0.0931966449207828
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_english.c                       1064        1 0.0938967136150235
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_spanish.c                            1053        1 0.094876660341556
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_spanish.c                       1049        1 0.0952380952380952
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_italian.c                            1031        1 0.0968992248062016
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_italian.c                       1023        1 0.09765625
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_portuguese.c                          981        1 0.10183299389002
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_portuguese.c                     975        1 0.102459016393443
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_romanian.c                            967        1 0.103305785123967
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_2_romanian.c                       961        1 0.103950103950104
mariadb    server-10.1/strings/ctype-ujis.c                                                                67177       79 0.117461639110265
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_finnish.c                             720        1 0.13869625520111
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_porter.c                              717        1 0.139275766016713
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_finnish.c                        714        1 0.13986013986014
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_porter.c                         711        1 0.140449438202247
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_KOI8_R_russian.c                            660        1 0.151285930408472
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_russian.c                             654        1 0.152671755725191
python     Python-2.7.10/Mac/Modules/qt/_Qtmodule.c                                                        26705       42 0.157026956294164
python     Python-2.7.10/Mac/Modules/icn/_Icnmodule.c                                                       1521        3 0.196850393700787
mariadb    server-10.1/strings/ctype-extra.c                                                                8282       18 0.216867469879518
postgresql postgresql-9.4.4/src/bin/psql/sql_help.c                                                         3576        8 0.223214285714286
mariadb    server-10.1/strings/ctype-sjis.c                                                                34006       86 0.252258594391646
python     Python-2.7.10/Python/Python-ast.c                                                                6554       17 0.258712524729874
mariadb    server-10.1/strings/ctype-cp932.c                                                               34609       92 0.265122042592432
perl       perl-5.22.0/keywords.c                                                                           2815        8 0.283386468296139
python     Python-2.7.10/Mac/Modules/menu/_Menumodule.c                                                     3263       10 0.305530094714329
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_dutch.c                               596        2 0.334448160535117
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_dutch.c                          586        2 0.340136054421769
mariadb    server-10.1/strings/ctype-gbk.c                                                                 10684       38 0.354411490393583
python     Python-2.7.10/Mac/Modules/qd/_Qdmodule.c                                                         6694       24 0.357249181303959
python     Python-2.7.10/Mac/Modules/win/_Winmodule.c                                                       3056       11 0.358656667753505
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_german.c                              476        2 0.418410041841004
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_german.c                         470        2 0.423728813559322
mariadb    server-10.1/strings/ctype-euc_kr.c                                                               9956       44 0.44
postgresql postgresql-9.4.4/src/backend/utils/fmgrtab.c                                                     4815       23 0.475403059115337
python     Python-2.7.10/Mac/Modules/ctl/_Ctlmodule.c                                                       5442       28 0.511882998171846
python     Python-2.7.10/Mac/Modules/ae/_AEmodule.c                                                         1347        7 0.51698670605613
python     Python-2.7.10/Mac/Modules/app/_Appmodule.c                                                       1712        9 0.52295177222545
mariadb    server-10.1/strings/ctype-gb2312.c                                                               6377       35 0.54585152838428
mariadb    server-10.1/storage/tokudb/ft-index/third_party/xz-4.999.9beta/src/liblzma/lzma/fastpos_table.c   516        3 0.578034682080925
python     Python-2.7.10/Mac/Modules/evt/_Evtmodule.c                                                        504        3 0.591715976331361
python     Python-2.7.10/Modules/expat/xmlrole.c                                                            1256        8 0.632911392405063
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_danish.c                              312        2 0.636942675159236
postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_danish.c                         310        2 0.641025641025641
python     Python-2.7.10/Mac/Modules/res/_Resmodule.c                                                       1621       12 0.734843845682792
python     Python-2.7.10/Mac/Modules/drag/_Dragmodule.c                                                     1046        8 0.759013282732448
python     Python-2.7.10/Mac/Modules/list/_Listmodule.c                                                     1021        8 0.777453838678329
python     Python-2.7.10/Mac/Modules/te/_TEmodule.c                                                         1198       10 0.827814569536424
python     Python-2.7.10/Mac/Modules/cg/_CGmodule.c                                                         1190       10 0.833333333333333
python     Python-2.7.10/Modules/clmodule.c                                                                 2379       23 0.957535387177352
python     Python-2.7.10/Mac/Modules/folder/_Foldermodule.c                                                  306        3 0.970873786407767
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;What are the ten longest files (based on code lines) that have no comments at all? Exclude header, .html, and YAML files.&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project, file, nCode from t
                         where nComment = 0 and
                         language not in (&quot;C/C++ Header&quot;, &quot;YAML&quot;, &quot;HTML&quot;)
                         order by nCode desc limit 10;&#39; | sqlite_formatter

Project File                                                                 nCode
_______ ____________________________________________________________________ _____
perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/ja.pl                 1938
python  Python-2.7.10/PCbuild/pythoncore.vcproj                               1889
python  Python-2.7.10/PC/VS8.0/pythoncore.vcproj                              1889
mariadb server-10.1/mysql-test/extra/binlog_tests/mysqlbinlog_row_engine.inc  1862
perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/zh_strk.pl            1589
perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/zh_zhu.pl             1563
mariadb server-10.1/storage/mroonga/vendor/groonga/configure.ac               1526
perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/zh_pin.pl             1505
mariadb server-10.1/mysql-test/suite/funcs_1/storedproc/storedproc_02.inc     1465
python  Python-2.7.10/PC/VS8.0/_bsddb.vcproj                                  1463
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;What are the most popular languages (in terms of lines of code) in each project?&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;
prompt&amp;gt; sqlite3 code.db &#39;select project, language, sum(nCode) as SumCode from t
                         group by project,language
                         order by project,SumCode desc;&#39; | sqlite_formatter
Project    Language                  SumCode
__________ _________________________ _______
mariadb    C++                        983026
mariadb    C                          715018
mariadb    C/C++ Header               209394
mariadb    Bourne Shell                61943
mariadb    Perl                        35562
mariadb    Pascal                      32541
mariadb    HTML                        16489
mariadb    Javascript                  15540
mariadb    m4                          14215
mariadb    CMake                       12206
mariadb    XML                          5210
mariadb    Ruby                         4998
mariadb    Puppet                       3848
mariadb    make                         3631
mariadb    SQL                          3405
mariadb    Python                       2545
mariadb    Bourne Again Shell           1604
mariadb    Windows Module Definition    1211
mariadb    lex                           991
mariadb    yacc                          810
mariadb    DOS Batch                     700
mariadb    Prolog                        448
mariadb    RobotFramework                441
mariadb    CSS                           393
mariadb    JSON                          359
mariadb    dtrace                        306
mariadb    Windows Resource File         250
mariadb    Assembly                      237
mariadb    WiX source                    155
mariadb    Visual Basic                   88
mariadb    YAML                           65
mariadb    PHP                            24
mariadb    SKILL                          16
mariadb    sed                            16
mariadb    Windows Message File            6
mariadb    D                               4
mariadb    diff                            4
perl       Perl                       536445
perl       C                          155648
perl       C/C++ Header               147858
perl       Bourne Shell                42668
perl       Pascal                       8592
perl       XML                          2410
perl       YAML                         2078
perl       C++                          2033
perl       make                         1986
perl       Prolog                       1146
perl       JSON                         1037
perl       yacc                          998
perl       Windows Message File          489
perl       DOS Batch                     389
perl       Windows Resource File          85
perl       D                               8
perl       Lisp                            4
postgresql HTML                       785991
postgresql C                          736519
postgresql C/C++ Header                57014
postgresql SQL                         51926
postgresql yacc                        28491
postgresql Bourne Shell                17170
postgresql Perl                         9456
postgresql lex                          4285
postgresql make                         4114
postgresql m4                           1642
postgresql Windows Module Definition    1152
postgresql XSLT                          294
postgresql DOS Batch                      92
postgresql Assembly                       69
postgresql CSS                            69
postgresql D                              66
postgresql Windows Resource File          62
postgresql Lisp                           16
postgresql sed                            15
postgresql Python                         13
postgresql Bourne Again Shell             10
postgresql Windows Message File            5
python     Python                     434015
python     C                          375555
python     C/C++ Header                66942
python     Bourne Shell                45091
python     MSBuild script              38910
python     m4                          15559
python     Assembly                    12298
python     make                         2953
python     HTML                         2344
python     Windows Module Definition    2081
python     Objective-C                   635
python     Expect                        565
python     DOS Batch                     506
python     CSS                           328
python     Javascript                    229
python     Windows Resource File         207
python     C++                           128
python     vim script                    106
python     diff                          105
python     XML                            74
python     NAnt script                    30
python     Prolog                         24
python     Visual Basic                   12
sqlite     C                          101454
sqlite     C/C++ Header                 1546
&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;custom_column_output&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Custom Column Output ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Cloc&#39;s default output is a text table with five columns: language, file count, number of blank lines, number of comment lines and number of code lines. The switches &lt;code&gt;--by-file&lt;/code&gt;, &lt;code&gt;--3&lt;/code&gt;, and &lt;code&gt;--by-percent&lt;/code&gt; generate additional information but sometimes even those are insufficient.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;--sql&lt;/code&gt; option described in the previous section offers the ability to create custom output. This section has a pair of examples that show how to create custom columns. The first example includes an extra column, &lt;strong&gt;Total&lt;/strong&gt;, which is the sum of the numbers of blank, comment, and code lines. The second shows how to include the language name when running with &lt;code&gt;--by-file&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example 1: Add a &quot;Totals&quot; column.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The first step is to run cloc and save the output to a relational database, SQLite in this case:&lt;/p&gt; 
&lt;pre&gt;
cloc --sql 1 --sql-project x yaml-cpp-yaml-cpp-0.5.3.tar.gz | sqlite3 counts.db
&lt;/pre&gt; 
&lt;p&gt;(the tar file comes from the &lt;a href=&quot;https://github.com/jbeder/yaml-cpp&quot;&gt;YAML-C++&lt;/a&gt; project).&lt;/p&gt; 
&lt;p&gt;Second, we craft an SQL query that returns the regular cloc output plus an extra column for totals, then save the SQL statement to a file, &lt;code&gt;query_with_totals.sql&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;
-- file query_with_totals.sql
select Language, count(File)   as files                       ,
                 sum(nBlank)   as blank                       ,
                 sum(nComment) as comment                     ,
                 sum(nCode)    as code                        ,
                 sum(nBlank)+sum(nComment)+sum(nCode) as Total
    from t group by Language order by code desc;
&lt;/pre&gt; 
&lt;p&gt;Third, we run this query through SQLite using the &lt;code&gt;counts.db&lt;/code&gt; database. We&#39;ll include the &lt;code&gt;-header&lt;/code&gt; switch so that SQLite prints the column names:&lt;/p&gt; 
&lt;pre&gt;
&amp;gt; cat query_with_totals.sql | sqlite3 -header counts.db
Language|files|blank|comment|code|Total
C++|141|12786|17359|60378|90523
C/C++ Header|110|8566|17420|51502|77488
Bourne Shell|10|6351|6779|38264|51394
m4|11|2037|260|17980|20277
Python|30|1613|2486|4602|8701
MSBuild script|11|0|0|1711|1711
CMake|7|155|285|606|1046
make|5|127|173|464|764
Markdown|2|30|0|39|69
&lt;/pre&gt; 
&lt;p&gt;The extra column for &lt;strong&gt;Total&lt;/strong&gt; is there but the format is unappealing. Running the output through &lt;code&gt;sqlite_formatter&lt;/code&gt; yields the desired result:&lt;/p&gt; 
&lt;pre&gt;
&amp;gt; cat query_with_totals.sql | sqlite3 -header counts.db | sqlite_formatter
Language       files blank comment code  Total
______________ _____ _____ _______ _____ _____
C++              141 12786   17359 60378 90523
C/C++ Header     110  8566   17420 51502 77488
Bourne Shell      10  6351    6779 38264 51394
m4                11  2037     260 17980 20277
Python            30  1613    2486  4602  8701
MSBuild script    11     0       0  1711  1711
CMake              7   155     285   606  1046
make               5   127     173   464   764
Markdown           2    30       0    39    69
&lt;/pre&gt; 
&lt;p&gt;The next section, &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#wrapping-cloc-in-other-scripts-&quot;&gt;Wrapping cloc in other scripts&lt;/a&gt;, shows one way these commands can be combined into a new utility program.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example 2: Include a column for &quot;Language&quot; when running with &lt;code&gt;--by-file&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Output from &lt;code&gt;--by-file&lt;/code&gt; omits each file&#39;s language to save screen real estate; file paths for large projects can be long and including an extra 20 or so characters for a Language column can be excessive.&lt;/p&gt; 
&lt;p&gt;As an example, here are the first few lines of output using the same code base as in Example 1:&lt;/p&gt; 
&lt;pre&gt;
&amp;gt; cloc --by-file yaml-cpp-yaml-cpp-0.5.3.tar.gz
github.com/AlDanial/cloc v 1.81  T=1.14 s (287.9 files/s, 221854.9 lines/s)
--------------------------------------------------------------------------------------------------------------------------------------------
File                                                                                                     blank        comment           code
--------------------------------------------------------------------------------------------------------------------------------------------
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/configure                                                        2580           2264          13691
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/configure                                                  2541           2235          13446
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest.h                                    1972           4681          13408
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock/gmock.h                                          1585           3397           9216
yaml-cpp-yaml-cpp-0.5.3/test/integration/gen_emitter_test.cpp                                              999              0           8760
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/aclocal.m4                                                        987            100           8712
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/m4/libtool.m4                                               760             65           7176
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/build-aux/ltmain.sh                                         959           1533           7169
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock-gtest-all.cc                                     1514           3539           6390
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest-all.cc                               1312           2896           5384
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/test/gtest_unittest.cc                                     1226           1091           5098
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/include/gtest/internal/gtest-param-util-generated.h         349            235           4559
&lt;/pre&gt; 
&lt;p&gt;The absence of language identification for each file is a bit disappointing, but this can be remedied with a custom column solution.&lt;/p&gt; 
&lt;p&gt;The first step, creating a database, matches that from Example 1 so we&#39;ll go straight to the second step of creating the desired SQL query. We&#39;ll store this one in the file &lt;code&gt;by_file_with_language.sql&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;
-- file by_file_with_language.sql
select File, Language, nBlank   as blank  ,
                       nComment as comment,
                       nCode    as code
    from t order by code desc;
&lt;/pre&gt; 
&lt;p&gt;Our desired extra column appears when we pass this custom SQL query through our database:&lt;/p&gt; 
&lt;pre&gt;
&amp;gt; cat by_file_with_language.sql | sqlite3 -header counts.db | sqlite_formatter
File                                                                                               Language       blank comment code
__________________________________________________________________________________________________ ______________ _____ _______ _____
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/configure                                                 Bourne Shell    2580    2264 13691
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/configure                                           Bourne Shell    2541    2235 13446
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest.h                             C/C++ Header    1972    4681 13408
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock/gmock.h                                   C/C++ Header    1585    3397  9216
yaml-cpp-yaml-cpp-0.5.3/test/integration/gen_emitter_test.cpp                                      C++              999       0  8760
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/aclocal.m4                                                m4               987     100  8712
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/m4/libtool.m4                                       m4               760      65  7176
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/build-aux/ltmain.sh                                 Bourne Shell     959    1533  7169
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock-gtest-all.cc                              C++             1514    3539  6390
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest-all.cc                        C++             1312    2896  5384
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/test/gtest_unittest.cc                              C++             1226    1091  5098
yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/include/gtest/internal/gtest-param-util-generated.h C/C++ Header     349     235  4559
&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;wrapping_cloc_in_other_scripts&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt; * &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#wrapping-cloc-in-other-scripts-&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Wrapping cloc in other scripts ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;More complex code counting solutions are possible by wrapping cloc in scripts or programs. The &quot;total lines&quot; column from example 1 of &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#custom-column-output-&quot;&gt;Custom Column Output&lt;/a&gt; could be simplified to a single command with this shell script (on Linux):&lt;/p&gt; 
&lt;pre&gt;
#!/bin/sh
#
# These commands must be in the user&#39;s $PATH:
#   cloc
#   sqlite3
#   sqlite_formatter
#
if test $# -eq 0 ; then
    echo &quot;Usage: $0  [cloc arguments]&quot;
    echo &quot;       Run cloc to count lines of code with an additional&quot;
    echo &quot;       output column for total lines (code+comment+blank).&quot;
    exit
fi
DBFILE=`tempfile`
cloc --sql 1 --sql-project x $@ | sqlite3 ${DBFILE}
SQL=&quot;select Language, count(File)   as files                       ,
                      sum(nBlank)   as blank                       ,
                      sum(nComment) as comment                     ,
                      sum(nCode)    as code                        ,
                      sum(nBlank)+sum(nComment)+sum(nCode) as Total
         from t group by Language order by code desc;
&quot;
echo ${SQL} | sqlite3 -header ${DBFILE} | sqlite_formatter
rm ${DBFILE}
&lt;/pre&gt; 
&lt;p&gt;Saving the lines above to &lt;code&gt;total_columns.sh&lt;/code&gt; and making it executable (&lt;code&gt;chmod +x total_columns.sh&lt;/code&gt;) would let us do&lt;/p&gt; 
&lt;pre&gt;
./total_columns.sh yaml-cpp-yaml-cpp-0.5.3.tar.gz
&lt;/pre&gt; 
&lt;p&gt;to directly get&lt;/p&gt; 
&lt;pre&gt;
Language       files blank comment code  Total
______________ _____ _____ _______ _____ _____
C++              141 12786   17359 60378 90523
C/C++ Header     110  8566   17420 51502 77488
Bourne Shell      10  6351    6779 38264 51394
m4                11  2037     260 17980 20277
Python            30  1613    2486  4602  8701
MSBuild script    11     0       0  1711  1711
CMake              7   155     285   606  1046
make               5   127     173   464   764
Markdown           2    30       0    39    69
&lt;/pre&gt; 
&lt;p&gt;Other examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Count code from a specific branch of a web-hosted git repository and send the results as a .csv email attachment: &lt;a href=&quot;https://github.com/dannyloweatx/checkmarx&quot;&gt;https://github.com/dannyloweatx/checkmarx&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;git_and_UTF8_pathnames&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;git and UTF8 pathnames ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;cloc&#39;s &lt;code&gt;--git&lt;/code&gt; option may fail if you work with directory or file names with UTF-8 characters (for example, see &lt;a href=&quot;https://github.com/AlDanial/cloc/issues/457&quot;&gt;issue 457&lt;/a&gt;). The solution, &lt;a href=&quot;https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window&quot;&gt;https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window&lt;/a&gt;, is to apply this git configuration command:&lt;/p&gt; 
&lt;pre&gt;
git config --global core.quotepath off
&lt;/pre&gt; 
&lt;p&gt;Your console&#39;s font will need to be capable of displaying Unicode characters.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;scale_factors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Third Generation Language Scale Factors ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;cloc versions before 1.50 by default computed, for the provided inputs, a rough estimate of how many lines of code would be needed to write the same code in a hypothetical third-generation computer language. To produce this output one must now use the &lt;code&gt;--3&lt;/code&gt; switch.&lt;/p&gt; 
&lt;p&gt;Scale factors were derived from the 2006 version of language gearing ratios listed at Mayes Consulting web site, &lt;a href=&quot;http://softwareestimator.com/IndustryData2.htm&quot;&gt;http://softwareestimator.com/IndustryData2.htm&lt;/a&gt;, using this equation:&lt;/p&gt; 
&lt;p&gt;cloc scale factor for language X = 3rd generation default gearing ratio / language X gearing ratio&lt;/p&gt; 
&lt;p&gt;For example, cloc 3rd generation scale factor for DOS Batch = 80 / 128 = 0.625.&lt;/p&gt; 
&lt;p&gt;The biggest flaw with this approach is that gearing ratios are defined for logical lines of source code not physical lines (which cloc counts). The values in cloc&#39;s &#39;scale&#39; and &#39;3rd gen. equiv.&#39; columns should be taken with a large grain of salt.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;options_txt&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;options.txt configuration file ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;If you find yourself using the same command line switches every time you invoke cloc, you can save some typing by adding those switches to the &lt;code&gt;options.txt&lt;/code&gt; runtime configuration file. cloc will look for this file in the following default locations:&lt;/p&gt; 
&lt;pre&gt;
# Linux, NetBSD, FreeBSD, macOS:
/home/USERNAME/.config/cloc/options.txt

# Windows
C:\Users\USERNAME\AppData\Roaming\cloc
&lt;/pre&gt; 
&lt;p&gt;If you run cloc with &lt;code&gt;--help&lt;/code&gt;, cloc will tell you where it expects to find this config file file. The information appears by the explanation of the &lt;code&gt;--config&lt;/code&gt; switch after the text &lt;code&gt;the default location of&lt;/code&gt;. On Unix-like operating systems, this can be simplified to&lt;/p&gt; 
&lt;pre&gt;
&amp;gt; cloc --help | grep &quot;default location&quot;
             the default location of /home/al/.config/cloc/options.txt.
&lt;/pre&gt; 
&lt;p&gt;and in a Windows &lt;code&gt;cmd&lt;/code&gt; terminal with&lt;/p&gt; 
&lt;pre&gt;
&amp;gt; cloc --help | findstr default | findstr location
             the default location of C:\Users\al\AppData\Roaming\cloc
&lt;/pre&gt; 
&lt;p&gt;Place each switch and arguments, if any, on a line by itself. Lines prefixed with &lt;code&gt;#&lt;/code&gt; symbol are ignored as comments and blank lines are skipped. Leading hyphens on the switches are optional. Here&#39;s a sample file:&lt;/p&gt; 
&lt;pre&gt;
# options.txt
--vcs git
v      # verbose level 1
exclude-ext svg,html
&lt;/pre&gt; 
&lt;p&gt;The path to the &lt;code&gt;options.txt&lt;/code&gt; file can also be specified with the &lt;code&gt;--config FILE&lt;/code&gt; switch.&lt;/p&gt; 
&lt;p&gt;Finally, if cloc finds an &lt;code&gt;options.txt&lt;/code&gt; file in the same directory as files given by any of these switches (in the listed priority), it will use that configuration file from that location:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;--list-file&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--exclude-list-file&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--read-lang-def&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--force-lang-def&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--diff-list-file&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Run with &lt;code&gt;--verbose&lt;/code&gt; to have cloc tell you which, if any, &lt;code&gt;options.txt&lt;/code&gt; file it uses.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Java Programmatic Interface&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Java Programmatic Interface ▲&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/seart-group/jcloc/commits?author=dabico&quot;&gt;Ozren Dabić&lt;/a&gt; created a Java programmatic interface to cloc. It is available at &lt;a href=&quot;https://github.com/seart-group/jcloc&quot;&gt;https://github.com/seart-group/jcloc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;complex_regex_recursion&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Complex regular subexpression recursion limit ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;cloc relies on the Regexp::Common module&#39;s regular expressions to remove comments from source code. If comments are malformed, for example the &lt;code&gt;/*&lt;/code&gt; start comment marker appears in a C program without a corresponding &lt;code&gt;*/&lt;/code&gt; marker, the regular expression engine could enter a recursive loop, eventually triggering the warning &lt;code&gt;Complex regular subexpression recursion limit&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The most common cause for this warning is the existence of comment markers in string literals. While language compilers and interpreters are smart enough to recognize that &lt;code&gt;&quot;/*&quot;&lt;/code&gt; (for example) is a string and not a comment, cloc is fooled. File path globs, as in this line of JavaScript&lt;/p&gt; 
&lt;pre&gt;var paths = globArray(&quot;**/*.js&quot;, {cwd: srcPath});
&lt;/pre&gt; 
&lt;p&gt;are frequent culprits.&lt;/p&gt; 
&lt;p&gt;In an attempt to overcome this problem, a different algorithm which removes comment markers in strings can be enabled with the &lt;code&gt;--strip-str-comments&lt;/code&gt; switch. Doing so, however, has drawbacks: cloc will run more slowly and the output of &lt;code&gt;--strip-comments&lt;/code&gt; will contain strings that no longer match the input source.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Limitations&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Limitations ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Identifying comments within source code is trickier than one might expect. Many languages would need a complete parser to be counted correctly. cloc does not attempt to parse any of the languages it aims to count and therefore is an imperfect tool. The following are known problems:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; Lines containing both source code and comments are counted as lines of code. &lt;/li&gt; 
 &lt;li&gt; Comment markers within strings or &lt;a href=&quot;http://www.faqs.org/docs/abs/HTML/here-docs.html&quot;&gt;here-documents&lt;/a&gt; are treated as actual comment markers and not string literals. For example the following lines of C code &lt;pre&gt;printf(&quot; /* &quot;);
for (i = 0; i &amp;lt; 100; i++) {
    a += i;
}
printf(&quot; */ &quot;);
&lt;/pre&gt; look to cloc like this: &lt;pre&gt;printf(&quot; xxxxxxx
xxxxxxx
xxxxxxx
xxxxxxx
xxxxxxx     &quot;);
&lt;/pre&gt; where &lt;tt&gt;xxxxxxx&lt;/tt&gt; represents cloc&#39;s view of commented text. Therefore cloc counts the five lines as two lines of C code and three lines of comments (lines with both code and comment are counted as code). &lt;p&gt;If you suspect your code has such strings, use the switch &lt;code&gt;--strip-str-comments&lt;/code&gt; to switch to the algorithm which removes embedded comment markers. Its use will render the five lines above as&lt;/p&gt; &lt;pre&gt;printf(&quot;  &quot;);
for (i = 0; i &amp;lt; 100; i++) {
    a += i;
}
printf(&quot;  &quot;);
&lt;/pre&gt; &lt;p&gt;and therefore return a count of five lines of code. See the &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#complex-regular-subexpression-recursion-limit-&quot;&gt;previous section&lt;/a&gt; on drawbacks to using &lt;code&gt;--strip-str-comments&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; Embedded languages are not recognized. For example, an HTML file containing JavaScript will be counted entirely as HTML. &lt;/li&gt; 
 &lt;li&gt; Python docstrings can serve several purposes. They may contain documentation, comment out blocks of code, or they can be regular strings (when they appear on the right hand side of an assignment or as a function argument). cloc is unable to infer the meaning of docstrings by context; by default cloc treats all docstrings as comments. The switch &lt;tt&gt;--docstring-as-code&lt;/tt&gt; treats all docstrings as code. &lt;/li&gt; 
 &lt;li&gt; Language definition files read with &lt;tt&gt;--read-lang-def&lt;/tt&gt; or &lt;tt&gt;--force-lang-def&lt;/tt&gt; must be plain ASCII text files. &lt;/li&gt; 
 &lt;li&gt; cloc treats compiler pragma&#39;s, for example &lt;tt&gt;#if&lt;/tt&gt; / &lt;tt&gt;#endif&lt;/tt&gt;, as code even if these are used to block lines of source from being compiled; the blocked lines still contribute to the code count. &lt;/li&gt; 
 &lt;li&gt; On Windows, cloc will fail with &lt;tt&gt;Can&#39;t cd to ... No such file or directory at 
   &lt;embedded&gt;
    /File/Find.pm
   &lt;/embedded&gt;&lt;/tt&gt; if the code being scanned has file paths longer than 255 characters. A work-around is to run cloc from the Windows Subsystem for Linux (WSL). &lt;/li&gt; 
 &lt;li&gt; cloc&#39;s comment match code uses regular expressions which cannot properly account for nested comments using the same comment markers (such as &lt;tt&gt;/* /* */ */&lt;/tt&gt;). &lt;/li&gt; 
 &lt;li&gt; XML comments embedded within &lt;tt&gt;CDATA&lt;/tt&gt; blocks are counted as comments rather than code. &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;AdditionalLanguages&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Requesting Support for Additional Languages ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;If cloc does not recognize a language you are interested in counting, create a &lt;a href=&quot;https://github.com/AlDanial/cloc/issues&quot;&gt;GitHub issue&lt;/a&gt; requesting support for your language. Include this information:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; File extensions associated with the language. If the language does not rely on file extensions and instead works with fixed file names or with `#!` style program invocations, explain what those are.&lt;/li&gt; 
 &lt;li&gt; A description of how comments are defined.&lt;/li&gt; 
 &lt;li&gt; Links to sample code.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;reporting_problems&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Reporting Problems ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;If you encounter a problem with cloc, first check to see if you&#39;re running with the latest version of the tool:&lt;/p&gt; 
&lt;pre&gt;
  cloc --version
&lt;/pre&gt; 
&lt;p&gt;If the version is older than the most recent release at &lt;a href=&quot;https://github.com/AlDanial/cloc/releases&quot;&gt;https://github.com/AlDanial/cloc/releases&lt;/a&gt;, download the latest version and see if it solves your problem.&lt;/p&gt; 
&lt;p&gt;If the problem happens with the latest release, submit a new issue at &lt;a href=&quot;https://github.com/AlDanial/cloc/issues&quot;&gt;https://github.com/AlDanial/cloc/issues&lt;/a&gt; &lt;em&gt;only&lt;/em&gt; if you can supply enough information for anyone reading the issue report to reproduce the problem. That means providing&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; the operating system you&#39;re running on&lt;/li&gt; 
 &lt;li&gt; the cloc command with all options&lt;/li&gt; 
 &lt;li&gt; the code you are counting (URL to a public git repo or zip file or tar file, et cetera)&lt;/li&gt; 
&lt;/ol&gt; The last item is generally problematic. If the code base is proprietary or amounts to more than a few dozen kilobytes, you&#39;ll need to try to reconstruct similar inputs or demonstrate the problem with an existing public code base. 
&lt;p&gt;Problem reports that cannot be reproduced will be ignored and eventually closed.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;citation&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Citation ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Please use the following bibtex entry to cite cloc in a publication:&lt;/p&gt; 
&lt;pre&gt;
@software{adanial_cloc,
  author       = {Albert Danial},
  title        = {cloc: v1.92},
  month        = dec,
  year         = 2021,
  publisher    = {Zenodo},
  version      = {v1.92},
  doi          = {10.5281/zenodo.5760077},
  url          = {https://doi.org/10.5281/zenodo.5760077}
}
&lt;/pre&gt; 
&lt;p&gt;(Update the version number and corresponding year if this entry is outdated.)&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Acknowledgments&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Acknowledgments ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wolframroesler&quot;&gt;Wolfram Rösler&lt;/a&gt; provided most of the code examples in the test suite. These examples come from his &lt;a href=&quot;http://helloworldcollection.de/&quot;&gt;Hello World collection&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ismet Kursunoglu found errors with the MUMPS counter and provided access to a computer with a large body of MUMPS code to test cloc.&lt;/p&gt; 
&lt;p&gt;Tod Huggins gave helpful suggestions for the Visual Basic filters.&lt;/p&gt; 
&lt;p&gt;Anton Demichev found a flaw with the JSP counter in cloc v0.76 and wrote the XML output generator for the &lt;code&gt;--xml&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;Reuben Thomas pointed out that ISO C99 allows &lt;code&gt;//&lt;/code&gt; as a comment marker, provided code for the &lt;code&gt;--no3&lt;/code&gt; and &lt;code&gt;--stdin-name&lt;/code&gt; options, counting the m4 language, and suggested several user-interface enhancements.&lt;/p&gt; 
&lt;p&gt;Michael Bello provided code for the &lt;code&gt;--opt-match-f&lt;/code&gt;, &lt;code&gt;--opt-not-match-f&lt;/code&gt;, &lt;code&gt;--opt-match-d&lt;/code&gt;, and &lt;code&gt;--opt-not-match-d&lt;/code&gt; options.&lt;/p&gt; 
&lt;p&gt;Mahboob Hussain inspired the &lt;code&gt;--original-dir&lt;/code&gt; and &lt;code&gt;--skip-uniqueness&lt;/code&gt; options, found a bug in the duplicate file detection logic and improved the JSP filter.&lt;/p&gt; 
&lt;p&gt;Randy Sharo found and fixed an uninitialized variable bug for shell scripts having only one line.&lt;/p&gt; 
&lt;p&gt;Steven Baker found and fixed a problem with the YAML output generator.&lt;/p&gt; 
&lt;p&gt;Greg Toth provided code to improve blank line detection in COBOL.&lt;/p&gt; 
&lt;p&gt;Joel Oliveira provided code to let &lt;code&gt;--exclude-list-file&lt;/code&gt; handle directory name exclusion.&lt;/p&gt; 
&lt;p&gt;Blazej Kroll provided code to produce an XSLT file, &lt;code&gt;cloc-diff.xsl&lt;/code&gt;, when producing XML output for the &lt;code&gt;--diff&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;Denis Silakov enhanced the code which generates &lt;code&gt;cloc.xsl&lt;/code&gt; when using &lt;code&gt;--by-file&lt;/code&gt; and &lt;code&gt;--by-file-by-lang&lt;/code&gt; options, and provided an XSL file that works with &lt;code&gt;--diff&lt;/code&gt; output.&lt;/p&gt; 
&lt;p&gt;Andy (&lt;a href=&quot;mailto:awalshe@sf.net&quot;&gt;awalshe@sf.net&lt;/a&gt;) provided code to fix several bugs: correct output of &lt;code&gt;--counted&lt;/code&gt; so that only files that are used in the code count appear and that results are shown by language rather than file name; allow &lt;code&gt;--diff&lt;/code&gt; output from multiple runs to be summed together with &lt;code&gt;--sum-reports&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Jari Aalto created the initial version of &lt;code&gt;cloc.1.pod&lt;/code&gt; and maintains the Debian package for cloc.&lt;/p&gt; 
&lt;p&gt;Mikkel Christiansen (&lt;a href=&quot;mailto:mikkels@gmail.com&quot;&gt;mikkels@gmail.com&lt;/a&gt;) provided counter definitions for Clojure and ClojureScript.&lt;/p&gt; 
&lt;p&gt;Vera Djuraskovic from &lt;a href=&quot;http://webhostinggeeks.com/&quot;&gt;Webhostinggeeks.com&lt;/a&gt; provided the &lt;a href=&quot;http://science.webhostinggeeks.com/cloc&quot;&gt;Serbo-Croatian&lt;/a&gt; translation.&lt;/p&gt; 
&lt;p&gt;Gill Ajoft of &lt;a href=&quot;http://www.ajoft.com&quot;&gt;Ajoft Software&lt;/a&gt; provided the &lt;a href=&quot;http://www.ajoft.com/wpaper/aj-cloc.html&quot;&gt;Bulgarian&lt;/a&gt; translation.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;http://newknowledgez.com/&quot;&gt;Knowledge Team&lt;/a&gt; provided the &lt;a href=&quot;http://newknowledgez.com/cloc.html&quot;&gt;Slovakian&lt;/a&gt; translation.&lt;/p&gt; 
&lt;p&gt;Erik Gooven Arellano Casillas provided an update to the MXML counter to recognize ActionScript comments.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://g14n.info&quot;&gt;Gianluca Casati&lt;/a&gt; created the &lt;a href=&quot;https://metacpan.org/pod/App::cloc&quot;&gt;cloc CPAN package&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- broken link
Mary Stefanova provided the
[Polish](http://www.trevister.com/blog/cloc.html)
translation. ---&gt; 
&lt;p&gt;Ryan Lindeman implemented the &lt;code&gt;--by-percent&lt;/code&gt; feature.&lt;/p&gt; 
&lt;p&gt;Kent C. Dodds, &lt;a href=&quot;https://twitter.com/kentcdodd&quot;&gt;@kentcdodds&lt;/a&gt;, created and maintains the npm package of cloc.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://kudoybook.com&quot;&gt;Viktoria Parnak&lt;/a&gt; provided the &lt;a href=&quot;http://blog.kudoybook.com/cloc/&quot;&gt;Ukrainian&lt;/a&gt; translation.&lt;/p&gt; 
&lt;p&gt;Natalie Harmann provided the &lt;a href=&quot;http://www.besteonderdelen.nl/blog/?p=5426&quot;&gt;Belarussian&lt;/a&gt; translation.&lt;/p&gt; 
&lt;p&gt;Nithyal at &lt;a href=&quot;http://healthcareadministrationdegree.co/&quot;&gt;Healthcare Administration Portal&lt;/a&gt; provided the &lt;a href=&quot;http://healthcareadministrationdegree.co/socialwork/aldanial-cloc/&quot;&gt;Tamil&lt;/a&gt; translation.&lt;/p&gt; 
&lt;p&gt;Patricia Motosan provided the &lt;a href=&quot;http://www.bildelestore.dk/blog/cloc-contele-de-linii-de-cod/&quot;&gt;Romanian&lt;/a&gt; translation.&lt;/p&gt; 
&lt;!-- broken link
The [Garcinia Cambogia Review Team](http://www.garciniacambogiareviews.ca/)
provided the
[Arabic translation](http://www.garciniacambogiareviews.ca/translations/aldanial-cloc/). ---&gt; 
&lt;p&gt;Gajk Melikyan provided the provided the &lt;a href=&quot;http://students.studybay.com/?p=34&quot;&gt;Armenian translation&lt;/a&gt; for &lt;a href=&quot;http://studybay.com&quot;&gt;http://studybay.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.forallworld.com/cloc-grof-sornyi-kodot/&quot;&gt;Hungarian translation&lt;/a&gt; courtesy of &lt;a href=&quot;http://www.forallworld.com/&quot;&gt;Zsolt Boros&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/stsnel&quot;&gt;Sietse Snel&lt;/a&gt; implemented the parallel processing capability available with the &lt;tt&gt;--processes=&lt;i&gt;N&lt;/i&gt;&lt;/tt&gt; switch.&lt;/p&gt; 
&lt;p&gt;The development of cloc was partially funded by the Northrop Grumman Corporation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt; &lt;a name=&quot;Copyright&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&quot; title=&quot;click to go to top of document&quot;&gt;Copyright ▲&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 2006-2025, &lt;a href=&quot;https://github.com/AlDanial&quot;&gt;Al Danial&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alx-tools/Betty</title>
      <link>https://github.com/alx-tools/Betty</link>
      <description>&lt;p&gt;Holberton-style C code checker written in Perl&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Betty&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/holbertonschool/Betty&quot;&gt;&lt;img src=&quot;https://travis-ci.org/holbertonschool/Betty.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Run the script &lt;code&gt;install.sh&lt;/code&gt; with &lt;strong&gt;sudo privileges&lt;/strong&gt; to install &lt;code&gt;betty-style&lt;/code&gt; and &lt;code&gt;betty-doc&lt;/code&gt; on your computer, along with the following manuals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;betty(1)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;betty-style(1)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;betty-doc(1)&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Please visit the &lt;a href=&quot;https://github.com/holbertonschool/Betty/wiki&quot;&gt;Betty Wiki&lt;/a&gt; for the full specifications of Betty coding and documentation styles.&lt;/p&gt; 
&lt;p&gt;You&#39;ll also find some references and some tools for common text editors such as Emacs and Atom.&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;Run the following command to check if your code/doc fits the Betty Style (mostly inspired from the Linux Kernel style):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ShellSession&quot;&gt;betty-style file1 [file2 [file3 [...]]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ShellSession&quot;&gt;betty-doc file1 [file2 [file3 [...]]]
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>adrienverge/openfortivpn</title>
      <link>https://github.com/adrienverge/openfortivpn</link>
      <description>&lt;p&gt;Client for PPP+TLS VPN tunnel services&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openfortivpn&lt;/h1&gt; 
&lt;p&gt;openfortivpn is a client for PPP+TLS VPN tunnel services. It spawns a pppd process and operates the communication between the gateway and this process.&lt;/p&gt; 
&lt;p&gt;It is compatible with Fortinet VPNs.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;man openfortivpn
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Simply connect to a VPN:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;openfortivpn vpn-gateway:8443 --username=foo
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Connect to a VPN using an authentication realm:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;openfortivpn vpn-gateway:8443 --username=foo --realm=bar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Store password securely with a pinentry program:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;openfortivpn vpn-gateway:8443 --username=foo --pinentry=pinentry-mac
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Connect with a user certificate and no password:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;openfortivpn vpn-gateway:8443 --username= --password= --user-cert=cert.pem --user-key=key.pem
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Connect using SAML login:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;openfortivpn vpn-gateway:8443 --saml-login
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Don&#39;t set IP routes and don&#39;t add VPN nameservers to &lt;code&gt;/etc/resolv.conf&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;openfortivpn vpn-gateway:8443 -u foo --no-routes --no-dns --pppd-no-peerdns
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Using a configuration file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;openfortivpn -c /etc/openfortivpn/my-config
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With &lt;code&gt;/etc/openfortivpn/my-config&lt;/code&gt; containing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;host = vpn-gateway
port = 8443
username = foo
set-dns = 0
pppd-use-peerdns = 0
# X509 certificate sha256 sum, trust only this one!
trusted-cert = e46d4aff08ba6914e64daa85bc6112a422fa7ce16631bff0b592a28556f993db
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For the full list of config options, see the &lt;code&gt;CONFIGURATION&lt;/code&gt; section of&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;man openfortivpn
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Smartcard&lt;/h2&gt; 
&lt;p&gt;Smartcard support needs &lt;code&gt;openssl pkcs engine&lt;/code&gt; and &lt;code&gt;opensc&lt;/code&gt; to be installed. The pkcs11-engine from libp11 needs to be compiled with p11-kit-devel installed. Check &lt;a href=&quot;https://github.com/adrienverge/openfortivpn/issues/464&quot;&gt;#464&lt;/a&gt; for a discussion of known issues in this area.&lt;/p&gt; 
&lt;p&gt;To make use of your smartcard put at least &lt;code&gt;pkcs11:&lt;/code&gt; to the user-cert config or commandline option. It takes the full or a partial PKCS#11 token URI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;user-cert = pkcs11:
user-cert = pkcs11:token=someuser
user-cert = pkcs11:model=PKCS%2315%20emulated;manufacturer=piv_II;serial=012345678;token=someuser
username =
password =
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In most cases &lt;code&gt;user-cert = pkcs11:&lt;/code&gt; will do it, but if needed you can get the token-URI with &lt;code&gt;p11tool --list-token-urls&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Multiple readers are currently not supported.&lt;/p&gt; 
&lt;p&gt;Smartcard support has been tested with Yubikey under Linux, but other PIV enabled smartcards may work too. On Mac OS X Mojave it is known that the pkcs engine-by-id is not found.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;h3&gt;Installing existing packages&lt;/h3&gt; 
&lt;p&gt;Some Linux distributions provide &lt;code&gt;openfortivpn&lt;/code&gt; packages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://packages.fedoraproject.org/pkgs/openfortivpn&quot;&gt;Fedora / CentOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://software.opensuse.org/package/openfortivpn&quot;&gt;openSUSE / SLE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://packages.gentoo.org/packages/net-vpn/openfortivpn&quot;&gt;Gentoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NixOS/nixpkgs/tree/master/pkgs/tools/networking/openfortivpn&quot;&gt;NixOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://archlinux.org/packages/extra/x86_64/openfortivpn&quot;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://packages.debian.org/stable/openfortivpn&quot;&gt;Debian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://packages.ubuntu.com/search?keywords=openfortivpn&quot;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dev.getsol.us/source/openfortivpn/&quot;&gt;Solus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pkgs.alpinelinux.org/package/edge/testing/x86_64/openfortivpn&quot;&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;On macOS both &lt;a href=&quot;https://formulae.brew.sh/formula/openfortivpn&quot;&gt;Homebrew&lt;/a&gt; and &lt;a href=&quot;https://ports.macports.org/port/openfortivpn&quot;&gt;MacPorts&lt;/a&gt; provide an &lt;code&gt;openfortivpn&lt;/code&gt; package. Either &lt;a href=&quot;https://brew.sh/&quot;&gt;install Homebrew&lt;/a&gt; then install openfortivpn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Install &#39;Homebrew&#39;
/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;

# Install &#39;openfortivpn&#39;
brew install openfortivpn
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or &lt;a href=&quot;https://www.macports.org/install.php&quot;&gt;install MacPorts&lt;/a&gt; then install openfortivpn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Install &#39;openfortivpn&#39;
sudo port install openfortivpn
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A more complete overview can be obtained from &lt;a href=&quot;https://repology.org/project/openfortivpn/versions&quot;&gt;repology&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Building and installing from source&lt;/h3&gt; 
&lt;p&gt;For other distros, you&#39;ll need to build and install from source:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install build dependencies.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;RHEL/CentOS/Fedora: &lt;code&gt;gcc&lt;/code&gt; &lt;code&gt;automake&lt;/code&gt; &lt;code&gt;autoconf&lt;/code&gt; &lt;code&gt;openssl-devel&lt;/code&gt; &lt;code&gt;make&lt;/code&gt; &lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Debian/Ubuntu: &lt;code&gt;gcc&lt;/code&gt; &lt;code&gt;automake&lt;/code&gt; &lt;code&gt;autoconf&lt;/code&gt; &lt;code&gt;libssl-dev&lt;/code&gt; &lt;code&gt;make&lt;/code&gt; &lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Arch Linux: &lt;code&gt;gcc&lt;/code&gt; &lt;code&gt;automake&lt;/code&gt; &lt;code&gt;autoconf&lt;/code&gt; &lt;code&gt;openssl&lt;/code&gt; &lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Gentoo Linux: &lt;code&gt;net-dialup/ppp&lt;/code&gt; &lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;openSUSE: &lt;code&gt;gcc&lt;/code&gt; &lt;code&gt;automake&lt;/code&gt; &lt;code&gt;autoconf&lt;/code&gt; &lt;code&gt;libopenssl-devel&lt;/code&gt; &lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;macOS (Homebrew): &lt;code&gt;automake&lt;/code&gt; &lt;code&gt;autoconf&lt;/code&gt; &lt;code&gt;openssl@1.1&lt;/code&gt; &lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;FreeBSD: &lt;code&gt;automake&lt;/code&gt; &lt;code&gt;autoconf&lt;/code&gt; &lt;code&gt;libressl&lt;/code&gt; &lt;code&gt;pkgconf&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;On Linux, if you manage your kernel yourself, ensure to compile those modules:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;CONFIG_PPP=m
CONFIG_PPP_ASYNC=m
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On macOS, install &#39;Homebrew&#39; to install the build dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Install &#39;Homebrew&#39;
/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;

# Install Dependencies
brew install automake autoconf openssl@1.1 pkg-config

# You may need to make this openssl available to compilers and pkg-config
export LDFLAGS=&quot;-L/usr/local/opt/openssl/lib $LDFLAGS&quot;
export CPPFLAGS=&quot;-I/usr/local/opt/openssl/include $CPPFLAGS&quot;
export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl/lib/pkgconfig:$PKG_CONFIG_PATH&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build and install.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./autogen.sh
./configure --prefix=/usr/local --sysconfdir=/etc
make
sudo make install
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If targeting platforms with pppd &amp;lt; 2.5.0 such as current version of macOS, we suggest you configure with option --enable-legacy-pppd:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./autogen.sh
./configure --prefix=/usr/local --sysconfdir=/etc --enable-legacy-pppd
make
sudo make install
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to specify the openssl location you can set the &lt;code&gt;$PKG_CONFIG_PATH&lt;/code&gt; environment variable. For fine-tuning check the available configure arguments with &lt;code&gt;./configure --help&lt;/code&gt; especially when you are cross compiling.&lt;/p&gt; &lt;p&gt;Finally, install runtime dependency &lt;code&gt;ppp&lt;/code&gt; or &lt;code&gt;pppd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Running as root?&lt;/h2&gt; 
&lt;p&gt;openfortivpn needs elevated privileges at three steps during tunnel set up:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;when spawning a &lt;code&gt;/usr/sbin/pppd&lt;/code&gt; process;&lt;/li&gt; 
 &lt;li&gt;when setting IP routes through VPN (when the tunnel is up);&lt;/li&gt; 
 &lt;li&gt;when adding nameservers to &lt;code&gt;/etc/resolv.conf&lt;/code&gt; (when the tunnel is up).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For these reasons, you need to use &lt;code&gt;sudo openfortivpn&lt;/code&gt;. If you need it to be usable by non-sudoer users, you might consider adding an entry in &lt;code&gt;/etc/sudoers&lt;/code&gt; or a file under &lt;code&gt;/etc/sudoers.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;visudo -f /etc/sudoers.d/openfortivpn
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Cmnd_Alias  OPENFORTIVPN = /usr/bin/openfortivpn

%adm       ALL = (ALL) OPENFORTIVPN
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adapt the above example by changing the &lt;code&gt;openfortivpn&lt;/code&gt; path or choosing a group different from &lt;code&gt;adm&lt;/code&gt; - such as a dedicated &lt;code&gt;openfortivpn&lt;/code&gt; group.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Make sure only trusted users can run openfortivpn as root! As described in &lt;a href=&quot;https://github.com/adrienverge/openfortivpn/issues/54&quot;&gt;#54&lt;/a&gt;, a malicious user could use &lt;code&gt;--pppd-plugin&lt;/code&gt; and &lt;code&gt;--pppd-log&lt;/code&gt; options to divert the program&#39;s behaviour.&lt;/p&gt; 
&lt;h2&gt;SSO/SAML/2FA&lt;/h2&gt; 
&lt;p&gt;In some cases, the server may require the VPN client to load and interact with a web page containing JavaScript. Depending on the complexity of the web page, interpreting the web page might be beyond the reach of a command line program such as openfortivpn.&lt;/p&gt; 
&lt;p&gt;In such cases, you may use an external program spawning a full-fledged web browser such as &lt;a href=&quot;https://github.com/gm-vm/openfortivpn-webview&quot;&gt;openfortivpn-webview&lt;/a&gt; to authenticate and retrieve a session cookie. This cookie can be fed to openfortivpn using option &lt;code&gt;--cookie-on-stdin&lt;/code&gt;. Obviously, such a solution requires a graphic session.&lt;/p&gt; 
&lt;p&gt;When started using &lt;code&gt;--saml-login&lt;/code&gt; the program creates a web server that accepts SAML login requests. To login using SAML you just have to open &lt;code&gt;&amp;lt;your-vpn-domain&amp;gt;/remote/saml/start?redirect=1&lt;/code&gt; and follow the login steps. At the end of the login process the page will be redirected to &lt;code&gt;http://127.0.0.1:8020/?id=&amp;lt;session-id&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Feel free to make pull requests!&lt;/p&gt; 
&lt;p&gt;C coding style should follow the &lt;a href=&quot;https://www.kernel.org/doc/html/latest/process/coding-style.html&quot;&gt;Linux kernel coding style&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
