<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Ruby Weekly Trending</title>
    <description>Weekly Trending of Ruby in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:52:53 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>Homebrew/homebrew-core</title>
      <link>https://github.com/Homebrew/homebrew-core</link>
      <description>&lt;p&gt;üçª Default formulae for the missing package manager for macOS (or Linux)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Homebrew Core&lt;/h1&gt; 
&lt;p&gt;Core formulae for the Homebrew package manager.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/orgs/Homebrew/discussions&quot;&gt;Homebrew/discussions (forum)&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;How do I install these formulae?&lt;/h2&gt; 
&lt;p&gt;Just &lt;code&gt;brew install &amp;lt;formula&amp;gt;&lt;/code&gt;. This is the default tap for Homebrew and is installed by default.&lt;/p&gt; 
&lt;h2&gt;More Documentation, Troubleshooting, Contributing, Security, Community, Donations, License and Sponsors&lt;/h2&gt; 
&lt;p&gt;See these sections in &lt;a href=&quot;https://github.com/Homebrew/brew#homebrew&quot;&gt;Homebrew/brew&#39;s README&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fluent/fluentd</title>
      <link>https://github.com/fluent/fluentd</link>
      <description>&lt;p&gt;Fluentd: Unified Logging Layer (project under CNCF)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fluentd: Open-Source Log Collector&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fluent/fluentd/actions/workflows/linux-test.yaml&quot;&gt;&lt;img src=&quot;https://github.com/fluent/fluentd/actions/workflows/linux-test.yaml/badge.svg?branch=master&quot; alt=&quot;Testing on Ubuntu&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fluent/fluentd/actions/workflows/windows-test.yaml&quot;&gt;&lt;img src=&quot;https://github.com/fluent/fluentd/actions/workflows/windows-test.yaml/badge.svg?branch=master&quot; alt=&quot;Testing on Windows&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fluent/fluentd/actions/workflows/macos-test.yaml&quot;&gt;&lt;img src=&quot;https://github.com/fluent/fluentd/actions/workflows/macos-test.yaml/badge.svg?branch=master&quot; alt=&quot;Testing on macOS&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/github/fluent/fluentd&quot;&gt;&lt;img src=&quot;https://codeclimate.com/github/fluent/fluentd/badges/gpa.svg?sanitize=true&quot; alt=&quot;Code Climate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/1189&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/1189/badge&quot; alt=&quot;CII Best Practices&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://scorecard.dev/viewer/?uri=github.com/fluent/fluentd&quot;&gt;&lt;img src=&quot;https://api.scorecard.dev/projects/github.com/fluent/fluentd/badge&quot; alt=&quot;OpenSSF Scorecard&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.fluentd.org/&quot;&gt;Fluentd&lt;/a&gt; collects events from various data sources and writes them to files, RDBMS, NoSQL, IaaS, SaaS, Hadoop and so on. Fluentd helps you unify your logging infrastructure (Learn more about the &lt;a href=&quot;https://www.fluentd.org/blog/unified-logging-layer&quot;&gt;Unified Logging Layer&lt;/a&gt;).&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://www.fluentd.org/images/fluentd-architecture.png&quot; width=&quot;500px&quot;&gt; &lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;$ gem install fluentd
$ fluentd -s conf
$ fluentd -c conf/fluent.conf &amp;amp;
$ echo &#39;{&quot;json&quot;:&quot;message&quot;}&#39; | fluent-cat debug.test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Branch&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;master: For v1 development.&lt;/li&gt; 
 &lt;li&gt;v0.12: For v0.12. This is deprecated version. we already stopped supporting (See &lt;a href=&quot;https://www.fluentd.org/blog/drop-schedule-announcement-in-2019&quot;&gt;https://www.fluentd.org/blog/drop-schedule-announcement-in-2019&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ruby 3.2 or later&lt;/li&gt; 
 &lt;li&gt;git&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; should be in &lt;code&gt;PATH&lt;/code&gt;. On Windows, you can use &lt;code&gt;Github for Windows&lt;/code&gt; and &lt;code&gt;GitShell&lt;/code&gt; for easy setup.&lt;/p&gt; 
&lt;h3&gt;Install dependent gems&lt;/h3&gt; 
&lt;p&gt;Use bundler:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ gem install bundler
$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run test&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;$ bundle exec rake test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run specified test via &lt;code&gt;TEST&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ bundle exec rake test TEST=test/test_specified_path.rb
$ bundle exec rake test TEST=test/test_*.rb
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;https://www.fluentd.org/&quot;&gt;https://www.fluentd.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation: &lt;a href=&quot;https://docs.fluentd.org/&quot;&gt;https://docs.fluentd.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Project repository: &lt;a href=&quot;https://github.com/fluent&quot;&gt;https://github.com/fluent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Discussion: &lt;a href=&quot;https://github.com/fluent/fluentd/discussions&quot;&gt;https://github.com/fluent/fluentd/discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Slack / Community: &lt;a href=&quot;https://slack.fluentd.org&quot;&gt;https://slack.fluentd.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Newsletters: &lt;a href=&quot;https://www.fluentd.org/newsletter&quot;&gt;https://www.fluentd.org/newsletter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Author: &lt;a href=&quot;https://github.com/frsyuki&quot;&gt;Sadayuki Furuhashi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Copyright: 2011-2021 Fluentd Authors&lt;/li&gt; 
 &lt;li&gt;License: Apache License, Version 2.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;A third party security audit was performed by Cure53, you can see the full report &lt;a href=&quot;https://raw.githubusercontent.com/fluent/fluentd/master/docs/SECURITY_AUDIT.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/fluent/fluentd/master/SECURITY.md&quot;&gt;SECURITY&lt;/a&gt; to contact us about vulnerability.&lt;/p&gt; 
&lt;h2&gt;Contributors:&lt;/h2&gt; 
&lt;p&gt;Patches contributed by &lt;a href=&quot;https://github.com/fluent/fluentd/contributors&quot;&gt;great developers&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pglombardo/PasswordPusher</title>
      <link>https://github.com/pglombardo/PasswordPusher</link>
      <description>&lt;p&gt;üîê Securely share sensitive information with automatic expiration &amp; deletion after a set number of views or duration. Track who, what and when with full audit logs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://pwpush.com/&quot;&gt;&lt;img src=&quot;https://pwpush.fra1.cdn.digitaloceanspaces.com/branding/logos/horizontal-logo-small.png&quot; alt=&quot;Password Pusher Front Page&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Simple &amp;amp; Secure Password Sharing with Auto-Expiration of Shared Items&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://twitter.com/pwpush&quot;&gt;&lt;img src=&quot;https://badgen.net/twitter/follow/pwpush&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://badgen.net/github/stars/pglombardo/PasswordPusher&quot; alt=&quot;&quot;&gt; &lt;a href=&quot;https://stats.uptimerobot.com/6xJjNtPr93&quot;&gt;&lt;img src=&quot;https://badgen.net/uptime-robot/month/m789048867-17b5770ccd78208645662f1f&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/repositories&quot;&gt;&lt;img src=&quot;https://badgen.net/docker/pulls/pglombardo/pwpush-ephemeral&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/actions/workflows/ruby-tests.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/pglombardo/PasswordPusher/ruby-tests.yml&quot; alt=&quot;GitHub Workflow Status (with event)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pglombardo/pwpush-cli/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr%20author%3Aapp%2Fdependabot&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg?sanitize=true&quot; alt=&quot;Dependencies Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pglombardo/pwpush-cli/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--versions-e10079.svg?sanitize=true&quot; alt=&quot;Semantic Versions&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/pglombardo/PasswordPusher&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p&gt;Give your users the tools to be secure by default.&lt;/p&gt; 
&lt;p&gt;Password Pusher is an open source application to communicate sensitive information over the web. Secret links expire after a certain number of views and/or time has passed.&lt;/p&gt; 
&lt;p&gt;Hosted at &lt;a href=&quot;https://pwpush.com&quot;&gt;pwpush.com&lt;/a&gt; but you can also easily run your own private instance with just a few steps.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Easy-to-install:&lt;/strong&gt; Host your own via Docker, a cloud service or just use &lt;a href=&quot;https://pwpush.com&quot;&gt;pwpush.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source:&lt;/strong&gt; No blackbox code. Only trusted, tested and reviewed open source code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Versatile:&lt;/strong&gt; Push passwords, text, files or URLs that auto-expire and self delete.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Audit logging:&lt;/strong&gt; Track and control what you&#39;ve shared and see who has viewed it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Encrypted storage:&lt;/strong&gt; All sensitive data is stored encrypted and deleted entirely once expired.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Host your own:&lt;/strong&gt; Database backed or ephemeral, easily run your own instance isolated from the world.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Admin Dashboard:&lt;/strong&gt; Manage your self-hosted instance with a built in admin dashboard.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Logins&lt;/strong&gt;: Invite your colleagues and track what is pushed and who retrieved it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Unbranded delivery page:&lt;/strong&gt; No logos, superfluous text or unrelated links to confuse end users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Internationalized:&lt;/strong&gt; 29 language translations are bundled in. Easily selectable via UI or URL&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;JSON API:&lt;/strong&gt; Raw JSON API available for 3rd party tools or command line via &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Command line interface:&lt;/strong&gt; Automate your password distribution with CLI tools or custom scripts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Themes:&lt;/strong&gt; &lt;a href=&quot;https://docs.pwpush.com/docs/themes/&quot;&gt;26 themes&lt;/a&gt; bundled in courtesy of &lt;a href=&quot;https://github.com/thomaspark/bootswatch&quot;&gt;Bootswatch&lt;/a&gt;. Select with a simple environment variable.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable:&lt;/strong&gt; Change text and default options via environment variables.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Light &amp;amp; dark themes:&lt;/strong&gt; Via CSS @media integration, the default site theme follows your local preferences.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Re-Brandable:&lt;/strong&gt; Completely white label: customize the theme, site name, tagline and logo to fit your environment.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom CSS:&lt;/strong&gt; Bundle in your own custom CSS to add your own design.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&amp;gt;10 Years Old:&lt;/strong&gt; Password Pusher has securely delivered millions and millions of passwords in its 14 year history.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Actively Maintained:&lt;/strong&gt; I happily work for the good karma of the great IT/Security community.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Honest Software:&lt;/strong&gt; Open source written and maintained by &lt;a href=&quot;https://github.com/pglombardo&quot;&gt;me&lt;/a&gt; with the help of some great contributors. No organizations, corporations or evil agendas.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;üíå --&amp;gt; Sign up for &lt;a href=&quot;https://buttondown.email/pwpush?tag=github&quot;&gt;the newsletter&lt;/a&gt; to get updates on big releases, security issues, new features, integrations, tips and more.&lt;/p&gt; 
&lt;p&gt;Follow Password Pusher updates on &lt;a href=&quot;https://x.com/pwpush&quot;&gt;X&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/pwpush&quot;&gt;Reddit&lt;/a&gt;, &lt;a href=&quot;https://gettr.com/user/pwpush&quot;&gt;Gettr&lt;/a&gt; and &lt;a href=&quot;https://www.facebook.com/pwpush&quot;&gt;Facebook&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/front-page-large.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/front-page-thumb.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/audit-log-large.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/audit-log-thumb.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/secret-url-languages-large.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/secret-url-languages-thumb.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/password-generator-large.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/password-generator-thumb.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/dark-theme.gif&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/dark-theme-thumb.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/preliminary-step.gif&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pglombardo/PasswordPusher/master/app/assets/images/features/preliminary-step-thumb.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Editions&lt;/h1&gt; 
&lt;p&gt;If you are considering to self-host the OSS edition, you can try it out immediately at &lt;a href=&quot;https://oss.pwpush.com&quot;&gt;https://oss.pwpush.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In 2024, I introduced a set of &lt;strong&gt;Pro features&lt;/strong&gt; exclusively on &lt;a href=&quot;https://pwpush.com&quot;&gt;pwpush.com&lt;/a&gt; to better support the project.&lt;/p&gt; 
&lt;p&gt;These Pro features are periodically migrated to the OSS edition. You can read more about how this works &lt;a href=&quot;https://docs.pwpush.com/docs/editions/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To see the differences between pwpush.com and the OSS edition take a look at the &lt;a href=&quot;https://pwpush.com/features#matrix&quot;&gt;Feature Matrix&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;‚ö°Ô∏è Quick Start&lt;/h1&gt; 
&lt;p&gt;‚Üí Run your own instance with &lt;code&gt;docker run -d -p &quot;5100:5100&quot; pglombardo/pwpush:stable&lt;/code&gt; or a &lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/tree/master/containers/docker/all-in-one&quot;&gt;production ready setup with a database &amp;amp; SSL/TLS&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;or&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;‚Üí Use one of the &lt;a href=&quot;https://docs.pwpush.com/docs/3rd-party-tools/&quot;&gt;3rd party tools&lt;/a&gt; that interface with Password Pusher.&lt;/p&gt; 
&lt;h1&gt;üìö Documentation&lt;/h1&gt; 
&lt;p&gt;See the full &lt;a href=&quot;https://docs.pwpush.com&quot;&gt;Password Pusher documentation here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;üìº Credits&lt;/h1&gt; 
&lt;h2&gt;Security Researchers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Kullai Metikala | &lt;a href=&quot;https://github.com/kullaisec&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;https://www.linkedin.com/in/kullai-metikala-8378b122a/&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://global.ptsecurity.com&quot;&gt;Positive Technologies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Igniter | &lt;a href=&quot;https://github.com/igniter07&quot;&gt;Github&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Translators&lt;/h2&gt; 
&lt;p&gt;Thanks to our great translators!&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/oyale&quot;&gt;Oyale&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/ca&quot;&gt;Catalan&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Finn Skaaning&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/da/p/ny&quot;&gt;Danish&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mtchetch&quot;&gt;Mihail Tchetchelnitski&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/fi/p/uusi&quot;&gt;Finnish&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/tibo59&quot;&gt;Thibaut&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/fr/p/Nouveau&quot;&gt;French&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Thomas W√∂lk&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/de/p/neu&quot;&gt;German&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/confluencepoint/&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/confluencepoint&quot;&gt;Twitter&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Martin Otto&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/de/p/neu&quot;&gt;German&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Robin J√∏rgensen&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/no/p/ny&quot;&gt;Norwegian&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/drpt&quot;&gt;≈Åukasz&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/pl/p/nowy&quot;&gt;Polish&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jairhenrique/&quot;&gt;Jair Henrique&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/pt-br/p/novo&quot;&gt;Portuguese&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.linkedin.com/in/ifabriciorodrigues/&quot;&gt;Fabr√≠cio Rodrigues&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/pt-br/p/novo&quot;&gt;Portuguese&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/IvanMFreitas&quot;&gt;Ivan Freitas&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/pt-br/p/novo&quot;&gt;Portuguese&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sara Faria&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/pt-br/p/novo&quot;&gt;Portuguese&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/oyale&quot;&gt;Oyale&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/pt-br/p/novo&quot;&gt;Spanish&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;johan323&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/sv/p/ny&quot;&gt;Swedish&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fredrik Arvas&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/sv/p/ny&quot;&gt;Swedish&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Pedro Marques&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pwpush.com/pt-pt/p/novo&quot;&gt;European Portuguese&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Also thanks to &lt;a href=&quot;https://translation.io&quot;&gt;translation.io&lt;/a&gt; for their great service in managing translations. It&#39;s also generously free for open source projects.&lt;/p&gt; 
&lt;h2&gt;Containers&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/fiskhest&quot;&gt;@fiskhest&lt;/a&gt; the &lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/tree/master/containers/kubernetes&quot;&gt;Kubernetes installation instructions and manifests&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/sfarosu&quot;&gt;@sfarosu&lt;/a&gt; for &lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/pull/82&quot;&gt;contributing&lt;/a&gt; the Docker, Kubernetes &amp;amp; OpenShift container support.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/sirux88&quot;&gt;sirux88&lt;/a&gt; for cleaning up the Docker files and adding multistage builds.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/iandunn&quot;&gt;@iandunn&lt;/a&gt; for better password form security.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/kaspergrubbe&quot;&gt;Kasper &#39;kap√∂w&#39; Grubbe&lt;/a&gt; for the &lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/pull/3&quot;&gt;JSON POST fix&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://www.reddit.com/user/JarvisAndPi&quot;&gt;JarvisAndPi&lt;/a&gt; for the favicon design&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;...and many more. See the &lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/graphs/contributors&quot;&gt;Contributors page&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h1&gt;üéÅ Donations&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Donations are in no way required of any Password Pusher user. The project, at it&#39;s core, is and always has been open source and free to use.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;With that said, if you find Password Pusher useful and would like to support &amp;amp; accelerate it&#39;s continued development all donations are &lt;em&gt;greatly appreciated&lt;/em&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://pwpush.fra1.cdn.digitaloceanspaces.com/misc/pwpush-donate-stripe-qr-small.png&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;or&lt;/th&gt; 
   &lt;th&gt;&lt;a href=&quot;https://buy.stripe.com/7sI4gCgTT1tr6WY3cd&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Donate-Stripe-blue.svg?sanitize=true&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
&lt;/table&gt; 
&lt;p&gt;As an alternative to donations, you can also support the project by signing up for a &lt;a href=&quot;https://pwpush.com/pricing&quot;&gt;paid plan at pwpush.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Donations are used to pay for the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hosting costs (Digital Ocean, Hatchbox, Brevo Support &amp;amp; Transactional Email, Docker Hub, Uptime Robot)&lt;/li&gt; 
 &lt;li&gt;Community Support&lt;/li&gt; 
 &lt;li&gt;On-going Maintenance 
  &lt;ul&gt; 
   &lt;li&gt;Upgrades&lt;/li&gt; 
   &lt;li&gt;Testing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Continued development 
  &lt;ul&gt; 
   &lt;li&gt;Development tools&lt;/li&gt; 
   &lt;li&gt;License costs&lt;/li&gt; 
   &lt;li&gt;Documentation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Legal Disclaimer:&lt;/strong&gt; Please note that Password Pusher is owned and operated by Apnotic, LLC, a for-profit company owned and operated by &lt;a href=&quot;https://github.com/pglombardo&quot;&gt;me&lt;/a&gt;. While donations are greatly appreciated and help support the project&#39;s development, they are not tax deductible as charitable contributions. Donations made to Password Pusher directly support a commercial entity and should be viewed as a voluntary payment to help sustain the service and encourage continued development.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;See Also:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pwpush.com/docs/faq/#what-is-apnotic&quot;&gt;What is Apnotic, LLC?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pwpush.com/docs/faq/#trust-is-a-concern--why-should-i-trust-and-use-password-pusher&quot;&gt;Trust is a concern. Why should I trust and use Password Pusher?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pwpush.com/posts/feature-pipeline/&quot;&gt;How does the Pro feature pipeline work?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;üõ° License&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/pglombardo/PasswordPusher&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;code&gt;Apache License 2.0&lt;/code&gt; license. See &lt;a href=&quot;https://github.com/pglombardo/PasswordPusher/raw/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h1&gt;üìÉ Citation&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@misc{PasswordPusher,
  author = {Peter Giacomo Lombardo},
  title = {Securely share sensitive information with automatic expiration &amp;amp; deletion after a set number of views or duration. Track who, what and when with full audit logs.},
  year = {2025},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/pglombardo/PasswordPusher}}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>basecamp/kamal</title>
      <link>https://github.com/basecamp/kamal</link>
      <description>&lt;p&gt;Deploy web apps anywhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kamal: Deploy web apps anywhere&lt;/h1&gt; 
&lt;p&gt;From bare metal to cloud VMs, deploy web apps anywhere with zero downtime. Kamal uses &lt;a href=&quot;https://github.com/basecamp/kamal-proxy&quot;&gt;kamal-proxy&lt;/a&gt; to seamlessly switch requests between containers. Works seamlessly across multiple servers, using SSHKit to execute commands. Originally built for Rails apps, Kamal will work with any type of web app that can be containerized with Docker.&lt;/p&gt; 
&lt;p&gt;‚û°Ô∏è See &lt;a href=&quot;https://kamal-deploy.org&quot;&gt;kamal-deploy.org&lt;/a&gt; for documentation on &lt;a href=&quot;https://kamal-deploy.org/docs/installation&quot;&gt;installation&lt;/a&gt;, &lt;a href=&quot;https://kamal-deploy.org/docs/configuration&quot;&gt;configuration&lt;/a&gt;, and &lt;a href=&quot;https://kamal-deploy.org/docs/commands&quot;&gt;commands&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing to the documentation&lt;/h2&gt; 
&lt;p&gt;Please help us improve Kamal&#39;s documentation on the &lt;a href=&quot;https://github.com/basecamp/kamal-site&quot;&gt;the basecamp/kamal-site repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Kamal is released under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fastlane/fastlane</title>
      <link>https://github.com/fastlane/fastlane</link>
      <description>&lt;p&gt;üöÄ The easiest way to automate building and releasing your iOS and Android apps&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/fastlane/assets/fastlane_text.png&quot;&gt; &lt;img src=&quot;https://github.com/fastlane/fastlane/raw/master/fastlane/assets/fastlane_text.png?raw=true&quot; alt=&quot;fastlane Logo&quot; width=&quot;500&quot;&gt; &lt;/a&gt; &lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FastlaneTools&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-@FastlaneTools-blue.svg?style=flat&quot; alt=&quot;Twitter: @FastlaneTools&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg?style=flat&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://rubygems.org/gems/fastlane&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/fastlane.svg?style=flat&quot; alt=&quot;Gem&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/fastlane&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/fastlane.json&amp;amp;query=$.versions.stable&amp;amp;label=homebrew&quot; alt=&quot;Homebrew&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/fastlane/fastlane&quot;&gt;&lt;img src=&quot;https://img.shields.io/circleci/project/github/fastlane/fastlane/master.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/CONTRIBUTING.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PRs welcome!&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;fastlane&lt;/em&gt; is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2 align=&quot;center&quot;&gt; ‚ú® All fastlane docs were moved to &lt;a href=&quot;https://docs.fastlane.tools/&quot;&gt;docs.fastlane.tools&lt;/a&gt; ‚ú® &lt;/h2&gt; 
&lt;hr&gt; 
&lt;h2&gt;Need Help?&lt;/h2&gt; 
&lt;p&gt;Before submitting a new GitHub issue, please make sure to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out &lt;a href=&quot;https://docs.fastlane.tools&quot;&gt;docs.fastlane.tools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Search for &lt;a href=&quot;https://github.com/fastlane/fastlane/issues&quot;&gt;existing GitHub issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the above doesn&#39;t help, please &lt;a href=&quot;https://github.com/fastlane/fastlane/issues&quot;&gt;submit an issue&lt;/a&gt; on GitHub and provide information about your setup, in particular the output of the &lt;code&gt;fastlane env&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you want to report a regression in &lt;em&gt;fastlane&lt;/em&gt; (something that has worked before, but broke with a new release), please mark your issue title as such using &lt;code&gt;[Regression] Your title here&lt;/code&gt;. This enables us to quickly detect and fix regressions.&lt;/p&gt; 
&lt;h2&gt;&lt;em&gt;fastlane&lt;/em&gt; team&lt;/h2&gt; 
&lt;!-- This table is regenerated and resorted on each release --&gt; 
&lt;table id=&quot;team&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td id=&quot;roger-oba&quot;&gt; &lt;a href=&quot;https://github.com/rogerluan&quot;&gt; &lt;img src=&quot;https://github.com/rogerluan.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/rogerluan_&quot;&gt;Roger Oba&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;aaron-brager&quot;&gt; &lt;a href=&quot;https://github.com/getaaron&quot;&gt; &lt;img src=&quot;https://github.com/getaaron.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/getaaron&quot;&gt;Aaron Brager&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;iulian-onofrei&quot;&gt; &lt;a href=&quot;https://github.com/revolter&quot;&gt; &lt;img src=&quot;https://github.com/revolter.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/Revolt666&quot;&gt;Iulian Onofrei&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;stefan-natchev&quot;&gt; &lt;a href=&quot;https://github.com/snatchev&quot;&gt; &lt;img src=&quot;https://github.com/snatchev.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/snatchev&quot;&gt;Stefan Natchev&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;jimmy-dee&quot;&gt; &lt;a href=&quot;https://github.com/jdee&quot;&gt; &lt;img src=&quot;https://github.com/jdee.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;Jimmy Dee&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;manish-rathi&quot;&gt; &lt;a href=&quot;https://github.com/crazymanish&quot;&gt; &lt;img src=&quot;https://github.com/crazymanish.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/iammanishrathi&quot;&gt;Manish Rathi&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;fumiya-nakamura&quot;&gt; &lt;a href=&quot;https://github.com/nafu&quot;&gt; &lt;img src=&quot;https://github.com/nafu.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/nafu003&quot;&gt;Fumiya Nakamura&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;luka-mirosevic&quot;&gt; &lt;a href=&quot;https://github.com/lmirosevic&quot;&gt; &lt;img src=&quot;https://github.com/lmirosevic.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/lmirosevic&quot;&gt;Luka Mirosevic&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;felix-krause&quot;&gt; &lt;a href=&quot;https://github.com/KrauseFx&quot;&gt; &lt;img src=&quot;https://github.com/KrauseFx.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/KrauseFx&quot;&gt;Felix Krause&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;jan-piotrowski&quot;&gt; &lt;a href=&quot;https://github.com/janpio&quot;&gt; &lt;img src=&quot;https://github.com/janpio.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/Sujan&quot;&gt;Jan Piotrowski&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;j√©r√¥me-lacoste&quot;&gt; &lt;a href=&quot;https://github.com/lacostej&quot;&gt; &lt;img src=&quot;https://github.com/lacostej.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/lacostej&quot;&gt;J√©r√¥me Lacoste&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;≈Çukasz-grabowski&quot;&gt; &lt;a href=&quot;https://github.com/lucgrabowski&quot;&gt; &lt;img src=&quot;https://github.com/lucgrabowski.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;≈Åukasz Grabowski&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;satoshi-namai&quot;&gt; &lt;a href=&quot;https://github.com/ainame&quot;&gt; &lt;img src=&quot;https://github.com/ainame.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/ainame&quot;&gt;Satoshi Namai&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;kohki-miki&quot;&gt; &lt;a href=&quot;https://github.com/giginet&quot;&gt; &lt;img src=&quot;https://github.com/giginet.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/giginet&quot;&gt;Kohki Miki&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;max-ott&quot;&gt; &lt;a href=&quot;https://github.com/max-ott&quot;&gt; &lt;img src=&quot;https://github.com/max-ott.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/ott_max&quot;&gt;Max Ott&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;jorge-revuelta-h&quot;&gt; &lt;a href=&quot;https://github.com/minuscorp&quot;&gt; &lt;img src=&quot;https://github.com/minuscorp.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/minuscorp&quot;&gt;Jorge Revuelta H&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;maksym-grebenets&quot;&gt; &lt;a href=&quot;https://github.com/mgrebenets&quot;&gt; &lt;img src=&quot;https://github.com/mgrebenets.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/mgrebenets&quot;&gt;Maksym Grebenets&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;matthew-ellis&quot;&gt; &lt;a href=&quot;https://github.com/matthewellis&quot;&gt; &lt;img src=&quot;https://github.com/matthewellis.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/mellis1995&quot;&gt;Matthew Ellis&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;joshua-liebowitz&quot;&gt; &lt;a href=&quot;https://github.com/taquitos&quot;&gt; &lt;img src=&quot;https://github.com/taquitos.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/taquitos&quot;&gt;Joshua Liebowitz&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;josh-holtz&quot;&gt; &lt;a href=&quot;https://github.com/joshdholtz&quot;&gt; &lt;img src=&quot;https://github.com/joshdholtz.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/joshdholtz&quot;&gt;Josh Holtz&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;danielle-tomlinson&quot;&gt; &lt;a href=&quot;https://github.com/endocrimes&quot;&gt; &lt;img src=&quot;https://github.com/endocrimes.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/endocrimes&quot;&gt;Danielle Tomlinson&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;andrew-mcburney&quot;&gt; &lt;a href=&quot;https://github.com/armcburney&quot;&gt; &lt;img src=&quot;https://github.com/armcburney.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/armcburney&quot;&gt;Andrew McBurney&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;daniel-jankowski&quot;&gt; &lt;a href=&quot;https://github.com/mollyIV&quot;&gt; &lt;img src=&quot;https://github.com/mollyIV.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/mollyIV&quot;&gt;Daniel Jankowski&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;helmut-januschka&quot;&gt; &lt;a href=&quot;https://github.com/hjanuschka&quot;&gt; &lt;img src=&quot;https://github.com/hjanuschka.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/hjanuschka&quot;&gt;Helmut Januschka&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;olivier-halligon&quot;&gt; &lt;a href=&quot;https://github.com/AliSoftware&quot;&gt; &lt;img src=&quot;https://github.com/AliSoftware.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/aligatr&quot;&gt;Olivier Halligon&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;manu-wallner&quot;&gt; &lt;a href=&quot;https://github.com/milch&quot;&gt; &lt;img src=&quot;https://github.com/milch.png&quot; width=&quot;140px;&quot;&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/acrooow&quot;&gt;Manu Wallner&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Special thanks to all &lt;a href=&quot;https://github.com/fastlane/fastlane/graphs/contributors&quot;&gt;contributors&lt;/a&gt; for extending and improving &lt;em&gt;fastlane&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribute to &lt;em&gt;fastlane&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://raw.githubusercontent.com/fastlane/fastlane/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to help with &lt;em&gt;fastlane&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Help us keep &lt;em&gt;fastlane&lt;/em&gt; open and inclusive. Please read and follow our &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Metrics&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;fastlane&lt;/em&gt; tracks a few key metrics to understand how developers are using the tool and to help us know what areas need improvement. No personal/sensitive information is ever collected. Metrics that are collected include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The number of &lt;em&gt;fastlane&lt;/em&gt; runs&lt;/li&gt; 
 &lt;li&gt;A salted hash of the app identifier or package name, which helps us anonymously identify unique usage of &lt;em&gt;fastlane&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can easily opt-out of metrics collection by adding &lt;code&gt;opt_out_usage&lt;/code&gt; at the top of your &lt;code&gt;Fastfile&lt;/code&gt; or by setting the environment variable &lt;code&gt;FASTLANE_OPT_OUT_USAGE&lt;/code&gt;. &lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/fastlane_core/lib/fastlane_core/analytics&quot;&gt;Check out the metrics code on GitHub&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT license. See the &lt;a href=&quot;https://raw.githubusercontent.com/fastlane/fastlane/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h2 align=&quot;center&quot;&gt; ‚ú® All fastlane docs were moved to &lt;a href=&quot;https://docs.fastlane.tools/&quot;&gt;docs.fastlane.tools&lt;/a&gt; ‚ú® &lt;/h2&gt; 
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>DataDog/dd-trace-rb</title>
      <link>https://github.com/DataDog/dd-trace-rb</link>
      <description>&lt;p&gt;Datadog Tracing Ruby Client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Datadog Trace Client&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/datadog/&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/datadog&quot; alt=&quot;Gem&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codecov.io/gh/DataDog/dd-trace-rb/branch/master&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/DataDog/dd-trace-rb/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://datadog.github.io/dd-trace-rb/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/YARD-documentation-blue&quot; alt=&quot;YARD documentation&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;datadog&lt;/code&gt; is Datadog&#39;s client library for Ruby. It includes a suite of tools which provide visibility into the performance and security of Ruby applications, to enable Ruby developers to identify bottlenecks and other issues.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;If you&#39;re upgrading from a 1.x version, check out the &lt;a href=&quot;https://github.com/DataDog/dd-trace-rb/raw/release/docs/UpgradeGuide2.md&quot;&gt;upgrade guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;For a product overview, installation, and configuration check out our &lt;a href=&quot;https://docs.datadoghq.com/tracing/setup/ruby/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For the gem API, check out our &lt;a href=&quot;https://datadog.github.io/dd-trace-rb/&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For descriptions of terminology used in APM, take a look at the &lt;a href=&quot;https://docs.datadoghq.com/tracing/glossary/&quot;&gt;APM Terms and Concepts&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For contributing, checkout the &lt;a href=&quot;https://github.com/DataDog/dd-trace-rb/raw/master/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&quot;https://github.com/DataDog/dd-trace-rb/raw/master/docs/DevelopmentGuide.md&quot;&gt;development guide&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chatwoot/chatwoot</title>
      <link>https://github.com/chatwoot/chatwoot</link>
      <description>&lt;p&gt;Open-source live-chat, email support, omni-channel desk. An alternative to Intercom, Zendesk, Salesforce Service Cloud etc. üî•üí¨&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;üö® Note: This branch is unstable. For the stable branch&#39;s source code, please use the branch &lt;a href=&quot;https://github.com/chatwoot/chatwoot/tree/3.x&quot;&gt;3.x&lt;/a&gt;&lt;/h2&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/2246121/282256557-1570674b-d142-4198-9740-69404cc6a339.png#gh-light-mode-only&quot; width=&quot;100%&quot; alt=&quot;Chat dashboard dark mode&quot;&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/2246121/282256632-87f6a01b-6467-4e0e-8a93-7bbf66d03a17.png#gh-dark-mode-only&quot; width=&quot;100%&quot; alt=&quot;Chat dashboard&quot;&gt; 
&lt;hr&gt; 
&lt;h1&gt;Chatwoot&lt;/h1&gt; 
&lt;p&gt;Customer engagement suite, an open-source alternative to Intercom, Zendesk, Salesforce Service Cloud etc.&lt;/p&gt; 
&lt;p&gt; &lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&quot; alt=&quot;Deploy to Heroku&quot;&gt; &lt;img width=&quot;150&quot; alt=&quot;Deploy&quot; src=&quot;https://www.herokucdn.com/deploy/button.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&quot; alt=&quot;Deploy to DigitalOcean&quot;&gt; &lt;img width=&quot;200&quot; alt=&quot;Deploy to DO&quot; src=&quot;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt; &lt;a href=&quot;https://codeclimate.com/github/chatwoot/chatwoot/maintainability&quot;&gt;&lt;img src=&quot;https://api.codeclimate.com/v1/badges/e6e3f66332c91e5a4c0c/maintainability&quot; alt=&quot;Maintainability&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/circleci/build/github/chatwoot/chatwoot&quot; alt=&quot;CircleCI Badge&quot;&gt; &lt;a href=&quot;https://hub.docker.com/r/chatwoot/chatwoot/&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/chatwoot/chatwoot&quot; alt=&quot;Docker Pull Badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/chatwoot/chatwoot/&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/cloud/build/chatwoot/chatwoot&quot; alt=&quot;Docker Build Badge&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/chatwoot/chatwoot&quot; alt=&quot;Commits-per-month&quot;&gt; &lt;a title=&quot;Crowdin&quot; target=&quot;_self&quot; href=&quot;https://chatwoot.crowdin.com/chatwoot&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/e/37ced7eba411064bd792feb3b7a28b16/localized.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/cJXdrwS&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/647412545203994635&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://status.chatwoot.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fuptime.json&quot; alt=&quot;uptime&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://status.chatwoot.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fresponse-time.json&quot; alt=&quot;response time&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://artifacthub.io/packages/helm/chatwoot/chatwoot&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/artifact-hub&quot; alt=&quot;Artifact HUB&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/2246121/282255783-ee8a50c9-f42d-4752-8201-2d59965a663d.png#gh-light-mode-only&quot; width=&quot;100%&quot; alt=&quot;Chat dashboard dark mode&quot;&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/2246121/282255784-3d1994ec-d895-4ff5-ac68-d819987e1869.png#gh-dark-mode-only&quot; width=&quot;100%&quot; alt=&quot;Chat dashboard&quot;&gt; 
&lt;p&gt;Chatwoot is an open-source, self-hosted customer engagement suite. Chatwoot lets you view and manage your customer data, communicate with them irrespective of which medium they use, and re-engage them based on their profile.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Chatwoot supports the following conversation channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: Talk to your customers using our live chat widget and make use of our SDK to identify a user and provide contextual support.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;: Connect your Facebook pages and start replying to the direct messages to your page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Instagram&lt;/strong&gt;: Connect your Instagram profile and start replying to the direct messages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: Connect your Twitter profiles and reply to direct messages or the tweets where you are mentioned.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Telegram&lt;/strong&gt;: Connect your Telegram bot and reply to your customers right from a single dashboard.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;WhatsApp&lt;/strong&gt;: Connect your WhatsApp business account and manage the conversation in Chatwoot.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Line&lt;/strong&gt;: Connect your Line account and manage the conversations in Chatwoot.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SMS&lt;/strong&gt;: Connect your Twilio SMS account and reply to the SMS queries in Chatwoot.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;API Channel&lt;/strong&gt;: Build custom communication channels using our API channel.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: Forward all your email queries to Chatwoot and view it in our integrated dashboard.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And more.&lt;/p&gt; 
&lt;p&gt;Other features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;CRM&lt;/strong&gt;: Save all your customer information right inside Chatwoot, use contact notes to log emails, phone calls, or meeting notes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom Attributes&lt;/strong&gt;: Define custom attribute attributes to store information about a contact or a conversation and extend the product to match your workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Shared multi-brand inboxes&lt;/strong&gt;: Manage multiple brands or pages using a shared inbox.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Private notes&lt;/strong&gt;: Use @mentions and private notes to communicate internally about a conversation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Canned responses (Saved replies)&lt;/strong&gt;: Improve the response rate by adding saved replies for frequently asked questions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Conversation Labels&lt;/strong&gt;: Use conversation labels to create custom workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto assignment&lt;/strong&gt;: Chatwoot intelligently assigns a ticket to the agents who have access to the inbox depending on their availability and load.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Conversation continuity&lt;/strong&gt;: If the user has provided an email address through the chat widget, Chatwoot will send an email to the customer under the agent name so that the user can continue the conversation over the email.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-lingual support&lt;/strong&gt;: Chatwoot supports 10+ languages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful API &amp;amp; Webhooks&lt;/strong&gt;: Extend the capability of the software using Chatwoot‚Äôs webhooks and APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: Chatwoot natively integrates with Slack right now. Manage your conversations in Slack without logging into the dashboard.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Detailed documentation is available at &lt;a href=&quot;https://www.chatwoot.com/help-center&quot;&gt;chatwoot.com/help-center&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Translation process&lt;/h2&gt; 
&lt;p&gt;The translation process for Chatwoot web and mobile app is managed at &lt;a href=&quot;https://translate.chatwoot.com&quot;&gt;https://translate.chatwoot.com&lt;/a&gt; using Crowdin. Please read the &lt;a href=&quot;https://www.chatwoot.com/docs/contributing/translating-chatwoot-to-your-language&quot;&gt;translation guide&lt;/a&gt; for contributing to Chatwoot.&lt;/p&gt; 
&lt;h2&gt;Branching model&lt;/h2&gt; 
&lt;p&gt;We use the &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;git-flow&lt;/a&gt; branching model. The base branch is &lt;code&gt;develop&lt;/code&gt;. If you are looking for a stable version, please use the &lt;code&gt;master&lt;/code&gt; or tags labelled as &lt;code&gt;v1.x.x&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;h3&gt;Heroku one-click deploy&lt;/h3&gt; 
&lt;p&gt;Deploying Chatwoot to Heroku is a breeze. It&#39;s as simple as clicking this button:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.svg?sanitize=true&quot; alt=&quot;Deploy&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Follow this &lt;a href=&quot;https://www.chatwoot.com/docs/environment-variables&quot;&gt;link&lt;/a&gt; to understand setting the correct environment variables for the app to work with all the features. There might be breakages if you do not set the relevant environment variables.&lt;/p&gt; 
&lt;h3&gt;DigitalOcean 1-Click Kubernetes deployment&lt;/h3&gt; 
&lt;p&gt;Chatwoot now supports 1-Click deployment to DigitalOcean as a kubernetes app.&lt;/p&gt; 
&lt;a href=&quot;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&quot; alt=&quot;Deploy to DigitalOcean&quot;&gt; &lt;img width=&quot;200&quot; alt=&quot;Deploy to DO&quot; src=&quot;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&quot;&gt; &lt;/a&gt; 
&lt;h3&gt;Other deployment options&lt;/h3&gt; 
&lt;p&gt;For other supported options, checkout our &lt;a href=&quot;https://chatwoot.com/deploy&quot;&gt;deployment page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;Looking to report a vulnerability? Please refer our &lt;a href=&quot;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Community? Questions? Support ?&lt;/h2&gt; 
&lt;p&gt;If you need help or just want to hang out, come, say hi on our &lt;a href=&quot;https://discord.gg/cJXdrwS&quot;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; 
&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; 
&lt;p&gt;Thanks goes to all these &lt;a href=&quot;https://www.chatwoot.com/docs/contributors&quot;&gt;wonderful people&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/chatwoot/chatwoot/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/chatwoot/contributors.svg?width=890&amp;amp;button=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Chatwoot&lt;/em&gt; ¬© 2017-2025, Chatwoot Inc - Released under the MIT License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>urbanadventurer/WhatWeb</title>
      <link>https://github.com/urbanadventurer/WhatWeb</link>
      <description>&lt;p&gt;Next generation web scanner&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/urbanadventurer/whatweb/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPLv2-brightgreen.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/stable_release-0.5.5-blue.svg?sanitize=true&quot; alt=&quot;Stable Release&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/plugins-1824-brightgreen.svg?sanitize=true&quot; alt=&quot;WhatWeb Plugins&quot;&gt; &lt;a href=&quot;https://repology.org/project/whatweb/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/tiny-repos/whatweb.svg?sanitize=true&quot; alt=&quot;Repositories&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://morningstarsecurity.com/wp-content/uploads/2019/02/WhatWeb-Logo-800px.png&quot; alt=&quot;logo&quot; title=&quot;WhatWeb Logo&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;WhatWeb - Next generation web scanner&lt;/h1&gt; 
&lt;p&gt;Developed by Andrew Horton &lt;a href=&quot;https://github.com/urbanadventurer/&quot;&gt;urbanadventurer&lt;/a&gt; and Brendan Coles &lt;a href=&quot;https://github.com/bcoles/&quot;&gt;bcoles&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Latest Release: v0.5.5. January 16, 2021&lt;/p&gt; 
&lt;p&gt;License: GPLv2&lt;/p&gt; 
&lt;p&gt;This product is subject to the terms detailed in the license agreement. For more information about WhatWeb visit:&lt;/p&gt; 
&lt;p&gt;Homepage: &lt;a href=&quot;https://morningstarsecurity.com/research/whatweb&quot;&gt;https://morningstarsecurity.com/research/whatweb&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Wiki: &lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb/wiki/&quot;&gt;https://github.com/urbanadventurer/WhatWeb/wiki/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you have any questions, comments or concerns regarding WhatWeb, please consult the documentation prior to contacting one of the developers. Your feedback is always welcome.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;About WhatWeb&lt;/li&gt; 
 &lt;li&gt;Example Usage&lt;/li&gt; 
 &lt;li&gt;Usage&lt;/li&gt; 
 &lt;li&gt;Logging &amp;amp; Output&lt;/li&gt; 
 &lt;li&gt;Plugins&lt;/li&gt; 
 &lt;li&gt;Aggression&lt;/li&gt; 
 &lt;li&gt;Performance &amp;amp; Stability&lt;/li&gt; 
 &lt;li&gt;Optional Dependencies&lt;/li&gt; 
 &lt;li&gt;Writing Plugins&lt;/li&gt; 
 &lt;li&gt;Updates &amp;amp; Additional Information&lt;/li&gt; 
 &lt;li&gt;Release History&lt;/li&gt; 
 &lt;li&gt;Credits&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About WhatWeb&lt;/h2&gt; 
&lt;p&gt;WhatWeb identifies websites. Its goal is to answer the question, &quot;What is that Website?&quot;. WhatWeb recognises web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 1800 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.&lt;/p&gt; 
&lt;p&gt;WhatWeb can be stealthy and fast, or thorough but slow. WhatWeb supports an aggression level to control the trade off between speed and reliability. When you visit a website in your browser, the transaction includes many hints of what web technologies are powering that website. Sometimes a single webpage visit contains enough information to identify a website but when it does not, WhatWeb can interrogate the website further. The default level of aggression, called &#39;stealthy&#39;, is the fastest and requires only one HTTP request of a website. This is suitable for scanning public websites. More aggressive modes were developed for use in penetration tests.&lt;/p&gt; 
&lt;p&gt;Most WhatWeb plugins are thorough and recognise a range of cues from subtle to obvious. For example, most WordPress websites can be identified by the meta HTML tag, e.g. &#39;
 &lt;meta name=&quot;generator&quot; content=&quot;WordPress 2.6.5&quot;&gt;&#39;, but a minority of WordPress websites remove this identifying tag but this does not thwart WhatWeb. The WordPress WhatWeb plugin has over 15 tests, which include checking the favicon, default installation files, login pages, and checking for &quot;/wp-content/&quot; within relative links.&lt;/p&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Over 1800 plugins&lt;/li&gt; 
 &lt;li&gt;Control the trade off between speed/stealth and reliability&lt;/li&gt; 
 &lt;li&gt;Performance tuning. Control how many websites to scan concurrently.&lt;/li&gt; 
 &lt;li&gt;Multiple log formats: Brief (greppable), Verbose (human readable), XML, JSON, MagicTree, RubyObject, MongoDB, ElasticSearch, SQL.&lt;/li&gt; 
 &lt;li&gt;Proxy support including TOR&lt;/li&gt; 
 &lt;li&gt;Custom HTTP headers&lt;/li&gt; 
 &lt;li&gt;Basic HTTP authentication&lt;/li&gt; 
 &lt;li&gt;Control over webpage redirection&lt;/li&gt; 
 &lt;li&gt;IP address ranges&lt;/li&gt; 
 &lt;li&gt;Fuzzy matching&lt;/li&gt; 
 &lt;li&gt;Result certainty awareness&lt;/li&gt; 
 &lt;li&gt;Custom plugins defined on the command line&lt;/li&gt; 
 &lt;li&gt;IDN (International Domain Name) support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;p&gt;Using WhatWeb to scan reddit.com.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./whatweb reddit.com
http://reddit.com [301 Moved Permanently] Country[UNITED STATES][US], HTTPServer[snooserv], IP[151.101.65.140], RedirectLocation[https://www.reddit.com/], UncommonHeaders[retry-after,x-served-by,x-cache-hits,x-timer], Via-Proxy[1.1 varnish]
https://www.reddit.com/ [200 OK] Cookies[edgebucket,eu_cookie_v2,loid,rabt,rseor3,session_tracker,token], Country[UNITED STATES][US], Email[banner@2x.png,snoo-home@2x.png], Frame, HTML5, HTTPServer[snooserv], HttpOnly[token], IP[151.101.37.140], Open-Graph-Protocol[website], Script[text/javascript], Strict-Transport-Security[max-age=15552000; includeSubDomains; preload], Title[reddit: the front page of the internet], UncommonHeaders[fastly-restarts,x-served-by,x-cache-hits,x-timer], Via-Proxy[1.1 varnish], X-Frame-Options[SAMEORIGIN]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;
.$$$     $.                                   .$$$     $.         
$$$$     $$. .$$$  $$$ .$$$$$$.  .$$$$$$$$$$. $$$$     $$. .$$$$$$$. .$$$$$$. 
$ $$     $$$ $ $$  $$$ $ $$$$$$. $$$$$ $$$$$$ $ $$     $$$ $ $$   $$ $ $$$$$$.
$ `$     $$$ $ `$  $$$ $ `$  $$$ $$&#39; $ `$ `$$ $ `$     $$$ $ `$      $ `$  $$$&#39;
$. $     $$$ $. $$$$$$ $. $$$$$$ `$  $. $  :&#39; $. $     $$$ $. $$$$   $. $$$$$.
$::$  .  $$$ $::$  $$$ $::$  $$$     $::$     $::$  .  $$$ $::$      $::$  $$$$
$;;$ $$$ $$$ $;;$  $$$ $;;$  $$$     $;;$     $;;$ $$$ $$$ $;;$      $;;$  $$$$
$$$$$$ $$$$$ $$$$  $$$ $$$$  $$$     $$$$     $$$$$$ $$$$$ $$$$$$$$$ $$$$$$$$$&#39;

WhatWeb - Next generation web scanner version 0.5.5.
Developed by Andrew Horton (urbanadventurer) and Brendan Coles (bcoles)
Homepage: https://morningstarsecurity.com/research/whatweb

Usage: whatweb [options] &amp;lt;URLs&amp;gt;

TARGET SELECTION:
  &amp;lt;TARGETs&amp;gt;             Enter URLs, hostnames, IP addresses, filenames or
                        IP ranges in CIDR, x.x.x-x, or x.x.x.x-x.x.x.x
                        format.
  --input-file=FILE, -i Read targets from a file. You can pipe
                        hostnames or URLs directly with -i /dev/stdin.

TARGET MODIFICATION:
  --url-prefix          Add a prefix to target URLs.
  --url-suffix          Add a suffix to target URLs.
  --url-pattern         Insert the targets into a URL. Requires --input-file,
                        eg. www.example.com/%insert%/robots.txt 

AGGRESSION:
  The aggression level controls the trade-off between speed/stealth and
  reliability.
  --aggression, -a=LEVEL Set the aggression level. Default: 1.
  Aggression levels are:
  1. Stealthy   Makes one HTTP request per target. Also follows redirects.
  3. Aggressive If a level 1 plugin is matched, additional requests will be
      made.
  4. Heavy      Makes a lot of HTTP requests per target. Aggressive tests from
      all plugins are used for all URLs.

HTTP OPTIONS:
  --user-agent, -U=AGENT Identify as AGENT instead of WhatWeb/0.5.5.
  --header, -H          Add an HTTP header. eg &quot;Foo:Bar&quot;. Specifying a default
                        header will replace it. Specifying an empty value, eg.
                        &quot;User-Agent:&quot; will remove the header.
  --follow-redirect=WHEN Control when to follow redirects. WHEN may be `never&#39;,
                        `http-only&#39;, `meta-only&#39;, `same-site&#39;, or `always&#39;.
                        Default: always.
  --max-redirects=NUM   Maximum number of contiguous redirects. Default: 10.

AUTHENTICATION:
  --user, -u=&amp;lt;user:password&amp;gt; HTTP basic authentication.
  --cookie, -c=COOKIES  Provide cookies, e.g. &#39;name=value; name2=value2&#39;.
  --cookiejar=FILE      Read cookies from a file.

PROXY:
  --proxy           &amp;lt;hostname[:port]&amp;gt; Set proxy hostname and port.
                    Default: 8080.
  --proxy-user      &amp;lt;username:password&amp;gt; Set proxy user and password.

PLUGINS:
  --list-plugins, -l            List all plugins.
  --info-plugins, -I=[SEARCH]   List all plugins with detailed information.
                                Optionally search with keywords in a comma
                                delimited list.
  --search-plugins=STRING       Search plugins for a keyword.
  --plugins, -p=LIST  Select plugins. LIST is a comma delimited set of 
                      selected plugins. Default is all.
                      Each element can be a directory, file or plugin name and
                      can optionally have a modifier, eg. + or -
                      Examples: +/tmp/moo.rb,+/tmp/foo.rb
                      title,md5,+./plugins-disabled/
                      ./plugins-disabled,-md5
                      -p + is a shortcut for -p +plugins-disabled.

  --grep, -g=STRING|REGEXP      Search for STRING or a Regular Expression. Shows 
                                only the results that match.
                                Examples: --grep &quot;hello&quot;
                                --grep &quot;/he[l]*o/&quot;
  --custom-plugin=DEFINITION\tDefine a custom plugin named Custom-Plugin,
  --custom-plugin=DEFINITION  Define a custom plugin named Custom-Plugin,
                        Examples: &quot;:text=&amp;gt;&#39;powered by abc&#39;&quot;
                        &quot;:version=&amp;gt;/powered[ ]?by ab[0-9]/&quot;
                        &quot;:ghdb=&amp;gt;&#39;intitle:abc \&quot;powered by abc\&quot;&#39;&quot;
                        &quot;:md5=&amp;gt;&#39;8666257030b94d3bdb46e05945f60b42&#39;&quot;
  --dorks=PLUGIN        List Google dorks for the selected plugin.

OUTPUT:
  --verbose, -v         Verbose output includes plugin descriptions. Use twice
                        for debugging.
  --colour,--color=WHEN control whether colour is used. WHEN may be `never&#39;,
                        `always&#39;, or `auto&#39;.
  --quiet, -q           Do not display brief logging to STDOUT.
  --no-errors           Suppress error messages.

LOGGING:
  --log-brief=FILE        Log brief, one-line output.
  --log-verbose=FILE      Log verbose output.
  --log-errors=FILE       Log errors.
  --log-xml=FILE          Log XML format.
  --log-json=FILE         Log JSON format.
  --log-sql=FILE          Log SQL INSERT statements.
  --log-sql-create=FILE   Create SQL database tables.
  --log-json-verbose=FILE Log JSON Verbose format.
  --log-magictree=FILE    Log MagicTree XML format.
  --log-object=FILE       Log Ruby object inspection format.
  --log-mongo-database    Name of the MongoDB database.
  --log-mongo-collection  Name of the MongoDB collection. Default: whatweb.
  --log-mongo-host        MongoDB hostname or IP address. Default: 0.0.0.0.
  --log-mongo-username    MongoDB username. Default: nil.
  --log-mongo-password    MongoDB password. Default: nil.  
  --log-elastic-index     Name of the index to store results. Default: whatweb 
  --log-elastic-host      Host:port of the elastic http interface. Default: 127.0.0.1:9200
  
PERFORMANCE &amp;amp; STABILITY:
  --max-threads, -t       Number of simultaneous threads. Default: 25.
  --open-timeout          Time in seconds. Default: 15.
  --read-timeout          Time in seconds. Default: 30.
  --wait=SECONDS          Wait SECONDS between connections.
                          This is useful when using a single thread.

HELP &amp;amp; MISCELLANEOUS:
  --short-help            Short usage help.
  --help, -h              Complete usage help.
  --debug                 Raise errors in plugins.
  --version               Display version information. (WhatWeb 0.5.5).

EXAMPLE USAGE:
* Scan example.com.
  ./whatweb example.com
* Scan reddit.com slashdot.org with verbose plugin descriptions.
  ./whatweb -v reddit.com slashdot.org
* An aggressive scan of wired.com detects the exact version of WordPress.
  ./whatweb -a 3 www.wired.com
* Scan the local network quickly and suppress errors.
  whatweb --no-errors 192.168.0.0/24
* Scan the local network for https websites.
  whatweb --no-errors --url-prefix https:// 192.168.0.0/24
* Scan for crossdomain policies in the Alexa Top 1000.
  ./whatweb -i plugin-development/alexa-top-100.txt \
  --url-suffix /crossdomain.xml -p crossdomain_xml

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Logging &amp;amp; Output&lt;/h2&gt; 
&lt;p&gt;The following types of logging are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;--log-brief=FILE Brief, one-line, greppable format&lt;/li&gt; 
 &lt;li&gt;--log-verbose=FILE Verbose&lt;/li&gt; 
 &lt;li&gt;--log-xml=FILE XML format. XSL stylesheet is provided&lt;/li&gt; 
 &lt;li&gt;--log-json=FILE JSON format&lt;/li&gt; 
 &lt;li&gt;--log-json-verbose=FILE JSON verbose format&lt;/li&gt; 
 &lt;li&gt;--log-magictree=FILE MagicTree XML format&lt;/li&gt; 
 &lt;li&gt;--log-object=FILE Ruby object inspection format&lt;/li&gt; 
 &lt;li&gt;--log-mongo-database Name of the MongoDB database&lt;/li&gt; 
 &lt;li&gt;--log-mongo-collection Name of the MongoDB collection. Default: whatweb&lt;/li&gt; 
 &lt;li&gt;--log-mongo-host MongoDB hostname or IP address. Default: 0.0.0.0&lt;/li&gt; 
 &lt;li&gt;--log-mongo-username MongoDB username. Default: nil&lt;/li&gt; 
 &lt;li&gt;--log-mongo-password MongoDB password. Default: nil&lt;/li&gt; 
 &lt;li&gt;--log-elastic-index Name of the index to store results. Default: whatweb&lt;/li&gt; 
 &lt;li&gt;--log-elastic-host Host:port of the elastic http interface. Default: 127.0.0.1:9200&lt;/li&gt; 
 &lt;li&gt;--log-errors=FILE Log errors. This is usually printed to the screen in red.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can output to multiple logs simultaneously by specifying multiple command line logging options. Advanced users who want SQL output should read the source code to see unsupported features.&lt;/p&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;p&gt;Matches are made with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Text strings (case sensitive)&lt;/li&gt; 
 &lt;li&gt;Regular expressions&lt;/li&gt; 
 &lt;li&gt;Google Hack Database queries (limited set of keywords)&lt;/li&gt; 
 &lt;li&gt;MD5 hashes&lt;/li&gt; 
 &lt;li&gt;URL recognition&lt;/li&gt; 
 &lt;li&gt;HTML tag patterns&lt;/li&gt; 
 &lt;li&gt;Custom ruby code for passive and aggressive operations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To list the plugins supported:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./whatweb -l
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WhatWeb Plugin List&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;Plugin Name - Description
--------------------------------------------------------------------------------
1024-CMS - 1024 is one of a few CMS&#39;s leading the way with the implementation...
360-Web-Manager - 360-Web-Manager
3COM-NBX - 3COM NBX phone system. The NBX NetSet utility is a web interface i...
3dcart - 3dcart - The 3dcart Shopping Cart Software is a complete ecommerce s...
4D - 4D web application deployment server
4images - 4images is a powerful web-based image gallery management system. Fe...
... (truncated)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Search Plugins&lt;/h3&gt; 
&lt;p&gt;To view more detail about a plugin or search plugins for a keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./whatweb -I phpBB

WhatWeb Detailed Plugin List
Searching for phpBB
================================================================================
Plugin:         phpBB
--------------------------------------------------------------------------------
Description:    phpBB is a free forum 
Website:        http://phpbb.org/

Author:         Andrew Horton
Version:        0.3

Features:       [Yes]  Pattern Matching (7)
                [Yes]  Version detection from pattern matching
                [Yes]  Function for passive matches
                [Yes]  Function for aggressive matches
                [Yes]  Google Dorks (1)

Google Dorks:
[1] &quot;Powered by phpBB&quot;
================================================================================
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Plugin Selection&lt;/h3&gt; 
&lt;p&gt;All plugins are loaded by default.&lt;/p&gt; 
&lt;p&gt;Plugins can be selected by directories, files or plugin names as a comma delimited list with the -p or --plugin command line option.&lt;/p&gt; 
&lt;p&gt;Each list item may have a modifier: + adds to the full set, - removes from the full set and no modifier overrides the defaults.&lt;/p&gt; 
&lt;h3&gt;Examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;--plugins +plugins-disabled,-foobar&lt;/li&gt; 
 &lt;li&gt;--plugins +/tmp/moo.rb&lt;/li&gt; 
 &lt;li&gt;--plugins foobar (only select foobar)&lt;/li&gt; 
 &lt;li&gt;-p title,md5,+./plugins-disabled/&lt;/li&gt; 
 &lt;li&gt;-p ./plugins-disabled,-md5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The --dorks 
 &lt;plugin name&gt;
   command line option returns google dorks for the selected plugin. For example, --dorks wordpress returns &quot;is proudly powered by WordPress&quot;
 &lt;/plugin&gt;&lt;/p&gt; 
&lt;p&gt;The --grep, -g command line option searches the target page for the selected string and returns a match in a plugin called Grep if it is found.&lt;/p&gt; 
&lt;h2&gt;Aggression&lt;/h2&gt; 
&lt;p&gt;WhatWeb features several levels of aggression. By default the aggression level is set to 1 (stealthy) which sends a single HTTP GET request and also follows redirects.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--aggression, -a

  1. Stealthy Makes one HTTP request per target. Also follows redirects.
    2. Unused
    3. Aggressive Can make a handful of HTTP requests per target. This triggers
        aggressive plugins for targets only when those plugins are
        identified with a level 1 request first.
  4. Heavy  Makes a lot of HTTP requests per target. Aggressive tests from
        all plugins are used for all URLs.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Level 3 aggressive plugins will guess more URLs and perform actions that are potentially unsuitable without permission. WhatWeb currently does not support any intrusion/exploit level tests in plugins.&lt;/p&gt; 
&lt;h3&gt;An example of the different results between level 1 and level 3:&lt;/h3&gt; 
&lt;p&gt;A level 1, stealthy scan identifies that smartor.is-root.com/forum/ uses phpBB version 2:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./whatweb smartor.is-root.com/forum/
http://smartor.is-root.com/forum/ [200] PasswordField[password], HTTPServer[Apache/2.2.15], PoweredBy[phpBB], Apache[2.2.15], IP[88.198.177.36], phpBB[2], PHP[5.2.13], X-Powered-By[PHP/5.2.13], Cookies[phpbb2mysql_data,phpbb2mysql_sid], Title[Smartors Mods Forums - Reloaded], Country[GERMANY][DE]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A level 3, aggressive scan triggers additional tests in the phpBB plugin which identifies that the website uses phpBB version 2.0.20 or higher:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./whatweb -p plugins/phpbb.rb -a 3 smartor.is-root.com/forum/
http://smartor.is-root.com/forum/ [200] phpBB[2,&amp;gt;2.0.20]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the use of the -p argument to select only the phpBB plugin. It is advisable, but not mandatory, to select a specific plugin when attempting to fingerprint software versions in aggressive mode. This approach is far more stealthy as it will limit the number of requests.&lt;/p&gt; 
&lt;p&gt;WhatWeb has no caching so if you use aggressive plugins on redirecting URLs you may fetch the same files multiple times.&lt;/p&gt; 
&lt;h2&gt;Performance &amp;amp; Stability&lt;/h2&gt; 
&lt;p&gt;WhatWeb features several options to increase performance and stability.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;--max-threads, -t Number of simultaneous threads. Default: 25.&lt;/li&gt; 
 &lt;li&gt;--open-timeout Time in seconds. Default: 15&lt;/li&gt; 
 &lt;li&gt;--read-timeout Time in seconds. Default: 30&lt;/li&gt; 
 &lt;li&gt;--wait=SECONDS Wait SECONDS between connections This is useful when using a single thread.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The --wait and --max-threads commands can be used to assist in IDS evasion.&lt;/p&gt; 
&lt;p&gt;Changing the user-agent using the -U or --user-agent command line option will avoid the Snort IDS rule for WhatWeb.&lt;/p&gt; 
&lt;p&gt;If you are scanning ranges of IP addresses, it is much more efficient to use a port scanner like massscan to discover which have port 80 open before scanning with WhatWeb.&lt;/p&gt; 
&lt;p&gt;Character set detection, with the Charset plugin dramatically decreases performance by requiring more CPU. This is required by JSON and MongoDB logging.&lt;/p&gt; 
&lt;h2&gt;Optional Dependencies&lt;/h2&gt; 
&lt;p&gt;To enable MongoDB logging install the mongo gem. gem install mongo&lt;/p&gt; 
&lt;p&gt;To enable character set detection and MongoDB logging install the rchardet gem. gem install rchardet cp plugins-disabled/charset.rb my-plugins/&lt;/p&gt; 
&lt;h2&gt;Writing Plugins&lt;/h2&gt; 
&lt;p&gt;Plugins are easy to write. Start by going through the plugin tutorials in the &lt;em&gt;my-plugins/&lt;/em&gt; folder.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb/tree/master/my-plugins&quot;&gt;Plugin Tutorials&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;An overview of the plugin tutorials is here. &lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb/tree/master/plugin-development/plugin-tutorials.txt&quot;&gt;plugin-tutorials.txt&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;After progressing through the tutorials read through the Development section of the &lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb/wiki/&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb/wiki/Sources-for-Plugin-Writing&quot;&gt;Sources for Plugin Writing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb/wiki/How-to-develop-WhatWeb-plugins&quot;&gt;How to Develop WhatWeb Plugins (not up to date)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Updates &amp;amp; Additional Information&lt;/h2&gt; 
&lt;p&gt;The WhatWeb development build features regular updates.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check the development branches for unreleased updates.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Browse the wiki for more documentation and advanced usage techniques.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Wiki: &lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb/wiki/&quot;&gt;https://github.com/urbanadventurer/WhatWeb/wiki/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Release History&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Version 0.5.5 Released January 16th, 2021&lt;/li&gt; 
 &lt;li&gt;Version 0.5.4 Released December 14th, 2020&lt;/li&gt; 
 &lt;li&gt;Version 0.5.3 Released October 1st, 2020&lt;/li&gt; 
 &lt;li&gt;Version 0.5.2 Released June 9th, 2020&lt;/li&gt; 
 &lt;li&gt;Version 0.5.1 Released Feburary 25th, 2020&lt;/li&gt; 
 &lt;li&gt;Version 0.5.0 Released June 9th, 2019&lt;/li&gt; 
 &lt;li&gt;Version 0.4.9 Released November 23rd, 2017&lt;/li&gt; 
 &lt;li&gt;Version 0.4.8-dev (Continuous release from 2012 to 2017)&lt;/li&gt; 
 &lt;li&gt;Version 0.4.7 Released April 5th, 2011&lt;/li&gt; 
 &lt;li&gt;Version 0.4.6 Released March 25th, 2011&lt;/li&gt; 
 &lt;li&gt;Version 0.4.5 Released August 17th, 2010&lt;/li&gt; 
 &lt;li&gt;Version 0.4.4 Released June 29th, 2010&lt;/li&gt; 
 &lt;li&gt;Version 0.4.3 Released May 24th, 2010&lt;/li&gt; 
 &lt;li&gt;Version 0.4.2 Released April 30th, 2010&lt;/li&gt; 
 &lt;li&gt;Version 0.4.1 Released April 28th, 2010&lt;/li&gt; 
 &lt;li&gt;Version 0.4 Released March 14th, 2010&lt;/li&gt; 
 &lt;li&gt;Version 0.3 Released at Kiwicon III (kiwicon.org), November 2nd, 2009&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;h3&gt;Developers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Andrew Horton (@urbanadventurer)&lt;/li&gt; 
 &lt;li&gt;Brendan Coles (@bcoles)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;Thank you to the following people who have contributed to WhatWeb.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Emilio Casbas&lt;/li&gt; 
 &lt;li&gt;Louis Nyffenegger&lt;/li&gt; 
 &lt;li&gt;Patrik Wallstr√∂m (@pawal)&lt;/li&gt; 
 &lt;li&gt;Caleb Anderson (@dirtyfilthy)&lt;/li&gt; 
 &lt;li&gt;Tonmoy Saikia&lt;/li&gt; 
 &lt;li&gt;Aung Khant (@yehgdotnet)&lt;/li&gt; 
 &lt;li&gt;Erik Inge Bols√∏&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;mailto:nk@dsigned.gr&quot;&gt;nk@dsigned.gr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Steve Milner (@ashcrow)&lt;/li&gt; 
 &lt;li&gt;Michal Ambroz&lt;/li&gt; 
 &lt;li&gt;Gremwell&lt;/li&gt; 
 &lt;li&gt;Sagar Prakash Junnarkar (@sagarjunnarkar)&lt;/li&gt; 
 &lt;li&gt;GertBerger&lt;/li&gt; 
 &lt;li&gt;Quintin Poirier&lt;/li&gt; 
 &lt;li&gt;Eric Sesterhenn&lt;/li&gt; 
 &lt;li&gt;dengjw (@jawa)&lt;/li&gt; 
 &lt;li&gt;Pedro Worcel (@droop)&lt;/li&gt; 
 &lt;li&gt;Matthieu Keller (@maggick)&lt;/li&gt; 
 &lt;li&gt;Peter (2pvdl)&lt;/li&gt; 
 &lt;li&gt;Napz (@RootCon)&lt;/li&gt; 
 &lt;li&gt;@nilx042&lt;/li&gt; 
 &lt;li&gt;Fabian Affolter (@fabaff)&lt;/li&gt; 
 &lt;li&gt;Andrew Silvernail (@buff3r)&lt;/li&gt; 
 &lt;li&gt;Andre Ricardo (@andrericardo)&lt;/li&gt; 
 &lt;li&gt;nikosk&lt;/li&gt; 
 &lt;li&gt;Patrick Thomas (@coffeetocode)&lt;/li&gt; 
 &lt;li&gt;Guillaume Delcaour (@guikcd)&lt;/li&gt; 
 &lt;li&gt;Sean (@wiifm69)&lt;/li&gt; 
 &lt;li&gt;Matthieu Keller (@maggick)&lt;/li&gt; 
 &lt;li&gt;Raul (@raurodse)&lt;/li&gt; 
 &lt;li&gt;Andrew Petro (@apetro)&lt;/li&gt; 
 &lt;li&gt;Artem Taranyuk (@610)&lt;/li&gt; 
 &lt;li&gt;Matti Paksula (@matti)&lt;/li&gt; 
 &lt;li&gt;Tim Smith (@tas50)&lt;/li&gt; 
 &lt;li&gt;Sarthak Munshi (@saru95)&lt;/li&gt; 
 &lt;li&gt;@rdubourguais&lt;/li&gt; 
 &lt;li&gt;@SlivTaMere&lt;/li&gt; 
 &lt;li&gt;@Code0x58&lt;/li&gt; 
 &lt;li&gt;@iGeek098&lt;/li&gt; 
 &lt;li&gt;@andreas-becker&lt;/li&gt; 
 &lt;li&gt;@csalazar&lt;/li&gt; 
 &lt;li&gt;@golewski&lt;/li&gt; 
 &lt;li&gt;@Allactaga&lt;/li&gt; 
 &lt;li&gt;@lins05&lt;/li&gt; 
 &lt;li&gt;@eliasdorneles&lt;/li&gt; 
 &lt;li&gt;@sigit&lt;/li&gt; 
 &lt;li&gt;dewanto&lt;/li&gt; 
 &lt;li&gt;@elcodigok&lt;/li&gt; 
 &lt;li&gt;@SlivTaMere&lt;/li&gt; 
 &lt;li&gt;@anozoozian&lt;/li&gt; 
 &lt;li&gt;Bhavin Senjaliya (@bhavin1223)&lt;/li&gt; 
 &lt;li&gt;Janosch Maier (@Phylu)&lt;/li&gt; 
 &lt;li&gt;@rmaksimov&lt;/li&gt; 
 &lt;li&gt;Naglis Jonaitis (@naglis)&lt;/li&gt; 
 &lt;li&gt;Igor Rzegocki (@ajgon)&lt;/li&gt; 
 &lt;li&gt;Melvil Guillaume (@mguillau42)&lt;/li&gt; 
 &lt;li&gt;@LrsK&lt;/li&gt; 
 &lt;li&gt;Janosch Maier (@phylu)&lt;/li&gt; 
 &lt;li&gt;@abenson&lt;/li&gt; 
 &lt;li&gt;@blshkv&lt;/li&gt; 
 &lt;li&gt;Weidsom Nascimento (@weidsom)&lt;/li&gt; 
 &lt;li&gt;Marcelo Gimenes @cgimenes&lt;/li&gt; 
 &lt;li&gt;@xambroz&lt;/li&gt; 
 &lt;li&gt;Baptiste Fontaine (@bfontaine)&lt;/li&gt; 
 &lt;li&gt;@juananpe&lt;/li&gt; 
 &lt;li&gt;@definity&lt;/li&gt; 
 &lt;li&gt;@huntertl&lt;/li&gt; 
 &lt;li&gt;Max Davitt (@themaxdavitt)&lt;/li&gt; 
 &lt;li&gt;Gregory Boddin (@gboddin)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is difficult to keep track of all the people who have contributed to WhatWeb. If your name is missing then please let me know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Homebrew/homebrew-cask</title>
      <link>https://github.com/Homebrew/homebrew-cask</link>
      <description>&lt;p&gt;üçª A CLI workflow for the administration of macOS applications distributed as binaries&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Homebrew Cask&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;‚ÄúTo install, drag this icon‚Ä¶‚Äù no more!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Homebrew Cask extends &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; and brings its elegance, simplicity, and speed to the installation and management of GUI macOS applications such as Visual Studio Code and Google Chrome.&lt;/p&gt; 
&lt;p&gt;We do this by providing a friendly CLI workflow for the administration of macOS applications distributed as binaries.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/orgs/Homebrew/discussions/categories/casks&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/github-discussions-informational&quot; alt=&quot;Join us on GitHub discussions&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Let‚Äôs try it!&lt;/h2&gt; 
&lt;p&gt;To start using Homebrew Cask, you just need &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; installed.&lt;/p&gt; 
&lt;img src=&quot;https://i.imgur.com/FNNM6WL.gif&quot; width=&quot;547&quot; alt=&quot;Installing and uninstalling Alfred (animated gif)&quot;&gt; 
&lt;p&gt;Slower, now:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ brew install alfred
==&amp;gt; Downloading https://cachefly.alfredapp.com/Alfred_4.2.1_1187.dmg
######################################################################## 100.0%
==&amp;gt; Verifying SHA-256 checksum for Cask &#39;alfred&#39;.
==&amp;gt; Installing Cask alfred
==&amp;gt; Moving App &#39;Alfred 4.app&#39; to &#39;/Applications/Alfred 4.app&#39;.
üç∫  alfred was successfully installed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And there we have it. An application installed with one quick command: no clicking, no dragging, no dropping.&lt;/p&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find basic documentation on using Homebrew Cask in &lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/USAGE.md&quot;&gt;USAGE.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Want to contribute a cask? Awesome! See &lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;More project-related details and discussion are available in the &lt;a href=&quot;https://docs.brew.sh/Adding-Software-to-Homebrew#casks&quot;&gt;documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reporting Bugs&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/doc/faq/closing_issues_without_review.md&quot;&gt;&lt;strong&gt;If you ignore this guide, your issue may be closed without review&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, run &lt;code&gt;brew update-reset &amp;amp;&amp;amp; brew update&lt;/code&gt; and try your command again. This is a fix-all that will reset the state of all your taps, ensuring the problem isn‚Äôt an outdated setup on your side.&lt;/p&gt; 
&lt;p&gt;If your issue persists, &lt;a href=&quot;https://github.com/Homebrew/homebrew-cask/search?type=Issues&quot;&gt;search for it&lt;/a&gt; before opening a new one. If you find an open issue and have any new information, add it in a comment. If you find a closed issue, try the solutions there.&lt;/p&gt; 
&lt;p&gt;If the issue is still not solved, see the guides for common problems:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/doc/reporting_bugs/error_examples.md&quot;&gt;Examples of common errors and their solutions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/doc/reporting_bugs/error_examples.md#curl-error&quot;&gt;&lt;code&gt;curl&lt;/code&gt; error&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/doc/reporting_bugs/error_examples.md#permission-denied-error&quot;&gt;&lt;code&gt;Permission denied&lt;/code&gt; error&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/doc/reporting_bugs/error_examples.md#checksum-does-not-match-error&quot;&gt;&lt;code&gt;Checksum does not match&lt;/code&gt; error&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/doc/reporting_bugs/error_examples.md#source-is-not-there-error&quot;&gt;&lt;code&gt;source is not there&lt;/code&gt; error&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/doc/reporting_bugs/error_examples.md#wrong-number-of-arguments-error&quot;&gt;&lt;code&gt;wrong number of arguments&lt;/code&gt; error&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.brew.sh/FAQ#why-arent-some-apps-included-during-brew-upgrade&quot;&gt;App isn‚Äôt included in &lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.brew.sh/FAQ#why-cant-i-open-a-mac-app-from-an-unidentified-developer&quot;&gt;The app can‚Äôt be opened because it is from an unidentified developer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Homebrew/homebrew-cask/issues/new?template=01_bug_report.yml&quot;&gt;My problem isn‚Äôt listed&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requests&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Issues requesting new casks will be closed. If you want a cask added to the main repositories, &lt;a href=&quot;https://github.com/Homebrew/homebrew-cask/raw/HEAD/CONTRIBUTING.md#adding-a-cask&quot;&gt;submit a pull request&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For a feature request, &lt;a href=&quot;https://github.com/Homebrew/brew/issues/new?assignees=&amp;amp;labels=features&amp;amp;projects=&amp;amp;template=feature.yml&quot;&gt;use this template&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Questions? Wanna chat?&lt;/h2&gt; 
&lt;p&gt;We‚Äôre really rather friendly! Here are the best places to talk about the project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Homebrew/homebrew-cask/issues/new/choose&quot;&gt;Open an issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join us on &lt;a href=&quot;https://github.com/orgs/Homebrew/discussions/categories/casks&quot;&gt;GitHub discussions (forum)&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Code is under the &lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/LICENSE&quot;&gt;BSD 2 Clause (NetBSD) license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hotwired/turbo-rails</title>
      <link>https://github.com/hotwired/turbo-rails</link>
      <description>&lt;p&gt;Use Turbo in your Ruby on Rails app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hotwired/turbo-rails/main/assets/logo.png?sanitize=true&quot; width=&quot;24&quot; height=&quot;24&quot; alt=&quot;Turbo&quot;&gt; Turbo&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://turbo.hotwired.dev&quot;&gt;Turbo&lt;/a&gt; gives you the speed of a single-page web application without having to write any JavaScript. Turbo accelerates links and form submissions without requiring you to change your server-side generated HTML. It lets you carve up a page into independent frames, which can be lazy-loaded and operate as independent components. And finally, helps you make partial page updates using just HTML and a set of CRUD-like container tags. These three techniques reduce the amount of custom JavaScript that many web applications need to write by an order of magnitude. And for the few dynamic bits that are left, you&#39;re invited to finish the job with &lt;a href=&quot;https://github.com/hotwired/stimulus&quot;&gt;Stimulus&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On top of accelerating web applications, Turbo was built from the ground-up to form the foundation of hybrid native applications. Write the navigational shell of your &lt;a href=&quot;https://github.com/hotwired/turbo-android&quot;&gt;Android&lt;/a&gt; or &lt;a href=&quot;https://github.com/hotwired/turbo-ios&quot;&gt;iOS&lt;/a&gt; app using the standard platform tooling, then seamlessly fill in features from the web, following native navigation patterns. Not every mobile screen needs to be written in Swift or Kotlin to feel native. With Turbo, you spend less time wrangling JSON, waiting on app stores to approve updates, or reimplementing features you&#39;ve already created in HTML.&lt;/p&gt; 
&lt;p&gt;Turbo is a language-agnostic framework written in JavaScript, but this gem builds on top of those basics to make the integration with Rails as smooth as possible. You can deliver turbo updates via model callbacks over Action Cable, respond to controller actions with native navigation or standard redirects, and render turbo frames with helpers and layout-free responses.&lt;/p&gt; 
&lt;h2&gt;Navigate with Turbo Drive&lt;/h2&gt; 
&lt;p&gt;Turbo is a continuation of the ideas from the previous &lt;a href=&quot;https://github.com/turbolinks/turbolinks&quot;&gt;Turbolinks&lt;/a&gt; framework, and the heart of that past approach lives on as Turbo Drive. When installed, Turbo automatically intercepts all clicks on &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; links to the same domain. When you click an eligible link, Turbo prevents the browser from following it. Instead, Turbo changes the browser‚Äôs URL using the History API, requests the new page using &lt;code&gt;fetch&lt;/code&gt;, and then renders the HTML response.&lt;/p&gt; 
&lt;p&gt;During rendering, Turbo replaces the current &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element outright and merges the contents of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element. The JavaScript window and document objects, and the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element, persist from one rendering to the next.&lt;/p&gt; 
&lt;p&gt;Whereas Turbolinks previously just dealt with links, Turbo can now also process form submissions and responses. This means the entire flow in the web application is wrapped into Turbo, making all the parts fast. No more need for &lt;code&gt;data-remote=true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Turbo Drive can be disabled on a per-element basis by annotating the element or any of its ancestors with &lt;code&gt;data-turbo=&quot;false&quot;&lt;/code&gt;. If you want Turbo Drive to be disabled by default, then you can adjust your import like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import &quot;@hotwired/turbo-rails&quot;
Turbo.session.drive = false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can use &lt;code&gt;data-turbo=&quot;true&quot;&lt;/code&gt; to enable Drive on a per-element basis.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://turbo.hotwired.dev/handbook/drive&quot;&gt;See documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Decompose with Turbo Frames&lt;/h2&gt; 
&lt;p&gt;Turbo reinvents the old HTML technique of frames without any of the drawbacks that lead to developers abandoning it. With Turbo Frames, &lt;strong&gt;you can treat a subset of the page as its own component&lt;/strong&gt;, where links and form submissions &lt;strong&gt;replace only that part&lt;/strong&gt;. This removes an entire class of problems around partial interactivity that before would have required custom JavaScript.&lt;/p&gt; 
&lt;p&gt;It also makes it dead easy to carve a single page into smaller pieces that can all live on their own cache timeline. While the bulk of the page might easily be cached between users, a small personalized toolbar perhaps cannot. With Turbo::Frames, you can designate the toolbar as a frame, which will be &lt;strong&gt;lazy-loaded automatically&lt;/strong&gt; by the publicly-cached root page. This means simpler pages, easier caching schemes with fewer dependent keys, and all without needing to write a lick of custom JavaScript.&lt;/p&gt; 
&lt;p&gt;This gem provides a &lt;code&gt;turbo_frame_tag&lt;/code&gt; helper to create those frames.&lt;/p&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;%# app/views/todos/show.html.erb %&amp;gt;
&amp;lt;%= turbo_frame_tag @todo do %&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;%= @todo.description %&amp;gt;&amp;lt;/p&amp;gt;

  &amp;lt;%= link_to &#39;Edit this todo&#39;, edit_todo_path(@todo) %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%# app/views/todos/edit.html.erb %&amp;gt;
&amp;lt;%= turbo_frame_tag @todo do %&amp;gt;
  &amp;lt;%= render &quot;form&quot; %&amp;gt;

  &amp;lt;%= link_to &#39;Cancel&#39;, todo_path(@todo) %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When the user clicks on the &lt;code&gt;Edit this todo&lt;/code&gt; link, as a direct response to this user interaction, the turbo frame will be automatically replaced with the one in the &lt;code&gt;edit.html.erb&lt;/code&gt; page.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://turbo.hotwired.dev/handbook/frames&quot;&gt;See documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;A note on custom layouts&lt;/h3&gt; 
&lt;p&gt;In order to render turbo frame requests without the application layout, Turbo registers a custom &lt;a href=&quot;https://api.rubyonrails.org/classes/ActionView/Layouts/ClassMethods.html#method-i-layout&quot;&gt;layout method&lt;/a&gt;. If your application uses custom layout resolution, you have to make sure to return &lt;code&gt;&quot;turbo_rails/frame&quot;&lt;/code&gt; (or &lt;code&gt;false&lt;/code&gt; for TurboRails &amp;lt; 1.4.0) for turbo frame requests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;layout :custom_layout

def custom_layout
  return &quot;turbo_rails/frame&quot; if turbo_frame_request?

  # ... your custom layout logic
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using a custom, but &quot;static&quot; layout,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;layout &quot;some_static_layout&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;you &lt;strong&gt;have&lt;/strong&gt; to change it to a layout method in order to conditionally return &lt;code&gt;&quot;turbo_rails/frame&quot;&lt;/code&gt; for turbo frame requests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;layout :custom_layout

def custom_layout
  return &quot;turbo_rails/frame&quot; if turbo_frame_request?

  &quot;some_static_layout&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Come Alive with Turbo Streams&lt;/h2&gt; 
&lt;p&gt;Partial page updates that are &lt;strong&gt;delivered asynchronously over a web socket connection&lt;/strong&gt; is the hallmark of modern, reactive web applications. With Turbo Streams, you can get all of that modern goodness using the existing server-side HTML you&#39;re already rendering to deliver the first page load. With a set of simple CRUD container tags, you can send HTML fragments over the web socket (or in response to direct interactions), and see the page change in response to new data. Again, &lt;strong&gt;no need to construct an entirely separate API&lt;/strong&gt;, &lt;strong&gt;no need to wrangle JSON&lt;/strong&gt;, &lt;strong&gt;no need to reimplement the HTML construction in JavaScript&lt;/strong&gt;. Take the HTML you&#39;re already making, wrap it in an update tag, and, voila, your page comes alive.&lt;/p&gt; 
&lt;p&gt;With this Rails integration, you can create these asynchronous updates directly in response to your model changes. Turbo uses Active Jobs to provide asynchronous partial rendering and Action Cable to deliver those updates to subscribers.&lt;/p&gt; 
&lt;p&gt;This gem provides a &lt;code&gt;turbo_stream_from&lt;/code&gt; helper to create a turbo stream.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;%# app/views/todos/show.html.erb %&amp;gt;
&amp;lt;%= turbo_stream_from dom_id(@todo) %&amp;gt;

&amp;lt;%# Rest of show here %&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing Turbo Stream Broadcasts&lt;/h3&gt; 
&lt;p&gt;Receiving server-generated Turbo Broadcasts requires a connected Web Socket. Views that render &lt;code&gt;&amp;lt;turbo-cable-stream-source&amp;gt;&lt;/code&gt; elements with the &lt;code&gt;#turbo_stream_from&lt;/code&gt; view helper incur a slight delay before they&#39;re ready to receive broadcasts. In System Tests, that delay can disrupt Capybara&#39;s built-in synchronization mechanisms that wait for or assert on content that&#39;s broadcast over Web Sockets. For example, consider a test that navigates to a page and then immediately asserts that broadcast content is present:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;test &quot;renders broadcasted Messages&quot; do
  message = Message.new content: &quot;Hello, from Action Cable&quot;

  visit &quot;/&quot;
  click_link &quot;All Messages&quot;
  message.save! # execute server-side code to broadcast a Message

  assert_text message.content
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the call to &lt;code&gt;Message#save!&lt;/code&gt; executes quickly enough, it might beat-out any &lt;code&gt;&amp;lt;turbo-cable-stream-source&amp;gt;&lt;/code&gt; elements rendered by the call to &lt;code&gt;click_link &quot;All Messages&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To wait for any disconnected &lt;code&gt;&amp;lt;turbo-cable-stream-source&amp;gt;&lt;/code&gt; elements to connect, call &lt;a href=&quot;https://github.com/hotwired/turbo-rails/raw/main/lib/turbo/system_test_helper.rb&quot;&gt;&lt;code&gt;#connect_turbo_cable_stream_sources&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt; test &quot;renders broadcasted Messages&quot; do
   message = Message.new content: &quot;Hello, from Action Cable&quot;

   visit &quot;/&quot;
   click_link &quot;All Messages&quot;
+  connect_turbo_cable_stream_sources
   message.save! # execute server-side code to broadcast a Message

   assert_text message.content
 end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, calls to &lt;a href=&quot;https://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session:visit&quot;&gt;&lt;code&gt;#visit&lt;/code&gt;&lt;/a&gt; will wait for all &lt;code&gt;&amp;lt;turbo-cable-stream-source&amp;gt;&lt;/code&gt; elements to connect. You can control this by modifying the &lt;code&gt;config.turbo.test_connect_after_actions&lt;/code&gt;. For example, to wait after calls to &lt;a href=&quot;https://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Actions:click_link&quot;&gt;&lt;code&gt;#click_link&lt;/code&gt;&lt;/a&gt;, add the following to &lt;code&gt;config/environments/test.rb&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# config/environments/test.rb

config.turbo.test_connect_after_actions &amp;lt;&amp;lt; :click_link
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To disable automatic connecting, set the configuration to &lt;code&gt;[]&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# config/environments/test.rb

config.turbo.test_connect_after_actions = []
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://turbo.hotwired.dev/handbook/streams&quot;&gt;See documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;This gem is automatically configured for applications made with Rails 7+ (unless --skip-hotwire is passed to the generator). But if you&#39;re on Rails 6, you can install it manually:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add the &lt;code&gt;turbo-rails&lt;/code&gt; gem to your Gemfile: &lt;code&gt;gem &#39;turbo-rails&#39;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;./bin/bundle install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;./bin/rails turbo:install&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Running &lt;code&gt;turbo:install&lt;/code&gt; will install through NPM or Bun if a JavaScript runtime is used in the application. Otherwise the asset pipeline version is used. To use the asset pipeline version, you must have &lt;code&gt;importmap-rails&lt;/code&gt; installed first and listed higher in the Gemfile.&lt;/p&gt; 
&lt;p&gt;If you&#39;re using node and need to use the cable consumer, you can import &lt;a href=&quot;https://github.com/hotwired/turbo-rails/raw/main/app/javascript/turbo/cable.js&quot;&gt;&lt;code&gt;cable&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;import { cable } from &quot;@hotwired/turbo-rails&quot;&lt;/code&gt;), but ensure that your application actually &lt;em&gt;uses&lt;/em&gt; the members it &lt;code&gt;import&lt;/code&gt;s when using this style (see &lt;a href=&quot;https://github.com/hotwired/turbo-rails/issues/48&quot;&gt;turbo-rails#48&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;Turbo&lt;/code&gt; instance is automatically assigned to &lt;code&gt;window.Turbo&lt;/code&gt; upon import:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import &quot;@hotwired/turbo-rails&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;You can watch &lt;a href=&quot;https://hotwired.dev/#screencast&quot;&gt;the video introduction to Hotwire&lt;/a&gt;, which focuses extensively on demonstrating Turbo in a Rails demo. Then you should familiarize yourself with &lt;a href=&quot;https://turbo.hotwired.dev/handbook/introduction&quot;&gt;Turbo handbook&lt;/a&gt; to understand Drive, Frames, and Streams in-depth. Finally, dive into the code documentation by starting with &lt;a href=&quot;https://github.com/hotwired/turbo-rails/raw/main/app/helpers/turbo/frames_helper.rb&quot;&gt;&lt;code&gt;Turbo::FramesHelper&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/hotwired/turbo-rails/raw/main/app/helpers/turbo/streams_helper.rb&quot;&gt;&lt;code&gt;Turbo::StreamsHelper&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/hotwired/turbo-rails/raw/main/app/models/turbo/streams/tag_builder.rb&quot;&gt;&lt;code&gt;Turbo::Streams::TagBuilder&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/hotwired/turbo-rails/raw/main/app/models/concerns/turbo/broadcastable.rb&quot;&gt;&lt;code&gt;Turbo::Broadcastable&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note that in development, the default Action Cable adapter is the single-process &lt;code&gt;async&lt;/code&gt; adapter. This means that turbo updates are only broadcast within that same process. So you can&#39;t start &lt;code&gt;bin/rails console&lt;/code&gt; and trigger Turbo broadcasts and expect them to show up in a browser connected to a server running in a separate &lt;code&gt;bin/dev&lt;/code&gt; or &lt;code&gt;bin/rails server&lt;/code&gt; process. Instead, you should use the web-console when needing to manually trigger Turbo broadcasts inside the same process. Add &quot;console&quot; to any action or &quot;&amp;lt;%= console %&amp;gt;&quot; in any view to make the web console appear.&lt;/p&gt; 
&lt;h3&gt;RubyDoc Documentation&lt;/h3&gt; 
&lt;p&gt;For the API documentation covering this gem&#39;s classes and packages, &lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main&quot;&gt;visit the RubyDoc page&lt;/a&gt;. Note that this documentation is updated automatically from the main branch, so it may contain features that are not released yet.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/DriveHelper&quot;&gt;Turbo Drive Helpers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/FramesHelper&quot;&gt;Turbo Frames Helpers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/StreamsHelper&quot;&gt;Turbo Streams View Helpers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/Broadcastable&quot;&gt;Turbo Streams Broadcast Methods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/StreamsChannel&quot;&gt;Turbo Streams Channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/Native/Navigation&quot;&gt;Turbo Native Navigation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/TestAssertions&quot;&gt;Turbo Test Assertions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/TestAssertions/IntegrationTestAssertions&quot;&gt;Turbo Integration Test Assertions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/Broadcastable/TestHelper&quot;&gt;Turbo Broadcastable Test Helper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubydoc.info/github/hotwired/turbo-rails/main/Turbo/SystemTestHelper&quot;&gt;Turbo System Test Helper&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Compatibility with Rails UJS&lt;/h2&gt; 
&lt;p&gt;Turbo can coexist with Rails UJS, but you need to take a series of upgrade steps to make it happen. See &lt;a href=&quot;https://github.com/hotwired/turbo-rails/raw/main/UPGRADING.md&quot;&gt;the upgrading guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/hotwired/turbo-rails/main/lib/turbo/test_assertions.rb&quot;&gt;&lt;code&gt;Turbo::TestAssertions&lt;/code&gt;&lt;/a&gt; concern provides Turbo Stream test helpers that assert the presence or absence ofs s &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; elements in a rendered fragment of HTML. &lt;code&gt;Turbo::TestAssertions&lt;/code&gt; are automatically included in &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt;&lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;&lt;/a&gt; and depend on the presence of &lt;a href=&quot;https://github.com/rails/rails-dom-testing/&quot;&gt;&lt;code&gt;rails-dom-testing&lt;/code&gt;&lt;/a&gt; assertions.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/hotwired/turbo-rails/main/lib/turbo/test_assertions/integration_test_assertions.rb&quot;&gt;&lt;code&gt;Turbo::TestAssertions::IntegrationTestAssertions&lt;/code&gt;&lt;/a&gt; are built on top of &lt;code&gt;Turbo::TestAssertions&lt;/code&gt;, and add support for passing a &lt;code&gt;status:&lt;/code&gt; keyword. They are automatically included in &lt;a href=&quot;https://edgeguides.rubyonrails.org/testing.html#integration-testing&quot;&gt;&lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/hotwired/turbo-rails/main/lib/turbo/broadcastable/test_helper.rb&quot;&gt;&lt;code&gt;Turbo::Broadcastable::TestHelper&lt;/code&gt;&lt;/a&gt; concern provides Action Cable-aware test helpers that assert that &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; elements were or were not broadcast over Action Cable. &lt;code&gt;Turbo::Broadcastable::TestHelper&lt;/code&gt; is automatically included in &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt;&lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Rendering Outside of a Request&lt;/h3&gt; 
&lt;p&gt;Turbo utilizes &lt;a href=&quot;https://api.rubyonrails.org/classes/ActionController/Renderer.html&quot;&gt;ActionController::Renderer&lt;/a&gt; to render templates and partials outside the context of the request-response cycle. If you need to render a Turbo-aware template, partial, or component, use &lt;a href=&quot;https://api.rubyonrails.org/classes/ActionController/Renderer.html&quot;&gt;ActionController::Renderer&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;ApplicationController.renderer.render template: &quot;posts/show&quot;, assigns: { post: Post.first } # =&amp;gt; &quot;&amp;lt;html&amp;gt;‚Ä¶&quot;
PostsController.renderer.render :show, assigns: { post: Post.first } # =&amp;gt; &quot;&amp;lt;html&amp;gt;‚Ä¶&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a shortcut, you can also call render directly on the controller class itself:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;ApplicationController.render template: &quot;posts/show&quot;, assigns: { post: Post.first } # =&amp;gt; &quot;&amp;lt;html&amp;gt;‚Ä¶&quot;
PostsController.render :show, assigns: { post: Post.first } # =&amp;gt; &quot;&amp;lt;html&amp;gt;‚Ä¶&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;Run the tests with &lt;code&gt;./bin/test&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Using local Turbo version&lt;/h3&gt; 
&lt;p&gt;Often you might want to test changes made locally to &lt;a href=&quot;https://github.com/hotwired/turbo&quot;&gt;Turbo lib&lt;/a&gt; itself. To package your local development version of Turbo you can use &lt;a href=&quot;https://classic.yarnpkg.com/lang/en/docs/cli/link/&quot;&gt;yarn link&lt;/a&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd &amp;lt;local-turbo-dir&amp;gt;
yarn link

cd &amp;lt;local-turbo-rails-dir&amp;gt;
yarn link @hotwired/turbo

# Build the JS distribution files...
yarn build
# ...and commit the changes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can reference your version of turbo-rails in your Rails projects packaged with your local version of Turbo.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Having a way to reproduce your issue will help people confirm, investigate, and ultimately fix your issue. You can do this by providing an executable test case. To make this process easier, we have prepared an &lt;a href=&quot;https://raw.githubusercontent.com/hotwired/turbo-rails/main/bug_report_template.rb&quot;&gt;executable bug report Rails application&lt;/a&gt; for you to use as a starting point.&lt;/p&gt; 
&lt;p&gt;This template includes the boilerplate code to set up a System Test case. Copy the content of the template into a &lt;code&gt;.rb&lt;/code&gt; file and make the necessary changes to demonstrate the issue. You can execute it by running &lt;code&gt;ruby the_file.rb&lt;/code&gt; in your terminal. If all goes well, you should see your test case failing.&lt;/p&gt; 
&lt;p&gt;You can then share your executable test case as a gist or paste the content into the issue description.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Turbo is released under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jekyll/jekyll</title>
      <link>https://github.com/jekyll/jekyll</link>
      <description>&lt;p&gt;üåê Jekyll is a blog-aware static site generator in Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/jekyll&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/jekyll.svg?sanitize=true&quot; alt=&quot;Gem Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/jekyll/jekyll/actions?query=workflow%3A%22Continuous+Integration%22+branch%3Amaster&quot;&gt;&lt;img src=&quot;https://github.com/jekyll/jekyll/workflows/Continuous%20Integration/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/jekyll/jekyll/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/backers/badge.svg?sanitize=true&quot; alt=&quot;Backers on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/jekyll/jekyll/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsors/badge.svg?sanitize=true&quot; alt=&quot;Sponsors on Open Collective&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;, which you can use to host sites right from your GitHub repositories.&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;Jekyll does what you tell it to do&amp;nbsp;‚Äî no more, no less. It doesn&#39;t try to outsmart users by making bold assumptions, nor does it burden them with needless complexity and configuration. Put simply, Jekyll gets out of your way and allows you to concentrate on what truly matters: your content.&lt;/p&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://jekyllrb.com/philosophy&quot;&gt;https://jekyllrb.com/philosophy&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;Install&lt;/a&gt; the gem&lt;/li&gt; 
 &lt;li&gt;Read up about its &lt;a href=&quot;https://jekyllrb.com/docs/usage/&quot;&gt;Usage&lt;/a&gt; and &lt;a href=&quot;https://jekyllrb.com/docs/configuration/&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Take a gander at some existing &lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/sites&quot;&gt;Sites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll/fork&quot;&gt;Fork&lt;/a&gt; and &lt;a href=&quot;https://jekyllrb.com/docs/contributing/&quot;&gt;Contribute&lt;/a&gt; your own modifications&lt;/li&gt; 
 &lt;li&gt;Have questions? Check out our official forum community &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt; and &lt;a href=&quot;https://libera.chat&quot;&gt;&lt;code&gt;#jekyll&lt;/code&gt; Channel on Libera IRC&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Diving In&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://import.jekyllrb.com/docs/home/&quot;&gt;Migrate&lt;/a&gt; from your previous system&lt;/li&gt; 
 &lt;li&gt;Learn how &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;Front Matter&lt;/a&gt; works&lt;/li&gt; 
 &lt;li&gt;Put information on your site with &lt;a href=&quot;https://jekyllrb.com/docs/variables/&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Customize the &lt;a href=&quot;https://jekyllrb.com/docs/permalinks/&quot;&gt;Permalinks&lt;/a&gt; your posts are generated with&lt;/li&gt; 
 &lt;li&gt;Use the built-in &lt;a href=&quot;https://jekyllrb.com/docs/templates/&quot;&gt;Liquid Extensions&lt;/a&gt; to make your life easier&lt;/li&gt; 
 &lt;li&gt;Use custom &lt;a href=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;Plugins&lt;/a&gt; to generate content specific to your site&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href=&quot;https://jekyllrb.com/tutorials/video-walkthroughs/&quot;&gt;video tutorials from Giraffe Academy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Need help?&lt;/h2&gt; 
&lt;p&gt;If you don&#39;t find the answer to your problem in our &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;docs&lt;/a&gt;, or in the &lt;a href=&quot;https://jekyllrb.com/docs/troubleshooting/&quot;&gt;troubleshooting section&lt;/a&gt;, ask the &lt;a href=&quot;https://jekyllrb.com/docs/community/&quot;&gt;community&lt;/a&gt; for help.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;In order to have a more open and welcoming community, Jekyll adheres to a &lt;a href=&quot;https://jekyllrb.com/docs/conduct/&quot;&gt;code of conduct&lt;/a&gt; adapted from the Ruby on Rails code of conduct.&lt;/p&gt; 
&lt;p&gt;Please adhere to this code of conduct in any interactions you have in the Jekyll community. It is strictly enforced on all official Jekyll repositories, websites, and resources. If you encounter someone violating these terms, please let one of our &lt;a href=&quot;https://jekyllrb.com/team/#core-team&quot;&gt;core team members&lt;/a&gt; know and we will address it as soon as possible.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up in this README with a link to your website. &lt;a href=&quot;https://opencollective.com/jekyll#sponsor&quot;&gt;Become a sponsor!&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/0/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/1/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 1&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/2/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 2&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/3/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/4/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 4&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/5/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 5&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/6/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 6&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/7/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 7&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/8/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 8&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/jekyll/sponsor/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/sponsor/9/avatar.svg?sanitize=true&quot; alt=&quot;Jekyll Sponsor 9&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&quot;https://raw.githubusercontent.com/jekyll/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/contributors.svg?width=890&amp;amp;button=false&quot; alt=&quot;Jekyll Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Backers&lt;/h3&gt; 
&lt;p&gt;Thank you to all our backers! üôè &lt;a href=&quot;https://opencollective.com/jekyll#backer&quot;&gt;Become a backer&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/jekyll#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/jekyll/backers.svg?width=890&quot; alt=&quot;Jekyll Backers&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/jekyll/jekyll/raw/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mastodon/mastodon</title>
      <link>https://github.com/mastodon/mastodon</link>
      <description>&lt;p&gt;Your self-hosted, globally interconnected microblogging community&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Want to learn more about Mastodon? Click below to find out more in a video.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://www.youtube.com/watch?v=IPSbNdBmWKE&quot;&gt; &lt;img alt=&quot;Mastodon hero image&quot; src=&quot;https://github.com/user-attachments/assets/ef53f5e9-c0d8-484d-9f53-00efdebb92c3&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://github.com/mastodon/mastodon/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release/mastodon/mastodon.svg?sanitize=true&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://github.com/mastodon/mastodon/actions/workflows/test-ruby.yml&quot;&gt; &lt;img src=&quot;https://github.com/mastodon/mastodon/actions/workflows/test-ruby.yml/badge.svg?sanitize=true&quot; alt=&quot;Ruby Testing&quot;&gt;&lt;/a&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://crowdin.com/project/mastodon&quot;&gt; &lt;img src=&quot;https://d322cqt584bo4o.cloudfront.net/mastodon/localized.svg?sanitize=true&quot; alt=&quot;Crowdin&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Mastodon is a &lt;strong&gt;free, open-source social network server&lt;/strong&gt; based on ActivityPub where users can follow friends and discover new ones. On Mastodon, users can publish anything they want: links, pictures, text, and video. All Mastodon servers are interoperable as a federated network (users on one server can seamlessly communicate with users from another one, including non-Mastodon software that implements ActivityPub!)&lt;/p&gt; 
&lt;h2&gt;Navigation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org&quot;&gt;Project homepage üêò&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.patreon.com/mastodon&quot;&gt;Support the development via Patreon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org/sponsors&quot;&gt;View sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.joinmastodon.org&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.joinmastodon.org&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org/roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mastodon/mastodon/pkgs/container/mastodon&quot;&gt;Official Docker image&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org/communities&quot;&gt;Browse Mastodon servers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org/apps&quot;&gt;Browse Mastodon apps&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/app/javascript/images/elephant_ui_working.svg?raw=true&quot; align=&quot;right&quot; width=&quot;30%&quot;&gt; 
&lt;p&gt;&lt;strong&gt;No vendor lock-in: Fully interoperable with any conforming platform&lt;/strong&gt; - It doesn&#39;t have to be Mastodon; whatever implements ActivityPub is part of the social network! &lt;a href=&quot;https://blog.joinmastodon.org/2018/06/why-activitypub-is-the-future/&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Real-time, chronological timeline updates&lt;/strong&gt; - updates of people you&#39;re following appear in real-time in the UI via WebSockets. There&#39;s a firehose view as well!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Media attachments like images and short videos&lt;/strong&gt; - upload and view images and WebM/MP4 videos attached to the updates. Videos with no audio track are treated like GIFs; normal videos loop continuously!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Safety and moderation tools&lt;/strong&gt; - Mastodon includes private posts, locked accounts, phrase filtering, muting, blocking, and all sorts of other features, along with a reporting and moderation system. &lt;a href=&quot;https://blog.joinmastodon.org/2018/07/cage-the-mastodon/&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;OAuth2 and a straightforward REST API&lt;/strong&gt; - Mastodon acts as an OAuth2 provider, so 3rd party apps can use the REST and Streaming APIs. This results in a rich app ecosystem with a lot of choices!&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;h3&gt;Tech stack&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Ruby on Rails&lt;/strong&gt; powers the REST API and other web pages&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;React.js&lt;/strong&gt; and &lt;strong&gt;Redux&lt;/strong&gt; are used for the dynamic parts of the interface&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; powers the streaming API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; 12+&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Redis&lt;/strong&gt; 4+&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ruby&lt;/strong&gt; 3.2+&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; 18+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The repository includes deployment configurations for &lt;strong&gt;Docker and docker-compose&lt;/strong&gt; as well as specific platforms like &lt;strong&gt;Heroku&lt;/strong&gt;, and &lt;strong&gt;Scalingo&lt;/strong&gt;. For Helm charts, reference the &lt;a href=&quot;https://github.com/mastodon/chart&quot;&gt;mastodon/chart repository&lt;/a&gt;. The &lt;a href=&quot;https://docs.joinmastodon.org/admin/install/&quot;&gt;&lt;strong&gt;standalone&lt;/strong&gt; installation guide&lt;/a&gt; is available in the documentation.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Mastodon is &lt;strong&gt;free, open-source software&lt;/strong&gt; licensed under &lt;strong&gt;AGPLv3&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;You can open issues for bugs you&#39;ve found or features you think are missing. You can also submit pull requests to this repository or translations via Crowdin. To get started, look at the &lt;a href=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/docs/DEVELOPMENT.md&quot;&gt;DEVELOPMENT&lt;/a&gt; guides. For changes accepted into Mastodon, you can request to be paid through our &lt;a href=&quot;https://opencollective.com/mastodon&quot;&gt;OpenCollective&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IRC channel&lt;/strong&gt;: #mastodon on &lt;a href=&quot;https://libera.chat&quot;&gt;&lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2016-2024 Eugen Rochko (+ &lt;a href=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/AUTHORS.md&quot;&gt;&lt;code&gt;mastodon authors&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;Licensed under GNU Affero General Public License as stated in the &lt;a href=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Copyright (c) 2016-2024 Eugen Rochko &amp;amp; other Mastodon contributors

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU Affero General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
details.

You should have received a copy of the GNU Affero General Public License along
with this program. If not, see https://www.gnu.org/licenses/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>rubysec/ruby-advisory-db</title>
      <link>https://github.com/rubysec/ruby-advisory-db</link>
      <description>&lt;p&gt;A database of vulnerable Ruby Gems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Advisory Database&lt;/h1&gt; 
&lt;p&gt;The Ruby Advisory Database is a community effort to compile all security advisories that are relevant to Ruby libraries.&lt;/p&gt; 
&lt;p&gt;You can check your own Gemfile.locks against this database by using &lt;a href=&quot;https://github.com/rubysec/bundler-audit&quot;&gt;bundler-audit&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support Ruby Security!&lt;/h2&gt; 
&lt;p&gt;Do you know about a vulnerability that isn&#39;t listed in this database? Open an issue or submit a PR.&lt;/p&gt; 
&lt;h2&gt;Directory Structure&lt;/h2&gt; 
&lt;p&gt;The database is a list of directories that match the names of Ruby libraries on &lt;a href=&quot;https://rubygems.org/&quot;&gt;rubygems.org&lt;/a&gt;. Within each directory are one or more advisory files for the Ruby library. These advisory files are named using the advisories&#39; &lt;a href=&quot;https://cve.mitre.org/&quot;&gt;CVE&lt;/a&gt; identifier number.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gems/:
  actionpack/:
    CVE-2014-0130.yml  CVE-2014-7818.yml  CVE-2014-7829.yml  CVE-2015-7576.yml
    CVE-2015-7581.yml  CVE-2016-0751.yml  CVE-2016-0752.yml
rubies/:
  jruby/:
    ...
  mruby/:
    ...
  ruby/:
    ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;gems/&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;gems/&lt;/code&gt; directory contains sub-directories that match the names of the Ruby libraries on &lt;a href=&quot;https://rubygems.org/&quot;&gt;rubygems.org&lt;/a&gt;. Within each directory are one or more advisory files for the Ruby library. These advisory files are named using the advisories&#39; &lt;a href=&quot;https://cve.mitre.org/&quot;&gt;CVE&lt;/a&gt; or &lt;a href=&quot;https://help.github.com/en/articles/about-maintainer-security-advisories&quot;&gt;GHSA&lt;/a&gt; ID.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;rubies/&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;rubies/&lt;/code&gt; directory contains sub-directories for each Ruby implementation. Within each directory are one or more advisory files for the Ruby implementation. These advisory files are named using the advisories&#39; &lt;a href=&quot;https://cve.mitre.org/&quot;&gt;CVE&lt;/a&gt; or &lt;a href=&quot;https://help.github.com/en/articles/about-maintainer-security-advisories&quot;&gt;GHSA&lt;/a&gt; ID.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Each advisory file contains the advisory information in &lt;a href=&quot;http://www.yaml.org/&quot;&gt;YAML&lt;/a&gt; format. Here are some example advisories:&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;gems/actionpack/CVE-2023-22795.yml&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
gem: actionpack
cve: 2023-22795
ghsa: 8xww-x3g3-6jcv
url: https://github.com/rails/rails/releases/tag/v7.0.4.1
title: ReDoS based DoS vulnerability in Action Dispatch
date: 2023-01-18
description: |
  There is a possible regular expression based DoS vulnerability in Action
  Dispatch related to the If-None-Match header. This vulnerability has been
  assigned the CVE identifier CVE-2023-22795.

  Versions Affected: All
  Not affected: None
  Fixed Versions: 6.1.7.1, 7.0.4.1

  # Impact

  A specially crafted HTTP If-None-Match header can cause the regular
  expression engine to enter a state of catastrophic backtracking, when on a
  version of Ruby below 3.2.0. This can cause the process to use large amounts
  of CPU and memory, leading to a possible DoS vulnerability All users running
  an affected release should either upgrade or use one of the workarounds
  immediately.

  # Workarounds

  We recommend that all users upgrade to one of the FIXED versions. In the
  meantime, users can mitigate this vulnerability by using a load balancer or
  other device to filter out malicious If-None-Match headers before they reach
  the application.

  Users on Ruby 3.2.0 or greater are not affected by this vulnerability.
patched_versions:
  - &quot;~&amp;gt; 5.2.8&quot;
  - &quot;~&amp;gt; 6.1.7, &amp;gt;= 6.1.7.1&quot;
  - &quot;&amp;gt;= 7.0.4.1&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;rubies/ruby/CVE-2022-28739.yml&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
engine: ruby
cve: 2022-28739
url: https://www.ruby-lang.org/en/news/2022/04/12/buffer-overrun-in-string-to-float-cve-2022-28739/
title: Buffer overrun in String-to-Float conversion
date: 2022-04-12
description: |
  A buffer-overrun vulnerability is discovered in a conversion algorithm from a String to a Float. This vulnerability has been assigned the CVE identifier CVE-2022-28739. We strongly recommend upgrading Ruby.

  Due to a bug in an internal function that converts a String to a Float, some convertion methods like Kernel#Float and String#to_f could cause buffer over-read. A typical consequence is a process termination due to segmentation fault, but in a limited circumstances, it may be exploitable for illegal memory read.

  Please update Ruby to 2.6.10, 2.7.6, 3.0.4, or 3.1.2.
patched_versions:
  - ~&amp;gt; 2.6.10
  - ~&amp;gt; 2.7.6
  - ~&amp;gt; 3.0.4
  - &#39;&amp;gt;= 3.1.2&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;YAML Schema&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;gems&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;gem&lt;/code&gt; [String] (required): Name of the affected gem.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;library&lt;/code&gt; [String] (optional): Name of the ruby library which the affected gem belongs to.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;framework&lt;/code&gt; [String] (optional): Name of the framework which the affected gem belongs to.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;platform&lt;/code&gt; [String] (optional): If this vulnerability is platform-specific, name of platform this vulnerability affects (e.g. jruby)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cve&lt;/code&gt; [String] (optional): Common Vulnerabilities and Exposures (CVE) ID.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;osvdb&lt;/code&gt; [Integer] (optional): Open Sourced Vulnerability Database (OSVDB) ID.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ghsa&lt;/code&gt; [String] (optional): GitHub Security Advisory (GHSA) ID.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;url&lt;/code&gt; [String] (required): The URL to the full advisory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;title&lt;/code&gt; [String] (required): The title of the advisory or individual vulnerability. It must be a single line sentence.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;date&lt;/code&gt; [Date] (required): The public disclosure date of the advisory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;description&lt;/code&gt; [String] (required): One or more paragraphs describing the vulnerability. It may contain multiple paragraphs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cvss_v2&lt;/code&gt; [Float] (optional): The &lt;a href=&quot;https://www.first.org/cvss/v2/guide&quot;&gt;CVSSv2&lt;/a&gt; score for the vulnerability.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cvss_v3&lt;/code&gt; [Float] (optional): The &lt;a href=&quot;https://www.first.org/cvss/v3.1/user-guide&quot;&gt;CVSSv3&lt;/a&gt; score for the vulnerability.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cvss_v4&lt;/code&gt; [Float] (optional): The &lt;a href=&quot;https://www.first.org/cvss/v4.0/user-guide&quot;&gt;CVSSv4&lt;/a&gt; score for the vulnerability.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unaffected_versions&lt;/code&gt; [Array&amp;lt;String&amp;gt;] (optional): The version requirements for the unaffected versions of the Ruby library.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;patched_versions&lt;/code&gt; [Array&amp;lt;String&amp;gt;] (optional): The version requirements for the patched versions of the Ruby library.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;related&lt;/code&gt; [Hash&amp;lt;Array&amp;lt;String&amp;gt;&amp;gt;] (optional): Sometimes an advisory references many urls and other identifiers. Supported keys: &lt;code&gt;cve&lt;/code&gt;, &lt;code&gt;ghsa&lt;/code&gt;, &lt;code&gt;osvdb&lt;/code&gt;, and &lt;code&gt;url&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;notes&lt;/code&gt; [String] (optional): Internal notes regarding the vulnerability&#39;s inclusion in this database.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;rubies&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;engine&lt;/code&gt; [&lt;code&gt;ruby&lt;/code&gt; | &lt;code&gt;mruby&lt;/code&gt; | &lt;code&gt;jruby&lt;/code&gt; | &lt;code&gt;truffleruby&lt;/code&gt;] (required): Name of the affected Ruby implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;platform&lt;/code&gt; [String] (optional): If this vulnerability is platform-specific, name of platform this vulnerability affects (e.g. jruby)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cve&lt;/code&gt; [String] (optional): Common Vulnerabilities and Exposures (CVE) ID.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;osvdb&lt;/code&gt; [Integer] (optional): Open Sourced Vulnerability Database (OSVDB) ID.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ghsa&lt;/code&gt; [String] (optional): GitHub Security Advisory (GHSA) ID.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;url&lt;/code&gt; [String] (required): The URL to the full advisory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;title&lt;/code&gt; [String] (required): The title of the advisory or individual vulnerability. It must be a single line sentence.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;date&lt;/code&gt; [Date] (required): The public disclosure date of the advisory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;description&lt;/code&gt; [String] (required): One or more paragraphs describing the vulnerability. It may contain multiple paragraphs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cvss_v2&lt;/code&gt; [Float] (optional): The &lt;a href=&quot;https://www.first.org/cvss/v2/guide&quot;&gt;CVSSv2&lt;/a&gt; score for the vulnerability.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cvss_v3&lt;/code&gt; [Float] (optional): The &lt;a href=&quot;https://www.first.org/cvss/v3.1/user-guide&quot;&gt;CVSSv3&lt;/a&gt; score for the vulnerability.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cvss_v4&lt;/code&gt; [Float] (optional): The &lt;a href=&quot;https://www.first.org/cvss/v4.0/user-guide&quot;&gt;CVSSv4&lt;/a&gt; score for the vulnerability.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unaffected_versions&lt;/code&gt; [Array&amp;lt;String&amp;gt;] (optional): The version requirements for the unaffected versions of the Ruby implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;patched_versions&lt;/code&gt; [Array&amp;lt;String&amp;gt;] (optional): The version requirements for the patched versions of the Ruby implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;related&lt;/code&gt; [Hash&amp;lt;Array&amp;lt;String&amp;gt;&amp;gt;] (optional): Sometimes an advisory references many urls and other identifiers. Supported keys: &lt;code&gt;cve&lt;/code&gt;, &lt;code&gt;ghsa&lt;/code&gt;, &lt;code&gt;osvdb&lt;/code&gt;, and &lt;code&gt;url&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;notes&lt;/code&gt; [String] (optional): Internal notes regarding the vulnerability&#39;s inclusion in this database.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Prior to submitting a pull request, run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bundle install
bundle exec rspec
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;GitHub Advisory Sync&lt;/h2&gt; 
&lt;p&gt;There is a script that will create initial YAML files for RubyGem advisories which are in the &lt;a href=&quot;https://developer.github.com/v4/object/securityadvisory/&quot;&gt;GitHub Security Advisory API&lt;/a&gt;, but are not already in this dataset. This script can be periodically run to ensure this repo has all the data that is present in the GitHub Advisory data.&lt;/p&gt; 
&lt;p&gt;The GitHub Advisory API requires a token to access it.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can be a completely scope-less token (recommended); it does not require any permissions at all.&lt;/li&gt; 
 &lt;li&gt;Get yours at: &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;https://github.com/settings/tokens&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To run the GitHub Advisory sync to retrieve all advisories, start by executing the rake task:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;GH_API_TOKEN=&quot;your GitHub API Token&quot; bundle exec rake sync_github_advisories
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, to only retrieve advisories for a single gem:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;GH_API_TOKEN=&quot;your GitHub API Token&quot; bundle exec rake sync_github_advisories[gem_name]
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;The rake task will write YAML files for any missing advisories.&lt;/li&gt; 
 &lt;li&gt;Those files must be further edited. 
  &lt;ul&gt; 
   &lt;li&gt;Fill in &lt;code&gt;cvss_v3&lt;/code&gt; field by following the CVE link and getting it from page.&lt;/li&gt; 
   &lt;li&gt;Fill in &lt;code&gt;cvss_v4&lt;/code&gt; field by following the CVE link and getting it from page.&lt;/li&gt; 
   &lt;li&gt;Fill in &lt;code&gt;patched_versions&lt;/code&gt; field, using the comments at the bottom of the YAML file.&lt;/li&gt; 
   &lt;li&gt;Optionally fill in &lt;code&gt;unaffected_versions&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Delete the GitHub data at the bottom of the YAML file.&lt;/li&gt; 
   &lt;li&gt;Double check all the data, commit it, and make a PR.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Rails LTS&lt;/h2&gt; 
&lt;p&gt;The maintainers of &lt;a href=&quot;https://railslts.com/&quot;&gt;Rails LTS&lt;/a&gt; have &lt;a href=&quot;https://github.com/rubysec/ruby-advisory-db/pull/847&quot;&gt;asked us not to track the Rails LTS versions&lt;/a&gt;. If you are using &lt;a href=&quot;https://railslts.com/&quot;&gt;Rails LTS&lt;/a&gt; and &lt;a href=&quot;https://github.com/rubysec/bundler-audit&quot;&gt;bundler-audit&lt;/a&gt;, it is advised that you should add the &lt;a href=&quot;https://makandracards.com/railslts/474590-list-cves-addressed-rails-lts&quot;&gt;List of CVEs addressed by Rails LTS&lt;/a&gt; to your &lt;code&gt;.bundler-audit.yml&lt;/code&gt; file under &lt;code&gt;ignore:&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://github.com/rubysec/ruby-advisory-db/raw/master/CONTRIBUTORS.md&quot;&gt;CONTRIBUTORS.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This database also includes data from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Source_Vulnerability_Database&quot;&gt;Open Sourced Vulnerability Database&lt;/a&gt; developed by the Open Security Foundation (OSF) and its contributors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rails/rails</title>
      <link>https://github.com/rails/rails</link>
      <description>&lt;p&gt;Ruby on Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Rails&lt;/h1&gt; 
&lt;h2&gt;What&#39;s Rails?&lt;/h2&gt; 
&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Model-view-controller&quot;&gt;Model-View-Controller (MVC)&lt;/a&gt; pattern.&lt;/p&gt; 
&lt;p&gt;Understanding the MVC pattern is key to understanding Rails. MVC divides your application into three layers: Model, View, and Controller, each with a specific responsibility.&lt;/p&gt; 
&lt;h2&gt;Model layer&lt;/h2&gt; 
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Model layer&lt;/strong&gt;&lt;/em&gt; represents the domain model (such as Account, Product, Person, Post, etc.) and encapsulates the business logic specific to your application. In Rails, database-backed model classes are derived from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. &lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&quot;&gt;Active Record&lt;/a&gt; allows you to present the data from database rows as objects and embellish these data objects with business logic methods. Although most Rails models are backed by a database, models can also be ordinary Ruby classes, or Ruby classes that implement a set of interfaces as provided by the &lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&quot;&gt;Active Model&lt;/a&gt; module.&lt;/p&gt; 
&lt;h2&gt;View layer&lt;/h2&gt; 
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;View layer&lt;/strong&gt;&lt;/em&gt; is composed of &quot;templates&quot; that are responsible for providing appropriate representations of your application&#39;s resources. Templates can come in a variety of formats, but most view templates are HTML with embedded Ruby code (ERB files). Views are typically rendered to generate a controller response or to generate the body of an email. In Rails, View generation is handled by &lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&quot;&gt;Action View&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Controller layer&lt;/h2&gt; 
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Controller layer&lt;/strong&gt;&lt;/em&gt; is responsible for handling incoming HTTP requests and providing a suitable response. Usually, this means returning HTML, but Rails controllers can also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and manipulate models, and render view templates in order to generate the appropriate HTTP response. In Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and controller classes are derived from &lt;code&gt;ActionController::Base&lt;/code&gt;. Action Dispatch and Action Controller are bundled together in &lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&quot;&gt;Action Pack&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Frameworks and libraries&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&quot;&gt;Active Record&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&quot;&gt;Active Model&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&quot;&gt;Action Pack&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&quot;&gt;Action View&lt;/a&gt; can each be used independently outside Rails.&lt;/p&gt; 
&lt;p&gt;In addition to that, Rails also comes with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actionmailer/README.rdoc&quot;&gt;Action Mailer&lt;/a&gt;, a library to generate and send emails&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actionmailbox/README.md&quot;&gt;Action Mailbox&lt;/a&gt;, a library to receive emails within a Rails application&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/activejob/README.md&quot;&gt;Active Job&lt;/a&gt;, a framework for declaring jobs and making them run on a variety of queuing backends&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actioncable/README.md&quot;&gt;Action Cable&lt;/a&gt;, a framework to integrate WebSockets with a Rails application&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/activestorage/README.md&quot;&gt;Active Storage&lt;/a&gt;, a library to attach cloud and local files to Rails applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/actiontext/README.md&quot;&gt;Action Text&lt;/a&gt;, a library to handle rich text content&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/rails/main/activesupport/README.rdoc&quot;&gt;Active Support&lt;/a&gt;, a collection of utility classes and standard library extensions that are useful for Rails, and may also be used independently outside Rails&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install Rails at the command prompt if you haven&#39;t yet:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gem install rails
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;At the command prompt, create a new Rails application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ rails new myapp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &quot;myapp&quot; is the application name.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Change directory to &lt;code&gt;myapp&lt;/code&gt; and start the web server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd myapp
$ bin/rails server
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run with &lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt; for options.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and you&#39;ll see the Rails bootscreen with your Rails and Ruby versions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Follow the guidelines to start developing your application. You may find the following resources handy:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/getting_started.html&quot;&gt;Getting Started with Rails&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org&quot;&gt;Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org&quot;&gt;The API Documentation&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We encourage you to contribute to Ruby on Rails! Please check out the &lt;a href=&quot;https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html&quot;&gt;Contributing to Ruby on Rails guide&lt;/a&gt; for guidelines about how to proceed. &lt;a href=&quot;https://contributors.rubyonrails.org&quot;&gt;Join us!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Trying to report a possible security vulnerability in Rails? Please check out our &lt;a href=&quot;https://rubyonrails.org/security&quot;&gt;security policy&lt;/a&gt; for guidelines about how to proceed.&lt;/p&gt; 
&lt;p&gt;Everyone interacting in Rails and its sub-projects&#39; codebases, issue trackers, chat rooms, and mailing lists is expected to follow the Rails &lt;a href=&quot;https://rubyonrails.org/conduct&quot;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Ruby on Rails is released under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CocoaPods/CocoaPods</title>
      <link>https://github.com/CocoaPods/CocoaPods</link>
      <description>&lt;p&gt;The Cocoa Dependency Manager.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/CocoaPods/shared_resources/master/assets/cocoapods-banner-readme.png&quot; alt=&quot;CocoaPods Logo&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;CocoaPods: The Cocoa dependency manager&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/actions/workflows/Specs.yml&quot;&gt;&lt;img src=&quot;https://github.com/CocoaPods/CocoaPods/workflows/Specs/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://rubygems.org/gems/cocoapods&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/cocoapods&quot; alt=&quot;Gem Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/github/CocoaPods/CocoaPods/maintainability&quot;&gt;&lt;img src=&quot;https://api.codeclimate.com/v1/badges/8f0fe544baf2ae1acc2b/maintainability&quot; alt=&quot;Maintainability&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/github/CocoaPods/CocoaPods/test_coverage&quot;&gt;&lt;img src=&quot;https://api.codeclimate.com/v1/badges/8f0fe544baf2ae1acc2b/test_coverage&quot; alt=&quot;Test Coverage&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;CocoaPods manages dependencies for your Xcode projects.&lt;/p&gt; 
&lt;p&gt;You specify the dependencies for your project in a simple text file: your &lt;code&gt;Podfile&lt;/code&gt;. CocoaPods recursively resolves dependencies between libraries, fetches source code for all dependencies, and creates and maintains an Xcode workspace to build your project. The latest released Xcode versions and the prior version are supported.&lt;/p&gt; 
&lt;p&gt;Installing and updating CocoaPods is very easy. Don&#39;t miss the &lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html#installation&quot;&gt;Installation guide&lt;/a&gt; and the &lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html&quot;&gt;Getting Started guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Project Goals&lt;/h2&gt; 
&lt;p&gt;CocoaPods aims to improve the engagement with, and discoverability of, third party open-source Cocoa libraries. These project goals influence and drive the design of CocoaPods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and share libraries, and use them in your own projects, without creating extra work for library authors. Integrate non-CocoaPods libraries and hack on your own fork of any CocoaPods library with a simple transparent &lt;code&gt;Podspec&lt;/code&gt; standard.&lt;/li&gt; 
 &lt;li&gt;Allow library authors to structure their libraries however they like.&lt;/li&gt; 
 &lt;li&gt;Save time for library authors by automating a lot of Xcode work not related to their libraries&#39; functionality.&lt;/li&gt; 
 &lt;li&gt;Support any source management system. (Currently supported are &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;svn&lt;/code&gt;, &lt;code&gt;mercurial&lt;/code&gt;, &lt;code&gt;bazaar&lt;/code&gt;, and various types of archives downloaded over HTTP.)&lt;/li&gt; 
 &lt;li&gt;Promote a culture of distributed collaboration on pods, but also provide features only possible with a centralised solution to foster a community.&lt;/li&gt; 
 &lt;li&gt;Build tools on top of the core Cocoa development system, including those typically deployed to other operating systems, such as web-services.&lt;/li&gt; 
 &lt;li&gt;Provide opinionated and automated integration, but make it completely optional. You may manually integrate your CocoaPods dependencies into your Xcode project as you see fit, with or without a workspace.&lt;/li&gt; 
 &lt;li&gt;Solve everyday problems for Cocoa and Xcode developers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Lovingly sponsored by a collection of companies, see the footer of &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods.org&lt;/a&gt; for an up-to-date list.&lt;/p&gt; 
&lt;h2&gt;Collaborate&lt;/h2&gt; 
&lt;p&gt;All CocoaPods development happens on GitHub. Contributions make for good karma and we &lt;a href=&quot;https://blog.cocoapods.org/starting-open-source/&quot;&gt;welcome new&lt;/a&gt; contributors with joy. We take contributors seriously, and thus have a contributor &lt;a href=&quot;https://raw.githubusercontent.com/CocoaPods/CocoaPods/master/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Link&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods.org&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Homepage and search for Pods.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://twitter.com/CocoaPods&quot;&gt;@CocoaPods&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Follow CocoaPods on Twitter to stay up to date.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://blog.cocoapods.org&quot;&gt;Blog&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;The CocoaPods blog.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://groups.google.com/group/cocoapods&quot;&gt;Mailing List&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Feel free to ask any kind of question.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://guides.cocoapods.org&quot;&gt;Guides&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Everything you want to know about CocoaPods.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/raw/master/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;See the changes introduced in each CocoaPods version.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://feeds.cocoapods.org/new-pods.rss&quot;&gt;New Pods RSS&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Don&#39;t miss any new Pods.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CocoaPods/CocoaPods/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Find out the standards we hold ourselves to.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Projects&lt;/h2&gt; 
&lt;p&gt;CocoaPods is composed of the following projects:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Status&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Project&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Info&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/actions/workflows/Specs.yml&quot;&gt;&lt;img src=&quot;https://github.com/CocoaPods/CocoaPods/workflows/Specs/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods&quot;&gt;CocoaPods&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;The CocoaPods command line tool.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://guides.cocoapods.org&quot;&gt;guides&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/Core/actions/workflows/Specs.yml&quot;&gt;&lt;img src=&quot;https://github.com/CocoaPods/Core/workflows/Specs/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/Core&quot;&gt;CocoaPods Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Support for working with specifications and podfiles.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://guides.cocoapods.org/contributing/components.html&quot;&gt;docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/cocoapods-downloader/actions/workflows/Specs.yml&quot;&gt;&lt;img src=&quot;https://github.com/CocoaPods/cocoapods-downloader/workflows/Specs/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/cocoapods-downloader&quot;&gt;CocoaPods Downloader&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Downloaders for various source types.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/cocoapods-downloader&quot;&gt;docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj/actions/workflows/Specs.yml&quot;&gt;&lt;img src=&quot;https://github.com/CocoaPods/Xcodeproj/workflows/Specs/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot;&gt;Xcodeproj&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Create and modify Xcode projects from Ruby.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/xcodeproj&quot;&gt;docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/CLAide/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/CocoaPods/CLAide/workflows/ci/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/CLAide&quot;&gt;CLAide&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A small command-line interface framework.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/claide&quot;&gt;docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/Molinillo/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/CocoaPods/Molinillo/workflows/test/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/Molinillo&quot;&gt;Molinillo&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A powerful generic dependency resolver.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/molinillo&quot;&gt;docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/CocoaPods/Specs&quot;&gt;Master Repo &lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Master repository of specifications.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://guides.cocoapods.org/making/specs-and-specs-repo.html&quot;&gt;guides&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>rails/solid_queue</title>
      <link>https://github.com/rails/solid_queue</link>
      <description>&lt;p&gt;Database-backed Active Job backend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Solid Queue&lt;/h1&gt; 
&lt;p&gt;Solid Queue is a DB-based queuing backend for &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_job_basics.html&quot;&gt;Active Job&lt;/a&gt;, designed with simplicity and performance in mind.&lt;/p&gt; 
&lt;p&gt;Besides regular job enqueuing and processing, Solid Queue supports delayed jobs, concurrency controls, recurring jobs, pausing queues, numeric priorities per job, priorities by queue order, and bulk enqueuing (&lt;code&gt;enqueue_all&lt;/code&gt; for Active Job&#39;s &lt;code&gt;perform_all_later&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Solid Queue can be used with SQL databases such as MySQL, PostgreSQL or SQLite, and it leverages the &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt; clause, if available, to avoid blocking and waiting on locks when polling jobs. It relies on Active Job for retries, discarding, error handling, serialization, or delays, and it&#39;s compatible with Ruby on Rails&#39;s multi-threading.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#usage-in-development-and-other-non-production-environments&quot;&gt;Usage in development and other non-production environments&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#single-database-configuration&quot;&gt;Single database configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#incremental-adoption&quot;&gt;Incremental adoption&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#high-performance-requirements&quot;&gt;High performance requirements&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#configuration&quot;&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#workers-dispatchers-and-scheduler&quot;&gt;Workers, dispatchers and scheduler&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#queue-order-and-priorities&quot;&gt;Queue order and priorities&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#queues-specification-and-performance&quot;&gt;Queues specification and performance&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#threads-processes-and-signals&quot;&gt;Threads, processes and signals&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#database-configuration&quot;&gt;Database configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#other-configuration-settings&quot;&gt;Other configuration settings&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#lifecycle-hooks&quot;&gt;Lifecycle hooks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#errors-when-enqueuing&quot;&gt;Errors when enqueuing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&quot;&gt;Concurrency controls&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#failed-jobs-and-retries&quot;&gt;Failed jobs and retries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#error-reporting-on-jobs&quot;&gt;Error reporting on jobs&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#puma-plugin&quot;&gt;Puma plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#jobs-and-transactional-integrity&quot;&gt;Jobs and transactional integrity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#recurring-tasks&quot;&gt;Recurring tasks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#inspiration&quot;&gt;Inspiration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Solid Queue is configured by default in new Rails 8 applications. But if you&#39;re running an earlier version, you can add it manually following these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;bundle add solid_queue&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bin/rails solid_queue:install&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;(Note: The minimum supported version of Rails is 7.1 and Ruby is 3.1.6.)&lt;/p&gt; 
&lt;p&gt;This will configure Solid Queue as the production Active Job backend, create the configuration files &lt;code&gt;config/queue.yml&lt;/code&gt; and &lt;code&gt;config/recurring.yml&lt;/code&gt;, and create the &lt;code&gt;db/queue_schema.rb&lt;/code&gt;. It&#39;ll also create a &lt;code&gt;bin/jobs&lt;/code&gt; executable wrapper that you can use to start Solid Queue.&lt;/p&gt; 
&lt;p&gt;Once you&#39;ve done that, you will then have to add the configuration for the queue database in &lt;code&gt;config/database.yml&lt;/code&gt;. If you&#39;re using SQLite, it&#39;ll look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;production:
  primary:
    &amp;lt;&amp;lt;: *default
    database: storage/production.sqlite3
  queue:
    &amp;lt;&amp;lt;: *default
    database: storage/production_queue.sqlite3
    migrations_paths: db/queue_migrate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;...or if you&#39;re using MySQL/PostgreSQL/Trilogy:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;production:
  primary: &amp;amp;primary_production
    &amp;lt;&amp;lt;: *default
    database: app_production
    username: app
    password: &amp;lt;%= ENV[&quot;APP_DATABASE_PASSWORD&quot;] %&amp;gt;
  queue:
    &amp;lt;&amp;lt;: *primary_production
    database: app_production_queue
    migrations_paths: db/queue_migrate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run &lt;code&gt;db:prepare&lt;/code&gt; in production to ensure the database is created and the schema is loaded.&lt;/p&gt; 
&lt;p&gt;Now you&#39;re ready to start processing jobs by running &lt;code&gt;bin/jobs&lt;/code&gt; on the server that&#39;s doing the work. This will start processing jobs in all queues using the default configuration. See &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#configuration&quot;&gt;below&lt;/a&gt; to learn more about configuring Solid Queue.&lt;/p&gt; 
&lt;p&gt;For small projects, you can run Solid Queue on the same machine as your webserver. When you&#39;re ready to scale, Solid Queue supports horizontal scaling out-of-the-box. You can run Solid Queue on a separate server from your webserver, or even run &lt;code&gt;bin/jobs&lt;/code&gt; on multiple machines at the same time. Depending on the configuration, you can designate some machines to run only dispatchers or only workers. See the &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#configuration&quot;&gt;configuration&lt;/a&gt; section for more details on this.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: future changes to the schema will come in the form of regular migrations.&lt;/p&gt; 
&lt;h3&gt;Usage in development and other non-production environments&lt;/h3&gt; 
&lt;p&gt;Calling &lt;code&gt;bin/rails solid_queue:install&lt;/code&gt; will automatically add &lt;code&gt;config.solid_queue.connects_to = { database: { writing: :queue } }&lt;/code&gt; to &lt;code&gt;config/environments/production.rb&lt;/code&gt;. In order to use Solid Queue in other environments (such as development or staging), you&#39;ll need to add a similar configuration(s).&lt;/p&gt; 
&lt;p&gt;For example, if you&#39;re using SQLite in development, update &lt;code&gt;database.yml&lt;/code&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;development:
+ primary:
    &amp;lt;&amp;lt;: *default
    database: storage/development.sqlite3
+  queue:
+    &amp;lt;&amp;lt;: *default
+    database: storage/development_queue.sqlite3
+    migrations_paths: db/queue_migrate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, add the following to &lt;code&gt;development.rb&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;  # Use Solid Queue in Development.
  config.active_job.queue_adapter = :solid_queue
  config.solid_queue.connects_to = { database: { writing: :queue } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once you&#39;ve added this, run &lt;code&gt;db:prepare&lt;/code&gt; to create the Solid Queue database and load the schema.&lt;/p&gt; 
&lt;p&gt;Finally, in order for jobs to be processed, you&#39;ll need to have Solid Queue running. In Development, this can be done via &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#puma-plugin&quot;&gt;the Puma plugin&lt;/a&gt; as well. In &lt;code&gt;puma.rb&lt;/code&gt; update the following line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# You can either set the env var, or check for development
plugin :solid_queue if ENV[&quot;SOLID_QUEUE_IN_PUMA&quot;] || Rails.env.development?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also just use &lt;code&gt;bin/jobs&lt;/code&gt;, but in this case you might want to &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#other-configuration-settings&quot;&gt;set a different logger for Solid Queue&lt;/a&gt; because the default logger will log to &lt;code&gt;log/development.log&lt;/code&gt; and you won&#39;t see anything when you run &lt;code&gt;bin/jobs&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.solid_queue.logger = ActiveSupport::Logger.new(STDOUT)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note about Action Cable&lt;/strong&gt;: If you use Action Cable (or anything dependent on Action Cable, such as Turbo Streams), you will also need to update it to use a database.&lt;/p&gt; 
&lt;p&gt;In &lt;code&gt;config/cable.yml&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;development:
-  adapter: async
+ adapter: solid_cable
+  connects_to:
+    database:
+      writing: cable
+  polling_interval: 0.1.seconds
+  message_retention: 1.day
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In &lt;code&gt;config/database.yml&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;development:
  primary:
    &amp;lt;&amp;lt;: *default
    database: storage/development.sqlite3
+  cable:
+    &amp;lt;&amp;lt;: *default
+    database: storage/development_cable.sqlite3
+    migrations_paths: db/cable_migrate
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Single database configuration&lt;/h3&gt; 
&lt;p&gt;Running Solid Queue in a separate database is recommended, but it&#39;s also possible to use one single database for both the app and the queue. Just follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Copy the contents of &lt;code&gt;db/queue_schema.rb&lt;/code&gt; into a normal migration and delete &lt;code&gt;db/queue_schema.rb&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Remove &lt;code&gt;config.solid_queue.connects_to&lt;/code&gt; from &lt;code&gt;production.rb&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Migrate your database. You are ready to run &lt;code&gt;bin/jobs&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You won&#39;t have multiple databases, so &lt;code&gt;database.yml&lt;/code&gt; doesn&#39;t need to have primary and queue database.&lt;/p&gt; 
&lt;h3&gt;Incremental adoption&lt;/h3&gt; 
&lt;p&gt;If you&#39;re planning to adopt Solid Queue incrementally by switching one job at the time, you can do so by leaving the &lt;code&gt;config.active_job.queue_adapter&lt;/code&gt; set to your old backend, and then set the &lt;code&gt;queue_adapter&lt;/code&gt; directly in the jobs you&#39;re moving:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# app/jobs/my_job.rb

class MyJob &amp;lt; ApplicationJob
  self.queue_adapter = :solid_queue
  # ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;High performance requirements&lt;/h3&gt; 
&lt;p&gt;Solid Queue was designed for the highest throughput when used with MySQL 8+ or PostgreSQL 9.5+, as they support &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt;. You can use it with older versions, but in that case, you might run into lock waits if you run multiple workers for the same queue. You can also use it with SQLite on smaller applications.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;h3&gt;Workers, dispatchers and scheduler&lt;/h3&gt; 
&lt;p&gt;We have several types of actors in Solid Queue:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Workers&lt;/em&gt; are in charge of picking jobs ready to run from queues and processing them. They work off the &lt;code&gt;solid_queue_ready_executions&lt;/code&gt; table.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Dispatchers&lt;/em&gt; are in charge of selecting jobs scheduled to run in the future that are due and &lt;em&gt;dispatching&lt;/em&gt; them, which is simply moving them from the &lt;code&gt;solid_queue_scheduled_executions&lt;/code&gt; table over to the &lt;code&gt;solid_queue_ready_executions&lt;/code&gt; table so that workers can pick them up. On top of that, they do some maintenance work related to &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&quot;&gt;concurrency controls&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;em&gt;scheduler&lt;/em&gt; manages &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#recurring-tasks&quot;&gt;recurring tasks&lt;/a&gt;, enqueuing jobs for them when they&#39;re due.&lt;/li&gt; 
 &lt;li&gt;The &lt;em&gt;supervisor&lt;/em&gt; runs workers and dispatchers according to the configuration, controls their heartbeats, and stops and starts them when needed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Solid Queue&#39;s supervisor will fork a separate process for each supervised worker/dispatcher/scheduler.&lt;/p&gt; 
&lt;p&gt;By default, Solid Queue will try to find your configuration under &lt;code&gt;config/queue.yml&lt;/code&gt;, but you can set a different path using the environment variable &lt;code&gt;SOLID_QUEUE_CONFIG&lt;/code&gt; or by using the &lt;code&gt;-c/--config_file&lt;/code&gt; option with &lt;code&gt;bin/jobs&lt;/code&gt;, like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bin/jobs -c config/calendar.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is what this configuration looks like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;production:
  dispatchers:
    - polling_interval: 1
      batch_size: 500
      concurrency_maintenance_interval: 300
  workers:
    - queues: &quot;*&quot;
      threads: 3
      polling_interval: 2
    - queues: [ real_time, background ]
      threads: 5
      polling_interval: 0.1
      processes: 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Everything is optional. If no configuration at all is provided, Solid Queue will run with one dispatcher and one worker with default settings. If you want to run only dispatchers or workers, you just need to include that section alone in the configuration. For example, with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;production:
  dispatchers:
    - polling_interval: 1
      batch_size: 500
      concurrency_maintenance_interval: 300
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;the supervisor will run 1 dispatcher and no workers.&lt;/p&gt; 
&lt;p&gt;Here&#39;s an overview of the different options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;polling_interval&lt;/code&gt;: the time interval in seconds that workers and dispatchers will wait before checking for more jobs. This time defaults to &lt;code&gt;1&lt;/code&gt; second for dispatchers and &lt;code&gt;0.1&lt;/code&gt; seconds for workers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;batch_size&lt;/code&gt;: the dispatcher will dispatch jobs in batches of this size. The default is 500.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;concurrency_maintenance_interval&lt;/code&gt;: the time interval in seconds that the dispatcher will wait before checking for blocked jobs that can be unblocked. Read more about &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&quot;&gt;concurrency controls&lt;/a&gt; to learn more about this setting. It defaults to &lt;code&gt;600&lt;/code&gt; seconds.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;queues&lt;/code&gt;: the list of queues that workers will pick jobs from. You can use &lt;code&gt;*&lt;/code&gt; to indicate all queues (which is also the default and the behaviour you&#39;ll get if you omit this). You can provide a single queue, or a list of queues as an array. Jobs will be polled from those queues in order, so for example, with &lt;code&gt;[ real_time, background ]&lt;/code&gt;, no jobs will be taken from &lt;code&gt;background&lt;/code&gt; unless there aren&#39;t any more jobs waiting in &lt;code&gt;real_time&lt;/code&gt;. You can also provide a prefix with a wildcard to match queues starting with a prefix. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;staging:
  workers:
    - queues: staging*
      threads: 3
      polling_interval: 5

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create a worker fetching jobs from all queues starting with &lt;code&gt;staging&lt;/code&gt;. The wildcard &lt;code&gt;*&lt;/code&gt; is only allowed on its own or at the end of a queue name; you can&#39;t specify queue names such as &lt;code&gt;*_some_queue&lt;/code&gt;. These will be ignored.&lt;/p&gt; &lt;p&gt;Finally, you can combine prefixes with exact names, like &lt;code&gt;[ staging*, background ]&lt;/code&gt;, and the behaviour with respect to order will be the same as with only exact names.&lt;/p&gt; &lt;p&gt;Check the sections below on &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#queue-order-and-priorities&quot;&gt;how queue order behaves combined with priorities&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#queues-specification-and-performance&quot;&gt;how the way you specify the queues per worker might affect performance&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;threads&lt;/code&gt;: this is the max size of the thread pool that each worker will have to run jobs. Each worker will fetch this number of jobs from their queue(s), at most and will post them to the thread pool to be run. By default, this is &lt;code&gt;3&lt;/code&gt;. Only workers have this setting. It is recommended to set this value less than or equal to the queue database&#39;s connection pool size minus 2, as each worker thread uses one connection, and two additional connections are reserved for polling and heartbeat.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;processes&lt;/code&gt;: this is the number of worker processes that will be forked by the supervisor with the settings given. By default, this is &lt;code&gt;1&lt;/code&gt;, just a single process. This setting is useful if you want to dedicate more than one CPU core to a queue or queues with the same configuration. Only workers have this setting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;concurrency_maintenance&lt;/code&gt;: whether the dispatcher will perform the concurrency maintenance work. This is &lt;code&gt;true&lt;/code&gt; by default, and it&#39;s useful if you don&#39;t use any &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&quot;&gt;concurrency controls&lt;/a&gt; and want to disable it or if you run multiple dispatchers and want some of them to just dispatch jobs without doing anything else.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Queue order and priorities&lt;/h3&gt; 
&lt;p&gt;As mentioned above, if you specify a list of queues for a worker, these will be polled in the order given, such as for the list &lt;code&gt;real_time,background&lt;/code&gt;, no jobs will be taken from &lt;code&gt;background&lt;/code&gt; unless there aren&#39;t any more jobs waiting in &lt;code&gt;real_time&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Active Job also supports positive integer priorities when enqueuing jobs. In Solid Queue, the smaller the value, the higher the priority. The default is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This is useful when you run jobs with different importance or urgency in the same queue. Within the same queue, jobs will be picked in order of priority, but in a list of queues, the queue order takes precedence, so in the previous example with &lt;code&gt;real_time,background&lt;/code&gt;, jobs in the &lt;code&gt;real_time&lt;/code&gt; queue will be picked before jobs in the &lt;code&gt;background&lt;/code&gt; queue, even if those in the &lt;code&gt;background&lt;/code&gt; queue have a higher priority (smaller value) set.&lt;/p&gt; 
&lt;p&gt;We recommend not mixing queue order with priorities but either choosing one or the other, as that will make job execution order more straightforward for you.&lt;/p&gt; 
&lt;h3&gt;Queues specification and performance&lt;/h3&gt; 
&lt;p&gt;To keep polling performant and ensure a covering index is always used, Solid Queue only does two types of polling queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;-- No filtering by queue
SELECT job_id
FROM solid_queue_ready_executions
ORDER BY priority ASC, job_id ASC
LIMIT ?
FOR UPDATE SKIP LOCKED;

-- Filtering by a single queue
SELECT job_id
FROM solid_queue_ready_executions
WHERE queue_name = ?
ORDER BY priority ASC, job_id ASC
LIMIT ?
FOR UPDATE SKIP LOCKED;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first one (no filtering by queue) is used when you specify&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;queues: *
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and there aren&#39;t any queues paused, as we want to target all queues.&lt;/p&gt; 
&lt;p&gt;In other cases, we need to have a list of queues to filter by, in order, because we can only filter by a single queue at a time to ensure we use an index to sort. This means that if you specify your queues as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;queues: beta*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;we&#39;ll need to get a list of all existing queues matching that prefix first, with a query that would look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT DISTINCT(queue_name)
FROM solid_queue_ready_executions
WHERE queue_name LIKE &#39;beta%&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This type of &lt;code&gt;DISTINCT&lt;/code&gt; query on a column that&#39;s the leftmost column in an index can be performed very fast in MySQL thanks to a technique called &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/group-by-optimization.html#loose-index-scan&quot;&gt;Loose Index Scan&lt;/a&gt;. PostgreSQL and SQLite, however, don&#39;t implement this technique, which means that if your &lt;code&gt;solid_queue_ready_executions&lt;/code&gt; table is very big because your queues get very deep, this query will get slow. Normally your &lt;code&gt;solid_queue_ready_executions&lt;/code&gt; table will be small, but it can happen.&lt;/p&gt; 
&lt;p&gt;Similarly to using prefixes, the same will happen if you have paused queues, because we need to get a list of all queues with a query like&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT DISTINCT(queue_name)
FROM solid_queue_ready_executions
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then remove the paused ones. Pausing in general should be something rare, used in special circumstances, and for a short period of time. If you don&#39;t want to process jobs from a queue anymore, the best way to do that is to remove it from your list of queues.&lt;/p&gt; 
&lt;p&gt;üí° To sum up, &lt;strong&gt;if you want to ensure optimal performance on polling&lt;/strong&gt;, the best way to do that is to always specify exact names for them, and not have any queues paused.&lt;/p&gt; 
&lt;p&gt;Do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;queues: [ background, backend ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;instead of this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;queues: back*
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Threads, processes and signals&lt;/h3&gt; 
&lt;p&gt;Workers in Solid Queue use a thread pool to run work in multiple threads, configurable via the &lt;code&gt;threads&lt;/code&gt; parameter above. Besides this, parallelism can be achieved via multiple processes on one machine (configurable via different workers or the &lt;code&gt;processes&lt;/code&gt; parameter above) or by horizontal scaling.&lt;/p&gt; 
&lt;p&gt;The supervisor is in charge of managing these processes, and it responds to the following signals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;TERM&lt;/code&gt;, &lt;code&gt;INT&lt;/code&gt;: starts graceful termination. The supervisor will send a &lt;code&gt;TERM&lt;/code&gt; signal to its supervised processes, and it&#39;ll wait up to &lt;code&gt;SolidQueue.shutdown_timeout&lt;/code&gt; time until they&#39;re done. If any supervised processes are still around by then, it&#39;ll send a &lt;code&gt;QUIT&lt;/code&gt; signal to them to indicate they must exit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;QUIT&lt;/code&gt;: starts immediate termination. The supervisor will send a &lt;code&gt;QUIT&lt;/code&gt; signal to its supervised processes, causing them to exit immediately.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When receiving a &lt;code&gt;QUIT&lt;/code&gt; signal, if workers still have jobs in-flight, these will be returned to the queue when the processes are deregistered.&lt;/p&gt; 
&lt;p&gt;If processes have no chance of cleaning up before exiting (e.g. if someone pulls a cable somewhere), in-flight jobs might remain claimed by the processes executing them. Processes send heartbeats, and the supervisor checks and prunes processes with expired heartbeats. Jobs that were claimed by processes with an expired heartbeat will be marked as failed with a &lt;code&gt;SolidQueue::Processes::ProcessPrunedError&lt;/code&gt;. You can configure both the frequency of heartbeats and the threshold to consider a process dead. See the section below for this.&lt;/p&gt; 
&lt;p&gt;In a similar way, if a worker is terminated in any other way not initiated by the above signals (e.g. a worker is sent a &lt;code&gt;KILL&lt;/code&gt; signal), jobs in progress will be marked as failed so that they can be inspected, with a &lt;code&gt;SolidQueue::Processes::Process::ProcessExitError&lt;/code&gt;. Sometimes a job in particular is responsible for this, for example, if it has a memory leak and you have a mechanism to kill processes over a certain memory threshold, so this will help identifying this kind of situation.&lt;/p&gt; 
&lt;h3&gt;Database configuration&lt;/h3&gt; 
&lt;p&gt;You can configure the database used by Solid Queue via the &lt;code&gt;config.solid_queue.connects_to&lt;/code&gt; option in the &lt;code&gt;config/application.rb&lt;/code&gt; or &lt;code&gt;config/environments/production.rb&lt;/code&gt; config files. By default, a single database is used for both writing and reading called &lt;code&gt;queue&lt;/code&gt; to match the database configuration you set up during the install.&lt;/p&gt; 
&lt;p&gt;All the options available to Active Record for multiple databases can be used here.&lt;/p&gt; 
&lt;h3&gt;Other configuration settings&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: The settings in this section should be set in your &lt;code&gt;config/application.rb&lt;/code&gt; or your environment config like this: &lt;code&gt;config.solid_queue.silence_polling = true&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;There are several settings that control how Solid Queue works that you can set as well:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;logger&lt;/code&gt;: the logger you want Solid Queue to use. Defaults to the app logger.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;app_executor&lt;/code&gt;: the &lt;a href=&quot;https://guides.rubyonrails.org/threading_and_code_execution.html#executor&quot;&gt;Rails executor&lt;/a&gt; used to wrap asynchronous operations, defaults to the app executor&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;on_thread_error&lt;/code&gt;: custom lambda/Proc to call when there&#39;s an error within a Solid Queue thread that takes the exception raised as argument. Defaults to&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;-&amp;gt; (exception) { Rails.error.report(exception, handled: false) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;This is not used for errors raised within a job execution&lt;/strong&gt;. Errors happening in jobs are handled by Active Job&#39;s &lt;code&gt;retry_on&lt;/code&gt; or &lt;code&gt;discard_on&lt;/code&gt;, and ultimately will result in &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#failed-jobs-and-retries&quot;&gt;failed jobs&lt;/a&gt;. This is for errors happening within Solid Queue itself.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;use_skip_locked&lt;/code&gt;: whether to use &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt; when performing locking reads. This will be automatically detected in the future, and for now, you&#39;d only need to set this to &lt;code&gt;false&lt;/code&gt; if your database doesn&#39;t support it. For MySQL, that&#39;d be versions &amp;lt; 8, and for PostgreSQL, versions &amp;lt; 9.5. If you use SQLite, this has no effect, as writes are sequential.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;process_heartbeat_interval&lt;/code&gt;: the heartbeat interval that all processes will follow‚Äîdefaults to 60 seconds.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;process_alive_threshold&lt;/code&gt;: how long to wait until a process is considered dead after its last heartbeat‚Äîdefaults to 5 minutes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;shutdown_timeout&lt;/code&gt;: time the supervisor will wait since it sent the &lt;code&gt;TERM&lt;/code&gt; signal to its supervised processes before sending a &lt;code&gt;QUIT&lt;/code&gt; version to them requesting immediate termination‚Äîdefaults to 5 seconds.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;silence_polling&lt;/code&gt;: whether to silence Active Record logs emitted when polling for both workers and dispatchers‚Äîdefaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;supervisor_pidfile&lt;/code&gt;: path to a pidfile that the supervisor will create when booting to prevent running more than one supervisor in the same host, or in case you want to use it for a health check. It&#39;s &lt;code&gt;nil&lt;/code&gt; by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;preserve_finished_jobs&lt;/code&gt;: whether to keep finished jobs in the &lt;code&gt;solid_queue_jobs&lt;/code&gt; table‚Äîdefaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clear_finished_jobs_after&lt;/code&gt;: period to keep finished jobs around, in case &lt;code&gt;preserve_finished_jobs&lt;/code&gt; is true‚Äîdefaults to 1 day. &lt;strong&gt;Note:&lt;/strong&gt; Right now, there&#39;s no automatic cleanup of finished jobs. You&#39;d need to do this by periodically invoking &lt;code&gt;SolidQueue::Job.clear_finished_in_batches&lt;/code&gt;, which can be configured as &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#recurring-tasks&quot;&gt;a recurring task&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;default_concurrency_control_period&lt;/code&gt;: the value to be used as the default for the &lt;code&gt;duration&lt;/code&gt; parameter in &lt;a href=&quot;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&quot;&gt;concurrency controls&lt;/a&gt;. It defaults to 3 minutes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Lifecycle hooks&lt;/h2&gt; 
&lt;p&gt;In Solid queue, you can hook into two different points in the supervisor&#39;s life:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;start&lt;/code&gt;: after the supervisor has finished booting and right before it forks workers and dispatchers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stop&lt;/code&gt;: after receiving a signal (&lt;code&gt;TERM&lt;/code&gt;, &lt;code&gt;INT&lt;/code&gt; or &lt;code&gt;QUIT&lt;/code&gt;) and right before starting graceful or immediate shutdown.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And into two different points in the worker&#39;s, dispatcher&#39;s and scheduler&#39;s life:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;(worker|dispatcher|scheduler)_start&lt;/code&gt;: after the worker/dispatcher/scheduler has finished booting and right before it starts the polling loop or loading the recurring schedule.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;(worker|dispatcher|scheduler)_stop&lt;/code&gt;: after receiving a signal (&lt;code&gt;TERM&lt;/code&gt;, &lt;code&gt;INT&lt;/code&gt; or &lt;code&gt;QUIT&lt;/code&gt;) and right before starting graceful or immediate shutdown (which is just &lt;code&gt;exit!&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each of these hooks has an instance of the supervisor/worker/dispatcher/scheduler yielded to the block so that you may read its configuration for logging or metrics reporting purposes.&lt;/p&gt; 
&lt;p&gt;You can use the following methods with a block to do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;SolidQueue.on_start
SolidQueue.on_stop

SolidQueue.on_worker_start
SolidQueue.on_worker_stop

SolidQueue.on_dispatcher_start
SolidQueue.on_dispatcher_stop

SolidQueue.on_scheduler_start
SolidQueue.on_scheduler_stop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;SolidQueue.on_start do |supervisor|
  MyMetricsReporter.process_name = supervisor.name

  start_metrics_server
end

SolidQueue.on_stop do |_supervisor|
  stop_metrics_server
end

SolidQueue.on_worker_start do |worker|
  MyMetricsReporter.process_name = worker.name
  MyMetricsReporter.queues = worker.queues.join(&#39;,&#39;)
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These can be called several times to add multiple hooks, but it needs to happen before Solid Queue is started. An initializer would be a good place to do this.&lt;/p&gt; 
&lt;h2&gt;Errors when enqueuing&lt;/h2&gt; 
&lt;p&gt;Solid Queue will raise a &lt;code&gt;SolidQueue::Job::EnqueueError&lt;/code&gt; for any Active Record errors that happen when enqueuing a job. The reason for not raising &lt;code&gt;ActiveJob::EnqueueError&lt;/code&gt; is that this one gets handled by Active Job, causing &lt;code&gt;perform_later&lt;/code&gt; to return &lt;code&gt;false&lt;/code&gt; and set &lt;code&gt;job.enqueue_error&lt;/code&gt;, yielding the job to a block that you need to pass to &lt;code&gt;perform_later&lt;/code&gt;. This works very well for your own jobs, but makes failure very hard to handle for jobs enqueued by Rails or other gems, such as &lt;code&gt;Turbo::Streams::BroadcastJob&lt;/code&gt; or &lt;code&gt;ActiveStorage::AnalyzeJob&lt;/code&gt;, because you don&#39;t control the call to &lt;code&gt;perform_later&lt;/code&gt; in that cases.&lt;/p&gt; 
&lt;p&gt;In the case of recurring tasks, if such error is raised when enqueuing the job corresponding to the task, it&#39;ll be handled and logged but it won&#39;t bubble up.&lt;/p&gt; 
&lt;h2&gt;Concurrency controls&lt;/h2&gt; 
&lt;p&gt;Solid Queue extends Active Job with concurrency controls, that allows you to limit how many jobs of a certain type or with certain arguments can run at the same time. When limited in this way, jobs will be blocked from running, and they&#39;ll stay blocked until another job finishes and unblocks them, or after the set expiry time (concurrency limit&#39;s &lt;em&gt;duration&lt;/em&gt;) elapses. Jobs are never discarded or lost, only blocked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class MyJob &amp;lt; ApplicationJob
  limits_concurrency to: max_concurrent_executions, key: -&amp;gt;(arg1, arg2, **) { ... }, duration: max_interval_to_guarantee_concurrency_limit, group: concurrency_group

  # ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;key&lt;/code&gt; is the only required parameter, and it can be a symbol, a string or a proc that receives the job arguments as parameters and will be used to identify the jobs that need to be limited together. If the proc returns an Active Record record, the key will be built from its class name and &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;to&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; by default.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;duration&lt;/code&gt; is set to &lt;code&gt;SolidQueue.default_concurrency_control_period&lt;/code&gt; by default, which itself defaults to &lt;code&gt;3 minutes&lt;/code&gt;, but that you can configure as well.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;group&lt;/code&gt; is used to control the concurrency of different job classes together. It defaults to the job class name.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When a job includes these controls, we&#39;ll ensure that, at most, the number of jobs (indicated as &lt;code&gt;to&lt;/code&gt;) that yield the same &lt;code&gt;key&lt;/code&gt; will be performed concurrently, and this guarantee will last for &lt;code&gt;duration&lt;/code&gt; for each job enqueued. Note that there&#39;s no guarantee about &lt;em&gt;the order of execution&lt;/em&gt;, only about jobs being performed at the same time (overlapping).&lt;/p&gt; 
&lt;p&gt;The concurrency limits use the concept of semaphores when enqueuing, and work as follows: when a job is enqueued, we check if it specifies concurrency controls. If it does, we check the semaphore for the computed concurrency key. If the semaphore is open, we claim it and we set the job as &lt;em&gt;ready&lt;/em&gt;. Ready means it can be picked up by workers for execution. When the job finishes executing (be it successfully or unsuccessfully, resulting in a failed execution), we signal the semaphore and try to unblock the next job with the same key, if any. Unblocking the next job doesn&#39;t mean running that job right away, but moving it from &lt;em&gt;blocked&lt;/em&gt; to &lt;em&gt;ready&lt;/em&gt;. Since something can happen that prevents the first job from releasing the semaphore and unblocking the next job (for example, someone pulling a plug in the machine where the worker is running), we have the &lt;code&gt;duration&lt;/code&gt; as a failsafe. Jobs that have been blocked for more than duration are candidates to be released, but only as many of them as the concurrency rules allow, as each one would need to go through the semaphore dance check. This means that the &lt;code&gt;duration&lt;/code&gt; is not really about the job that&#39;s enqueued or being run, it&#39;s about the jobs that are blocked waiting.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class DeliverAnnouncementToContactJob &amp;lt; ApplicationJob
  limits_concurrency to: 2, key: -&amp;gt;(contact) { contact.account }, duration: 5.minutes

  def perform(contact)
    # ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;contact&lt;/code&gt; and &lt;code&gt;account&lt;/code&gt; are &lt;code&gt;ActiveRecord&lt;/code&gt; records. In this case, we&#39;ll ensure that at most two jobs of the kind &lt;code&gt;DeliverAnnouncementToContact&lt;/code&gt; for the same account will run concurrently. If, for any reason, one of those jobs takes longer than 5 minutes or doesn&#39;t release its concurrency lock (signals the semaphore) within 5 minutes of acquiring it, a new job with the same key might gain the lock.&lt;/p&gt; 
&lt;p&gt;Let&#39;s see another example using &lt;code&gt;group&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Box::MovePostingsByContactToDesignatedBoxJob &amp;lt; ApplicationJob
  limits_concurrency key: -&amp;gt;(contact) { contact }, duration: 15.minutes, group: &quot;ContactActions&quot;

  def perform(contact)
    # ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Bundle::RebundlePostingsJob &amp;lt; ApplicationJob
  limits_concurrency key: -&amp;gt;(bundle) { bundle.contact }, duration: 15.minutes, group: &quot;ContactActions&quot;

  def perform(bundle)
    # ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, if we have a &lt;code&gt;Box::MovePostingsByContactToDesignatedBoxJob&lt;/code&gt; job enqueued for a contact record with id &lt;code&gt;123&lt;/code&gt; and another &lt;code&gt;Bundle::RebundlePostingsJob&lt;/code&gt; job enqueued simultaneously for a bundle record that references contact &lt;code&gt;123&lt;/code&gt;, only one of them will be allowed to proceed. The other one will stay blocked until the first one finishes (or 15 minutes pass, whatever happens first).&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;duration&lt;/code&gt; setting depends indirectly on the value for &lt;code&gt;concurrency_maintenance_interval&lt;/code&gt; that you set for your dispatcher(s), as that&#39;d be the frequency with which blocked jobs are checked and unblocked. In general, you should set &lt;code&gt;duration&lt;/code&gt; in a way that all your jobs would finish well under that duration and think of the concurrency maintenance task as a failsafe in case something goes wrong.&lt;/p&gt; 
&lt;p&gt;Jobs are unblocked in order of priority but queue order is not taken into account for unblocking jobs. That means that if you have a group of jobs that share a concurrency group but are in different queues, or jobs of the same class that you enqueue in different queues, the queue order you set for a worker is not taken into account when unblocking blocked ones. The reason is that a job that runs unblocks the next one, and the job itself doesn&#39;t know about a particular worker&#39;s queue order (you could even have different workers with different queue orders), it can only know about priority. Once blocked jobs are unblocked and available for polling, they&#39;ll be picked up by a worker following its queue order.&lt;/p&gt; 
&lt;p&gt;Finally, failed jobs that are automatically or manually retried work in the same way as new jobs that get enqueued: they get in the queue for getting an open semaphore, and whenever they get it, they&#39;ll be run. It doesn&#39;t matter if they had already gotten an open semaphore in the past.&lt;/p&gt; 
&lt;h2&gt;Failed jobs and retries&lt;/h2&gt; 
&lt;p&gt;Solid Queue doesn&#39;t include any automatic retry mechanism, it &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_job_basics.html#retrying-or-discarding-failed-jobs&quot;&gt;relies on Active Job for this&lt;/a&gt;. Jobs that fail will be kept in the system, and a &lt;em&gt;failed execution&lt;/em&gt; (a record in the &lt;code&gt;solid_queue_failed_executions&lt;/code&gt; table) will be created for these. The job will stay there until manually discarded or re-enqueued. You can do this in a console as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;failed_execution = SolidQueue::FailedExecution.find(...) # Find the failed execution related to your job
failed_execution.error # inspect the error

failed_execution.retry # This will re-enqueue the job as if it was enqueued for the first time
failed_execution.discard # This will delete the job from the system
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, we recommend taking a look at &lt;a href=&quot;https://github.com/rails/mission_control-jobs&quot;&gt;mission_control-jobs&lt;/a&gt;, a dashboard where, among other things, you can examine and retry/discard failed jobs.&lt;/p&gt; 
&lt;h3&gt;Error reporting on jobs&lt;/h3&gt; 
&lt;p&gt;Some error tracking services that integrate with Rails, such as Sentry or Rollbar, hook into &lt;a href=&quot;https://guides.rubyonrails.org/active_job_basics.html#exceptions&quot;&gt;Active Job&lt;/a&gt; and automatically report not handled errors that happen during job execution. However, if your error tracking system doesn&#39;t, or if you need some custom reporting, you can hook into Active Job yourself. A possible way of doing this would be:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# application_job.rb
class ApplicationJob &amp;lt; ActiveJob::Base
  rescue_from(Exception) do |exception|
    Rails.error.report(exception)
    raise exception
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, you will have to duplicate the above logic on &lt;code&gt;ActionMailer::MailDeliveryJob&lt;/code&gt; too. That is because &lt;code&gt;ActionMailer&lt;/code&gt; doesn&#39;t inherit from &lt;code&gt;ApplicationJob&lt;/code&gt; but instead uses &lt;code&gt;ActionMailer::MailDeliveryJob&lt;/code&gt; which inherits from &lt;code&gt;ActiveJob::Base&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# application_mailer.rb

class ApplicationMailer &amp;lt; ActionMailer::Base
  ActionMailer::MailDeliveryJob.rescue_from(Exception) do |exception|
    Rails.error.report(exception)
    raise exception
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Puma plugin&lt;/h2&gt; 
&lt;p&gt;We provide a Puma plugin if you want to run the Solid Queue&#39;s supervisor together with Puma and have Puma monitor and manage it. You just need to add&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;plugin :solid_queue
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to your &lt;code&gt;puma.rb&lt;/code&gt; configuration.&lt;/p&gt; 
&lt;p&gt;If you&#39;re using Puma in development but you don&#39;t want to use Solid Queue in development, make sure you avoid the plugin being used, for example using an environment variable like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;plugin :solid_queue if ENV[&quot;SOLID_QUEUE_IN_PUMA&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;that you set in production only. This is what Rails 8&#39;s default Puma config looks like. Otherwise, if you&#39;re using Puma in development but not Solid Queue, starting Puma would start also Solid Queue supervisor and it&#39;ll most likely fail because it won&#39;t be properly configured.&lt;/p&gt; 
&lt;h2&gt;Jobs and transactional integrity&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; Having your jobs in the same ACID-compliant database as your application data enables a powerful yet sharp tool: taking advantage of transactional integrity to ensure some action in your app is not committed unless your job is also committed and vice versa, and ensuring that your job won&#39;t be enqueued until the transaction within which you&#39;re enqueuing it is committed. This can be very powerful and useful, but it can also backfire if you base some of your logic on this behaviour, and in the future, you move to another active job backend, or if you simply move Solid Queue to its own database, and suddenly the behaviour changes under you. Because this can be quite tricky and many people shouldn&#39;t need to worry about it, by default Solid Queue is configured in a different database as the main app.&lt;/p&gt; 
&lt;p&gt;Starting from Rails 8, an option which doesn&#39;t rely on this transactional integrity and which Active Job provides is to defer the enqueueing of a job inside an Active Record transaction until that transaction successfully commits. This option can be set via the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveJob/Enqueuing.html#method-c-enqueue_after_transaction_commit&quot;&gt;&lt;code&gt;enqueue_after_transaction_commit&lt;/code&gt;&lt;/a&gt; class method on the job level and is by default disabled. Either it can be enabled for individual jobs or for all jobs through &lt;code&gt;ApplicationJob&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class ApplicationJob &amp;lt; ActiveJob::Base
  self.enqueue_after_transaction_commit = true
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using this option, you can also use Solid Queue in the same database as your app but not rely on transactional integrity.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t set this option but still want to make sure you&#39;re not inadvertently on transactional integrity, you can make sure that:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Your jobs relying on specific data are always enqueued on &lt;a href=&quot;https://guides.rubyonrails.org/active_record_callbacks.html#after-commit-and-after-rollback&quot;&gt;&lt;code&gt;after_commit&lt;/code&gt; callbacks&lt;/a&gt; or otherwise from a place where you&#39;re certain that whatever data the job will use has been committed to the database before the job is enqueued.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Or, you configure a different database for Solid Queue, even if it&#39;s the same as your app, ensuring that a different connection on the thread handling requests or running jobs for your app will be used to enqueue jobs. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class ApplicationRecord &amp;lt; ActiveRecord::Base
  self.abstract_class = true

  connects_to database: { writing: :primary, reading: :replica }
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.solid_queue.connects_to = { database: { writing: :primary, reading: :replica } }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Recurring tasks&lt;/h2&gt; 
&lt;p&gt;Solid Queue supports defining recurring tasks that run at specific times in the future, on a regular basis like cron jobs. These are managed by the scheduler process and are defined in their own configuration file. By default, the file is located in &lt;code&gt;config/recurring.yml&lt;/code&gt;, but you can set a different path using the environment variable &lt;code&gt;SOLID_QUEUE_RECURRING_SCHEDULE&lt;/code&gt; or by using the &lt;code&gt;--recurring_schedule_file&lt;/code&gt; option with &lt;code&gt;bin/jobs&lt;/code&gt;, like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bin/jobs --recurring_schedule_file=config/schedule.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The configuration itself looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;production:
  a_periodic_job:
    class: MyJob
    args: [ 42, { status: &quot;custom_status&quot; } ]
    schedule: every second
  a_cleanup_task:
    command: &quot;DeletedStuff.clear_all&quot;
    schedule: every day at 9am
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tasks are specified as a hash/dictionary, where the key will be the task&#39;s key internally. Each task needs to either have a &lt;code&gt;class&lt;/code&gt;, which will be the job class to enqueue, or a &lt;code&gt;command&lt;/code&gt;, which will be eval&#39;ed in the context of a job (&lt;code&gt;SolidQueue::RecurringJob&lt;/code&gt;) that will be enqueued according to its schedule, in the &lt;code&gt;solid_queue_recurring&lt;/code&gt; queue.&lt;/p&gt; 
&lt;p&gt;Each task needs to have also a schedule, which is parsed using &lt;a href=&quot;https://github.com/floraison/fugit&quot;&gt;Fugit&lt;/a&gt;, so it accepts anything &lt;a href=&quot;https://github.com/floraison/fugit?tab=readme-ov-file#fugitcron&quot;&gt;that Fugit accepts as a cron&lt;/a&gt;. You can optionally supply the following for each task:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;args&lt;/code&gt;: the arguments to be passed to the job, as a single argument, a hash, or an array of arguments that can also include kwargs as the last element in the array.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The job in the example configuration above will be enqueued every second as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;MyJob.perform_later(42, status: &quot;custom_status&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;queue&lt;/code&gt;: a different queue to be used when enqueuing the job. If none, the queue set up for the job class.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;priority&lt;/code&gt;: a numeric priority value to be used when enqueuing the job.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Tasks are enqueued at their corresponding times by the scheduler, and each task schedules the next one. This is pretty much &lt;a href=&quot;https://github.com/bensheldon/good_job/raw/994ecff5323bf0337e10464841128fda100750e6/lib/good_job/cron_manager.rb&quot;&gt;inspired by what GoodJob does&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For recurring tasks defined as a &lt;code&gt;command&lt;/code&gt;, you can also change the job class that runs them as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rails.application.config.after_initialize do # or to_prepare
  SolidQueue::RecurringTask.default_job_class = MyRecurringCommandJob
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s possible to run multiple schedulers with the same &lt;code&gt;recurring_tasks&lt;/code&gt; configuration, for example, if you have multiple servers for redundancy, and you run the &lt;code&gt;scheduler&lt;/code&gt; in more than one of them. To avoid enqueuing duplicate tasks at the same time, an entry in a new &lt;code&gt;solid_queue_recurring_executions&lt;/code&gt; table is created in the same transaction as the job is enqueued. This table has a unique index on &lt;code&gt;task_key&lt;/code&gt; and &lt;code&gt;run_at&lt;/code&gt;, ensuring only one entry per task per time will be created. This only works if you have &lt;code&gt;preserve_finished_jobs&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; (the default), and the guarantee applies as long as you keep the jobs around.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: a single recurring schedule is supported, so you can have multiple schedulers using the same schedule, but not multiple schedulers using different configurations.&lt;/p&gt; 
&lt;p&gt;Finally, it&#39;s possible to configure jobs that aren&#39;t handled by Solid Queue. That is, you can have a job like this in your app:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class MyResqueJob &amp;lt; ApplicationJob
  self.queue_adapter = :resque

  def perform(arg)
    # ..
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can still configure this in Solid Queue:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;my_periodic_resque_job:
  class: MyResqueJob
  args: 22
  schedule: &quot;*/5 * * * *&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and the job will be enqueued via &lt;code&gt;perform_later&lt;/code&gt; so it&#39;ll run in Resque. However, in this case we won&#39;t track any &lt;code&gt;solid_queue_recurring_execution&lt;/code&gt; record for it and there won&#39;t be any guarantees that the job is enqueued only once each time.&lt;/p&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;Solid Queue has been inspired by &lt;a href=&quot;https://github.com/resque/resque&quot;&gt;resque&lt;/a&gt; and &lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt;. We recommend checking out these projects as they&#39;re great examples from which we&#39;ve learnt a lot.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rapid7/metasploit-framework</title>
      <link>https://github.com/rapid7/metasploit-framework</link>
      <description>&lt;p&gt;Metasploit Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Metasploit Framework&lt;/h1&gt; 
&lt;p&gt;The Metasploit Framework is an open-source tool released under a BSD-style license. For detailed licensing information, refer to the &lt;code&gt;COPYING&lt;/code&gt; file.&lt;/p&gt; 
&lt;h2&gt;Latest Version&lt;/h2&gt; 
&lt;p&gt;Access the latest version of Metasploit from the &lt;a href=&quot;https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html&quot;&gt;Nightly Installers&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Comprehensive documentation, including usage guides, is available at &lt;a href=&quot;https://docs.metasploit.com/&quot;&gt;Metasploit Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development Environment&lt;/h2&gt; 
&lt;p&gt;To set up a development environment, visit the &lt;a href=&quot;https://docs.metasploit.com/docs/development/get-started/setting-up-a-metasploit-development-environment.html&quot;&gt;Development Setup Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Bug and Feature Requests&lt;/h2&gt; 
&lt;p&gt;Submit bugs and feature requests via the &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/issues&quot;&gt;GitHub Issues&lt;/a&gt; tracker. New submissions can be made through the &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/issues/new/choose&quot;&gt;MSF-BUGv1 form&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;For information on writing modules, refer to the &lt;a href=&quot;https://docs.metasploit.com/api/&quot;&gt;API Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support and Communication&lt;/h2&gt; 
&lt;p&gt;For questions and suggestions, join the Freenode IRC channel or contact the metasploit-hackers mailing list.&lt;/p&gt; 
&lt;h2&gt;Installing Metasploit&lt;/h2&gt; 
&lt;h3&gt;Recommended Installation&lt;/h3&gt; 
&lt;p&gt;We recommend installation with the &lt;a href=&quot;https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html#installing-metasploit-on-linux--macos&quot;&gt;official Metasploit installers&lt;/a&gt; on Linux or macOS. Metasploit is also pre-installed with Kali.&lt;/p&gt; 
&lt;p&gt;For a manual setup, consult the &lt;a href=&quot;https://docs.metasploit.com/docs/development/get-started/setting-up-a-metasploit-development-environment.html&quot;&gt;Dev Environment Setup&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;Using Metasploit&lt;/h2&gt; 
&lt;p&gt;To get started with Metasploit:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Start &lt;code&gt;msfconsole&lt;/code&gt;:&lt;/strong&gt; This is the primary interface for interacting with Metasploit.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Explore Resources:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Visit the &lt;a href=&quot;https://docs.metasploit.com/docs/using-metasploit/getting-started/index.html&quot;&gt;Using Metasploit&lt;/a&gt; section of the documentation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to Metasploit:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Setup Development Environment:&lt;/strong&gt; Follow the instructions in the &lt;a href=&quot;https://docs.metasploit.com/docs/development/get-started/setting-up-a-metasploit-development-environment.html&quot;&gt;Development Setup Guide&lt;/a&gt; on GitHub.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Clone the Repository:&lt;/strong&gt; Obtain the source code from the official repository.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Submit a Pull Request:&lt;/strong&gt; After making changes, submit a pull request for review. Additional details can be found in the &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/raw/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>felixonmars/dnsmasq-china-list</title>
      <link>https://github.com/felixonmars/dnsmasq-china-list</link>
      <description>&lt;p&gt;Chinese-specific configuration to improve your favorite DNS server. Best partner for chnroutes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dnsmasq-china-list&lt;/h1&gt; 
&lt;p&gt;Chinese-specific configuration to improve your favorite DNS server. Best partner for chnroutes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Improve resolve speed for Chinese domains.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Get the best CDN node near you whenever possible, but don&#39;t compromise foreign CDN results so you also get best CDN node for your VPN at the same time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Block ISP ads on NXDOMAIN result (like 114so).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Details&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;accelerated-domains.china.conf&lt;/code&gt;: General domains to be accelerated.&lt;/p&gt; &lt;p&gt;These domains have a better resolving speed and/or result when using a Chinese DNS server.&lt;/p&gt; &lt;p&gt;To determine if a domain is eligible, one of the criteria below must be met:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The domain&#39;s NS server is located in China mainland.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The domain will resolve to an IP located in China mainland when using a Chinese DNS server, but &lt;em&gt;not&lt;/em&gt; always do when using a foreign DNS server (For example, CDN accelerated sites that have node in China). This however does &lt;em&gt;not&lt;/em&gt; include those having node &lt;em&gt;near&lt;/em&gt; China mainland, like in Japan, Hong Kong, Taiwan, etc.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please don&#39;t add subdomains if the top domain is already in the list. This includes all .cn domains which are already matched by the &lt;code&gt;/cn/&lt;/code&gt; rule.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;google.china.conf&lt;/code&gt;: Google domains to be accelerated.&lt;/p&gt; &lt;p&gt;These domains are resolved to Google China servers when using a Chinese DNS. In most conditions this will yield better page load time for sites using Google&#39;s web services, e.g. Google Web Fonts and AdSense.&lt;/p&gt; &lt;p&gt;Bear in mind that they are &lt;em&gt;not&lt;/em&gt; considered stable. &lt;strong&gt;Use at your own risk&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;apple.china.conf&lt;/code&gt;: Apple domains to be accelerated.&lt;/p&gt; &lt;p&gt;Some ISPs (often smaller ones) have problem accessing Apple&#39;s assets using their China mainland CDN servers. Please consider remove this file if that happens to you. See #156 for some more info.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;bogus-nxdomain.china.conf&lt;/code&gt;: Known addresses that are hijacking NXDOMAIN results returned by DNS servers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;h2&gt;Automatic Installation (recommended)&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fetch the installer from github (or a mirror): &lt;code&gt;wget https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/install.sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;(Optional) Edit it to use your favorite DNS server and/or another mirror to download the list.&lt;/li&gt; 
 &lt;li&gt;Run it as root: &lt;code&gt;sudo ./install.sh&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can save the installer and run it again to update the list regularly.&lt;/p&gt; 
&lt;h2&gt;Manual Installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Place accelerated-domains.china.conf, bogus-nxdomain.china.conf (and optionally google.china.conf, apple.china.conf) under /etc/dnsmasq.d/ (Create the folder if it does not exist).&lt;/li&gt; 
 &lt;li&gt;Uncomment &quot;conf-dir=/etc/dnsmasq.d&quot; in /etc/dnsmasq.conf&lt;/li&gt; 
 &lt;li&gt;(Optional) Place dnsmasq-update-china-list into /usr/bin/&lt;/li&gt; 
 &lt;li&gt;(Optional) Make custom DNS server configuration and/or other services&#39; configuration.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# change the default DNS server to 202.96.128.86
make SERVER=202.96.128.86 dnsmasq
# generate unbound&#39;s configuration
make unbound
# generate bind&#39;s configuration
make bind
# full example of generating dnscrypt-proxy forwarding rules for Windows
make SERVER=101.6.6.6 NEWLINE=DOS dnscrypt-proxy
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;pre&gt;&lt;code&gt;Copyright ¬© 2015 Felix Yan &amp;lt;felixonmars@archlinux.org&amp;gt;
This work is free. You can redistribute it and/or modify it under the
terms of the Do What The Fuck You Want To Public License, Version 2,
as published by Sam Hocevar. See the LICENSE file for more details.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ruby/gem_rbs_collection</title>
      <link>https://github.com/ruby/gem_rbs_collection</link>
      <description>&lt;p&gt;A collection of RBS for gems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gem_rbs_collection: A collection of RBS for gems&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ruby/rbs&quot;&gt;RBS&lt;/a&gt; is a standard type signature syntax for Ruby programs. This is a community-managed collection of RBS files for gems that ship without RBS.&lt;/p&gt; 
&lt;h2&gt;Loading RBS from the repository&lt;/h2&gt; 
&lt;p&gt;You can use &lt;code&gt;rbs collection&lt;/code&gt; command to load RBS files from this repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# Create rbs_collection.yaml
$ rbs collection init

# Resolve dependencies and install RBS files from this repository
$ rbs collection install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;code&gt;rbs_collection.yaml&lt;/code&gt; exists, the installed RBSs are loaded automatically. You do not need any configuration for &lt;code&gt;rbs&lt;/code&gt; and &lt;code&gt;steep&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/ruby/rbs/raw/master/docs/collection.md&quot;&gt;collection.md&lt;/a&gt; in ruby/rbs repository for more details.&lt;/p&gt; 
&lt;h2&gt;How to contribute&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/ruby/gem_rbs_collection/main/docs/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DataDog/datadog-api-client-ruby</title>
      <link>https://github.com/DataDog/datadog-api-client-ruby</link>
      <description>&lt;p&gt;Ruby client for the Datadog API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;datadog-api-client-ruby&lt;/h1&gt; 
&lt;p&gt;This repository contains a Ruby API client for the &lt;a href=&quot;https://docs.datadoghq.com/api/&quot;&gt;Datadog API&lt;/a&gt;. The code is generated using &lt;a href=&quot;https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator&quot;&gt;&lt;code&gt;generator&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Installing and using the API client library requires:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Ruby 2.6+&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The following steps will help you quickly start interacting with Datadog APIs using Ruby client.&lt;/p&gt; 
&lt;h3&gt;Install published Ruby gem&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;datadog_api_client&lt;/code&gt; gem to you Gemfile:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;source &#39;https://rubygems.org&#39;
gem &#39;datadog_api_client&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install the gem with &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(optional) You can configure site and &lt;a href=&quot;https://raw.githubusercontent.com/DataDog/datadog-api-client-ruby/master/#authentication&quot;&gt;authentication&lt;/a&gt; using environment variables or code block:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;DatadogAPIClient.configure do |config|
  config.server_variables[:site] = &#39;datadoghq.eu&#39;
end
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Build a gem&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Build the Ruby code into a gem:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;gem build datadog_api_client.gemspec
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install the gem locally:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;gem install ./datadog_api_client-*.gem
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Install from Git&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Add the following in the Gemfile:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;gem &#39;datadog_api_client&#39;, :git =&amp;gt; &#39;https://github.com/DataDog/datadog-api-client-ruby.git&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install the gem with &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Include the Ruby code directly&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create &lt;code&gt;example.rb&lt;/code&gt; script (find inspiration on &lt;a href=&quot;https://docs.datadoghq.com/api/&quot;&gt;https://docs.datadoghq.com/api/&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Include the Ruby code directly using &lt;code&gt;-I&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ruby -Ilib example.rb
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Please follow the &lt;a href=&quot;https://raw.githubusercontent.com/DataDog/datadog-api-client-ruby/master/#installation&quot;&gt;installation&lt;/a&gt; instruction and execute the following Ruby code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &#39;datadog_api_client&#39;

api_instance = DatadogAPIClient::V1::IPRangesAPI.new

begin
  result = api_instance.get_ip_ranges
  p result
rescue DatadogAPIClient::APIError =&amp;gt; e
  puts &quot;Error when calling IPRangesAPI-&amp;gt;get_ip_ranges: #{e}&quot;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;p&gt;Authenticate with the API by providing your API and Application keys in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;DatadogAPIClient.configure do |config|
  config.api_key = ENV[&#39;NON_STANDARD_NAME_FOR_DD_API_KEY&#39;]
  config.application_key = ENV[&#39;NON_STANDARD_NAME_FOR_DD_APP_KEY&#39;]
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Unstable (Beta) Endpoints&lt;/h3&gt; 
&lt;p&gt;This client includes access to Datadog API endpoints while they are in an unstable state and may undergo breaking changes. An extra configuration step is required to enable these endpoints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;DatadogAPIClient.configure do |config|
  config.unstable_operations[:&#39;&amp;lt;api_version&amp;gt;.&amp;lt;unstable_operation_id&amp;gt;&#39;] = true
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;&amp;lt;unstable_operation_id&amp;gt;&lt;/code&gt; is the name of the method used to interact with that endpoint. For example: &lt;code&gt;list_log_indexes&lt;/code&gt;, or &lt;code&gt;get_logs_index&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Changing Server&lt;/h3&gt; 
&lt;p&gt;When talking to a different server, like the &lt;code&gt;eu&lt;/code&gt; instance, change the &lt;code&gt;server_variables&lt;/code&gt; on your configuration object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config = DatadogAPIClient::Configuration.new
config.server_variables[:site] = &quot;datadoghq.eu&quot;
client = DatadogAPIClient::APIClient.new(config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Disable compressed payloads&lt;/h3&gt; 
&lt;p&gt;If you want to disable GZIP compressed responses, set the &lt;code&gt;compress&lt;/code&gt; flag on your configuration object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config = DatadogAPIClient::Configuration.new
config.compress = false
client = DatadogAPIClient::APIClient.new(config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Enable requests logging&lt;/h3&gt; 
&lt;p&gt;If you want to enable requests logging, set the &lt;code&gt;debugging&lt;/code&gt; flag on your configuration object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config = DatadogAPIClient::Configuration.new
config.debugging = true
client = DatadogAPIClient::APIClient.new(config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configure proxy&lt;/h3&gt; 
&lt;p&gt;You can configure the client to use proxy by setting &lt;code&gt;http_proxyaddr&lt;/code&gt; and &lt;code&gt;http_proxyport&lt;/code&gt; keys on configuration object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config = DatadogAPIClient::Configuration.new
config.http_proxyaddr = &#39;127.0.0.1&#39;
config.http_proxyport = &#39;3128&#39;
client = DatadogAPIClient::APIClient.new(config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pagination&lt;/h3&gt; 
&lt;p&gt;Several listing operations have a pagination method to help consume all the items available. For example, to retrieve all your incidents:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;datadog_api_client&quot;
DatadogAPIClient.configure do |config|
  config.unstable_operations[:&#39;v2.list_incidents&#39;] = true
end
api_instance = DatadogAPIClient::V2::IncidentsAPI.new
api_instance.list_incidents_with_pagination() do |incident|
  p incident.id
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Retry&lt;/h3&gt; 
&lt;p&gt;To enable the client to retry when rate limited (status 429) or status 500 and above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config = DatadogAPIClient::Configuration.new
config.enable_retry = true
client = DatadogAPIClient::APIClient.new(config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interval between 2 retry attempts will be the value of the &lt;code&gt;x-ratelimit-reset&lt;/code&gt; response header when available. If not, it will be :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;(config.backoffMultiplier ** current_retry_count) * config.backoffBase
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The maximum number of retry attempts is &lt;code&gt;3&lt;/code&gt; by default and can be modified with&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.maxRetries
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;If you are interested in general documentation for all public Datadog API endpoints, checkout the &lt;a href=&quot;https://docs.datadoghq.com/api/&quot;&gt;general documentation site&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Developer documentation for supported endpoints and models is available in &lt;a href=&quot;https://datadoghq.dev/datadog-api-client-ruby/&quot;&gt;Github pages&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For contributing, checkout the &lt;a href=&quot;https://github.com/DataDog/datadog-api-client-ruby/raw/master/DEVELOPMENT.md&quot;&gt;development guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;mailto:support@datadoghq.com&quot;&gt;support@datadoghq.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github-linguist/linguist</title>
      <link>https://github.com/github-linguist/linguist</link>
      <description>&lt;p&gt;Language Savant. If your repository&#39;s language is being reported incorrectly, send us a pull request!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linguist&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/github/linguist/actions&quot;&gt;&lt;img src=&quot;https://github.com/github/linguist/workflows/Run%20Tests/badge.svg?sanitize=true&quot; alt=&quot;Actions Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://codespaces.new/github-linguist/linguist&quot;&gt;&lt;img src=&quot;https://github.com/codespaces/badge.svg?sanitize=true&quot; alt=&quot;Open in GitHub Codespaces&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This library is used on GitHub.com to detect blob languages, ignore binary or vendored files, suppress generated files in diffs, and generate language breakdown graphs.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github-linguist/linguist/main/docs/how-linguist-works.md&quot;&gt;How Linguist works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github-linguist/linguist/main/docs/overrides.md&quot;&gt;Change Linguist&#39;s behaviour with overrides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github-linguist/linguist/main/docs/troubleshooting.md&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github-linguist/linguist/main/CONTRIBUTING.md&quot;&gt;Contributing guidelines&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install the gem:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gem install github-linguist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;Linguist is a Ruby library so you will need a recent version of Ruby installed. There are known problems with the macOS/Xcode supplied version of Ruby that causes problems installing some of the dependencies. Accordingly, we highly recommend you install a version of Ruby using Homebrew, &lt;code&gt;rbenv&lt;/code&gt;, &lt;code&gt;rvm&lt;/code&gt;, &lt;code&gt;ruby-build&lt;/code&gt;, &lt;code&gt;asdf&lt;/code&gt; or other packaging system, before attempting to install Linguist and the dependencies.&lt;/p&gt; 
&lt;p&gt;Linguist uses &lt;a href=&quot;https://github.com/brianmario/charlock_holmes&quot;&gt;&lt;code&gt;charlock_holmes&lt;/code&gt;&lt;/a&gt; for character encoding and &lt;a href=&quot;https://github.com/libgit2/rugged&quot;&gt;&lt;code&gt;rugged&lt;/code&gt;&lt;/a&gt; for libgit2 bindings for Ruby. These components have their own dependencies.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;charlock_holmes 
  &lt;ul&gt; 
   &lt;li&gt;cmake&lt;/li&gt; 
   &lt;li&gt;pkg-config&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://zlib.net/&quot;&gt;zlib&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;rugged 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://curl.haxx.se/libcurl/&quot;&gt;libcurl&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.openssl.org&quot;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You may need to install missing dependencies before you can install Linguist. For example, on macOS with &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install cmake pkg-config icu4c
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Ubuntu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt-get install build-essential cmake pkg-config libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev ruby-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Application usage&lt;/h3&gt; 
&lt;p&gt;Linguist can be used in your application as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &#39;rugged&#39;
require &#39;linguist&#39;

repo = Rugged::Repository.new(&#39;.&#39;)
project = Linguist::Repository.new(repo, repo.head.target_id)
project.language       #=&amp;gt; &quot;Ruby&quot;
project.languages      #=&amp;gt; { &quot;Ruby&quot; =&amp;gt; 119387 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command line usage&lt;/h3&gt; 
&lt;h4&gt;Git Repository&lt;/h4&gt; 
&lt;p&gt;A repository&#39;s languages stats can also be assessed from the command line using the &lt;code&gt;github-linguist&lt;/code&gt; executable. Without any options, &lt;code&gt;github-linguist&lt;/code&gt; will output the language breakdown by percentage and file size.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /path-to-repository
github-linguist
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on the root directory in this repository itself:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ github-linguist
66.84%  264519     Ruby
24.68%  97685      C
6.57%   25999      Go
1.29%   5098       Lex
0.32%   1257       Shell
0.31%   1212       Dockerfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Additional options&lt;/h4&gt; 
&lt;h5&gt;&lt;code&gt;--rev REV&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;--rev REV&lt;/code&gt; flag will change the git revision being analyzed to any &lt;a href=&quot;https://git-scm.com/docs/gitrevisions#_specifying_revisions&quot;&gt;gitrevisions(1)&lt;/a&gt; compatible revision you specify.&lt;/p&gt; 
&lt;p&gt;This is useful to analyze the makeup of a repo as of a certain tag, or in a certain branch.&lt;/p&gt; 
&lt;p&gt;For example, here is the popular &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll open source project&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ github-linguist jekyll

70.64%  709959     Ruby
23.04%  231555     Gherkin
3.80%   38178      JavaScript
1.19%   11943      HTML
0.79%   7900       Shell
0.23%   2279       Dockerfile
0.13%   1344       Earthly
0.10%   1019       CSS
0.06%   606        SCSS
0.02%   234        CoffeeScript
0.01%   90         Hack
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And here is Jekyll&#39;s published website, from the gh-pages branch inside their repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ github-linguist jekyll --rev origin/gh-pages
100.00% 2568354    HTML
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;code&gt;--breakdown&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;--breakdown&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; flag will additionally show the breakdown of files by language.&lt;/p&gt; 
&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on the root directory in this repository itself:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ github-linguist --breakdown
66.84%  264519     Ruby
24.68%  97685      C
6.57%   25999      Go
1.29%   5098       Lex
0.32%   1257       Shell
0.31%   1212       Dockerfile

Ruby:
Gemfile
Rakefile
bin/git-linguist
bin/github-linguist
ext/linguist/extconf.rb
github-linguist.gemspec
lib/linguist.rb
‚Ä¶
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;--json&lt;/code&gt; or &lt;code&gt;-j&lt;/code&gt; flag output the data into JSON format.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ github-linguist --json
{&quot;Dockerfile&quot;:{&quot;size&quot;:1212,&quot;percentage&quot;:&quot;0.31&quot;},&quot;Ruby&quot;:{&quot;size&quot;:264519,&quot;percentage&quot;:&quot;66.84&quot;},&quot;C&quot;:{&quot;size&quot;:97685,&quot;percentage&quot;:&quot;24.68&quot;},&quot;Lex&quot;:{&quot;size&quot;:5098,&quot;percentage&quot;:&quot;1.29&quot;},&quot;Shell&quot;:{&quot;size&quot;:1257,&quot;percentage&quot;:&quot;0.32&quot;},&quot;Go&quot;:{&quot;size&quot;:25999,&quot;percentage&quot;:&quot;6.57&quot;}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This option can be used in conjunction with &lt;code&gt;--breakdown&lt;/code&gt; to get a full list of files along with the size and percentage data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ github-linguist --breakdown --json
{&quot;Dockerfile&quot;:{&quot;size&quot;:1212,&quot;percentage&quot;:&quot;0.31&quot;,&quot;files&quot;:[&quot;Dockerfile&quot;,&quot;tools/grammars/Dockerfile&quot;]},&quot;Ruby&quot;:{&quot;size&quot;:264519,&quot;percentage&quot;:&quot;66.84&quot;,&quot;files&quot;:[&quot;Gemfile&quot;,&quot;Rakefile&quot;,&quot;bin/git-linguist&quot;,&quot;bin/github-linguist&quot;,&quot;ext/linguist/extconf.rb&quot;,&quot;github-linguist.gemspec&quot;,&quot;lib/linguist.rb&quot;,...]}}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Single file&lt;/h4&gt; 
&lt;p&gt;Alternatively you can find stats for a single file using the &lt;code&gt;github-linguist&lt;/code&gt; executable.&lt;/p&gt; 
&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on files in this repository itself:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ github-linguist grammars.yml
grammars.yml: 884 lines (884 sloc)
  type:      Text
  mime type: text/x-yaml
  language:  YAML
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Docker&lt;/h4&gt; 
&lt;p&gt;If you have Docker installed you can build an image and run Linguist within a container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ docker build -t linguist .
$ docker run --rm -v $(pwd):$(pwd):Z -w $(pwd) -t linguist
66.84%  264519     Ruby
24.68%  97685      C
6.57%   25999      Go
1.29%   5098       Lex
0.32%   1257       Shell
0.31%   1212       Dockerfile
$ docker run --rm -v $(pwd):$(pwd) -w $(pwd) -t linguist github-linguist --breakdown
66.84%  264519     Ruby
24.68%  97685      C
6.57%   25999      Go
1.29%   5098       Lex
0.32%   1257       Shell
0.31%   1212       Dockerfile

Ruby:
Gemfile
Rakefile
bin/git-linguist
bin/github-linguist
ext/linguist/extconf.rb
github-linguist.gemspec
lib/linguist.rb
‚Ä¶
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please check out our &lt;a href=&quot;https://raw.githubusercontent.com/github-linguist/linguist/main/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The language grammars included in this gem are covered by their repositories&#39; respective licenses. &lt;a href=&quot;https://raw.githubusercontent.com/github-linguist/linguist/main/vendor/README.md&quot;&gt;&lt;code&gt;vendor/README.md&lt;/code&gt;&lt;/a&gt; lists the repository for each grammar.&lt;/p&gt; 
&lt;p&gt;All other files are covered by the MIT license, see &lt;a href=&quot;https://raw.githubusercontent.com/github-linguist/linguist/main/LICENSE&quot;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alexrudall/ruby-openai</title>
      <link>https://github.com/alexrudall/ruby-openai</link>
      <description>&lt;p&gt;OpenAI API + Ruby! ü§ñ‚ù§Ô∏è Now with Responses API + DeepSeek!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby OpenAI&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/ruby-openai&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/ruby-openai.svg?sanitize=true&quot; alt=&quot;Gem Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/alexrudall/ruby-openai/raw/main/LICENSE.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;GitHub license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/alexrudall/ruby-openai&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/alexrudall/ruby-openai.svg?style=shield&quot; alt=&quot;CircleCI Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Use the &lt;a href=&quot;https://openai.com/blog/openai-api/&quot;&gt;OpenAI API&lt;/a&gt; with Ruby! ü§ñ‚ù§Ô∏è&lt;/p&gt; 
&lt;p&gt;Stream chats with the Responses API, transcribe and translate audio with Whisper, create images with DALL¬∑E, and much more...&lt;/p&gt; 
&lt;p&gt;üí• Click &lt;a href=&quot;https://mailchi.mp/8c7b574726a9/ruby-openai&quot;&gt;subscribe now&lt;/a&gt; to hear first about new releases in the Rails AI newsletter!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://mailchi.mp/8c7b574726a9/ruby-openai&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/737cbb99-6029-42b8-9f22-a106725a4b1f&quot; alt=&quot;RailsAI Newsletter&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/k4Uc224xVD&quot;&gt;üéÆ Ruby AI Builders Discord&lt;/a&gt; | &lt;a href=&quot;https://x.com/alexrudall&quot;&gt;üê¶ X&lt;/a&gt; | &lt;a href=&quot;https://github.com/alexrudall/anthropic&quot;&gt;üß† Anthropic Gem&lt;/a&gt; | &lt;a href=&quot;https://github.com/alexrudall/midjourney&quot;&gt;üöÇ Midjourney Gem&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#ruby-openai&quot;&gt;Ruby OpenAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#installation&quot;&gt;Installation&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#bundler&quot;&gt;Bundler&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#gem-install&quot;&gt;Gem install&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#how-to-use&quot;&gt;How to use&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#with-config&quot;&gt;With Config&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#custom-timeout-or-base-uri&quot;&gt;Custom timeout or base URI&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#extra-headers-per-client&quot;&gt;Extra Headers per Client&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#logging&quot;&gt;Logging&lt;/a&gt; 
        &lt;ul&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#errors&quot;&gt;Errors&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#faraday-middleware&quot;&gt;Faraday middleware&lt;/a&gt;&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#azure&quot;&gt;Azure&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#deepseek&quot;&gt;Deepseek&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#ollama&quot;&gt;Ollama&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#groq&quot;&gt;Groq&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#counting-tokens&quot;&gt;Counting Tokens&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#models&quot;&gt;Models&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#chat&quot;&gt;Chat&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#streaming-chat&quot;&gt;Streaming Chat&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#vision&quot;&gt;Vision&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#json-mode&quot;&gt;JSON Mode&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#responses-api&quot;&gt;Responses API&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#functions&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#completions&quot;&gt;Completions&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#embeddings&quot;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#batches&quot;&gt;Batches&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#files&quot;&gt;Files&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#for-fine-tuning-purposes&quot;&gt;For fine-tuning purposes&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#for-assistant-purposes&quot;&gt;For assistant purposes&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#finetunes&quot;&gt;Finetunes&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#vector-stores&quot;&gt;Vector Stores&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#vector-store-files&quot;&gt;Vector Store Files&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#vector-store-file-batches&quot;&gt;Vector Store File Batches&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#assistants&quot;&gt;Assistants&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#threads-and-messages&quot;&gt;Threads and Messages&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#runs&quot;&gt;Runs&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#create-and-run&quot;&gt;Create and Run&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#vision-in-a-thread&quot;&gt;Vision in a thread&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#runs-involving-function-tools&quot;&gt;Runs involving function tools&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#exploring-chunks-used-in-file-search&quot;&gt;Exploring chunks used in File Search&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#image-generation&quot;&gt;Image Generation&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#dalle-2&quot;&gt;DALL¬∑E 2&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#dalle-3&quot;&gt;DALL¬∑E 3&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#image-edit&quot;&gt;Image Edit&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#image-variations&quot;&gt;Image Variations&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#moderations&quot;&gt;Moderations&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#whisper&quot;&gt;Whisper&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#translate&quot;&gt;Translate&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#transcribe&quot;&gt;Transcribe&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#speech&quot;&gt;Speech&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#errors-1&quot;&gt;Errors&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#development&quot;&gt;Development&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#release&quot;&gt;Release&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alexrudall/ruby-openai/main/#code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Bundler&lt;/h3&gt; 
&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;gem &quot;ruby-openai&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Gem install&lt;/h3&gt; 
&lt;p&gt;Or install with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gem install ruby-openai
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and require with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;openai&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get your API key from &lt;a href=&quot;https://platform.openai.com/account/api-keys&quot;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;If you belong to multiple organizations, you can get your Organization ID from &lt;a href=&quot;https://platform.openai.com/account/org-settings&quot;&gt;https://platform.openai.com/account/org-settings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;p&gt;For a quick test you can pass your token directly to a new client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(
  access_token: &quot;access_token_goes_here&quot;,
  log_errors: true # Highly recommended in development, so you can see what errors OpenAI is returning. Not recommended in production because it could leak private data to your logs.
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;With Config&lt;/h3&gt; 
&lt;p&gt;For a more robust setup, you can configure the gem with your API keys, for example in an &lt;code&gt;openai.rb&lt;/code&gt; initializer file. Never hardcode secrets into your codebase - instead use something like &lt;a href=&quot;https://github.com/motdotla/dotenv&quot;&gt;dotenv&lt;/a&gt; to pass the keys safely into your environments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;OpenAI.configure do |config|
  config.access_token = ENV.fetch(&quot;OPENAI_ACCESS_TOKEN&quot;)
  config.admin_token = ENV.fetch(&quot;OPENAI_ADMIN_TOKEN&quot;) # Optional, used for admin endpoints, created here: https://platform.openai.com/settings/organization/admin-keys
  config.organization_id = ENV.fetch(&quot;OPENAI_ORGANIZATION_ID&quot;) # Optional
  config.log_errors = true # Highly recommended in development, so you can see what errors OpenAI is returning. Not recommended in production because it could leak private data to your logs.
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can create a client like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can still override the config defaults when making new clients; any options not included will fall back to any global config set with OpenAI.configure. e.g. in this example the organization_id, request_timeout, etc. will fallback to any set globally using OpenAI.configure, with only the access_token and admin_token overridden:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(access_token: &quot;access_token_goes_here&quot;, admin_token: &quot;admin_token_goes_here&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Custom timeout or base URI&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The default timeout for any request using this library is 120 seconds. You can change that by passing a number of seconds to the &lt;code&gt;request_timeout&lt;/code&gt; when initializing the client.&lt;/li&gt; 
 &lt;li&gt;You can also change the base URI used for all requests, eg. to use observability tools like &lt;a href=&quot;https://docs.helicone.ai/quickstart/integrate-in-one-line-of-code&quot;&gt;Helicone&lt;/a&gt; or &lt;a href=&quot;https://docs.usevelvet.com/docs/getting-started&quot;&gt;Velvet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;You can also add arbitrary other headers e.g. for &lt;a href=&quot;https://github.com/6/openai-caching-proxy-worker&quot;&gt;openai-caching-proxy-worker&lt;/a&gt;, eg.:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(
  access_token: &quot;access_token_goes_here&quot;,
  uri_base: &quot;https://oai.hconeai.com/&quot;,
  request_timeout: 240,
  extra_headers: {
    &quot;X-Proxy-TTL&quot; =&amp;gt; &quot;43200&quot;, # For https://github.com/6/openai-caching-proxy-worker#specifying-a-cache-ttl
    &quot;X-Proxy-Refresh&quot;: &quot;true&quot;, # For https://github.com/6/openai-caching-proxy-worker#refreshing-the-cache
    &quot;Helicone-Auth&quot;: &quot;Bearer HELICONE_API_KEY&quot;, # For https://docs.helicone.ai/getting-started/integration-method/openai-proxy
    &quot;helicone-stream-force-format&quot; =&amp;gt; &quot;true&quot;, # Use this with Helicone otherwise streaming drops chunks # https://github.com/alexrudall/ruby-openai/issues/251
  }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or when configuring the gem:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;OpenAI.configure do |config|
  config.access_token = ENV.fetch(&quot;OPENAI_ACCESS_TOKEN&quot;)
  config.admin_token = ENV.fetch(&quot;OPENAI_ADMIN_TOKEN&quot;) # Optional, used for admin endpoints, created here: https://platform.openai.com/settings/organization/admin-keys
  config.organization_id = ENV.fetch(&quot;OPENAI_ORGANIZATION_ID&quot;) # Optional
  config.log_errors = true # Optional
  config.uri_base = &quot;https://oai.hconeai.com/&quot; # Optional
  config.request_timeout = 240 # Optional
  config.extra_headers = {
    &quot;X-Proxy-TTL&quot; =&amp;gt; &quot;43200&quot;, # For https://github.com/6/openai-caching-proxy-worker#specifying-a-cache-ttl
    &quot;X-Proxy-Refresh&quot;: &quot;true&quot;, # For https://github.com/6/openai-caching-proxy-worker#refreshing-the-cache
    &quot;Helicone-Auth&quot;: &quot;Bearer HELICONE_API_KEY&quot; # For https://docs.helicone.ai/getting-started/integration-method/openai-proxy
  } # Optional
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Extra Headers per Client&lt;/h4&gt; 
&lt;p&gt;You can dynamically pass headers per client object, which will be merged with any headers set globally with OpenAI.configure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(access_token: &quot;access_token_goes_here&quot;)
client.add_headers(&quot;X-Proxy-TTL&quot; =&amp;gt; &quot;43200&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Logging&lt;/h4&gt; 
&lt;h5&gt;Errors&lt;/h5&gt; 
&lt;p&gt;By default, &lt;code&gt;ruby-openai&lt;/code&gt; does not log any &lt;code&gt;Faraday::Error&lt;/code&gt;s encountered while executing a network request to avoid leaking data (e.g. 400s, 500s, SSL errors and more - see &lt;a href=&quot;https://www.rubydoc.info/github/lostisland/faraday/Faraday/Error&quot;&gt;here&lt;/a&gt; for a complete list of subclasses of &lt;code&gt;Faraday::Error&lt;/code&gt; and what can cause them).&lt;/p&gt; 
&lt;p&gt;If you would like to enable this functionality, you can set &lt;code&gt;log_errors&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when configuring the client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(log_errors: true)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Faraday middleware&lt;/h5&gt; 
&lt;p&gt;You can pass &lt;a href=&quot;https://lostisland.github.io/faraday/#/middleware/index&quot;&gt;Faraday middleware&lt;/a&gt; to the client in a block, eg. to enable verbose logging with Ruby&#39;s &lt;a href=&quot;https://ruby-doc.org/3.2.2/stdlibs/logger/Logger.html&quot;&gt;Logger&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new do |f|
  f.response :logger, Logger.new($stdout), bodies: true
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Azure&lt;/h4&gt; 
&lt;p&gt;To use the &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/cognitive-services/openai/&quot;&gt;Azure OpenAI Service&lt;/a&gt; API, you can configure the gem like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;OpenAI.configure do |config|
  config.access_token = ENV.fetch(&quot;AZURE_OPENAI_API_KEY&quot;)
  config.uri_base = ENV.fetch(&quot;AZURE_OPENAI_URI&quot;)
  config.api_type = :azure
  config.api_version = &quot;2023-03-15-preview&quot;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;AZURE_OPENAI_URI&lt;/code&gt; is e.g. &lt;code&gt;https://custom-domain.openai.azure.com/openai/deployments/gpt-35-turbo&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Deepseek&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://api-docs.deepseek.com/&quot;&gt;Deepseek&lt;/a&gt; is compatible with the OpenAI chat API. Get an access token from &lt;a href=&quot;https://platform.deepseek.com/api_keys&quot;&gt;here&lt;/a&gt;, then:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(
  access_token: &quot;deepseek_access_token_goes_here&quot;,
  uri_base: &quot;https://api.deepseek.com/&quot;
)

client.chat(
  parameters: {
    model: &quot;deepseek-chat&quot;, # Required.
    messages: [{ role: &quot;user&quot;, content: &quot;Hello!&quot;}], # Required.
    temperature: 0.7,
    stream: proc do |chunk, _bytesize|
     print chunk.dig(&quot;choices&quot;, 0, &quot;delta&quot;, &quot;content&quot;)
    end
  }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Ollama&lt;/h4&gt; 
&lt;p&gt;Ollama allows you to run open-source LLMs, such as Llama 3, locally. It &lt;a href=&quot;https://github.com/ollama/ollama/raw/main/docs/openai.md&quot;&gt;offers chat compatibility&lt;/a&gt; with the OpenAI API.&lt;/p&gt; 
&lt;p&gt;You can download Ollama &lt;a href=&quot;https://ollama.com/&quot;&gt;here&lt;/a&gt;. On macOS you can install and run Ollama like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install ollama
ollama serve
ollama pull llama3:latest # In new terminal tab.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a client using your Ollama server and the pulled model, and stream a conversation for free:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(
  uri_base: &quot;http://localhost:11434&quot;
)

client.chat(
  parameters: {
    model: &quot;llama3&quot;, # Required.
    messages: [{ role: &quot;user&quot;, content: &quot;Hello!&quot;}], # Required.
    temperature: 0.7,
    stream: proc do |chunk, _bytesize|
      print chunk.dig(&quot;choices&quot;, 0, &quot;delta&quot;, &quot;content&quot;)
    end
  }
)

# =&amp;gt; Hi! It&#39;s nice to meet you. Is there something I can help you with, or would you like to chat?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Groq&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://console.groq.com/docs/quickstart&quot;&gt;Groq API Chat&lt;/a&gt; is broadly compatible with the OpenAI API, with a &lt;a href=&quot;https://console.groq.com/docs/openai&quot;&gt;few minor differences&lt;/a&gt;. Get an access token from &lt;a href=&quot;https://console.groq.com/keys&quot;&gt;here&lt;/a&gt;, then:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client = OpenAI::Client.new(
  access_token: &quot;groq_access_token_goes_here&quot;,
  uri_base: &quot;https://api.groq.com/openai&quot;
)

client.chat(
  parameters: {
    model: &quot;llama3-8b-8192&quot;, # Required.
    messages: [{ role: &quot;user&quot;, content: &quot;Hello!&quot;}], # Required.
    temperature: 0.7,
    stream: proc do |chunk, _bytesize|
     print chunk.dig(&quot;choices&quot;, 0, &quot;delta&quot;, &quot;content&quot;)
    end
  }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Counting Tokens&lt;/h3&gt; 
&lt;p&gt;OpenAI parses prompt text into &lt;a href=&quot;https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them&quot;&gt;tokens&lt;/a&gt;, which are words or portions of words. (These tokens are unrelated to your API access_token.) Counting tokens can help you estimate your &lt;a href=&quot;https://openai.com/pricing&quot;&gt;costs&lt;/a&gt;. It can also help you ensure your prompt text size is within the max-token limits of your model&#39;s context window, and choose an appropriate &lt;a href=&quot;https://platform.openai.com/docs/api-reference/chat/create#chat/create-max_tokens&quot;&gt;&lt;code&gt;max_tokens&lt;/code&gt;&lt;/a&gt; completion parameter so your response will fit as well.&lt;/p&gt; 
&lt;p&gt;To estimate the token-count of your text:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;OpenAI.rough_token_count(&quot;Your text&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need a more accurate count, try &lt;a href=&quot;https://github.com/IAPark/tiktoken_ruby&quot;&gt;tiktoken_ruby&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Models&lt;/h3&gt; 
&lt;p&gt;There are different models that can be used to generate text. For a full list and to retrieve information about a single model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.models.list
client.models.retrieve(id: &quot;gpt-4o&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also delete any finetuned model you generated, if you&#39;re an account Owner on your OpenAI organization:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.models.delete(id: &quot;ft:gpt-4o-mini:acemeco:suffix:abc123&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chat&lt;/h3&gt; 
&lt;p&gt;GPT is a model that can be used to generate text in a conversational style. You can use it to &lt;a href=&quot;https://platform.openai.com/docs/api-reference/chat/create&quot;&gt;generate a response&lt;/a&gt; to a sequence of &lt;a href=&quot;https://platform.openai.com/docs/guides/chat/introduction&quot;&gt;messages&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.chat(
  parameters: {
    model: &quot;gpt-4o&quot;, # Required.
    messages: [{ role: &quot;user&quot;, content: &quot;Hello!&quot;}], # Required.
    temperature: 0.7,
  }
)
puts response.dig(&quot;choices&quot;, 0, &quot;message&quot;, &quot;content&quot;)
# =&amp;gt; &quot;Hello! How may I assist you today?&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Streaming Chat&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/alexrudall/cb5ee1e109353ef358adb4e66631799d&quot;&gt;Quick guide to streaming Chat with Rails 7 and Hotwire&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can stream from the API in realtime, which can be much faster and used to create a more engaging user experience. Pass a &lt;a href=&quot;https://ruby-doc.org/core-2.6/Proc.html&quot;&gt;Proc&lt;/a&gt; (or any object with a &lt;code&gt;#call&lt;/code&gt; method) to the &lt;code&gt;stream&lt;/code&gt; parameter to receive the stream of completion chunks as they are generated. Each time one or more chunks is received, the proc will be called once with each chunk, parsed as a Hash. If OpenAI returns an error, &lt;code&gt;ruby-openai&lt;/code&gt; will raise a Faraday error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.chat(
  parameters: {
    model: &quot;gpt-4o&quot;, # Required.
    messages: [{ role: &quot;user&quot;, content: &quot;Describe a character called Anna!&quot;}], # Required.
    temperature: 0.7,
    stream: proc do |chunk, _bytesize|
      print chunk.dig(&quot;choices&quot;, 0, &quot;delta&quot;, &quot;content&quot;)
    end
  }
)
# =&amp;gt; &quot;Anna is a young woman in her mid-twenties, with wavy chestnut hair that falls to her shoulders...&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: In order to get usage information, you can provide the &lt;a href=&quot;https://platform.openai.com/docs/api-reference/chat/create#chat-create-stream_options&quot;&gt;&lt;code&gt;stream_options&lt;/code&gt; parameter&lt;/a&gt; and OpenAI will provide a final chunk with the usage. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;stream_proc = proc { |chunk, _bytesize| puts &quot;--------------&quot;; puts chunk.inspect; }
client.chat(
  parameters: {
    model: &quot;gpt-4o&quot;,
    stream: stream_proc,
    stream_options: { include_usage: true },
    messages: [{ role: &quot;user&quot;, content: &quot;Hello!&quot;}],
  }
)
# =&amp;gt; --------------
# =&amp;gt; {&quot;id&quot;=&amp;gt;&quot;chatcmpl-7bbq05PiZqlHxjV1j7OHnKKDURKaf&quot;, &quot;object&quot;=&amp;gt;&quot;chat.completion.chunk&quot;, &quot;created&quot;=&amp;gt;1718750612, &quot;model&quot;=&amp;gt;&quot;gpt-4o-2024-05-13&quot;, &quot;system_fingerprint&quot;=&amp;gt;&quot;fp_9cb5d38cf7&quot;, &quot;choices&quot;=&amp;gt;[{&quot;index&quot;=&amp;gt;0, &quot;delta&quot;=&amp;gt;{&quot;role&quot;=&amp;gt;&quot;assistant&quot;, &quot;content&quot;=&amp;gt;&quot;&quot;}, &quot;logprobs&quot;=&amp;gt;nil, &quot;finish_reason&quot;=&amp;gt;nil}], &quot;usage&quot;=&amp;gt;nil}
# =&amp;gt; --------------
# =&amp;gt; {&quot;id&quot;=&amp;gt;&quot;chatcmpl-7bbq05PiZqlHxjV1j7OHnKKDURKaf&quot;, &quot;object&quot;=&amp;gt;&quot;chat.completion.chunk&quot;, &quot;created&quot;=&amp;gt;1718750612, &quot;model&quot;=&amp;gt;&quot;gpt-4o-2024-05-13&quot;, &quot;system_fingerprint&quot;=&amp;gt;&quot;fp_9cb5d38cf7&quot;, &quot;choices&quot;=&amp;gt;[{&quot;index&quot;=&amp;gt;0, &quot;delta&quot;=&amp;gt;{&quot;content&quot;=&amp;gt;&quot;Hello&quot;}, &quot;logprobs&quot;=&amp;gt;nil, &quot;finish_reason&quot;=&amp;gt;nil}], &quot;usage&quot;=&amp;gt;nil}
# =&amp;gt; --------------
# =&amp;gt; ... more content chunks
# =&amp;gt; --------------
# =&amp;gt; {&quot;id&quot;=&amp;gt;&quot;chatcmpl-7bbq05PiZqlHxjV1j7OHnKKDURKaf&quot;, &quot;object&quot;=&amp;gt;&quot;chat.completion.chunk&quot;, &quot;created&quot;=&amp;gt;1718750612, &quot;model&quot;=&amp;gt;&quot;gpt-4o-2024-05-13&quot;, &quot;system_fingerprint&quot;=&amp;gt;&quot;fp_9cb5d38cf7&quot;, &quot;choices&quot;=&amp;gt;[{&quot;index&quot;=&amp;gt;0, &quot;delta&quot;=&amp;gt;{}, &quot;logprobs&quot;=&amp;gt;nil, &quot;finish_reason&quot;=&amp;gt;&quot;stop&quot;}], &quot;usage&quot;=&amp;gt;nil}
# =&amp;gt; --------------
# =&amp;gt; {&quot;id&quot;=&amp;gt;&quot;chatcmpl-7bbq05PiZqlHxjV1j7OHnKKDURKaf&quot;, &quot;object&quot;=&amp;gt;&quot;chat.completion.chunk&quot;, &quot;created&quot;=&amp;gt;1718750612, &quot;model&quot;=&amp;gt;&quot;gpt-4o-2024-05-13&quot;, &quot;system_fingerprint&quot;=&amp;gt;&quot;fp_9cb5d38cf7&quot;, &quot;choices&quot;=&amp;gt;[], &quot;usage&quot;=&amp;gt;{&quot;prompt_tokens&quot;=&amp;gt;9, &quot;completion_tokens&quot;=&amp;gt;9, &quot;total_tokens&quot;=&amp;gt;18}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Vision&lt;/h4&gt; 
&lt;p&gt;You can use the GPT-4 Vision model to generate a description of an image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;messages = [
  { &quot;type&quot;: &quot;text&quot;, &quot;text&quot;: &quot;What‚Äôs in this image?&quot;},
  { &quot;type&quot;: &quot;image_url&quot;,
    &quot;image_url&quot;: {
      &quot;url&quot;: &quot;https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg&quot;,
    },
  }
]
response = client.chat(
  parameters: {
    model: &quot;gpt-4-vision-preview&quot;, # Required.
    messages: [{ role: &quot;user&quot;, content: messages}], # Required.
  }
)
puts response.dig(&quot;choices&quot;, 0, &quot;message&quot;, &quot;content&quot;)
# =&amp;gt; &quot;The image depicts a serene natural landscape featuring a long wooden boardwalk extending straight ahead&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JSON Mode&lt;/h4&gt; 
&lt;p&gt;You can set the response_format to ask for responses in JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.chat(
  parameters: {
    model: &quot;gpt-4o&quot;,
    response_format: { type: &quot;json_object&quot; },
    messages: [{ role: &quot;user&quot;, content: &quot;Hello! Give me some JSON please.&quot;}],
    temperature: 0.7,
  })
  puts response.dig(&quot;choices&quot;, 0, &quot;message&quot;, &quot;content&quot;)
  # =&amp;gt;
  # {
  #   &quot;name&quot;: &quot;John&quot;,
  #   &quot;age&quot;: 30,
  #   &quot;city&quot;: &quot;New York&quot;,
  #   &quot;hobbies&quot;: [&quot;reading&quot;, &quot;traveling&quot;, &quot;hiking&quot;],
  #   &quot;isStudent&quot;: false
  # }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can stream it as well!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;  response = client.chat(
    parameters: {
      model: &quot;gpt-4o&quot;,
      messages: [{ role: &quot;user&quot;, content: &quot;Can I have some JSON please?&quot;}],
      response_format: { type: &quot;json_object&quot; },
      stream: proc do |chunk, _bytesize|
        print chunk.dig(&quot;choices&quot;, 0, &quot;delta&quot;, &quot;content&quot;)
      end
    }
  )
  # =&amp;gt;
  # {
  #   &quot;message&quot;: &quot;Sure, please let me know what specific JSON data you are looking for.&quot;,
  #   &quot;JSON_data&quot;: {
  #     &quot;example_1&quot;: {
  #       &quot;key_1&quot;: &quot;value_1&quot;,
  #       &quot;key_2&quot;: &quot;value_2&quot;,
  #       &quot;key_3&quot;: &quot;value_3&quot;
  #     },
  #     &quot;example_2&quot;: {
  #       &quot;key_4&quot;: &quot;value_4&quot;,
  #       &quot;key_5&quot;: &quot;value_5&quot;,
  #       &quot;key_6&quot;: &quot;value_6&quot;
  #     }
  #   }
  # }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Responses API&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://platform.openai.com/docs/api-reference/responses&quot;&gt;OpenAI&#39;s most advanced interface for generating model responses&lt;/a&gt;. Supports text and image inputs, and text outputs. Create stateful interactions with the model, using the output of previous responses as input. Extend the model&#39;s capabilities with built-in tools for file search, web search, computer use, and more. Allow the model access to external systems and data using function calling.&lt;/p&gt; 
&lt;h4&gt;Create a Response&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.responses.create(parameters: {
  model: &quot;gpt-4o&quot;,
  input: &quot;Hello! I&#39;m Szymon!&quot;
})
puts response.dig(&quot;output&quot;, 0, &quot;content&quot;, 0, &quot;text&quot;)
# =&amp;gt; Hello Szymon! How can I assist you today?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Follow-up Messages&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;followup = client.responses.create(parameters: {
  model: &quot;gpt-4o&quot;,
  input: &quot;Remind me, what is my name?&quot;,
  previous_response_id: response[&quot;id&quot;]
})
puts followup.dig(&quot;output&quot;, 0, &quot;content&quot;, 0, &quot;text&quot;)
# =&amp;gt; Your name is Szymon! How can I help you today?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Tool Calls&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.responses.create(parameters: {
  model: &quot;gpt-4o&quot;,
  input: &quot;What&#39;s the weather in Paris?&quot;,
  tools: [
    {
      &quot;type&quot; =&amp;gt; &quot;function&quot;,
      &quot;name&quot; =&amp;gt; &quot;get_current_weather&quot;,
      &quot;description&quot; =&amp;gt; &quot;Get the current weather in a given location&quot;,
      &quot;parameters&quot; =&amp;gt; {
        &quot;type&quot; =&amp;gt; &quot;object&quot;,
        &quot;properties&quot; =&amp;gt; {
          &quot;location&quot; =&amp;gt; {
            &quot;type&quot; =&amp;gt; &quot;string&quot;,
            &quot;description&quot; =&amp;gt; &quot;The geographic location to get the weather for&quot;
          }
        },
        &quot;required&quot; =&amp;gt; [&quot;location&quot;]
      }
    }
  ]
})
puts response.dig(&quot;output&quot;, 0, &quot;name&quot;)
# =&amp;gt; &quot;get_current_weather&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Streaming&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.responses.create(
  parameters: {
    model: &quot;gpt-4o&quot;, # Required.
    input: &quot;Hello!&quot;, # Required.
    stream: proc do |chunk, _bytesize|
      if chunk[&quot;type&quot;] == &quot;response.output_text.delta&quot;
        print chunk[&quot;delta&quot;]
        $stdout.flush  # Ensure output is displayed immediately
      end
    end
  }
)
# =&amp;gt; &quot;Hi there! How can I assist you today?...&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Retrieve a Response&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;retrieved_response = client.responses.retrieve(response_id: response[&quot;id&quot;])
puts retrieved_response[&quot;object&quot;]
# =&amp;gt; &quot;response&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Delete a Response&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;deletion = client.responses.delete(response_id: response[&quot;id&quot;])
puts deletion[&quot;deleted&quot;]
# =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;List Input Items&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;input_items = client.responses.input_items(response_id: response[&quot;id&quot;])
puts input_items[&quot;object&quot;] # =&amp;gt; &quot;list&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Functions&lt;/h3&gt; 
&lt;p&gt;You can describe and pass in functions and the model will intelligently choose to output a JSON object containing arguments to call them - eg., to use your method &lt;code&gt;get_current_weather&lt;/code&gt; to get the weather in a given location. Note that tool_choice is optional, but if you exclude it, the model will choose whether to use the function or not (&lt;a href=&quot;https://platform.openai.com/docs/api-reference/chat/create#chat-create-tool_choice&quot;&gt;see here&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def get_current_weather(location:, unit: &quot;fahrenheit&quot;)
  # Here you could use a weather api to fetch the weather.
  &quot;The weather in #{location} is nice üåû #{unit}&quot;
end

messages = [
  {
    &quot;role&quot;: &quot;user&quot;,
    &quot;content&quot;: &quot;What is the weather like in San Francisco?&quot;,
  },
]

response =
  client.chat(
    parameters: {
      model: &quot;gpt-4o&quot;,
      messages: messages,  # Defined above because we&#39;ll use it again
      tools: [
        {
          type: &quot;function&quot;,
          function: {
            name: &quot;get_current_weather&quot;,
            description: &quot;Get the current weather in a given location&quot;,
            parameters: {  # Format: https://json-schema.org/understanding-json-schema
              type: :object,
              properties: {
                location: {
                  type: :string,
                  description: &quot;The city and state, e.g. San Francisco, CA&quot;,
                },
                unit: {
                  type: &quot;string&quot;,
                  enum: %w[celsius fahrenheit],
                },
              },
              required: [&quot;location&quot;],
            },
          },
        }
      ],
      # Optional, defaults to &quot;auto&quot;
      # Can also put &quot;none&quot; or specific functions, see docs
      tool_choice: &quot;required&quot;
    },
  )

message = response.dig(&quot;choices&quot;, 0, &quot;message&quot;)

if message[&quot;role&quot;] == &quot;assistant&quot; &amp;amp;&amp;amp; message[&quot;tool_calls&quot;]
  message[&quot;tool_calls&quot;].each do |tool_call|
    tool_call_id = tool_call.dig(&quot;id&quot;)
    function_name = tool_call.dig(&quot;function&quot;, &quot;name&quot;)
    function_args = JSON.parse(
      tool_call.dig(&quot;function&quot;, &quot;arguments&quot;),
      { symbolize_names: true },
    )
    function_response =
      case function_name
      when &quot;get_current_weather&quot;
        get_current_weather(**function_args)  # =&amp;gt; &quot;The weather is nice üåû&quot;
      else
        # decide how to handle
      end

    # For a subsequent message with the role &quot;tool&quot;, OpenAI requires the preceding message to have a tool_calls argument.
    messages &amp;lt;&amp;lt; message

    messages &amp;lt;&amp;lt; {
      tool_call_id: tool_call_id,
      role: &quot;tool&quot;,
      name: function_name,
      content: function_response
    }  # Extend the conversation with the results of the functions
  end

  second_response = client.chat(
    parameters: {
      model: &quot;gpt-4o&quot;,
      messages: messages
    }
  )

  puts second_response.dig(&quot;choices&quot;, 0, &quot;message&quot;, &quot;content&quot;)

  # At this point, the model has decided to call functions, you&#39;ve called the functions
  # and provided the response back, and the model has considered this and responded.
end
# =&amp;gt; &quot;It looks like the weather is nice and sunny in San Francisco! If you&#39;re planning to go out, it should be a pleasant day.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Completions&lt;/h3&gt; 
&lt;p&gt;Hit the OpenAI API for a completion using other GPT-3 models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.completions(
  parameters: {
    model: &quot;gpt-4o&quot;,
    prompt: &quot;Once upon a time&quot;,
    max_tokens: 5
  }
)
puts response[&quot;choices&quot;].map { |c| c[&quot;text&quot;] }
# =&amp;gt; [&quot;, there lived a great&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Embeddings&lt;/h3&gt; 
&lt;p&gt;You can use the embeddings endpoint to get a vector of numbers representing an input. You can then compare these vectors for different inputs to efficiently check how similar the inputs are.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.embeddings(
  parameters: {
    model: &quot;text-embedding-ada-002&quot;,
    input: &quot;The food was delicious and the waiter...&quot;
  }
)

puts response.dig(&quot;data&quot;, 0, &quot;embedding&quot;)
# =&amp;gt; Vector representation of your embedding
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Batches&lt;/h3&gt; 
&lt;p&gt;The Batches endpoint allows you to create and manage large batches of API requests to run asynchronously. Currently, the supported endpoints for batches are &lt;code&gt;/v1/chat/completions&lt;/code&gt; (Chat Completions API) and &lt;code&gt;/v1/embeddings&lt;/code&gt; (Embeddings API).&lt;/p&gt; 
&lt;p&gt;To use the Batches endpoint, you need to first upload a JSONL file containing the batch requests using the Files endpoint. The file must be uploaded with the purpose set to &lt;code&gt;batch&lt;/code&gt;. Each line in the JSONL file represents a single request and should have the following format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;custom_id&quot;: &quot;request-1&quot;,
  &quot;method&quot;: &quot;POST&quot;,
  &quot;url&quot;: &quot;/v1/chat/completions&quot;,
  &quot;body&quot;: {
    &quot;model&quot;: &quot;gpt-4o&quot;,
    &quot;messages&quot;: [
      { &quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a helpful assistant.&quot; },
      { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;What is 2+2?&quot; }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once you have uploaded the JSONL file, you can create a new batch by providing the file ID, endpoint, and completion window:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.batches.create(
  parameters: {
    input_file_id: &quot;file-abc123&quot;,
    endpoint: &quot;/v1/chat/completions&quot;,
    completion_window: &quot;24h&quot;
  }
)
batch_id = response[&quot;id&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can retrieve information about a specific batch using its ID:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;batch = client.batches.retrieve(id: batch_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To cancel a batch that is in progress:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.batches.cancel(id: batch_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also list all the batches:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.batches.list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the batch[&quot;completed_at&quot;] is present, you can fetch the output or error files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;batch = client.batches.retrieve(id: batch_id)
output_file_id = batch[&quot;output_file_id&quot;]
output_response = client.files.content(id: output_file_id)
error_file_id = batch[&quot;error_file_id&quot;]
error_response = client.files.content(id: error_file_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These files are in JSONL format, with each line representing the output or error for a single request. The lines can be in any order:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;id&quot;: &quot;response-1&quot;,
  &quot;custom_id&quot;: &quot;request-1&quot;,
  &quot;response&quot;: {
    &quot;id&quot;: &quot;chatcmpl-abc123&quot;,
    &quot;object&quot;: &quot;chat.completion&quot;,
    &quot;created&quot;: 1677858242,
    &quot;model&quot;: &quot;gpt-4o&quot;,
    &quot;choices&quot;: [
      {
        &quot;index&quot;: 0,
        &quot;message&quot;: {
          &quot;role&quot;: &quot;assistant&quot;,
          &quot;content&quot;: &quot;2+2 equals 4.&quot;
        }
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a request fails with a non-HTTP error, the error object will contain more information about the cause of the failure.&lt;/p&gt; 
&lt;h3&gt;Files&lt;/h3&gt; 
&lt;h4&gt;For fine-tuning purposes&lt;/h4&gt; 
&lt;p&gt;Put your data in a &lt;code&gt;.jsonl&lt;/code&gt; file like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{&quot;prompt&quot;:&quot;Overjoyed with my new phone! -&amp;gt;&quot;, &quot;completion&quot;:&quot; positive&quot;}
{&quot;prompt&quot;:&quot;@lakers disappoint for a third straight night -&amp;gt;&quot;, &quot;completion&quot;:&quot; negative&quot;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and pass the path (or a StringIO object) to &lt;code&gt;client.files.upload&lt;/code&gt; to upload it to OpenAI, and then interact with it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.files.upload(parameters: { file: &quot;path/to/sentiment.jsonl&quot;, purpose: &quot;fine-tune&quot; })
client.files.list
client.files.retrieve(id: &quot;file-123&quot;)
client.files.content(id: &quot;file-123&quot;)
client.files.delete(id: &quot;file-123&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For assistant purposes&lt;/h4&gt; 
&lt;p&gt;You can send a file path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.files.upload(parameters: { file: &quot;path/to/file.pdf&quot;, purpose: &quot;assistants&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or a File object&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;my_file = File.open(&quot;path/to/file.pdf&quot;, &quot;rb&quot;)
client.files.upload(parameters: { file: my_file, purpose: &quot;assistants&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See supported file types on &lt;a href=&quot;https://platform.openai.com/docs/assistants/tools/file-search/supported-files&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Finetunes&lt;/h3&gt; 
&lt;p&gt;Upload your fine-tuning data in a &lt;code&gt;.jsonl&lt;/code&gt; file as above and get its ID:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.files.upload(parameters: { file: &quot;path/to/sarcasm.jsonl&quot;, purpose: &quot;fine-tune&quot; })
file_id = JSON.parse(response.body)[&quot;id&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can then use this file ID to create a fine tuning job:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.finetunes.create(
  parameters: {
  training_file: file_id,
  model: &quot;gpt-4o&quot;
})
fine_tune_id = response[&quot;id&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That will give you the fine-tune ID. If you made a mistake you can cancel the fine-tune model before it is processed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.finetunes.cancel(id: fine_tune_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may need to wait a short time for processing to complete. Once processed, you can use list or retrieve to get the name of the fine-tuned model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.finetunes.list
response = client.finetunes.retrieve(id: fine_tune_id)
fine_tuned_model = response[&quot;fine_tuned_model&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This fine-tuned model name can then be used in chat completions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.chat(
  parameters: {
    model: fine_tuned_model,
    messages: [{ role: &quot;user&quot;, content: &quot;I love Mondays!&quot; }]
  }
)
response.dig(&quot;choices&quot;, 0, &quot;message&quot;, &quot;content&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also capture the events for a job:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.finetunes.list_events(id: fine_tune_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also delete any finetuned model you generated, if you&#39;re an account Owner on your OpenAI organization:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.models.delete(id: fine_tune_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vector Stores&lt;/h3&gt; 
&lt;p&gt;Vector Store objects give the File Search tool the ability to search your files.&lt;/p&gt; 
&lt;p&gt;You can create a new vector store:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.vector_stores.create(
  parameters: {
    name: &quot;my vector store&quot;,
    file_ids: [&quot;file-abc123&quot;, &quot;file-def456&quot;]
  }
)

vector_store_id = response[&quot;id&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given a &lt;code&gt;vector_store_id&lt;/code&gt; you can &lt;code&gt;retrieve&lt;/code&gt; the current field values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_stores.retrieve(id: vector_store_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can get a &lt;code&gt;list&lt;/code&gt; of all vector stores currently available under the organization:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_stores.list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can modify an existing vector store, except for the &lt;code&gt;file_ids&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.vector_stores.modify(
  id: vector_store_id,
  parameters: {
    name: &quot;Modified Test Vector Store&quot;,
  }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can delete vector stores:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_stores.delete(id: vector_store_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vector Store Files&lt;/h3&gt; 
&lt;p&gt;Vector store files represent files inside a vector store.&lt;/p&gt; 
&lt;p&gt;You can create a new vector store file by attaching a File to a vector store.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.vector_store_files.create(
  vector_store_id: &quot;vector-store-abc123&quot;,
  parameters: {
    file_id: &quot;file-abc123&quot;
  }
)

vector_store_file_id = response[&quot;id&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given a &lt;code&gt;vector_store_file_id&lt;/code&gt; you can &lt;code&gt;retrieve&lt;/code&gt; the current field values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_store_files.retrieve(
  vector_store_id: &quot;vector-store-abc123&quot;,
  id: vector_store_file_id
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can get a &lt;code&gt;list&lt;/code&gt; of all vector store files currently available under the vector store:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_store_files.list(vector_store_id: &quot;vector-store-abc123&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can delete a vector store file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_store_files.delete(
  vector_store_id: &quot;vector-store-abc123&quot;,
  id: vector_store_file_id
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the delete file endpoint.&lt;/p&gt; 
&lt;h3&gt;Vector Store File Batches&lt;/h3&gt; 
&lt;p&gt;Vector store file batches represent operations to add multiple files to a vector store.&lt;/p&gt; 
&lt;p&gt;You can create a new vector store file batch by attaching multiple Files to a vector store.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.vector_store_file_batches.create(
  vector_store_id: &quot;vector-store-abc123&quot;,
  parameters: {
    file_ids: [&quot;file-abc123&quot;, &quot;file-def456&quot;]
  }
)

file_batch_id = response[&quot;id&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given a &lt;code&gt;file_batch_id&lt;/code&gt; you can &lt;code&gt;retrieve&lt;/code&gt; the current field values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_store_file_batches.retrieve(
  vector_store_id: &quot;vector-store-abc123&quot;,
  id: file_batch_id
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can get a &lt;code&gt;list&lt;/code&gt; of all vector store files in a batch currently available under the vector store:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_store_file_batches.list(
  vector_store_id: &quot;vector-store-abc123&quot;,
  id: file_batch_id
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can cancel a vector store file batch (This attempts to cancel the processing of files in this batch as soon as possible):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.vector_store_file_batches.cancel(
  vector_store_id: &quot;vector-store-abc123&quot;,
  id: file_batch_id
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Assistants&lt;/h3&gt; 
&lt;p&gt;Assistants are stateful actors that can have many conversations and use tools to perform tasks (see &lt;a href=&quot;https://platform.openai.com/docs/assistants/overview&quot;&gt;Assistant Overview&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;To create a new assistant:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.assistants.create(
  parameters: {
    model: &quot;gpt-4o&quot;,
    name: &quot;OpenAI-Ruby test assistant&quot;,
    description: nil,
    instructions: &quot;You are a Ruby dev bot. When asked a question, write and run Ruby code to answer the question&quot;,
    tools: [
      { type: &quot;code_interpreter&quot; },
      { type: &quot;file_search&quot; }
    ],
    tool_resources: {
      code_interpreter: {
        file_ids: [] # See Files section above for how to upload files
      },
      file_search: {
        vector_store_ids: [] # See Vector Stores section above for how to add vector stores
      }
    },
    &quot;metadata&quot;: { my_internal_version_id: &quot;1.0.0&quot; }
  }
)
assistant_id = response[&quot;id&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given an &lt;code&gt;assistant_id&lt;/code&gt; you can &lt;code&gt;retrieve&lt;/code&gt; the current field values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.assistants.retrieve(id: assistant_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can get a &lt;code&gt;list&lt;/code&gt; of all assistants currently available under the organization:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.assistants.list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can modify an existing assistant using the assistant&#39;s id (see &lt;a href=&quot;https://platform.openai.com/docs/api-reference/assistants/modifyAssistant&quot;&gt;API documentation&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.assistants.modify(
  id: assistant_id,
  parameters: {
    name: &quot;Modified Test Assistant for OpenAI-Ruby&quot;,
    metadata: { my_internal_version_id: &#39;1.0.1&#39; }
  }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can delete assistants:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.assistants.delete(id: assistant_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Threads and Messages&lt;/h3&gt; 
&lt;p&gt;Once you have created an assistant as described above, you need to prepare a &lt;code&gt;Thread&lt;/code&gt; of &lt;code&gt;Messages&lt;/code&gt; for the assistant to work on (see &lt;a href=&quot;https://platform.openai.com/docs/assistants/how-it-works&quot;&gt;introduction on Assistants&lt;/a&gt;). For example, as an initial setup you could do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Create thread
response = client.threads.create # Note: Once you create a thread, there is no way to list it
                                 # or recover it currently (as of 2023-12-10). So hold onto the `id`
thread_id = response[&quot;id&quot;]

# Add initial message from user (see https://platform.openai.com/docs/api-reference/messages/createMessage)
message_id = client.messages.create(
  thread_id: thread_id,
  parameters: {
    role: &quot;user&quot;, # Required for manually created messages
    content: &quot;Can you help me write an API library to interact with the OpenAI API please?&quot;
  }
)[&quot;id&quot;]

# Retrieve individual message
message = client.messages.retrieve(thread_id: thread_id, id: message_id)

# Review all messages on the thread
messages = client.messages.list(thread_id: thread_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To clean up after a thread is no longer needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# To delete the thread (and all associated messages):
client.threads.delete(id: thread_id)

client.messages.retrieve(thread_id: thread_id, id: message_id) # -&amp;gt; Fails after thread is deleted
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Runs&lt;/h3&gt; 
&lt;p&gt;To submit a thread to be evaluated with the model of an assistant, create a &lt;code&gt;Run&lt;/code&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Create run (will use instruction/model/tools from Assistant&#39;s definition)
response = client.runs.create(
  thread_id: thread_id,
  parameters: {
    assistant_id: assistant_id,
    max_prompt_tokens: 256,
    max_completion_tokens: 16
  }
)
run_id = response[&#39;id&#39;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can stream the message chunks as they come through:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.runs.create(
  thread_id: thread_id,
  parameters: {
    assistant_id: assistant_id,
    max_prompt_tokens: 256,
    max_completion_tokens: 16,
    stream: proc do |chunk, _bytesize|
      if chunk[&quot;object&quot;] == &quot;thread.message.delta&quot;
        print chunk.dig(&quot;delta&quot;, &quot;content&quot;, 0, &quot;text&quot;, &quot;value&quot;)
      end
    end
  }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get the status of a Run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.runs.retrieve(id: run_id, thread_id: thread_id)
status = response[&#39;status&#39;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;status&lt;/code&gt; response can include the following strings &lt;code&gt;queued&lt;/code&gt;, &lt;code&gt;in_progress&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt;, &lt;code&gt;cancelling&lt;/code&gt;, &lt;code&gt;cancelled&lt;/code&gt;, &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt;, or &lt;code&gt;expired&lt;/code&gt; which you can handle as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;while true do
  response = client.runs.retrieve(id: run_id, thread_id: thread_id)
  status = response[&#39;status&#39;]

  case status
  when &#39;queued&#39;, &#39;in_progress&#39;, &#39;cancelling&#39;
    puts &#39;Sleeping&#39;
    sleep 1 # Wait one second and poll again
  when &#39;completed&#39;
    break # Exit loop and report result to user
  when &#39;requires_action&#39;
    # Handle tool calls (see below)
  when &#39;cancelled&#39;, &#39;failed&#39;, &#39;expired&#39;
    puts response[&#39;last_error&#39;].inspect
    break # or `exit`
  else
    puts &quot;Unknown status response: #{status}&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the &lt;code&gt;status&lt;/code&gt; response indicates that the &lt;code&gt;run&lt;/code&gt; is &lt;code&gt;completed&lt;/code&gt;, the associated &lt;code&gt;thread&lt;/code&gt; will have one or more new &lt;code&gt;messages&lt;/code&gt; attached:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Either retrieve all messages in bulk again, or...
messages = client.messages.list(thread_id: thread_id, parameters: { order: &#39;asc&#39; })

# Alternatively retrieve the `run steps` for the run which link to the messages:
run_steps = client.run_steps.list(thread_id: thread_id, run_id: run_id, parameters: { order: &#39;asc&#39; })
new_message_ids = run_steps[&#39;data&#39;].filter_map do |step|
  if step[&#39;type&#39;] == &#39;message_creation&#39;
    step.dig(&#39;step_details&#39;, &quot;message_creation&quot;, &quot;message_id&quot;)
  end # Ignore tool calls, because they don&#39;t create new messages.
end

# Retrieve the individual messages
new_messages = new_message_ids.map do |msg_id|
  client.messages.retrieve(id: msg_id, thread_id: thread_id)
end

# Find the actual response text in the content array of the messages
new_messages.each do |msg|
  msg[&#39;content&#39;].each do |content_item|
    case content_item[&#39;type&#39;]
    when &#39;text&#39;
      puts content_item.dig(&#39;text&#39;, &#39;value&#39;)
      # Also handle annotations
    when &#39;image_file&#39;
      # Use File endpoint to retrieve file contents via id
      id = content_item.dig(&#39;image_file&#39;, &#39;file_id&#39;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also update the metadata on messages, including messages that come from the assistant.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;metadata = {
  user_id: &quot;abc123&quot;
}
message = client.messages.modify(
  id: message_id,
  thread_id: thread_id,
  parameters: { metadata: metadata },
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At any time you can list all runs which have been performed on a particular thread or are currently running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;client.runs.list(thread_id: thread_id, parameters: { order: &quot;asc&quot;, limit: 3 })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Create and Run&lt;/h4&gt; 
&lt;p&gt;You can also create a thread and run in one call like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.runs.create_thread_and_run(parameters: { assistant_id: assistant_id })
run_id = response[&#39;id&#39;]
thread_id = response[&#39;thread_id&#39;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Vision in a thread&lt;/h4&gt; 
&lt;p&gt;You can include images in a thread and they will be described &amp;amp; read by the LLM. In this example I&#39;m using &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/7/70/Example.png&quot;&gt;this file&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;openai&quot;

# Make a client
client = OpenAI::Client.new(
  access_token: &quot;access_token_goes_here&quot;,
  log_errors: true # Don&#39;t log errors in production.
)

# Upload image as a file
file_id = client.files.upload(
  parameters: {
    file: &quot;path/to/example.png&quot;,
    purpose: &quot;assistants&quot;,
  }
)[&quot;id&quot;]

# Create assistant (You could also use an existing one here)
assistant_id = client.assistants.create(
  parameters: {
    model: &quot;gpt-4o&quot;,
    name: &quot;Image reader&quot;,
    instructions: &quot;You are an image describer. You describe the contents of images.&quot;,
  }
)[&quot;id&quot;]

# Create thread
thread_id = client.threads.create[&quot;id&quot;]

# Add image in message
client.messages.create(
  thread_id: thread_id,
  parameters: {
    role: &quot;user&quot;, # Required for manually created messages
    content: [
      {
        &quot;type&quot;: &quot;text&quot;,
        &quot;text&quot;: &quot;What&#39;s in this image?&quot;
      },
      {
        &quot;type&quot;: &quot;image_file&quot;,
        &quot;image_file&quot;: { &quot;file_id&quot;: file_id }
      }
    ]
  }
)

# Run thread
run_id = client.runs.create(
  thread_id: thread_id,
  parameters: { assistant_id: assistant_id }
)[&quot;id&quot;]

# Wait until run in complete
status = nil
until status == &quot;completed&quot; do
  sleep(0.1)
  status = client.runs.retrieve(id: run_id, thread_id: thread_id)[&#39;status&#39;]
end

# Get the response
messages = client.messages.list(thread_id: thread_id, parameters: { order: &#39;asc&#39; })
messages.dig(&quot;data&quot;, -1, &quot;content&quot;, 0, &quot;text&quot;, &quot;value&quot;)
=&amp;gt; &quot;The image contains a placeholder graphic with a tilted, stylized representation of a postage stamp in the top part, which includes an abstract landscape with hills and a sun. Below the stamp, in the middle of the image, there is italicized text in a light golden color that reads, \&quot;This is just an example.\&quot; The background is a light pastel shade, and a yellow border frames the entire image.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Runs involving function tools&lt;/h4&gt; 
&lt;p&gt;In case you are allowing the assistant to access &lt;code&gt;function&lt;/code&gt; tools (they are defined in the same way as functions during chat completion), you might get a status code of &lt;code&gt;requires_action&lt;/code&gt; when the assistant wants you to evaluate one or more function tools:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def get_current_weather(location:, unit: &quot;celsius&quot;)
  # Your function code goes here
  if location =~ /San Francisco/i
    return unit == &quot;celsius&quot; ? &quot;The weather is nice üåû at 27¬∞C&quot; : &quot;The weather is nice üåû at 80¬∞F&quot;
  else
    return unit == &quot;celsius&quot; ? &quot;The weather is icy ü•∂ at -5¬∞C&quot; : &quot;The weather is icy ü•∂ at 23¬∞F&quot;
  end
end

if status == &#39;requires_action&#39;
  tools_to_call = response.dig(&#39;required_action&#39;, &#39;submit_tool_outputs&#39;, &#39;tool_calls&#39;)

  my_tool_outputs = tools_to_call.map { |tool|
    # Call the functions based on the tool&#39;s name
    function_name = tool.dig(&#39;function&#39;, &#39;name&#39;)
    arguments = JSON.parse(
      tool.dig(&quot;function&quot;, &quot;arguments&quot;),
      { symbolize_names: true },
    )

    tool_output = case function_name
    when &quot;get_current_weather&quot;
      get_current_weather(**arguments)
    end

    {
      tool_call_id: tool[&#39;id&#39;],
      output: tool_output,
    }
  }

  client.runs.submit_tool_outputs(
    thread_id: thread_id,
    run_id: run_id,
    parameters: { tool_outputs: my_tool_outputs }
  )
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you have 10 minutes to submit your tool output before the run expires.&lt;/p&gt; 
&lt;h4&gt;Exploring chunks used in File Search&lt;/h4&gt; 
&lt;p&gt;Take a deep breath. You might need a drink for this one.&lt;/p&gt; 
&lt;p&gt;It&#39;s possible for OpenAI to share what chunks it used in its internal RAG Pipeline to create its filesearch results.&lt;/p&gt; 
&lt;p&gt;An example spec can be found &lt;a href=&quot;https://github.com/alexrudall/ruby-openai/raw/main/spec/openai/client/assistant_file_search_spec.rb&quot;&gt;here&lt;/a&gt; that does this, just so you know it&#39;s possible.&lt;/p&gt; 
&lt;p&gt;Here&#39;s how to get the chunks used in a file search. In this example I&#39;m using &lt;a href=&quot;https://css4.pub/2015/textbook/somatosensory.pdf&quot;&gt;this file&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;openai&quot;

# Make a client
client = OpenAI::Client.new(
  access_token: &quot;access_token_goes_here&quot;,
  log_errors: true # Don&#39;t log errors in production.
)

# Upload your file(s)
file_id = client.files.upload(
  parameters: {
    file: &quot;path/to/somatosensory.pdf&quot;,
    purpose: &quot;assistants&quot;
  }
)[&quot;id&quot;]

# Create a vector store to store the vectorised file(s)
vector_store_id = client.vector_stores.create(parameters: {})[&quot;id&quot;]

# Vectorise the file(s)
vector_store_file_id = client.vector_store_files.create(
  vector_store_id: vector_store_id,
  parameters: { file_id: file_id }
)[&quot;id&quot;]

# Check that the file is vectorised (wait for status to be &quot;completed&quot;)
client.vector_store_files.retrieve(vector_store_id: vector_store_id, id: vector_store_file_id)[&quot;status&quot;]

# Create an assistant, referencing the vector store
assistant_id = client.assistants.create(
  parameters: {
    model: &quot;gpt-4o&quot;,
    name: &quot;Answer finder&quot;,
    instructions: &quot;You are a file search tool. Find the answer in the given files, please.&quot;,
    tools: [
      { type: &quot;file_search&quot; }
    ],
    tool_resources: {
      file_search: {
        vector_store_ids: [vector_store_id]
      }
    }
  }
)[&quot;id&quot;]

# Create a thread with your question
thread_id = client.threads.create(parameters: {
  messages: [
    { role: &quot;user&quot;,
      content: &quot;Find the description of a nociceptor.&quot; }
  ]
})[&quot;id&quot;]

# Run the thread to generate the response. Include the &quot;GIVE ME THE CHUNKS&quot; incantation.
run_id = client.runs.create(
  thread_id: thread_id,
  parameters: {
    assistant_id: assistant_id
  },
  query_parameters: { include: [&quot;step_details.tool_calls[*].file_search.results[*].content&quot;] } # incantation
)[&quot;id&quot;]

# Get the steps that happened in the run
steps = client.run_steps.list(
  thread_id: thread_id,
  run_id: run_id,
  parameters: { order: &quot;asc&quot; }
)

# Retrieve all the steps. Include the &quot;GIVE ME THE CHUNKS&quot; incantation again.
steps = steps[&quot;data&quot;].map do |step|
  client.run_steps.retrieve(
    thread_id: thread_id,
    run_id: run_id,
    id: step[&quot;id&quot;],
    parameters: { include: [&quot;step_details.tool_calls[*].file_search.results[*].content&quot;] } # incantation
  )
end

# Now we&#39;ve got the chunk info, buried deep. Loop through the steps and find chunks if included:
chunks = steps.flat_map do |step|
  included_results = step.dig(&quot;step_details&quot;, &quot;tool_calls&quot;, 0, &quot;file_search&quot;, &quot;results&quot;)

  next if included_results.nil? || included_results.empty?

  included_results.flat_map do |result|
    result[&quot;content&quot;].map do |content|
      content[&quot;text&quot;]
    end
  end
end.compact

# The first chunk will be the closest match to the prompt. Finally, if you want to view the completed message(s):
client.messages.list(thread_id: thread_id)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Image Generation&lt;/h3&gt; 
&lt;p&gt;Generate images using DALL¬∑E 2 or DALL¬∑E 3!&lt;/p&gt; 
&lt;h4&gt;DALL¬∑E 2&lt;/h4&gt; 
&lt;p&gt;For DALL¬∑E 2 the size of any generated images must be one of &lt;code&gt;256x256&lt;/code&gt;, &lt;code&gt;512x512&lt;/code&gt; or &lt;code&gt;1024x1024&lt;/code&gt; - if not specified the image will default to &lt;code&gt;1024x1024&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.images.generate(
  parameters: {
    prompt: &quot;A baby sea otter cooking pasta wearing a hat of some sort&quot;,
    size: &quot;256x256&quot;,
  }
)
puts response.dig(&quot;data&quot;, 0, &quot;url&quot;)
# =&amp;gt; &quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/6y4HJFx/img-d-Tx-Rf-RHj-SO5-Gho-Cbd8o-LJvw3.png&quot; alt=&quot;Ruby&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;DALL¬∑E 3&lt;/h4&gt; 
&lt;p&gt;For DALL¬∑E 3 the size of any generated images must be one of &lt;code&gt;1024x1024&lt;/code&gt;, &lt;code&gt;1024x1792&lt;/code&gt; or &lt;code&gt;1792x1024&lt;/code&gt;. Additionally the quality of the image can be specified to either &lt;code&gt;standard&lt;/code&gt; or &lt;code&gt;hd&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.images.generate(
  parameters: {
    prompt: &quot;A springer spaniel cooking pasta wearing a hat of some sort&quot;,
    model: &quot;dall-e-3&quot;,
    size: &quot;1024x1792&quot;,
    quality: &quot;standard&quot;,
  }
)
puts response.dig(&quot;data&quot;, 0, &quot;url&quot;)
# =&amp;gt; &quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/z2tCKv9/img-Goio0l-S0i81-NUNa-BIx-Eh-CT6-L.png&quot; alt=&quot;Ruby&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Image Edit&lt;/h3&gt; 
&lt;p&gt;Fill in the transparent part of an image, or upload a mask with transparent sections to indicate the parts of an image that can be changed according to your prompt...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.images.edit(
  parameters: {
    prompt: &quot;A solid red Ruby on a blue background&quot;,
    image: &quot;image.png&quot;,
    mask: &quot;mask.png&quot;,
  }
)
puts response.dig(&quot;data&quot;, 0, &quot;url&quot;)
# =&amp;gt; &quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/sWVh3BX/dalle-ruby.png&quot; alt=&quot;Ruby&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Image Variations&lt;/h3&gt; 
&lt;p&gt;Create n variations of an image.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.images.variations(parameters: { image: &quot;image.png&quot;, n: 2 })
puts response.dig(&quot;data&quot;, 0, &quot;url&quot;)
# =&amp;gt; &quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/TWJLP2y/img-miu-Wk-Nl0-QNy-Xtj-Lerc3c0l-NW.png&quot; alt=&quot;Ruby&quot;&gt; &lt;img src=&quot;https://i.ibb.co/ScBhDGB/img-a9-Be-Rz-Au-Xwd-AV0-ERLUTSTGdi.png&quot; alt=&quot;Ruby&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Moderations&lt;/h3&gt; 
&lt;p&gt;Pass a string to check if it violates OpenAI&#39;s Content Policy:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.moderations(parameters: { input: &quot;I&#39;m worried about that.&quot; })
puts response.dig(&quot;results&quot;, 0, &quot;category_scores&quot;, &quot;hate&quot;)
# =&amp;gt; 5.505014632944949e-05
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Whisper&lt;/h3&gt; 
&lt;p&gt;Whisper is a speech to text model that can be used to generate text based on audio files:&lt;/p&gt; 
&lt;h4&gt;Translate&lt;/h4&gt; 
&lt;p&gt;The translations API takes as input the audio file in any of the supported languages and transcribes the audio into English.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.audio.translate(
  parameters: {
    model: &quot;whisper-1&quot;,
    file: File.open(&quot;path_to_file&quot;, &quot;rb&quot;),
  }
)
puts response[&quot;text&quot;]
# =&amp;gt; &quot;Translation of the text&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Transcribe&lt;/h4&gt; 
&lt;p&gt;The transcriptions API takes as input the audio file you want to transcribe and returns the text in the desired output file format.&lt;/p&gt; 
&lt;p&gt;You can pass the language of the audio file to improve transcription quality. Supported languages are listed &lt;a href=&quot;https://github.com/openai/whisper#available-models-and-languages&quot;&gt;here&lt;/a&gt;. You need to provide the language as an ISO-639-1 code, eg. &quot;en&quot; for English or &quot;ne&quot; for Nepali. You can look up the codes &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.audio.transcribe(
  parameters: {
    model: &quot;whisper-1&quot;,
    file: File.open(&quot;path_to_file&quot;, &quot;rb&quot;),
    language: &quot;en&quot;, # Optional
  }
)
puts response[&quot;text&quot;]
# =&amp;gt; &quot;Transcription of the text&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Speech&lt;/h4&gt; 
&lt;p&gt;The speech API takes as input the text and a voice and returns the content of an audio file you can listen to.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response = client.audio.speech(
  parameters: {
    model: &quot;tts-1&quot;,
    input: &quot;This is a speech test!&quot;,
    voice: &quot;alloy&quot;,
    response_format: &quot;mp3&quot;, # Optional
    speed: 1.0, # Optional
  }
)
File.binwrite(&#39;demo.mp3&#39;, response)
# =&amp;gt; mp3 file that plays: &quot;This is a speech test!&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;The Usage API provides information about the cost of various OpenAI services within your organization. To use Admin APIs like Usage, you need to set an OPENAI_ADMIN_TOKEN, which can be generated &lt;a href=&quot;https://platform.openai.com/settings/organization/admin-keys&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;OpenAI.configure do |config|
  config.admin_token = ENV.fetch(&quot;OPENAI_ADMIN_TOKEN&quot;)
end

# or

client = OpenAI::Client.new(admin_token: &quot;123abc&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can retrieve usage data for different endpoints and time periods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;one_day_ago = Time.now.to_i - 86_400

# Retrieve costs data
response = client.usage.costs(parameters: { start_time: one_day_ago })
response[&quot;data&quot;].each do |bucket|
  bucket[&quot;results&quot;].each do |result|
    puts &quot;#{Time.at(bucket[&quot;start_time&quot;]).to_date}: $#{result.dig(&quot;amount&quot;, &quot;value&quot;).round(2)}&quot;
  end
end
=&amp;gt; 2025-02-09: $0.0
=&amp;gt; 2025-02-10: $0.42

# Retrieve completions usage data
response = client.usage.completions(parameters: { start_time: one_day_ago })
puts response[&quot;data&quot;]

# Retrieve embeddings usage data
response = client.usage.embeddings(parameters: { start_time: one_day_ago })
puts response[&quot;data&quot;]

# Retrieve moderations usage data
response = client.usage.moderations(parameters: { start_time: one_day_ago })
puts response[&quot;data&quot;]

# Retrieve image generation usage data
response = client.usage.images(parameters: { start_time: one_day_ago })
puts response[&quot;data&quot;]

# Retrieve audio speech usage data
response = client.usage.audio_speeches(parameters: { start_time: one_day_ago })
puts response[&quot;data&quot;]

# Retrieve audio transcription usage data
response = client.usage.audio_transcriptions(parameters: { start_time: one_day_ago })
puts response[&quot;data&quot;]

# Retrieve vector stores usage data
response = client.usage.vector_stores(parameters: { start_time: one_day_ago })
puts response[&quot;data&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Errors&lt;/h3&gt; 
&lt;p&gt;HTTP errors can be caught like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;begin
  OpenAI::Client.new.models.retrieve(id: &quot;gpt-4o&quot;)
rescue Faraday::Error =&amp;gt; e
  raise &quot;Got a Faraday error: #{e}&quot;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. You can run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; 
&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To run all tests, execute the command &lt;code&gt;bundle exec rake&lt;/code&gt;, which will also run the linter (Rubocop). This repository uses &lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;VCR&lt;/a&gt; to log API requests.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If you have an &lt;code&gt;OPENAI_ACCESS_TOKEN&lt;/code&gt; and &lt;code&gt;OPENAI_ADMIN_TOKEN&lt;/code&gt; in your &lt;code&gt;ENV&lt;/code&gt;, running the specs will hit the actual API, which will be slow and cost you money - 2 cents or more! Remove them from your environment with &lt;code&gt;unset&lt;/code&gt; or similar if you just want to run the specs against the stored VCR responses.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;To check for deprecations&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;bundle exec ruby -e &quot;Warning[:deprecated] = true; require &#39;rspec&#39;; exit RSpec::Core::Runner.run([&#39;spec/openai/client/http_spec.rb:25&#39;])&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Release&lt;/h2&gt; 
&lt;p&gt;First run the specs without VCR so they actually hit the API. This will cost 2 cents or more. Set OPENAI_ACCESS_TOKEN and OPENAI_ADMIN_TOKEN in your environment.&lt;/p&gt; 
&lt;p&gt;Then update the version number in &lt;code&gt;version.rb&lt;/code&gt;, update &lt;code&gt;CHANGELOG.md&lt;/code&gt;, run &lt;code&gt;bundle install&lt;/code&gt; to update Gemfile.lock, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&quot;https://rubygems.org&quot;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&quot;https://github.com/alexrudall/ruby-openai&quot;&gt;https://github.com/alexrudall/ruby-openai&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&quot;https://github.com/alexrudall/ruby-openai/raw/main/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Everyone interacting in the Ruby OpenAI project&#39;s codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&quot;https://github.com/alexrudall/ruby-openai/raw/main/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
