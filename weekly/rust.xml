<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Rust Weekly Trending</title>
    <description>Weekly Trending of Rust in GitHub</description>
    <pubDate>Sun, 16 Mar 2025 01:52:59 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/zed-industries/zed/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href=&quot;https://github.com/atom/atom&quot;&gt;Atom&lt;/a&gt; and &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter&quot;&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;a href=&quot;https://repology.org/project/zed-editor/versions&quot;&gt; &lt;img src=&quot;https://repology.org/badge/vertical-allrepos/zed-editor.svg?minversion=0.143.5&quot; alt=&quot;Packaging status&quot; align=&quot;right&quot;&gt; &lt;/a&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href=&quot;https://zed.dev/download&quot;&gt;download Zed directly&lt;/a&gt; or &lt;a href=&quot;https://zed.dev/docs/linux#installing-via-a-package-manager&quot;&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href=&quot;https://github.com/zed-industries/zed/issues/5394&quot;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href=&quot;https://github.com/zed-industries/zed/issues/5396&quot;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md&quot;&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md&quot;&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md&quot;&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md&quot;&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we&#39;re hiring! Check out our &lt;a href=&quot;https://zed.dev/jobs&quot;&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://github.com/EmbarkStudios/cargo-about&quot;&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you&#39;ve created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate&#39;s Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license&#39;s requirements. If you&#39;re unsure, ask a lawyer. Once you&#39;ve verified that this system is acceptable add the license&#39;s SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href=&quot;https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration&quot;&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>YaLTeR/niri</title>
      <link>https://github.com/YaLTeR/niri</link>
      <description>&lt;p&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;niri&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://matrix.to/#/%23niri:matrix.org&quot;&gt;&lt;img alt=&quot;Matrix&quot; src=&quot;https://img.shields.io/badge/matrix-%23niri-blue?logo=matrix&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/YaLTeR/niri/raw/main/LICENSE&quot;&gt;&lt;img alt=&quot;GitHub License&quot; src=&quot;https://img.shields.io/github/license/YaLTeR/niri&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/YaLTeR/niri/releases&quot;&gt;&lt;img alt=&quot;GitHub Release&quot; src=&quot;https://img.shields.io/github/v/release/YaLTeR/niri?logo=github&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Getting-Started&quot;&gt;Getting Started&lt;/a&gt; | &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Configuration:-Overview&quot;&gt;Configuration&lt;/a&gt; | &lt;a href=&quot;https://github.com/YaLTeR/niri/discussions/325&quot;&gt;Setup&amp;nbsp;Showcase&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d142e57d-a25d-4ddb-ab46-311417458211&quot; alt=&quot;niri with a few windows open&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Windows are arranged in columns on an infinite strip going to the right. Opening a new window never causes existing windows to resize.&lt;/p&gt; 
&lt;p&gt;Every monitor has its own separate window strip. Windows can never &quot;overflow&quot; onto an adjacent monitor.&lt;/p&gt; 
&lt;p&gt;Workspaces are dynamic and arranged vertically. Every monitor has an independent set of workspaces, and there&#39;s always one empty workspace present all the way down.&lt;/p&gt; 
&lt;p&gt;The workspace arrangement is preserved across disconnecting and connecting monitors where it makes sense. When a monitor disconnects, its workspaces will move to another monitor, but upon reconnection they will move back to the original monitor.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built from the ground up for scrollable tiling&lt;/li&gt; 
 &lt;li&gt;Dynamic workspaces like in GNOME&lt;/li&gt; 
 &lt;li&gt;Built-in screenshot UI&lt;/li&gt; 
 &lt;li&gt;Monitor and window screencasting through xdg-desktop-portal-gnome 
  &lt;ul&gt; 
   &lt;li&gt;You can &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules#block-out-from&quot;&gt;block out&lt;/a&gt; sensitive windows from screencasts&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/946a910e-9bec-4cd1-a923-4a9421707515&quot;&gt;Touchpad&lt;/a&gt; and &lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/8464e65d-4bf2-44fa-8c8e-5883355bd000&quot;&gt;mouse&lt;/a&gt; gestures&lt;/li&gt; 
 &lt;li&gt;Group windows into &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Tabs&quot;&gt;tabs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Configurable layout: gaps, borders, struts, window sizes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Configuration:-Layout#gradients&quot;&gt;Gradient borders&lt;/a&gt; with Oklab and Oklch support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/ce178da2-af9e-4c51-876f-8709c241d95e&quot;&gt;Animations&lt;/a&gt; with support for &lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/27a238d6-0a22-4692-b794-30dc7a626fad&quot;&gt;custom shaders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Live-reloading config&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Video Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&quot;&gt;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Niri is stable for day-to-day use and does most things expected of a Wayland compositor. Many people are daily-driving niri, and are happy to help in our &lt;a href=&quot;https://matrix.to/#/%23niri:matrix.org&quot;&gt;Matrix channel&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Give it a try! Follow the instructions on the &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Getting-Started&quot;&gt;Getting Started&lt;/a&gt; wiki page. Have your &lt;a href=&quot;https://github.com/Alexays/Waybar&quot;&gt;waybar&lt;/a&gt;s and &lt;a href=&quot;https://codeberg.org/dnkl/fuzzel&quot;&gt;fuzzel&lt;/a&gt;s ready: niri is not a complete desktop environment.&lt;/p&gt; 
&lt;p&gt;Here are some points you may have questions about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-monitor&lt;/strong&gt;: yes, a core part of the design from the very start. Mixed DPI works.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fractional scaling&lt;/strong&gt;: yes, plus all niri UI stays pixel-perfect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;: seems to work fine.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Floating windows&lt;/strong&gt;: yes, starting from niri 25.01.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Input devices&lt;/strong&gt;: niri supports tablets, touchpads, and touchscreens. You can map the tablet to a specific monitor, or use &lt;a href=&quot;https://opentabletdriver.net/&quot;&gt;OpenTabletDriver&lt;/a&gt;. We have touchpad gestures, but no touchscreen gestures yet.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Wlr protocols&lt;/strong&gt;: yes, we have most of the important ones like layer-shell, gamma-control, screencopy. You can check on &lt;a href=&quot;https://wayland.app&quot;&gt;wayland.app&lt;/a&gt; at the bottom of each protocol&#39;s page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: while I run niri on beefy machines, I try to stay conscious of performance. I&#39;ve seen someone use it fine on an Eee&amp;nbsp;PC&amp;nbsp;900 from&amp;nbsp;2008, of all things.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xwayland&lt;/strong&gt;: no built-in support, but xwayland-satellite is &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Xwayland#using-xwayland-satellite&quot;&gt;easy to set up&lt;/a&gt; and works very well. 
  &lt;ul&gt; 
   &lt;li&gt;Steam and games, including Proton: work perfectly through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;JetBrains IDEs, Ghidra: work well through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;Discord and other Electron apps: work well through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;Chromium and VSCode: work perfectly natively on Wayland with the right flags.&lt;/li&gt; 
   &lt;li&gt;X11 apps that want to position windows or bars at specific screen coordinates: won&#39;t work well; you can run them in a nested compositor like &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Xwayland#using-the-labwc-wayland-compositor&quot;&gt;labwc&lt;/a&gt; or &lt;a href=&quot;https://github.com/YaLTeR/niri/wiki/Xwayland#directly-running-xwayland-in-rootful-mode&quot;&gt;rootful Xwayland&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Display scaling (integer or fractional) will make X11 apps look blurry; this needs to be supported in xwayland-satellite. For games, you can run them in &lt;a href=&quot;https://github.com/ValveSoftware/gamescope&quot;&gt;gamescope&lt;/a&gt; at native resolution, even with display scaling.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;Niri is heavily inspired by &lt;a href=&quot;https://github.com/paperwm/PaperWM&quot;&gt;PaperWM&lt;/a&gt; which implements scrollable tiling on top of GNOME Shell.&lt;/p&gt; 
&lt;p&gt;One of the reasons that prompted me to try writing my own compositor is being able to properly separate the monitors. Being a GNOME Shell extension, PaperWM has to work against Shell&#39;s global window coordinate space to prevent windows from overflowing.&lt;/p&gt; 
&lt;h2&gt;Tile Scrollably Elsewhere&lt;/h2&gt; 
&lt;p&gt;Here are some other projects which implement a similar workflow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/paperwm/PaperWM&quot;&gt;PaperWM&lt;/a&gt;: scrollable tiling on top of GNOME Shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterfajdiga/karousel&quot;&gt;karousel&lt;/a&gt;: scrollable tiling on top of KDE.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spwhitton.name/tech/code/papersway/&quot;&gt;papersway&lt;/a&gt;: scrollable tiling on top of sway/i3.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dawsers/hyprscroller&quot;&gt;hyprscroller&lt;/a&gt; and &lt;a href=&quot;https://gitlab.com/magus/hyprslidr&quot;&gt;hyprslidr&lt;/a&gt;: scrollable tiling on top of Hyprland.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mogenson/PaperWM.spoon&quot;&gt;PaperWM.spoon&lt;/a&gt;: scrollable tiling on top of macOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;We have a Matrix chat, feel free to join and ask a question: &lt;a href=&quot;https://matrix.to/#/%23niri:matrix.org&quot;&gt;https://matrix.to/#/#niri:matrix.org&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ast-grep/ast-grep</title>
      <link>https://github.com/ast-grep/ast-grep</link>
      <description>&lt;p&gt;⚡A CLI tool for code structural search, lint and rewriting. Written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://ast-grep.github.io/logo.svg?sanitize=true&quot; alt=&quot;ast-grep&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/ast-grep/ast-grep/actions/workflows/coverage.yaml/badge.svg?sanitize=true&quot; alt=&quot;coverage badge&quot;&gt; &lt;a href=&quot;https://app.codecov.io/gh/ast-grep/ast-grep&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ast-grep/ast-grep/branch/main/graph/badge.svg?token=37VX8H2EWV&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/4YZjf6htSQ&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Discord&quot; src=&quot;https://img.shields.io/discord/1107749847722889217?label=Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://repology.org/project/ast-grep/versions&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Repology&quot; src=&quot;https://repology.org/badge/tiny-repos/ast-grep.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/ast-grep/ast-grep?style=social&quot; alt=&quot;Badge&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/forks/ast-grep/ast-grep?style=social&quot; alt=&quot;Badge&quot;&gt; &lt;img alt=&quot;GitHub Sponsors&quot; src=&quot;https://img.shields.io/github/sponsors/HerringtonDarkholme?style=social&quot;&gt; &lt;a href=&quot;https://gurubase.io/g/ast-grep&quot;&gt;&lt;img alt=&quot;Gurubase&quot; src=&quot;https://img.shields.io/badge/Gurubase-Ask%20ast--grep%20Guru-006BFF&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;ast-grep(sg)&lt;/h2&gt; 
&lt;p&gt;ast-grep(sg) is a CLI tool for code structural search, lint, and rewriting.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;ast-grep is an &lt;a href=&quot;https://dev.to/balapriya/abstract-syntax-tree-ast-explained-in-plain-english-1h38&quot;&gt;abstract syntax tree&lt;/a&gt; based tool to search code by pattern code. Think of it as your old-friend &lt;a href=&quot;https://en.wikipedia.org/wiki/Grep#:~:text=grep%20is%20a%20command%2Dline,which%20has%20the%20same%20effect.&quot;&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/a&gt;, but matching AST nodes instead of text. You can write patterns as if you are writing ordinary code. It will match all code that has the same syntactical structure. You can use &lt;code&gt;$&lt;/code&gt; sign + upper case letters as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Wildcard_character&quot;&gt;wildcard&lt;/a&gt;, e.g. &lt;code&gt;$MATCH&lt;/code&gt;, to match any single AST node. Think of it as &lt;a href=&quot;https://regexone.com/lesson/wildcards_dot&quot;&gt;regular expression dot&lt;/a&gt; &lt;code&gt;.&lt;/code&gt;, except it is not textual.&lt;/p&gt; 
&lt;p&gt;Try the &lt;a href=&quot;https://ast-grep.github.io/playground.html&quot;&gt;online playground&lt;/a&gt; for a taste!&lt;/p&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://ast-grep.github.io/image/search-replace.png&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;See more screenshots on the &lt;a href=&quot;https://ast-grep.github.io/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can install it from &lt;a href=&quot;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&quot;&gt;npm&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/&quot;&gt;pip&lt;/a&gt;, &lt;a href=&quot;https://doc.rust-lang.org/cargo/getting-started/installation.html&quot;&gt;cargo&lt;/a&gt;, &lt;a href=&quot;https://github.com/cargo-bins/cargo-binstall&quot;&gt;cargo-binstall&lt;/a&gt;, &lt;a href=&quot;https://brew.sh/&quot;&gt;homebrew&lt;/a&gt;, &lt;a href=&quot;https://scoop.sh/&quot;&gt;scoop&lt;/a&gt; or &lt;a href=&quot;https://www.macports.org&quot;&gt;MacPorts&lt;/a&gt;!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --global @ast-grep/cli
pip install ast-grep-cli
brew install ast-grep
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for more installation methods&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo install ast-grep --locked
cargo binstall ast-grep

# install via scoop, thank @brian6932
scoop install main/ast-grep

# install via MacPorts
sudo port install ast-grep

# try ast-grep in nix-shell
nix-shell -p ast-grep
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Or you can build ast-grep from source. You need to install rustup, clone the repository and then&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo install --path ./crates/cli --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/ast-grep/versions&quot;&gt;Packages&lt;/a&gt; are available on other platforms too.&lt;/p&gt; 
&lt;h2&gt;Command line usage example&lt;/h2&gt; 
&lt;p&gt;ast-grep has following form.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sg --pattern &#39;var code = $PATTERN&#39; --rewrite &#39;let code = new $PATTERN&#39; --lang ts
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/Hchan_mgn/status/1547061516993699841?s=20&amp;amp;t=ldDoj4U2nq-FRKQkU5GWXA&quot;&gt;Rewrite code in null coalescing operator&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sg -p &#39;$A &amp;amp;&amp;amp; $A()&#39; -l ts -r &#39;$A?.()&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/Hchan_mgn/status/1561802312846278657&quot;&gt;Rewrite&lt;/a&gt; &lt;a href=&quot;https://github.com/ecyrbe/zodios#migrate-to-v8&quot;&gt;Zodios&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sg -p &#39;new Zodios($URL,  $CONF as const,)&#39; -l ts -r &#39;new Zodios($URL, $CONF)&#39; -i
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/Hchan_mgn/status/1560108625460355073&quot;&gt;Implement eslint rule using YAML.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HerringtonDarkholme/sponsors/main/sponsorkit/sponsors.svg?sanitize=true&quot; alt=&quot;Sponsors&quot;&gt;&lt;/p&gt; 
&lt;p&gt;If you find ast-grep interesting and useful for your work, please &lt;a href=&quot;https://github.com/sponsors/HerringtonDarkholme&quot;&gt;buy me a coffee&lt;/a&gt; so I can spend more time on the project!&lt;/p&gt; 
&lt;h2&gt;Feature Highlight&lt;/h2&gt; 
&lt;p&gt;ast-grep&#39;s core is an algorithm to search and replace code based on abstract syntax tree produced by tree-sitter. It can help you to do lightweight static analysis and massive scale code manipulation in an intuitive way.&lt;/p&gt; 
&lt;p&gt;Key highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;An intuitive pattern to find and replace AST. ast-grep&#39;s pattern looks like ordinary code you would write every day (you could say the pattern is isomorphic to code).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;jQuery like API for AST traversal and manipulation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;YAML configuration to write new linting rules or code modification.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Written in compiled language, with tree-sitter based parsing and utilizing multiple cores.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Beautiful command line interface :)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ast-grep&#39;s vision is to democratize abstract syntax tree magic and to liberate one from cumbersome AST programming!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are an open-source library author, ast-grep can help your library users adopt breaking changes more easily.&lt;/li&gt; 
 &lt;li&gt;if you are a tech lead in your team, ast-grep can help you enforce code best practice tailored to your business need.&lt;/li&gt; 
 &lt;li&gt;If you are a security researcher, ast-grep can help you write rules much faster.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>clockworklabs/SpacetimeDB</title>
      <link>https://github.com/clockworklabs/SpacetimeDB</link>
      <description>&lt;p&gt;Multiplayer at the speed of light&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://spacetimedb.com#gh-dark-mode-only&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;320&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo.svg?sanitize=true&quot; alt=&quot;SpacetimeDB Logo&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://spacetimedb.com#gh-light-mode-only&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;320&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo.svg?sanitize=true&quot; alt=&quot;SpacetimeDB Logo&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://spacetimedb.com#gh-dark-mode-only&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;250&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo-text.svg?sanitize=true&quot; alt=&quot;SpacetimeDB&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://spacetimedb.com#gh-light-mode-only&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;250&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo-text.svg?sanitize=true&quot; alt=&quot;SpacetimeDB&quot;&gt; &lt;/a&gt; &lt;/p&gt;
&lt;h3 align=&quot;center&quot;&gt; Multiplayer at the speed of light. &lt;/h3&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/clockworklabs/spacetimedb&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/clockworklabs/spacetimedb?color=%23ff00a0&amp;amp;include_prereleases&amp;amp;label=version&amp;amp;sort=semver&amp;amp;style=flat-square&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/clockworklabs/spacetimedb&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/built_with-Rust-dca282.svg?style=flat-square&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/clockworklabs/spacetimedb/actions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/clockworklabs/spacetimedb/ci.yml?style=flat-square&amp;amp;branch=master&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://status.spacetimedb.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/uptimerobot/ratio/7/m784409192-e472ca350bb615372ededed7?label=cloud%20uptime&amp;amp;style=flat-square&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://hub.docker.com/r/clockworklabs/spacetimedb&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/clockworklabs/spacetimedb?style=flat-square&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/clockworklabs/spacetimedb/raw/master/LICENSE.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-BSL_1.1-00bfff.svg?style=flat-square&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://crates.io/crates/spacetimedb&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/d/spacetimedb?color=e45928&amp;amp;label=Rust%20Crate&amp;amp;style=flat-square&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://www.nuget.org/packages/SpacetimeDB.Runtime&quot;&gt;&lt;img src=&quot;https://img.shields.io/nuget/dt/spacetimedb.runtime?color=0b6cff&amp;amp;label=NuGet%20Package&amp;amp;style=flat-square&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://discord.gg/spacetimedb&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1037340874172014652?label=discord&amp;amp;style=flat-square&amp;amp;color=5a66f6&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://twitter.com/spacetime_db&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/twitter-Follow_us-1d9bf0.svg?style=flat-square&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://clockworklabs.io/join&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/careers-Join_us-86f7b7.svg?style=flat-square&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://www.linkedin.com/company/clockworklabs/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/linkedin-Connect_with_us-0a66c2.svg?style=flat-square&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://discord.gg/spacetimedb&quot;&gt;&lt;img height=&quot;25&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/discord.svg?sanitize=true&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://twitter.com/spacetime_db&quot;&gt;&lt;img height=&quot;25&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitter.svg?sanitize=true&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/clockworklabs/spacetimedb&quot;&gt;&lt;img height=&quot;25&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/github.svg?sanitize=true&quot; alt=&quot;Github&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://twitch.tv/SpacetimeDB&quot;&gt;&lt;img height=&quot;25&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitch.svg?sanitize=true&quot; alt=&quot;Twitch&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://youtube.com/@SpacetimeDB&quot;&gt;&lt;img height=&quot;25&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/youtube.svg?sanitize=true&quot; alt=&quot;YouTube&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://www.linkedin.com/company/clockwork-labs/&quot;&gt;&lt;img height=&quot;25&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/linkedin.svg?sanitize=true&quot; alt=&quot;LinkedIn&quot;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spacetimedb&quot;&gt;&lt;img height=&quot;25&quot; src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/stackoverflow.svg?sanitize=true&quot; alt=&quot;StackOverflow&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;What is &lt;a href=&quot;https://spacetimedb.com&quot;&gt;SpacetimeDB&lt;/a&gt;?&lt;/h2&gt; 
&lt;p&gt;You can think of SpacetimeDB as both a database and server combined into one.&lt;/p&gt; 
&lt;p&gt;It is a relational database system that lets you upload your application logic directly into the database by way of fancy stored procedures called &quot;modules.&quot;&lt;/p&gt; 
&lt;p&gt;Instead of deploying a web or game server that sits in between your clients and your database, your clients connect directly to the database and execute your application logic inside the database itself. You can write all of your permission and authorization logic right inside your module just as you would in a normal server.&lt;/p&gt; 
&lt;p&gt;This means that you can write your entire application in a single language, Rust, and deploy it as a single binary. No more microservices, no more containers, no more Kubernetes, no more Docker, no more VMs, no more DevOps, no more infrastructure, no more ops, no more servers.&lt;/p&gt; 
&lt;figure&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/basic-architecture-diagram.png&quot; alt=&quot;SpacetimeDB Architecture&quot; style=&quot;width:100%&quot;&gt; 
 &lt;figcaption align=&quot;center&quot;&gt; 
  &lt;p align=&quot;center&quot;&gt;&lt;b&gt;SpacetimeDB application architecture&lt;/b&gt;&lt;br&gt;&lt;sup&gt;&lt;sub&gt;(elements in white are provided by SpacetimeDB)&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; 
 &lt;/figcaption&gt; 
&lt;/figure&gt; 
&lt;p&gt;It&#39;s actually similar to the idea of smart contracts, except that SpacetimeDB is a database, has nothing to do with blockchain, and is orders of magnitude faster than any smart contract system.&lt;/p&gt; 
&lt;p&gt;So fast, in fact, that the entire backend of our MMORPG &lt;a href=&quot;https://bitcraftonline.com&quot;&gt;BitCraft Online&lt;/a&gt; is just a SpacetimeDB module. We don&#39;t have any other servers or services running, which means that everything in the game, all of the chat messages, items, resources, terrain, and even the locations of the players are stored and processed by the database before being synchronized out to all of the clients in real-time.&lt;/p&gt; 
&lt;p&gt;SpacetimeDB is optimized for maximum speed and minimum latency rather than batch processing or OLAP workloads. It is designed to be used for real-time applications like games, chat, and collaboration tools.&lt;/p&gt; 
&lt;p&gt;This speed and latency is achieved by holding all of application state in memory, while persisting the data in a write-ahead-log (WAL) which is used to recover application state.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can run SpacetimeDB as a standalone database server via the &lt;code&gt;spacetime&lt;/code&gt; CLI tool. Install instructions for supported platforms are outlined below. The same install instructions can be found on our website at &lt;a href=&quot;https://spacetimedb.com/install&quot;&gt;https://spacetimedb.com/install&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Install on macOS&lt;/h4&gt; 
&lt;p&gt;Installing on macOS is as simple as running our install script. After that you can use the spacetime command to manage versions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -sSf https://install.spacetimedb.com | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install on Linux&lt;/h4&gt; 
&lt;p&gt;Installing on Linux is as simple as running our install script. After that you can use the spacetime command to manage versions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -sSf https://install.spacetimedb.com | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install on Windows&lt;/h4&gt; 
&lt;p&gt;Installing on Windows is as simple as pasting the above snippet into PowerShell. If you would like to use WSL instead, please follow the Linux install instructions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ps1&quot;&gt;iwr https://windows.spacetimedb.com -useb | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing from Source&lt;/h4&gt; 
&lt;p&gt;A quick note on installing from source: we recommend that you don&#39;t install from source unless there is a feature that is available in &lt;code&gt;master&lt;/code&gt; that hasn&#39;t been released yet, otherwise follow the official installation instructions.&lt;/p&gt; 
&lt;h5&gt;MacOS + Linux&lt;/h5&gt; 
&lt;p&gt;Installing on macOS + Linux is pretty straightforward. First we are going to build all of the binaries that we need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install rustup, you can skip this step if you have cargo and the wasm32-unknown-unknown target already installed.
curl https://sh.rustup.rs -sSf | sh
# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB
# Build and install the CLI
cd SpacetimeDB
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
mkdir -p ~/.local/bin
export STDB_VERSION=&quot;$(./target/release/spacetimedb-cli --version | sed -n &#39;s/.*spacetimedb tool version \([0-9.]*\);.*/\1/p&#39;)&quot;
mkdir -p ~/.local/share/spacetime/bin/$STDB_VERSION

# Install the update binary
cp target/release/spacetimedb-update ~/.local/bin/spacetime
cp target/release/spacetimedb-cli ~/.local/share/spacetime/bin/$STDB_VERSION
cp target/release/spacetimedb-standalone ~/.local/share/spacetime/bin/$STDB_VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this stage you&#39;ll need to add ~/.local/bin to your path if you haven&#39;t already.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Please add the following line to your shell configuration and open a new shell session:
export PATH=&quot;$HOME/.local/bin:$PATH&quot;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then finally set your SpacetimeDB version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
# Then, in a new shell, set the current version:
spacetime version use $STDB_VERSION

# If STDB_VERSION is not set anymore then you can use the following command to list your versions:
spacetime version list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Windows&lt;/h5&gt; 
&lt;p&gt;Building on windows is a bit more complicated. You&#39;ll need a slightly different version of perl compared to what comes pre-bundled in most Windows terminals. We recommend &lt;a href=&quot;https://strawberryperl.com/&quot;&gt;Strawberry Perl&lt;/a&gt;. You may also need access to an &lt;code&gt;openssl&lt;/code&gt; binary which actually comes pre-installed with &lt;a href=&quot;https://git-scm.com/downloads/win&quot;&gt;Git for Windows&lt;/a&gt;. Also, you&#39;ll need to install &lt;a href=&quot;https://rustup.rs/&quot;&gt;rustup&lt;/a&gt; for Windows.&lt;/p&gt; 
&lt;p&gt;In a Git for Windows shell you should have something that looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ which perl
/c/Strawberry/perl/bin/perl
$ which openssl
/mingw64/bin/openssl
$ which cargo 
/c/Users/&amp;lt;user&amp;gt;/.cargo/bin/cargo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If that looks correct then you&#39;re ready to proceed!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB

# Build and install the CLI
cd SpacetimeDB
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
$stdbDir = &quot;$HOME\AppData\Local\SpacetimeDB&quot;
$stdbVersion = &amp;amp; &quot;.\target\release\spacetimedb-cli&quot; --version | Select-String -Pattern &#39;spacetimedb tool version ([0-9.]+);&#39; | ForEach-Object { $_.Matches.Groups[1].Value }
New-Item -ItemType Directory -Path &quot;$stdbDir\bin\$stdbVersion&quot; -Force | Out-Null

# Install the update binary
Copy-Item &quot;target\release\spacetimedb-update.exe&quot; &quot;$stdbDir\spacetime.exe&quot;
Copy-Item &quot;target\release\spacetimedb-cli.exe&quot; &quot;$stdbDir\bin\$stdbVersion\&quot;
Copy-Item &quot;target\release\spacetimedb-standalone.exe&quot; &quot;$stdbDir\bin\$stdbVersion\&quot;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now add the directory we just created to your path. We recommend adding it to the system path because then it will be available to all of your applications (including Unity3D). After you do this, restart your shell!&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;%USERPROFILE%\AppData\Local\SpacetimeDB
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then finally, open a new shell and use the installed SpacetimeDB version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;spacetime version use $stdbVersion

# If stdbVersion is no longer set, list versions using the following command:
spacetime version list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you&#39;re using Git for Windows you can follow these instructions instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Clone SpacetimeDB
git clone https://github.com/clockworklabs/SpacetimeDB
# Build and install the CLI
cd SpacetimeDB
# Build the CLI binaries - this takes a while on windows so go grab a coffee :)
cargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli

# Create directories
export STDB_VERSION=&quot;$(./target/release/spacetimedb-cli --version | sed -n &#39;s/.*spacetimedb tool version \([0-9.]*\);.*/\1/p&#39;)&quot;
mkdir -p ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION

# Install the update binary
cp target/release/spacetimedb-update ~/AppData/Local/SpacetimeDB/spacetime
cp target/release/spacetimedb-cli ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION
cp target/release/spacetimedb-standalone ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION

# Now add the directory we just created to your path. We recommend adding it to the system path because then it will be available to all of your applications (including Unity3D). After you do this, restart your shell!
# %USERPROFILE%\AppData\Local\SpacetimeDB

# Set the current version
spacetime version use $STDB_VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify that the correct version has been installed via &lt;code&gt;spacetime --version&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Running with Docker&lt;/h4&gt; 
&lt;p&gt;If you prefer to run Spacetime in a container, you can use the following command to start a new instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm --pull always -p 3000:3000 clockworklabs/spacetime start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For more information about SpacetimeDB, getting started guides, game development guides, and reference material please see our &lt;a href=&quot;https://spacetimedb.com/docs&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We&#39;ve prepared several getting started guides in each of our supported languages to help you get up and running with SpacetimeDB as quickly as possible. You can find them on our &lt;a href=&quot;https://spacetimedb.com/docs&quot;&gt;docs page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In summary there are only 4 steps to getting started with SpacetimeDB.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the &lt;code&gt;spacetime&lt;/code&gt; CLI tool.&lt;/li&gt; 
 &lt;li&gt;Start a SpacetimeDB standalone node with &lt;code&gt;spacetime start&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Write and upload a module in one of our supported module languages.&lt;/li&gt; 
 &lt;li&gt;Connect to the database with one of our client libraries.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can see a summary of the supported languages below with a link to the getting started guide for each.&lt;/p&gt; 
&lt;h2&gt;Language Support&lt;/h2&gt; 
&lt;p&gt;You can write SpacetimeDB modules in several popular languages, with more to come in the future!&lt;/p&gt; 
&lt;h4&gt;Serverside Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spacetimedb.com/docs/modules/rust/quickstart&quot;&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spacetimedb.com/docs/modules/c-sharp/quickstart&quot;&gt;C#&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Client Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spacetimedb.com/docs/sdks/rust/quickstart&quot;&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spacetimedb.com/docs/sdks/c-sharp/quickstart&quot;&gt;C#&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spacetimedb.com/docs/sdks/typescript/quickstart&quot;&gt;Typescript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SpacetimeDB is licensed under the BSL 1.1 license. This is not an open source or free software license, however, it converts to the AGPL v3.0 license with a linking exception after a few years.&lt;/p&gt; 
&lt;p&gt;Note that the AGPL v3.0 does not typically include a linking exception. We have added a custom linking exception to the AGPL license for SpacetimeDB. Our motivation for choosing a free software license is to ensure that contributions made to SpacetimeDB are propagated back to the community. We are expressly not interested in forcing users of SpacetimeDB to open source their own code if they link with SpacetimeDB, so we needed to include a linking exception.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ankitects/anki</title>
      <link>https://github.com/ankitects/anki</link>
      <description>&lt;p&gt;Anki&#39;s shared backend and web components, and the Qt frontend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anki&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://buildkite.com/ankitects/anki-ci&quot;&gt;&lt;img src=&quot;https://badge.buildkite.com/c9edf020a4aec976f9835e54751cc5409d843adbb66d043bd3.svg?branch=main&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo contains the source code for the computer version of &lt;a href=&quot;https://apps.ankiweb.net&quot;&gt;Anki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;Anki is a spaced repetition program. Please see the &lt;a href=&quot;https://apps.ankiweb.net&quot;&gt;website&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;h3&gt;Anki Betas&lt;/h3&gt; 
&lt;p&gt;If you&#39;d like to try development builds of Anki but don&#39;t feel comfortable building the code, please see &lt;a href=&quot;https://betas.ankiweb.net/&quot;&gt;Anki betas&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Developing&lt;/h3&gt; 
&lt;p&gt;For more information on building and developing, please see &lt;a href=&quot;https://raw.githubusercontent.com/ankitects/anki/main/docs/development.md&quot;&gt;Development&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Want to contribute to Anki? Check out the &lt;a href=&quot;https://raw.githubusercontent.com/ankitects/anki/main/docs/contributing.md&quot;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Anki Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ankitects/anki/main/CONTRIBUTORS&quot;&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Anki&#39;s license: &lt;a href=&quot;https://raw.githubusercontent.com/ankitects/anki/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>swc-project/swc</title>
      <link>https://github.com/swc-project/swc</link>
      <description>&lt;p&gt;Rust-based platform for the Web&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://swc.rs/&quot;&gt; &lt;img alt=&quot;swc&quot; src=&quot;https://raw.githubusercontent.com/swc-project/logo/master/swc.png&quot; width=&quot;546&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Make the web (development) faster. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.npmjs.com/package/@swc/core&quot;&gt; &lt;img alt=&quot;downloads (@swc/core)&quot; src=&quot;https://img.shields.io/npm/dm/@swc/core?label=downloads%20%28%40swc%2Fcore%29&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@swc/counter?activeTab=dependents&quot;&gt; &lt;img alt=&quot;downloads (3rd party)&quot; src=&quot;https://img.shields.io/npm/dm/@swc/counter?label=downloads%20%283rd%20party%29&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://crates.io/crates/swc_ecma_parser&quot;&gt; &lt;img alt=&quot;undefined&quot; src=&quot;https://img.shields.io/crates/d/swc_ecma_parser.svg?label=crates.io%20downloads&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/swc-project/swc/releases/latest&quot;&gt; &lt;img alt=&quot;GitHub release (latest SemVer)&quot; src=&quot;https://img.shields.io/github/v/release/swc-project/swc&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;GitHub code size in bytes&quot; src=&quot;https://img.shields.io/github/languages/code-size/swc-project/swc&quot;&gt; &lt;a href=&quot;https://github.com/swc-project/swc/raw/main/package.json#L22&quot;&gt; &lt;img alt=&quot;node-current (scoped)&quot; src=&quot;https://img.shields.io/node/v/@swc/core&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://discord.com/invite/GnHbXTdZz6&quot;&gt; &lt;img alt=&quot;Discord&quot; src=&quot;https://img.shields.io/discord/889779439272075314&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;SWC (stands for &lt;code&gt;Speedy Web Compiler&lt;/code&gt;) is a super-fast TypeScript / JavaScript compiler written in Rust. It&#39;s a library for Rust and JavaScript at the same time. If you are using SWC from Rust, see &lt;a href=&quot;https://rustdoc.swc.rs/swc/&quot;&gt;rustdoc&lt;/a&gt; and for most users, your entry point for using the library will be &lt;a href=&quot;https://rustdoc.swc.rs/swc_ecma_parser/&quot;&gt;parser&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Also, SWC tries to ensure that&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you select the latest version of each crates, it will work&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;for rust users.&lt;/p&gt; 
&lt;p&gt;MSRV of crates is currently &lt;code&gt;1.73&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To update all SWC crates you use, you can run &lt;code&gt;curl https://raw.githubusercontent.com/swc-project/swc/main/scripts/update-all-swc-crates.sh | bash -s&lt;/code&gt;. This script will update all dependencies to the latest version and run &lt;code&gt;cargo build&lt;/code&gt; to ensure that everything works. Note that you need&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cargo upgrade&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;command to run the script.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;If you are using SWC from JavaScript, please refer to &lt;a href=&quot;https://swc.rs/docs/installation/&quot;&gt;docs on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Check out the documentation &lt;a href=&quot;https://swc.rs/docs/installation/&quot;&gt;in the website&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://swc.rs/docs/migrating-from-babel&quot;&gt;comparison with babel&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Performance&lt;/h1&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://swc.rs/docs/benchmark-transform&quot;&gt;benchmark results&lt;/a&gt; on the website.&lt;/p&gt; 
&lt;h1&gt;Supporting development&lt;/h1&gt; 
&lt;h2 align=&quot;center&quot;&gt;Supporting swc&lt;/h2&gt; 
&lt;h2&gt;Powered by&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSourceSupport&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jetbrains.svg?sanitize=true&quot; alt=&quot;JetBrains logo.&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://opencollective.com/swc&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/swc-project/swc-sponsor-images/main/sponsors.svg?sanitize=true&quot; alt=&quot;Sponsors&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;SWC is a community-driven project, and is maintained by a group of &lt;a href=&quot;https://swc.rs/docs/team&quot;&gt;volunteers&lt;/a&gt;. If you&#39;d like to help support the future of the project, please consider:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Giving developer time on the project. (Message us on &lt;a href=&quot;https://discord.gg/GnHbXTdZz6&quot;&gt;Discord&lt;/a&gt; (preferred) or &lt;a href=&quot;https://github.com/swc-project/swc/discussions&quot;&gt;Github discussions&lt;/a&gt; for guidance!)&lt;/li&gt; 
 &lt;li&gt;Giving funds by becoming a sponsor (see &lt;a href=&quot;https://opencollective.com/swc&quot;&gt;https://opencollective.com/swc&lt;/a&gt;)!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/swc-project/swc/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;. You may also find the architecture documentation useful (&lt;a href=&quot;https://raw.githubusercontent.com/swc-project/swc/main/ARCHITECTURE.md&quot;&gt;ARCHITECTURE.md&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SWC is primarily distributed under the terms of the Apache License (Version 2.0).&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/swc-project/swc/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/ruff</title>
      <link>https://github.com/astral-sh/ruff</link>
      <description>&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruff&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/astral-sh/ruff&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&quot; alt=&quot;Ruff&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/ruff&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/ruff.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/astral-sh/ruff/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/l/ruff.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/ruff&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/ruff.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/astral-sh/ruff/actions&quot;&gt;&lt;img src=&quot;https://github.com/astral-sh/ruff/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;Actions status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.com/invite/astral-sh&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.astral.sh/ruff/&quot;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://play.ruff.rs/&quot;&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;picture align=&quot;center&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://user-images.githubusercontent.com/1309177/232603514-c95e9b0f-6b31-43de-9a80-9e844173fd6a.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg&quot;&gt; 
  &lt;img alt=&quot;Shows a bar chart with benchmark results.&quot; src=&quot;https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg?sanitize=true&quot;&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;i&gt;Linting the CPython codebase from scratch.&lt;/i&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚡️ 10-100x faster than existing linters (like Flake8) and formatters (like Black)&lt;/li&gt; 
 &lt;li&gt;🐍 Installable via &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;code&gt;pyproject.toml&lt;/code&gt; support&lt;/li&gt; 
 &lt;li&gt;🤝 Python 3.13 compatibility&lt;/li&gt; 
 &lt;li&gt;⚖️ Drop-in parity with &lt;a href=&quot;https://docs.astral.sh/ruff/faq/#how-does-ruffs-linter-compare-to-flake8&quot;&gt;Flake8&lt;/a&gt;, isort, and &lt;a href=&quot;https://docs.astral.sh/ruff/faq/#how-does-ruffs-formatter-compare-to-black&quot;&gt;Black&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📦 Built-in caching, to avoid re-analyzing unchanged files&lt;/li&gt; 
 &lt;li&gt;🔧 Fix support, for automatic error correction (e.g., automatically remove unused imports)&lt;/li&gt; 
 &lt;li&gt;📏 Over &lt;a href=&quot;https://docs.astral.sh/ruff/rules/&quot;&gt;800 built-in rules&lt;/a&gt;, with native re-implementations of popular Flake8 plugins, like flake8-bugbear&lt;/li&gt; 
 &lt;li&gt;⌨️ First-party &lt;a href=&quot;https://docs.astral.sh/ruff/integrations/&quot;&gt;editor integrations&lt;/a&gt; for &lt;a href=&quot;https://github.com/astral-sh/ruff-vscode&quot;&gt;VS Code&lt;/a&gt; and &lt;a href=&quot;https://docs.astral.sh/ruff/editors/setup&quot;&gt;more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌎 Monorepo-friendly, with &lt;a href=&quot;https://docs.astral.sh/ruff/configuration/#config-file-discovery&quot;&gt;hierarchical and cascading configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Ruff aims to be orders of magnitude faster than alternative tools while integrating more functionality behind a single, common interface.&lt;/p&gt; 
&lt;p&gt;Ruff can be used to replace &lt;a href=&quot;https://pypi.org/project/flake8/&quot;&gt;Flake8&lt;/a&gt; (plus dozens of plugins), &lt;a href=&quot;https://github.com/psf/black&quot;&gt;Black&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/isort/&quot;&gt;isort&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/pydocstyle/&quot;&gt;pydocstyle&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/pyupgrade/&quot;&gt;pyupgrade&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/autoflake/&quot;&gt;autoflake&lt;/a&gt;, and more, all while executing tens or hundreds of times faster than any individual tool.&lt;/p&gt; 
&lt;p&gt;Ruff is extremely actively developed and used in major open-source projects like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/airflow&quot;&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/superset&quot;&gt;Apache Superset&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tiangolo/fastapi&quot;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/huggingface/transformers&quot;&gt;Hugging Face&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pandas-dev/pandas&quot;&gt;Pandas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scipy/scipy&quot;&gt;SciPy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;...and &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff&quot;&gt;many more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is backed by &lt;a href=&quot;https://astral.sh&quot;&gt;Astral&lt;/a&gt;. Read the &lt;a href=&quot;https://astral.sh/blog/announcing-astral-the-company-behind-ruff&quot;&gt;launch post&lt;/a&gt;, or the original &lt;a href=&quot;https://notes.crmarsh.com/python-tooling-could-be-much-much-faster&quot;&gt;project announcement&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Testimonials&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tiangolo/status/1591912354882764802&quot;&gt;&lt;strong&gt;Sebastián Ramírez&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href=&quot;https://github.com/tiangolo/fastapi&quot;&gt;FastAPI&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it&#39;s actually running and checking the code.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/schrockn/status/1612615862904827904&quot;&gt;&lt;strong&gt;Nick Schrock&lt;/strong&gt;&lt;/a&gt;, founder of &lt;a href=&quot;https://www.elementl.com/&quot;&gt;Elementl&lt;/a&gt;, co-creator of &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On our largest module (dagster itself, 250k LOC) pylint takes about 2.5 minutes, parallelized across 4 cores on my M1. Running ruff against our &lt;em&gt;entire&lt;/em&gt; codebase takes .4 seconds.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/bokeh/bokeh/pull/12605&quot;&gt;&lt;strong&gt;Bryan Van de Ven&lt;/strong&gt;&lt;/a&gt;, co-creator of &lt;a href=&quot;https://github.com/bokeh/bokeh/&quot;&gt;Bokeh&lt;/a&gt;, original author of &lt;a href=&quot;https://docs.conda.io/en/latest/&quot;&gt;Conda&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of ~20s. This is an enormous quality of life improvement for local dev. It&#39;s fast enough that I added it as an actual commit hook, which is terrific.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/timothycrosley/status/1606420868514877440&quot;&gt;&lt;strong&gt;Timothy Crosley&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href=&quot;https://github.com/PyCQA/isort&quot;&gt;isort&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Just switched my first project to Ruff. Only one downside so far: it&#39;s so fast I couldn&#39;t believe it was working till I intentionally introduced some errors.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/astral-sh/ruff/issues/465#issuecomment-1317400028&quot;&gt;&lt;strong&gt;Tim Abbott&lt;/strong&gt;&lt;/a&gt;, lead developer of &lt;a href=&quot;https://github.com/zulip/zulip&quot;&gt;Zulip&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This is just ridiculously fast... &lt;code&gt;ruff&lt;/code&gt; is amazing.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- End section: Overview --&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;p&gt;For more, see the &lt;a href=&quot;https://docs.astral.sh/ruff/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#rules&quot;&gt;Rules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff&quot;&gt;Who&#39;s Using Ruff?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Getting Started&lt;a id=&quot;getting-started&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;For more, see the &lt;a href=&quot;https://docs.astral.sh/ruff/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Ruff is available as &lt;a href=&quot;https://pypi.org/project/ruff/&quot;&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/a&gt; on PyPI.&lt;/p&gt; 
&lt;p&gt;Invoke Ruff directly with &lt;a href=&quot;https://docs.astral.sh/uv/&quot;&gt;&lt;code&gt;uvx&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;uvx ruff check   # Lint all files in the current directory.
uvx ruff format  # Format all files in the current directory.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or install Ruff with &lt;code&gt;uv&lt;/code&gt; (recommended), &lt;code&gt;pip&lt;/code&gt;, or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# With uv.
uv tool install ruff@latest  # Install Ruff globally.
uv add --dev ruff            # Or add Ruff to your project.

# With pip.
pip install ruff

# With pipx.
pipx install ruff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Starting with version &lt;code&gt;0.5.0&lt;/code&gt;, Ruff can be installed with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/ruff/install.sh | sh

# On Windows.
powershell -c &quot;irm https://astral.sh/ruff/install.ps1 | iex&quot;

# For a specific version.
curl -LsSf https://astral.sh/ruff/0.11.0/install.sh | sh
powershell -c &quot;irm https://astral.sh/ruff/0.11.0/install.ps1 | iex&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install Ruff via &lt;a href=&quot;https://formulae.brew.sh/formula/ruff&quot;&gt;Homebrew&lt;/a&gt;, &lt;a href=&quot;https://anaconda.org/conda-forge/ruff&quot;&gt;Conda&lt;/a&gt;, and with &lt;a href=&quot;https://docs.astral.sh/ruff/installation/&quot;&gt;a variety of other package managers&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;To run Ruff as a linter, try any of the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ruff check                          # Lint all files in the current directory (and any subdirectories).
ruff check path/to/code/            # Lint all files in `/path/to/code` (and any subdirectories).
ruff check path/to/code/*.py        # Lint all `.py` files in `/path/to/code`.
ruff check path/to/code/to/file.py  # Lint `file.py`.
ruff check @arguments.txt           # Lint using an input file, treating its contents as newline-delimited command-line arguments.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, to run Ruff as a formatter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ruff format                          # Format all files in the current directory (and any subdirectories).
ruff format path/to/code/            # Format all files in `/path/to/code` (and any subdirectories).
ruff format path/to/code/*.py        # Format all `.py` files in `/path/to/code`.
ruff format path/to/code/to/file.py  # Format `file.py`.
ruff format @arguments.txt           # Format using an input file, treating its contents as newline-delimited command-line arguments.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ruff can also be used as a &lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt; hook via &lt;a href=&quot;https://github.com/astral-sh/ruff-pre-commit&quot;&gt;&lt;code&gt;ruff-pre-commit&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- repo: https://github.com/astral-sh/ruff-pre-commit
  # Ruff version.
  rev: v0.11.0
  hooks:
    # Run the linter.
    - id: ruff
      args: [ --fix ]
    # Run the formatter.
    - id: ruff-format
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ruff can also be used as a &lt;a href=&quot;https://github.com/astral-sh/ruff-vscode&quot;&gt;VS Code extension&lt;/a&gt; or with &lt;a href=&quot;https://docs.astral.sh/ruff/editors/setup&quot;&gt;various other editors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff can also be used as a &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Action&lt;/a&gt; via &lt;a href=&quot;https://github.com/astral-sh/ruff-action&quot;&gt;&lt;code&gt;ruff-action&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: Ruff
on: [ push, pull_request ]
jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration&lt;a id=&quot;configuration&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Ruff can be configured through a &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;ruff.toml&lt;/code&gt;, or &lt;code&gt;.ruff.toml&lt;/code&gt; file (see: &lt;a href=&quot;https://docs.astral.sh/ruff/configuration/&quot;&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt;, or &lt;a href=&quot;https://docs.astral.sh/ruff/settings/&quot;&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/a&gt; for a complete list of all configuration options).&lt;/p&gt; 
&lt;p&gt;If left unspecified, Ruff&#39;s default configuration is equivalent to the following &lt;code&gt;ruff.toml&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;# Exclude a variety of commonly ignored directories.
exclude = [
    &quot;.bzr&quot;,
    &quot;.direnv&quot;,
    &quot;.eggs&quot;,
    &quot;.git&quot;,
    &quot;.git-rewrite&quot;,
    &quot;.hg&quot;,
    &quot;.ipynb_checkpoints&quot;,
    &quot;.mypy_cache&quot;,
    &quot;.nox&quot;,
    &quot;.pants.d&quot;,
    &quot;.pyenv&quot;,
    &quot;.pytest_cache&quot;,
    &quot;.pytype&quot;,
    &quot;.ruff_cache&quot;,
    &quot;.svn&quot;,
    &quot;.tox&quot;,
    &quot;.venv&quot;,
    &quot;.vscode&quot;,
    &quot;__pypackages__&quot;,
    &quot;_build&quot;,
    &quot;buck-out&quot;,
    &quot;build&quot;,
    &quot;dist&quot;,
    &quot;node_modules&quot;,
    &quot;site-packages&quot;,
    &quot;venv&quot;,
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = &quot;py39&quot;

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [&quot;E4&quot;, &quot;E7&quot;, &quot;E9&quot;, &quot;F&quot;]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = [&quot;ALL&quot;]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = &quot;^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$&quot;

[format]
# Like Black, use double quotes for strings.
quote-style = &quot;double&quot;

# Like Black, indent with spaces, rather than tabs.
indent-style = &quot;space&quot;

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = &quot;auto&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, in a &lt;code&gt;pyproject.toml&lt;/code&gt;, each section header should be prefixed with &lt;code&gt;tool.ruff&lt;/code&gt;. For example, &lt;code&gt;[lint]&lt;/code&gt; should be replaced with &lt;code&gt;[tool.ruff.lint]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Some configuration options can be provided via dedicated command-line arguments, such as those related to rule enablement and disablement, file discovery, and logging level:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ruff check --select F401 --select F403 --quiet
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The remaining configuration options can be provided through a catch-all &lt;code&gt;--config&lt;/code&gt; argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ruff check --config &quot;lint.per-file-ignores = {&#39;some_file.py&#39; = [&#39;F841&#39;]}&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To opt in to the latest lint rules, formatter style changes, interface updates, and more, enable &lt;a href=&quot;https://docs.astral.sh/ruff/rules/&quot;&gt;preview mode&lt;/a&gt; by setting &lt;code&gt;preview = true&lt;/code&gt; in your configuration file or passing &lt;code&gt;--preview&lt;/code&gt; on the command line. Preview mode enables a collection of unstable features that may change prior to stabilization.&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;ruff help&lt;/code&gt; for more on Ruff&#39;s top-level commands, or &lt;code&gt;ruff help check&lt;/code&gt; and &lt;code&gt;ruff help format&lt;/code&gt; for more on the linting and formatting commands, respectively.&lt;/p&gt; 
&lt;h2&gt;Rules&lt;a id=&quot;rules&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;!-- Begin section: Rules --&gt; 
&lt;p&gt;&lt;strong&gt;Ruff supports over 800 lint rules&lt;/strong&gt;, many of which are inspired by popular tools like Flake8, isort, pyupgrade, and others. Regardless of the rule&#39;s origin, Ruff re-implements every rule in Rust as a first-party feature.&lt;/p&gt; 
&lt;p&gt;By default, Ruff enables Flake8&#39;s &lt;code&gt;F&lt;/code&gt; rules, along with a subset of the &lt;code&gt;E&lt;/code&gt; rules, omitting any stylistic rules that overlap with the use of a formatter, like &lt;code&gt;ruff format&lt;/code&gt; or &lt;a href=&quot;https://github.com/psf/black&quot;&gt;Black&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you&#39;re just getting started with Ruff, &lt;strong&gt;the default rule set is a great place to start&lt;/strong&gt;: it catches a wide variety of common errors (like unused imports) with zero configuration.&lt;/p&gt; 
&lt;!-- End section: Rules --&gt; 
&lt;p&gt;Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code quality tools, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/autoflake/&quot;&gt;autoflake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/eradicate/&quot;&gt;eradicate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-2020/&quot;&gt;flake8-2020&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-annotations/&quot;&gt;flake8-annotations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-async&quot;&gt;flake8-async&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-bandit/&quot;&gt;flake8-bandit&lt;/a&gt; (&lt;a href=&quot;https://github.com/astral-sh/ruff/issues/1646&quot;&gt;#1646&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-blind-except/&quot;&gt;flake8-blind-except&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-boolean-trap/&quot;&gt;flake8-boolean-trap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-bugbear/&quot;&gt;flake8-bugbear&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-builtins/&quot;&gt;flake8-builtins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-commas/&quot;&gt;flake8-commas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-comprehensions/&quot;&gt;flake8-comprehensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-copyright/&quot;&gt;flake8-copyright&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-datetimez/&quot;&gt;flake8-datetimez&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-debugger/&quot;&gt;flake8-debugger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-django/&quot;&gt;flake8-django&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-docstrings/&quot;&gt;flake8-docstrings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-eradicate/&quot;&gt;flake8-eradicate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-errmsg/&quot;&gt;flake8-errmsg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-executable/&quot;&gt;flake8-executable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-future-annotations/&quot;&gt;flake8-future-annotations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-gettext/&quot;&gt;flake8-gettext&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-implicit-str-concat/&quot;&gt;flake8-implicit-str-concat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/joaopalmeiro/flake8-import-conventions&quot;&gt;flake8-import-conventions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-logging/&quot;&gt;flake8-logging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-logging-format/&quot;&gt;flake8-logging-format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-no-pep420&quot;&gt;flake8-no-pep420&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-pie/&quot;&gt;flake8-pie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-print/&quot;&gt;flake8-print&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-pyi/&quot;&gt;flake8-pyi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-pytest-style/&quot;&gt;flake8-pytest-style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-quotes/&quot;&gt;flake8-quotes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-raise/&quot;&gt;flake8-raise&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-return/&quot;&gt;flake8-return&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-self/&quot;&gt;flake8-self&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-simplify/&quot;&gt;flake8-simplify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-slots/&quot;&gt;flake8-slots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-super/&quot;&gt;flake8-super&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-tidy-imports/&quot;&gt;flake8-tidy-imports&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-todos/&quot;&gt;flake8-todos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-type-checking/&quot;&gt;flake8-type-checking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flake8-use-pathlib/&quot;&gt;flake8-use-pathlib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/flynt/&quot;&gt;flynt&lt;/a&gt; (&lt;a href=&quot;https://github.com/astral-sh/ruff/issues/2102&quot;&gt;#2102&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/isort/&quot;&gt;isort&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/mccabe/&quot;&gt;mccabe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/pandas-vet/&quot;&gt;pandas-vet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/pep8-naming/&quot;&gt;pep8-naming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/pydocstyle/&quot;&gt;pydocstyle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pre-commit/pygrep-hooks&quot;&gt;pygrep-hooks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/pylint-airflow/&quot;&gt;pylint-airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/pyupgrade/&quot;&gt;pyupgrade&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/tryceratops/&quot;&gt;tryceratops&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/yesqa/&quot;&gt;yesqa&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a complete enumeration of the supported rules, see &lt;a href=&quot;https://docs.astral.sh/ruff/rules/&quot;&gt;&lt;em&gt;Rules&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;a id=&quot;contributing&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome and highly appreciated. To get started, check out the &lt;a href=&quot;https://docs.astral.sh/ruff/contributing/&quot;&gt;&lt;strong&gt;contributing guidelines&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also join us on &lt;a href=&quot;https://discord.com/invite/astral-sh&quot;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;a id=&quot;support&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Having trouble? Check out the existing issues on &lt;a href=&quot;https://github.com/astral-sh/ruff/issues&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;, or feel free to &lt;a href=&quot;https://github.com/astral-sh/ruff/issues/new&quot;&gt;&lt;strong&gt;open a new one&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also ask for help on &lt;a href=&quot;https://discord.com/invite/astral-sh&quot;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;a id=&quot;acknowledgements&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Ruff&#39;s linter draws on both the APIs and implementation details of many other tools in the Python ecosystem, especially &lt;a href=&quot;https://github.com/PyCQA/flake8&quot;&gt;Flake8&lt;/a&gt;, &lt;a href=&quot;https://github.com/PyCQA/pyflakes&quot;&gt;Pyflakes&lt;/a&gt;, &lt;a href=&quot;https://github.com/PyCQA/pycodestyle&quot;&gt;pycodestyle&lt;/a&gt;, &lt;a href=&quot;https://github.com/PyCQA/pydocstyle&quot;&gt;pydocstyle&lt;/a&gt;, &lt;a href=&quot;https://github.com/asottile/pyupgrade&quot;&gt;pyupgrade&lt;/a&gt;, and &lt;a href=&quot;https://github.com/PyCQA/isort&quot;&gt;isort&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In some cases, Ruff includes a &quot;direct&quot; Rust port of the corresponding tool. We&#39;re grateful to the maintainers of these tools for their work, and for all the value they&#39;ve provided to the Python community.&lt;/p&gt; 
&lt;p&gt;Ruff&#39;s formatter is built on a fork of Rome&#39;s &lt;a href=&quot;https://github.com/rome/tools/tree/main/crates/rome_formatter&quot;&gt;&lt;code&gt;rome_formatter&lt;/code&gt;&lt;/a&gt;, and again draws on both API and implementation details from &lt;a href=&quot;https://github.com/rome/tools&quot;&gt;Rome&lt;/a&gt;, &lt;a href=&quot;https://github.com/prettier/prettier&quot;&gt;Prettier&lt;/a&gt;, and &lt;a href=&quot;https://github.com/psf/black&quot;&gt;Black&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff&#39;s import resolver is based on the import resolution algorithm from &lt;a href=&quot;https://github.com/microsoft/pyright&quot;&gt;Pyright&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is also influenced by a number of tools outside the Python ecosystem, like &lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;Clippy&lt;/a&gt; and &lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;ESLint&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is the beneficiary of a large number of &lt;a href=&quot;https://github.com/astral-sh/ruff/graphs/contributors&quot;&gt;contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ruff is released under the MIT license.&lt;/p&gt; 
&lt;h2&gt;Who&#39;s Using Ruff?&lt;a id=&quot;whos-using-ruff&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Ruff is used by a number of major open-source projects and companies, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/albumentations-team/albumentations&quot;&gt;Albumentations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Amazon (&lt;a href=&quot;https://github.com/aws/serverless-application-model&quot;&gt;AWS SAM&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Anthropic (&lt;a href=&quot;https://github.com/anthropics/anthropic-sdk-python&quot;&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/airflow&quot;&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;AstraZeneca (&lt;a href=&quot;https://github.com/AstraZeneca/magnus-core&quot;&gt;Magnus&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/python-babel/babel&quot;&gt;Babel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Benchling (&lt;a href=&quot;https://github.com/benchling/refac&quot;&gt;Refac&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bokeh/bokeh&quot;&gt;Bokeh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CrowdCent (&lt;a href=&quot;https://github.com/crowdcent/numerblox&quot;&gt;NumerBlox&lt;/a&gt;) 
  &lt;!-- typos: ignore --&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pyca/cryptography&quot;&gt;Cryptography (PyCA)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CERN (&lt;a href=&quot;https://getindico.io/&quot;&gt;Indico&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iterative/dvc&quot;&gt;DVC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dagger/dagger&quot;&gt;Dagger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dagster-io/dagster&quot;&gt;Dagster&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Databricks (&lt;a href=&quot;https://github.com/mlflow/mlflow&quot;&gt;MLflow&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/langgenius/dify&quot;&gt;Dify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tiangolo/fastapi&quot;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/godotengine/godot&quot;&gt;Godot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gradio-app/gradio&quot;&gt;Gradio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/great-expectations/great_expectations&quot;&gt;Great Expectations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/encode/httpx&quot;&gt;HTTPX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pypa/hatch&quot;&gt;Hatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/home-assistant/core&quot;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hugging Face (&lt;a href=&quot;https://github.com/huggingface/transformers&quot;&gt;Transformers&lt;/a&gt;, &lt;a href=&quot;https://github.com/huggingface/datasets&quot;&gt;Datasets&lt;/a&gt;, &lt;a href=&quot;https://github.com/huggingface/diffusers&quot;&gt;Diffusers&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;IBM (&lt;a href=&quot;https://github.com/Qiskit/qiskit&quot;&gt;Qiskit&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;ING Bank (&lt;a href=&quot;https://github.com/ing-bank/popmon&quot;&gt;popmon&lt;/a&gt;, &lt;a href=&quot;https://github.com/ing-bank/probatus&quot;&gt;probatus&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibis-project/ibis&quot;&gt;Ibis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unifyai/ivy&quot;&gt;ivy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jax-ml/jax&quot;&gt;JAX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jupyter-server/jupyter_server&quot;&gt;Jupyter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://kraken.tech/&quot;&gt;Kraken Tech&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hwchase17/langchain&quot;&gt;LangChain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://litestar.dev/&quot;&gt;Litestar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jerryjliu/llama_index&quot;&gt;LlamaIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Matrix (&lt;a href=&quot;https://github.com/matrix-org/synapse&quot;&gt;Synapse&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/oxsecurity/megalinter&quot;&gt;MegaLinter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Meltano (&lt;a href=&quot;https://github.com/meltano/meltano&quot;&gt;Meltano CLI&lt;/a&gt;, &lt;a href=&quot;https://github.com/meltano/sdk&quot;&gt;Singer SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Microsoft (&lt;a href=&quot;https://github.com/microsoft/semantic-kernel&quot;&gt;Semantic Kernel&lt;/a&gt;, &lt;a href=&quot;https://github.com/microsoft/onnxruntime&quot;&gt;ONNX Runtime&lt;/a&gt;, &lt;a href=&quot;https://github.com/microsoft/LightGBM&quot;&gt;LightGBM&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Modern Treasury (&lt;a href=&quot;https://github.com/Modern-Treasury/modern-treasury-python&quot;&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Mozilla (&lt;a href=&quot;https://github.com/mozilla/gecko-dev&quot;&gt;Firefox&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/python/mypy&quot;&gt;Mypy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nautobot/nautobot&quot;&gt;Nautobot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Netflix (&lt;a href=&quot;https://github.com/Netflix/dispatch&quot;&gt;Dispatch&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neondatabase/neon&quot;&gt;Neon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nokia.com/&quot;&gt;Nokia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nonebot/nonebot2&quot;&gt;NoneBot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pyro-ppl/numpyro&quot;&gt;NumPyro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onnx/onnx&quot;&gt;ONNX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenBB-finance/OpenBBTerminal&quot;&gt;OpenBB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Open-Wine-Components/umu-launcher&quot;&gt;Open Wine Components&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pdm-project/pdm&quot;&gt;PDM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PaddlePaddle/Paddle&quot;&gt;PaddlePaddle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pandas-dev/pandas&quot;&gt;Pandas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/python-pillow/Pillow&quot;&gt;Pillow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/python-poetry/poetry&quot;&gt;Poetry&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pola-rs/polars&quot;&gt;Polars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PostHog/posthog&quot;&gt;PostHog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Prefect (&lt;a href=&quot;https://github.com/PrefectHQ/prefect&quot;&gt;Python SDK&lt;/a&gt;, &lt;a href=&quot;https://github.com/PrefectHQ/marvin&quot;&gt;Marvin&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pyinstaller/pyinstaller&quot;&gt;PyInstaller&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pymc-devs/pymc/&quot;&gt;PyMC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pymc-labs/pymc-marketing&quot;&gt;PyMC-Marketing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pytest-dev/pytest&quot;&gt;pytest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pytorch/pytorch&quot;&gt;PyTorch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pydantic/pydantic&quot;&gt;Pydantic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PyCQA/pylint&quot;&gt;Pylint&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pyvista/pyvista&quot;&gt;PyVista&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reflex-dev/reflex&quot;&gt;Reflex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/online-ml/river&quot;&gt;River&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rippling.com&quot;&gt;Rippling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sansyrox/robyn&quot;&gt;Robyn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/saleor/saleor&quot;&gt;Saleor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Scale AI (&lt;a href=&quot;https://github.com/scaleapi/launch-python-client&quot;&gt;Launch SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scipy/scipy&quot;&gt;SciPy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Snowflake (&lt;a href=&quot;https://github.com/Snowflake-Labs/snowcli&quot;&gt;SnowCLI&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sphinx-doc/sphinx&quot;&gt;Sphinx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DLR-RM/stable-baselines3&quot;&gt;Stable Baselines3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/encode/starlette&quot;&gt;Starlette&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/streamlit/streamlit&quot;&gt;Streamlit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TheAlgorithms/Python&quot;&gt;The Algorithms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/altair-viz/altair&quot;&gt;Vega-Altair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WordPress (&lt;a href=&quot;https://github.com/WordPress/openverse&quot;&gt;Openverse&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zenml-io/zenml&quot;&gt;ZenML&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zulip/zulip&quot;&gt;Zulip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pypa/build&quot;&gt;build (PyPA)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pypa/cibuildwheel&quot;&gt;cibuildwheel (PyPA)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/delta-io/delta-rs&quot;&gt;delta-rs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/alteryx/featuretools&quot;&gt;featuretools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mesonbuild/meson-python&quot;&gt;meson-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wntrblm/nox&quot;&gt;nox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pypa/pip&quot;&gt;pip&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Show Your Support&lt;/h3&gt; 
&lt;p&gt;If you&#39;re using Ruff, consider adding the Ruff badge to your project&#39;s &lt;code&gt;README.md&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;...or &lt;code&gt;README.rst&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rst&quot;&gt;.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json
    :target: https://github.com/astral-sh/ruff
    :alt: Ruff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;...or, as HTML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;https://github.com/astral-sh/ruff&quot;&amp;gt;&amp;lt;img src=&quot;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&quot; alt=&quot;Ruff&quot; style=&quot;max-width:100%;&quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;a id=&quot;license&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href=&quot;https://github.com/astral-sh/ruff/raw/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a target=&quot;_blank&quot; href=&quot;https://astral.sh&quot; style=&quot;background:none&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg?sanitize=true&quot; alt=&quot;Made by Astral&quot;&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>oxc-project/oxc</title>
      <link>https://github.com/oxc-project/oxc</link>
      <description>&lt;p&gt;⚓ A collection of JavaScript tools written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;OXC Logo&quot; src=&quot;https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/preview-universal.png&quot; width=&quot;700&quot;&gt; &lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/oxc-project/oxc/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;MIT licensed&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain&quot;&gt;&lt;img src=&quot;https://github.com/oxc-project/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/oxc-project/oxc&quot;&gt;&lt;img src=&quot;https://codecov.io/github/oxc-project/oxc/branch/main/graph/badge.svg?sanitize=true&quot; alt=&quot;Code Coverage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codspeed.io/oxc-project/oxc&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://codspeed.io/badge.json&quot; alt=&quot;CodSpeed Badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/Boshen&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/Boshen&quot; alt=&quot;Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://discord.gg/9uXCAwqQZW&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord&quot; alt=&quot;Discord chat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://playground.oxc.rs/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Playground-blue?color=9BE4E0&quot; alt=&quot;Playground&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://oxc.rs&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Website-blue&quot; alt=&quot;Website&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;⚓ Oxc&lt;/h2&gt; 
&lt;p&gt;The Oxidation Compiler is creating a collection of high-performance tools for JavaScript and TypeScript.&lt;/p&gt; 
&lt;p&gt;Oxc is building a parser, linter, formatter, transformer, minifier, resolver ... all written in Rust.&lt;/p&gt; 
&lt;p&gt;See more at &lt;a href=&quot;https://oxc.rs&quot;&gt;oxc.rs&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;VoidZero Inc.&lt;/h2&gt; 
&lt;p&gt;Oxc is a project of &lt;a href=&quot;https://voidzero.dev/&quot;&gt;VoidZero&lt;/a&gt;, see our announcement &lt;a href=&quot;https://voidzero.dev/blog&quot;&gt;Announcing VoidZero - Next Generation Toolchain for JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have requirements for JavaScript tools at scale, please &lt;a href=&quot;https://forms.gle/WQgjyzYJpwurpxWKA&quot;&gt;get in touch&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;🙋Who&#39;s using Oxc?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rolldown.rs&quot;&gt;Rolldown&lt;/a&gt; uses the &lt;a href=&quot;https://docs.rs/oxc&quot;&gt;oxc&lt;/a&gt; crate for parsing and transformation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://trynova.dev&quot;&gt;Nova engine&lt;/a&gt; uses the &lt;a href=&quot;https://docs.rs/oxc&quot;&gt;oxc&lt;/a&gt; crate for parsing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rolldown.rs&quot;&gt;Rolldown&lt;/a&gt;, &lt;a href=&quot;https://biomejs.dev/&quot;&gt;Biome&lt;/a&gt; and &lt;a href=&quot;https://github.com/swc-project/swc-node&quot;&gt;swc-node&lt;/a&gt; uses the &lt;a href=&quot;https://docs.rs/oxc_resolver&quot;&gt;oxc_resolver&lt;/a&gt; crate for module resolution.&lt;/li&gt; 
 &lt;li&gt;Projects and companies like &lt;a href=&quot;https://github.com/preactjs/preact/raw/4c20c23c16dd60f380ce9fe98afc93041a7e1562/oxlint.json&quot;&gt;Preact&lt;/a&gt;, &lt;a href=&quot;https://oxc.rs/blog/2023-12-12-announcing-oxlint.html#_50-100-times-faster-than-eslint&quot;&gt;Shopify&lt;/a&gt;, ByteDance and Shopee uses oxlint for linting.&lt;/li&gt; 
 &lt;li&gt;...&lt;a href=&quot;https://oxc.rs/docs/guide/projects.html&quot;&gt;and many more&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Linter Quick Start&lt;/h2&gt; 
&lt;p&gt;The linter is ready to catch mistakes for you. It comes with 93 rules turned on by default (out of 430+ in total) and no configuration is required.&lt;/p&gt; 
&lt;p&gt;To get started, run &lt;a href=&quot;https://www.npmjs.com/package/oxlint&quot;&gt;oxlint&lt;/a&gt; or via &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx oxlint@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To give you an idea of its capabilities, here is an example from the &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;vscode&lt;/a&gt; repository, which finishes linting 4800+ files in 0.7 seconds.&lt;/p&gt; 
&lt;p float=&quot;left&quot; align=&quot;left&quot;&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/oxc-project/oxc-assets/linter-screenshot.png&quot; width=&quot;60%&quot;&gt; &lt;/p&gt; 
&lt;h2&gt;⚡️ Performance&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The parser aims to be the fastest Rust-based ready-for-production parser.&lt;/li&gt; 
 &lt;li&gt;The linter is more than 50 times faster than &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt;, and scales with the number of CPU cores.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p float=&quot;left&quot; align=&quot;middle&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Boshen/bench-javascript-parser-written-in-rust/main/bar-graph.svg?sanitize=true&quot; width=&quot;49%&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Boshen/bench-javascript-linter/main/bar-graph.svg?sanitize=true&quot; width=&quot;49%&quot;&gt; &lt;/p&gt; 
&lt;h2&gt;⌨️ Rust, Node.js and Wasm Usage&lt;/h2&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;Individual crates are published, you may use them to build your own JavaScript tools.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The umbrella crate &lt;a href=&quot;https://docs.rs/oxc&quot;&gt;oxc&lt;/a&gt; exports all public crates from this repository.&lt;/li&gt; 
 &lt;li&gt;The AST and parser crates &lt;a href=&quot;https://docs.rs/oxc_ast&quot;&gt;oxc_ast&lt;/a&gt; and &lt;a href=&quot;https://docs.rs/oxc_parser&quot;&gt;oxc_parser&lt;/a&gt; are production ready.&lt;/li&gt; 
 &lt;li&gt;The resolver crate &lt;a href=&quot;https://docs.rs/oxc_resolver&quot;&gt;oxc_resolver&lt;/a&gt; for module resolution is also production ready.&lt;/li&gt; 
 &lt;li&gt;Example usages of these crates can be found in their respective &lt;code&gt;crates/*/examples&lt;/code&gt; directory.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;While Rust has gained a reputation for its comparatively slower compilation speed, we have dedicated significant effort to fine-tune the Rust compilation speed. Our aim is to minimize any impact on your development workflow, ensuring that developing your own Oxc based tools remains a smooth and efficient experience.&lt;/p&gt; 
&lt;p&gt;This is demonstrated by our &lt;a href=&quot;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=branch%3Amain&quot;&gt;CI runs&lt;/a&gt;, where warm runs complete in 3 minutes.&lt;/p&gt; 
&lt;h3&gt;Node.js&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;via napi: &lt;a href=&quot;https://www.npmjs.com/package/oxc-parser&quot;&gt;oxc-parser&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/oxc-transform&quot;&gt;oxc-transform&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Wasm&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@oxc-parser/wasm&quot;&gt;@oxc-parser/wasm&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;🎯 Tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ast-and-parser&quot;&gt;AST and Parser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/#-linter&quot;&gt;Linter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/#-resolver&quot;&gt;Resolver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/#-minifier&quot;&gt;Minifier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/#-formatter&quot;&gt;Formatter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/#-transformer&quot;&gt;Transformer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔸 AST and Parser&lt;/h3&gt; 
&lt;p&gt;Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.&lt;/p&gt; 
&lt;p&gt;As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools. By developing our parser, we have the opportunity to explore and implement well-researched performance techniques.&lt;/p&gt; 
&lt;p&gt;While many existing JavaScript tools rely on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;estree&lt;/a&gt; as their AST specification, a notable drawback is its abundance of ambiguous nodes. This ambiguity often leads to confusion during development with &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;estree&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Oxc AST differs slightly from the &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;estree&lt;/a&gt; AST by removing ambiguous nodes and introducing distinct types. For example, instead of using a generic &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;estree&lt;/a&gt; &lt;code&gt;Identifier&lt;/code&gt;, the Oxc AST provides specific types such as &lt;code&gt;BindingIdentifier&lt;/code&gt;, &lt;code&gt;IdentifierReference&lt;/code&gt;, and &lt;code&gt;IdentifierName&lt;/code&gt;. This clear distinction greatly enhances the development experience by aligning more closely with the ECMAScript specification.&lt;/p&gt; 
&lt;h4&gt;🏆 Parser Performance&lt;/h4&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/Boshen/bench-javascript-parser-written-in-rust&quot;&gt;benchmark&lt;/a&gt; reveals that the Oxc parser surpasses the speed of the &lt;a href=&quot;https://swc.rs&quot;&gt;swc&lt;/a&gt; parser by approximately 3 times and the &lt;a href=&quot;https://biomejs.dev/&quot;&gt;Biome&lt;/a&gt; parser by 5 times.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;How is it so fast?&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;AST is allocated in a memory arena (&lt;a href=&quot;https://crates.io/crates/bumpalo&quot;&gt;bumpalo&lt;/a&gt;) for fast AST memory allocation and deallocation.&lt;/li&gt; 
  &lt;li&gt;Short strings are inlined by &lt;a href=&quot;https://crates.io/crates/compact_str&quot;&gt;CompactString&lt;/a&gt;.&lt;/li&gt; 
  &lt;li&gt;No other heap allocations are done except the above two.&lt;/li&gt; 
  &lt;li&gt;Scope binding, symbol resolution and some syntax errors are not done in the parser, they are delegated to the semantic analyzer.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;🔸 Linter&lt;/h3&gt; 
&lt;p&gt;The linter embraces convention over configuration, eliminating the need for extensive configuration and plugin setup. Unlike other linters like &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt;, which often require intricate configurations and plugin installations (e.g. &lt;a href=&quot;https://typescript-eslint.io&quot;&gt;@typescript-eslint&lt;/a&gt;), our linter only requires a single command that you can immediately run on your codebase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx oxlint@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;🏆 Linter Performance&lt;/h4&gt; 
&lt;p&gt;The linter is 50 - 100 times faster than &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt; depending on the number of rules and number of CPU cores used. It completes in less than a second for most codebases with a few hundred files and completes in a few seconds for larger monorepos. See &lt;a href=&quot;https://github.com/Boshen/bench-javascript-linter&quot;&gt;bench-javascript-linter&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;As an upside, the binary is approximately 5MB, whereas &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt; and its associated plugin dependencies can easily exceed 100.&lt;/p&gt; 
&lt;p&gt;You may also download the linter binary from the &lt;a href=&quot;https://github.com/oxc-project/oxc/releases/latest&quot;&gt;latest release tag&lt;/a&gt; as a standalone binary, this lets you run the linter without a Node.js installation in your CI.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;How is it so fast?&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Oxc parser is used.&lt;/li&gt; 
  &lt;li&gt;AST visit is a fast operation due to linear memory scan from the memory arena.&lt;/li&gt; 
  &lt;li&gt;Files are linted in a multi-threaded environment, so scales with the total number of CPU cores.&lt;/li&gt; 
  &lt;li&gt;Every single lint rule is tuned for performance.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;🔸 Resolver&lt;/h3&gt; 
&lt;p&gt;Module resolution plays a crucial role in JavaScript tooling, especially for tasks like multi-file analysis or bundling. However, it can often become a performance bottleneck. To address this, we developed &lt;a href=&quot;https://docs.rs/oxc_resolver&quot;&gt;oxc_resolver&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The resolver is production-ready and is currently being used in &lt;a href=&quot;https://rolldown.rs&quot;&gt;Rolldown&lt;/a&gt;. Usage and examples can be found in its own &lt;a href=&quot;https://github.com/oxc-project/oxc_resolver&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;🔸 Transformer&lt;/h3&gt; 
&lt;p&gt;A transformer is responsible for turning higher versions of ECMAScript to a lower version that can be used in older browsers.&lt;/p&gt; 
&lt;p&gt;TypeScript and React transforms are complete. See &lt;a href=&quot;https://github.com/oxc-project/oxc/issues/2859&quot;&gt;Milestone 2&lt;/a&gt; for current goals.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/oxc-transform&quot;&gt;oxc-transform&lt;/a&gt; can be used for experimentation.&lt;/p&gt; 
&lt;h3&gt;🔸 Isolated Declarations&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/#isolated-declarations&quot;&gt;TypeScript Isolated Declarations Emit&lt;/a&gt; without using the TypeScript compiler.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/oxc-project/bench-transformer&quot;&gt;benchmark&lt;/a&gt; indications that our implementation is at least 20 times faster than the TypeScript compiler.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://www.npmjs.com/package/oxc-transform&quot;&gt;npm package&lt;/a&gt; or &lt;a href=&quot;https://crates.io/crates/oxc_isolated_declarations&quot;&gt;crate&lt;/a&gt; can be used for this task.&lt;/p&gt; 
&lt;h3&gt;🔸 Minifier&lt;/h3&gt; 
&lt;p&gt;JavaScript minification plays a crucial role in optimizing website performance as it reduces the amount of data sent to users, resulting in faster page loads. This holds tremendous economic value, particularly for e-commerce websites, where every second can equate to millions of dollars.&lt;/p&gt; 
&lt;p&gt;However, existing minifiers typically require a trade-off between compression quality and speed. You have to choose between the slowest for the best compression or the fastest for less compression. But what if we could develop a faster minifier without compromising on compression?&lt;/p&gt; 
&lt;p&gt;We are actively working on a prototype that aims to achieve this goal, by porting all test cases from well-known minifiers such as &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;google-closure-compiler&lt;/a&gt;, &lt;a href=&quot;https://terser.org&quot;&gt;terser&lt;/a&gt;, &lt;a href=&quot;https://esbuild.github.io/&quot;&gt;esbuild&lt;/a&gt;, and &lt;a href=&quot;https://github.com/tdewolff/minify&quot;&gt;tdewolff-minify&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Preliminary results indicate that we are on track to achieve our objectives. With the Oxc minifier, you can expect faster minification times without sacrificing compression quality.&lt;/p&gt; 
&lt;h3&gt;🔸 Formatter&lt;/h3&gt; 
&lt;p&gt;While &lt;a href=&quot;https://prettier.io&quot;&gt;prettier&lt;/a&gt; has established itself as the de facto code formatter for JavaScript, there is a significant demand in the developer community for a less opinionated alternative. Recognizing this need, our ambition is to undertake research and development to create a new JavaScript formatter that offers increased flexibility and customization options.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/oxc-project/oxc/tree/main/crates/oxc_prettier&quot;&gt;prototype&lt;/a&gt; is currently work in progress.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;🧪Test Infrastructure&lt;/h2&gt; 
&lt;p&gt;In Oxc, correctness and reliability are taken extremely seriously.&lt;/p&gt; 
&lt;p&gt;We spend half of our time on strengthening the test infrastructure to prevent problems from propagating to downstream tools.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://oxc.rs/docs/learn/architecture/test.html&quot;&gt;Test Infrastructure&lt;/a&gt; documents our test procedures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Conformance suite on Test262, Babel, TypeScript&lt;/li&gt; 
 &lt;li&gt;Lots of fuzzing&lt;/li&gt; 
 &lt;li&gt;Linter snapshot diagnostics&lt;/li&gt; 
 &lt;li&gt;oxlint ecosystem ci&lt;/li&gt; 
 &lt;li&gt;Idempotency testing&lt;/li&gt; 
 &lt;li&gt;Code coverage&lt;/li&gt; 
 &lt;li&gt;End to end 3000 top npm packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;✍️ Contribute&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for guidance.&lt;/p&gt; 
&lt;p&gt;Check out some of the &lt;a href=&quot;https://github.com/oxc-project/oxc/contribute&quot;&gt;good first issues&lt;/a&gt; or ask us on &lt;a href=&quot;https://discord.gg/9uXCAwqQZW&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are unable to contribute by code, you can still participate by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a &lt;a href=&quot;https://github.com/oxc-project/oxc/stargazers&quot;&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; 
 &lt;li&gt;Join us on &lt;a href=&quot;https://discord.gg/9uXCAwqQZW&quot;&gt;Discord&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/boshen_c&quot;&gt;Follow me on twitter&lt;/a&gt; and tweet about this project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📚 Learning Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;My small tutorial on &lt;a href=&quot;https://oxc.rs/docs/learn/parser_in_rust/intro.html&quot;&gt;how to write a JavaScript Parser in Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;My small article &lt;a href=&quot;https://oxc.rs/docs/learn/performance.html&quot;&gt;Pursuit of Performance on Building a JavaScript Compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://oxc.rs/docs/learn/references.html&quot;&gt;And more&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Credits&lt;/h2&gt; 
&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://biomejs.dev/&quot;&gt;Biome&lt;/a&gt; - &lt;a href=&quot;https://github.com/ematipico&quot;&gt;@ematipico&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://beta.ruff.rs&quot;&gt;Ruff&lt;/a&gt; - &lt;a href=&quot;https://github.com/charliermarsh&quot;&gt;@charliermarsh&lt;/a&gt;, &lt;a href=&quot;https://github.com/MichaReiser&quot;&gt;@MichaReiser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/quick-lint/quick-lint-js&quot;&gt;quick-lint-js&lt;/a&gt; - &lt;a href=&quot;https://github.com/strager&quot;&gt;@strager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://package.elm-lang.org/packages/jfmengels/elm-review/latest&quot;&gt;elm-review&lt;/a&gt; - &lt;a href=&quot;https://github.com/jfmengels&quot;&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Special thanks go to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/domonji&quot;&gt;@domonji&lt;/a&gt; for bootstrapping this project together, and also completing the TypeScript parser.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tongtong-lu&quot;&gt;@tongtong-lu&lt;/a&gt; and &lt;a href=&quot;https://github.com/guan-wy&quot;&gt;@guan-wy&lt;/a&gt; for designing the &lt;a href=&quot;https://github.com/oxc-project/oxc-assets&quot;&gt;project logo&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;❤ Who&#39;s &lt;a href=&quot;https://github.com/sponsors/Boshen&quot;&gt;Sponsoring Oxc&lt;/a&gt;?&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/sponsors/Boshen&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Boshen/sponsors/main/sponsors.svg?sanitize=true&quot; alt=&quot;My sponsors&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;📖 License&lt;/h2&gt; 
&lt;p&gt;Oxc is free and open-source software licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Oxc ports or copies code from other open source projects, their licenses are listed in &lt;a href=&quot;https://raw.githubusercontent.com/oxc-project/oxc/main/THIRD-PARTY-LICENSE&quot;&gt;&lt;strong&gt;Third-party library licenses&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seanmonstar/reqwest</title>
      <link>https://github.com/seanmonstar/reqwest</link>
      <description>&lt;p&gt;An easy and powerful Rust HTTP Client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reqwest&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://crates.io/crates/reqwest&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/reqwest.svg?sanitize=true&quot; alt=&quot;crates.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/reqwest&quot;&gt;&lt;img src=&quot;https://docs.rs/reqwest/badge.svg?sanitize=true&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/l/reqwest.svg?sanitize=true&quot; alt=&quot;MIT/Apache-2 licensed&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seanmonstar/reqwest/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/seanmonstar/reqwest/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An ergonomic, batteries-included HTTP Client for Rust.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Async and blocking &lt;code&gt;Client&lt;/code&gt;s&lt;/li&gt; 
 &lt;li&gt;Plain bodies, JSON, urlencoded, multipart&lt;/li&gt; 
 &lt;li&gt;Customizable redirect policy&lt;/li&gt; 
 &lt;li&gt;HTTP Proxies&lt;/li&gt; 
 &lt;li&gt;HTTPS via system-native TLS (or optionally, rustls)&lt;/li&gt; 
 &lt;li&gt;Cookie Store&lt;/li&gt; 
 &lt;li&gt;WASM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;This asynchronous example uses &lt;a href=&quot;https://tokio.rs&quot;&gt;Tokio&lt;/a&gt; and enables some optional features, so your &lt;code&gt;Cargo.toml&lt;/code&gt; could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[dependencies]
reqwest = { version = &quot;0.12&quot;, features = [&quot;json&quot;] }
tokio = { version = &quot;1&quot;, features = [&quot;full&quot;] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then the code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust,no_run&quot;&gt;use std::collections::HashMap;

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let resp = reqwest::get(&quot;https://httpbin.org/ip&quot;)
        .await?
        .json::&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt;()
        .await?;
    println!(&quot;{resp:#?}&quot;);
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commercial Support&lt;/h2&gt; 
&lt;p&gt;For private advice, support, reviews, access to the maintainer, and the like, reach out for &lt;a href=&quot;https://seanmonstar.com/sponsor&quot;&gt;commercial support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;On Linux:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OpenSSL with headers. See &lt;a href=&quot;https://docs.rs/openssl&quot;&gt;https://docs.rs/openssl&lt;/a&gt; for supported versions and more details. Alternatively you can enable the &lt;code&gt;native-tls-vendored&lt;/code&gt; feature to compile a copy of OpenSSL. Or, you can use &lt;a href=&quot;https://github.com/rustls/rustls&quot;&gt;rustls&lt;/a&gt; via &lt;code&gt;rustls-tls&lt;/code&gt; or other &lt;code&gt;rustls-tls-*&lt;/code&gt; features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;On Windows and macOS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nothing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, Reqwest uses &lt;a href=&quot;https://github.com/sfackler/rust-native-tls&quot;&gt;rust-native-tls&lt;/a&gt;, which will use the operating system TLS framework if available, meaning Windows and macOS. On Linux, it will use the available OpenSSL or fail to build if not found.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&quot;https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE&quot;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&quot;http://apache.org/licenses/LICENSE-2.0&quot;&gt;http://apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href=&quot;https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-MIT&quot;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Support this project by becoming a &lt;a href=&quot;https://seanmonstar.com/sponsor&quot;&gt;sponsor&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EFForg/rayhunter</title>
      <link>https://github.com/EFForg/rayhunter</link>
      <description>&lt;p&gt;Rust tool to detect cell site simulators on an orbic mobile hotspot&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://www.eff.org/files/styles/media_browser_preview/public/banner_library/rayhunter-banner.png&quot; alt=&quot;Rayhunter Logo - An Orca taking a bite out of a cellular signal bar&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Rayhunter&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/EFForg/rayhunter/actions/workflows/check-and-test.yml/badge.svg?sanitize=true&quot; alt=&quot;Tests&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Rayhunter is an IMSI Catcher Catcher for the Orbic mobile hotspot.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;THIS CODE IS PROOF OF CONCEPT AND SHOULD NOT BE RELIED UPON IN HIGH RISK SITUATIONS&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;The Hardware&lt;/h2&gt; 
&lt;p&gt;Rayhunter has been built and tested for the Orbic RC400L mobile hotspot. It may work on other orbics and other linux/qualcom devices, but this is the only one we have tested on. Buy the orbic &lt;a href=&quot;https://www.amazon.com/Orbic-Verizon-Hotspot-Connect-Enabled/dp/B08N3CHC4Y&quot;&gt;using bezos bucks&lt;/a&gt; Or on &lt;a href=&quot;https://www.ebay.com/sch/i.html?_nkw=orbic+rc400l&quot;&gt;Ebay&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;NOTE: We don&#39;t currently support automated installs on windows, you will have to follow the manual install instructions below&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the latest &lt;a href=&quot;https://github.com/EFForg/rayhunter/releases&quot;&gt;Rayhunter release bundle&lt;/a&gt; and extract it. &lt;strong&gt;If you are installing from the cloned github repository please see the development instructions below, running &lt;code&gt;install-linux.sh&lt;/code&gt; from the git tree will not work.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Turn on the Orbic device and plug it into your computer using a USB-C Cable.&lt;/li&gt; 
 &lt;li&gt;Run the install script inside the bundle corresponding to your platform (&lt;code&gt;install-linux.sh&lt;/code&gt;, &lt;code&gt;install-mac.sh&lt;/code&gt;). The Linux installer has only been tested on the latest version of Ubuntu. If it fails you will need to follow the install steps outlined in &lt;strong&gt;Development&lt;/strong&gt; below.&lt;/li&gt; 
 &lt;li&gt;Once finished, Rayhunter should be running! You can verify this by visiting the web UI as described below.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Once installed, Rayhunter will run automatically whenever your Orbic device is running. It serves a web UI that provides some basic controls, such as being able to start/stop recordings, download captures, and view heuristic analyses of captures. You can access this UI in one of two ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Over wifi: Connect your phone/laptop to the Orbic&#39;s wifi network and visit &lt;code&gt;http://192.168.1.1:8080&lt;/code&gt; (click past your browser warning you about the connection not being secure, Rayhunter doesn&#39;t have HTTPS yet!) 
  &lt;ul&gt; 
   &lt;li&gt;Note that you&#39;ll need the Orbic&#39;s wifi password for this, which can be retrieved by pressing the &quot;MENU&quot; button on the device and opening the 2.4 GHz menu.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Over usb: Connect the Orbic device to your laptop via usb. Run &lt;code&gt;adb forward tcp:8080 tcp:8080&lt;/code&gt;, then visit &lt;code&gt;http://localhost:8080&lt;/code&gt;. For this you will need to install the Android Debug Bridge (ADB) on your computer, you can copy the version that was downloaded inside the releases/platform-tools/` folder to somewhere else in your path or you can install it manually. You can find instructions for doing so on your platform &lt;a href=&quot;https://www.xda-developers.com/install-adb-windows-macos-linux/#how-to-set-up-adb-on-your-computer&quot;&gt;here&lt;/a&gt;, (don&#39;t worry about instructions for installing it on a phone/device yet).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h3&gt;Do I need an active SIM card to use Rayhunter?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;It Depends&lt;/strong&gt;. Operation of Rayhunter does require the insertion of a SIM card into the device, but whether that SIM card has to be currently active for our tests to work is still under investigation. If you want to use the device as a hotspot in addition to a research device an active plan would of course be necessary, however we have not done enough testing yet to know whether an active subscription is required for detection. If you want to test the device with an inactive SIM card, we would certainly be interested in seeing any data you collect, and especially any runs that trigger an alert!&lt;/p&gt; 
&lt;h3&gt;Help, Rayhunter&#39;s line is red! What should I do?&lt;/h3&gt; 
&lt;p&gt;Unfortunately, the circumstances that might lead to a positive CSS signal are quite varied, so we don&#39;t have a universal recommendation for how to deal with the a positive signal. You might also want to turn off your phone until you are out of the area (or put it on airplane mode,) and tell your friends to do the same!&lt;/p&gt; 
&lt;p&gt;Please feel free to contact an EFF technologist with more information &amp;amp; a copy of the QMDL in question at &lt;a href=&quot;mailto:info@eff.org&quot;&gt;info@eff.org&lt;/a&gt;. Please note that this file may contain sensetive information such as your IMSI and the unique IDs of cell towers you were near which could be used to ascertain your location at the time.&lt;/p&gt; 
&lt;h3&gt;Does Rayhunter work outside of the US?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Probably&lt;/strong&gt;. Some Rayhunter users have reported successfully using it in other countries with unlocked devices and SIM cards from local telcos. We can&#39;t guarantee whether or not it will work for you though.&lt;/p&gt; 
&lt;h3&gt;Should I get a locked or unlocked orbic device? What is the difference?&lt;/h3&gt; 
&lt;p&gt;If you want to use a non verizon SIM card you will probably need an unlocked device. But it&#39;s not clear how locked the locked devices are nor how to unlock them, we welcome any experimentation and information regarding the use of unlocked devices.&lt;/p&gt; 
&lt;h3&gt;Does Rayhunter work on any other devices besides the Orbic RC400L?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Maybe&lt;/strong&gt;. We have not tested Rayhunter on any other hardware but we would love to expand the supported platforms. We will consider giving official support to any hardware platform that can be bought for around $20-30USD. The Rayhunter daemon should theoretically work on any linux/android device that has a qualcomm chip with a /dev/diag interface and root access, though our installer script has only been tested with an Orbic. If you get it working on another device, please let us know!&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install ADB on your computer using the instructions above, and make sure it&#39;s in your terminal&#39;s PATH 
  &lt;ul&gt; 
   &lt;li&gt;You can verify if ADB is in your PATH by running &lt;code&gt;which adb&lt;/code&gt; in a terminal. If it prints the filepath to where ADB is installed, you&#39;re set! Otherwise, try following one of these guides: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/652936/adding-android-sdk-platform-tools-to-path-downloaded-from-umake&quot;&gt;linux&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.repeato.app/setting-up-adb-on-macos-a-step-by-step-guide/&quot;&gt;macOS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://medium.com/@yadav-ajay/a-step-by-step-guide-to-setting-up-adb-path-on-windows-0b833faebf18&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;If you&#39;re on x86 linux&lt;/h3&gt; 
&lt;p&gt;Install rust the usual way and then install cross compiling dependences:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install curl build-essential libc6-armhf-cross libc6-dev-armhf-cross gcc-arm-linux-gnueabihf
rustup target add x86_64-unknown-linux-gnu
rustup target add armv7-unknown-linux-gnueabihf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can root your device and install Rayhunter by running &lt;code&gt;./tools/install-dev.sh&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;If you&#39;re on windows or can&#39;t run the install scripts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Root your device on windows using the instructions here: &lt;a href=&quot;https://xdaforums.com/t/resetting-verizon-orbic-speed-rc400l-firmware-flash-kajeet.4334899/#post-87855183&quot;&gt;https://xdaforums.com/t/resetting-verizon-orbic-speed-rc400l-firmware-flash-kajeet.4334899/#post-87855183&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build for arm using &lt;code&gt;cargo build&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run tests using &lt;code&gt;cargo test_pc&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Push the scripts in &lt;code&gt;scripts/&lt;/code&gt; to &lt;code&gt;/etc/init.d&lt;/code&gt; on device and make a directory called &lt;code&gt;/data/rayhunter&lt;/code&gt; using &lt;code&gt;adb shell&lt;/code&gt; (and sshell for your root shell if you followed the steps above)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;you also need to copy &lt;code&gt;config.toml.example&lt;/code&gt; to &lt;code&gt;/data/rayhunter/config.toml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Then run &lt;code&gt;./make.sh&lt;/code&gt; this will build the binary and push it over adb. Restart your device or run &lt;code&gt;/etc/init.d/rayhunter_daemon start&lt;/code&gt; on the device and you are good to go.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Write your code and write tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build for arm using &lt;code&gt;cargo build&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run tests using &lt;code&gt;cargo test_pc&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;push to the device with &lt;code&gt;./make.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support and Discussion&lt;/h2&gt; 
&lt;p&gt;If you&#39;re having issues installing or using Rayhunter, please open an issue in this repo. Join us in the &lt;code&gt;#rayhunter&lt;/code&gt; channel of &lt;a href=&quot;https://opensource.eff.org/signup_user_complete/?id=6iqur37ucfrctfswrs14iscobw&amp;amp;md=link&amp;amp;sbr=su&quot;&gt;EFF&#39;s Mattermost&lt;/a&gt; instance to chat!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Build docs locally using &lt;code&gt;RUSTDOCFLAGS=&quot;--cfg docsrs&quot; cargo doc --no-deps --all-features --open&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;LEGAL DISCLAIMER:&lt;/strong&gt; Use this program at your own risk. We beilieve running this program does not currently violate any laws or regulations in the United States. However, we are not responsible for civil or criminal liability resulting from the use of this software. If you are located outside of the US please consult with an attorney in your country to help you assess the legal risks of running this program.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Good Hunting!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gleam-lang/gleam</title>
      <link>https://github.com/gleam-lang/gleam</link>
      <description>&lt;p&gt;⭐️ A friendly language for building type-safe, scalable systems!&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gleam-lang/gleam/main/images/lucy.png&quot; alt=&quot;Lucy, Gleam&#39;s mascot&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/gleam-lang/gleam/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/gleam-lang/gleam&quot; alt=&quot;GitHub release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/Fm8Pwmy&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/768594524158427167?color=blue&quot; alt=&quot;Discord chat&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;!-- A spacer --&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;p&gt;Gleam is a friendly language for building type-safe systems that scale! For more information see &lt;a href=&quot;https://gleam.run&quot;&gt;the website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Gleam is kindly supported by its sponsors. If you would like to support Gleam please consider sponsoring its development &lt;a href=&quot;https://github.com/sponsors/lpil&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Thank you to our sponsors! Gleam would not be possible without you.&lt;/p&gt; 
&lt;!-- Below this line this file is autogenerated --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/agundy&quot;&gt;Aaron Gunderson&lt;/a&gt; - &lt;a href=&quot;https://github.com/zeroows&quot;&gt;Abdulrhman Alkhodiry&lt;/a&gt; - &lt;a href=&quot;https://github.com/abeljim&quot;&gt;Abel Jimenez&lt;/a&gt; - &lt;a href=&quot;https://github.com/ad-ops&quot;&gt;ad-ops&lt;/a&gt; - &lt;a href=&quot;https://github.com/AdamBrodzinski&quot;&gt;Adam Brodzinski&lt;/a&gt; - &lt;a href=&quot;https://github.com/adjohnston&quot;&gt;Adam Johnston&lt;/a&gt; - &lt;a href=&quot;https://github.com/adam-wyluda&quot;&gt;Adam Wyłuda&lt;/a&gt; - &lt;a href=&quot;https://github.com/thebugcatcher&quot;&gt;Adi Iyengar&lt;/a&gt; - &lt;a href=&quot;https://github.com/amouat&quot;&gt;Adrian Mouat&lt;/a&gt; - &lt;a href=&quot;https://github.com/JitPackJoyride&quot;&gt;Ajit Krishna&lt;/a&gt; - &lt;a href=&quot;https://github.com/Guria&quot;&gt;Aleksei Gurianov&lt;/a&gt; - &lt;a href=&quot;https://alembic.com.au&quot;&gt;Alembic&lt;/a&gt; - &lt;a href=&quot;https://github.com/eelmafia&quot;&gt;Alex&lt;/a&gt; - &lt;a href=&quot;https://github.com/ahouseago&quot;&gt;Alex Houseago&lt;/a&gt; - &lt;a href=&quot;https://github.com/rawhat&quot;&gt;Alex Manning&lt;/a&gt; - &lt;a href=&quot;https://github.com/aexvir&quot;&gt;Alex Viscreanu&lt;/a&gt; - &lt;a href=&quot;https://github.com/akoutmos&quot;&gt;Alexander Koutmos&lt;/a&gt; - &lt;a href=&quot;https://github.com/muonoum&quot;&gt;Alexander Stensrud&lt;/a&gt; - &lt;a href=&quot;https://github.com/defgenx&quot;&gt;Alexandre Del Vecchio&lt;/a&gt; - &lt;a href=&quot;https://github.com/Acepie&quot;&gt;Ameen Radwan&lt;/a&gt; - &lt;a href=&quot;https://github.com/abueide&quot;&gt;Andrea Bueide&lt;/a&gt; - &lt;a href=&quot;https://github.com/AndreHogberg&quot;&gt;AndreHogberg&lt;/a&gt; - &lt;a href=&quot;https://github.com/andrewmuratov&quot;&gt;Andrew Muratov&lt;/a&gt; - &lt;a href=&quot;https://github.com/antharuu&quot;&gt;Antharuu&lt;/a&gt; - &lt;a href=&quot;https://github.com/anthony-khong&quot;&gt;Anthony Khong&lt;/a&gt; - &lt;a href=&quot;https://github.com/Illbjorn&quot;&gt;Anthony Maxwell&lt;/a&gt; - &lt;a href=&quot;https://github.com/amscotti&quot;&gt;Anthony Scotti&lt;/a&gt; - &lt;a href=&quot;https://github.com/aweagel&quot;&gt;Arthur Weagel&lt;/a&gt; - &lt;a href=&quot;https://github.com/aryairani&quot;&gt;Arya Irani&lt;/a&gt; - &lt;a href=&quot;https://github.com/azureflash&quot;&gt;Azure Flash&lt;/a&gt; - &lt;a href=&quot;https://github.com/chiroptical&quot;&gt;Barry Moore&lt;/a&gt; - &lt;a href=&quot;https://github.com/bartekgorny&quot;&gt;Bartek Górny&lt;/a&gt; - &lt;a href=&quot;https://github.com/requestben&quot;&gt;Ben Martin&lt;/a&gt; - &lt;a href=&quot;https://github.com/bgmarx&quot;&gt;Ben Marx&lt;/a&gt; - &lt;a href=&quot;https://github.com/benmyles&quot;&gt;Ben Myles&lt;/a&gt; - &lt;a href=&quot;https://github.com/bbkane&quot;&gt;Benjamin Kane&lt;/a&gt; - &lt;a href=&quot;https://github.com/drteeth&quot;&gt;Benjamin Moss&lt;/a&gt; - &lt;a href=&quot;https://github.com/bgwdotdev&quot;&gt;bgw&lt;/a&gt; - &lt;a href=&quot;https://github.com/bjartelund&quot;&gt;Bjarte Aarmo Lund&lt;/a&gt; - &lt;a href=&quot;https://github.com/00bpa&quot;&gt;Bjoern Paschen&lt;/a&gt; - &lt;a href=&quot;https://github.com/bmehder&quot;&gt;Brad Mehder&lt;/a&gt; - &lt;a href=&quot;https://github.com/brendisurfs&quot;&gt;Brendan P. &lt;/a&gt; - &lt;a href=&quot;https://github.com/brettkolodny&quot;&gt;brettkolodny&lt;/a&gt; - &lt;a href=&quot;https://github.com/brian-dawn&quot;&gt;Brian Dawn&lt;/a&gt; - &lt;a href=&quot;https://github.com/bglusman&quot;&gt;Brian Glusman&lt;/a&gt; - &lt;a href=&quot;https://github.com/bruce&quot;&gt;Bruce Williams&lt;/a&gt; - &lt;a href=&quot;https://github.com/nono&quot;&gt;Bruno Michel&lt;/a&gt; - &lt;a href=&quot;https://github.com/bucsi&quot;&gt;bucsi&lt;/a&gt; - &lt;a href=&quot;https://github.com/camray&quot;&gt;Cam Ray&lt;/a&gt; - &lt;a href=&quot;https://github.com/cameronpresley&quot;&gt;Cameron Presley&lt;/a&gt; - &lt;a href=&quot;https://github.com/carlomunguia&quot;&gt;Carlo Munguia&lt;/a&gt; - &lt;a href=&quot;https://github.com/csaltos&quot;&gt;Carlos Saltos&lt;/a&gt; - &lt;a href=&quot;https://github.com/chadselph&quot;&gt;Chad Selph&lt;/a&gt; - &lt;a href=&quot;https://github.com/ctdio&quot;&gt;Charlie Duong&lt;/a&gt; - &lt;a href=&quot;https://github.com/charlie-n01r&quot;&gt;Charlie Govea&lt;/a&gt; - &lt;a href=&quot;https://github.com/choonkeat&quot;&gt;Chew Choon Keat&lt;/a&gt; - &lt;a href=&quot;https://github.com/ceedon&quot;&gt;Chris Donnelly&lt;/a&gt; - &lt;a href=&quot;https://github.com/Morzaram&quot;&gt;Chris King&lt;/a&gt; - &lt;a href=&quot;https://github.com/chrislloyd&quot;&gt;Chris Lloyd&lt;/a&gt; - &lt;a href=&quot;https://github.com/utilForever&quot;&gt;Chris Ohk&lt;/a&gt; - &lt;a href=&quot;https://github.com/Chriscbr&quot;&gt;Chris Rybicki&lt;/a&gt; - &lt;a href=&quot;https://github.com/christophershirk&quot;&gt;Christopher David Shirk&lt;/a&gt; - &lt;a href=&quot;https://github.com/devries&quot;&gt;Christopher De Vries&lt;/a&gt; - &lt;a href=&quot;https://github.com/cdaringe&quot;&gt;Christopher Dieringer&lt;/a&gt; - &lt;a href=&quot;https://github.com/christopherhjung&quot;&gt;Christopher Jung&lt;/a&gt; - &lt;a href=&quot;https://github.com/christhekeele&quot;&gt;Christopher Keele&lt;/a&gt; - &lt;a href=&quot;https://github.com/specialblend&quot;&gt;CJ Salem&lt;/a&gt; - &lt;a href=&quot;https://github.com/clangley&quot;&gt;clangley&lt;/a&gt; - &lt;a href=&quot;https://github.com/CliffordAnderson&quot;&gt;Clifford Anderson&lt;/a&gt; - &lt;a href=&quot;https://github.com/coder&quot;&gt;Coder&lt;/a&gt; - &lt;a href=&quot;https://github.com/colelawrence&quot;&gt;Cole Lawrence&lt;/a&gt; - &lt;a href=&quot;https://github.com/insanitybit&quot;&gt;Colin&lt;/a&gt; - &lt;a href=&quot;https://github.com/Comamoca&quot;&gt;Comamoca&lt;/a&gt; - &lt;a href=&quot;https://github.com/Lucostus&quot;&gt;Constantin (Cleo) Winkler&lt;/a&gt; - &lt;a href=&quot;https://github.com/jcorentin&quot;&gt;Corentin J.&lt;/a&gt; - &lt;a href=&quot;https://github.com/sdaigo&quot;&gt;Daigo Shitara&lt;/a&gt; - &lt;a href=&quot;https://github.com/dvic&quot;&gt;Damir Vandic&lt;/a&gt; - &lt;a href=&quot;https://github.com/ddresselhaus&quot;&gt;Dan Dresselhaus&lt;/a&gt; - &lt;a href=&quot;https://github.com/strongoose&quot;&gt;Dan Strong&lt;/a&gt; - &lt;a href=&quot;https://github.com/DanielleMaywood&quot;&gt;Danielle Maywood&lt;/a&gt; - &lt;a href=&quot;https://github.com/pinnet&quot;&gt;Danny Arnold&lt;/a&gt; - &lt;a href=&quot;https://github.com/despairblue&quot;&gt;Danny Martini&lt;/a&gt; - &lt;a href=&quot;https://github.com/davydog187&quot;&gt;Dave Lucia&lt;/a&gt; - &lt;a href=&quot;https://github.com/dbernheisel&quot;&gt;David Bernheisel&lt;/a&gt; - &lt;a href=&quot;https://github.com/davidcornu&quot;&gt;David Cornu&lt;/a&gt; - &lt;a href=&quot;https://github.com/davesnx&quot;&gt;David Sancho&lt;/a&gt; - &lt;a href=&quot;https://github.com/dangdennis&quot;&gt;Dennis Dang&lt;/a&gt; - &lt;a href=&quot;https://github.com/dennistruemper&quot;&gt;dennistruemper&lt;/a&gt; - &lt;a href=&quot;https://github.com/diemogebhardt&quot;&gt;Diemo Gebhardt&lt;/a&gt; - &lt;a href=&quot;https://github.com/dmmulroy&quot;&gt;Dillon Mulroy&lt;/a&gt; - &lt;a href=&quot;https://github.com/gothy&quot;&gt;Dima Utkin&lt;/a&gt; - &lt;a href=&quot;https://github.com/poroh&quot;&gt;Dmitry Poroh&lt;/a&gt; - &lt;a href=&quot;https://github.com/DoctorCobweb&quot;&gt;DoctorCobweb&lt;/a&gt; - &lt;a href=&quot;https://github.com/floodfx&quot;&gt;Donnie Flood&lt;/a&gt; - &lt;a href=&quot;https://github.com/ds2600&quot;&gt;ds2600&lt;/a&gt; - &lt;a href=&quot;https://github.com/gdcrisp&quot;&gt;Dylan Carlson&lt;/a&gt; - &lt;a href=&quot;https://github.com/edhinrichsen&quot;&gt;Ed Hinrichsen&lt;/a&gt; - &lt;a href=&quot;https://github.com/edongashi&quot;&gt;Edon Gashi&lt;/a&gt; - &lt;a href=&quot;https://github.com/enoonan&quot;&gt;Eileen Noonan&lt;/a&gt; - &lt;a href=&quot;https://github.com/dropwhile&quot;&gt;eli&lt;/a&gt; - &lt;a href=&quot;https://github.com/Emma-Fuller&quot;&gt;Emma&lt;/a&gt; - &lt;a href=&quot;https://github.com/EMRTS&quot;&gt;EMR Technical Solutions&lt;/a&gt; - &lt;a href=&quot;https://github.com/yellowsman&quot;&gt;Endo Shogo&lt;/a&gt; - &lt;a href=&quot;https://github.com/ekosz&quot;&gt;Eric Koslow&lt;/a&gt; - &lt;a href=&quot;https://github.com/eterps&quot;&gt;Erik Terpstra&lt;/a&gt; - &lt;a href=&quot;https://liberapay.com/erikareads/&quot;&gt;erikareads&lt;/a&gt; - &lt;a href=&quot;https://github.com/ErikML&quot;&gt;ErikML&lt;/a&gt; - &lt;a href=&quot;https://github.com/erlend-axelsson&quot;&gt;erlend-axelsson&lt;/a&gt; - &lt;a href=&quot;https://github.com/oberernst&quot;&gt;Ernesto Malave&lt;/a&gt; - &lt;a href=&quot;https://github.com/EthanOlpin&quot;&gt;Ethan Olpin&lt;/a&gt; - &lt;a href=&quot;https://github.com/evaldobratti&quot;&gt;Evaldo Bratti&lt;/a&gt; - &lt;a href=&quot;https://github.com/evanj2357&quot;&gt;Evan Johnson&lt;/a&gt; - &lt;a href=&quot;https://github.com/evanasse&quot;&gt;evanasse&lt;/a&gt; - &lt;a href=&quot;https://github.com/fabridamicelli&quot;&gt;Fabrizio Damicelli&lt;/a&gt; - &lt;a href=&quot;https://github.com/fmesteban&quot;&gt;Fede Esteban&lt;/a&gt; - &lt;a href=&quot;https://github.com/yerTools&quot;&gt;Felix Mayer&lt;/a&gt; - &lt;a href=&quot;https://github.com/nandofarias&quot;&gt;Fernando Farias&lt;/a&gt; - &lt;a href=&quot;https://github.com/ffigiel&quot;&gt;Filip Figiel&lt;/a&gt; - &lt;a href=&quot;https://github.com/floriank&quot;&gt;Florian Kraft&lt;/a&gt; - &lt;a href=&quot;https://github.com/francishamel&quot;&gt;Francis Hamel&lt;/a&gt; - &lt;a href=&quot;https://github.com/Frank-III&quot;&gt;frankwang&lt;/a&gt; - &lt;a href=&quot;https://github.com/gvrooyen&quot;&gt;G-J van Rooyen&lt;/a&gt; - &lt;a href=&quot;https://github.com/gabrielvincent&quot;&gt;Gabriel Vincent&lt;/a&gt; - &lt;a href=&quot;https://github.com/gahjelle&quot;&gt;Geir Arne Hjelle&lt;/a&gt; - &lt;a href=&quot;https://github.com/brasilikum&quot;&gt;Georg Hartmann&lt;/a&gt; - &lt;a href=&quot;https://github.com/george-grec&quot;&gt;George&lt;/a&gt; - &lt;a href=&quot;https://github.com/gmartsenkov&quot;&gt;Georgi Martsenkov&lt;/a&gt; - &lt;a href=&quot;https://github.com/ggobbe&quot;&gt;ggobbe&lt;/a&gt; - &lt;a href=&quot;https://github.com/giacomocavalieri&quot;&gt;Giacomo Cavalieri&lt;/a&gt; - &lt;a href=&quot;https://github.com/giovannibonetti&quot;&gt;Giovanni Kock Bonetti&lt;/a&gt; - &lt;a href=&quot;https://github.com/GV14982&quot;&gt;Graham Vasquez&lt;/a&gt; - &lt;a href=&quot;https://github.com/grottohub&quot;&gt;grotto&lt;/a&gt; - &lt;a href=&quot;https://github.com/nirev&quot;&gt;Guilherme de Maio&lt;/a&gt; - &lt;a href=&quot;https://github.com/guillheu&quot;&gt;Guillaume Heu&lt;/a&gt; - &lt;a href=&quot;https://github.com/ghivert&quot;&gt;Guillaume Hivert&lt;/a&gt; - &lt;a href=&quot;https://github.com/hammad-r-javed&quot;&gt;Hammad Javed&lt;/a&gt; - &lt;a href=&quot;https://github.com/kwando&quot;&gt;Hannes Nevalainen&lt;/a&gt; - &lt;a href=&quot;https://github.com/ildorn&quot;&gt;Hannes Schnaitter&lt;/a&gt; - &lt;a href=&quot;https://github.com/oderwat&quot;&gt;Hans Raaf&lt;/a&gt; - &lt;a href=&quot;https://github.com/hayleigh-dot-dev&quot;&gt;Hayleigh Thompson&lt;/a&gt; - &lt;a href=&quot;https://github.com/hibachrach&quot;&gt;Hazel Bachrach&lt;/a&gt; - &lt;a href=&quot;https://github.com/hdahlheim&quot;&gt;Henning Dahlheim&lt;/a&gt; - &lt;a href=&quot;https://github.com/tudborg&quot;&gt;Henrik Tudborg&lt;/a&gt; - &lt;a href=&quot;https://github.com/henrysdev&quot;&gt;Henry Warren&lt;/a&gt; - &lt;a href=&quot;https://github.com/losfair&quot;&gt;Heyang Zhou&lt;/a&gt; - &lt;a href=&quot;https://github.com/hubertmalkowski&quot;&gt;Hubert Małkowski&lt;/a&gt; - &lt;a href=&quot;https://github.com/human154&quot;&gt;human154&lt;/a&gt; - &lt;a href=&quot;https://github.com/hpiaia&quot;&gt;Humberto Piaia&lt;/a&gt; - &lt;a href=&quot;https://github.com/iainh&quot;&gt;Iain H&lt;/a&gt; - &lt;a href=&quot;https://github.com/Ian-GL&quot;&gt;Ian González&lt;/a&gt; - &lt;a href=&quot;https://github.com/ianmjones&quot;&gt;Ian M. Jones&lt;/a&gt; - &lt;a href=&quot;https://github.com/igordsm&quot;&gt;Igor Montagner&lt;/a&gt; - &lt;a href=&quot;https://github.com/irumiha&quot;&gt;Igor Rumiha&lt;/a&gt; - &lt;a href=&quot;https://github.com/nilliax&quot;&gt;ILLIA NEGOVORA&lt;/a&gt; - &lt;a href=&quot;https://github.com/intarga&quot;&gt;Ingrid&lt;/a&gt; - &lt;a href=&quot;https://github.com/inoas&quot;&gt;inoas&lt;/a&gt; - &lt;a href=&quot;https://github.com/graphiteisaac&quot;&gt;Isaac&lt;/a&gt; - &lt;a href=&quot;https://github.com/isaacharrisholt&quot;&gt;Isaac Harris-Holt&lt;/a&gt; - &lt;a href=&quot;https://github.com/imcquee&quot;&gt;Isaac McQueen&lt;/a&gt; - &lt;a href=&quot;https://github.com/ismaelga&quot;&gt;Ismael Abreu&lt;/a&gt; - &lt;a href=&quot;https://github.com/bozso&quot;&gt;István Bozsó&lt;/a&gt; - &lt;a href=&quot;https://github.com/ivarvong&quot;&gt;Ivar Vong&lt;/a&gt; - &lt;a href=&quot;https://github.com/jacobdalamb&quot;&gt;Jacob Lamb&lt;/a&gt; - &lt;a href=&quot;https://github.com/jakecleary&quot;&gt;Jake Cleary&lt;/a&gt; - &lt;a href=&quot;https://github.com/jzwood&quot;&gt;Jake Wood&lt;/a&gt; - &lt;a href=&quot;https://github.com/jakob753951&quot;&gt;Jakob Ladegaard Møller&lt;/a&gt; - &lt;a href=&quot;https://github.com/jamesbirtles&quot;&gt;James Birtles&lt;/a&gt; - &lt;a href=&quot;https://github.com/jamesmacaulay&quot;&gt;James MacAulay&lt;/a&gt; - &lt;a href=&quot;https://github.com/janpieper&quot;&gt;Jan Pieper&lt;/a&gt; - &lt;a href=&quot;https://github.com/monzool&quot;&gt;Jan Skriver Sørensen&lt;/a&gt; - &lt;a href=&quot;https://github.com/MightyGoldenOctopus&quot;&gt;Jean-Adrien Ducastaing&lt;/a&gt; - &lt;a href=&quot;https://github.com/jlgeering&quot;&gt;Jean-Luc Geering&lt;/a&gt; - &lt;a href=&quot;https://github.com/okkdev&quot;&gt;Jen Stehlik&lt;/a&gt; - &lt;a href=&quot;https://github.com/shepherdjerred&quot;&gt;Jerred Shepherd&lt;/a&gt; - &lt;a href=&quot;https://github.com/jiangplus&quot;&gt;jiangplus&lt;/a&gt; - &lt;a href=&quot;https://github.com/hunkyjimpjorps&quot;&gt;Jimpjorps™&lt;/a&gt; - &lt;a href=&quot;https://github.com/joeykilpatrick&quot;&gt;Joey Kilpatrick&lt;/a&gt; - &lt;a href=&quot;https://github.com/joeytrapp&quot;&gt;Joey Trapp&lt;/a&gt; - &lt;a href=&quot;https://github.com/johan-st&quot;&gt;Johan Strand&lt;/a&gt; - &lt;a href=&quot;https://github.com/JohnBjrk&quot;&gt;John Björk&lt;/a&gt; - &lt;a href=&quot;https://github.com/johngallagher&quot;&gt;John Gallagher&lt;/a&gt; - &lt;a href=&quot;https://github.com/jmpavlick&quot;&gt;John Pavlick&lt;/a&gt; - &lt;a href=&quot;https://github.com/jrstrunk&quot;&gt;John Strunk&lt;/a&gt; - &lt;a href=&quot;https://github.com/xjojorx&quot;&gt;Jojor&lt;/a&gt; - &lt;a href=&quot;https://github.com/jonlambert&quot;&gt;Jon Lambert&lt;/a&gt; - &lt;a href=&quot;https://github.com/igern&quot;&gt;Jonas E. P&lt;/a&gt; - &lt;a href=&quot;https://github.com/JonasHedEng&quot;&gt;Jonas Hedman Engström&lt;/a&gt; - &lt;a href=&quot;https://github.com/jooaf&quot;&gt;jooaf&lt;/a&gt; - &lt;a href=&quot;https://github.com/joseph-lozano&quot;&gt;Joseph Lozano&lt;/a&gt; - &lt;a href=&quot;https://github.com/joshocalico&quot;&gt;Joshua Steele&lt;/a&gt; - &lt;a href=&quot;https://github.com/Nineluj&quot;&gt;Julian Hirn&lt;/a&gt; - &lt;a href=&quot;https://liberapay.com/d2quadra/&quot;&gt;Julian Lukwata&lt;/a&gt; - &lt;a href=&quot;https://github.com/schurhammer&quot;&gt;Julian Schurhammer&lt;/a&gt; - &lt;a href=&quot;https://github.com/justinlubin&quot;&gt;Justin Lubin&lt;/a&gt; - &lt;a href=&quot;https://github.com/Neofox&quot;&gt;Jérôme Schaeffer&lt;/a&gt; - &lt;a href=&quot;https://github.com/jkbrinso&quot;&gt;Kemp Brinson&lt;/a&gt; - &lt;a href=&quot;https://github.com/keroami&quot;&gt;Kero van Gelder&lt;/a&gt; - &lt;a href=&quot;https://github.com/kevinschweikert&quot;&gt;Kevin Schweikert&lt;/a&gt; - &lt;a href=&quot;https://github.com/hamptokr&quot;&gt;Kramer Hampton&lt;/a&gt; - &lt;a href=&quot;https://github.com/Bearfinn&quot;&gt;Kritsada Sunthornwutthikrai&lt;/a&gt; - &lt;a href=&quot;https://github.com/krystofrezac&quot;&gt;Kryštof Řezáč&lt;/a&gt; - &lt;a href=&quot;https://github.com/krzysztofgb&quot;&gt;Krzysztof G.&lt;/a&gt; - &lt;a href=&quot;https://github.com/leostera&quot;&gt;Leandro Ostera&lt;/a&gt; - &lt;a href=&quot;https://github.com/leejarvis&quot;&gt;Lee Jarvis&lt;/a&gt; - &lt;a href=&quot;https://github.com/leonqadirie&quot;&gt;Leon Qadirie&lt;/a&gt; - &lt;a href=&quot;https://github.com/LeartS&quot;&gt;Leonardo Donelli&lt;/a&gt; - &lt;a href=&quot;https://github.com/defp&quot;&gt;lidashuang&lt;/a&gt; - &lt;a href=&quot;https://github.com/LilyRose2798&quot;&gt;Lily Rose&lt;/a&gt; - &lt;a href=&quot;https://github.com/nnuuvv&quot;&gt;liv&lt;/a&gt; - &lt;a href=&quot;https://github.com/wowi42&quot;&gt;Loïc Tosser&lt;/a&gt; - &lt;a href=&quot;https://github.com/lucaspellegrinelli&quot;&gt;Lucas Pellegrinelli&lt;/a&gt; - &lt;a href=&quot;https://github.com/lbjarre&quot;&gt;Lukas Bjarre&lt;/a&gt; - &lt;a href=&quot;https://github.com/lukasmeihsner&quot;&gt;Lukas Meihsner&lt;/a&gt; - &lt;a href=&quot;https://github.com/lamdor&quot;&gt;Luke Amdor&lt;/a&gt; - &lt;a href=&quot;https://github.com/2kool4idkwhat&quot;&gt;Luna&lt;/a&gt; - &lt;a href=&quot;https://github.com/manuel-rubio&quot;&gt;Manuel Rubio&lt;/a&gt; - &lt;a href=&quot;https://github.com/ideaMarcos&quot;&gt;Marcos&lt;/a&gt; - &lt;a href=&quot;https://github.com/marcusandre&quot;&gt;marcusandre&lt;/a&gt; - &lt;a href=&quot;https://github.com/AYM1607&quot;&gt;Mariano Uvalle&lt;/a&gt; - &lt;a href=&quot;https://github.com/mariuskalvo&quot;&gt;Marius Kalvø&lt;/a&gt; - &lt;a href=&quot;https://github.com/markholmes&quot;&gt;Mark Holmes&lt;/a&gt; - &lt;a href=&quot;https://github.com/markmark206&quot;&gt;Mark Markaryan&lt;/a&gt; - &lt;a href=&quot;https://github.com/foresterre&quot;&gt;Martijn Gribnau&lt;/a&gt; - &lt;a href=&quot;https://github.com/Janiczek&quot;&gt;Martin Janiczek&lt;/a&gt; - &lt;a href=&quot;https://github.com/poelstra&quot;&gt;Martin Poelstra&lt;/a&gt; - &lt;a href=&quot;https://github.com/rechsteiner&quot;&gt;Martin Rechsteiner &lt;/a&gt; - &lt;a href=&quot;https://github.com/martonkaufmann&quot;&gt;martonkaufmann&lt;/a&gt; - &lt;a href=&quot;https://github.com/han-tyumi&quot;&gt;Matt Champagne&lt;/a&gt; - &lt;a href=&quot;https://github.com/mhheise&quot;&gt;Matt Heise&lt;/a&gt; - &lt;a href=&quot;https://github.com/m&quot;&gt;Matt Mullenweg&lt;/a&gt; - &lt;a href=&quot;https://github.com/matthewrobinsondev&quot;&gt;Matt Robinson&lt;/a&gt; - &lt;a href=&quot;https://github.com/matt-savvy&quot;&gt;Matt Savoia&lt;/a&gt; - &lt;a href=&quot;https://github.com/mattvanhorn&quot;&gt;Matt Van Horn&lt;/a&gt; - &lt;a href=&quot;https://github.com/mwhitworth&quot;&gt;Matthew Whitworth&lt;/a&gt; - &lt;a href=&quot;https://github.com/maxmcd&quot;&gt;Max McDonnell&lt;/a&gt; - &lt;a href=&quot;https://github.com/metame&quot;&gt;metame&lt;/a&gt; - &lt;a href=&quot;https://github.com/metatexx&quot;&gt;METATEXX GmbH&lt;/a&gt; - &lt;a href=&quot;https://github.com/amiroff&quot;&gt;Metin Emiroğlu&lt;/a&gt; - &lt;a href=&quot;https://github.com/stunthamster&quot;&gt;Michael Duffy&lt;/a&gt; - &lt;a href=&quot;https://github.com/michaeljones&quot;&gt;Michael Jones&lt;/a&gt; - &lt;a href=&quot;https://github.com/monocursive&quot;&gt;Michael Mazurczak&lt;/a&gt; - &lt;a href=&quot;https://github.com/mrmcc3&quot;&gt;Michael McClintock&lt;/a&gt; - &lt;a href=&quot;https://github.com/karlsson&quot;&gt;Mikael Karlsson&lt;/a&gt; - &lt;a href=&quot;https://github.com/mroach&quot;&gt;Mike Roach&lt;/a&gt; - &lt;a href=&quot;https://liberapay.com/mikej/&quot;&gt;Mikey J&lt;/a&gt; - &lt;a href=&quot;https://github.com/MoeDevelops&quot;&gt;MoeDev&lt;/a&gt; - &lt;a href=&quot;https://github.com/rykawamu&quot;&gt;MzRyuKa&lt;/a&gt; - &lt;a href=&quot;https://github.com/n8nio&quot;&gt;n8n - Workflow Automation&lt;/a&gt; - &lt;a href=&quot;https://github.com/natanaelsirqueira&quot;&gt;Natanael Sirqueira&lt;/a&gt; - &lt;a href=&quot;https://github.com/nathanielknight&quot;&gt;Nathaniel Knight&lt;/a&gt; - &lt;a href=&quot;https://github.com/Kuuuuuuuu&quot;&gt;Nayuki&lt;/a&gt; - &lt;a href=&quot;https://github.com/NFIBrokerage&quot;&gt;NFIBrokerage&lt;/a&gt; - &lt;a href=&quot;https://github.com/nchapman&quot;&gt;Nick Chapman&lt;/a&gt; - &lt;a href=&quot;https://github.com/ndreynolds&quot;&gt;Nick Reynolds&lt;/a&gt; - &lt;a href=&quot;https://github.com/NicklasXYZ&quot;&gt;Nicklas Sindlev Andersen&lt;/a&gt; - &lt;a href=&quot;https://github.com/NicoVIII&quot;&gt;NicoVIII&lt;/a&gt; - &lt;a href=&quot;https://github.com/mrniket&quot;&gt;Niket Shah&lt;/a&gt; - &lt;a href=&quot;https://github.com/blink1415&quot;&gt;Nikolai S. K.&lt;/a&gt; - &lt;a href=&quot;https://github.com/ninanomenon&quot;&gt;Ninaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/a&gt; - &lt;a href=&quot;http://www.ninefx.com&quot;&gt;NineFX&lt;/a&gt; - &lt;a href=&quot;https://github.com/nomio&quot;&gt;Nomio&lt;/a&gt; - &lt;a href=&quot;https://github.com/oceanlewis&quot;&gt;Ocean&lt;/a&gt; - &lt;a href=&quot;https://github.com/osebelin&quot;&gt;Olaf Sebelin&lt;/a&gt; - &lt;a href=&quot;https://github.com/OldhamMade&quot;&gt;OldhamMade&lt;/a&gt; - &lt;a href=&quot;https://github.com/CanadaHonk&quot;&gt;Oliver Medhurst&lt;/a&gt; - &lt;a href=&quot;https://github.com/otosky&quot;&gt;Oliver Tosky&lt;/a&gt; - &lt;a href=&quot;https://github.com/optizio&quot;&gt;optizio&lt;/a&gt; - &lt;a href=&quot;https://github.com/Davorak&quot;&gt;Patrick Wheeler&lt;/a&gt; - &lt;a href=&quot;https://github.com/pguse&quot;&gt;Paul Guse&lt;/a&gt; - &lt;a href=&quot;https://github.com/biernacki&quot;&gt;Pawel Biernacki&lt;/a&gt; - &lt;a href=&quot;https://github.com/Tulkdan&quot;&gt;Pedro Correa&lt;/a&gt; - &lt;a href=&quot;https://github.com/petejodo&quot;&gt;Pete Jodo&lt;/a&gt; - &lt;a href=&quot;https://github.com/pvsr&quot;&gt;Peter Rice&lt;/a&gt; - &lt;a href=&quot;https://github.com/philpax&quot;&gt;Philpax&lt;/a&gt; - &lt;a href=&quot;https://github.com/pierrot-lc&quot;&gt;Pierrot&lt;/a&gt; - &lt;a href=&quot;https://github.com/qdentity&quot;&gt;Qdentity&lt;/a&gt; - &lt;a href=&quot;https://github.com/raquentin&quot;&gt;Race Williams&lt;/a&gt; - &lt;a href=&quot;https://github.com/stoft&quot;&gt;Rasmus&lt;/a&gt; - &lt;a href=&quot;https://github.com/ray-delossantos&quot;&gt;Ray&lt;/a&gt; - &lt;a href=&quot;https://github.com/chouzar&quot;&gt;Raúl Chouza &lt;/a&gt; - &lt;a href=&quot;https://github.com/renatillas&quot;&gt;re.natillas&lt;/a&gt; - &lt;a href=&quot;https://github.com/redmar&quot;&gt;Redmar Kerkhoff&lt;/a&gt; - &lt;a href=&quot;https://github.com/reillysiemens&quot;&gt;Reilly Tucker Siemens&lt;/a&gt; - &lt;a href=&quot;https://github.com/renatomassaro&quot;&gt;Renato Massaro&lt;/a&gt; - &lt;a href=&quot;https://github.com/renovatorruler&quot;&gt;Renovator&lt;/a&gt; - &lt;a href=&quot;https://github.com/richard-viney&quot;&gt;Richard Viney&lt;/a&gt; - &lt;a href=&quot;https://github.com/rico&quot;&gt;Rico Leuthold&lt;/a&gt; - &lt;a href=&quot;https://github.com/rinx&quot;&gt;Rintaro Okamura&lt;/a&gt; - &lt;a href=&quot;https://github.com/ripta&quot;&gt;Ripta Pasay&lt;/a&gt; - &lt;a href=&quot;https://github.com/robertwayne&quot;&gt;Rob&lt;/a&gt; - &lt;a href=&quot;https://github.com/TanklesXL&quot;&gt;Robert Attard&lt;/a&gt; - &lt;a href=&quot;https://github.com/rellen&quot;&gt;Robert Ellen&lt;/a&gt; - &lt;a href=&quot;https://github.com/malkomalko&quot;&gt;Robert Malko&lt;/a&gt; - &lt;a href=&quot;https://github.com/Papipo&quot;&gt;Rodrigo Álvarez&lt;/a&gt; - &lt;a href=&quot;https://liberapay.com/Karakunai/&quot;&gt;Ronan Harris&lt;/a&gt; - &lt;a href=&quot;https://github.com/rotabull&quot;&gt;Rotabull&lt;/a&gt; - &lt;a href=&quot;https://github.com/reinefjord&quot;&gt;Rupus Reinefjord&lt;/a&gt; - &lt;a href=&quot;https://github.com/ustitc&quot;&gt;Ruslan Ustitc&lt;/a&gt; - &lt;a href=&quot;https://github.com/mooreryan&quot;&gt;Ryan Moore&lt;/a&gt; - &lt;a href=&quot;https://github.com/samaaron&quot;&gt;Sam Aaron&lt;/a&gt; - &lt;a href=&quot;https://github.com/metruzanca&quot;&gt;Sam Zanca&lt;/a&gt; - &lt;a href=&quot;https://github.com/soulsam480&quot;&gt;sambit&lt;/a&gt; - &lt;a href=&quot;https://github.com/bkspace&quot;&gt;Sammy Isseyegh&lt;/a&gt; - &lt;a href=&quot;https://github.com/castletaste&quot;&gt;Savva&lt;/a&gt; - &lt;a href=&quot;https://github.com/sasa1977&quot;&gt;Saša Jurić&lt;/a&gt; - &lt;a href=&quot;https://github.com/scotttrinh&quot;&gt;Scott Trinh&lt;/a&gt; - &lt;a href=&quot;https://github.com/smweber&quot;&gt;Scott Weber&lt;/a&gt; - &lt;a href=&quot;https://github.com/scottwey&quot;&gt;Scott Wey&lt;/a&gt; - &lt;a href=&quot;https://github.com/star-szr&quot;&gt;Scott Zhu Reeves&lt;/a&gt; - &lt;a href=&quot;https://github.com/seancribbs&quot;&gt;Sean Cribbs&lt;/a&gt; - &lt;a href=&quot;https://github.com/seanjensengrey&quot;&gt;Sean Jensen-Grey&lt;/a&gt; - &lt;a href=&quot;https://github.com/SeanRoberts&quot;&gt;Sean Roberts&lt;/a&gt; - &lt;a href=&quot;https://github.com/sporto&quot;&gt;Sebastian Porto&lt;/a&gt; - &lt;a href=&quot;https://github.com/sekunho&quot;&gt;sekun&lt;/a&gt; - &lt;a href=&quot;https://github.com/tehprofessor&quot;&gt;Seve Salazar&lt;/a&gt; - &lt;a href=&quot;https://github.com/codemonkey76&quot;&gt;Shane Poppleton&lt;/a&gt; - &lt;a href=&quot;https://github.com/honsq90&quot;&gt;Shuqian Hon&lt;/a&gt; - &lt;a href=&quot;https://github.com/sigmasternchen&quot;&gt;Sigma&lt;/a&gt; - &lt;a href=&quot;https://github.com/simonewebdesign&quot;&gt;simone&lt;/a&gt; - &lt;a href=&quot;https://github.com/bytesource&quot;&gt;Stefan&lt;/a&gt; - &lt;a href=&quot;https://github.com/sthagen&quot;&gt;Stefan Hagen&lt;/a&gt; - &lt;a href=&quot;https://github.com/steinareliassen&quot;&gt;Steinar Eliassen&lt;/a&gt; - &lt;a href=&quot;https://github.com/Qard&quot;&gt;Stephen Belanger&lt;/a&gt; - &lt;a href=&quot;https://github.com/stvpwrs&quot;&gt;Steve Powers&lt;/a&gt; - &lt;a href=&quot;https://github.com/Strandinator&quot;&gt;Strandinator&lt;/a&gt; - &lt;a href=&quot;https://github.com/slafs&quot;&gt;Sławomir Ehlert&lt;/a&gt; - &lt;a href=&quot;https://github.com/Theosaurus-Rex&quot;&gt;Theo Harris&lt;/a&gt; - &lt;a href=&quot;https://github.com/thomaswhyyou&quot;&gt;Thomas&lt;/a&gt; - &lt;a href=&quot;https://github.com/tcoopman&quot;&gt;Thomas Coopman&lt;/a&gt; - &lt;a href=&quot;https://github.com/ernstla&quot;&gt;Thomas Ernst&lt;/a&gt; - &lt;a href=&quot;https://github.com/tmbrwn&quot;&gt;Tim Brown&lt;/a&gt; - &lt;a href=&quot;https://github.com/timgluz&quot;&gt;Timo Sulg&lt;/a&gt; - &lt;a href=&quot;https://github.com/tomjschuster&quot;&gt;Tom Schuster&lt;/a&gt; - &lt;a href=&quot;https://github.com/tomekowal&quot;&gt;Tomasz Kowal&lt;/a&gt; - &lt;a href=&quot;https://github.com/tommaisey&quot;&gt;tommaisey&lt;/a&gt; - &lt;a href=&quot;https://github.com/ThisGuyCodes&quot;&gt;Travis Johnson&lt;/a&gt; - &lt;a href=&quot;https://github.com/TristanCacqueray&quot;&gt;Tristan de Cacqueray&lt;/a&gt; - &lt;a href=&quot;https://github.com/tsloughter&quot;&gt;Tristan Sloughter&lt;/a&gt; - &lt;a href=&quot;https://github.com/lucamtudor&quot;&gt;Tudor Luca&lt;/a&gt; - &lt;a href=&quot;https://github.com/tymak&quot;&gt;tymak&lt;/a&gt; - &lt;a href=&quot;https://github.com/upsidedownsweetfood&quot;&gt;upsidedowncake&lt;/a&gt; - &lt;a href=&quot;https://github.com/vvzen&quot;&gt;Valerio Viperino&lt;/a&gt; - &lt;a href=&quot;https://github.com/sandsower&quot;&gt;Vic Valenzuela&lt;/a&gt; - &lt;a href=&quot;https://github.com/rodrigues&quot;&gt;Victor Rodrigues&lt;/a&gt; - &lt;a href=&quot;https://github.com/PerpetualPossum&quot;&gt;Viv Verner&lt;/a&gt; - &lt;a href=&quot;https://github.com/yelps&quot;&gt;Volker Rabe&lt;/a&gt; - &lt;a href=&quot;https://github.com/Whoops&quot;&gt;Walton Hoops&lt;/a&gt; - &lt;a href=&quot;https://github.com/weizhliu&quot;&gt;Weizheng Liu&lt;/a&gt; - &lt;a href=&quot;https://github.com/enkerewpo&quot;&gt;wheatfox&lt;/a&gt; - &lt;a href=&quot;https://github.com/Willyboar&quot;&gt;Willyboar&lt;/a&gt; - &lt;a href=&quot;https://github.com/wilsonsilva&quot;&gt;Wilson Silva&lt;/a&gt; - &lt;a href=&quot;https://github.com/HymanZHAN&quot;&gt;Xucong Zhan&lt;/a&gt; - &lt;a href=&quot;https://github.com/yamen&quot;&gt;Yamen Sader&lt;/a&gt; - &lt;a href=&quot;https://github.com/Yasuo-Higano&quot;&gt;Yasuo Higano&lt;/a&gt; - &lt;a href=&quot;https://github.com/yoshi-monster&quot;&gt;yoshi~ &lt;/a&gt; - &lt;a href=&quot;https://github.com/gasparinzsombor&quot;&gt;Zsombor Gasparin&lt;/a&gt; - &lt;a href=&quot;https://github.com/zwubs&quot;&gt;ZWubs&lt;/a&gt; - &lt;a href=&quot;https://liberapay.com/~1814730/&quot;&gt;~1814730&lt;/a&gt; - &lt;a href=&quot;https://liberapay.com/~1847917/&quot;&gt;~1847917&lt;/a&gt; - &lt;a href=&quot;https://liberapay.com/~1867501/&quot;&gt;~1867501&lt;/a&gt; - &lt;a href=&quot;https://github.com/eberfreitas&quot;&gt;Éber Freitas Dias&lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tauri-apps/tauri</title>
      <link>https://github.com/tauri-apps/tauri</link>
      <description>&lt;p&gt;Build smaller, faster, and more secure desktop and mobile applications with a web frontend.&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/splash.png&quot; alt=&quot;Tauri&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/tauri-apps/tauri/tree/dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/status-stable-blue.svg?sanitize=true&quot; alt=&quot;status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tauri&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/tauri-apps/tauri/actions/workflows/test-core.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/tauri-apps/tauri/test-core.yml?label=test%20core&amp;amp;logo=github&quot; alt=&quot;test core&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/SpmNs4S&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-discord-7289da.svg?sanitize=true&quot; alt=&quot;Chat Server&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://tauri.app&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/website-tauri.app-purple.svg?sanitize=true&quot; alt=&quot;website&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://good-labs.github.io/greater-good-affirmation&quot;&gt;&lt;img src=&quot;https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg?sanitize=true&quot; alt=&quot;https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tauri&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/sponsor-Open%20Collective-blue.svg?sanitize=true&quot; alt=&quot;support&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Tauri is a framework for building tiny, blazingly fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface. The backend of the application is a rust-sourced binary with an API that the front-end can interact with.&lt;/p&gt; 
&lt;p&gt;The user interface in Tauri apps currently leverages &lt;a href=&quot;https://docs.rs/tao&quot;&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt; as a window handling library on macOS, Windows, Linux, Android and iOS. To render your application, Tauri uses &lt;a href=&quot;https://github.com/tauri-apps/wry&quot;&gt;WRY&lt;/a&gt;, a library which provides a unified interface to the system webview, leveraging WKWebView on macOS &amp;amp; iOS, WebView2 on Windows, WebKitGTK on Linux and Android System WebView on Android.&lt;/p&gt; 
&lt;p&gt;To learn more about the details of how all of these pieces fit together, please consult this &lt;a href=&quot;https://github.com/tauri-apps/tauri/raw/dev/ARCHITECTURE.md&quot;&gt;ARCHITECTURE.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you are interested in making a tauri app, please visit the &lt;a href=&quot;https://tauri.app&quot;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The quickest way to get started is to install the &lt;a href=&quot;https://v2.tauri.app/start/prerequisites/&quot;&gt;prerequisites&lt;/a&gt; for your system and create a new project with &lt;a href=&quot;https://github.com/tauri-apps/create-tauri-app/#usage&quot;&gt;&lt;code&gt;create-tauri-app&lt;/code&gt;&lt;/a&gt;. For example with &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm create tauri-app@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The list of Tauri&#39;s features includes, but is not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in app bundler to create app bundles in formats like &lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.dmg&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt;, &lt;code&gt;.rpm&lt;/code&gt;, &lt;code&gt;.AppImage&lt;/code&gt; and Windows installers like &lt;code&gt;.exe&lt;/code&gt; (via NSIS) and &lt;code&gt;.msi&lt;/code&gt; (via WiX).&lt;/li&gt; 
 &lt;li&gt;Built-in self updater (desktop only)&lt;/li&gt; 
 &lt;li&gt;System tray icons&lt;/li&gt; 
 &lt;li&gt;Native notifications&lt;/li&gt; 
 &lt;li&gt;Native WebView Protocol (tauri doesn&#39;t create a localhost http(s) server to serve the WebView contents)&lt;/li&gt; 
 &lt;li&gt;GitHub action for streamlined CI&lt;/li&gt; 
 &lt;li&gt;VS Code extension&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Platforms&lt;/h3&gt; 
&lt;p&gt;Tauri currently supports development and distribution on the following platforms:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Platform&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Versions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;7 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;macOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;10.15 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;webkit2gtk 4.0 for Tauri v1 (for example Ubuntu 18.04). webkit2gtk 4.1 for Tauri v2 (for example Ubuntu 22.04).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;iOS/iPadOS (beta)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;9 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Android (beta)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;7 and above&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before you start working on something, it&#39;s best to check if there is an existing issue first. It&#39;s also a good idea to stop by the Discord server and confirm with the team if it makes sense or if someone else is already working on it.&lt;/p&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;p&gt;Thank you to everyone contributing to Tauri!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Documentation in a polyglot system is a tricky proposition. To this end, we prefer to use inline documentation in the Rust &amp;amp; JS source code as much as possible. Check out the hosting repository for the documentation site for further information: &lt;a href=&quot;https://github.com/tauri-apps/tauri-docs&quot;&gt;https://github.com/tauri-apps/tauri-docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://crabnebula.dev&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/sponsors/crabnebula.svg?sanitize=true&quot; alt=&quot;CrabNebula&quot; width=&quot;283&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For the complete list of sponsors please visit our &lt;a href=&quot;https://tauri.app#sponsors&quot;&gt;website&lt;/a&gt; and &lt;a href=&quot;https://opencollective.com/tauri&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Organization&lt;/h2&gt; 
&lt;p&gt;Tauri aims to be a sustainable collective based on principles that guide &lt;a href=&quot;https://sfosc.org&quot;&gt;sustainable free and open software communities&lt;/a&gt;. To this end it has become a Programme within the &lt;a href=&quot;https://commonsconservancy.org/&quot;&gt;Commons Conservancy&lt;/a&gt;, and you can contribute financially via &lt;a href=&quot;https://opencollective.com/tauri&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;Code: (c) 2015 - Present - The Tauri Programme within The Commons Conservancy.&lt;/p&gt; 
&lt;p&gt;MIT or MIT/Apache 2.0 where applicable.&lt;/p&gt; 
&lt;p&gt;Logo: CC-BY-NC-ND&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Original Tauri Logo Designs by &lt;a href=&quot;https://alve.io/&quot;&gt;Alve Larsson&lt;/a&gt;, &lt;a href=&quot;https://github.com/nothingismagick&quot;&gt;Daniel Thompson-Yvetot&lt;/a&gt; and &lt;a href=&quot;https://github.com/akryum&quot;&gt;Guillaume Chau&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>uutils/coreutils</title>
      <link>https://github.com/uutils/coreutils</link>
      <description>&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;div class=&quot;oranda-hide&quot;&gt; 
 &lt;div align=&quot;center&quot;&gt; 
  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/logo.svg?sanitize=true&quot; alt=&quot;uutils logo&quot;&gt;&lt;/p&gt; 
  &lt;h1&gt;uutils coreutils&lt;/h1&gt; 
  &lt;p&gt;&lt;a href=&quot;https://crates.io/crates/coreutils&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/coreutils.svg?sanitize=true&quot; alt=&quot;Crates.io&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/wQVJbvJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/uutils/coreutils/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://deps.rs/repo/github/uutils/coreutils&quot;&gt;&lt;img src=&quot;https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true&quot; alt=&quot;dependency status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;a href=&quot;https://codecov.io/gh/uutils/coreutils&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;CodeCov&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/MSRV-1.82.0-brightgreen&quot; alt=&quot;MSRV&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr&gt; 
&lt;/div&gt; 
&lt;p&gt;uutils coreutils is a cross-platform reimplementation of the GNU coreutils in &lt;a href=&quot;http://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; 
&lt;div class=&quot;oranda-hide&quot;&gt; 
 &lt;p&gt;To install it:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo install coreutils
~/.cargo/bin/coreutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-disable-next-line MD026 --&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;uutils aims to be a drop-in replacement for the GNU utils. Differences with GNU are treated as bugs.&lt;/p&gt; 
&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, Mac, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms.&lt;/p&gt; 
&lt;div class=&quot;oranda-hide&quot;&gt; 
 &lt;h2&gt;Documentation&lt;/h2&gt; 
 &lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://uutils.github.io/coreutils/docs/&quot;&gt;User Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://docs.rs/crate/coreutils/&quot;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href=&quot;https://github.com/uutils/uutils.github.io&quot;&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; 
 &lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;Requirements&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;GNU Make (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Rust Version&lt;/h3&gt; 
 &lt;p&gt;uutils follows Rust&#39;s release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.82.0&lt;/code&gt;.&lt;/p&gt; 
 &lt;h2&gt;Building&lt;/h2&gt; 
 &lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Building the full package, including all documentation, requires both Cargo and Gnu Make on a Unix platform.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone https://github.com/uutils/coreutils
cd coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Cargo&lt;/h3&gt; 
 &lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named &#39;coreutils&#39;, on most Rust-supported platforms.&lt;/p&gt; 
 &lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build --release --features macos
# or ...
cargo build --release --features windows
# or ...
cargo build --release --features unix
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don&#39;t want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build --features &quot;base32 cat echo rm&quot; --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don&#39;t want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named &quot;uu_UTILNAME&quot;. To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;GNU Make&lt;/h3&gt; 
 &lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; 
 &lt;p&gt;To simply build all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In release mode:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make PROFILE=release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make UTILS=&#39;UTILITY_1 UTILITY_2&#39;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Installation&lt;/h2&gt; 
 &lt;h3&gt;Install with Cargo&lt;/h3&gt; 
 &lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command will install uutils into Cargo&#39;s &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; 
 &lt;p&gt;This does not install files necessary for shell completion or manpages. For manpages or shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;/&lt;code&gt;Manually install manpages&lt;/code&gt;.&lt;/p&gt; 
 &lt;h3&gt;Install with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To install all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo -E make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39; install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make UTILS=&#39;UTILITY_1 UTILITY_2&#39; install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make PROG_PREFIX=PREFIX_GOES_HERE install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make MULTICALL=y install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# DESTDIR is also supported
make PREFIX=/my/path install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;To skip installation of completions and manpages:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make COMPLETIONS=n MANPAGES=n install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install shell completions&lt;/h3&gt; 
 &lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; 
 &lt;p&gt;The syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install manpages&lt;/h3&gt; 
 &lt;p&gt;To generate manpages, the syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run manpage &amp;lt;utility&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install the manpage for &lt;code&gt;ls&lt;/code&gt; to &lt;code&gt;/usr/local/share/man/man1/ls.1&lt;/code&gt; run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run manpage ls &amp;gt; /usr/local/share/man/man1/ls.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Un-installation&lt;/h2&gt; 
 &lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; 
 &lt;h3&gt;Uninstall with Cargo&lt;/h3&gt; 
 &lt;p&gt;To uninstall uutils:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo uninstall coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Uninstall with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To uninstall all utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make PROG_PREFIX=PREFIX_GOES_HERE uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make MULTICALL=y uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# DESTDIR is also supported
make PREFIX=/my/path uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;GNU test suite compatibility&lt;/h2&gt; 
 &lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href=&quot;https://uutils.github.io/coreutils/docs/test_coverage.html&quot;&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://github.com/orgs/uutils/projects/1&quot;&gt;https://github.com/orgs/uutils/projects/1&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.png?raw=true&quot; alt=&quot;Evolution over time&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- close oranda-hide div --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to uutils, please see &lt;a href=&quot;https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; 
&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/uv</title>
      <link>https://github.com/astral-sh/uv</link>
      <description>&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/astral-sh/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json&quot; alt=&quot;uv&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/uv.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/l/uv.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true&quot; alt=&quot;image&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/astral-sh/uv/actions&quot;&gt;&lt;img src=&quot;https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;Actions status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/astral-sh&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;picture align=&quot;center&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d&quot;&gt; 
  &lt;img alt=&quot;Shows a bar chart with benchmark results.&quot; src=&quot;https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d&quot;&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;i&gt;Installing &lt;a href=&quot;https://trio.readthedocs.io/&quot;&gt;Trio&lt;/a&gt;&#39;s dependencies with a warm cache.&lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 A single tool to replace &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and more.&lt;/li&gt; 
 &lt;li&gt;⚡️ &lt;a href=&quot;https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md&quot;&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🗂️ Provides &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#projects&quot;&gt;comprehensive project management&lt;/a&gt;, with a &lt;a href=&quot;https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile&quot;&gt;universal lockfile&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;❇️ &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#scripts&quot;&gt;Runs scripts&lt;/a&gt;, with support for &lt;a href=&quot;https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies&quot;&gt;inline dependency metadata&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;🐍 &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#python-versions&quot;&gt;Installs and manages&lt;/a&gt; Python versions.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#tools&quot;&gt;Runs and installs&lt;/a&gt; tools published as Python packages.&lt;/li&gt; 
 &lt;li&gt;🔩 Includes a &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#the-pip-interface&quot;&gt;pip-compatible interface&lt;/a&gt; for a performance boost with a familiar CLI.&lt;/li&gt; 
 &lt;li&gt;🏢 Supports Cargo-style &lt;a href=&quot;https://docs.astral.sh/uv/concepts/projects/workspaces&quot;&gt;workspaces&lt;/a&gt; for scalable projects.&lt;/li&gt; 
 &lt;li&gt;💾 Disk-space efficient, with a &lt;a href=&quot;https://docs.astral.sh/uv/concepts/cache&quot;&gt;global cache&lt;/a&gt; for dependency deduplication.&lt;/li&gt; 
 &lt;li&gt;⏬ Installable without Rust or Python via &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🖥️ Supports macOS, Linux, and Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uv is backed by &lt;a href=&quot;https://astral.sh&quot;&gt;Astral&lt;/a&gt;, the creators of &lt;a href=&quot;https://github.com/astral-sh/ruff&quot;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install uv with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# On Windows.
powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, from &lt;a href=&quot;https://pypi.org/project/uv/&quot;&gt;PyPI&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# With pip.
pip install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Or pipx.
pipx install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If installed via the standalone installer, uv can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;uv self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/getting-started/installation/&quot;&gt;installation documentation&lt;/a&gt; for details and alternative installation methods.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;uv&#39;s documentation is available at &lt;a href=&quot;https://docs.astral.sh/uv&quot;&gt;docs.astral.sh/uv&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, the command line reference documentation can be viewed with &lt;code&gt;uv help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Projects&lt;/h3&gt; 
&lt;p&gt;uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to &lt;code&gt;rye&lt;/code&gt; or &lt;code&gt;poetry&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/projects/&quot;&gt;project documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;uv also supports building and publishing projects, even if they&#39;re not managed with uv. See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/publish/&quot;&gt;publish guide&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h3&gt;Scripts&lt;/h3&gt; 
&lt;p&gt;uv manages dependencies and environments for single-file scripts.&lt;/p&gt; 
&lt;p&gt;Create a new script and add inline metadata declaring its dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ echo &#39;import requests; print(requests.get(&quot;https://astral.sh&quot;))&#39; &amp;gt; example.py

$ uv add --script example.py requests
Updated `example.py`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run the script in an isolated virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv run example.py
Reading inline script metadata from: example.py
Installed 5 packages in 12ms
&amp;lt;Response [200]&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/scripts/&quot;&gt;scripts documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;uv executes and installs command-line tools provided by Python packages, similar to &lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run a tool in an ephemeral environment using &lt;code&gt;uvx&lt;/code&gt; (an alias for &lt;code&gt;uv tool run&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uvx pycowsay &#39;hello world!&#39;
Resolved 1 package in 167ms
Installed 1 package in 9ms
 + pycowsay==0.0.0.2
  &quot;&quot;&quot;

  ------------
&amp;lt; hello world! &amp;gt;
  ------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install a tool with &lt;code&gt;uv tool install&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv tool install ruff
Resolved 1 package in 6ms
Installed 1 package in 2ms
 + ruff==0.5.0
Installed 1 executable: ruff

$ ruff --version
ruff 0.5.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/tools/&quot;&gt;tools documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Python versions&lt;/h3&gt; 
&lt;p&gt;uv installs Python and allows quickly switching between versions.&lt;/p&gt; 
&lt;p&gt;Install multiple Python versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Download Python versions as needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv venv --python 3.12.0
Using Python 3.12.0
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate

$ uv run --python pypy@3.8 -- python --version
Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)
[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use a specific Python version in the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv python pin 3.11
Pinned `.python-version` to `3.11`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/install-python/&quot;&gt;Python installation documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;The pip interface&lt;/h3&gt; 
&lt;p&gt;uv provides a drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.&lt;/p&gt; 
&lt;p&gt;Migrate to uv without changing your existing workflows — and experience a 10-100x speedup — with the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;Compile requirements into a platform-independent requirements file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
Resolved 43 packages in 12ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the locked requirements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/pip/index/&quot;&gt;pip interface documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;See uv&#39;s &lt;a href=&quot;https://docs.astral.sh/uv/reference/platforms/&quot;&gt;platform support&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Versioning policy&lt;/h2&gt; 
&lt;p&gt;See uv&#39;s &lt;a href=&quot;https://docs.astral.sh/uv/reference/versioning/&quot;&gt;versioning policy&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href=&quot;https://github.com/astral-sh/uv/raw/main/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;uv&#39;s dependency resolver uses &lt;a href=&quot;https://github.com/pubgrub-rs/pubgrub&quot;&gt;PubGrub&lt;/a&gt; under the hood. We&#39;re grateful to the PubGrub maintainers, especially &lt;a href=&quot;https://github.com/Eh2406&quot;&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; 
&lt;p&gt;uv&#39;s Git implementation is based on &lt;a href=&quot;https://github.com/rust-lang/cargo&quot;&gt;Cargo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some of uv&#39;s optimizations are inspired by the great work we&#39;ve seen in &lt;a href=&quot;https://pnpm.io/&quot;&gt;pnpm&lt;/a&gt;, &lt;a href=&quot;https://github.com/orogene/orogene&quot;&gt;Orogene&lt;/a&gt;, and &lt;a href=&quot;https://github.com/oven-sh/bun&quot;&gt;Bun&lt;/a&gt;. We&#39;ve also learned a lot from Nathaniel J. Smith&#39;s &lt;a href=&quot;https://github.com/njsmith/posy&quot;&gt;Posy&lt;/a&gt; and adapted its &lt;a href=&quot;https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline&quot;&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uv is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE&quot;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT&quot;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a target=&quot;_blank&quot; href=&quot;https://astral.sh&quot; style=&quot;background:none&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true&quot; alt=&quot;Made by Astral&quot;&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>lumina-ai-inc/chunkr</title>
      <link>https://github.com/lumina-ai-inc/chunkr</link>
      <description>&lt;p&gt;Vision infrastructure to turn complex documents into RAG/LLM-ready data&lt;/p&gt;&lt;hr&gt;&lt;br&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/lumina-ai-inc/chunkr&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/images/logo.svg?sanitize=true&quot; alt=&quot;Logo&quot; width=&quot;80&quot; height=&quot;80&quot;&gt; &lt;/a&gt; 
 &lt;h3 align=&quot;center&quot;&gt;Chunkr | Open Source Document Intelligence API&lt;/h3&gt; 
 &lt;p align=&quot;center&quot;&gt; Production-ready API service for document layout analysis, OCR, and semantic chunking.&lt;br&gt;Convert PDFs, PPTs, Word docs &amp;amp; images into RAG/LLM-ready chunks. &lt;br&gt;&lt;br&gt; &lt;b&gt;Layout Analysis&lt;/b&gt; | &lt;b&gt;OCR + Bounding Boxes&lt;/b&gt; | &lt;b&gt;Structured HTML and markdown&lt;/b&gt; | &lt;b&gt;VLM Processing controls&lt;/b&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&quot;https://www.chunkr.ai&quot;&gt;Try it out!&lt;/a&gt; · &lt;a href=&quot;https://github.com/lumina-ai-inc/chunkr/issues/new&quot;&gt;Report Bug&lt;/a&gt; · &lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#connect-with-us&quot;&gt;Contact&lt;/a&gt; · &lt;a href=&quot;https://discord.gg/XzKWFByKzW&quot;&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.chunkr.ai&quot; width=&quot;1200&quot; height=&quot;630&quot;&gt; &lt;img src=&quot;https://chunkr.ai/og-image.png&quot; style=&quot;bor&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#super-quick-start&quot;&gt;(Super) Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#llm-configuration&quot;&gt;LLM Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#openai-configuration&quot;&gt;OpenAI Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#google-ai-studio-configuration&quot;&gt;Google AI Studio Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#openrouter-configuration&quot;&gt;OpenRouter Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#self-hosted-configuration&quot;&gt;Self-Hosted Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#self-hosted-deployment-options&quot;&gt;Self-Hosted Deployment Options&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#quick-start-with-docker-compose&quot;&gt;Quick Start with Docker Compose&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#deployment-with-kubernetes&quot;&gt;Deployment with Kubernetes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#licensing&quot;&gt;Licensing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#connect-with-us&quot;&gt;Connect With Us&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;(Super) Quick Start&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to &lt;a href=&quot;https://www.chunkr.ai&quot;&gt;chunkr.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Make an account and copy your API key&lt;/li&gt; 
 &lt;li&gt;Install our Python SDK: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install chunkr-ai
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Use the SDK to process your documents: &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from chunkr_ai import Chunkr

# Initialize with your API key from chunkr.ai
chunkr = Chunkr(api_key=&quot;your_api_key&quot;)

# Upload a document (URL or local file path)
url = &quot;https://chunkr-web.s3.us-east-1.amazonaws.com/landing_page/input/science.pdf&quot;
task = chunkr.upload(url)

# Export results in various formats
task.html(output_file=&quot;output.html&quot;)
task.markdown(output_file=&quot;output.md&quot;)
task.content(output_file=&quot;output.txt&quot;)
task.json(output_file=&quot;output.json&quot;)

# Clean up
chunkr.close()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href=&quot;https://docs.chunkr.ai&quot;&gt;docs&lt;/a&gt; for more information and examples.&lt;/p&gt; 
&lt;h2&gt;LLM Configuration&lt;/h2&gt; 
&lt;p&gt;You can use any OpenAI API compatible endpoint by setting the following variables in your .env file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LLM__KEY:
LLM__MODEL:
LLM__URL:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;OpenAI Configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;LLM__KEY=your_openai_api_key
LLM__MODEL=gpt-4o
LLM__URL=https://api.openai.com/v1/chat/completions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Google AI Studio Configuration&lt;/h3&gt; 
&lt;p&gt;For getting a Google AI Studio API key, see &lt;a href=&quot;https://ai.google.dev/gemini-api/docs/openai&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LLM__KEY=your_google_ai_studio_api_key
LLM__MODEL=gemini-2.0-flash-lite
LLM__URL=https://generativelanguage.googleapis.com/v1beta/openai/chat/completions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;OpenRouter Configuration&lt;/h3&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://openrouter.ai/models&quot;&gt;here&lt;/a&gt; for available models.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LLM__KEY=your_openrouter_api_key
LLM__MODEL=google/gemini-pro-1.5
LLM__URL=https://openrouter.ai/api/v1/chat/completions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Self-Hosted Configuration&lt;/h3&gt; 
&lt;p&gt;You can use any OpenAI API compatible endpoint. To host your own LLM you can use &lt;a href=&quot;https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html&quot;&gt;VLLM&lt;/a&gt; or &lt;a href=&quot;https://ollama.com/blog/openai-compatibility&quot;&gt;Ollama&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LLM__KEY=your_api_key
LLM__MODEL=model_name
LLM__URL=http://localhost:8000/v1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Self-Hosted Deployment Options&lt;/h2&gt; 
&lt;h3&gt;Quick Start with Docker Compose&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Prerequisites:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;Docker and Docker Compose&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&quot;&gt;NVIDIA Container Toolkit&lt;/a&gt; (for GPU support, optional)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the repo:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/lumina-ai-inc/chunkr
cd chunkr
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Set up environment variables:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Copy the example environment file
cp .env.example .env

# Configure your environment variables
# Required: LLM_KEY as your OpenAI API key
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Start the services:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;With GPU:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt;Access the services: 
  &lt;ul&gt; 
   &lt;li&gt;Web UI: &lt;code&gt;http://localhost:5173&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;API: &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Requires an NVIDIA CUDA GPU&lt;/li&gt; 
  &lt;li&gt;CPU-only deployment via &lt;code&gt;compose-cpu.yaml&lt;/code&gt; is currently in development and not recommended for use&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;6&quot;&gt; 
 &lt;li&gt;Stop the services when done:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose down
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Deployment with Kubernetes&lt;/h3&gt; 
&lt;p&gt;For production environments, we provide a Helm chart and detailed deployment instructions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;See our detailed guide at &lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/kube/README.md&quot;&gt;&lt;code&gt;kube/README.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Includes configurations for high availability and scaling&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For enterprise support and deployment assistance, &lt;a href=&quot;mailto:mehul@lumina.sh&quot;&gt;contact us&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;The core of this project is dual-licensed:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/LICENSE&quot;&gt;GNU Affero General Public License v3.0 (AGPL-3.0)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Commercial License&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To use Chunkr without complying with the AGPL-3.0 license terms you can &lt;a href=&quot;mailto:mehul@lumina.sh&quot;&gt;contact us&lt;/a&gt; or visit our &lt;a href=&quot;https://chunkr.ai&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Connect With Us&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📧 Email: &lt;a href=&quot;mailto:mehul@chunkr.ai&quot;&gt;mehul@chunkr.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📅 Schedule a call: &lt;a href=&quot;https://cal.com/mehulc/30min&quot;&gt;Book a 30-minute meeting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌐 Visit our website: &lt;a href=&quot;https://chunkr.ai&quot;&gt;chunkr.ai&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true&quot; alt=&quot;RustDesk - Your remote desktop&quot;&gt;&lt;br&gt; &lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build&quot;&gt;Build&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker&quot;&gt;Docker&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure&quot;&gt;Structure&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot&quot;&gt;Snapshot&lt;/a&gt;&lt;br&gt; [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md&quot;&gt;Українська&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md&quot;&gt;česky&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md&quot;&gt;中文&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md&quot;&gt;Magyar&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md&quot;&gt;Español&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md&quot;&gt;فارسی&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md&quot;&gt;Français&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md&quot;&gt;Deutsch&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md&quot;&gt;Polski&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md&quot;&gt;Indonesian&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md&quot;&gt;Suomi&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md&quot;&gt;മലയാളം&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md&quot;&gt;日本語&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md&quot;&gt;Nederlands&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md&quot;&gt;Italiano&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md&quot;&gt;Русский&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md&quot;&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md&quot;&gt;Esperanto&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md&quot;&gt;한국어&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md&quot;&gt;العربي&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md&quot;&gt;Tiếng Việt&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md&quot;&gt;Dansk&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md&quot;&gt;Ελληνικά&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md&quot;&gt;Türkçe&lt;/a&gt;] | [&lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md&quot;&gt;Norsk&lt;/a&gt;]&lt;br&gt; &lt;b&gt;We need your help to translate this README, &lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/src/lang&quot;&gt;RustDesk UI&lt;/a&gt; and &lt;a href=&quot;https://github.com/rustdesk/doc.rustdesk.com&quot;&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;p&gt;Chat with us: &lt;a href=&quot;https://discord.gg/nDceKgxnkV&quot;&gt;Discord&lt;/a&gt; | &lt;a href=&quot;https://twitter.com/rustdesk&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://www.reddit.com/r/rustdesk&quot;&gt;Reddit&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://ko-fi.com/I2I04VU09&quot;&gt;&lt;img src=&quot;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&quot; alt=&quot;ko-fi&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop software, written in Rust. Works out of the box, no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href=&quot;https://rustdesk.com/server&quot;&gt;set up your own&lt;/a&gt;, or &lt;a href=&quot;https://github.com/rustdesk/rustdesk-server-demo&quot;&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href=&quot;https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/wiki/FAQ&quot;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/releases&quot;&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/releases/tag/nightly&quot;&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://f-droid.org/en/packages/com.carriez.flutter_hbb&quot;&gt;&lt;img src=&quot;https://f-droid.org/badge/get-it-on.png&quot; alt=&quot;Get it on F-Droid&quot; height=&quot;80&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://flathub.org/apps/com.rustdesk.RustDesk&quot;&gt;&lt;img src=&quot;https://flathub.org/api/badge?svg&amp;amp;locale=en&quot; alt=&quot;Get it on Flathub&quot; height=&quot;80&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href=&quot;https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml&quot;&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll&quot;&gt;Windows&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so&quot;&gt;Linux&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib&quot;&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href=&quot;https://github.com/microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://rustdesk.com/docs/en/dev/build/&quot;&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i &#39;s/CFLAGS+=-I/CFLAGS+=-fPIC -I/g&#39; Makefile
sed -i &#39;s/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g&#39; Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t &quot;rustdesk-builder&quot; .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID=&quot;$(id -u)&quot; -e PGID=&quot;$(id -g)&quot; rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you&#39;re running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you are running these commands from the root of the RustDesk repository, otherwise the application might not be able to find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common&quot;&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/libs/scrap&quot;&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/libs/enigo&quot;&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard&quot;&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/src/ui&quot;&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/src/server&quot;&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/src/client.rs&quot;&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs&quot;&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href=&quot;https://github.com/rustdesk/rustdesk-server&quot;&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/src/platform&quot;&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/flutter&quot;&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js&quot;&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651&quot; alt=&quot;Connection Manager&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea&quot; alt=&quot;Connected to a Windows PC&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad&quot; alt=&quot;File Transfer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5&quot; alt=&quot;TCP Tunneling&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>helix-editor/helix</title>
      <link>https://github.com/helix-editor/helix</link>
      <description>&lt;p&gt;A post-modern modal text editor.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;logo_dark.svg&quot;&gt; 
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;logo_light.svg&quot;&gt; 
   &lt;img alt=&quot;Helix&quot; height=&quot;128&quot; src=&quot;https://raw.githubusercontent.com/helix-editor/helix/master/logo_light.svg?sanitize=true&quot;&gt; 
  &lt;/picture&gt; &lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/helix-editor/helix/actions&quot;&gt;&lt;img src=&quot;https://github.com/helix-editor/helix/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/helix-editor/helix/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/helix-editor/helix&quot; alt=&quot;GitHub Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.helix-editor.com/&quot;&gt;&lt;img src=&quot;https://shields.io/badge/-documentation-452859&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/helix-editor/helix/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/helix-editor/helix&quot; alt=&quot;GitHub contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://matrix.to/#/%23helix-community:matrix.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/matrix/helix-community:matrix.org&quot; alt=&quot;Matrix Space&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/helix-editor/helix/master/screenshot.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;A &lt;a href=&quot;https://github.com/mawww/kakoune&quot;&gt;Kakoune&lt;/a&gt; / &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; inspired editor, written in Rust.&lt;/p&gt; 
&lt;p&gt;The editing model is very heavily based on Kakoune; during development I found myself agreeing with most of Kakoune&#39;s design decisions.&lt;/p&gt; 
&lt;p&gt;For more information, see the &lt;a href=&quot;https://helix-editor.com&quot;&gt;website&lt;/a&gt; or &lt;a href=&quot;https://docs.helix-editor.com/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All shortcuts/keymaps can be found &lt;a href=&quot;https://docs.helix-editor.com/keymap.html&quot;&gt;in the documentation on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/helix-editor/helix/wiki/Troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vim-like modal editing&lt;/li&gt; 
 &lt;li&gt;Multiple selections&lt;/li&gt; 
 &lt;li&gt;Built-in language server support&lt;/li&gt; 
 &lt;li&gt;Smart, incremental syntax highlighting and code editing via tree-sitter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although it&#39;s primarily a terminal-based editor, I am interested in exploring a custom renderer (similar to Emacs) using wgpu or skulpin.&lt;/p&gt; 
&lt;p&gt;Note: Only certain languages have indentation definitions at the moment. Check &lt;code&gt;runtime/queries/&amp;lt;lang&amp;gt;/&lt;/code&gt; for &lt;code&gt;indents.scm&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.helix-editor.com/install.html&quot;&gt;Installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/helix-editor/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/helix-editor.svg?exclude_unsupported=1&quot; alt=&quot;Packaging status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Contributing guidelines can be found &lt;a href=&quot;https://raw.githubusercontent.com/helix-editor/helix/master/docs/CONTRIBUTING.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Your question might already be answered on the &lt;a href=&quot;https://github.com/helix-editor/helix/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Discuss the project on the community &lt;a href=&quot;https://matrix.to/#/%23helix-community:matrix.org&quot;&gt;Matrix Space&lt;/a&gt; (make sure to join &lt;code&gt;#helix-editor:matrix.org&lt;/code&gt; if you&#39;re on a client that doesn&#39;t support Matrix Spaces yet).&lt;/p&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/jakenvac&quot;&gt;@jakenvac&lt;/a&gt; for designing the logo!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphiteEditor/Graphite</title>
      <link>https://github.com/GraphiteEditor/Graphite</link>
      <description>&lt;p&gt;2D vector &amp; raster editor that melds traditional layers &amp; tools with a modern node-based, non-destructive, procedural workflow.&lt;/p&gt;&lt;hr&gt;&lt;a href=&quot;https://graphite.rs/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/9366c148-4405-484f-909a-9a3526eb9209&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/791508ab-bcd5-4e31-a3b9-1187cfd7a2f6&quot;&gt; 
  &lt;img alt=&quot;Graphite logo&quot; src=&quot;https://github.com/user-attachments/assets/791508ab-bcd5-4e31-a3b9-1187cfd7a2f6&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h1&gt;Your procedural toolbox for 2D content creation&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Graphite is a free, open source vector and raster graphics engine, &lt;a href=&quot;https://editor.graphite.rs&quot;&gt;available now&lt;/a&gt; in alpha. Get creative with a fully nondestructive editing workflow that combines layer-based compositing with node-based generative design.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Having begun life as a vector editor, Graphite continues evolving into a generalized, all-in-one graphics toolbox that&#39;s built more like a game engine than a conventional creative app. The editor&#39;s tools wrap its node graph core, providing user-friendly workflows for vector, raster, and beyond. Photo editing, motion graphics, digital painting, desktop publishing, and VFX compositing are additional competencies from the &lt;a href=&quot;https://graphite.rs/features/#roadmap&quot;&gt;roadmap&lt;/a&gt; making Graphite into a highly versatile content creation tool.&lt;/p&gt; 
&lt;p&gt;Learn more from the &lt;a href=&quot;https://graphite.rs/&quot;&gt;website&lt;/a&gt;, subscribe to the &lt;a href=&quot;https://graphite.rs/#newsletter&quot;&gt;newsletter&lt;/a&gt;, consider &lt;a href=&quot;https://graphite.rs/volunteer/&quot;&gt;volunteering&lt;/a&gt; or &lt;a href=&quot;https://graphite.rs/donate/&quot;&gt;donating&lt;/a&gt;, and remember to give this repository a ⭐!&lt;/p&gt; 
&lt;br&gt; 
&lt;a href=&quot;https://discord.graphite.rs/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/ad185fac-3b48-446d-863c-2bcb0724abee&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/aa23f503-f3bf-444a-9080-8eaa19fa2fa8&quot;&gt; 
  &lt;img alt=&quot;Discord&quot; src=&quot;https://github.com/user-attachments/assets/aa23f503-f3bf-444a-9080-8eaa19fa2fa8&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://www.reddit.com/r/graphite/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/d8c05686-2eb9-4ac1-8149-728c12b4e71a&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/6f32329a-4d6f-42d8-9a2f-42977c0b3c05&quot;&gt; 
  &lt;img alt=&quot;Reddit&quot; src=&quot;https://github.com/user-attachments/assets/6f32329a-4d6f-42d8-9a2f-42977c0b3c05&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://bsky.app/profile/graphiteeditor.bsky.social&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/c736d80c-e9bf-4591-a7e0-a7723057a906&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/3db9b0a1-5ab7-4bff-bfd3-8a4ade7b98bd&quot;&gt; 
  &lt;img alt=&quot;Bluesky&quot; src=&quot;https://github.com/user-attachments/assets/3db9b0a1-5ab7-4bff-bfd3-8a4ade7b98bd&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://twitter.com/graphiteeditor&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/115f04cc-e3c2-4f90-ac35-eb9edd3ca9be&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/4ed4185d-a622-418c-bbf4-a0419e690ca9&quot;&gt; 
  &lt;img alt=&quot;Twitter&quot; src=&quot;https://github.com/user-attachments/assets/4ed4185d-a622-418c-bbf4-a0419e690ca9&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://www.youtube.com/@GraphiteEditor&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/cbc02fad-5cbc-4715-a8e5-860198e989c7&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/d13b484d-97a8-4d9e-bbe4-c60348b3f676&quot;&gt; 
  &lt;img alt=&quot;YouTube&quot; src=&quot;https://github.com/user-attachments/assets/d13b484d-97a8-4d9e-bbe4-c60348b3f676&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;br&gt;
&lt;br&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.graphite.rs/content/index/gui-demo-node-graph-isometric-fountain.png&quot; alt=&quot;&amp;quot;Isometric Fountain&amp;quot; vector artwork&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.graphite.rs/content/index/gui-demo-fractal__3.png&quot; alt=&quot;&amp;quot;Marbled Mandelbrot&amp;quot; fractal raster artwork&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing/building the code&lt;/h2&gt; 
&lt;p&gt;Are you a graphics programmer or Rust developer? Graphite aims to be one of the most approachable projects for putting your engineering skills to use in the world of open source. See &lt;a href=&quot;https://graphite.rs/volunteer/guide/&quot;&gt;instructions here&lt;/a&gt; for setting up the project and getting started.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;By submitting code for inclusion in the project, you are agreeing to license your changes under the Apache 2.0 license, and that you have the authority to do so. Some directories may have other licenses, like dual-licensed MIT/Apache 2.0, and code submissions to those directories mean you agree to the applicable license(s).&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Support our mission ❤️&lt;/h2&gt; 
&lt;p&gt;Graphite is 100% community built and funded. Please become a part of keeping our project alive and thriving with a &lt;a href=&quot;https://graphite.rs/donate/&quot;&gt;donation&lt;/a&gt; if you share a belief in our mission:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Graphite strives to unshackle the creativity of every budding artist and seasoned professional by building the best comprehensive art and design tool that&#39;s accessible to all.&lt;/p&gt; 
 &lt;p&gt;Mission success will come when Graphite is an industry standard. A cohesive product vision and focus on innovation over imitation is the strategy that will make that possible.&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>tensorzero/tensorzero</title>
      <link>https://github.com/tensorzero/tensorzero</link>
      <description>&lt;p&gt;TensorZero creates a feedback loop for optimizing LLM applications — turning production data into smarter, faster, and cheaper models.&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/47d67430-386d-4675-82ad-d4734d3262d9&quot; width=&quot;128&quot; height=&quot;128&quot;&gt; 
&lt;h1&gt;TensorZero&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;TensorZero creates a feedback loop for optimizing LLM applications — turning production data into smarter, faster, and cheaper models.&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Integrate our model gateway&lt;/li&gt; 
 &lt;li&gt;Send metrics or feedback&lt;/li&gt; 
 &lt;li&gt;Optimize prompts, models, and inference strategies&lt;/li&gt; 
 &lt;li&gt;Watch your LLMs improve over time&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It provides a &lt;strong&gt;data &amp;amp; learning flywheel for LLMs&lt;/strong&gt; by unifying:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;strong&gt;Inference:&lt;/strong&gt; one API for all LLMs, with &amp;lt;1ms P99 overhead&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;strong&gt;Observability:&lt;/strong&gt; inference &amp;amp; feedback → your database&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;strong&gt;Optimization:&lt;/strong&gt; from prompts to fine-tuning and RL&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;strong&gt;Experimentation:&lt;/strong&gt; built-in A/B testing, routing, fallbacks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/&quot; target=&quot;_blank&quot;&gt;Website&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs&quot; target=&quot;_blank&quot;&gt;Docs&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.x.com/tensorzero&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/slack&quot; target=&quot;_blank&quot;&gt;Slack&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/discord&quot; target=&quot;_blank&quot;&gt;Discord&lt;/a&gt;&lt;/b&gt; &lt;br&gt; &lt;br&gt; &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/quickstart&quot; target=&quot;_blank&quot;&gt;Quick Start (5min)&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/tutorial&quot; target=&quot;_blank&quot;&gt;Comprehensive Tutorial&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/deployment&quot; target=&quot;_blank&quot;&gt;Deployment Guide&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/api-reference&quot; target=&quot;_blank&quot;&gt;API Reference&lt;/a&gt;&lt;/b&gt; · &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/deployment&quot; target=&quot;_blank&quot;&gt;Configuration Reference&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;🌐 LLM Gateway&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Integrate with TensorZero once and access every major LLM provider.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;Model Providers&lt;/b&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt; &lt;p&gt; The TensorZero Gateway natively supports: &lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/anthropic&quot;&gt;Anthropic&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/aws-bedrock&quot;&gt;AWS Bedrock&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/azure&quot;&gt;Azure OpenAI Service&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/deepseek&quot;&gt;DeepSeek&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/fireworks&quot;&gt;Fireworks&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/gcp-vertex-ai-anthropic&quot;&gt;GCP Vertex AI Anthropic&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/gcp-vertex-ai-gemini&quot;&gt;GCP Vertex AI Gemini&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/google-ai-studio-gemini&quot;&gt;Google AI Studio (Gemini API)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/hyperbolic&quot;&gt;Hyperbolic&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/mistral&quot;&gt;Mistral&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/openai&quot;&gt;OpenAI&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/together&quot;&gt;Together&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/vllm&quot;&gt;vLLM&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/xai&quot;&gt;xAI&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;p&gt; &lt;em&gt; Need something else? Your provider is most likely supported because TensorZero integrates with &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/providers/openai-compatible&quot;&gt;any OpenAI-compatible API (e.g. Ollama)&lt;/a&gt;&lt;/b&gt;. &lt;/em&gt; &lt;/p&gt; &lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt; &lt;p&gt; The TensorZero Gateway supports advanced features like: &lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/retries-fallbacks&quot;&gt;Retries &amp;amp; Fallbacks&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations&quot;&gt;Inference-Time Optimizations&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/prompt-templates-schemas&quot;&gt;Prompt Templates &amp;amp; Schemas&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/tutorial#experimentation&quot;&gt;Experimentation (A/B Testing)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/configuration-reference&quot;&gt;Configuration-as-Code (GitOps)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/batch-inference&quot;&gt;Batch Inference&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/multimodal-inference&quot;&gt;Multimodal Inference (VLMs)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/inference-caching&quot;&gt;Inference Caching&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/metrics-feedback&quot;&gt;Metrics &amp;amp; Feedback&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/episodes&quot;&gt;Multi-Step LLM Workflows (Episodes)&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;em&gt;&amp;amp; a lot more...&lt;/em&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;p&gt; The TensorZero Gateway is written in Rust 🦀 with &lt;b&gt;performance&lt;/b&gt; in mind (&amp;lt;1ms p99 latency overhead @ 10k QPS). See &lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/benchmarks&quot;&gt;Benchmarks&lt;/a&gt;&lt;/b&gt;.&lt;br&gt; &lt;/p&gt; &lt;p&gt; You can run inference using the &lt;b&gt;TensorZero client&lt;/b&gt; (recommended), the &lt;b&gt;OpenAI client&lt;/b&gt;, or the &lt;b&gt;HTTP API&lt;/b&gt;. &lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br&gt; 
&lt;details open&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: Python — TensorZero Client (Recommended)&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;You can access any provider using the TensorZero Python client.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;code&gt;pip install tensorzero&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Optional: Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from tensorzero import TensorZeroGateway  # or AsyncTensorZeroGateway


with TensorZeroGateway.build_embedded(clickhouse_url=&quot;...&quot;, config_file=&quot;...&quot;) as client:
    response = client.inference(
        model_name=&quot;openai::gpt-4o-mini&quot;,
        input={
            &quot;messages&quot;: [
                {
                    &quot;role&quot;: &quot;user&quot;,
                    &quot;content&quot;: &quot;Write a haiku about artificial intelligence.&quot;,
                }
            ]
        },
    )
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/quickstart&quot;&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: Python — OpenAI Client&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;You can access any provider using the OpenAI Python client with TensorZero.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Deploy &lt;code&gt;tensorzero/gateway&lt;/code&gt; using Docker. &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/deployment&quot;&gt;Detailed instructions →&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from openai import OpenAI


with OpenAI(base_url=&quot;http://localhost:3000/openai/v1&quot;) as client:
    response = client.chat.completions.create(
        model=&quot;tensorzero::model_name::openai::gpt-4o-mini&quot;,
        messages=[
            {
                &quot;role&quot;: &quot;user&quot;,
                &quot;content&quot;: &quot;Write a haiku about artificial intelligence.&quot;,
            }
        ],
    )
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/quickstart&quot;&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: JavaScript / TypeScript (Node) — OpenAI Client&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;You can access any provider using the OpenAI Node client with TensorZero.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Deploy &lt;code&gt;tensorzero/gateway&lt;/code&gt; using Docker. &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/deployment&quot;&gt;Detailed instructions →&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &quot;openai&quot;;

const client = new OpenAI({
  baseURL: &quot;http://localhost:3000/openai/v1&quot;,
});

const response = await client.chat.completions.create({
  model: &quot;tensorzero::model_name::openai::gpt-4o-mini&quot;,
  messages: [
    {
      role: &quot;user&quot;,
      content: &quot;Write a haiku about artificial intelligence.&quot;,
    },
  ],
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/quickstart&quot;&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Usage: Other Languages &amp;amp; Platforms — HTTP API&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;TensorZero supports virtually any programming language or platform via its HTTP API.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Deploy &lt;code&gt;tensorzero/gateway&lt;/code&gt; using Docker. &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/deployment&quot;&gt;Detailed instructions →&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Optional: Set up the TensorZero configuration.&lt;/li&gt; 
  &lt;li&gt;Run inference:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -X POST &quot;http://localhost:3000/inference&quot; \
  -H &quot;Content-Type: application/json&quot; \
  -d &#39;{
    &quot;model_name&quot;: &quot;openai::gpt-4o-mini&quot;,
    &quot;input&quot;: {
      &quot;messages&quot;: [
        {
          &quot;role&quot;: &quot;user&quot;,
          &quot;content&quot;: &quot;Write a haiku about artificial intelligence.&quot;
        }
      ]
    }
  }&#39;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/quickstart&quot;&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;📈 LLM Optimization&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Send production metrics and human feedback to easily optimize your prompts, models, and inference strategies — using the UI or programmatically.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Model Optimization&lt;/h4&gt; 
&lt;p&gt;Optimize closed-source and open-source models using supervised fine-tuning (SFT) and preference fine-tuning (DPO).&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;Supervised Fine-tuning — UI&lt;/b&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;Preference Fine-tuning (DPO) — Jupyter Notebook&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/cf7acf66-732b-43b3-af2a-5eba1ce40f6f&quot;&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/a67a0634-04a7-42b0-b934-9130cb7cdf51&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h4&gt;Inference-Time Optimization&lt;/h4&gt; 
&lt;p&gt;Boost performance by dynamically updating your prompts with relevant examples, combining responses from multiple inferences, and more.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#best-of-n-sampling&quot;&gt;Best-of-N Sampling&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#mixture-of-n-sampling&quot;&gt;Mixture-of-N Sampling&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/c0edfa4c-713c-4996-9964-50c0d26e6970&quot;&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/75b5bf05-4c1f-43c4-b158-d69d1b8d05be&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#dynamic-in-context-learning-dicl&quot;&gt;Dynamic In-Context Learning (DICL)&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d8489e92-ce93-46ac-9aab-289ce19bb67d&quot;&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;em&gt;More coming soon...&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h4&gt;Prompt Optimization&lt;/h4&gt; 
&lt;p&gt;Optimize your prompts programmatically using research-driven optimization techniques.&lt;/p&gt; 
&lt;p&gt;Today we provide a sample &lt;strong&gt;&lt;a href=&quot;https://github.com/tensorzero/tensorzero/tree/main/examples/gsm8k-custom-recipe-dspy&quot;&gt;integration with DSPy&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;More coming soon...&lt;/em&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h3&gt;🔍 LLM Observability&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Zoom in to debug individual API calls, or zoom out to monitor metrics across models and prompts over time — all using the open-source TensorZero UI.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;!-- flip highlight order --&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;Observability » Inference&lt;/b&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;b&gt;Observability » Function&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/2cc3cc9a-f33f-4e94-b8de-07522326f80a&quot;&gt;&lt;/td&gt; 
   &lt;td width=&quot;50%&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/00ae6605-8fa0-4efd-8238-ae8ea589860f&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Watch LLMs get better at data extraction in real-time with TensorZero!&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations#dynamic-in-context-learning-dicl&quot;&gt;Dynamic in-context learning (DICL)&lt;/a&gt;&lt;/strong&gt; is a powerful inference-time optimization available out of the box with TensorZero. It enhances LLM performance by automatically incorporating relevant historical examples into the prompt, without the need for model fine-tuning.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/4df1022e-886e-48c2-8f79-6af3cdad79cb&quot;&gt;https://github.com/user-attachments/assets/4df1022e-886e-48c2-8f79-6af3cdad79cb&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;LLM Engineering with TensorZero&lt;/h2&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.tensorzero.com/docs&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/34a92c18-242e-4d76-a99c-861283de68a6&quot;&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/e8bc699b-6378-4c2a-9cc1-6d189025e270&quot;&gt; 
   &lt;img alt=&quot;TensorZero Flywheel&quot; src=&quot;https://github.com/user-attachments/assets/34a92c18-242e-4d76-a99c-861283de68a6&quot; width=&quot;720&quot;&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;ol&gt; 
 &lt;li&gt;The &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/&quot;&gt;TensorZero Gateway&lt;/a&gt;&lt;/strong&gt; is a high-performance model gateway written in Rust 🦀 that provides a unified API interface for all major LLM providers, allowing for seamless cross-platform integration and fallbacks.&lt;/li&gt; 
 &lt;li&gt;It handles structured schema-based inference with &amp;lt;1ms P99 latency overhead (see &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/benchmarks&quot;&gt;Benchmarks&lt;/a&gt;&lt;/strong&gt;) and built-in observability, experimentation, and &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/guides/inference-time-optimizations&quot;&gt;inference-time optimizations&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;It also collects downstream metrics and feedback associated with these inferences, with first-class support for multi-step LLM systems.&lt;/li&gt; 
 &lt;li&gt;Everything is stored in a ClickHouse data warehouse that you control for real-time, scalable, and developer-friendly analytics.&lt;/li&gt; 
 &lt;li&gt;Over time, &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/recipes&quot;&gt;TensorZero Recipes&lt;/a&gt;&lt;/strong&gt; leverage this structured dataset to optimize your prompts and models: run pre-built recipes for common workflows like fine-tuning, or create your own with complete flexibility using any language and platform.&lt;/li&gt; 
 &lt;li&gt;Finally, the gateway&#39;s experimentation features and GitOps orchestration enable you to iterate and deploy with confidence, be it a single LLM or thousands of LLMs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Our goal is to help engineers build, manage, and optimize the next generation of LLM applications: systems that learn from real-world experience. Read more about our &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/vision-roadmap/&quot;&gt;Vision &amp;amp; Roadmap&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Start building today.&lt;/strong&gt; The &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/quickstart&quot;&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; shows it&#39;s easy to set up an LLM application with TensorZero. If you want to dive deeper, the &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/docs/gateway/tutorial&quot;&gt;Tutorial&lt;/a&gt;&lt;/strong&gt; teaches how to build a simple chatbot, an email copilot, a weather RAG system, and a structured data extraction pipeline.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Questions?&lt;/strong&gt; Ask us on &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/slack&quot;&gt;Slack&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/discord&quot;&gt;Discord&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using TensorZero at work?&lt;/strong&gt; Email us at &lt;strong&gt;&lt;a href=&quot;mailto:hello@tensorzero.com&quot;&gt;hello@tensorzero.com&lt;/a&gt;&lt;/strong&gt; to set up a Slack or Teams channel with your team (free).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Work with us.&lt;/strong&gt; We&#39;re &lt;strong&gt;&lt;a href=&quot;https://www.tensorzero.com/jobs&quot;&gt;hiring in NYC&lt;/a&gt;&lt;/strong&gt;. We&#39;d also welcome &lt;strong&gt;&lt;a href=&quot;https://github.com/tensorzero/tensorzero/raw/main/CONTRIBUTING.md&quot;&gt;open-source contributions&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;We are working on a series of &lt;strong&gt;complete runnable examples&lt;/strong&gt; illustrating TensorZero&#39;s data &amp;amp; learning flywheel.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/tensorzero/tensorzero/tree/main/examples/data-extraction-ner&quot;&gt;Optimizing Data Extraction (NER) with TensorZero&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This example shows how to use TensorZero to optimize a data extraction pipeline. We demonstrate techniques like fine-tuning and dynamic in-context learning (DICL). In the end, a optimized GPT-4o Mini model outperforms GPT-4o on this task — at a fraction of the cost and latency — using a small amount of training data.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/tensorzero/tensorzero/tree/main/examples/haiku-hidden-preferences&quot;&gt;Writing Haikus to Satisfy a Judge with Hidden Preferences&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This example fine-tunes GPT-4o Mini to generate haikus tailored to a specific taste. You&#39;ll see TensorZero&#39;s &quot;data flywheel in a box&quot; in action: better variants leads to better data, and better data leads to better variants. You&#39;ll see progress by fine-tuning the LLM multiple times.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/tensorzero/tensorzero/tree/main/examples/chess-puzzles-best-of-n-sampling/&quot;&gt;Improving LLM Chess Ability with Best-of-N Sampling&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This example showcases how best-of-N sampling can significantly enhance an LLM&#39;s chess-playing abilities by selecting the most promising moves from multiple generated options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/tensorzero/tensorzero/tree/main/examples/gsm8k-custom-recipe-dspy&quot;&gt;Improving Math Reasoning with a Custom Recipe for Automated Prompt Engineering (DSPy)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;TensorZero provides a number of pre-built optimization recipes covering common LLM engineering workflows. But you can also easily create your own recipes and workflows! This example shows how to optimize a TensorZero function using an arbitrary tool — here, DSPy.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;&amp;amp; many more on the way!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rustlings</title>
      <link>https://github.com/rust-lang/rustlings</link>
      <description>&lt;p&gt;🦀 Small exercises to get you used to reading and writing Rust code!&lt;/p&gt;&lt;hr&gt;&lt;div class=&quot;oranda-hide&quot;&gt; 
 &lt;h1&gt;Rustlings 🦀❤️&lt;/h1&gt; 
&lt;/div&gt; 
&lt;p&gt;Greetings and welcome to Rustlings. This project contains small exercises to get you used to reading and writing Rust code. This includes reading and responding to compiler messages!&lt;/p&gt; 
&lt;p&gt;It is recommended to do the Rustlings exercises in parallel to reading &lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;the official Rust book&lt;/a&gt;, the most comprehensive resource for learning Rust 📚️&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/rust-by-example/&quot;&gt;Rust By Example&lt;/a&gt; is another recommended resource that you might find helpful. It contains code examples and exercises similar to Rustlings, but online.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Installing Rust&lt;/h3&gt; 
&lt;p&gt;Before installing Rustlings, you need to have the &lt;strong&gt;latest version of Rust&lt;/strong&gt; installed. Visit &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;www.rust-lang.org/tools/install&lt;/a&gt; for further instructions on installing Rust. This will also install &lt;em&gt;Cargo&lt;/em&gt;, Rust&#39;s package/project manager.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🐧 If you are on Linux, make sure you have installed &lt;code&gt;gcc&lt;/code&gt; (for a linker).&lt;/p&gt; 
 &lt;p&gt;Deb: &lt;code&gt;sudo apt install gcc&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;Dnf: &lt;code&gt;sudo dnf install gcc&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🍎 If you are on MacOS, make sure you have installed Xcode and its developer tools by running &lt;code&gt;xcode-select --install&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Installing Rustlings&lt;/h3&gt; 
&lt;p&gt;The following command will download and compile Rustlings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo install rustlings
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;If the installation fails…&lt;/strong&gt; (&lt;em&gt;click to expand&lt;/em&gt;)&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Make sure you have the latest Rust version by running &lt;code&gt;rustup update&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Try adding the &lt;code&gt;--locked&lt;/code&gt; flag: &lt;code&gt;cargo install rustlings --locked&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Otherwise, please &lt;a href=&quot;https://github.com/rust-lang/rustlings/issues/new&quot;&gt;report the issue&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;Initialization&lt;/h3&gt; 
&lt;p&gt;After installing Rustlings, run the following command to initialize the &lt;code&gt;rustlings/&lt;/code&gt; directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;rustlings init
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;If the command &lt;code&gt;rustlings&lt;/code&gt; can&#39;t be found…&lt;/strong&gt; (&lt;em&gt;click to expand&lt;/em&gt;)&lt;/summary&gt; 
 &lt;p&gt;You are probably using Linux and installed Rust using your package manager.&lt;/p&gt; 
 &lt;p&gt;Cargo installs binaries to the directory &lt;code&gt;~/.cargo/bin&lt;/code&gt;. Sadly, package managers often don&#39;t add &lt;code&gt;~/.cargo/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt; 
 &lt;p&gt;The solution is to …&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;either add &lt;code&gt;~/.cargo/bin&lt;/code&gt; manually to &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;or to uninstall Rust from the package manager and install it using the official way with &lt;code&gt;rustup&lt;/code&gt;: &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;https://www.rust-lang.org/tools/install&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;p&gt;Now, go into the newly initialized directory and launch Rustlings for further instructions on getting started with the exercises:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd rustlings/
rustlings
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Working environment&lt;/h2&gt; 
&lt;h3&gt;Editor&lt;/h3&gt; 
&lt;p&gt;Our general recommendation is &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer&quot;&gt;rust-analyzer plugin&lt;/a&gt;. But any editor that supports &lt;a href=&quot;https://rust-analyzer.github.io/&quot;&gt;rust-analyzer&lt;/a&gt; should be enough for working on the exercises.&lt;/p&gt; 
&lt;h3&gt;Terminal&lt;/h3&gt; 
&lt;p&gt;While working with Rustlings, please use a modern terminal for the best user experience. The default terminal on Linux and Mac should be sufficient. On Windows, we recommend the &lt;a href=&quot;https://aka.ms/terminal&quot;&gt;Windows Terminal&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Doing exercises&lt;/h2&gt; 
&lt;p&gt;The exercises are sorted by topic and can be found in the subdirectory &lt;code&gt;exercises/&amp;lt;topic&amp;gt;&lt;/code&gt;. For every topic, there is an additional &lt;code&gt;README.md&lt;/code&gt; file with some resources to get you started on the topic. We highly recommend that you have a look at them before you start 📚️&lt;/p&gt; 
&lt;p&gt;Most exercises contain an error that keeps them from compiling, and it&#39;s up to you to fix it! Some exercises contain tests that need to pass for the exercise to be done ✅&lt;/p&gt; 
&lt;p&gt;Search for &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;todo!()&lt;/code&gt; to find out what you need to change. Ask for hints by entering &lt;code&gt;h&lt;/code&gt; in the &lt;em&gt;watch mode&lt;/em&gt; 💡&lt;/p&gt; 
&lt;h3&gt;Watch Mode&lt;/h3&gt; 
&lt;p&gt;After the &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rustlings/main/#initialization&quot;&gt;initialization&lt;/a&gt;, Rustlings can be launched by simply running the command &lt;code&gt;rustlings&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This will start the &lt;em&gt;watch mode&lt;/em&gt; which walks you through the exercises in a predefined order (what we think is best for newcomers). It will rerun the current exercise automatically every time you change the exercise&#39;s file in the &lt;code&gt;exercises/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;If detecting file changes in the &lt;code&gt;exercises/&lt;/code&gt; directory fails…&lt;/strong&gt; (&lt;em&gt;click to expand&lt;/em&gt;)&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;You can add the &lt;strong&gt;&lt;code&gt;--manual-run&lt;/code&gt;&lt;/strong&gt; flag (&lt;code&gt;rustlings --manual-run&lt;/code&gt;) to manually rerun the current exercise by entering &lt;code&gt;r&lt;/code&gt; in the watch mode.&lt;/p&gt; 
  &lt;p&gt;Please &lt;a href=&quot;https://github.com/rust-lang/rustlings/issues/new&quot;&gt;report the issue&lt;/a&gt; with some information about your operating system and whether you run Rustlings in a container or virtual machine (e.g. WSL).&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h3&gt;Exercise List&lt;/h3&gt; 
&lt;p&gt;In the &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rustlings/main/#watch-mode&quot;&gt;watch mode&lt;/a&gt; (after launching &lt;code&gt;rustlings&lt;/code&gt;), you can enter &lt;code&gt;l&lt;/code&gt; to open the interactive exercise list.&lt;/p&gt; 
&lt;p&gt;The list allows you to…&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the status of all exercises (done or pending)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;c&lt;/code&gt;: Continue at another exercise (temporarily skip some exercises or go back to a previous one)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;r&lt;/code&gt;: Reset status and file of the selected exercise (you need to &lt;em&gt;reload/reopen&lt;/em&gt; its file in your editor afterwards)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the footer of the list for all possible keys.&lt;/p&gt; 
&lt;h2&gt;Questions?&lt;/h2&gt; 
&lt;p&gt;If you need any help while doing the exercises and the builtin-hints aren&#39;t helpful, feel free to ask in the &lt;a href=&quot;https://github.com/rust-lang/rustlings/discussions/categories/q-a?discussions_q=&quot;&gt;&lt;em&gt;Q&amp;amp;A&lt;/em&gt; category of the discussions&lt;/a&gt; if your question wasn&#39;t asked yet 💡&lt;/p&gt; 
&lt;h2&gt;Third-Party Exercises&lt;/h2&gt; 
&lt;p&gt;Third-party exercises are a set of exercises maintained by the community. You can use the same &lt;code&gt;rustlings&lt;/code&gt; program that you installed with &lt;code&gt;cargo install rustlings&lt;/code&gt; to run them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🇯🇵 &lt;a href=&quot;https://github.com/sotanengel/rustlings-jp&quot;&gt;Japanese Rustlings&lt;/a&gt;：A Japanese translation of the Rustlings exercises.&lt;/li&gt; 
 &lt;li&gt;🇨🇳 &lt;a href=&quot;https://github.com/SandmeyerX/rustlings-zh-cn&quot;&gt;Simplified Chinese Rustlings&lt;/a&gt;: A simplified Chinese translation of the Rustlings exercises.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Do you want to create your own set of Rustlings exercises to focus on some specific topic? Or do you want to translate the original Rustlings exercises? Then follow the the guide about &lt;a href=&quot;https://github.com/rust-lang/rustlings/raw/main/THIRD_PARTY_EXERCISES.md&quot;&gt;third-party exercises&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Continuing On&lt;/h2&gt; 
&lt;p&gt;Once you&#39;ve completed Rustlings, put your new knowledge to good use! Continue practicing your Rust skills by building your own projects, contributing to Rustlings, or finding other open-source projects to contribute to.&lt;/p&gt; 
&lt;h2&gt;Uninstalling Rustlings&lt;/h2&gt; 
&lt;p&gt;If you want to remove Rustlings from your system, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo uninstall rustlings
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/rust-lang/rustlings/raw/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; 🔗&lt;/p&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/rust-lang/rustlings/graphs/contributors&quot;&gt;all the wonderful contributors&lt;/a&gt; ✨&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>web-infra-dev/rspack</title>
      <link>https://github.com/web-infra-dev/rspack</link>
      <description>&lt;p&gt;The fast Rust-based web bundler with webpack-compatible API 🦀️&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://assets.rspack.dev/rspack/rspack-banner-plain-dark.png&quot;&gt; 
 &lt;img alt=&quot;Rspack Banner&quot; src=&quot;https://assets.rspack.dev/rspack/rspack-banner-plain-light.png&quot;&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Rspack&lt;/h1&gt; 
&lt;p&gt; &lt;a href=&quot;https://discord.gg/79ZZ66GH9E&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-discord-blue?style=flat-square&amp;amp;logo=discord&amp;amp;colorA=564341&amp;amp;colorB=EDED91&quot; alt=&quot;discord channel&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@rspack/core?activeTab=readme&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@rspack/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmcharts.com/compare/@rspack/core?minimal=true&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&quot; alt=&quot;downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://nodejs.org/en/about/previous-releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/node/v/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&quot; alt=&quot;node version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/web-infra-dev/rspack/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&quot; alt=&quot;license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codspeed.io/web-infra-dev/rspack&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fcodspeed.io%2Fbadge.json&amp;amp;style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&quot; alt=&quot;codspeed&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;English | &lt;a href=&quot;https://raw.githubusercontent.com/web-infra-dev/rspack/main/README.zh-CN.md&quot;&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Rspack is a high performance JavaScript bundler written in Rust. It offers strong compatibility with the webpack ecosystem, allowing for seamless replacement of webpack, and provides lightning fast build speeds.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Fast Startup&lt;/strong&gt;: Based on Rust, the build speed is extremely fast, bringing you the ultimate development experience.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Lightning HMR&lt;/strong&gt;: With a built-in incremental compilation mechanism, HMR is extremely fast and fully capable of developing large-scale projects.&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Webpack Compatible&lt;/strong&gt;: Compatible with plugins and loaders in the webpack ecosystem, seamlessly integrating excellent libraries built by the community.&lt;/li&gt; 
 &lt;li&gt;🎨 &lt;strong&gt;Module Federation&lt;/strong&gt;: Provide first-class support for Module Federation to facilitate the development of large-scale web applications.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Production Optimization&lt;/strong&gt;: Various optimization strategies are built in by default, such as tree shaking, minification, etc.&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Framework Agnostic&lt;/strong&gt;: Not bound to any frontend framework, ensuring enough flexibility.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read &lt;a href=&quot;https://rspack.dev/guide/start/introduction&quot;&gt;Introduction&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://rspack.dev/guide/start/quick-start&quot;&gt;Quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href=&quot;https://raw.githubusercontent.com/web-infra-dev/rspack/main/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; and let&#39;s build Rspack together.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;This repo has adopted the ByteDance Open Source Code of Conduct. Please check &lt;a href=&quot;https://raw.githubusercontent.com/web-infra-dev/rspack/main/CODE_OF_CONDUCT.md&quot;&gt;Code of conduct&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Come chat with us on &lt;a href=&quot;https://discord.gg/79ZZ66GH9E&quot;&gt;Discord&lt;/a&gt;! Rspack team and Rspack users are active there, and we&#39;re always looking for contributions.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/web-infra-dev/awesome-rspack&quot;&gt;awesome-rspack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A curated list of awesome things related to Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://rspack.dev/&quot;&gt;Rspack 1.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 1.x (latest)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://v0.rspack.dev/&quot;&gt;Rspack 0.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 0.x version&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/web-infra-dev/rsbuild&quot;&gt;Rsbuild&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;An out-of-the-box build tool based on Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/web-infra-dev/rspress&quot;&gt;Rspress&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A fast static site generator based on Rsbuild&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/web-infra-dev/rsdoctor&quot;&gt;Rsdoctor&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A one-stop build analyzer for Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/web-infra-dev/rslib&quot;&gt;Rslib&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A library development tool powered by Rsbuild&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/web-infra-dev/rspack-dev-server&quot;&gt;rspack-dev-server&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Dev server for Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rspack-contrib/rstack-examples&quot;&gt;rstack-examples&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Examples showcasing Rstack ecosystem tools (Rspack, Rsbuild, Rspress, Rsdoctor)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/web-infra-dev/rspack-sources&quot;&gt;rspack-sources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rust port of &lt;a href=&quot;https://www.npmjs.com/package/webpack-sources&quot;&gt;webpack-sources&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rspack-contrib/rstack-design-resources&quot;&gt;rstack-design-resources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Design resources for Rspack Stack&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/web-infra-dev/rspack/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/rspack/contributors.svg?width=890&amp;amp;button=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://web-infra-dev.github.io/rspack-ecosystem-benchmark/&quot;&gt;Benchmark&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://webpack.js.org/&quot;&gt;The webpack team and community&lt;/a&gt; for creating a great bundler and ecosystem from which we draw a lot of inspiration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sokra&quot;&gt;@sokra&lt;/a&gt; for the great work on the &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack&lt;/a&gt; project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ScriptedAlchemy&quot;&gt;@ScriptedAlchemy&lt;/a&gt; for creating Module Federation and helping Rspack connect with the community.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/swc-project/swc&quot;&gt;SWC&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/kdy1&quot;&gt;@kdy1&lt;/a&gt;, which powers Rspack&#39;s code parsing, transformation and minification.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/evanw/esbuild&quot;&gt;esbuild&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/evanw&quot;&gt;@evanw&lt;/a&gt;, which inspired the concurrent architecture of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/napi-rs/napi-rs&quot;&gt;NAPI-RS&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/Brooooooklyn&quot;&gt;@Brooooooklyn&lt;/a&gt;, which powers Rspack&#39;s node-binding implementation.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/parcel-bundler/parcel&quot;&gt;Parcel&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/devongovett&quot;&gt;@devongovett&lt;/a&gt; which is the pioneer of rust bundler and inspired Rspack&#39;s incremental rebuild design.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/yyx990803&quot;&gt;Evan You&lt;/a&gt; which inspired Rspack&#39;s compatibility design of webpack&#39;s ecosystem.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;rolldown-legacy&lt;/code&gt; project created by old Rolldown team, It&#39;s the predecessor of the &lt;a href=&quot;https://github.com/rolldown&quot;&gt;rolldown&lt;/a&gt; project, which explores the possibility of making a performant bundler in Rust with Rollup-compatible API. It inspires the design principles of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/jantimon&quot;&gt;@jantimon&lt;/a&gt;, &lt;code&gt;@rspack/html-plugin&lt;/code&gt; is a fork of &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;/a&gt; to avoid some webpack API usage not supported in Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/vercel/turbo&quot;&gt;Turbopack&lt;/a&gt; project which inspired the AST path logic of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/pmmmwh/react-refresh-webpack-plugin&quot;&gt;react-refresh-webpack-plugin&lt;/a&gt; created by &lt;a href=&quot;https://github.com/pmmmwh&quot;&gt;@pmmmwh&lt;/a&gt;, which inspires implement &lt;a href=&quot;https://github.com/rspack-contrib/rspack-plugin-react-refresh&quot;&gt;react refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/preactjs/prefresh&quot;&gt;prefresh&lt;/a&gt; created by &lt;a href=&quot;https://github.com/JoviDeCroock&quot;&gt;@Jovi De Croock&lt;/a&gt;, which inspires implement &lt;a href=&quot;https://github.com/rspack-contrib/rspack-plugin-preact-refresh&quot;&gt;preact refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/webpack-contrib/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/sokra&quot;&gt;@sokra&lt;/a&gt; which inspired implement css extract plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/webpack-contrib/copy-webpack-plugin&quot;&gt;copy-webpack-plugin&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/kevlened&quot;&gt;@kevlened&lt;/a&gt; which inspired implement copy rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/waysact/webpack-subresource-integrity&quot;&gt;webpack-subresource-integrity&lt;/a&gt; project created by &lt;a href=&quot;https://github.com/jscheid&quot;&gt;@jscheid&lt;/a&gt;, which inspires implement subresource integrity rspack plugin.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rspack is &lt;a href=&quot;https://github.com/web-infra-dev/rspack/raw/main/LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust</title>
      <link>https://github.com/rust-lang/rust</link>
      <description>&lt;p&gt;Empowering everyone to build reliable and efficient software.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-dark.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg&quot;&gt; 
  &lt;img alt=&quot;The Rust Programming Language: A language empowering everyone to build reliable and efficient software&quot; src=&quot;https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg?sanitize=true&quot; width=&quot;50%&quot;&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Website&lt;/a&gt; | &lt;a href=&quot;https://www.rust-lang.org/learn/get-started&quot;&gt;Getting started&lt;/a&gt; | &lt;a href=&quot;https://www.rust-lang.org/learn&quot;&gt;Learn&lt;/a&gt; | &lt;a href=&quot;https://www.rust-lang.org/learn#learn-use&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;This is the main source code repository for &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;. It contains the compiler, standard library, and documentation.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Fast and memory-efficient, suitable for critical services, embedded devices, and easily integrated with other languages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; Our rich type system and ownership model ensure memory and thread safety, reducing bugs at compile-time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; Comprehensive documentation, a compiler committed to providing great diagnostics, and advanced tooling including package manager and build tool (&lt;a href=&quot;https://github.com/rust-lang/cargo&quot;&gt;Cargo&lt;/a&gt;), auto-formatter (&lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;rustfmt&lt;/a&gt;), linter (&lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;Clippy&lt;/a&gt;) and editor support (&lt;a href=&quot;https://github.com/rust-lang/rust-analyzer&quot;&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Read &lt;a href=&quot;https://doc.rust-lang.org/book/ch01-01-installation.html&quot;&gt;&quot;Installation&quot;&lt;/a&gt; from &lt;a href=&quot;https://doc.rust-lang.org/book/index.html&quot;&gt;The Book&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing from Source&lt;/h2&gt; 
&lt;p&gt;If you really want to install from source (though this is not recommended), see &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/INSTALL.md&quot;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.rust-lang.org/community&quot;&gt;https://www.rust-lang.org/community&lt;/a&gt; for a list of chat platforms and forums.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-APACHE&quot;&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT&quot;&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Trademark&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://foundation.rust-lang.org/&quot;&gt;The Rust Foundation&lt;/a&gt; owns and protects the Rust and Cargo trademarks and logos (the &quot;Rust Trademarks&quot;).&lt;/p&gt; 
&lt;p&gt;If you want to use these names or brands, please read the &lt;a href=&quot;https://foundation.rust-lang.org/policies/logo-policy-and-media-guide/&quot;&gt;media guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Third-party logos may be subject to third-party copyrights and trademarks. See &lt;a href=&quot;https://www.rust-lang.org/policies/licenses&quot;&gt;Licenses&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tracel-ai/burn</title>
      <link>https://github.com/tracel-ai/burn</link>
      <description>&lt;p&gt;Burn is a new comprehensive dynamic Deep Learning Framework built using Rust with extreme flexibility, compute efficiency and portability as its primary goals.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/logo-burn-neutral.webp&quot; width=&quot;350px&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://discord.gg/uPEBbYYDB6&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1038839012602941528.svg?color=7289da&amp;amp;&amp;amp;logo=discord&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/burn&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/burn.svg?sanitize=true&quot; alt=&quot;Current Crates.io Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/burn&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/msrv/burn&quot; alt=&quot;Minimum Supported Rust Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://burn.dev/docs/burn&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-latest-blue&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/tracel-ai/burn/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/tracel-ai/burn/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Test Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/tracel-ai/burn&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/tracel-ai/burn/branch/main/graph/badge.svg?sanitize=true&quot; alt=&quot;CodeCov&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://runblaze.dev&quot;&gt;&lt;img src=&quot;https://runblaze.dev/gh/114041730602611213183421653564341667516/badge.svg?sanitize=true&quot; alt=&quot;Blaze&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://shields.io/badge/license-MIT%2FApache--2.0-blue&quot; alt=&quot;license&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p&gt;&lt;strong&gt;Burn is a new comprehensive dynamic Deep Learning Framework built using Rust &lt;br&gt; with extreme flexibility, compute efficiency and portability as its primary goals.&lt;/strong&gt;&lt;/p&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div align=&quot;left&quot;&gt; 
 &lt;h2&gt;Performance&lt;/h2&gt; 
 &lt;div align=&quot;left&quot;&gt; 
  &lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-blazingly-fast.png&quot; height=&quot;96px&quot;&gt; 
  &lt;p&gt;Because we believe the goal of a deep learning framework is to convert computation into useful intelligence, we have made performance a core pillar of Burn. We strive to achieve top efficiency by leveraging multiple optimization techniques described below.&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;Click on each section for more details&lt;/strong&gt; 👇&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Automatic kernel fusion 💥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Using Burn means having your models optimized on any backend. When possible, we provide a way to automatically and dynamically create custom kernels that minimize data relocation between different memory spaces, extremely useful when moving memory is the bottleneck.&lt;/p&gt; 
  &lt;p&gt;As an example, you could write your own GELU activation function with the high level tensor api (see Rust code snippet below).&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;fn gelu_custom&amp;lt;B: Backend, const D: usize&amp;gt;(x: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
    let x = x.clone() * ((x / SQRT_2).erf() + 1);
    x / 2
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Then, at runtime, a custom low-level kernel will be automatically created for your specific implementation and will rival a handcrafted GPU implementation. The kernel consists of about 60 lines of WGSL &lt;a href=&quot;%22https://www.w3.org/TR/WGSL/https://www.w3.org/TR/WGSL/%22&quot;&gt;WebGPU Shading Language&lt;/a&gt;, an extremely verbose lower level shader language you probably don&#39;t want to program your deep learning models in!&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;As of now, our fusion strategy is only implemented for our own WGPU and CUDA backends and supports only a subset of operations. We plan to add more operations very soon and extend this technique to other future in-house backends.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Asynchronous execution ❤️‍🔥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;For &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/#backends&quot;&gt;backends developed from scratch by the Burn team&lt;/a&gt;, an asynchronous execution style is used, which allows to perform various optimizations, such as the previously mentioned automatic kernel fusion.&lt;/p&gt; 
  &lt;p&gt;Asynchronous execution also ensures that the normal execution of the framework does not block the model computations, which implies that the framework overhead won&#39;t impact the speed of execution significantly. Conversely, the intense computations in the model do not interfere with the responsiveness of the framework. For more information about our asynchronous backends, see &lt;a href=&quot;https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Thread-safe building blocks 🦞 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn emphasizes thread safety by leveraging the &lt;a href=&quot;https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html&quot;&gt;ownership system of Rust&lt;/a&gt;. With Burn, each module is the owner of its weights. It is therefore possible to send a module to another thread for computing the gradients, then send the gradients to the main thread that can aggregate them, and &lt;em&gt;voilà&lt;/em&gt;, you get multi-device training.&lt;/p&gt; 
  &lt;p&gt;This is a very different approach from what PyTorch does, where backpropagation actually mutates the &lt;em&gt;grad&lt;/em&gt; attribute of each tensor parameter. This is not a thread-safe operation and therefore requires lower level synchronization primitives, see &lt;a href=&quot;https://pytorch.org/docs/stable/distributed.html&quot;&gt;distributed training&lt;/a&gt; for reference. Note that this is still very fast, but not compatible across different backends and quite hard to implement.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Intelligent memory management 🦀 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;One of the main roles of a deep learning framework is to reduce the amount of memory necessary to run models. The naive way of handling memory is that each tensor has its own memory space, which is allocated when the tensor is created then deallocated as the tensor gets out of scope. However, allocating and deallocating data is very costly, so a memory pool is often required to achieve good throughput. Burn offers an infrastructure that allows for easily creating and selecting memory management strategies for backends. For more details on memory management in Burn, see &lt;a href=&quot;https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;Another very important memory optimization of Burn is that we keep track of when a tensor can be mutated in-place just by using the ownership system well. Even though it is a rather small memory optimization on its own, it adds up considerably when training or running inference with larger models and contributes to reduce the memory usage even more. For more information, see &lt;a href=&quot;https://burn.dev/blog/burn-rusty-approach-to-tensor-handling&quot;&gt;this blog post about tensor handling&lt;/a&gt;.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Automatic kernel selection 🎯 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;A good deep learning framework should ensure that models run smoothly on all hardware. However, not all hardware share the same behavior in terms of execution speed. For instance, a matrix multiplication kernel can be launched with many different parameters, which are highly sensitive to the size of the matrices and the hardware. Using the wrong configuration could reduce the speed of execution by a large factor (10 times or even more in extreme cases), so choosing the right kernels becomes a priority.&lt;/p&gt; 
  &lt;p&gt;With our home-made backends, we run benchmarks automatically and choose the best configuration for the current hardware and matrix sizes with a reasonable caching strategy.&lt;/p&gt; 
  &lt;p&gt;This adds a small overhead by increasing the warmup execution time, but stabilizes quickly after a few forward and backward passes, saving lots of time in the long run. Note that this feature isn&#39;t mandatory, and can be disabled when cold starts are a priority over optimized throughput.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Hardware specific features 🔥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;It is no secret that deep learning is mostly relying on matrix multiplication as its core operation, since this is how fully-connected neural networks are modeled.&lt;/p&gt; 
  &lt;p&gt;More and more, hardware manufacturers optimize their chips specifically for matrix multiplication workloads. For instance, Nvidia has its &lt;em&gt;Tensor Cores&lt;/em&gt; and today most cellphones have AI specialized chips. As of this moment, we support Tensor Cores with our LibTorch, Candle, CUDA and WGPU/SPIR-V backends, but not other accelerators yet. We hope &lt;a href=&quot;https://github.com/gpuweb/gpuweb/issues/4195&quot;&gt;this issue&lt;/a&gt; gets resolved at some point to bring support to our WGPU backend.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Custom Backend Extension 🎒 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn aims to be the most flexible deep learning framework. While it&#39;s crucial to maintain compatibility with a wide variety of backends, Burn also provides the ability to extend the functionalities of a backend implementation to suit your personal modeling requirements.&lt;/p&gt; 
  &lt;p&gt;This versatility is advantageous in numerous ways, such as supporting custom operations like flash attention or manually writing your own kernel for a specific backend to enhance performance. See &lt;a href=&quot;https://burn.dev/burn-book/advanced/backend-extension/index.html&quot;&gt;this section&lt;/a&gt; in the Burn Book 🔥 for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h2&gt;Training &amp;amp; Inference&lt;/h2&gt; 
 &lt;div align=&quot;left&quot;&gt; 
  &lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-wall.png&quot; height=&quot;96px&quot;&gt; 
  &lt;p&gt;The whole deep learning workflow is made easy with Burn, as you can monitor your training progress with an ergonomic dashboard, and run inference everywhere from embedded devices to large GPU clusters.&lt;/p&gt; 
  &lt;p&gt;Burn was built from the ground up with training and inference in mind. It&#39;s also worth noting how Burn, in comparison to frameworks like PyTorch, simplifies the transition from training to deployment, eliminating the need for code changes.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div align=&quot;center&quot;&gt; 
  &lt;br&gt; 
  &lt;a href=&quot;https://www.youtube.com/watch?v=N9RM5CQbNQc&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/burn-train-tui.png&quot; alt=&quot;Burn Train TUI&quot; width=&quot;75%&quot;&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Click on the following sections to expand 👇&lt;/strong&gt;&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Training Dashboard 📈 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;As you can see in the previous video (click on the picture!), a new terminal UI dashboard based on the &lt;a href=&quot;https://github.com/ratatui-org/ratatui&quot;&gt;Ratatui&lt;/a&gt; crate allows users to follow their training with ease without having to connect to any external application.&lt;/p&gt; 
  &lt;p&gt;You can visualize your training and validation metrics updating in real-time and analyze the lifelong progression or recent history of any registered metrics using only the arrow keys. Break from the training loop without crashing, allowing potential checkpoints to be fully written or important pieces of code to complete without interruption 🛡&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; ONNX Support 🐫 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;ONNX (Open Neural Network Exchange) is an open-standard format that exports both the architecture and the weights of a deep learning model.&lt;/p&gt; 
  &lt;p&gt;Burn supports the importation of models that follow the ONNX standard so you can easily port a model you have written in another framework like TensorFlow or PyTorch to Burn to benefit from all the advantages our framework offers.&lt;/p&gt; 
  &lt;p&gt;Our ONNX support is further described in &lt;a href=&quot;https://burn.dev/burn-book/import/onnx-model.html&quot;&gt;this section of the Burn Book 🔥&lt;/a&gt;.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This crate is in active development and currently supports a &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-import/SUPPORTED-ONNX-OPS.md&quot;&gt;limited set of ONNX operators&lt;/a&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Importing PyTorch Models 🚚 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Support for loading of PyTorch model weights into Burn’s native model architecture, ensuring seamless integration. See &lt;a href=&quot;https://burn.dev/burn-book/import/pytorch-model.html&quot;&gt;Burn Book 🔥 section on importing PyTorch&lt;/a&gt;&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Inference in the Browser 🌐 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Several of our backends can compile to Web Assembly: Candle and NdArray for CPU, and WGPU for GPU. This means that you can run inference directly within a browser. We provide several examples of this:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web&quot;&gt;MNIST&lt;/a&gt; where you can draw digits and a small convnet tries to find which one it is! 2️⃣ 7️⃣ 😰&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web&quot;&gt;Image Classification&lt;/a&gt; where you can upload images and classify them! 🌄&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Embedded: &lt;i&gt;no_std&lt;/i&gt; support ⚙️ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn&#39;s core components support &lt;a href=&quot;https://docs.rust-embedded.org/book/intro/no-std.html&quot;&gt;no_std&lt;/a&gt;. This means it can run in bare metal environment such as embedded devices without an operating system.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;As of now, only the NdArray backend can be used in a &lt;em&gt;no_std&lt;/em&gt; environment.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h2&gt;Backends&lt;/h2&gt; 
 &lt;div align=&quot;left&quot;&gt; 
  &lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/backend-chip.png&quot; height=&quot;96px&quot;&gt; Burn strives to be as fast as possible on as many hardwares as possible, with robust implementations. We believe this flexibility is crucial for modern needs where you may train your models in the cloud, then deploy on customer hardwares, which vary from user to user. 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;Compared to other frameworks, Burn has a very different approach to supporting many backends. By design, most code is generic over the Backend trait, which allows us to build Burn with swappable backends. This makes composing backend possible, augmenting them with additional functionalities such as autodifferentiation and automatic kernel fusion.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;We already have many backends implemented, all listed below 👇&lt;/strong&gt;&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; WGPU (WebGPU): Cross-Platform GPU Backend 🌐 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;&lt;strong&gt;The go-to backend for running on any GPU.&lt;/strong&gt;&lt;/p&gt; 
  &lt;p&gt;Based on the most popular and well-supported Rust graphics library, &lt;a href=&quot;https://wgpu.rs&quot;&gt;WGPU&lt;/a&gt;, this backend automatically targets Vulkan, OpenGL, Metal, Direct X11/12, and WebGPU, by using the WebGPU shading language &lt;a href=&quot;https://www.w3.org/TR/WGSL/&quot;&gt;WGSL&lt;/a&gt;, or optionally &lt;a href=&quot;https://www.khronos.org/spir/&quot;&gt;SPIR-V&lt;/a&gt; when targeting Vulkan. It can also be compiled to Web Assembly to run in the browser while leveraging the GPU, see &lt;a href=&quot;https://antimora.github.io/image-classification/&quot;&gt;this demo&lt;/a&gt;. For more information on the benefits of this backend, see &lt;a href=&quot;https://burn.dev/blog/cross-platform-gpu-backend&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;The WGPU backend is our first &quot;in-house backend&quot;, which means we have complete control over its implementation details. It is fully optimized with the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/#performance&quot;&gt;performance characteristics mentioned earlier&lt;/a&gt;, as it serves as our research playground for a variety of optimizations. We&#39;ve since added CUDA, ROCm and SPIR-V support using the same compiler infrastructure, so a kernel written for burn once, can run anywhere.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-wgpu/README.md&quot;&gt;WGPU Backend README&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-cuda/README.md&quot;&gt;CUDA Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Candle: Backend using the Candle bindings 🕯 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Based on &lt;a href=&quot;https://github.com/huggingface/candle&quot;&gt;Candle by Hugging Face&lt;/a&gt;, a minimalist ML framework for Rust with a focus on performance and ease of use, this backend can run on CPU with support for Web Assembly or on Nvidia GPUs using CUDA.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-candle/README.md&quot;&gt;Candle Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; This backend is not fully completed yet, but can work in some contexts like inference.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; LibTorch: Backend using the LibTorch bindings 🎆 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;PyTorch doesn&#39;t need an introduction in the realm of deep learning. This backend leverages &lt;a href=&quot;https://github.com/LaurentMazare/tch-rs&quot;&gt;PyTorch Rust bindings&lt;/a&gt;, enabling you to use LibTorch C++ kernels on CPU, CUDA and Metal.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-tch/README.md&quot;&gt;LibTorch Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; NdArray: Backend using the NdArray primitive as data structure 🦐 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;This CPU backend is admittedly not our fastest backend, but offers extreme portability.&lt;/p&gt; 
  &lt;p&gt;It is our only backend supporting &lt;em&gt;no_std&lt;/em&gt;.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-ndarray/README.md&quot;&gt;NdArray Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Autodiff: Backend decorator that brings backpropagation to any backend 🔄 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Contrary to the aforementioned backends, Autodiff is actually a backend &lt;em&gt;decorator&lt;/em&gt;. This means that it cannot exist by itself; it must encapsulate another backend.&lt;/p&gt; 
  &lt;p&gt;The simple act of wrapping a base backend with Autodiff transparently equips it with autodifferentiation support, making it possible to call backward on your model.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use burn::backend::{Autodiff, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Wgpu&amp;gt;;

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!(&quot;{y_grad}&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, it is impossible to make the mistake of calling backward on a model that runs on a backend that does not support autodiff (for inference), as this method is only offered by an Autodiff backend.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-autodiff/README.md&quot;&gt;Autodiff Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Fusion: Backend decorator that brings kernel fusion to backends that support it 💥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;This backend decorator enhances a backend with kernel fusion, provided that the inner backend supports it. Note that you can compose this backend with other backend decorators such as Autodiff. For now, only the WGPU and CUDA backends have support for fused kernels.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use burn::backend::{Autodiff, Fusion, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Fusion&amp;lt;Wgpu&amp;gt;&amp;gt;;

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!(&quot;{y_grad}&quot;);
}

&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, we plan to implement automatic gradient checkpointing based on compute bound and memory bound operations, which will work gracefully with the fusion backend to make your code run even faster during training, see &lt;a href=&quot;https://github.com/tracel-ai/burn/issues/936&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-fusion/README.md&quot;&gt;Fusion Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h2&gt;Getting Started&lt;/h2&gt; 
 &lt;div align=&quot;left&quot;&gt; 
  &lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-walking.png&quot; height=&quot;96px&quot;&gt; 
  &lt;p&gt;Just heard of Burn? You are at the right place! Just continue reading this section and we hope you can get on board really quickly.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;details&gt; 
  &lt;summary&gt; The Burn Book 🔥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;To begin working effectively with Burn, it is crucial to understand its key components and philosophy. This is why we highly recommend new users to read the first sections of &lt;a href=&quot;https://burn.dev/burn-book/&quot;&gt;The Burn Book 🔥&lt;/a&gt;. It provides detailed examples and explanations covering every facet of the framework, including building blocks like tensors, modules, and optimizers, all the way to advanced usage, like coding your own GPU kernels.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The project is constantly evolving, and we try as much as possible to keep the book up to date with new additions. However, we might miss some details sometimes, so if you see something weird, let us know! We also gladly accept Pull Requests 😄&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Examples 🙏 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Let&#39;s start with a code snippet that shows how intuitive the framework is to use! In the following, we declare a neural network module with some parameters along with its forward pass.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use burn::nn;
use burn::module::Module;
use burn::tensor::backend::Backend;

#[derive(Module, Debug)]
pub struct PositionWiseFeedForward&amp;lt;B: Backend&amp;gt; {
    linear_inner: nn::Linear&amp;lt;B&amp;gt;,
    linear_outer: nn::Linear&amp;lt;B&amp;gt;,
    dropout: nn::Dropout,
    gelu: nn::Gelu,
}

impl&amp;lt;B: Backend&amp;gt; PositionWiseFeedForward&amp;lt;B&amp;gt; {
    pub fn forward&amp;lt;const D: usize&amp;gt;(&amp;amp;self, input: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
        let x = self.linear_inner.forward(input);
        let x = self.gelu.forward(x);
        let x = self.dropout.forward(x);

        self.linear_outer.forward(x)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;We have a somewhat large amount of &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples&quot;&gt;examples&lt;/a&gt; in the repository that shows how to use the framework in different scenarios.&lt;/p&gt; 
  &lt;p&gt;Following &lt;a href=&quot;https://burn.dev/burn-book/&quot;&gt;the book&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/guide&quot;&gt;Basic Workflow&lt;/a&gt; : Creates a custom CNN &lt;code&gt;Module&lt;/code&gt; to train on the MNIST dataset and use for inference.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-training-loop&quot;&gt;Custom Training Loop&lt;/a&gt; : Implements a basic training loop instead of using the &lt;code&gt;Learner&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-wgpu-kernel&quot;&gt;Custom WGPU Kernel&lt;/a&gt; : Learn how to create your own custom operation with the WGPU backend.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;Additional examples:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-csv-dataset&quot;&gt;Custom CSV Dataset&lt;/a&gt; : Implements a dataset to parse CSV data for a regression task.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/simple-regression&quot;&gt;Regression&lt;/a&gt; : Trains a simple MLP on the California Housing dataset to predict the median house value for a district.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-image-dataset&quot;&gt;Custom Image Dataset&lt;/a&gt; : Trains a simple CNN on custom image dataset following a simple folder structure.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-renderer&quot;&gt;Custom Renderer&lt;/a&gt; : Implements a custom renderer to display the &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/building-blocks/learner.md&quot;&gt;&lt;code&gt;Learner&lt;/code&gt;&lt;/a&gt; progress.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web&quot;&gt;Image Classification Web&lt;/a&gt; : Image classification web browser demo using Burn, WGPU and WebAssembly.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web&quot;&gt;MNIST Inference on Web&lt;/a&gt; : An interactive MNIST inference demo in the browser. The demo is available &lt;a href=&quot;https://burn.dev/demo/&quot;&gt;online&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist&quot;&gt;MNIST Training&lt;/a&gt; : Demonstrates how to train a custom &lt;code&gt;Module&lt;/code&gt; (MLP) with the &lt;code&gt;Learner&lt;/code&gt; configured to log metrics and keep training checkpoints.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/named-tensor&quot;&gt;Named Tensor&lt;/a&gt; : Performs operations with the experimental &lt;code&gt;NamedTensor&lt;/code&gt; feature.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/onnx-inference&quot;&gt;ONNX Import Inference&lt;/a&gt; : Imports an ONNX model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/pytorch-import&quot;&gt;PyTorch Import Inference&lt;/a&gt; : Imports a PyTorch model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-classification&quot;&gt;Text Classification&lt;/a&gt; : Trains a text classification transformer model on the AG News or DbPedia dataset. The trained model can then be used to classify a text sample.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-generation&quot;&gt;Text Generation&lt;/a&gt; : Trains a text generation transformer model on the DbPedia dataset.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/examples/wgan&quot;&gt;Wasserstein GAN MNIST&lt;/a&gt; : Trains a WGAN model to generate new handwritten digits based on MNIST.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;For more practical insights, you can clone the repository and run any of them directly on your computer!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Pre-trained Models 🤖 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;We keep an updated and curated list of models and examples built with Burn, see the &lt;a href=&quot;https://github.com/tracel-ai/models&quot;&gt;tracel-ai/models repository&lt;/a&gt; for more details.&lt;/p&gt; 
  &lt;p&gt;Don&#39;t see the model you want? Don&#39;t hesitate to open an issue, and we may prioritize it. Built a model using Burn and want to share it? You can also open a Pull Request and add your model under the community section!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Why use Rust for Deep Learning? 🦀 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Deep Learning is a special form of software where you need very high level abstractions as well as extremely fast execution time. Rust is the perfect candidate for that use case since it provides zero-cost abstractions to easily create neural network modules, and fine-grained control over memory to optimize every detail.&lt;/p&gt; 
  &lt;p&gt;It&#39;s important that a framework be easy to use at a high level so that its users can focus on innovating in the AI field. However, since running models relies so heavily on computations, performance can&#39;t be neglected.&lt;/p&gt; 
  &lt;p&gt;To this day, the mainstream solution to this problem has been to offer APIs in Python, but rely on bindings to low-level languages such as C/C++. This reduces portability, increases complexity and creates frictions between researchers and engineers. We feel like Rust&#39;s approach to abstractions makes it versatile enough to tackle this two languages dichotomy.&lt;/p&gt; 
  &lt;p&gt;Rust also comes with the Cargo package manager, which makes it incredibly easy to build, test, and deploy from any environment, which is usually a pain in Python.&lt;/p&gt; 
  &lt;p&gt;Although Rust has the reputation of being a difficult language at first, we strongly believe it leads to more reliable, bug-free solutions built faster (after some practice 😅)!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Deprecation Note&lt;/strong&gt;&lt;br&gt;Since &lt;code&gt;0.14.0&lt;/code&gt;, the internal structure for tensor data has changed. The previous &lt;code&gt;Data&lt;/code&gt; struct was deprecated and officially removed since &lt;code&gt;0.17.0&lt;/code&gt; in favor of the new &lt;code&gt;TensorData&lt;/code&gt; struct, which allows for more flexibility by storing the underlying data as bytes and keeping the data type as a field. If you are using &lt;code&gt;Data&lt;/code&gt; in your code, make sure to switch to &lt;code&gt;TensorData&lt;/code&gt;.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;!-- &gt;
&gt; In the event that you are trying to load a model record saved in a previous version, make sure to
&gt; enable the `record-backward-compat` feature using a previous version of burn (&lt;=0.16.0). Otherwise,
&gt; the record won&#39;t be deserialized correctly and you will get an error message (which will also point
&gt; you to the backward compatible feature flag). The backward compatibility was maintained for
&gt; deserialization (loading), so as soon as you have saved the record again it will be saved according
&gt; to the new structure and you will be able to upgrade to this version. Please note that binary formats
&gt; are not backward compatible. Thus, you will need to load your record in a previous version and save it
&gt; to another of the self-describing record formats before using a compatible version (as described) with the
&gt; `record-backward-compat` feature flag. --&gt; 
 &lt;details id=&quot;deprecation&quot;&gt; 
  &lt;summary&gt; Loading Model Records From Previous Versions ⚠️ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;In the event that you are trying to load a model record saved in a version older than &lt;code&gt;0.14.0&lt;/code&gt;, make sure to use a compatible version (&lt;code&gt;0.14&lt;/code&gt;, &lt;code&gt;0.15&lt;/code&gt; or &lt;code&gt;0.16&lt;/code&gt;) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
  &lt;pre&gt;&lt;code&gt;features = [..., &quot;record-backward-compat&quot;]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Otherwise, the record won&#39;t be deserialized correctly and you will get an error message. This error will also point you to the backward compatible feature flag.&lt;/p&gt; 
  &lt;p&gt;The backward compatibility was maintained for deserialization when loading records. Therefore, as soon as you have saved the record again it will be saved according to the new structure and you can upgrade back to the current version&lt;/p&gt; 
  &lt;p&gt;Please note that binary formats are not backward compatible. Thus, you will need to load your record in a previous version and save it in any of the other self-describing record format (e.g., using the &lt;code&gt;NamedMpkFileRecorder&lt;/code&gt;) before using a compatible version (as described) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;h2&gt;Community&lt;/h2&gt; 
 &lt;div align=&quot;left&quot;&gt; 
  &lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-community.png&quot; height=&quot;96px&quot;&gt; 
  &lt;p&gt;If you are excited about the project, don&#39;t hesitate to join our &lt;a href=&quot;https://discord.gg/uPEBbYYDB6&quot;&gt;Discord&lt;/a&gt;! We try to be as welcoming as possible to everybody from any background. You can ask your questions and share what you built with the community!&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Before contributing, please take a moment to review our &lt;a href=&quot;https://github.com/tracel-ai/burn/tree/main/CODE-OF-CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;. It&#39;s also highly recommended to read the &lt;a href=&quot;https://github.com/tracel-ai/burn/tree/main/contributor-book/src/project-architecture&quot;&gt;architecture overview&lt;/a&gt;, which explains some of our architectural decisions. Refer to our &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;h2&gt;Status&lt;/h2&gt; 
 &lt;p&gt;Burn is currently in active development, and there will be breaking changes. While any resulting issues are likely to be easy to fix, there are no guarantees at this stage.&lt;/p&gt; 
 &lt;h2&gt;License&lt;/h2&gt; 
 &lt;p&gt;Burn is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-APACHE&quot;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-MIT&quot;&gt;LICENSE-MIT&lt;/a&gt; for details. Opening a pull request is assumed to signal agreement with these licensing terms.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>a2x/cs2-dumper</title>
      <link>https://github.com/a2x/cs2-dumper</link>
      <description>&lt;p&gt;Counter-Strike: 2 Offset Dumper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cs2-dumper&lt;/h1&gt; 
&lt;p&gt;An external offset/interface dumper for Counter-Strike 2, with support for both Windows &amp;amp; Linux. Powered by &lt;a href=&quot;https://github.com/memflow/memflow&quot;&gt;memflow&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The native Linux version is available in the &lt;a href=&quot;https://github.com/a2x/cs2-dumper/tree/linux&quot;&gt;linux&lt;/a&gt; branch.&lt;/p&gt; 
&lt;p&gt;For a work-in-progress offline version, please check out &lt;a href=&quot;https://github.com/a2x/cs2-analyzer&quot;&gt;cs2-analyzer&lt;/a&gt; and the web demo here: &lt;a href=&quot;https://a2x.github.io/cs2-analyzer&quot;&gt;https://a2x.github.io/cs2-analyzer&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can download the latest release from &lt;a href=&quot;https://github.com/a2x/cs2-dumper/releases&quot;&gt;Releases&lt;/a&gt; or compile it yourself. Note that compiling it yourself requires your Rust compiler version to be at least 1.74.0 or newer, and the nightly toolchain must be installed.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Ensure the game process is running (Being in the main menu should suffice).&lt;/li&gt; 
 &lt;li&gt;Run the &lt;code&gt;cs2-dumper&lt;/code&gt; executable (Note that some memflow connectors may require elevated privileges).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you run the executable without specifying an optional memflow connector name, it will automatically use the &lt;a href=&quot;https://github.com/memflow/memflow-native&quot;&gt;memflow-native&lt;/a&gt; OS layer to read the memory of the game process. If you wish to use an existing memflow connector instead, you can pass the &lt;code&gt;connector&lt;/code&gt; and optional &lt;code&gt;connector-args&lt;/code&gt; arguments to the program.&lt;/p&gt; 
&lt;p&gt;E.g. &lt;code&gt;sudo ./cs2-dumper -c pcileech -a :device=FPGA -vvv&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Available Arguments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-c, --connector &amp;lt;connector&amp;gt;&lt;/code&gt;: The name of the memflow connector to use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-a, --connector-args &amp;lt;connector-args&amp;gt;&lt;/code&gt;: Additional arguments to pass to the memflow connector.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-f, --file-types &amp;lt;file-types&amp;gt;&lt;/code&gt;: The types of files to generate. Default: &lt;code&gt;cs&lt;/code&gt;, &lt;code&gt;hpp&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;rs&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-i, --indent-size &amp;lt;indent-size&amp;gt;&lt;/code&gt;: The number of spaces to use per indentation level. Default: &lt;code&gt;4&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-o, --output &amp;lt;output&amp;gt;&lt;/code&gt;: The output directory to write the generated files to. Default: &lt;code&gt;output&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-p, --process-name &amp;lt;process-name&amp;gt;&lt;/code&gt;: The name of the game process. Default: &lt;code&gt;cs2.exe&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-v...&lt;/code&gt;: Increase logging verbosity. Can be specified multiple times.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-h, --help&lt;/code&gt;: Print help.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-V, --version&lt;/code&gt;: Print version.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Running Tests&lt;/h2&gt; 
&lt;p&gt;To run tests, use the following command: &lt;code&gt;cargo test -- --nocapture&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under the MIT license (&lt;a href=&quot;https://raw.githubusercontent.com/a2x/cs2-dumper/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
